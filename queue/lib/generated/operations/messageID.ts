/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/messageIDMappers";
import * as Parameters from "../models/parameters";
import { StorageClientContext } from "../storageClientContext";

/** Class representing a MessageID. */
export class MessageID {
  private readonly client: StorageClientContext;

  /**
   * Create a MessageID.
   * @param {StorageClientContext} client Reference to the service client.
   */
  constructor(client: StorageClientContext) {
    this.client = client;
  }

  /**
   * The Update operation was introduced with version 2011-08-18 of the Queue service API. The Update
   * Message operation updates the visibility timeout of a message. You can also use this operation
   * to update the contents of a message. A message must be in a format that can be included in an
   * XML request with UTF-8 encoding, and the encoded message can be up to 64KB in size.
   *
   * @param {QueueMessage} queueMessage A Message object which can be stored in a Queue
   *
   * @param {string} popReceipt Required. Specifies the valid pop receipt value returned from an
   * earlier call to the Get Messages or Update Message operation.
   *
   * @param {number} visibilitytimeout Optional. Specifies the new visibility timeout value, in
   * seconds, relative to server time. The default value is 30 seconds. A specified value must be
   * larger than or equal to 1 second, and cannot be larger than 7 days, or larger than 2 hours on
   * REST protocol versions prior to version 2011-08-18. The visibility timeout of a message can be
   * set to a value later than the expiry time.
   *
   * @param {MessageIDUpdateOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  update(queueMessage: Models.QueueMessage, popReceipt: string, visibilitytimeout: number): Promise<Models.MessageIDUpdateResponse>;
  update(queueMessage: Models.QueueMessage, popReceipt: string, visibilitytimeout: number, options: Models.MessageIDUpdateOptionalParams): Promise<Models.MessageIDUpdateResponse>;
  update(queueMessage: Models.QueueMessage, popReceipt: string, visibilitytimeout: number, callback: msRest.ServiceCallback<void>): void;
  update(queueMessage: Models.QueueMessage, popReceipt: string, visibilitytimeout: number, options: Models.MessageIDUpdateOptionalParams, callback: msRest.ServiceCallback<void>): void;
  update(queueMessage: Models.QueueMessage, popReceipt: string, visibilitytimeout: number, options?: Models.MessageIDUpdateOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<Models.MessageIDUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        queueMessage,
        popReceipt,
        visibilitytimeout,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.MessageIDUpdateResponse>;
  }

  /**
   * The Delete operation deletes the specified message.
   *
   * @param {string} popReceipt Required. Specifies the valid pop receipt value returned from an
   * earlier call to the Get Messages or Update Message operation.
   *
   * @param {MessageIDDeleteMethodOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  deleteMethod(popReceipt: string): Promise<Models.MessageIDDeleteResponse>;
  deleteMethod(popReceipt: string, options: Models.MessageIDDeleteMethodOptionalParams): Promise<Models.MessageIDDeleteResponse>;
  deleteMethod(popReceipt: string, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(popReceipt: string, options: Models.MessageIDDeleteMethodOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(popReceipt: string, options?: Models.MessageIDDeleteMethodOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<Models.MessageIDDeleteResponse> {
    return this.client.sendOperationRequest(
      {
        popReceipt,
        options
      },
      deleteMethodOperationSpec,
      callback) as Promise<Models.MessageIDDeleteResponse>;
  }

}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers, true);
const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{queueName}/messages/{messageid}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.popReceipt,
    Parameters.visibilitytimeout1,
    Parameters.timeout
  ],
  headerParameters: [
    Parameters.version,
    Parameters.requestId
  ],
  requestBody: {
    parameterPath: "queueMessage",
    mapper: {
      ...Mappers.QueueMessage,
      required: true
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    204: {
      headersMapper: Mappers.MessageIDUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  isXML: true,
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "{queueName}/messages/{messageid}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.popReceipt,
    Parameters.timeout
  ],
  headerParameters: [
    Parameters.version,
    Parameters.requestId
  ],
  responses: {
    204: {
      headersMapper: Mappers.MessageIDDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  isXML: true,
  serializer
};
