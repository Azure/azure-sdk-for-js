/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.CognitiveservicesLuisRuntime = {}),global.msRest));
}(this, (function (exports,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({

    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var IntentModel = {
        serializedName: "IntentModel",
        type: {
            name: "Composite",
            className: "IntentModel",
            modelProperties: {
                intent: {
                    serializedName: "intent",
                    type: {
                        name: "String"
                    }
                },
                score: {
                    serializedName: "score",
                    constraints: {
                        InclusiveMaximum: 1,
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var EntityModel = {
        serializedName: "EntityModel",
        type: {
            name: "Composite",
            className: "EntityModel",
            modelProperties: {
                entity: {
                    required: true,
                    serializedName: "entity",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                startIndex: {
                    required: true,
                    serializedName: "startIndex",
                    type: {
                        name: "Number"
                    }
                },
                endIndex: {
                    required: true,
                    serializedName: "endIndex",
                    type: {
                        name: "Number"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var CompositeChildModel = {
        serializedName: "CompositeChildModel",
        type: {
            name: "Composite",
            className: "CompositeChildModel",
            modelProperties: {
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CompositeEntityModel = {
        serializedName: "CompositeEntityModel",
        type: {
            name: "Composite",
            className: "CompositeEntityModel",
            modelProperties: {
                parentType: {
                    required: true,
                    serializedName: "parentType",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                children: {
                    required: true,
                    serializedName: "children",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CompositeChildModel"
                            }
                        }
                    }
                }
            }
        }
    };
    var Sentiment = {
        serializedName: "Sentiment",
        type: {
            name: "Composite",
            className: "Sentiment",
            modelProperties: {
                label: {
                    serializedName: "label",
                    type: {
                        name: "String"
                    }
                },
                score: {
                    serializedName: "score",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var LuisResult = {
        serializedName: "LuisResult",
        type: {
            name: "Composite",
            className: "LuisResult",
            modelProperties: {
                query: {
                    serializedName: "query",
                    type: {
                        name: "String"
                    }
                },
                alteredQuery: {
                    serializedName: "alteredQuery",
                    type: {
                        name: "String"
                    }
                },
                topScoringIntent: {
                    serializedName: "topScoringIntent",
                    type: {
                        name: "Composite",
                        className: "IntentModel"
                    }
                },
                intents: {
                    serializedName: "intents",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IntentModel"
                            }
                        }
                    }
                },
                entities: {
                    serializedName: "entities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EntityModel",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                },
                compositeEntities: {
                    serializedName: "compositeEntities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CompositeEntityModel"
                            }
                        }
                    }
                },
                sentimentAnalysis: {
                    serializedName: "sentimentAnalysis",
                    type: {
                        name: "Composite",
                        className: "Sentiment"
                    }
                }
            }
        }
    };
    var EntityWithScore = {
        serializedName: "EntityWithScore",
        type: {
            name: "Composite",
            className: "EntityWithScore",
            modelProperties: __assign({}, EntityModel.type.modelProperties, { score: {
                    required: true,
                    serializedName: "score",
                    constraints: {
                        InclusiveMaximum: 1,
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                } }),
            additionalProperties: EntityModel.type.additionalProperties
        }
    };
    var EntityWithResolution = {
        serializedName: "EntityWithResolution",
        type: {
            name: "Composite",
            className: "EntityWithResolution",
            modelProperties: __assign({}, EntityModel.type.modelProperties, { resolution: {
                    required: true,
                    serializedName: "resolution",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: EntityModel.type.additionalProperties
        }
    };
    var APIError = {
        serializedName: "APIError",
        type: {
            name: "Composite",
            className: "APIError",
            modelProperties: {
                statusCode: {
                    serializedName: "statusCode",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        IntentModel: IntentModel,
        EntityModel: EntityModel,
        CompositeChildModel: CompositeChildModel,
        CompositeEntityModel: CompositeEntityModel,
        Sentiment: Sentiment,
        LuisResult: LuisResult,
        EntityWithScore: EntityWithScore,
        EntityWithResolution: EntityWithResolution,
        APIError: APIError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        LuisResult: LuisResult,
        IntentModel: IntentModel,
        EntityModel: EntityModel,
        CompositeEntityModel: CompositeEntityModel,
        CompositeChildModel: CompositeChildModel,
        Sentiment: Sentiment,
        APIError: APIError,
        EntityWithScore: EntityWithScore,
        EntityWithResolution: EntityWithResolution
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var appId = {
        parameterPath: "appId",
        mapper: {
            required: true,
            serializedName: "appId",
            type: {
                name: "String"
            }
        }
    };
    var bingSpellCheckSubscriptionKey = {
        parameterPath: [
            "options",
            "bingSpellCheckSubscriptionKey"
        ],
        mapper: {
            serializedName: "bing-spell-check-subscription-key",
            type: {
                name: "String"
            }
        }
    };
    var endpoint = {
        parameterPath: "endpoint",
        mapper: {
            required: true,
            serializedName: "Endpoint",
            defaultValue: '',
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var log = {
        parameterPath: [
            "options",
            "log"
        ],
        mapper: {
            serializedName: "log",
            type: {
                name: "Boolean"
            }
        }
    };
    var spellCheck = {
        parameterPath: [
            "options",
            "spellCheck"
        ],
        mapper: {
            serializedName: "spellCheck",
            type: {
                name: "Boolean"
            }
        }
    };
    var staging = {
        parameterPath: [
            "options",
            "staging"
        ],
        mapper: {
            serializedName: "staging",
            type: {
                name: "Boolean"
            }
        }
    };
    var timezoneOffset = {
        parameterPath: [
            "options",
            "timezoneOffset"
        ],
        mapper: {
            serializedName: "timezoneOffset",
            type: {
                name: "Number"
            }
        }
    };
    var verbose = {
        parameterPath: [
            "options",
            "verbose"
        ],
        mapper: {
            serializedName: "verbose",
            type: {
                name: "Boolean"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Prediction. */
    var Prediction = /** @class */ (function () {
        /**
         * Create a Prediction.
         * @param {LUISRuntimeClientContext} client Reference to the service client.
         */
        function Prediction(client) {
            this.client = client;
        }
        Prediction.prototype.resolve = function (appId$$1, query, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                query: query,
                options: options
            }, resolveOperationSpec, callback);
        };
        return Prediction;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var resolveOperationSpec = {
        httpMethod: "POST",
        path: "apps/{appId}",
        urlParameters: [
            endpoint,
            appId
        ],
        queryParameters: [
            timezoneOffset,
            verbose,
            staging,
            spellCheck,
            bingSpellCheckSubscriptionKey,
            log
        ],
        requestBody: {
            parameterPath: "query",
            mapper: {
                required: true,
                serializedName: "query",
                constraints: {
                    MaxLength: 500
                },
                type: {
                    name: "String"
                }
            }
        },
        responses: {
            200: {
                bodyMapper: LuisResult
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/cognitiveservices-luis-runtime";
    var packageVersion = "1.0.0";
    var LUISRuntimeClientContext = /** @class */ (function (_super) {
        __extends(LUISRuntimeClientContext, _super);
        /**
         * Initializes a new instance of the LUISRuntimeClientContext class.
         * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
         * https://westus.api.cognitive.microsoft.com).
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param [options] The parameter options
         */
        function LUISRuntimeClientContext(endpoint, credentials, options) {
            var _this = this;
            if (endpoint === null || endpoint === undefined) {
                throw new Error('\'endpoint\' cannot be null.');
            }
            if (credentials === null || credentials === undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.baseUri = "{Endpoint}";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.endpoint = endpoint;
            _this.credentials = credentials;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            return _this;
        }
        return LUISRuntimeClientContext;
    }(msRest.ServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var LUISRuntimeClient = /** @class */ (function (_super) {
        __extends(LUISRuntimeClient, _super);
        /**
         * Initializes a new instance of the LUISRuntimeClient class.
         * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
         * https://westus.api.cognitive.microsoft.com).
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param [options] The parameter options
         */
        function LUISRuntimeClient(endpoint, credentials, options) {
            var _this = _super.call(this, endpoint, credentials, options) || this;
            _this.prediction = new Prediction(_this);
            return _this;
        }
        return LUISRuntimeClient;
    }(LUISRuntimeClientContext));

    exports.LUISRuntimeClient = LUISRuntimeClient;
    exports.LUISRuntimeClientContext = LUISRuntimeClientContext;
    exports.LUISRuntimeModels = index;
    exports.LUISRuntimeMappers = mappers;
    exports.Prediction = Prediction;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=cognitiveservices-luis-runtime.js.map
