/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmMaps = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for KeyType.
     * Possible values include: 'primary', 'secondary'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: KeyType = <KeyType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var KeyType;
    (function (KeyType) {
        KeyType["Primary"] = "primary";
        KeyType["Secondary"] = "secondary";
    })(KeyType || (KeyType = {}));

    var index = /*#__PURE__*/Object.freeze({
        get KeyType () { return KeyType; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var ErrorDetailsItem = {
        serializedName: "Error_detailsItem",
        type: {
            name: "Composite",
            className: "ErrorDetailsItem",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    readOnly: true,
                    serializedName: "target",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorModel = {
        serializedName: "Error",
        type: {
            name: "Composite",
            className: "ErrorModel",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    readOnly: true,
                    serializedName: "target",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    readOnly: true,
                    serializedName: "details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorDetailsItem"
                            }
                        }
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Sku = {
        serializedName: "Sku",
        type: {
            name: "Composite",
            className: "Sku",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    readOnly: true,
                    serializedName: "tier",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MapsAccount = {
        serializedName: "MapsAccount",
        type: {
            name: "Composite",
            className: "MapsAccount",
            modelProperties: __assign({}, Resource.type.modelProperties, { location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, tags: {
                    readOnly: true,
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, sku: {
                    readOnly: true,
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                } })
        }
    };
    var MapsAccountCreateParameters = {
        serializedName: "MapsAccountCreateParameters",
        type: {
            name: "Composite",
            className: "MapsAccountCreateParameters",
            modelProperties: {
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                sku: {
                    required: true,
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }
            }
        }
    };
    var MapsAccountUpdateParameters = {
        serializedName: "MapsAccountUpdateParameters",
        type: {
            name: "Composite",
            className: "MapsAccountUpdateParameters",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }
            }
        }
    };
    var MapsAccountsMoveRequest = {
        serializedName: "MapsAccountsMoveRequest",
        type: {
            name: "Composite",
            className: "MapsAccountsMoveRequest",
            modelProperties: {
                targetResourceGroup: {
                    required: true,
                    serializedName: "targetResourceGroup",
                    type: {
                        name: "String"
                    }
                },
                resourceIds: {
                    required: true,
                    serializedName: "resourceIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var MapsKeySpecification = {
        serializedName: "MapsKeySpecification",
        type: {
            name: "Composite",
            className: "MapsKeySpecification",
            modelProperties: {
                keyType: {
                    required: true,
                    serializedName: "keyType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MapsAccountKeys = {
        serializedName: "MapsAccountKeys",
        type: {
            name: "Composite",
            className: "MapsAccountKeys",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                primaryKey: {
                    readOnly: true,
                    serializedName: "primaryKey",
                    type: {
                        name: "String"
                    }
                },
                secondaryKey: {
                    readOnly: true,
                    serializedName: "secondaryKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MapsOperationsValueItemDisplay = {
        serializedName: "MapsOperations_valueItem_display",
        type: {
            name: "Composite",
            className: "MapsOperationsValueItemDisplay",
            modelProperties: {
                provider: {
                    readOnly: true,
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    readOnly: true,
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    readOnly: true,
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    readOnly: true,
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MapsOperationsValueItem = {
        serializedName: "MapsOperations_valueItem",
        type: {
            name: "Composite",
            className: "MapsOperationsValueItem",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "MapsOperationsValueItemDisplay"
                    }
                },
                origin: {
                    readOnly: true,
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MapsAccounts = {
        serializedName: "MapsAccounts",
        type: {
            name: "Composite",
            className: "MapsAccounts",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MapsAccount"
                            }
                        }
                    }
                }
            }
        }
    };
    var MapsOperations = {
        serializedName: "MapsOperations",
        type: {
            name: "Composite",
            className: "MapsOperations",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MapsOperationsValueItem"
                            }
                        }
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        ErrorDetailsItem: ErrorDetailsItem,
        ErrorModel: ErrorModel,
        Resource: Resource,
        Sku: Sku,
        MapsAccount: MapsAccount,
        MapsAccountCreateParameters: MapsAccountCreateParameters,
        MapsAccountUpdateParameters: MapsAccountUpdateParameters,
        MapsAccountsMoveRequest: MapsAccountsMoveRequest,
        MapsKeySpecification: MapsKeySpecification,
        MapsAccountKeys: MapsAccountKeys,
        MapsOperationsValueItemDisplay: MapsOperationsValueItemDisplay,
        MapsOperationsValueItem: MapsOperationsValueItem,
        MapsAccounts: MapsAccounts,
        MapsOperations: MapsOperations
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        MapsAccountCreateParameters: MapsAccountCreateParameters,
        Sku: Sku,
        MapsAccount: MapsAccount,
        Resource: Resource,
        BaseResource: BaseResource,
        ErrorModel: ErrorModel,
        ErrorDetailsItem: ErrorDetailsItem,
        MapsAccountUpdateParameters: MapsAccountUpdateParameters,
        MapsAccounts: MapsAccounts,
        MapsAccountsMoveRequest: MapsAccountsMoveRequest,
        MapsAccountKeys: MapsAccountKeys,
        MapsKeySpecification: MapsKeySpecification,
        MapsOperations: MapsOperations,
        MapsOperationsValueItem: MapsOperationsValueItem,
        MapsOperationsValueItemDisplay: MapsOperationsValueItemDisplay
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var accountName = {
        parameterPath: "accountName",
        mapper: {
            required: true,
            serializedName: "accountName",
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Accounts. */
    var Accounts = /** @class */ (function () {
        /**
         * Create a Accounts.
         * @param {MapsManagementClientContext} client Reference to the service client.
         */
        function Accounts(client) {
            this.client = client;
        }
        Accounts.prototype.createOrUpdate = function (resourceGroupName$$1, accountName$$1, mapsAccountCreateParameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                mapsAccountCreateParameters: mapsAccountCreateParameters,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        Accounts.prototype.update = function (resourceGroupName$$1, accountName$$1, mapsAccountUpdateParameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                mapsAccountUpdateParameters: mapsAccountUpdateParameters,
                options: options
            }, updateOperationSpec, callback);
        };
        Accounts.prototype.deleteMethod = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        Accounts.prototype.get = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        Accounts.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Accounts.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec, callback);
        };
        Accounts.prototype.move = function (resourceGroupName$$1, moveRequest, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                moveRequest: moveRequest,
                options: options
            }, moveOperationSpec, callback);
        };
        Accounts.prototype.listKeys = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, listKeysOperationSpec, callback);
        };
        Accounts.prototype.regenerateKeys = function (resourceGroupName$$1, accountName$$1, keySpecification, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                keySpecification: keySpecification,
                options: options
            }, regenerateKeysOperationSpec, callback);
        };
        Accounts.prototype.listOperations = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationsOperationSpec, callback);
        };
        return Accounts;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "mapsAccountCreateParameters",
            mapper: __assign({}, MapsAccountCreateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: MapsAccount
            },
            201: {
                bodyMapper: MapsAccount
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "mapsAccountUpdateParameters",
            mapper: __assign({}, MapsAccountUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: MapsAccount
            },
            404: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MapsAccount
            },
            404: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MapsAccounts
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var listBySubscriptionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Maps/accounts",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MapsAccounts
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var moveOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/moveResources",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "moveRequest",
            mapper: __assign({}, MapsAccountsMoveRequest, { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var listKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}/listKeys",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MapsAccountKeys
            },
            404: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var regenerateKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}/regenerateKey",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "keySpecification",
            mapper: __assign({}, MapsKeySpecification, { required: true })
        },
        responses: {
            200: {
                bodyMapper: MapsAccountKeys
            },
            404: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var listOperationsOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Maps/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MapsOperations
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-maps";
    var packageVersion = "1.0.0";
    var MapsManagementClientContext = /** @class */ (function (_super) {
        __extends(MapsManagementClientContext, _super);
        /**
         * Initializes a new instance of the MapsManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function MapsManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2018-05-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return MapsManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var MapsManagementClient = /** @class */ (function (_super) {
        __extends(MapsManagementClient, _super);
        /**
         * Initializes a new instance of the MapsManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function MapsManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.accounts = new Accounts(_this);
            return _this;
        }
        return MapsManagementClient;
    }(MapsManagementClientContext));

    exports.MapsManagementClient = MapsManagementClient;
    exports.MapsManagementClientContext = MapsManagementClientContext;
    exports.MapsManagementModels = index;
    exports.MapsManagementMappers = mappers;
    exports.Accounts = Accounts;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-maps.js.map
