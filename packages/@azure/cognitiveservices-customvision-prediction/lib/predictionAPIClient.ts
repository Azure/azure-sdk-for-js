/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { PredictionAPIClientContext } from "./predictionAPIClientContext";

class PredictionAPIClient extends PredictionAPIClientContext {
  /**
   * Initializes a new instance of the PredictionAPIClient class.
   * @param apiKey
   * @param endpoint Supported Cognitive Services endpoints
   * @param [options] The parameter options
   */
  constructor(apiKey: string, endpoint: string, options?: msRest.ServiceClientOptions) {
    super(apiKey, endpoint, options);
  }

  /**
   * @summary Predict an image url and saves the result
   * @param projectId The project id
   * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
   * evaluated
   * @param [options] The optional parameters
   * @returns Promise<Models.PredictImageUrlResponse>
   */
  predictImageUrl(projectId: string, imageUrl: Models.ImageUrl, options?: Models.PredictionAPIClientPredictImageUrlOptionalParams): Promise<Models.PredictImageUrlResponse>;
  /**
   * @param projectId The project id
   * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
   * evaluated
   * @param callback The callback
   */
  predictImageUrl(projectId: string, imageUrl: Models.ImageUrl, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
  /**
   * @param projectId The project id
   * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
   * evaluated
   * @param options The optional parameters
   * @param callback The callback
   */
  predictImageUrl(projectId: string, imageUrl: Models.ImageUrl, options: Models.PredictionAPIClientPredictImageUrlOptionalParams, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
  predictImageUrl(projectId: string, imageUrl: Models.ImageUrl, options?: Models.PredictionAPIClientPredictImageUrlOptionalParams, callback?: msRest.ServiceCallback<Models.ImagePrediction>): Promise<Models.PredictImageUrlResponse> {
    return this.sendOperationRequest(
      {
        projectId,
        imageUrl,
        options
      },
      predictImageUrlOperationSpec,
      callback) as Promise<Models.PredictImageUrlResponse>;
  }

  /**
   * @summary Predict an image and saves the result
   * @param projectId The project id
   * @param imageData
   * @param [options] The optional parameters
   * @returns Promise<Models.PredictImageResponse>
   */
  predictImage(projectId: string, imageData: msRest.HttpRequestBody, options?: Models.PredictionAPIClientPredictImageOptionalParams): Promise<Models.PredictImageResponse>;
  /**
   * @param projectId The project id
   * @param imageData
   * @param callback The callback
   */
  predictImage(projectId: string, imageData: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
  /**
   * @param projectId The project id
   * @param imageData
   * @param options The optional parameters
   * @param callback The callback
   */
  predictImage(projectId: string, imageData: msRest.HttpRequestBody, options: Models.PredictionAPIClientPredictImageOptionalParams, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
  predictImage(projectId: string, imageData: msRest.HttpRequestBody, options?: Models.PredictionAPIClientPredictImageOptionalParams, callback?: msRest.ServiceCallback<Models.ImagePrediction>): Promise<Models.PredictImageResponse> {
    return this.sendOperationRequest(
      {
        projectId,
        imageData,
        options
      },
      predictImageOperationSpec,
      callback) as Promise<Models.PredictImageResponse>;
  }

  /**
   * @summary Predict an image url without saving the result
   * @param projectId The project id
   * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
   * evaluated
   * @param [options] The optional parameters
   * @returns Promise<Models.PredictImageUrlWithNoStoreResponse>
   */
  predictImageUrlWithNoStore(projectId: string, imageUrl: Models.ImageUrl, options?: Models.PredictionAPIClientPredictImageUrlWithNoStoreOptionalParams): Promise<Models.PredictImageUrlWithNoStoreResponse>;
  /**
   * @param projectId The project id
   * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
   * evaluated
   * @param callback The callback
   */
  predictImageUrlWithNoStore(projectId: string, imageUrl: Models.ImageUrl, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
  /**
   * @param projectId The project id
   * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
   * evaluated
   * @param options The optional parameters
   * @param callback The callback
   */
  predictImageUrlWithNoStore(projectId: string, imageUrl: Models.ImageUrl, options: Models.PredictionAPIClientPredictImageUrlWithNoStoreOptionalParams, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
  predictImageUrlWithNoStore(projectId: string, imageUrl: Models.ImageUrl, options?: Models.PredictionAPIClientPredictImageUrlWithNoStoreOptionalParams, callback?: msRest.ServiceCallback<Models.ImagePrediction>): Promise<Models.PredictImageUrlWithNoStoreResponse> {
    return this.sendOperationRequest(
      {
        projectId,
        imageUrl,
        options
      },
      predictImageUrlWithNoStoreOperationSpec,
      callback) as Promise<Models.PredictImageUrlWithNoStoreResponse>;
  }

  /**
   * @summary Predict an image without saving the result
   * @param projectId The project id
   * @param imageData
   * @param [options] The optional parameters
   * @returns Promise<Models.PredictImageWithNoStoreResponse>
   */
  predictImageWithNoStore(projectId: string, imageData: msRest.HttpRequestBody, options?: Models.PredictionAPIClientPredictImageWithNoStoreOptionalParams): Promise<Models.PredictImageWithNoStoreResponse>;
  /**
   * @param projectId The project id
   * @param imageData
   * @param callback The callback
   */
  predictImageWithNoStore(projectId: string, imageData: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
  /**
   * @param projectId The project id
   * @param imageData
   * @param options The optional parameters
   * @param callback The callback
   */
  predictImageWithNoStore(projectId: string, imageData: msRest.HttpRequestBody, options: Models.PredictionAPIClientPredictImageWithNoStoreOptionalParams, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
  predictImageWithNoStore(projectId: string, imageData: msRest.HttpRequestBody, options?: Models.PredictionAPIClientPredictImageWithNoStoreOptionalParams, callback?: msRest.ServiceCallback<Models.ImagePrediction>): Promise<Models.PredictImageWithNoStoreResponse> {
    return this.sendOperationRequest(
      {
        projectId,
        imageData,
        options
      },
      predictImageWithNoStoreOperationSpec,
      callback) as Promise<Models.PredictImageWithNoStoreResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const predictImageUrlOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{projectId}/url",
  urlParameters: [
    Parameters.endpoint,
    Parameters.projectId
  ],
  queryParameters: [
    Parameters.iterationId,
    Parameters.application
  ],
  headerParameters: [
    Parameters.apiKey
  ],
  requestBody: {
    parameterPath: "imageUrl",
    mapper: {
      ...Mappers.ImageUrl,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ImagePrediction
    },
    default: {}
  },
  serializer
};

const predictImageOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{projectId}/image",
  urlParameters: [
    Parameters.endpoint,
    Parameters.projectId
  ],
  queryParameters: [
    Parameters.iterationId,
    Parameters.application
  ],
  headerParameters: [
    Parameters.apiKey
  ],
  formDataParameters: [
    Parameters.imageData
  ],
  contentType: "multipart/form-data",
  responses: {
    200: {
      bodyMapper: Mappers.ImagePrediction
    },
    default: {}
  },
  serializer
};

const predictImageUrlWithNoStoreOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{projectId}/url/nostore",
  urlParameters: [
    Parameters.endpoint,
    Parameters.projectId
  ],
  queryParameters: [
    Parameters.iterationId,
    Parameters.application
  ],
  headerParameters: [
    Parameters.apiKey
  ],
  requestBody: {
    parameterPath: "imageUrl",
    mapper: {
      ...Mappers.ImageUrl,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ImagePrediction
    },
    default: {}
  },
  serializer
};

const predictImageWithNoStoreOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{projectId}/image/nostore",
  urlParameters: [
    Parameters.endpoint,
    Parameters.projectId
  ],
  queryParameters: [
    Parameters.iterationId,
    Parameters.application
  ],
  headerParameters: [
    Parameters.apiKey
  ],
  formDataParameters: [
    Parameters.imageData
  ],
  contentType: "multipart/form-data",
  responses: {
    200: {
      bodyMapper: Mappers.ImagePrediction
    },
    default: {}
  },
  serializer
};

export {
  PredictionAPIClient,
  PredictionAPIClientContext,
  Models as PredictionAPIModels,
  Mappers as PredictionAPIMappers
};
