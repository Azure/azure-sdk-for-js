/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { PredictionAPIClientContext } from "./predictionAPIClientContext";

class PredictionAPIClient extends PredictionAPIClientContext {
  /**
   * Initializes a new instance of the PredictionAPIClient class.
   * @param apiKey
   * @param endpoint Supported Cognitive Services endpoints.
   * @param [options] The parameter options
   */
  constructor(apiKey: string, endpoint: string, options?: msRest.ServiceClientOptions) {
    super(apiKey, endpoint, options);
  }

  /**
   * @summary Classify an image url and saves the result.
   * @param projectId The project id.
   * @param name Specifies the name of the model to evaluate against.
   * The default iteration for the project will be used when not specified.
   * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
   * evaluated.
   * @param [options] The optional parameters
   * @returns Promise<Models.ClassifyImageUrlResponse>
   */
  classifyImageUrl(projectId: string, name: string, imageUrl: Models.ImageUrl, options?: Models.PredictionAPIClientClassifyImageUrlOptionalParams): Promise<Models.ClassifyImageUrlResponse>;
  /**
   * @param projectId The project id.
   * @param name Specifies the name of the model to evaluate against.
   * The default iteration for the project will be used when not specified.
   * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
   * evaluated.
   * @param callback The callback
   */
  classifyImageUrl(projectId: string, name: string, imageUrl: Models.ImageUrl, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
  /**
   * @param projectId The project id.
   * @param name Specifies the name of the model to evaluate against.
   * The default iteration for the project will be used when not specified.
   * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
   * evaluated.
   * @param options The optional parameters
   * @param callback The callback
   */
  classifyImageUrl(projectId: string, name: string, imageUrl: Models.ImageUrl, options: Models.PredictionAPIClientClassifyImageUrlOptionalParams, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
  classifyImageUrl(projectId: string, name: string, imageUrl: Models.ImageUrl, options?: Models.PredictionAPIClientClassifyImageUrlOptionalParams | msRest.ServiceCallback<Models.ImagePrediction>, callback?: msRest.ServiceCallback<Models.ImagePrediction>): Promise<Models.ClassifyImageUrlResponse> {
    return this.sendOperationRequest(
      {
        projectId,
        name,
        imageUrl,
        options
      },
      classifyImageUrlOperationSpec,
      callback) as Promise<Models.ClassifyImageUrlResponse>;
  }

  /**
   * @summary Classify an image and saves the result.
   * @param projectId The project id.
   * @param name Specifies the name of the model to evaluate against.
   * The default iteration for the project will be used when not specified.
   * @param imageData Binary image data.
   * @param [options] The optional parameters
   * @returns Promise<Models.ClassifyImageResponse>
   */
  classifyImage(projectId: string, name: string, imageData: msRest.HttpRequestBody, options?: Models.PredictionAPIClientClassifyImageOptionalParams): Promise<Models.ClassifyImageResponse>;
  /**
   * @param projectId The project id.
   * @param name Specifies the name of the model to evaluate against.
   * The default iteration for the project will be used when not specified.
   * @param imageData Binary image data.
   * @param callback The callback
   */
  classifyImage(projectId: string, name: string, imageData: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
  /**
   * @param projectId The project id.
   * @param name Specifies the name of the model to evaluate against.
   * The default iteration for the project will be used when not specified.
   * @param imageData Binary image data.
   * @param options The optional parameters
   * @param callback The callback
   */
  classifyImage(projectId: string, name: string, imageData: msRest.HttpRequestBody, options: Models.PredictionAPIClientClassifyImageOptionalParams, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
  classifyImage(projectId: string, name: string, imageData: msRest.HttpRequestBody, options?: Models.PredictionAPIClientClassifyImageOptionalParams | msRest.ServiceCallback<Models.ImagePrediction>, callback?: msRest.ServiceCallback<Models.ImagePrediction>): Promise<Models.ClassifyImageResponse> {
    return this.sendOperationRequest(
      {
        projectId,
        name,
        imageData,
        options
      },
      classifyImageOperationSpec,
      callback) as Promise<Models.ClassifyImageResponse>;
  }

  /**
   * @summary Classify an image url without saving the result.
   * @param projectId The project id.
   * @param name Specifies the name of the model to evaluate against.
   * The default iteration for the project will be used when not specified.
   * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
   * evaluated.
   * @param [options] The optional parameters
   * @returns Promise<Models.ClassifyImageUrlWithNoStoreResponse>
   */
  classifyImageUrlWithNoStore(projectId: string, name: string, imageUrl: Models.ImageUrl, options?: Models.PredictionAPIClientClassifyImageUrlWithNoStoreOptionalParams): Promise<Models.ClassifyImageUrlWithNoStoreResponse>;
  /**
   * @param projectId The project id.
   * @param name Specifies the name of the model to evaluate against.
   * The default iteration for the project will be used when not specified.
   * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
   * evaluated.
   * @param callback The callback
   */
  classifyImageUrlWithNoStore(projectId: string, name: string, imageUrl: Models.ImageUrl, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
  /**
   * @param projectId The project id.
   * @param name Specifies the name of the model to evaluate against.
   * The default iteration for the project will be used when not specified.
   * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
   * evaluated.
   * @param options The optional parameters
   * @param callback The callback
   */
  classifyImageUrlWithNoStore(projectId: string, name: string, imageUrl: Models.ImageUrl, options: Models.PredictionAPIClientClassifyImageUrlWithNoStoreOptionalParams, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
  classifyImageUrlWithNoStore(projectId: string, name: string, imageUrl: Models.ImageUrl, options?: Models.PredictionAPIClientClassifyImageUrlWithNoStoreOptionalParams | msRest.ServiceCallback<Models.ImagePrediction>, callback?: msRest.ServiceCallback<Models.ImagePrediction>): Promise<Models.ClassifyImageUrlWithNoStoreResponse> {
    return this.sendOperationRequest(
      {
        projectId,
        name,
        imageUrl,
        options
      },
      classifyImageUrlWithNoStoreOperationSpec,
      callback) as Promise<Models.ClassifyImageUrlWithNoStoreResponse>;
  }

  /**
   * @summary Classify an image without saving the result.
   * @param projectId The project id.
   * @param name Specifies the name of the model to evaluate against.
   * The default iteration for the project will be used when not specified.
   * @param imageData Binary image data.
   * @param [options] The optional parameters
   * @returns Promise<Models.ClassifyImageWithNoStoreResponse>
   */
  classifyImageWithNoStore(projectId: string, name: string, imageData: msRest.HttpRequestBody, options?: Models.PredictionAPIClientClassifyImageWithNoStoreOptionalParams): Promise<Models.ClassifyImageWithNoStoreResponse>;
  /**
   * @param projectId The project id.
   * @param name Specifies the name of the model to evaluate against.
   * The default iteration for the project will be used when not specified.
   * @param imageData Binary image data.
   * @param callback The callback
   */
  classifyImageWithNoStore(projectId: string, name: string, imageData: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
  /**
   * @param projectId The project id.
   * @param name Specifies the name of the model to evaluate against.
   * The default iteration for the project will be used when not specified.
   * @param imageData Binary image data.
   * @param options The optional parameters
   * @param callback The callback
   */
  classifyImageWithNoStore(projectId: string, name: string, imageData: msRest.HttpRequestBody, options: Models.PredictionAPIClientClassifyImageWithNoStoreOptionalParams, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
  classifyImageWithNoStore(projectId: string, name: string, imageData: msRest.HttpRequestBody, options?: Models.PredictionAPIClientClassifyImageWithNoStoreOptionalParams | msRest.ServiceCallback<Models.ImagePrediction>, callback?: msRest.ServiceCallback<Models.ImagePrediction>): Promise<Models.ClassifyImageWithNoStoreResponse> {
    return this.sendOperationRequest(
      {
        projectId,
        name,
        imageData,
        options
      },
      classifyImageWithNoStoreOperationSpec,
      callback) as Promise<Models.ClassifyImageWithNoStoreResponse>;
  }

  /**
   * @summary Detect objects in an image url and saves the result.
   * @param projectId The project id.
   * @param name Specifies the name of the model to evaluate against.
   * The default iteration for the project will be used when not specified.
   * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
   * evaluated.
   * @param [options] The optional parameters
   * @returns Promise<Models.DetectImageUrlResponse>
   */
  detectImageUrl(projectId: string, name: string, imageUrl: Models.ImageUrl, options?: Models.PredictionAPIClientDetectImageUrlOptionalParams): Promise<Models.DetectImageUrlResponse>;
  /**
   * @param projectId The project id.
   * @param name Specifies the name of the model to evaluate against.
   * The default iteration for the project will be used when not specified.
   * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
   * evaluated.
   * @param callback The callback
   */
  detectImageUrl(projectId: string, name: string, imageUrl: Models.ImageUrl, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
  /**
   * @param projectId The project id.
   * @param name Specifies the name of the model to evaluate against.
   * The default iteration for the project will be used when not specified.
   * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
   * evaluated.
   * @param options The optional parameters
   * @param callback The callback
   */
  detectImageUrl(projectId: string, name: string, imageUrl: Models.ImageUrl, options: Models.PredictionAPIClientDetectImageUrlOptionalParams, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
  detectImageUrl(projectId: string, name: string, imageUrl: Models.ImageUrl, options?: Models.PredictionAPIClientDetectImageUrlOptionalParams | msRest.ServiceCallback<Models.ImagePrediction>, callback?: msRest.ServiceCallback<Models.ImagePrediction>): Promise<Models.DetectImageUrlResponse> {
    return this.sendOperationRequest(
      {
        projectId,
        name,
        imageUrl,
        options
      },
      detectImageUrlOperationSpec,
      callback) as Promise<Models.DetectImageUrlResponse>;
  }

  /**
   * @summary Detect objects in an image and saves the result.
   * @param projectId The project id.
   * @param name Specifies the name of the model to evaluate against.
   * The default iteration for the project will be used when not specified.
   * @param imageData Binary image data.
   * @param [options] The optional parameters
   * @returns Promise<Models.DetectImageResponse>
   */
  detectImage(projectId: string, name: string, imageData: msRest.HttpRequestBody, options?: Models.PredictionAPIClientDetectImageOptionalParams): Promise<Models.DetectImageResponse>;
  /**
   * @param projectId The project id.
   * @param name Specifies the name of the model to evaluate against.
   * The default iteration for the project will be used when not specified.
   * @param imageData Binary image data.
   * @param callback The callback
   */
  detectImage(projectId: string, name: string, imageData: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
  /**
   * @param projectId The project id.
   * @param name Specifies the name of the model to evaluate against.
   * The default iteration for the project will be used when not specified.
   * @param imageData Binary image data.
   * @param options The optional parameters
   * @param callback The callback
   */
  detectImage(projectId: string, name: string, imageData: msRest.HttpRequestBody, options: Models.PredictionAPIClientDetectImageOptionalParams, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
  detectImage(projectId: string, name: string, imageData: msRest.HttpRequestBody, options?: Models.PredictionAPIClientDetectImageOptionalParams | msRest.ServiceCallback<Models.ImagePrediction>, callback?: msRest.ServiceCallback<Models.ImagePrediction>): Promise<Models.DetectImageResponse> {
    return this.sendOperationRequest(
      {
        projectId,
        name,
        imageData,
        options
      },
      detectImageOperationSpec,
      callback) as Promise<Models.DetectImageResponse>;
  }

  /**
   * @summary Detect objects in an image url without saving the result.
   * @param projectId The project id.
   * @param name Specifies the name of the model to evaluate against.
   * The default iteration for the project will be used when not specified.
   * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
   * evaluated.
   * @param [options] The optional parameters
   * @returns Promise<Models.DetectImageUrlWithNoStoreResponse>
   */
  detectImageUrlWithNoStore(projectId: string, name: string, imageUrl: Models.ImageUrl, options?: Models.PredictionAPIClientDetectImageUrlWithNoStoreOptionalParams): Promise<Models.DetectImageUrlWithNoStoreResponse>;
  /**
   * @param projectId The project id.
   * @param name Specifies the name of the model to evaluate against.
   * The default iteration for the project will be used when not specified.
   * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
   * evaluated.
   * @param callback The callback
   */
  detectImageUrlWithNoStore(projectId: string, name: string, imageUrl: Models.ImageUrl, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
  /**
   * @param projectId The project id.
   * @param name Specifies the name of the model to evaluate against.
   * The default iteration for the project will be used when not specified.
   * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
   * evaluated.
   * @param options The optional parameters
   * @param callback The callback
   */
  detectImageUrlWithNoStore(projectId: string, name: string, imageUrl: Models.ImageUrl, options: Models.PredictionAPIClientDetectImageUrlWithNoStoreOptionalParams, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
  detectImageUrlWithNoStore(projectId: string, name: string, imageUrl: Models.ImageUrl, options?: Models.PredictionAPIClientDetectImageUrlWithNoStoreOptionalParams | msRest.ServiceCallback<Models.ImagePrediction>, callback?: msRest.ServiceCallback<Models.ImagePrediction>): Promise<Models.DetectImageUrlWithNoStoreResponse> {
    return this.sendOperationRequest(
      {
        projectId,
        name,
        imageUrl,
        options
      },
      detectImageUrlWithNoStoreOperationSpec,
      callback) as Promise<Models.DetectImageUrlWithNoStoreResponse>;
  }

  /**
   * @summary Detect objects in an image without saving the result.
   * @param projectId The project id.
   * @param name Specifies the name of the model to evaluate against.
   * The default iteration for the project will be used when not specified.
   * @param imageData Binary image data.
   * @param [options] The optional parameters
   * @returns Promise<Models.DetectImageWithNoStoreResponse>
   */
  detectImageWithNoStore(projectId: string, name: string, imageData: msRest.HttpRequestBody, options?: Models.PredictionAPIClientDetectImageWithNoStoreOptionalParams): Promise<Models.DetectImageWithNoStoreResponse>;
  /**
   * @param projectId The project id.
   * @param name Specifies the name of the model to evaluate against.
   * The default iteration for the project will be used when not specified.
   * @param imageData Binary image data.
   * @param callback The callback
   */
  detectImageWithNoStore(projectId: string, name: string, imageData: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
  /**
   * @param projectId The project id.
   * @param name Specifies the name of the model to evaluate against.
   * The default iteration for the project will be used when not specified.
   * @param imageData Binary image data.
   * @param options The optional parameters
   * @param callback The callback
   */
  detectImageWithNoStore(projectId: string, name: string, imageData: msRest.HttpRequestBody, options: Models.PredictionAPIClientDetectImageWithNoStoreOptionalParams, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
  detectImageWithNoStore(projectId: string, name: string, imageData: msRest.HttpRequestBody, options?: Models.PredictionAPIClientDetectImageWithNoStoreOptionalParams | msRest.ServiceCallback<Models.ImagePrediction>, callback?: msRest.ServiceCallback<Models.ImagePrediction>): Promise<Models.DetectImageWithNoStoreResponse> {
    return this.sendOperationRequest(
      {
        projectId,
        name,
        imageData,
        options
      },
      detectImageWithNoStoreOperationSpec,
      callback) as Promise<Models.DetectImageWithNoStoreResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const classifyImageUrlOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{projectId}/classify/models/{name}/url",
  urlParameters: [
    Parameters.endpoint,
    Parameters.projectId,
    Parameters.name
  ],
  queryParameters: [
    Parameters.application
  ],
  headerParameters: [
    Parameters.apiKey
  ],
  requestBody: {
    parameterPath: "imageUrl",
    mapper: {
      ...Mappers.ImageUrl,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ImagePrediction
    },
    default: {
      bodyMapper: Mappers.CustomVisionError
    }
  },
  serializer
};

const classifyImageOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{projectId}/classify/models/{name}/image",
  urlParameters: [
    Parameters.endpoint,
    Parameters.projectId,
    Parameters.name
  ],
  queryParameters: [
    Parameters.application
  ],
  headerParameters: [
    Parameters.apiKey
  ],
  formDataParameters: [
    Parameters.imageData
  ],
  contentType: "multipart/form-data",
  responses: {
    200: {
      bodyMapper: Mappers.ImagePrediction
    },
    default: {
      bodyMapper: Mappers.CustomVisionError
    }
  },
  serializer
};

const classifyImageUrlWithNoStoreOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{projectId}/classify/models/{name}/url/nostore",
  urlParameters: [
    Parameters.endpoint,
    Parameters.projectId,
    Parameters.name
  ],
  queryParameters: [
    Parameters.application
  ],
  headerParameters: [
    Parameters.apiKey
  ],
  requestBody: {
    parameterPath: "imageUrl",
    mapper: {
      ...Mappers.ImageUrl,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ImagePrediction
    },
    default: {
      bodyMapper: Mappers.CustomVisionError
    }
  },
  serializer
};

const classifyImageWithNoStoreOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{projectId}/classify/models/{name}/image/nostore",
  urlParameters: [
    Parameters.endpoint,
    Parameters.projectId,
    Parameters.name
  ],
  queryParameters: [
    Parameters.application
  ],
  headerParameters: [
    Parameters.apiKey
  ],
  formDataParameters: [
    Parameters.imageData
  ],
  contentType: "multipart/form-data",
  responses: {
    200: {
      bodyMapper: Mappers.ImagePrediction
    },
    default: {
      bodyMapper: Mappers.CustomVisionError
    }
  },
  serializer
};

const detectImageUrlOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{projectId}/detect/models/{name}/url",
  urlParameters: [
    Parameters.endpoint,
    Parameters.projectId,
    Parameters.name
  ],
  queryParameters: [
    Parameters.application
  ],
  headerParameters: [
    Parameters.apiKey
  ],
  requestBody: {
    parameterPath: "imageUrl",
    mapper: {
      ...Mappers.ImageUrl,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ImagePrediction
    },
    default: {
      bodyMapper: Mappers.CustomVisionError
    }
  },
  serializer
};

const detectImageOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{projectId}/detect/models/{name}/image",
  urlParameters: [
    Parameters.endpoint,
    Parameters.projectId,
    Parameters.name
  ],
  queryParameters: [
    Parameters.application
  ],
  headerParameters: [
    Parameters.apiKey
  ],
  formDataParameters: [
    Parameters.imageData
  ],
  contentType: "multipart/form-data",
  responses: {
    200: {
      bodyMapper: Mappers.ImagePrediction
    },
    default: {
      bodyMapper: Mappers.CustomVisionError
    }
  },
  serializer
};

const detectImageUrlWithNoStoreOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{projectId}/detect/models/{name}/url/nostore",
  urlParameters: [
    Parameters.endpoint,
    Parameters.projectId,
    Parameters.name
  ],
  queryParameters: [
    Parameters.application
  ],
  headerParameters: [
    Parameters.apiKey
  ],
  requestBody: {
    parameterPath: "imageUrl",
    mapper: {
      ...Mappers.ImageUrl,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ImagePrediction
    },
    default: {
      bodyMapper: Mappers.CustomVisionError
    }
  },
  serializer
};

const detectImageWithNoStoreOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{projectId}/detect/models/{name}/image/nostore",
  urlParameters: [
    Parameters.endpoint,
    Parameters.projectId,
    Parameters.name
  ],
  queryParameters: [
    Parameters.application
  ],
  headerParameters: [
    Parameters.apiKey
  ],
  formDataParameters: [
    Parameters.imageData
  ],
  contentType: "multipart/form-data",
  responses: {
    200: {
      bodyMapper: Mappers.ImagePrediction
    },
    default: {
      bodyMapper: Mappers.CustomVisionError
    }
  },
  serializer
};

export {
  PredictionAPIClient,
  PredictionAPIClientContext,
  Models as PredictionAPIModels,
  Mappers as PredictionAPIMappers
};
