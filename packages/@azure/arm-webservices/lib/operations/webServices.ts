/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as msRestAzure from "ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/webServicesMappers";
import * as Parameters from "../models/parameters";
import { AzureMLWebServicesManagementClientContext } from "../azureMLWebServicesManagementClientContext";

/** Class representing a WebServices. */
export class WebServices {
  private readonly client: AzureMLWebServicesManagementClientContext;

  /**
   * Create a WebServices.
   * @param {AzureMLWebServicesManagementClientContext} client Reference to the service client.
   */
  constructor(client: AzureMLWebServicesManagementClientContext) {
    this.client = client;
  }

  /**
   * Create or update a web service. This call will overwrite an existing web service. Note that
   * there is no warning or confirmation. This is a nonrecoverable operation. If your intent is to
   * create a new web service, call the Get operation first to verify that it does not exist.
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param webServiceName The name of the web service.
   * @param createOrUpdatePayload The payload that is used to create or update the web service.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebServicesCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, webServiceName: string, createOrUpdatePayload: Models.WebService, options?: msRest.RequestOptionsBase): Promise<Models.WebServicesCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,webServiceName,createOrUpdatePayload,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.WebServicesCreateOrUpdateResponse>;
  }

  /**
   * Gets the Web Service Definiton as specified by a subscription, resource group, and name. Note
   * that the storage credentials and web service keys are not returned by this call. To get the web
   * service access keys, call List Keys.
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param webServiceName The name of the web service.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebServicesGetResponse>
   */
  get(resourceGroupName: string, webServiceName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebServicesGetResponse>;
  /**
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param webServiceName The name of the web service.
   * @param callback The callback
   */
  get(resourceGroupName: string, webServiceName: string, callback: msRest.ServiceCallback<Models.WebService>): void;
  /**
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param webServiceName The name of the web service.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, webServiceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebService>): void;
  get(resourceGroupName: string, webServiceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WebService>, callback?: msRest.ServiceCallback<Models.WebService>): Promise<Models.WebServicesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        webServiceName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.WebServicesGetResponse>;
  }

  /**
   * Modifies an existing web service resource. The PATCH API call is an asynchronous operation. To
   * determine whether it has completed successfully, you must perform a Get operation.
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param webServiceName The name of the web service.
   * @param patchPayload The payload to use to patch the web service.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebServicesPatchResponse>
   */
  patch(resourceGroupName: string, webServiceName: string, patchPayload: Models.WebService, options?: msRest.RequestOptionsBase): Promise<Models.WebServicesPatchResponse> {
    return this.beginPatch(resourceGroupName,webServiceName,patchPayload,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.WebServicesPatchResponse>;
  }

  /**
   * Deletes the specified web service.
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param webServiceName The name of the web service.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  remove(resourceGroupName: string, webServiceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginRemove(resourceGroupName,webServiceName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Gets the access keys for the specified web service.
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param webServiceName The name of the web service.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebServicesListKeysResponse>
   */
  listKeys(resourceGroupName: string, webServiceName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebServicesListKeysResponse>;
  /**
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param webServiceName The name of the web service.
   * @param callback The callback
   */
  listKeys(resourceGroupName: string, webServiceName: string, callback: msRest.ServiceCallback<Models.WebServiceKeys>): void;
  /**
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param webServiceName The name of the web service.
   * @param options The optional parameters
   * @param callback The callback
   */
  listKeys(resourceGroupName: string, webServiceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebServiceKeys>): void;
  listKeys(resourceGroupName: string, webServiceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WebServiceKeys>, callback?: msRest.ServiceCallback<Models.WebServiceKeys>): Promise<Models.WebServicesListKeysResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        webServiceName,
        options
      },
      listKeysOperationSpec,
      callback) as Promise<Models.WebServicesListKeysResponse>;
  }

  /**
   * Gets the web services in the specified resource group.
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebServicesListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: Models.WebServicesListByResourceGroupOptionalParams): Promise<Models.WebServicesListByResourceGroupResponse>;
  /**
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.PaginatedWebServicesList>): void;
  /**
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: Models.WebServicesListByResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.PaginatedWebServicesList>): void;
  listByResourceGroup(resourceGroupName: string, options?: Models.WebServicesListByResourceGroupOptionalParams | msRest.ServiceCallback<Models.PaginatedWebServicesList>, callback?: msRest.ServiceCallback<Models.PaginatedWebServicesList>): Promise<Models.WebServicesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.WebServicesListByResourceGroupResponse>;
  }

  /**
   * Gets the web services in the specified subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebServicesListResponse>
   */
  list(options?: Models.WebServicesListOptionalParams): Promise<Models.WebServicesListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.PaginatedWebServicesList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: Models.WebServicesListOptionalParams, callback: msRest.ServiceCallback<Models.PaginatedWebServicesList>): void;
  list(options?: Models.WebServicesListOptionalParams | msRest.ServiceCallback<Models.PaginatedWebServicesList>, callback?: msRest.ServiceCallback<Models.PaginatedWebServicesList>): Promise<Models.WebServicesListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.WebServicesListResponse>;
  }

  /**
   * Create or update a web service. This call will overwrite an existing web service. Note that
   * there is no warning or confirmation. This is a nonrecoverable operation. If your intent is to
   * create a new web service, call the Get operation first to verify that it does not exist.
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param webServiceName The name of the web service.
   * @param createOrUpdatePayload The payload that is used to create or update the web service.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, webServiceName: string, createOrUpdatePayload: Models.WebService, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        webServiceName,
        createOrUpdatePayload,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Modifies an existing web service resource. The PATCH API call is an asynchronous operation. To
   * determine whether it has completed successfully, you must perform a Get operation.
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param webServiceName The name of the web service.
   * @param patchPayload The payload to use to patch the web service.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPatch(resourceGroupName: string, webServiceName: string, patchPayload: Models.WebService, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        webServiceName,
        patchPayload,
        options
      },
      beginPatchOperationSpec,
      options);
  }

  /**
   * Deletes the specified web service.
   * @param resourceGroupName Name of the resource group in which the web service is located.
   * @param webServiceName The name of the web service.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginRemove(resourceGroupName: string, webServiceName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        webServiceName,
        options
      },
      beginRemoveOperationSpec,
      options);
  }

  /**
   * Gets the web services in the specified resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebServicesListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebServicesListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PaginatedWebServicesList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PaginatedWebServicesList>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PaginatedWebServicesList>, callback?: msRest.ServiceCallback<Models.PaginatedWebServicesList>): Promise<Models.WebServicesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.WebServicesListByResourceGroupNextResponse>;
  }

  /**
   * Gets the web services in the specified subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebServicesListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebServicesListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PaginatedWebServicesList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PaginatedWebServicesList>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PaginatedWebServicesList>, callback?: msRest.ServiceCallback<Models.PaginatedWebServicesList>): Promise<Models.WebServicesListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.WebServicesListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.webServiceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WebService
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listKeysOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}/listKeys",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.webServiceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WebServiceKeys
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.skiptoken,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PaginatedWebServicesList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.MachineLearning/webServices",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.skiptoken,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PaginatedWebServicesList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.webServiceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "createOrUpdatePayload",
    mapper: {
      ...Mappers.WebService,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.WebService
    },
    201: {
      bodyMapper: Mappers.WebService
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginPatchOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.webServiceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "patchPayload",
    mapper: {
      ...Mappers.WebService,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.WebService
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginRemoveOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.webServiceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PaginatedWebServicesList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PaginatedWebServicesList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
