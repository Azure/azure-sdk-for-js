/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/productSettingsMappers";
import * as Parameters from "../models/parameters";
import { SecurityInsightsContext } from "../securityInsightsContext";

/** Class representing a ProductSettings. */
export class ProductSettings {
  private readonly client: SecurityInsightsContext;

  /**
   * Create a ProductSettings.
   * @param {SecurityInsightsContext} client Reference to the service client.
   */
  constructor(client: SecurityInsightsContext) {
    this.client = client;
  }

  /**
   * Gets a stting.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param settingsName The setting name. Supports- Fusion, UEBA
   * @param [options] The optional parameters
   * @returns Promise<Models.ProductSettingsGetResponse>
   */
  get(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, settingsName: string, options?: msRest.RequestOptionsBase): Promise<Models.ProductSettingsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param settingsName The setting name. Supports- Fusion, UEBA
   * @param callback The callback
   */
  get(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, settingsName: string, callback: msRest.ServiceCallback<Models.SettingsUnion>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param settingsName The setting name. Supports- Fusion, UEBA
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, settingsName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SettingsUnion>): void;
  get(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, settingsName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SettingsUnion>, callback?: msRest.ServiceCallback<Models.SettingsUnion>): Promise<Models.ProductSettingsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        operationalInsightsResourceProvider,
        workspaceName,
        settingsName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ProductSettingsGetResponse>;
  }

  /**
   * Updates the setting.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param settingsName The setting name. Supports- Fusion, UEBA
   * @param settings The setting
   * @param [options] The optional parameters
   * @returns Promise<Models.ProductSettingsUpdateResponse>
   */
  update(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, settingsName: string, settings: Models.SettingsUnion, options?: msRest.RequestOptionsBase): Promise<Models.ProductSettingsUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param settingsName The setting name. Supports- Fusion, UEBA
   * @param settings The setting
   * @param callback The callback
   */
  update(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, settingsName: string, settings: Models.SettingsUnion, callback: msRest.ServiceCallback<Models.SettingsUnion>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param settingsName The setting name. Supports- Fusion, UEBA
   * @param settings The setting
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, settingsName: string, settings: Models.SettingsUnion, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SettingsUnion>): void;
  update(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, settingsName: string, settings: Models.SettingsUnion, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SettingsUnion>, callback?: msRest.ServiceCallback<Models.SettingsUnion>): Promise<Models.ProductSettingsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        operationalInsightsResourceProvider,
        workspaceName,
        settingsName,
        settings,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.ProductSettingsUpdateResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{operationalInsightsResourceProvider}/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/settings/{settingsName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.operationalInsightsResourceProvider,
    Parameters.workspaceName,
    Parameters.settingsName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Settings
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{operationalInsightsResourceProvider}/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/settings/{settingsName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.operationalInsightsResourceProvider,
    Parameters.workspaceName,
    Parameters.settingsName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "settings",
    mapper: {
      ...Mappers.Settings,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Settings
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
