/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "ms-rest-azure-js";
import * as msRest from "ms-rest-js";

export { BaseResource, CloudError };


/**
 * @interface
 * An interface representing Resource.
 * Azure Data Factory top-level resource.
 *
 * @extends BaseResource
 */
export interface Resource extends BaseResource {
  /**
   * @member {string} [id] The resource identifier.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] The resource name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [type] The resource type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} [location] The resource location.
   */
  location?: string;
  /**
   * @member {{ [propertyName: string]: string }} [tags] The resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * @member {string} [eTag] Etag identifies change in the resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly eTag?: string;
}

/**
 * @interface
 * An interface representing SubResource.
 * Azure Data Factory nested resource, which belongs to a factory.
 *
 * @extends BaseResource
 */
export interface SubResource extends BaseResource {
  /**
   * @member {string} [id] The resource identifier.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] The resource name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [type] The resource type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} [etag] Etag identifies change in the resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
}

/**
 * @interface
 * An interface representing Expression.
 * Azure Data Factory expression definition.
 *
 */
export interface Expression {
  /**
   * @member {string} value Expression value.
   */
  value: string;
}

/**
 * Contains the possible cases for SecretBase.
 */
export type SecretBaseUnion = SecretBase | SecureString | AzureKeyVaultSecretReference;

/**
 * @interface
 * An interface representing SecretBase.
 * The base definition of a secret type.
 *
 */
export interface SecretBase {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "SecretBase";
}

/**
 * @interface
 * An interface representing SecureString.
 * Azure Data Factory secure string definition. The string value will be masked
 * with asterisks '*' during Get or List API calls.
 *
 */
export interface SecureString {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "SecureString";
  /**
   * @member {string} value Value of secure string.
   */
  value: string;
}

/**
 * @interface
 * An interface representing LinkedServiceReference.
 * Linked service reference type.
 *
 */
export interface LinkedServiceReference {
  /**
   * @member {string} referenceName Reference LinkedService name.
   */
  referenceName: string;
  /**
   * @member {{ [propertyName: string]: any }} [parameters] Arguments for
   * LinkedService.
   */
  parameters?: { [propertyName: string]: any };
}

/**
 * @interface
 * An interface representing AzureKeyVaultSecretReference.
 * Azure Key Vault secret reference.
 *
 */
export interface AzureKeyVaultSecretReference {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AzureKeyVaultSecret";
  /**
   * @member {LinkedServiceReference} store The Azure Key Vault linked service
   * reference.
   */
  store: LinkedServiceReference;
  /**
   * @member {any} secretName The name of the secret in Azure Key Vault. Type:
   * string (or Expression with resultType string).
   */
  secretName: any;
  /**
   * @member {any} [secretVersion] The version of the secret in Azure Key
   * Vault. The default value is the latest version of the secret. Type: string
   * (or Expression with resultType string).
   */
  secretVersion?: any;
}

/**
 * @interface
 * An interface representing FactoryIdentity.
 * Identity properties of the factory resource.
 *
 */
export interface FactoryIdentity {
  /**
   * @member {string} [principalId] The principal id of the identity.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly principalId?: string;
  /**
   * @member {string} [tenantId] The client tenant id of the identity.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tenantId?: string;
}

/**
 * Contains the possible cases for FactoryRepoConfiguration.
 */
export type FactoryRepoConfigurationUnion = FactoryRepoConfiguration | FactoryVSTSConfiguration | FactoryGitHubConfiguration;

/**
 * @interface
 * An interface representing FactoryRepoConfiguration.
 * Factory's git repo information.
 *
 */
export interface FactoryRepoConfiguration {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "FactoryRepoConfiguration";
  /**
   * @member {string} accountName Account name.
   */
  accountName: string;
  /**
   * @member {string} repositoryName Rrepository name.
   */
  repositoryName: string;
  /**
   * @member {string} collaborationBranch Collaboration branch.
   */
  collaborationBranch: string;
  /**
   * @member {string} rootFolder Root folder.
   */
  rootFolder: string;
  /**
   * @member {string} [lastCommitId] Last commit id.
   */
  lastCommitId?: string;
}

/**
 * @interface
 * An interface representing FactoryProperties.
 * Factory resource properties.
 *
 */
export interface FactoryProperties {
  /**
   * @member {string} [provisioningState] Factory provisioning state, example
   * Succeeded.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {Date} [createTime] Time the factory was created in ISO8601
   * format.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly createTime?: Date;
  /**
   * @member {string} [version] Version of the factory.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly version?: string;
  /**
   * @member {FactoryRepoConfigurationUnion} [repoConfiguration] Git repo
   * information of the factory.
   */
  repoConfiguration?: FactoryRepoConfigurationUnion;
}

/**
 * @interface
 * An interface representing Factory.
 * Factory resource type.
 *
 * @extends Resource
 */
export interface Factory extends Resource {
  /**
   * @member {FactoryIdentity} [identity] Managed service identity of the
   * factory.
   */
  identity?: FactoryIdentity;
  /**
   * @member {string} [provisioningState] Factory provisioning state, example
   * Succeeded.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {Date} [createTime] Time the factory was created in ISO8601
   * format.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly createTime?: Date;
  /**
   * @member {string} [version] Version of the factory.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly version?: string;
  /**
   * @member {FactoryRepoConfigurationUnion} [repoConfiguration] Git repo
   * information of the factory.
   */
  repoConfiguration?: FactoryRepoConfigurationUnion;
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * Contains the possible cases for IntegrationRuntime.
 */
export type IntegrationRuntimeUnion = IntegrationRuntime | SelfHostedIntegrationRuntime | ManagedIntegrationRuntime;

/**
 * @interface
 * An interface representing IntegrationRuntime.
 * Azure Data Factory nested object which serves as a compute resource for
 * activities.
 *
 */
export interface IntegrationRuntime {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "IntegrationRuntime";
  /**
   * @member {string} [description] Integration runtime description.
   */
  description?: string;
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * @interface
 * An interface representing IntegrationRuntimeResource.
 * Integration runtime resource type.
 *
 * @extends SubResource
 */
export interface IntegrationRuntimeResource extends SubResource {
  /**
   * @member {IntegrationRuntimeUnion} properties Integration runtime
   * properties.
   */
  properties: IntegrationRuntimeUnion;
}

/**
 * @interface
 * An interface representing IntegrationRuntimeReference.
 * Integration runtime reference type.
 *
 */
export interface IntegrationRuntimeReference {
  /**
   * @member {string} referenceName Reference integration runtime name.
   */
  referenceName: string;
  /**
   * @member {{ [propertyName: string]: any }} [parameters] Arguments for
   * integration runtime.
   */
  parameters?: { [propertyName: string]: any };
}

/**
 * Contains the possible cases for IntegrationRuntimeStatus.
 */
export type IntegrationRuntimeStatusUnion = IntegrationRuntimeStatus | SelfHostedIntegrationRuntimeStatus | ManagedIntegrationRuntimeStatus;

/**
 * @interface
 * An interface representing IntegrationRuntimeStatus.
 * Integration runtime status.
 *
 */
export interface IntegrationRuntimeStatus {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "IntegrationRuntimeStatus";
  /**
   * @member {string} [dataFactoryName] The data factory name which the
   * integration runtime belong to.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly dataFactoryName?: string;
  /**
   * @member {IntegrationRuntimeState} [state] The state of integration
   * runtime. Possible values include: 'Initial', 'Stopped', 'Started',
   * 'Starting', 'Stopping', 'NeedRegistration', 'Online', 'Limited',
   * 'Offline', 'AccessDenied'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: IntegrationRuntimeState;
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * @interface
 * An interface representing IntegrationRuntimeStatusResponse.
 * Integration runtime status response.
 *
 */
export interface IntegrationRuntimeStatusResponse {
  /**
   * @member {string} [name] The integration runtime name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {IntegrationRuntimeStatusUnion} properties Integration runtime
   * properties.
   */
  properties: IntegrationRuntimeStatusUnion;
}

/**
 * @interface
 * An interface representing IntegrationRuntimeStatusListResponse.
 * A list of integration runtime status.
 *
 */
export interface IntegrationRuntimeStatusListResponse {
  /**
   * @member {IntegrationRuntimeStatusResponse[]} value List of integration
   * runtime status.
   */
  value: IntegrationRuntimeStatusResponse[];
  /**
   * @member {string} [nextLink] The link to the next page of results, if any
   * remaining results exist.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing UpdateIntegrationRuntimeRequest.
 * Update integration runtime request.
 *
 */
export interface UpdateIntegrationRuntimeRequest {
  /**
   * @member {IntegrationRuntimeAutoUpdate} [autoUpdate] Enables or disables
   * the auto-update feature of the self-hosted integration runtime. See
   * https://go.microsoft.com/fwlink/?linkid=854189. Possible values include:
   * 'On', 'Off'
   */
  autoUpdate?: IntegrationRuntimeAutoUpdate;
  /**
   * @member {string} [updateDelayOffset] The time offset (in hours) in the
   * day, e.g., PT03H is 3 hours. The integration runtime auto update will
   * happen on that time.
   */
  updateDelayOffset?: string;
}

/**
 * @interface
 * An interface representing UpdateIntegrationRuntimeNodeRequest.
 * Update integration runtime node request.
 *
 */
export interface UpdateIntegrationRuntimeNodeRequest {
  /**
   * @member {number} [concurrentJobsLimit] The number of concurrent jobs
   * permitted to run on the integration runtime node. Values between 1 and
   * maxConcurrentJobs(inclusive) are allowed.
   */
  concurrentJobsLimit?: number;
}

/**
 * @interface
 * An interface representing LinkedIntegrationRuntimeRequest.
 * Data factory name for linked integration runtime request.
 *
 */
export interface LinkedIntegrationRuntimeRequest {
  /**
   * @member {string} linkedFactoryName The data factory name for linked
   * integration runtime.
   */
  linkedFactoryName: string;
}

/**
 * @interface
 * An interface representing CreateLinkedIntegrationRuntimeRequest.
 * The linked integration runtime information.
 *
 */
export interface CreateLinkedIntegrationRuntimeRequest {
  /**
   * @member {string} [name] The name of the linked integration runtime.
   */
  name?: string;
  /**
   * @member {string} [subscriptionId] The ID of the subscription that the
   * linked integration runtime belongs to.
   */
  subscriptionId?: string;
  /**
   * @member {string} [dataFactoryName] The name of the data factory that the
   * linked integration runtime belongs to.
   */
  dataFactoryName?: string;
  /**
   * @member {string} [dataFactoryLocation] The location of the data factory
   * that the linked integration runtime belongs to.
   */
  dataFactoryLocation?: string;
}

/**
 * @interface
 * An interface representing ParameterSpecification.
 * Definition of a single parameter for an entity.
 *
 */
export interface ParameterSpecification {
  /**
   * @member {ParameterType} type Parameter type. Possible values include:
   * 'Object', 'String', 'Int', 'Float', 'Bool', 'Array', 'SecureString'
   */
  type: ParameterType;
  /**
   * @member {any} [defaultValue] Default value of parameter.
   */
  defaultValue?: any;
}

/**
 * Contains the possible cases for LinkedService.
 */
export type LinkedServiceUnion = LinkedService | ResponsysLinkedService | AzureDatabricksLinkedService | AzureDataLakeAnalyticsLinkedService | HDInsightOnDemandLinkedService | SalesforceMarketingCloudLinkedService | NetezzaLinkedService | VerticaLinkedService | ZohoLinkedService | XeroLinkedService | SquareLinkedService | SparkLinkedService | ShopifyLinkedService | ServiceNowLinkedService | QuickBooksLinkedService | PrestoLinkedService | PhoenixLinkedService | PaypalLinkedService | MarketoLinkedService | MariaDBLinkedService | MagentoLinkedService | JiraLinkedService | ImpalaLinkedService | HubspotLinkedService | HiveLinkedService | HBaseLinkedService | GreenplumLinkedService | GoogleBigQueryLinkedService | EloquaLinkedService | DrillLinkedService | CouchbaseLinkedService | ConcurLinkedService | AzurePostgreSqlLinkedService | AmazonMWSLinkedService | SapHanaLinkedService | SapBWLinkedService | SftpServerLinkedService | FtpServerLinkedService | HttpLinkedService | AzureSearchLinkedService | CustomDataSourceLinkedService | AmazonRedshiftLinkedService | AmazonS3LinkedService | SapEccLinkedService | SapCloudForCustomerLinkedService | SalesforceLinkedService | AzureDataLakeStoreLinkedService | MongoDbLinkedService | CassandraLinkedService | WebLinkedService | ODataLinkedService | HdfsLinkedService | OdbcLinkedService | AzureMLLinkedService | TeradataLinkedService | Db2LinkedService | SybaseLinkedService | PostgreSqlLinkedService | MySqlLinkedService | AzureMySqlLinkedService | OracleLinkedService | FileServerLinkedService | HDInsightLinkedService | DynamicsLinkedService | CosmosDbLinkedService | AzureKeyVaultLinkedService | AzureBatchLinkedService | AzureSqlDatabaseLinkedService | SqlServerLinkedService | AzureSqlDWLinkedService | AzureTableStorageLinkedService | AzureBlobStorageLinkedService | AzureStorageLinkedService;

/**
 * @interface
 * An interface representing LinkedService.
 * The Azure Data Factory nested object which contains the information and
 * credential which can be used to connect with related store or compute
 * resource.
 *
 */
export interface LinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "LinkedService";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * @interface
 * An interface representing LinkedServiceResource.
 * Linked service resource type.
 *
 * @extends SubResource
 */
export interface LinkedServiceResource extends SubResource {
  /**
   * @member {LinkedServiceUnion} properties Properties of linked service.
   */
  properties: LinkedServiceUnion;
}

/**
 * @interface
 * An interface representing DatasetFolder.
 * The folder that this Dataset is in. If not specified, Dataset will appear at
 * the root level.
 *
 */
export interface DatasetFolder {
  /**
   * @member {string} [name] The name of the folder that this Dataset is in.
   */
  name?: string;
}

/**
 * Contains the possible cases for Dataset.
 */
export type DatasetUnion = Dataset | ResponsysObjectDataset | SalesforceMarketingCloudObjectDataset | VerticaTableDataset | NetezzaTableDataset | ZohoObjectDataset | XeroObjectDataset | SquareObjectDataset | SparkObjectDataset | ShopifyObjectDataset | ServiceNowObjectDataset | QuickBooksObjectDataset | PrestoObjectDataset | PhoenixObjectDataset | PaypalObjectDataset | MarketoObjectDataset | MariaDBTableDataset | MagentoObjectDataset | JiraObjectDataset | ImpalaObjectDataset | HubspotObjectDataset | HiveObjectDataset | HBaseObjectDataset | GreenplumTableDataset | GoogleBigQueryObjectDataset | EloquaObjectDataset | DrillTableDataset | CouchbaseTableDataset | ConcurObjectDataset | AzurePostgreSqlTableDataset | AmazonMWSObjectDataset | HttpDataset | AzureSearchIndexDataset | WebTableDataset | SqlServerTableDataset | SapEccResourceDataset | SapCloudForCustomerResourceDataset | SalesforceObjectDataset | RelationalTableDataset | AzureMySqlTableDataset | OracleTableDataset | ODataResourceDataset | MongoDbCollectionDataset | FileShareDataset | AzureDataLakeStoreDataset | DynamicsEntityDataset | DocumentDbCollectionDataset | CustomDataset | CassandraTableDataset | AzureSqlDWTableDataset | AzureSqlTableDataset | AzureTableDataset | AzureBlobDataset | AmazonS3Dataset;

/**
 * @interface
 * An interface representing Dataset.
 * The Azure Data Factory nested object which identifies data within different
 * data stores, such as tables, files, folders, and documents.
 *
 */
export interface Dataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Dataset";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * @interface
 * An interface representing DatasetResource.
 * Dataset resource type.
 *
 * @extends SubResource
 */
export interface DatasetResource extends SubResource {
  /**
   * @member {DatasetUnion} properties Dataset properties.
   */
  properties: DatasetUnion;
}

/**
 * @interface
 * An interface representing ActivityDependency.
 * Activity dependency information.
 *
 */
export interface ActivityDependency {
  /**
   * @member {string} activity Activity name.
   */
  activity: string;
  /**
   * @member {DependencyCondition[]} dependencyConditions Match-Condition for
   * the dependency.
   */
  dependencyConditions: DependencyCondition[];
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * @interface
 * An interface representing UserProperty.
 * User property.
 *
 */
export interface UserProperty {
  /**
   * @member {string} name User proprety name.
   */
  name: string;
  /**
   * @member {any} value User proprety value. Type: string (or Expression with
   * resultType string).
   */
  value: any;
}

/**
 * Contains the possible cases for Activity.
 */
export type ActivityUnion = Activity | ExecutionActivityUnion | ControlActivityUnion;

/**
 * @interface
 * An interface representing Activity.
 * A pipeline activity.
 *
 */
export interface Activity {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Activity";
  /**
   * @member {string} name Activity name.
   */
  name: string;
  /**
   * @member {string} [description] Activity description.
   */
  description?: string;
  /**
   * @member {ActivityDependency[]} [dependsOn] Activity depends on condition.
   */
  dependsOn?: ActivityDependency[];
  /**
   * @member {UserProperty[]} [userProperties] Activity user properties.
   */
  userProperties?: UserProperty[];
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * @interface
 * An interface representing VariableSpecification.
 * Definition of a single variable for a Pipeline.
 *
 */
export interface VariableSpecification {
  /**
   * @member {VariableType} type Variable type. Possible values include:
   * 'String', 'Bool', 'Array'
   */
  type: VariableType;
  /**
   * @member {any} [defaultValue] Default value of variable.
   */
  defaultValue?: any;
}

/**
 * @interface
 * An interface representing PipelineFolder.
 * The folder that this Pipeline is in. If not specified, Pipeline will appear
 * at the root level.
 *
 */
export interface PipelineFolder {
  /**
   * @member {string} [name] The name of the folder that this Pipeline is in.
   */
  name?: string;
}

/**
 * @interface
 * An interface representing PipelineModel.
 * A data factory pipeline.
 *
 */
export interface PipelineModel {
  /**
   * @member {string} [description] The description of the pipeline.
   */
  description?: string;
  /**
   * @member {ActivityUnion[]} [activities] List of activities in pipeline.
   */
  activities?: ActivityUnion[];
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * List of parameters for pipeline.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {{ [propertyName: string]: VariableSpecification }} [variables]
   * List of variables for pipeline.
   */
  variables?: { [propertyName: string]: VariableSpecification };
  /**
   * @member {number} [concurrency] The max number of concurrent runs for the
   * pipeline.
   */
  concurrency?: number;
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Pipeline.
   */
  annotations?: any[];
  /**
   * @member {PipelineFolder} [folder] The folder that this Pipeline is in. If
   * not specified, Pipeline will appear at the root level.
   */
  folder?: PipelineFolder;
}

/**
 * @interface
 * An interface representing PipelineResource.
 * Pipeline resource type.
 *
 * @extends SubResource
 */
export interface PipelineResource extends SubResource {
  /**
   * @member {string} [description] The description of the pipeline.
   */
  description?: string;
  /**
   * @member {ActivityUnion[]} [activities] List of activities in pipeline.
   */
  activities?: ActivityUnion[];
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * List of parameters for pipeline.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {{ [propertyName: string]: VariableSpecification }} [variables]
   * List of variables for pipeline.
   */
  variables?: { [propertyName: string]: VariableSpecification };
  /**
   * @member {number} [concurrency] The max number of concurrent runs for the
   * pipeline.
   */
  concurrency?: number;
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Pipeline.
   */
  annotations?: any[];
  /**
   * @member {PipelineFolder} [folder] The folder that this Pipeline is in. If
   * not specified, Pipeline will appear at the root level.
   */
  folder?: PipelineFolder;
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * Contains the possible cases for Trigger.
 */
export type TriggerUnion = Trigger | RerunTumblingWindowTrigger | TumblingWindowTrigger | MultiplePipelineTriggerUnion;

/**
 * @interface
 * An interface representing Trigger.
 * Azure data factory nested object which contains information about creating
 * pipeline run
 *
 */
export interface Trigger {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Trigger";
  /**
   * @member {string} [description] Trigger description.
   */
  description?: string;
  /**
   * @member {TriggerRuntimeState} [runtimeState] Indicates if trigger is
   * running or not. Updated when Start/Stop APIs are called on the Trigger.
   * Possible values include: 'Started', 'Stopped', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly runtimeState?: TriggerRuntimeState;
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * @interface
 * An interface representing TriggerResource.
 * Trigger resource type.
 *
 * @extends SubResource
 */
export interface TriggerResource extends SubResource {
  /**
   * @member {TriggerUnion} properties Properties of the trigger.
   */
  properties: TriggerUnion;
}

/**
 * @interface
 * An interface representing CreateRunResponse.
 * Response body with a run identifier.
 *
 */
export interface CreateRunResponse {
  /**
   * @member {string} runId Identifier of a run.
   */
  runId: string;
}

/**
 * @interface
 * An interface representing FactoryVSTSConfiguration.
 * Factory's VSTS repo information.
 *
 */
export interface FactoryVSTSConfiguration {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "FactoryVSTSConfiguration";
  /**
   * @member {string} accountName Account name.
   */
  accountName: string;
  /**
   * @member {string} repositoryName Rrepository name.
   */
  repositoryName: string;
  /**
   * @member {string} collaborationBranch Collaboration branch.
   */
  collaborationBranch: string;
  /**
   * @member {string} rootFolder Root folder.
   */
  rootFolder: string;
  /**
   * @member {string} [lastCommitId] Last commit id.
   */
  lastCommitId?: string;
  /**
   * @member {string} projectName VSTS project name.
   */
  projectName: string;
  /**
   * @member {string} [tenantId] VSTS tenant id.
   */
  tenantId?: string;
}

/**
 * @interface
 * An interface representing FactoryGitHubConfiguration.
 * Factory's GitHub repo information.
 *
 */
export interface FactoryGitHubConfiguration {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "FactoryGitHubConfiguration";
  /**
   * @member {string} accountName Account name.
   */
  accountName: string;
  /**
   * @member {string} repositoryName Rrepository name.
   */
  repositoryName: string;
  /**
   * @member {string} collaborationBranch Collaboration branch.
   */
  collaborationBranch: string;
  /**
   * @member {string} rootFolder Root folder.
   */
  rootFolder: string;
  /**
   * @member {string} [lastCommitId] Last commit id.
   */
  lastCommitId?: string;
  /**
   * @member {string} [hostName] GitHub Enterprise host name. For example:
   * https://github.mydomain.com
   */
  hostName?: string;
}

/**
 * @interface
 * An interface representing FactoryRepoUpdate.
 * Factory's git repo information.
 *
 */
export interface FactoryRepoUpdate {
  /**
   * @member {string} [factoryResourceId] The factory resource id.
   */
  factoryResourceId?: string;
  /**
   * @member {FactoryRepoConfigurationUnion} [repoConfiguration] Git repo
   * information of the factory.
   */
  repoConfiguration?: FactoryRepoConfigurationUnion;
}

/**
 * @interface
 * An interface representing GitHubAccessTokenRequest.
 * Get GitHub access token request definition.
 *
 */
export interface GitHubAccessTokenRequest {
  /**
   * @member {string} gitHubAccessCode GitHub access code.
   */
  gitHubAccessCode: string;
  /**
   * @member {string} [gitHubClientId] GitHub application client ID.
   */
  gitHubClientId?: string;
  /**
   * @member {string} gitHubAccessTokenBaseUrl GitHub access token base URL.
   */
  gitHubAccessTokenBaseUrl: string;
}

/**
 * @interface
 * An interface representing GitHubAccessTokenResponse.
 * Get GitHub access token response definition.
 *
 */
export interface GitHubAccessTokenResponse {
  /**
   * @member {string} [gitHubAccessToken] GitHub access token.
   */
  gitHubAccessToken?: string;
}

/**
 * @interface
 * An interface representing PipelineReference.
 * Pipeline reference type.
 *
 */
export interface PipelineReference {
  /**
   * @member {string} referenceName Reference pipeline name.
   */
  referenceName: string;
  /**
   * @member {string} [name] Reference name.
   */
  name?: string;
}

/**
 * @interface
 * An interface representing TriggerPipelineReference.
 * Pipeline that needs to be triggered with the given parameters.
 *
 */
export interface TriggerPipelineReference {
  /**
   * @member {PipelineReference} [pipelineReference] Pipeline reference.
   */
  pipelineReference?: PipelineReference;
  /**
   * @member {{ [propertyName: string]: any }} [parameters] Pipeline
   * parameters.
   */
  parameters?: { [propertyName: string]: any };
}

/**
 * @interface
 * An interface representing FactoryUpdateParameters.
 * Parameters for updating a factory resource.
 *
 */
export interface FactoryUpdateParameters {
  /**
   * @member {{ [propertyName: string]: string }} [tags] The resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * @member {FactoryIdentity} [identity] Managed service identity of the
   * factory.
   */
  identity?: FactoryIdentity;
}

/**
 * @interface
 * An interface representing DatasetReference.
 * Dataset reference type.
 *
 */
export interface DatasetReference {
  /**
   * @member {string} referenceName Reference dataset name.
   */
  referenceName: string;
  /**
   * @member {{ [propertyName: string]: any }} [parameters] Arguments for
   * dataset.
   */
  parameters?: { [propertyName: string]: any };
}

/**
 * @interface
 * An interface representing RunQueryFilter.
 * Query filter option for listing runs.
 *
 */
export interface RunQueryFilter {
  /**
   * @member {RunQueryFilterOperand} operand Parameter name to be used for
   * filter. The allowed operands to query pipeline runs are PipelineName,
   * RunStart, RunEnd and Status; to query activity runs are ActivityName,
   * ActivityRunStart, ActivityRunEnd, ActivityType and Status, and to query
   * trigger runs are TriggerName, TriggerRunTimestamp and Status. Possible
   * values include: 'PipelineName', 'Status', 'RunStart', 'RunEnd',
   * 'ActivityName', 'ActivityRunStart', 'ActivityRunEnd', 'ActivityType',
   * 'TriggerName', 'TriggerRunTimestamp'
   */
  operand: RunQueryFilterOperand;
  /**
   * @member {RunQueryFilterOperator} operator Operator to be used for filter.
   * Possible values include: 'Equals', 'NotEquals', 'In', 'NotIn'
   */
  operator: RunQueryFilterOperator;
  /**
   * @member {string[]} values List of filter values.
   */
  values: string[];
}

/**
 * @interface
 * An interface representing RunQueryOrderBy.
 * An object to provide order by options for listing runs.
 *
 */
export interface RunQueryOrderBy {
  /**
   * @member {RunQueryOrderByField} orderBy Parameter name to be used for order
   * by. The allowed parameters to order by for pipeline runs are PipelineName,
   * RunStart, RunEnd and Status; for activity runs are ActivityName,
   * ActivityRunStart, ActivityRunEnd and Status; for trigger runs are
   * TriggerName, TriggerRunTimestamp and Status. Possible values include:
   * 'RunStart', 'RunEnd', 'PipelineName', 'Status', 'ActivityName',
   * 'ActivityRunStart', 'ActivityRunEnd', 'TriggerName', 'TriggerRunTimestamp'
   */
  orderBy: RunQueryOrderByField;
  /**
   * @member {RunQueryOrder} order Sorting order of the parameter. Possible
   * values include: 'ASC', 'DESC'
   */
  order: RunQueryOrder;
}

/**
 * @interface
 * An interface representing RunFilterParameters.
 * Query parameters for listing runs.
 *
 */
export interface RunFilterParameters {
  /**
   * @member {string} [continuationToken] The continuation token for getting
   * the next page of results. Null for first page.
   */
  continuationToken?: string;
  /**
   * @member {Date} lastUpdatedAfter The time at or after which the run event
   * was updated in 'ISO 8601' format.
   */
  lastUpdatedAfter: Date;
  /**
   * @member {Date} lastUpdatedBefore The time at or before which the run event
   * was updated in 'ISO 8601' format.
   */
  lastUpdatedBefore: Date;
  /**
   * @member {RunQueryFilter[]} [filters] List of filters.
   */
  filters?: RunQueryFilter[];
  /**
   * @member {RunQueryOrderBy[]} [orderBy] List of OrderBy option.
   */
  orderBy?: RunQueryOrderBy[];
}

/**
 * @interface
 * An interface representing PipelineRunInvokedBy.
 * Provides entity name and id that started the pipeline run.
 *
 */
export interface PipelineRunInvokedBy {
  /**
   * @member {string} [name] Name of the entity that started the pipeline run.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [id] The ID of the entity that started the run.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [invokedByType] The type of the entity that started the
   * run.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly invokedByType?: string;
}

/**
 * @interface
 * An interface representing PipelineRun.
 * Information about a pipeline run.
 *
 */
export interface PipelineRun {
  /**
   * @member {string} [runId] Identifier of a run.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly runId?: string;
  /**
   * @member {string} [pipelineName] The pipeline name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly pipelineName?: string;
  /**
   * @member {{ [propertyName: string]: string }} [parameters] The full or
   * partial list of parameter name, value pair used in the pipeline run.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly parameters?: { [propertyName: string]: string };
  /**
   * @member {PipelineRunInvokedBy} [invokedBy] Entity that started the
   * pipeline run.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly invokedBy?: PipelineRunInvokedBy;
  /**
   * @member {Date} [lastUpdated] The last updated timestamp for the pipeline
   * run event in ISO8601 format.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly lastUpdated?: Date;
  /**
   * @member {Date} [runStart] The start time of a pipeline run in ISO8601
   * format.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly runStart?: Date;
  /**
   * @member {Date} [runEnd] The end time of a pipeline run in ISO8601 format.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly runEnd?: Date;
  /**
   * @member {number} [durationInMs] The duration of a pipeline run.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly durationInMs?: number;
  /**
   * @member {string} [status] The status of a pipeline run.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly status?: string;
  /**
   * @member {string} [message] The message from a pipeline run.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly message?: string;
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * @interface
 * An interface representing PipelineRunsQueryResponse.
 * A list pipeline runs.
 *
 */
export interface PipelineRunsQueryResponse {
  /**
   * @member {PipelineRun[]} value List of pipeline runs.
   */
  value: PipelineRun[];
  /**
   * @member {string} [continuationToken] The continuation token for getting
   * the next page of results, if any remaining results exist, null otherwise.
   */
  continuationToken?: string;
}

/**
 * @interface
 * An interface representing ActivityRun.
 * Information about an activity run in a pipeline.
 *
 */
export interface ActivityRun {
  /**
   * @member {string} [pipelineName] The name of the pipeline.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly pipelineName?: string;
  /**
   * @member {string} [pipelineRunId] The id of the pipeline run.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly pipelineRunId?: string;
  /**
   * @member {string} [activityName] The name of the activity.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly activityName?: string;
  /**
   * @member {string} [activityType] The type of the activity.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly activityType?: string;
  /**
   * @member {string} [activityRunId] The id of the activity run.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly activityRunId?: string;
  /**
   * @member {string} [linkedServiceName] The name of the compute linked
   * service.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly linkedServiceName?: string;
  /**
   * @member {string} [status] The status of the activity run.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly status?: string;
  /**
   * @member {Date} [activityRunStart] The start time of the activity run in
   * 'ISO 8601' format.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly activityRunStart?: Date;
  /**
   * @member {Date} [activityRunEnd] The end time of the activity run in 'ISO
   * 8601' format.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly activityRunEnd?: Date;
  /**
   * @member {number} [durationInMs] The duration of the activity run.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly durationInMs?: number;
  /**
   * @member {any} [input] The input for the activity.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly input?: any;
  /**
   * @member {any} [output] The output for the activity.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly output?: any;
  /**
   * @member {any} [error] The error if any from the activity run.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly error?: any;
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * @interface
 * An interface representing ActivityRunsQueryResponse.
 * A list activity runs.
 *
 */
export interface ActivityRunsQueryResponse {
  /**
   * @member {ActivityRun[]} value List of activity runs.
   */
  value: ActivityRun[];
  /**
   * @member {string} [continuationToken] The continuation token for getting
   * the next page of results, if any remaining results exist, null otherwise.
   */
  continuationToken?: string;
}

/**
 * @interface
 * An interface representing TriggerRun.
 * Trigger runs.
 *
 */
export interface TriggerRun {
  /**
   * @member {string} [triggerRunId] Trigger run id.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly triggerRunId?: string;
  /**
   * @member {string} [triggerName] Trigger name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly triggerName?: string;
  /**
   * @member {string} [triggerType] Trigger type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly triggerType?: string;
  /**
   * @member {Date} [triggerRunTimestamp] Trigger run start time.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly triggerRunTimestamp?: Date;
  /**
   * @member {TriggerRunStatus} [status] Trigger run status. Possible values
   * include: 'Succeeded', 'Failed', 'Inprogress'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly status?: TriggerRunStatus;
  /**
   * @member {string} [message] Trigger error message.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly message?: string;
  /**
   * @member {{ [propertyName: string]: string }} [properties] List of property
   * name and value related to trigger run. Name, value pair depends on type of
   * trigger.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly properties?: { [propertyName: string]: string };
  /**
   * @member {{ [propertyName: string]: string }} [triggeredPipelines] List of
   * pipeline name and run Id triggered by the trigger run.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly triggeredPipelines?: { [propertyName: string]: string };
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * @interface
 * An interface representing TriggerRunsQueryResponse.
 * A list of trigger runs.
 *
 */
export interface TriggerRunsQueryResponse {
  /**
   * @member {TriggerRun[]} value List of trigger runs.
   */
  value: TriggerRun[];
  /**
   * @member {string} [continuationToken] The continuation token for getting
   * the next page of results, if any remaining results exist, null otherwise.
   */
  continuationToken?: string;
}

/**
 * @interface
 * An interface representing RerunTumblingWindowTriggerActionParameters.
 * Rerun tumbling window trigger Parameters.
 *
 */
export interface RerunTumblingWindowTriggerActionParameters {
  /**
   * @member {Date} startTime The start time for the time period for which
   * restatement is initiated. Only UTC time is currently supported.
   */
  startTime: Date;
  /**
   * @member {Date} endTime The end time for the time period for which
   * restatement is initiated. Only UTC time is currently supported.
   */
  endTime: Date;
  /**
   * @member {number} maxConcurrency The max number of parallel time windows
   * (ready for execution) for which a rerun is triggered.
   */
  maxConcurrency: number;
}

/**
 * @interface
 * An interface representing RerunTumblingWindowTriggerTypeProperties.
 * Rerun Trigger properties.
 *
 */
export interface RerunTumblingWindowTriggerTypeProperties {
  /**
   * @member {any} [parentTrigger] The parent trigger reference.
   */
  parentTrigger?: any;
  /**
   * @member {Date} requestedStartTime The start time for the time period for
   * which restatement is initiated. Only UTC time is currently supported.
   */
  requestedStartTime: Date;
  /**
   * @member {Date} requestedEndTime The end time for the time period for which
   * restatement is initiated. Only UTC time is currently supported.
   */
  requestedEndTime: Date;
  /**
   * @member {number} maxConcurrency The max number of parallel time windows
   * (ready for execution) for which a rerun is triggered.
   */
  maxConcurrency: number;
}

/**
 * @interface
 * An interface representing RerunTumblingWindowTrigger.
 * Trigger that schedules pipeline reruns for all fixed time interval windows
 * from a requested start time to requested end time.
 *
 */
export interface RerunTumblingWindowTrigger {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "RerunTumblingWindowTrigger";
  /**
   * @member {string} [description] Trigger description.
   */
  description?: string;
  /**
   * @member {TriggerRuntimeState} [runtimeState] Indicates if trigger is
   * running or not. Updated when Start/Stop APIs are called on the Trigger.
   * Possible values include: 'Started', 'Stopped', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly runtimeState?: TriggerRuntimeState;
  /**
   * @member {any} [parentTrigger] The parent trigger reference.
   */
  parentTrigger?: any;
  /**
   * @member {Date} requestedStartTime The start time for the time period for
   * which restatement is initiated. Only UTC time is currently supported.
   */
  requestedStartTime: Date;
  /**
   * @member {Date} requestedEndTime The end time for the time period for which
   * restatement is initiated. Only UTC time is currently supported.
   */
  requestedEndTime: Date;
  /**
   * @member {number} maxConcurrency The max number of parallel time windows
   * (ready for execution) for which a rerun is triggered.
   */
  maxConcurrency: number;
}

/**
 * @interface
 * An interface representing RerunTriggerResource.
 * RerunTrigger resource type.
 *
 * @extends SubResource
 */
export interface RerunTriggerResource extends SubResource {
  /**
   * @member {RerunTumblingWindowTrigger} properties Properties of the rerun
   * trigger.
   */
  properties: RerunTumblingWindowTrigger;
}

/**
 * @interface
 * An interface representing OperationDisplay.
 * Metadata associated with the operation.
 *
 */
export interface OperationDisplay {
  /**
   * @member {string} [description] The description of the operation.
   */
  description?: string;
  /**
   * @member {string} [provider] The name of the provider.
   */
  provider?: string;
  /**
   * @member {string} [resource] The name of the resource type on which the
   * operation is performed.
   */
  resource?: string;
  /**
   * @member {string} [operation] The type of operation: get, read, delete,
   * etc.
   */
  operation?: string;
}

/**
 * @interface
 * An interface representing OperationLogSpecification.
 * Details about an operation related to logs.
 *
 */
export interface OperationLogSpecification {
  /**
   * @member {string} [name] The name of the log category.
   */
  name?: string;
  /**
   * @member {string} [displayName] Localized display name.
   */
  displayName?: string;
  /**
   * @member {string} [blobDuration] Blobs created in the customer storage
   * account, per hour.
   */
  blobDuration?: string;
}

/**
 * @interface
 * An interface representing OperationMetricAvailability.
 * Defines how often data for a metric becomes available.
 *
 */
export interface OperationMetricAvailability {
  /**
   * @member {string} [timeGrain] The granularity for the metric.
   */
  timeGrain?: string;
  /**
   * @member {string} [blobDuration] Blob created in the customer storage
   * account, per hour.
   */
  blobDuration?: string;
}

/**
 * @interface
 * An interface representing OperationMetricDimension.
 * Defines the metric dimension.
 *
 */
export interface OperationMetricDimension {
  /**
   * @member {string} [name] The name of the dimension for the metric.
   */
  name?: string;
  /**
   * @member {string} [displayName] The display name of the metric dimension.
   */
  displayName?: string;
  /**
   * @member {boolean} [toBeExportedForShoebox] Whether the dimension should be
   * exported to Azure Monitor.
   */
  toBeExportedForShoebox?: boolean;
}

/**
 * @interface
 * An interface representing OperationMetricSpecification.
 * Details about an operation related to metrics.
 *
 */
export interface OperationMetricSpecification {
  /**
   * @member {string} [name] The name of the metric.
   */
  name?: string;
  /**
   * @member {string} [displayName] Localized display name of the metric.
   */
  displayName?: string;
  /**
   * @member {string} [displayDescription] The description of the metric.
   */
  displayDescription?: string;
  /**
   * @member {string} [unit] The unit that the metric is measured in.
   */
  unit?: string;
  /**
   * @member {string} [aggregationType] The type of metric aggregation.
   */
  aggregationType?: string;
  /**
   * @member {string} [enableRegionalMdmAccount] Whether or not the service is
   * using regional MDM accounts.
   */
  enableRegionalMdmAccount?: string;
  /**
   * @member {string} [sourceMdmAccount] The name of the MDM account.
   */
  sourceMdmAccount?: string;
  /**
   * @member {string} [sourceMdmNamespace] The name of the MDM namespace.
   */
  sourceMdmNamespace?: string;
  /**
   * @member {OperationMetricAvailability[]} [availabilities] Defines how often
   * data for metrics becomes available.
   */
  availabilities?: OperationMetricAvailability[];
  /**
   * @member {OperationMetricDimension[]} [dimensions] Defines the metric
   * dimension.
   */
  dimensions?: OperationMetricDimension[];
}

/**
 * @interface
 * An interface representing OperationServiceSpecification.
 * Details about a service operation.
 *
 */
export interface OperationServiceSpecification {
  /**
   * @member {OperationLogSpecification[]} [logSpecifications] Details about
   * operations related to logs.
   */
  logSpecifications?: OperationLogSpecification[];
  /**
   * @member {OperationMetricSpecification[]} [metricSpecifications] Details
   * about operations related to metrics.
   */
  metricSpecifications?: OperationMetricSpecification[];
}

/**
 * @interface
 * An interface representing OperationProperties.
 * Additional details about an operation.
 *
 */
export interface OperationProperties {
  /**
   * @member {OperationServiceSpecification} [serviceSpecification] Details
   * about a service operation.
   */
  serviceSpecification?: OperationServiceSpecification;
}

/**
 * @interface
 * An interface representing Operation.
 * Azure Data Factory API operation definition.
 *
 */
export interface Operation {
  /**
   * @member {string} [name] Operation name: {provider}/{resource}/{operation}
   */
  name?: string;
  /**
   * @member {string} [origin] The intended executor of the operation.
   */
  origin?: string;
  /**
   * @member {OperationDisplay} [display] Metadata associated with the
   * operation.
   */
  display?: OperationDisplay;
  /**
   * @member {OperationServiceSpecification} [serviceSpecification] Details
   * about a service operation.
   */
  serviceSpecification?: OperationServiceSpecification;
}

/**
 * Contains the possible cases for DependencyReference.
 */
export type DependencyReferenceUnion = DependencyReference | SelfDependencyTumblingWindowTriggerReference | TriggerDependencyReferenceUnion;

/**
 * @interface
 * An interface representing DependencyReference.
 * Referenced dependency.
 *
 */
export interface DependencyReference {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "DependencyReference";
}

/**
 * @interface
 * An interface representing SelfDependencyTumblingWindowTriggerReference.
 * Self referenced tumbling window trigger dependency.
 *
 */
export interface SelfDependencyTumblingWindowTriggerReference {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "SelfDependencyTumblingWindowTriggerReference";
  /**
   * @member {string} offset Timespan applied to the start time of a tumbling
   * window when evaluating dependency.
   */
  offset: string;
  /**
   * @member {string} [size] The size of the window when evaluating the
   * dependency. If undefined the frequency of the tumbling window will be
   * used.
   */
  size?: string;
}

/**
 * @interface
 * An interface representing TriggerReference.
 * Trigger reference type.
 *
 */
export interface TriggerReference {
  /**
   * @member {string} referenceName Reference trigger name.
   */
  referenceName: string;
}

/**
 * Contains the possible cases for TriggerDependencyReference.
 */
export type TriggerDependencyReferenceUnion = TriggerDependencyReference | TumblingWindowTriggerDependencyReference;

/**
 * @interface
 * An interface representing TriggerDependencyReference.
 * Trigger referenced dependency.
 *
 */
export interface TriggerDependencyReference {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "TriggerDependencyReference";
  /**
   * @member {TriggerReference} referenceTrigger Referenced trigger.
   */
  referenceTrigger: TriggerReference;
}

/**
 * @interface
 * An interface representing TumblingWindowTriggerDependencyReference.
 * Referenced tumbling window trigger dependency.
 *
 */
export interface TumblingWindowTriggerDependencyReference {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "TumblingWindowTriggerDependencyReference";
  /**
   * @member {TriggerReference} referenceTrigger Referenced trigger.
   */
  referenceTrigger: TriggerReference;
  /**
   * @member {string} [offset] Timespan applied to the start time of a tumbling
   * window when evaluating dependency.
   */
  offset?: string;
  /**
   * @member {string} [size] The size of the window when evaluating the
   * dependency. If undefined the frequency of the tumbling window will be
   * used.
   */
  size?: string;
}

/**
 * @interface
 * An interface representing RetryPolicy.
 * Execution policy for an activity.
 *
 */
export interface RetryPolicy {
  /**
   * @member {any} [count] Maximum ordinary retry attempts. Default is 0. Type:
   * integer (or Expression with resultType integer), minimum: 0.
   */
  count?: any;
  /**
   * @member {number} [intervalInSeconds] Interval between retries in seconds.
   * Default is 30.
   */
  intervalInSeconds?: number;
}

/**
 * @interface
 * An interface representing TumblingWindowTriggerTypeProperties.
 * Tumbling Window Trigger properties.
 *
 */
export interface TumblingWindowTriggerTypeProperties {
  /**
   * @member {TumblingWindowFrequency} frequency The frequency of the time
   * windows. Possible values include: 'Minute', 'Hour'
   */
  frequency: TumblingWindowFrequency;
  /**
   * @member {number} interval The interval of the time windows. The minimum
   * interval allowed is 15 Minutes.
   */
  interval: number;
  /**
   * @member {Date} startTime The start time for the time period for the
   * trigger during which events are fired for windows that are ready. Only UTC
   * time is currently supported.
   */
  startTime: Date;
  /**
   * @member {Date} [endTime] The end time for the time period for the trigger
   * during which events are fired for windows that are ready. Only UTC time is
   * currently supported.
   */
  endTime?: Date;
  /**
   * @member {any} [delay] Specifies how long the trigger waits past due time
   * before triggering new run. It doesn't alter window start and end time. The
   * default is 0. Type: string (or Expression with resultType string),
   * pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  delay?: any;
  /**
   * @member {number} maxConcurrency The max number of parallel time windows
   * (ready for execution) for which a new run is triggered.
   */
  maxConcurrency: number;
  /**
   * @member {RetryPolicy} [retryPolicy] Retry policy that will be applied for
   * failed pipeline runs.
   */
  retryPolicy?: RetryPolicy;
  /**
   * @member {DependencyReferenceUnion[]} [dependsOn] Triggers that this
   * trigger depends on. Only tumbling window triggers are supported.
   */
  dependsOn?: DependencyReferenceUnion[];
}

/**
 * @interface
 * An interface representing TumblingWindowTrigger.
 * Trigger that schedules pipeline runs for all fixed time interval windows
 * from a start time without gaps and also supports backfill scenarios (when
 * start time is in the past).
 *
 */
export interface TumblingWindowTrigger {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "TumblingWindowTrigger";
  /**
   * @member {string} [description] Trigger description.
   */
  description?: string;
  /**
   * @member {TriggerRuntimeState} [runtimeState] Indicates if trigger is
   * running or not. Updated when Start/Stop APIs are called on the Trigger.
   * Possible values include: 'Started', 'Stopped', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly runtimeState?: TriggerRuntimeState;
  /**
   * @member {TriggerPipelineReference} pipelineProperty Pipeline for which
   * runs are created when an event is fired for trigger window that is ready.
   */
  pipelineProperty: TriggerPipelineReference;
  /**
   * @member {TumblingWindowFrequency} frequency The frequency of the time
   * windows. Possible values include: 'Minute', 'Hour'
   */
  frequency: TumblingWindowFrequency;
  /**
   * @member {number} interval The interval of the time windows. The minimum
   * interval allowed is 15 Minutes.
   */
  interval: number;
  /**
   * @member {Date} startTime The start time for the time period for the
   * trigger during which events are fired for windows that are ready. Only UTC
   * time is currently supported.
   */
  startTime: Date;
  /**
   * @member {Date} [endTime] The end time for the time period for the trigger
   * during which events are fired for windows that are ready. Only UTC time is
   * currently supported.
   */
  endTime?: Date;
  /**
   * @member {any} [delay] Specifies how long the trigger waits past due time
   * before triggering new run. It doesn't alter window start and end time. The
   * default is 0. Type: string (or Expression with resultType string),
   * pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  delay?: any;
  /**
   * @member {number} maxConcurrency The max number of parallel time windows
   * (ready for execution) for which a new run is triggered.
   */
  maxConcurrency: number;
  /**
   * @member {RetryPolicy} [retryPolicy] Retry policy that will be applied for
   * failed pipeline runs.
   */
  retryPolicy?: RetryPolicy;
  /**
   * @member {DependencyReferenceUnion[]} [dependsOn] Triggers that this
   * trigger depends on. Only tumbling window triggers are supported.
   */
  dependsOn?: DependencyReferenceUnion[];
}

/**
 * @interface
 * An interface representing BlobEventsTriggerTypeProperties.
 * Blob Events Trigger properties.
 *
 */
export interface BlobEventsTriggerTypeProperties {
  /**
   * @member {string} [blobPathBeginsWith] The blob path must begin with the
   * pattern provided for trigger to fire. For example,
   * '/records/blobs/december/' will only fire the trigger for blobs in the
   * december folder under the records container. At least one of these must be
   * provided: blobPathBeginsWith, blobPathEndsWith.
   */
  blobPathBeginsWith?: string;
  /**
   * @member {string} [blobPathEndsWith] The blob path must end with the
   * pattern provided for trigger to fire. For example, 'december/boxes.csv'
   * will only fire the trigger for blobs named boxes in a december folder. At
   * least one of these must be provided: blobPathBeginsWith, blobPathEndsWith.
   */
  blobPathEndsWith?: string;
  /**
   * @member {BlobEventTypes[]} events The type of events that cause this
   * trigger to fire.
   */
  events: BlobEventTypes[];
  /**
   * @member {string} scope The ARM resource ID of the Storage Account.
   */
  scope: string;
}

/**
 * Contains the possible cases for MultiplePipelineTrigger.
 */
export type MultiplePipelineTriggerUnion = MultiplePipelineTrigger | BlobEventsTrigger | BlobTrigger | ScheduleTrigger;

/**
 * @interface
 * An interface representing MultiplePipelineTrigger.
 * Base class for all triggers that support one to many model for trigger to
 * pipeline.
 *
 */
export interface MultiplePipelineTrigger {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "MultiplePipelineTrigger";
  /**
   * @member {string} [description] Trigger description.
   */
  description?: string;
  /**
   * @member {TriggerRuntimeState} [runtimeState] Indicates if trigger is
   * running or not. Updated when Start/Stop APIs are called on the Trigger.
   * Possible values include: 'Started', 'Stopped', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly runtimeState?: TriggerRuntimeState;
  /**
   * @member {TriggerPipelineReference[]} [pipelines] Pipelines that need to be
   * started.
   */
  pipelines?: TriggerPipelineReference[];
}

/**
 * @interface
 * An interface representing BlobEventsTrigger.
 * Trigger that runs everytime a Blob event occurs.
 *
 */
export interface BlobEventsTrigger {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "BlobEventsTrigger";
  /**
   * @member {string} [description] Trigger description.
   */
  description?: string;
  /**
   * @member {TriggerRuntimeState} [runtimeState] Indicates if trigger is
   * running or not. Updated when Start/Stop APIs are called on the Trigger.
   * Possible values include: 'Started', 'Stopped', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly runtimeState?: TriggerRuntimeState;
  /**
   * @member {TriggerPipelineReference[]} [pipelines] Pipelines that need to be
   * started.
   */
  pipelines?: TriggerPipelineReference[];
  /**
   * @member {string} [blobPathBeginsWith] The blob path must begin with the
   * pattern provided for trigger to fire. For example,
   * '/records/blobs/december/' will only fire the trigger for blobs in the
   * december folder under the records container. At least one of these must be
   * provided: blobPathBeginsWith, blobPathEndsWith.
   */
  blobPathBeginsWith?: string;
  /**
   * @member {string} [blobPathEndsWith] The blob path must end with the
   * pattern provided for trigger to fire. For example, 'december/boxes.csv'
   * will only fire the trigger for blobs named boxes in a december folder. At
   * least one of these must be provided: blobPathBeginsWith, blobPathEndsWith.
   */
  blobPathEndsWith?: string;
  /**
   * @member {BlobEventTypes[]} events The type of events that cause this
   * trigger to fire.
   */
  events: BlobEventTypes[];
  /**
   * @member {string} scope The ARM resource ID of the Storage Account.
   */
  scope: string;
}

/**
 * @interface
 * An interface representing BlobTriggerTypeProperties.
 * Blob Trigger properties.
 *
 */
export interface BlobTriggerTypeProperties {
  /**
   * @member {string} folderPath The path of the container/folder that will
   * trigger the pipeline.
   */
  folderPath: string;
  /**
   * @member {number} maxConcurrency The max number of parallel files to handle
   * when it is triggered.
   */
  maxConcurrency: number;
  /**
   * @member {LinkedServiceReference} linkedService The Azure Storage linked
   * service reference.
   */
  linkedService: LinkedServiceReference;
}

/**
 * @interface
 * An interface representing BlobTrigger.
 * Trigger that runs everytime the selected Blob container changes.
 *
 */
export interface BlobTrigger {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "BlobTrigger";
  /**
   * @member {string} [description] Trigger description.
   */
  description?: string;
  /**
   * @member {TriggerRuntimeState} [runtimeState] Indicates if trigger is
   * running or not. Updated when Start/Stop APIs are called on the Trigger.
   * Possible values include: 'Started', 'Stopped', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly runtimeState?: TriggerRuntimeState;
  /**
   * @member {TriggerPipelineReference[]} [pipelines] Pipelines that need to be
   * started.
   */
  pipelines?: TriggerPipelineReference[];
  /**
   * @member {string} folderPath The path of the container/folder that will
   * trigger the pipeline.
   */
  folderPath: string;
  /**
   * @member {number} maxConcurrency The max number of parallel files to handle
   * when it is triggered.
   */
  maxConcurrency: number;
  /**
   * @member {LinkedServiceReference} linkedService The Azure Storage linked
   * service reference.
   */
  linkedService: LinkedServiceReference;
}

/**
 * @interface
 * An interface representing RecurrenceScheduleOccurrence.
 * The recurrence schedule occurence.
 *
 */
export interface RecurrenceScheduleOccurrence {
  /**
   * @member {DayOfWeek} [day] The day of the week. Possible values include:
   * 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday',
   * 'Saturday'
   */
  day?: DayOfWeek;
  /**
   * @member {number} [occurrence] The occurrence.
   */
  occurrence?: number;
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * @interface
 * An interface representing RecurrenceSchedule.
 * The recurrence schedule.
 *
 */
export interface RecurrenceSchedule {
  /**
   * @member {number[]} [minutes] The minutes.
   */
  minutes?: number[];
  /**
   * @member {number[]} [hours] The hours.
   */
  hours?: number[];
  /**
   * @member {DaysOfWeek[]} [weekDays] The days of the week.
   */
  weekDays?: DaysOfWeek[];
  /**
   * @member {number[]} [monthDays] The month days.
   */
  monthDays?: number[];
  /**
   * @member {RecurrenceScheduleOccurrence[]} [monthlyOccurrences] The monthly
   * occurrences.
   */
  monthlyOccurrences?: RecurrenceScheduleOccurrence[];
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * @interface
 * An interface representing ScheduleTriggerRecurrence.
 * The workflow trigger recurrence.
 *
 */
export interface ScheduleTriggerRecurrence {
  /**
   * @member {RecurrenceFrequency} [frequency] The frequency. Possible values
   * include: 'NotSpecified', 'Minute', 'Hour', 'Day', 'Week', 'Month', 'Year'
   */
  frequency?: RecurrenceFrequency;
  /**
   * @member {number} [interval] The interval.
   */
  interval?: number;
  /**
   * @member {Date} [startTime] The start time.
   */
  startTime?: Date;
  /**
   * @member {Date} [endTime] The end time.
   */
  endTime?: Date;
  /**
   * @member {string} [timeZone] The time zone.
   */
  timeZone?: string;
  /**
   * @member {RecurrenceSchedule} [schedule] The recurrence schedule.
   */
  schedule?: RecurrenceSchedule;
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * @interface
 * An interface representing ScheduleTriggerTypeProperties.
 * Schedule Trigger properties.
 *
 */
export interface ScheduleTriggerTypeProperties {
  /**
   * @member {ScheduleTriggerRecurrence} recurrence Recurrence schedule
   * configuration.
   */
  recurrence: ScheduleTriggerRecurrence;
}

/**
 * @interface
 * An interface representing ScheduleTrigger.
 * Trigger that creates pipeline runs periodically, on schedule.
 *
 */
export interface ScheduleTrigger {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "ScheduleTrigger";
  /**
   * @member {string} [description] Trigger description.
   */
  description?: string;
  /**
   * @member {TriggerRuntimeState} [runtimeState] Indicates if trigger is
   * running or not. Updated when Start/Stop APIs are called on the Trigger.
   * Possible values include: 'Started', 'Stopped', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly runtimeState?: TriggerRuntimeState;
  /**
   * @member {TriggerPipelineReference[]} [pipelines] Pipelines that need to be
   * started.
   */
  pipelines?: TriggerPipelineReference[];
  /**
   * @member {ScheduleTriggerRecurrence} recurrence Recurrence schedule
   * configuration.
   */
  recurrence: ScheduleTriggerRecurrence;
}

/**
 * @interface
 * An interface representing ResponsysLinkedServiceTypeProperties.
 * Responsys linked service properties.
 *
 */
export interface ResponsysLinkedServiceTypeProperties {
  /**
   * @member {any} endpoint The endpoint of the Responsys server.
   */
  endpoint: any;
  /**
   * @member {any} clientId The client ID associated with the Responsys
   * application. Type: string (or Expression with resultType string).
   */
  clientId: any;
  /**
   * @member {SecretBaseUnion} [clientSecret] The client secret associated with
   * the Responsys application. Type: string (or Expression with resultType
   * string).
   */
  clientSecret?: SecretBaseUnion;
  /**
   * @member {any} [useEncryptedEndpoints] Specifies whether the data source
   * endpoints are encrypted using HTTPS. The default value is true. Type:
   * boolean (or Expression with resultType boolean).
   */
  useEncryptedEndpoints?: any;
  /**
   * @member {any} [useHostVerification] Specifies whether to require the host
   * name in the server's certificate to match the host name of the server when
   * connecting over SSL. The default value is true. Type: boolean (or
   * Expression with resultType boolean).
   */
  useHostVerification?: any;
  /**
   * @member {any} [usePeerVerification] Specifies whether to verify the
   * identity of the server when connecting over SSL. The default value is
   * true. Type: boolean (or Expression with resultType boolean).
   */
  usePeerVerification?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing ResponsysLinkedService.
 * Responsys linked service.
 *
 */
export interface ResponsysLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Responsys";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} endpoint The endpoint of the Responsys server.
   */
  endpoint: any;
  /**
   * @member {any} clientId The client ID associated with the Responsys
   * application. Type: string (or Expression with resultType string).
   */
  clientId: any;
  /**
   * @member {SecretBaseUnion} [clientSecret] The client secret associated with
   * the Responsys application. Type: string (or Expression with resultType
   * string).
   */
  clientSecret?: SecretBaseUnion;
  /**
   * @member {any} [useEncryptedEndpoints] Specifies whether the data source
   * endpoints are encrypted using HTTPS. The default value is true. Type:
   * boolean (or Expression with resultType boolean).
   */
  useEncryptedEndpoints?: any;
  /**
   * @member {any} [useHostVerification] Specifies whether to require the host
   * name in the server's certificate to match the host name of the server when
   * connecting over SSL. The default value is true. Type: boolean (or
   * Expression with resultType boolean).
   */
  useHostVerification?: any;
  /**
   * @member {any} [usePeerVerification] Specifies whether to verify the
   * identity of the server when connecting over SSL. The default value is
   * true. Type: boolean (or Expression with resultType boolean).
   */
  usePeerVerification?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing AzureDatabricksLinkedServiceTypeProperties.
 * Azure Databricks linked service properties.
 *
 */
export interface AzureDatabricksLinkedServiceTypeProperties {
  /**
   * @member {any} domain <REGION>.azuredatabricks.net, domain name of your
   * Databricks deployment. Type: string (or Expression with resultType
   * string).
   */
  domain: any;
  /**
   * @member {SecretBaseUnion} accessToken Access token for databricks REST
   * API. Refer to
   * https://docs.azuredatabricks.net/api/latest/authentication.html. Type:
   * string (or Expression with resultType string).
   */
  accessToken: SecretBaseUnion;
  /**
   * @member {any} [existingClusterId] The id of an existing cluster that will
   * be used for all runs of this job. Type: string (or Expression with
   * resultType string).
   */
  existingClusterId?: any;
  /**
   * @member {any} [newClusterVersion] The Spark version of new cluster. Type:
   * string (or Expression with resultType string).
   */
  newClusterVersion?: any;
  /**
   * @member {any} [newClusterNumOfWorker] Number of worker nodes that new
   * cluster should have. A string formatted Int32, like '1' means numOfWorker
   * is 1 or '1:10' means auto-scale from 1 as min and 10 as max. Type: string
   * (or Expression with resultType string).
   */
  newClusterNumOfWorker?: any;
  /**
   * @member {any} [newClusterNodeType] The node types of new cluster. Type:
   * string (or Expression with resultType string).
   */
  newClusterNodeType?: any;
  /**
   * @member {{ [propertyName: string]: any }} [newClusterSparkConf] A set of
   * optional, user-specified Spark configuration key-value pairs.
   */
  newClusterSparkConf?: { [propertyName: string]: any };
  /**
   * @member {{ [propertyName: string]: any }} [newClusterSparkEnvVars] A set
   * of optional, user-specified Spark environment variables key-value pairs.
   */
  newClusterSparkEnvVars?: { [propertyName: string]: any };
  /**
   * @member {{ [propertyName: string]: any }} [newClusterCustomTags]
   * Additional tags for cluster resources.
   */
  newClusterCustomTags?: { [propertyName: string]: any };
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing AzureDatabricksLinkedService.
 * Azure Databricks linked service.
 *
 */
export interface AzureDatabricksLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AzureDatabricks";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} domain <REGION>.azuredatabricks.net, domain name of your
   * Databricks deployment. Type: string (or Expression with resultType
   * string).
   */
  domain: any;
  /**
   * @member {SecretBaseUnion} accessToken Access token for databricks REST
   * API. Refer to
   * https://docs.azuredatabricks.net/api/latest/authentication.html. Type:
   * string (or Expression with resultType string).
   */
  accessToken: SecretBaseUnion;
  /**
   * @member {any} [existingClusterId] The id of an existing cluster that will
   * be used for all runs of this job. Type: string (or Expression with
   * resultType string).
   */
  existingClusterId?: any;
  /**
   * @member {any} [newClusterVersion] The Spark version of new cluster. Type:
   * string (or Expression with resultType string).
   */
  newClusterVersion?: any;
  /**
   * @member {any} [newClusterNumOfWorker] Number of worker nodes that new
   * cluster should have. A string formatted Int32, like '1' means numOfWorker
   * is 1 or '1:10' means auto-scale from 1 as min and 10 as max. Type: string
   * (or Expression with resultType string).
   */
  newClusterNumOfWorker?: any;
  /**
   * @member {any} [newClusterNodeType] The node types of new cluster. Type:
   * string (or Expression with resultType string).
   */
  newClusterNodeType?: any;
  /**
   * @member {{ [propertyName: string]: any }} [newClusterSparkConf] A set of
   * optional, user-specified Spark configuration key-value pairs.
   */
  newClusterSparkConf?: { [propertyName: string]: any };
  /**
   * @member {{ [propertyName: string]: any }} [newClusterSparkEnvVars] A set
   * of optional, user-specified Spark environment variables key-value pairs.
   */
  newClusterSparkEnvVars?: { [propertyName: string]: any };
  /**
   * @member {{ [propertyName: string]: any }} [newClusterCustomTags]
   * Additional tags for cluster resources.
   */
  newClusterCustomTags?: { [propertyName: string]: any };
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing AzureDataLakeAnalyticsLinkedServiceTypeProperties.
 * Azure Data Lake Analytics linked service properties.
 *
 */
export interface AzureDataLakeAnalyticsLinkedServiceTypeProperties {
  /**
   * @member {any} accountName The Azure Data Lake Analytics account name.
   * Type: string (or Expression with resultType string).
   */
  accountName: any;
  /**
   * @member {any} [servicePrincipalId] The ID of the application used to
   * authenticate against the Azure Data Lake Analytics account. Type: string
   * (or Expression with resultType string).
   */
  servicePrincipalId?: any;
  /**
   * @member {SecretBaseUnion} [servicePrincipalKey] The Key of the application
   * used to authenticate against the Azure Data Lake Analytics account.
   */
  servicePrincipalKey?: SecretBaseUnion;
  /**
   * @member {any} tenant The name or ID of the tenant to which the service
   * principal belongs. Type: string (or Expression with resultType string).
   */
  tenant: any;
  /**
   * @member {any} [subscriptionId] Data Lake Analytics account subscription ID
   * (if different from Data Factory account). Type: string (or Expression with
   * resultType string).
   */
  subscriptionId?: any;
  /**
   * @member {any} [resourceGroupName] Data Lake Analytics account resource
   * group name (if different from Data Factory account). Type: string (or
   * Expression with resultType string).
   */
  resourceGroupName?: any;
  /**
   * @member {any} [dataLakeAnalyticsUri] Azure Data Lake Analytics URI Type:
   * string (or Expression with resultType string).
   */
  dataLakeAnalyticsUri?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing AzureDataLakeAnalyticsLinkedService.
 * Azure Data Lake Analytics linked service.
 *
 */
export interface AzureDataLakeAnalyticsLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AzureDataLakeAnalytics";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} accountName The Azure Data Lake Analytics account name.
   * Type: string (or Expression with resultType string).
   */
  accountName: any;
  /**
   * @member {any} [servicePrincipalId] The ID of the application used to
   * authenticate against the Azure Data Lake Analytics account. Type: string
   * (or Expression with resultType string).
   */
  servicePrincipalId?: any;
  /**
   * @member {SecretBaseUnion} [servicePrincipalKey] The Key of the application
   * used to authenticate against the Azure Data Lake Analytics account.
   */
  servicePrincipalKey?: SecretBaseUnion;
  /**
   * @member {any} tenant The name or ID of the tenant to which the service
   * principal belongs. Type: string (or Expression with resultType string).
   */
  tenant: any;
  /**
   * @member {any} [subscriptionId] Data Lake Analytics account subscription ID
   * (if different from Data Factory account). Type: string (or Expression with
   * resultType string).
   */
  subscriptionId?: any;
  /**
   * @member {any} [resourceGroupName] Data Lake Analytics account resource
   * group name (if different from Data Factory account). Type: string (or
   * Expression with resultType string).
   */
  resourceGroupName?: any;
  /**
   * @member {any} [dataLakeAnalyticsUri] Azure Data Lake Analytics URI Type:
   * string (or Expression with resultType string).
   */
  dataLakeAnalyticsUri?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing ScriptAction.
 * Custom script action to run on HDI ondemand cluster once it's up.
 *
 */
export interface ScriptAction {
  /**
   * @member {string} name The user provided name of the script action.
   */
  name: string;
  /**
   * @member {string} uri The URI for the script action.
   */
  uri: string;
  /**
   * @member {any} roles The node types on which the script action should be
   * executed.
   */
  roles: any;
  /**
   * @member {string} [parameters] The parameters for the script action.
   */
  parameters?: string;
}

/**
 * @interface
 * An interface representing HDInsightOnDemandLinkedServiceTypeProperties.
 * HDInsight ondemand linked service properties.
 *
 */
export interface HDInsightOnDemandLinkedServiceTypeProperties {
  /**
   * @member {any} clusterSize Number of worker/data nodes in the cluster.
   * Suggestion value: 4. Type: string (or Expression with resultType string).
   */
  clusterSize: any;
  /**
   * @member {any} timeToLive The allowed idle time for the on-demand HDInsight
   * cluster. Specifies how long the on-demand HDInsight cluster stays alive
   * after completion of an activity run if there are no other active jobs in
   * the cluster. The minimum value is 5 mins. Type: string (or Expression with
   * resultType string).
   */
  timeToLive: any;
  /**
   * @member {any} version Version of the HDInsight cluster.  Type: string (or
   * Expression with resultType string).
   */
  version: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Azure Storage linked
   * service to be used by the on-demand cluster for storing and processing
   * data.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {any} hostSubscriptionId The customer’s subscription to host the
   * cluster. Type: string (or Expression with resultType string).
   */
  hostSubscriptionId: any;
  /**
   * @member {any} [servicePrincipalId] The service principal id for the
   * hostSubscriptionId. Type: string (or Expression with resultType string).
   */
  servicePrincipalId?: any;
  /**
   * @member {SecretBaseUnion} [servicePrincipalKey] The key for the service
   * principal id.
   */
  servicePrincipalKey?: SecretBaseUnion;
  /**
   * @member {any} tenant The Tenant id/name to which the service principal
   * belongs. Type: string (or Expression with resultType string).
   */
  tenant: any;
  /**
   * @member {any} clusterResourceGroup The resource group where the cluster
   * belongs. Type: string (or Expression with resultType string).
   */
  clusterResourceGroup: any;
  /**
   * @member {any} [clusterNamePrefix] The prefix of cluster name, postfix will
   * be distinct with timestamp. Type: string (or Expression with resultType
   * string).
   */
  clusterNamePrefix?: any;
  /**
   * @member {any} [clusterUserName] The username to access the cluster. Type:
   * string (or Expression with resultType string).
   */
  clusterUserName?: any;
  /**
   * @member {SecretBaseUnion} [clusterPassword] The password to access the
   * cluster.
   */
  clusterPassword?: SecretBaseUnion;
  /**
   * @member {any} [clusterSshUserName] The username to SSH remotely connect to
   * cluster’s node (for Linux). Type: string (or Expression with resultType
   * string).
   */
  clusterSshUserName?: any;
  /**
   * @member {SecretBaseUnion} [clusterSshPassword] The password to SSH
   * remotely connect cluster’s node (for Linux).
   */
  clusterSshPassword?: SecretBaseUnion;
  /**
   * @member {LinkedServiceReference[]} [additionalLinkedServiceNames]
   * Specifies additional storage accounts for the HDInsight linked service so
   * that the Data Factory service can register them on your behalf.
   */
  additionalLinkedServiceNames?: LinkedServiceReference[];
  /**
   * @member {LinkedServiceReference} [hcatalogLinkedServiceName] The name of
   * Azure SQL linked service that point to the HCatalog database. The
   * on-demand HDInsight cluster is created by using the Azure SQL database as
   * the metastore.
   */
  hcatalogLinkedServiceName?: LinkedServiceReference;
  /**
   * @member {any} [clusterType] The cluster type. Type: string (or Expression
   * with resultType string).
   */
  clusterType?: any;
  /**
   * @member {any} [sparkVersion] The version of spark if the cluster type is
   * 'spark'. Type: string (or Expression with resultType string).
   */
  sparkVersion?: any;
  /**
   * @member {any} [coreConfiguration] Specifies the core configuration
   * parameters (as in core-site.xml) for the HDInsight cluster to be created.
   */
  coreConfiguration?: any;
  /**
   * @member {any} [hBaseConfiguration] Specifies the HBase configuration
   * parameters (hbase-site.xml) for the HDInsight cluster.
   */
  hBaseConfiguration?: any;
  /**
   * @member {any} [hdfsConfiguration] Specifies the HDFS configuration
   * parameters (hdfs-site.xml) for the HDInsight cluster.
   */
  hdfsConfiguration?: any;
  /**
   * @member {any} [hiveConfiguration] Specifies the hive configuration
   * parameters (hive-site.xml) for the HDInsight cluster.
   */
  hiveConfiguration?: any;
  /**
   * @member {any} [mapReduceConfiguration] Specifies the MapReduce
   * configuration parameters (mapred-site.xml) for the HDInsight cluster.
   */
  mapReduceConfiguration?: any;
  /**
   * @member {any} [oozieConfiguration] Specifies the Oozie configuration
   * parameters (oozie-site.xml) for the HDInsight cluster.
   */
  oozieConfiguration?: any;
  /**
   * @member {any} [stormConfiguration] Specifies the Storm configuration
   * parameters (storm-site.xml) for the HDInsight cluster.
   */
  stormConfiguration?: any;
  /**
   * @member {any} [yarnConfiguration] Specifies the Yarn configuration
   * parameters (yarn-site.xml) for the HDInsight cluster.
   */
  yarnConfiguration?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
  /**
   * @member {any} [headNodeSize] Specifies the size of the head node for the
   * HDInsight cluster.
   */
  headNodeSize?: any;
  /**
   * @member {any} [dataNodeSize] Specifies the size of the data node for the
   * HDInsight cluster.
   */
  dataNodeSize?: any;
  /**
   * @member {any} [zookeeperNodeSize] Specifies the size of the Zoo Keeper
   * node for the HDInsight cluster.
   */
  zookeeperNodeSize?: any;
  /**
   * @member {ScriptAction[]} [scriptActions] Custom script actions to run on
   * HDI ondemand cluster once it's up. Please refer to
   * https://docs.microsoft.com/en-us/azure/hdinsight/hdinsight-hadoop-customize-cluster-linux?toc=%2Fen-us%2Fazure%2Fhdinsight%2Fr-server%2FTOC.json&bc=%2Fen-us%2Fazure%2Fbread%2Ftoc.json#understanding-script-actions.
   */
  scriptActions?: ScriptAction[];
}

/**
 * @interface
 * An interface representing HDInsightOnDemandLinkedService.
 * HDInsight ondemand linked service.
 *
 */
export interface HDInsightOnDemandLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "HDInsightOnDemand";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} clusterSize Number of worker/data nodes in the cluster.
   * Suggestion value: 4. Type: string (or Expression with resultType string).
   */
  clusterSize: any;
  /**
   * @member {any} timeToLive The allowed idle time for the on-demand HDInsight
   * cluster. Specifies how long the on-demand HDInsight cluster stays alive
   * after completion of an activity run if there are no other active jobs in
   * the cluster. The minimum value is 5 mins. Type: string (or Expression with
   * resultType string).
   */
  timeToLive: any;
  /**
   * @member {any} version Version of the HDInsight cluster.  Type: string (or
   * Expression with resultType string).
   */
  version: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Azure Storage linked
   * service to be used by the on-demand cluster for storing and processing
   * data.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {any} hostSubscriptionId The customer’s subscription to host the
   * cluster. Type: string (or Expression with resultType string).
   */
  hostSubscriptionId: any;
  /**
   * @member {any} [servicePrincipalId] The service principal id for the
   * hostSubscriptionId. Type: string (or Expression with resultType string).
   */
  servicePrincipalId?: any;
  /**
   * @member {SecretBaseUnion} [servicePrincipalKey] The key for the service
   * principal id.
   */
  servicePrincipalKey?: SecretBaseUnion;
  /**
   * @member {any} tenant The Tenant id/name to which the service principal
   * belongs. Type: string (or Expression with resultType string).
   */
  tenant: any;
  /**
   * @member {any} clusterResourceGroup The resource group where the cluster
   * belongs. Type: string (or Expression with resultType string).
   */
  clusterResourceGroup: any;
  /**
   * @member {any} [clusterNamePrefix] The prefix of cluster name, postfix will
   * be distinct with timestamp. Type: string (or Expression with resultType
   * string).
   */
  clusterNamePrefix?: any;
  /**
   * @member {any} [clusterUserName] The username to access the cluster. Type:
   * string (or Expression with resultType string).
   */
  clusterUserName?: any;
  /**
   * @member {SecretBaseUnion} [clusterPassword] The password to access the
   * cluster.
   */
  clusterPassword?: SecretBaseUnion;
  /**
   * @member {any} [clusterSshUserName] The username to SSH remotely connect to
   * cluster’s node (for Linux). Type: string (or Expression with resultType
   * string).
   */
  clusterSshUserName?: any;
  /**
   * @member {SecretBaseUnion} [clusterSshPassword] The password to SSH
   * remotely connect cluster’s node (for Linux).
   */
  clusterSshPassword?: SecretBaseUnion;
  /**
   * @member {LinkedServiceReference[]} [additionalLinkedServiceNames]
   * Specifies additional storage accounts for the HDInsight linked service so
   * that the Data Factory service can register them on your behalf.
   */
  additionalLinkedServiceNames?: LinkedServiceReference[];
  /**
   * @member {LinkedServiceReference} [hcatalogLinkedServiceName] The name of
   * Azure SQL linked service that point to the HCatalog database. The
   * on-demand HDInsight cluster is created by using the Azure SQL database as
   * the metastore.
   */
  hcatalogLinkedServiceName?: LinkedServiceReference;
  /**
   * @member {any} [clusterType] The cluster type. Type: string (or Expression
   * with resultType string).
   */
  clusterType?: any;
  /**
   * @member {any} [sparkVersion] The version of spark if the cluster type is
   * 'spark'. Type: string (or Expression with resultType string).
   */
  sparkVersion?: any;
  /**
   * @member {any} [coreConfiguration] Specifies the core configuration
   * parameters (as in core-site.xml) for the HDInsight cluster to be created.
   */
  coreConfiguration?: any;
  /**
   * @member {any} [hBaseConfiguration] Specifies the HBase configuration
   * parameters (hbase-site.xml) for the HDInsight cluster.
   */
  hBaseConfiguration?: any;
  /**
   * @member {any} [hdfsConfiguration] Specifies the HDFS configuration
   * parameters (hdfs-site.xml) for the HDInsight cluster.
   */
  hdfsConfiguration?: any;
  /**
   * @member {any} [hiveConfiguration] Specifies the hive configuration
   * parameters (hive-site.xml) for the HDInsight cluster.
   */
  hiveConfiguration?: any;
  /**
   * @member {any} [mapReduceConfiguration] Specifies the MapReduce
   * configuration parameters (mapred-site.xml) for the HDInsight cluster.
   */
  mapReduceConfiguration?: any;
  /**
   * @member {any} [oozieConfiguration] Specifies the Oozie configuration
   * parameters (oozie-site.xml) for the HDInsight cluster.
   */
  oozieConfiguration?: any;
  /**
   * @member {any} [stormConfiguration] Specifies the Storm configuration
   * parameters (storm-site.xml) for the HDInsight cluster.
   */
  stormConfiguration?: any;
  /**
   * @member {any} [yarnConfiguration] Specifies the Yarn configuration
   * parameters (yarn-site.xml) for the HDInsight cluster.
   */
  yarnConfiguration?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
  /**
   * @member {any} [headNodeSize] Specifies the size of the head node for the
   * HDInsight cluster.
   */
  headNodeSize?: any;
  /**
   * @member {any} [dataNodeSize] Specifies the size of the data node for the
   * HDInsight cluster.
   */
  dataNodeSize?: any;
  /**
   * @member {any} [zookeeperNodeSize] Specifies the size of the Zoo Keeper
   * node for the HDInsight cluster.
   */
  zookeeperNodeSize?: any;
  /**
   * @member {ScriptAction[]} [scriptActions] Custom script actions to run on
   * HDI ondemand cluster once it's up. Please refer to
   * https://docs.microsoft.com/en-us/azure/hdinsight/hdinsight-hadoop-customize-cluster-linux?toc=%2Fen-us%2Fazure%2Fhdinsight%2Fr-server%2FTOC.json&bc=%2Fen-us%2Fazure%2Fbread%2Ftoc.json#understanding-script-actions.
   */
  scriptActions?: ScriptAction[];
}

/**
 * @interface
 * An interface representing SalesforceMarketingCloudLinkedServiceTypeProperties.
 * Salesforce Marketing Cloud linked service properties.
 *
 */
export interface SalesforceMarketingCloudLinkedServiceTypeProperties {
  /**
   * @member {any} clientId The client ID associated with the Salesforce
   * Marketing Cloud application. Type: string (or Expression with resultType
   * string).
   */
  clientId: any;
  /**
   * @member {SecretBaseUnion} [clientSecret] The client secret associated with
   * the Salesforce Marketing Cloud application. Type: string (or Expression
   * with resultType string).
   */
  clientSecret?: SecretBaseUnion;
  /**
   * @member {any} [useEncryptedEndpoints] Specifies whether the data source
   * endpoints are encrypted using HTTPS. The default value is true. Type:
   * boolean (or Expression with resultType boolean).
   */
  useEncryptedEndpoints?: any;
  /**
   * @member {any} [useHostVerification] Specifies whether to require the host
   * name in the server's certificate to match the host name of the server when
   * connecting over SSL. The default value is true. Type: boolean (or
   * Expression with resultType boolean).
   */
  useHostVerification?: any;
  /**
   * @member {any} [usePeerVerification] Specifies whether to verify the
   * identity of the server when connecting over SSL. The default value is
   * true. Type: boolean (or Expression with resultType boolean).
   */
  usePeerVerification?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing SalesforceMarketingCloudLinkedService.
 * Salesforce Marketing Cloud linked service.
 *
 */
export interface SalesforceMarketingCloudLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "SalesforceMarketingCloud";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} clientId The client ID associated with the Salesforce
   * Marketing Cloud application. Type: string (or Expression with resultType
   * string).
   */
  clientId: any;
  /**
   * @member {SecretBaseUnion} [clientSecret] The client secret associated with
   * the Salesforce Marketing Cloud application. Type: string (or Expression
   * with resultType string).
   */
  clientSecret?: SecretBaseUnion;
  /**
   * @member {any} [useEncryptedEndpoints] Specifies whether the data source
   * endpoints are encrypted using HTTPS. The default value is true. Type:
   * boolean (or Expression with resultType boolean).
   */
  useEncryptedEndpoints?: any;
  /**
   * @member {any} [useHostVerification] Specifies whether to require the host
   * name in the server's certificate to match the host name of the server when
   * connecting over SSL. The default value is true. Type: boolean (or
   * Expression with resultType boolean).
   */
  useHostVerification?: any;
  /**
   * @member {any} [usePeerVerification] Specifies whether to verify the
   * identity of the server when connecting over SSL. The default value is
   * true. Type: boolean (or Expression with resultType boolean).
   */
  usePeerVerification?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing NetezzaLinkedServiceTypeProperties.
 * Netezza linked service properties.
 *
 */
export interface NetezzaLinkedServiceTypeProperties {
  /**
   * @member {any} [connectionString] An ODBC connection string. Type: string,
   * SecureString or AzureKeyVaultSecretReference.
   */
  connectionString?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing NetezzaLinkedService.
 * Netezza linked service.
 *
 */
export interface NetezzaLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Netezza";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} [connectionString] An ODBC connection string. Type: string,
   * SecureString or AzureKeyVaultSecretReference.
   */
  connectionString?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing VerticaLinkedServiceTypeProperties.
 * Vertica linked service properties.
 *
 */
export interface VerticaLinkedServiceTypeProperties {
  /**
   * @member {any} [connectionString] An ODBC connection string. Type: string,
   * SecureString or AzureKeyVaultSecretReference.
   */
  connectionString?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing VerticaLinkedService.
 * Vertica linked service.
 *
 */
export interface VerticaLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Vertica";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} [connectionString] An ODBC connection string. Type: string,
   * SecureString or AzureKeyVaultSecretReference.
   */
  connectionString?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing ZohoLinkedServiceTypeProperties.
 * Zoho server linked service properties.
 *
 */
export interface ZohoLinkedServiceTypeProperties {
  /**
   * @member {any} endpoint The endpoint of the Zoho server. (i.e.
   * crm.zoho.com/crm/private)
   */
  endpoint: any;
  /**
   * @member {SecretBaseUnion} [accessToken] The access token for Zoho
   * authentication.
   */
  accessToken?: SecretBaseUnion;
  /**
   * @member {any} [useEncryptedEndpoints] Specifies whether the data source
   * endpoints are encrypted using HTTPS. The default value is true.
   */
  useEncryptedEndpoints?: any;
  /**
   * @member {any} [useHostVerification] Specifies whether to require the host
   * name in the server's certificate to match the host name of the server when
   * connecting over SSL. The default value is true.
   */
  useHostVerification?: any;
  /**
   * @member {any} [usePeerVerification] Specifies whether to verify the
   * identity of the server when connecting over SSL. The default value is
   * true.
   */
  usePeerVerification?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing ZohoLinkedService.
 * Zoho server linked service.
 *
 */
export interface ZohoLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Zoho";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} endpoint The endpoint of the Zoho server. (i.e.
   * crm.zoho.com/crm/private)
   */
  endpoint: any;
  /**
   * @member {SecretBaseUnion} [accessToken] The access token for Zoho
   * authentication.
   */
  accessToken?: SecretBaseUnion;
  /**
   * @member {any} [useEncryptedEndpoints] Specifies whether the data source
   * endpoints are encrypted using HTTPS. The default value is true.
   */
  useEncryptedEndpoints?: any;
  /**
   * @member {any} [useHostVerification] Specifies whether to require the host
   * name in the server's certificate to match the host name of the server when
   * connecting over SSL. The default value is true.
   */
  useHostVerification?: any;
  /**
   * @member {any} [usePeerVerification] Specifies whether to verify the
   * identity of the server when connecting over SSL. The default value is
   * true.
   */
  usePeerVerification?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing XeroLinkedServiceTypeProperties.
 * Xero Serivce linked service properties.
 *
 */
export interface XeroLinkedServiceTypeProperties {
  /**
   * @member {any} host The endpoint of the Xero server. (i.e. api.xero.com)
   */
  host: any;
  /**
   * @member {SecretBaseUnion} [consumerKey] The consumer key associated with
   * the Xero application.
   */
  consumerKey?: SecretBaseUnion;
  /**
   * @member {SecretBaseUnion} [privateKey] The private key from the .pem file
   * that was generated for your Xero private application. You must include all
   * the text from the .pem file, including the Unix line endings(
   * ).
   */
  privateKey?: SecretBaseUnion;
  /**
   * @member {any} [useEncryptedEndpoints] Specifies whether the data source
   * endpoints are encrypted using HTTPS. The default value is true.
   */
  useEncryptedEndpoints?: any;
  /**
   * @member {any} [useHostVerification] Specifies whether to require the host
   * name in the server's certificate to match the host name of the server when
   * connecting over SSL. The default value is true.
   */
  useHostVerification?: any;
  /**
   * @member {any} [usePeerVerification] Specifies whether to verify the
   * identity of the server when connecting over SSL. The default value is
   * true.
   */
  usePeerVerification?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing XeroLinkedService.
 * Xero Serivce linked service.
 *
 */
export interface XeroLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Xero";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} host The endpoint of the Xero server. (i.e. api.xero.com)
   */
  host: any;
  /**
   * @member {SecretBaseUnion} [consumerKey] The consumer key associated with
   * the Xero application.
   */
  consumerKey?: SecretBaseUnion;
  /**
   * @member {SecretBaseUnion} [privateKey] The private key from the .pem file
   * that was generated for your Xero private application. You must include all
   * the text from the .pem file, including the Unix line endings(
   * ).
   */
  privateKey?: SecretBaseUnion;
  /**
   * @member {any} [useEncryptedEndpoints] Specifies whether the data source
   * endpoints are encrypted using HTTPS. The default value is true.
   */
  useEncryptedEndpoints?: any;
  /**
   * @member {any} [useHostVerification] Specifies whether to require the host
   * name in the server's certificate to match the host name of the server when
   * connecting over SSL. The default value is true.
   */
  useHostVerification?: any;
  /**
   * @member {any} [usePeerVerification] Specifies whether to verify the
   * identity of the server when connecting over SSL. The default value is
   * true.
   */
  usePeerVerification?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing SquareLinkedServiceTypeProperties.
 * Square Serivce linked service properties.
 *
 */
export interface SquareLinkedServiceTypeProperties {
  /**
   * @member {any} host The URL of the Square instance. (i.e.
   * mystore.mysquare.com)
   */
  host: any;
  /**
   * @member {any} clientId The client ID associated with your Square
   * application.
   */
  clientId: any;
  /**
   * @member {SecretBaseUnion} [clientSecret] The client secret associated with
   * your Square application.
   */
  clientSecret?: SecretBaseUnion;
  /**
   * @member {any} redirectUri The redirect URL assigned in the Square
   * application dashboard. (i.e. http://localhost:2500)
   */
  redirectUri: any;
  /**
   * @member {any} [useEncryptedEndpoints] Specifies whether the data source
   * endpoints are encrypted using HTTPS. The default value is true.
   */
  useEncryptedEndpoints?: any;
  /**
   * @member {any} [useHostVerification] Specifies whether to require the host
   * name in the server's certificate to match the host name of the server when
   * connecting over SSL. The default value is true.
   */
  useHostVerification?: any;
  /**
   * @member {any} [usePeerVerification] Specifies whether to verify the
   * identity of the server when connecting over SSL. The default value is
   * true.
   */
  usePeerVerification?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing SquareLinkedService.
 * Square Serivce linked service.
 *
 */
export interface SquareLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Square";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} host The URL of the Square instance. (i.e.
   * mystore.mysquare.com)
   */
  host: any;
  /**
   * @member {any} clientId The client ID associated with your Square
   * application.
   */
  clientId: any;
  /**
   * @member {SecretBaseUnion} [clientSecret] The client secret associated with
   * your Square application.
   */
  clientSecret?: SecretBaseUnion;
  /**
   * @member {any} redirectUri The redirect URL assigned in the Square
   * application dashboard. (i.e. http://localhost:2500)
   */
  redirectUri: any;
  /**
   * @member {any} [useEncryptedEndpoints] Specifies whether the data source
   * endpoints are encrypted using HTTPS. The default value is true.
   */
  useEncryptedEndpoints?: any;
  /**
   * @member {any} [useHostVerification] Specifies whether to require the host
   * name in the server's certificate to match the host name of the server when
   * connecting over SSL. The default value is true.
   */
  useHostVerification?: any;
  /**
   * @member {any} [usePeerVerification] Specifies whether to verify the
   * identity of the server when connecting over SSL. The default value is
   * true.
   */
  usePeerVerification?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing SparkLinkedServiceTypeProperties.
 * Spark Server linked service properties.
 *
 */
export interface SparkLinkedServiceTypeProperties {
  /**
   * @member {any} host IP address or host name of the Spark server
   */
  host: any;
  /**
   * @member {any} port The TCP port that the Spark server uses to listen for
   * client connections.
   */
  port: any;
  /**
   * @member {SparkServerType} [serverType] The type of Spark server. Possible
   * values include: 'SharkServer', 'SharkServer2', 'SparkThriftServer'
   */
  serverType?: SparkServerType;
  /**
   * @member {SparkThriftTransportProtocol} [thriftTransportProtocol] The
   * transport protocol to use in the Thrift layer. Possible values include:
   * 'Binary', 'SASL', 'HTTP '
   */
  thriftTransportProtocol?: SparkThriftTransportProtocol;
  /**
   * @member {SparkAuthenticationType} authenticationType The authentication
   * method used to access the Spark server. Possible values include:
   * 'Anonymous', 'Username', 'UsernameAndPassword',
   * 'WindowsAzureHDInsightService'
   */
  authenticationType: SparkAuthenticationType;
  /**
   * @member {any} [username] The user name that you use to access Spark
   * Server.
   */
  username?: any;
  /**
   * @member {SecretBaseUnion} [password] The password corresponding to the
   * user name that you provided in the Username field
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [httpPath] The partial URL corresponding to the Spark
   * server.
   */
  httpPath?: any;
  /**
   * @member {any} [enableSsl] Specifies whether the connections to the server
   * are encrypted using SSL. The default value is false.
   */
  enableSsl?: any;
  /**
   * @member {any} [trustedCertPath] The full path of the .pem file containing
   * trusted CA certificates for verifying the server when connecting over SSL.
   * This property can only be set when using SSL on self-hosted IR. The
   * default value is the cacerts.pem file installed with the IR.
   */
  trustedCertPath?: any;
  /**
   * @member {any} [useSystemTrustStore] Specifies whether to use a CA
   * certificate from the system trust store or from a specified PEM file. The
   * default value is false.
   */
  useSystemTrustStore?: any;
  /**
   * @member {any} [allowHostNameCNMismatch] Specifies whether to require a
   * CA-issued SSL certificate name to match the host name of the server when
   * connecting over SSL. The default value is false.
   */
  allowHostNameCNMismatch?: any;
  /**
   * @member {any} [allowSelfSignedServerCert] Specifies whether to allow
   * self-signed certificates from the server. The default value is false.
   */
  allowSelfSignedServerCert?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing SparkLinkedService.
 * Spark Server linked service.
 *
 */
export interface SparkLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Spark";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} host IP address or host name of the Spark server
   */
  host: any;
  /**
   * @member {any} port The TCP port that the Spark server uses to listen for
   * client connections.
   */
  port: any;
  /**
   * @member {SparkServerType} [serverType] The type of Spark server. Possible
   * values include: 'SharkServer', 'SharkServer2', 'SparkThriftServer'
   */
  serverType?: SparkServerType;
  /**
   * @member {SparkThriftTransportProtocol} [thriftTransportProtocol] The
   * transport protocol to use in the Thrift layer. Possible values include:
   * 'Binary', 'SASL', 'HTTP '
   */
  thriftTransportProtocol?: SparkThriftTransportProtocol;
  /**
   * @member {SparkAuthenticationType} authenticationType The authentication
   * method used to access the Spark server. Possible values include:
   * 'Anonymous', 'Username', 'UsernameAndPassword',
   * 'WindowsAzureHDInsightService'
   */
  authenticationType: SparkAuthenticationType;
  /**
   * @member {any} [username] The user name that you use to access Spark
   * Server.
   */
  username?: any;
  /**
   * @member {SecretBaseUnion} [password] The password corresponding to the
   * user name that you provided in the Username field
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [httpPath] The partial URL corresponding to the Spark
   * server.
   */
  httpPath?: any;
  /**
   * @member {any} [enableSsl] Specifies whether the connections to the server
   * are encrypted using SSL. The default value is false.
   */
  enableSsl?: any;
  /**
   * @member {any} [trustedCertPath] The full path of the .pem file containing
   * trusted CA certificates for verifying the server when connecting over SSL.
   * This property can only be set when using SSL on self-hosted IR. The
   * default value is the cacerts.pem file installed with the IR.
   */
  trustedCertPath?: any;
  /**
   * @member {any} [useSystemTrustStore] Specifies whether to use a CA
   * certificate from the system trust store or from a specified PEM file. The
   * default value is false.
   */
  useSystemTrustStore?: any;
  /**
   * @member {any} [allowHostNameCNMismatch] Specifies whether to require a
   * CA-issued SSL certificate name to match the host name of the server when
   * connecting over SSL. The default value is false.
   */
  allowHostNameCNMismatch?: any;
  /**
   * @member {any} [allowSelfSignedServerCert] Specifies whether to allow
   * self-signed certificates from the server. The default value is false.
   */
  allowSelfSignedServerCert?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing ShopifyLinkedServiceTypeProperties.
 * Shopify Serivce linked service properties.
 *
 */
export interface ShopifyLinkedServiceTypeProperties {
  /**
   * @member {any} host The endpoint of the Shopify server. (i.e.
   * mystore.myshopify.com)
   */
  host: any;
  /**
   * @member {SecretBaseUnion} [accessToken] The API access token that can be
   * used to access Shopify’s data. The token won't expire if it is offline
   * mode.
   */
  accessToken?: SecretBaseUnion;
  /**
   * @member {any} [useEncryptedEndpoints] Specifies whether the data source
   * endpoints are encrypted using HTTPS. The default value is true.
   */
  useEncryptedEndpoints?: any;
  /**
   * @member {any} [useHostVerification] Specifies whether to require the host
   * name in the server's certificate to match the host name of the server when
   * connecting over SSL. The default value is true.
   */
  useHostVerification?: any;
  /**
   * @member {any} [usePeerVerification] Specifies whether to verify the
   * identity of the server when connecting over SSL. The default value is
   * true.
   */
  usePeerVerification?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing ShopifyLinkedService.
 * Shopify Serivce linked service.
 *
 */
export interface ShopifyLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Shopify";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} host The endpoint of the Shopify server. (i.e.
   * mystore.myshopify.com)
   */
  host: any;
  /**
   * @member {SecretBaseUnion} [accessToken] The API access token that can be
   * used to access Shopify’s data. The token won't expire if it is offline
   * mode.
   */
  accessToken?: SecretBaseUnion;
  /**
   * @member {any} [useEncryptedEndpoints] Specifies whether the data source
   * endpoints are encrypted using HTTPS. The default value is true.
   */
  useEncryptedEndpoints?: any;
  /**
   * @member {any} [useHostVerification] Specifies whether to require the host
   * name in the server's certificate to match the host name of the server when
   * connecting over SSL. The default value is true.
   */
  useHostVerification?: any;
  /**
   * @member {any} [usePeerVerification] Specifies whether to verify the
   * identity of the server when connecting over SSL. The default value is
   * true.
   */
  usePeerVerification?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing ServiceNowLinkedServiceTypeProperties.
 * ServiceNow server linked service properties.
 *
 */
export interface ServiceNowLinkedServiceTypeProperties {
  /**
   * @member {any} endpoint The endpoint of the ServiceNow server. (i.e.
   * <instance>.service-now.com)
   */
  endpoint: any;
  /**
   * @member {ServiceNowAuthenticationType} authenticationType The
   * authentication type to use. Possible values include: 'Basic', 'OAuth2'
   */
  authenticationType: ServiceNowAuthenticationType;
  /**
   * @member {any} [username] The user name used to connect to the ServiceNow
   * server for Basic and OAuth2 authentication.
   */
  username?: any;
  /**
   * @member {SecretBaseUnion} [password] The password corresponding to the
   * user name for Basic and OAuth2 authentication.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [clientId] The client id for OAuth2 authentication.
   */
  clientId?: any;
  /**
   * @member {SecretBaseUnion} [clientSecret] The client secret for OAuth2
   * authentication.
   */
  clientSecret?: SecretBaseUnion;
  /**
   * @member {any} [useEncryptedEndpoints] Specifies whether the data source
   * endpoints are encrypted using HTTPS. The default value is true.
   */
  useEncryptedEndpoints?: any;
  /**
   * @member {any} [useHostVerification] Specifies whether to require the host
   * name in the server's certificate to match the host name of the server when
   * connecting over SSL. The default value is true.
   */
  useHostVerification?: any;
  /**
   * @member {any} [usePeerVerification] Specifies whether to verify the
   * identity of the server when connecting over SSL. The default value is
   * true.
   */
  usePeerVerification?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing ServiceNowLinkedService.
 * ServiceNow server linked service.
 *
 */
export interface ServiceNowLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "ServiceNow";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} endpoint The endpoint of the ServiceNow server. (i.e.
   * <instance>.service-now.com)
   */
  endpoint: any;
  /**
   * @member {ServiceNowAuthenticationType} authenticationType The
   * authentication type to use. Possible values include: 'Basic', 'OAuth2'
   */
  authenticationType: ServiceNowAuthenticationType;
  /**
   * @member {any} [username] The user name used to connect to the ServiceNow
   * server for Basic and OAuth2 authentication.
   */
  username?: any;
  /**
   * @member {SecretBaseUnion} [password] The password corresponding to the
   * user name for Basic and OAuth2 authentication.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [clientId] The client id for OAuth2 authentication.
   */
  clientId?: any;
  /**
   * @member {SecretBaseUnion} [clientSecret] The client secret for OAuth2
   * authentication.
   */
  clientSecret?: SecretBaseUnion;
  /**
   * @member {any} [useEncryptedEndpoints] Specifies whether the data source
   * endpoints are encrypted using HTTPS. The default value is true.
   */
  useEncryptedEndpoints?: any;
  /**
   * @member {any} [useHostVerification] Specifies whether to require the host
   * name in the server's certificate to match the host name of the server when
   * connecting over SSL. The default value is true.
   */
  useHostVerification?: any;
  /**
   * @member {any} [usePeerVerification] Specifies whether to verify the
   * identity of the server when connecting over SSL. The default value is
   * true.
   */
  usePeerVerification?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing QuickBooksLinkedServiceTypeProperties.
 * QuickBooks server linked service properties.
 *
 */
export interface QuickBooksLinkedServiceTypeProperties {
  /**
   * @member {any} endpoint The endpoint of the QuickBooks server. (i.e.
   * quickbooks.api.intuit.com)
   */
  endpoint: any;
  /**
   * @member {any} companyId The company ID of the QuickBooks company to
   * authorize.
   */
  companyId: any;
  /**
   * @member {any} consumerKey The consumer key for OAuth 1.0 authentication.
   */
  consumerKey: any;
  /**
   * @member {SecretBaseUnion} consumerSecret The consumer secret for OAuth 1.0
   * authentication.
   */
  consumerSecret: SecretBaseUnion;
  /**
   * @member {SecretBaseUnion} accessToken The access token for OAuth 1.0
   * authentication.
   */
  accessToken: SecretBaseUnion;
  /**
   * @member {SecretBaseUnion} accessTokenSecret The access token secret for
   * OAuth 1.0 authentication.
   */
  accessTokenSecret: SecretBaseUnion;
  /**
   * @member {any} [useEncryptedEndpoints] Specifies whether the data source
   * endpoints are encrypted using HTTPS. The default value is true.
   */
  useEncryptedEndpoints?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing QuickBooksLinkedService.
 * QuickBooks server linked service.
 *
 */
export interface QuickBooksLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "QuickBooks";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} endpoint The endpoint of the QuickBooks server. (i.e.
   * quickbooks.api.intuit.com)
   */
  endpoint: any;
  /**
   * @member {any} companyId The company ID of the QuickBooks company to
   * authorize.
   */
  companyId: any;
  /**
   * @member {any} consumerKey The consumer key for OAuth 1.0 authentication.
   */
  consumerKey: any;
  /**
   * @member {SecretBaseUnion} consumerSecret The consumer secret for OAuth 1.0
   * authentication.
   */
  consumerSecret: SecretBaseUnion;
  /**
   * @member {SecretBaseUnion} accessToken The access token for OAuth 1.0
   * authentication.
   */
  accessToken: SecretBaseUnion;
  /**
   * @member {SecretBaseUnion} accessTokenSecret The access token secret for
   * OAuth 1.0 authentication.
   */
  accessTokenSecret: SecretBaseUnion;
  /**
   * @member {any} [useEncryptedEndpoints] Specifies whether the data source
   * endpoints are encrypted using HTTPS. The default value is true.
   */
  useEncryptedEndpoints?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing PrestoLinkedServiceTypeProperties.
 * Presto server linked service properties.
 *
 */
export interface PrestoLinkedServiceTypeProperties {
  /**
   * @member {any} host The IP address or host name of the Presto server. (i.e.
   * 192.168.222.160)
   */
  host: any;
  /**
   * @member {any} serverVersion The version of the Presto server. (i.e.
   * 0.148-t)
   */
  serverVersion: any;
  /**
   * @member {any} catalog The catalog context for all request against the
   * server.
   */
  catalog: any;
  /**
   * @member {any} [port] The TCP port that the Presto server uses to listen
   * for client connections. The default value is 8080.
   */
  port?: any;
  /**
   * @member {PrestoAuthenticationType} authenticationType The authentication
   * mechanism used to connect to the Presto server. Possible values include:
   * 'Anonymous', 'LDAP'
   */
  authenticationType: PrestoAuthenticationType;
  /**
   * @member {any} [username] The user name used to connect to the Presto
   * server.
   */
  username?: any;
  /**
   * @member {SecretBaseUnion} [password] The password corresponding to the
   * user name.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [enableSsl] Specifies whether the connections to the server
   * are encrypted using SSL. The default value is false.
   */
  enableSsl?: any;
  /**
   * @member {any} [trustedCertPath] The full path of the .pem file containing
   * trusted CA certificates for verifying the server when connecting over SSL.
   * This property can only be set when using SSL on self-hosted IR. The
   * default value is the cacerts.pem file installed with the IR.
   */
  trustedCertPath?: any;
  /**
   * @member {any} [useSystemTrustStore] Specifies whether to use a CA
   * certificate from the system trust store or from a specified PEM file. The
   * default value is false.
   */
  useSystemTrustStore?: any;
  /**
   * @member {any} [allowHostNameCNMismatch] Specifies whether to require a
   * CA-issued SSL certificate name to match the host name of the server when
   * connecting over SSL. The default value is false.
   */
  allowHostNameCNMismatch?: any;
  /**
   * @member {any} [allowSelfSignedServerCert] Specifies whether to allow
   * self-signed certificates from the server. The default value is false.
   */
  allowSelfSignedServerCert?: any;
  /**
   * @member {any} [timeZoneID] The local time zone used by the connection.
   * Valid values for this option are specified in the IANA Time Zone Database.
   * The default value is the system time zone.
   */
  timeZoneID?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing PrestoLinkedService.
 * Presto server linked service.
 *
 */
export interface PrestoLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Presto";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} host The IP address or host name of the Presto server. (i.e.
   * 192.168.222.160)
   */
  host: any;
  /**
   * @member {any} serverVersion The version of the Presto server. (i.e.
   * 0.148-t)
   */
  serverVersion: any;
  /**
   * @member {any} catalog The catalog context for all request against the
   * server.
   */
  catalog: any;
  /**
   * @member {any} [port] The TCP port that the Presto server uses to listen
   * for client connections. The default value is 8080.
   */
  port?: any;
  /**
   * @member {PrestoAuthenticationType} authenticationType The authentication
   * mechanism used to connect to the Presto server. Possible values include:
   * 'Anonymous', 'LDAP'
   */
  authenticationType: PrestoAuthenticationType;
  /**
   * @member {any} [username] The user name used to connect to the Presto
   * server.
   */
  username?: any;
  /**
   * @member {SecretBaseUnion} [password] The password corresponding to the
   * user name.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [enableSsl] Specifies whether the connections to the server
   * are encrypted using SSL. The default value is false.
   */
  enableSsl?: any;
  /**
   * @member {any} [trustedCertPath] The full path of the .pem file containing
   * trusted CA certificates for verifying the server when connecting over SSL.
   * This property can only be set when using SSL on self-hosted IR. The
   * default value is the cacerts.pem file installed with the IR.
   */
  trustedCertPath?: any;
  /**
   * @member {any} [useSystemTrustStore] Specifies whether to use a CA
   * certificate from the system trust store or from a specified PEM file. The
   * default value is false.
   */
  useSystemTrustStore?: any;
  /**
   * @member {any} [allowHostNameCNMismatch] Specifies whether to require a
   * CA-issued SSL certificate name to match the host name of the server when
   * connecting over SSL. The default value is false.
   */
  allowHostNameCNMismatch?: any;
  /**
   * @member {any} [allowSelfSignedServerCert] Specifies whether to allow
   * self-signed certificates from the server. The default value is false.
   */
  allowSelfSignedServerCert?: any;
  /**
   * @member {any} [timeZoneID] The local time zone used by the connection.
   * Valid values for this option are specified in the IANA Time Zone Database.
   * The default value is the system time zone.
   */
  timeZoneID?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing PhoenixLinkedServiceTypeProperties.
 * Phoenix server linked service properties.
 *
 */
export interface PhoenixLinkedServiceTypeProperties {
  /**
   * @member {any} host The IP address or host name of the Phoenix server.
   * (i.e. 192.168.222.160)
   */
  host: any;
  /**
   * @member {any} [port] The TCP port that the Phoenix server uses to listen
   * for client connections. The default value is 8765.
   */
  port?: any;
  /**
   * @member {any} [httpPath] The partial URL corresponding to the Phoenix
   * server. (i.e. /gateway/sandbox/phoenix/version). The default value is
   * hbasephoenix if using WindowsAzureHDInsightService.
   */
  httpPath?: any;
  /**
   * @member {PhoenixAuthenticationType} authenticationType The authentication
   * mechanism used to connect to the Phoenix server. Possible values include:
   * 'Anonymous', 'UsernameAndPassword', 'WindowsAzureHDInsightService'
   */
  authenticationType: PhoenixAuthenticationType;
  /**
   * @member {any} [username] The user name used to connect to the Phoenix
   * server.
   */
  username?: any;
  /**
   * @member {SecretBaseUnion} [password] The password corresponding to the
   * user name.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [enableSsl] Specifies whether the connections to the server
   * are encrypted using SSL. The default value is false.
   */
  enableSsl?: any;
  /**
   * @member {any} [trustedCertPath] The full path of the .pem file containing
   * trusted CA certificates for verifying the server when connecting over SSL.
   * This property can only be set when using SSL on self-hosted IR. The
   * default value is the cacerts.pem file installed with the IR.
   */
  trustedCertPath?: any;
  /**
   * @member {any} [useSystemTrustStore] Specifies whether to use a CA
   * certificate from the system trust store or from a specified PEM file. The
   * default value is false.
   */
  useSystemTrustStore?: any;
  /**
   * @member {any} [allowHostNameCNMismatch] Specifies whether to require a
   * CA-issued SSL certificate name to match the host name of the server when
   * connecting over SSL. The default value is false.
   */
  allowHostNameCNMismatch?: any;
  /**
   * @member {any} [allowSelfSignedServerCert] Specifies whether to allow
   * self-signed certificates from the server. The default value is false.
   */
  allowSelfSignedServerCert?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing PhoenixLinkedService.
 * Phoenix server linked service.
 *
 */
export interface PhoenixLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Phoenix";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} host The IP address or host name of the Phoenix server.
   * (i.e. 192.168.222.160)
   */
  host: any;
  /**
   * @member {any} [port] The TCP port that the Phoenix server uses to listen
   * for client connections. The default value is 8765.
   */
  port?: any;
  /**
   * @member {any} [httpPath] The partial URL corresponding to the Phoenix
   * server. (i.e. /gateway/sandbox/phoenix/version). The default value is
   * hbasephoenix if using WindowsAzureHDInsightService.
   */
  httpPath?: any;
  /**
   * @member {PhoenixAuthenticationType} authenticationType The authentication
   * mechanism used to connect to the Phoenix server. Possible values include:
   * 'Anonymous', 'UsernameAndPassword', 'WindowsAzureHDInsightService'
   */
  authenticationType: PhoenixAuthenticationType;
  /**
   * @member {any} [username] The user name used to connect to the Phoenix
   * server.
   */
  username?: any;
  /**
   * @member {SecretBaseUnion} [password] The password corresponding to the
   * user name.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [enableSsl] Specifies whether the connections to the server
   * are encrypted using SSL. The default value is false.
   */
  enableSsl?: any;
  /**
   * @member {any} [trustedCertPath] The full path of the .pem file containing
   * trusted CA certificates for verifying the server when connecting over SSL.
   * This property can only be set when using SSL on self-hosted IR. The
   * default value is the cacerts.pem file installed with the IR.
   */
  trustedCertPath?: any;
  /**
   * @member {any} [useSystemTrustStore] Specifies whether to use a CA
   * certificate from the system trust store or from a specified PEM file. The
   * default value is false.
   */
  useSystemTrustStore?: any;
  /**
   * @member {any} [allowHostNameCNMismatch] Specifies whether to require a
   * CA-issued SSL certificate name to match the host name of the server when
   * connecting over SSL. The default value is false.
   */
  allowHostNameCNMismatch?: any;
  /**
   * @member {any} [allowSelfSignedServerCert] Specifies whether to allow
   * self-signed certificates from the server. The default value is false.
   */
  allowSelfSignedServerCert?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing PaypalLinkedServiceTypeProperties.
 * Paypal Serivce linked service properties.
 *
 */
export interface PaypalLinkedServiceTypeProperties {
  /**
   * @member {any} host The URL of the PayPal instance. (i.e.
   * api.sandbox.paypal.com)
   */
  host: any;
  /**
   * @member {any} clientId The client ID associated with your PayPal
   * application.
   */
  clientId: any;
  /**
   * @member {SecretBaseUnion} [clientSecret] The client secret associated with
   * your PayPal application.
   */
  clientSecret?: SecretBaseUnion;
  /**
   * @member {any} [useEncryptedEndpoints] Specifies whether the data source
   * endpoints are encrypted using HTTPS. The default value is true.
   */
  useEncryptedEndpoints?: any;
  /**
   * @member {any} [useHostVerification] Specifies whether to require the host
   * name in the server's certificate to match the host name of the server when
   * connecting over SSL. The default value is true.
   */
  useHostVerification?: any;
  /**
   * @member {any} [usePeerVerification] Specifies whether to verify the
   * identity of the server when connecting over SSL. The default value is
   * true.
   */
  usePeerVerification?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing PaypalLinkedService.
 * Paypal Serivce linked service.
 *
 */
export interface PaypalLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Paypal";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} host The URL of the PayPal instance. (i.e.
   * api.sandbox.paypal.com)
   */
  host: any;
  /**
   * @member {any} clientId The client ID associated with your PayPal
   * application.
   */
  clientId: any;
  /**
   * @member {SecretBaseUnion} [clientSecret] The client secret associated with
   * your PayPal application.
   */
  clientSecret?: SecretBaseUnion;
  /**
   * @member {any} [useEncryptedEndpoints] Specifies whether the data source
   * endpoints are encrypted using HTTPS. The default value is true.
   */
  useEncryptedEndpoints?: any;
  /**
   * @member {any} [useHostVerification] Specifies whether to require the host
   * name in the server's certificate to match the host name of the server when
   * connecting over SSL. The default value is true.
   */
  useHostVerification?: any;
  /**
   * @member {any} [usePeerVerification] Specifies whether to verify the
   * identity of the server when connecting over SSL. The default value is
   * true.
   */
  usePeerVerification?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing MarketoLinkedServiceTypeProperties.
 * Marketo server linked service properties.
 *
 */
export interface MarketoLinkedServiceTypeProperties {
  /**
   * @member {any} endpoint The endpoint of the Marketo server. (i.e.
   * 123-ABC-321.mktorest.com)
   */
  endpoint: any;
  /**
   * @member {any} clientId The client Id of your Marketo service.
   */
  clientId: any;
  /**
   * @member {SecretBaseUnion} [clientSecret] The client secret of your Marketo
   * service.
   */
  clientSecret?: SecretBaseUnion;
  /**
   * @member {any} [useEncryptedEndpoints] Specifies whether the data source
   * endpoints are encrypted using HTTPS. The default value is true.
   */
  useEncryptedEndpoints?: any;
  /**
   * @member {any} [useHostVerification] Specifies whether to require the host
   * name in the server's certificate to match the host name of the server when
   * connecting over SSL. The default value is true.
   */
  useHostVerification?: any;
  /**
   * @member {any} [usePeerVerification] Specifies whether to verify the
   * identity of the server when connecting over SSL. The default value is
   * true.
   */
  usePeerVerification?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing MarketoLinkedService.
 * Marketo server linked service.
 *
 */
export interface MarketoLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Marketo";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} endpoint The endpoint of the Marketo server. (i.e.
   * 123-ABC-321.mktorest.com)
   */
  endpoint: any;
  /**
   * @member {any} clientId The client Id of your Marketo service.
   */
  clientId: any;
  /**
   * @member {SecretBaseUnion} [clientSecret] The client secret of your Marketo
   * service.
   */
  clientSecret?: SecretBaseUnion;
  /**
   * @member {any} [useEncryptedEndpoints] Specifies whether the data source
   * endpoints are encrypted using HTTPS. The default value is true.
   */
  useEncryptedEndpoints?: any;
  /**
   * @member {any} [useHostVerification] Specifies whether to require the host
   * name in the server's certificate to match the host name of the server when
   * connecting over SSL. The default value is true.
   */
  useHostVerification?: any;
  /**
   * @member {any} [usePeerVerification] Specifies whether to verify the
   * identity of the server when connecting over SSL. The default value is
   * true.
   */
  usePeerVerification?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing MariaDBLinkedServiceTypeProperties.
 * MariaDB server linked service properties.
 *
 */
export interface MariaDBLinkedServiceTypeProperties {
  /**
   * @member {any} [connectionString] An ODBC connection string. Type: string,
   * SecureString or AzureKeyVaultSecretReference.
   */
  connectionString?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing MariaDBLinkedService.
 * MariaDB server linked service.
 *
 */
export interface MariaDBLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "MariaDB";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} [connectionString] An ODBC connection string. Type: string,
   * SecureString or AzureKeyVaultSecretReference.
   */
  connectionString?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing MagentoLinkedServiceTypeProperties.
 * Magento server linked service properties.
 *
 */
export interface MagentoLinkedServiceTypeProperties {
  /**
   * @member {any} host The URL of the Magento instance. (i.e.
   * 192.168.222.110/magento3)
   */
  host: any;
  /**
   * @member {SecretBaseUnion} [accessToken] The access token from Magento.
   */
  accessToken?: SecretBaseUnion;
  /**
   * @member {any} [useEncryptedEndpoints] Specifies whether the data source
   * endpoints are encrypted using HTTPS. The default value is true.
   */
  useEncryptedEndpoints?: any;
  /**
   * @member {any} [useHostVerification] Specifies whether to require the host
   * name in the server's certificate to match the host name of the server when
   * connecting over SSL. The default value is true.
   */
  useHostVerification?: any;
  /**
   * @member {any} [usePeerVerification] Specifies whether to verify the
   * identity of the server when connecting over SSL. The default value is
   * true.
   */
  usePeerVerification?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing MagentoLinkedService.
 * Magento server linked service.
 *
 */
export interface MagentoLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Magento";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} host The URL of the Magento instance. (i.e.
   * 192.168.222.110/magento3)
   */
  host: any;
  /**
   * @member {SecretBaseUnion} [accessToken] The access token from Magento.
   */
  accessToken?: SecretBaseUnion;
  /**
   * @member {any} [useEncryptedEndpoints] Specifies whether the data source
   * endpoints are encrypted using HTTPS. The default value is true.
   */
  useEncryptedEndpoints?: any;
  /**
   * @member {any} [useHostVerification] Specifies whether to require the host
   * name in the server's certificate to match the host name of the server when
   * connecting over SSL. The default value is true.
   */
  useHostVerification?: any;
  /**
   * @member {any} [usePeerVerification] Specifies whether to verify the
   * identity of the server when connecting over SSL. The default value is
   * true.
   */
  usePeerVerification?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing JiraLinkedServiceTypeProperties.
 * Jira Serivce linked service properties.
 *
 */
export interface JiraLinkedServiceTypeProperties {
  /**
   * @member {any} host The IP address or host name of the Jira service. (e.g.
   * jira.example.com)
   */
  host: any;
  /**
   * @member {any} [port] The TCP port that the Jira server uses to listen for
   * client connections. The default value is 443 if connecting through HTTPS,
   * or 8080 if connecting through HTTP.
   */
  port?: any;
  /**
   * @member {any} username The user name that you use to access Jira Service.
   */
  username: any;
  /**
   * @member {SecretBaseUnion} [password] The password corresponding to the
   * user name that you provided in the username field.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [useEncryptedEndpoints] Specifies whether the data source
   * endpoints are encrypted using HTTPS. The default value is true.
   */
  useEncryptedEndpoints?: any;
  /**
   * @member {any} [useHostVerification] Specifies whether to require the host
   * name in the server's certificate to match the host name of the server when
   * connecting over SSL. The default value is true.
   */
  useHostVerification?: any;
  /**
   * @member {any} [usePeerVerification] Specifies whether to verify the
   * identity of the server when connecting over SSL. The default value is
   * true.
   */
  usePeerVerification?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing JiraLinkedService.
 * Jira Serivce linked service.
 *
 */
export interface JiraLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Jira";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} host The IP address or host name of the Jira service. (e.g.
   * jira.example.com)
   */
  host: any;
  /**
   * @member {any} [port] The TCP port that the Jira server uses to listen for
   * client connections. The default value is 443 if connecting through HTTPS,
   * or 8080 if connecting through HTTP.
   */
  port?: any;
  /**
   * @member {any} username The user name that you use to access Jira Service.
   */
  username: any;
  /**
   * @member {SecretBaseUnion} [password] The password corresponding to the
   * user name that you provided in the username field.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [useEncryptedEndpoints] Specifies whether the data source
   * endpoints are encrypted using HTTPS. The default value is true.
   */
  useEncryptedEndpoints?: any;
  /**
   * @member {any} [useHostVerification] Specifies whether to require the host
   * name in the server's certificate to match the host name of the server when
   * connecting over SSL. The default value is true.
   */
  useHostVerification?: any;
  /**
   * @member {any} [usePeerVerification] Specifies whether to verify the
   * identity of the server when connecting over SSL. The default value is
   * true.
   */
  usePeerVerification?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing ImpalaLinkedServiceTypeProperties.
 * Impala server linked service properties.
 *
 */
export interface ImpalaLinkedServiceTypeProperties {
  /**
   * @member {any} host The IP address or host name of the Impala server. (i.e.
   * 192.168.222.160)
   */
  host: any;
  /**
   * @member {any} [port] The TCP port that the Impala server uses to listen
   * for client connections. The default value is 21050.
   */
  port?: any;
  /**
   * @member {ImpalaAuthenticationType} authenticationType The authentication
   * type to use. Possible values include: 'Anonymous', 'SASLUsername',
   * 'UsernameAndPassword'
   */
  authenticationType: ImpalaAuthenticationType;
  /**
   * @member {any} [username] The user name used to access the Impala server.
   * The default value is anonymous when using SASLUsername.
   */
  username?: any;
  /**
   * @member {SecretBaseUnion} [password] The password corresponding to the
   * user name when using UsernameAndPassword.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [enableSsl] Specifies whether the connections to the server
   * are encrypted using SSL. The default value is false.
   */
  enableSsl?: any;
  /**
   * @member {any} [trustedCertPath] The full path of the .pem file containing
   * trusted CA certificates for verifying the server when connecting over SSL.
   * This property can only be set when using SSL on self-hosted IR. The
   * default value is the cacerts.pem file installed with the IR.
   */
  trustedCertPath?: any;
  /**
   * @member {any} [useSystemTrustStore] Specifies whether to use a CA
   * certificate from the system trust store or from a specified PEM file. The
   * default value is false.
   */
  useSystemTrustStore?: any;
  /**
   * @member {any} [allowHostNameCNMismatch] Specifies whether to require a
   * CA-issued SSL certificate name to match the host name of the server when
   * connecting over SSL. The default value is false.
   */
  allowHostNameCNMismatch?: any;
  /**
   * @member {any} [allowSelfSignedServerCert] Specifies whether to allow
   * self-signed certificates from the server. The default value is false.
   */
  allowSelfSignedServerCert?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing ImpalaLinkedService.
 * Impala server linked service.
 *
 */
export interface ImpalaLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Impala";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} host The IP address or host name of the Impala server. (i.e.
   * 192.168.222.160)
   */
  host: any;
  /**
   * @member {any} [port] The TCP port that the Impala server uses to listen
   * for client connections. The default value is 21050.
   */
  port?: any;
  /**
   * @member {ImpalaAuthenticationType} authenticationType The authentication
   * type to use. Possible values include: 'Anonymous', 'SASLUsername',
   * 'UsernameAndPassword'
   */
  authenticationType: ImpalaAuthenticationType;
  /**
   * @member {any} [username] The user name used to access the Impala server.
   * The default value is anonymous when using SASLUsername.
   */
  username?: any;
  /**
   * @member {SecretBaseUnion} [password] The password corresponding to the
   * user name when using UsernameAndPassword.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [enableSsl] Specifies whether the connections to the server
   * are encrypted using SSL. The default value is false.
   */
  enableSsl?: any;
  /**
   * @member {any} [trustedCertPath] The full path of the .pem file containing
   * trusted CA certificates for verifying the server when connecting over SSL.
   * This property can only be set when using SSL on self-hosted IR. The
   * default value is the cacerts.pem file installed with the IR.
   */
  trustedCertPath?: any;
  /**
   * @member {any} [useSystemTrustStore] Specifies whether to use a CA
   * certificate from the system trust store or from a specified PEM file. The
   * default value is false.
   */
  useSystemTrustStore?: any;
  /**
   * @member {any} [allowHostNameCNMismatch] Specifies whether to require a
   * CA-issued SSL certificate name to match the host name of the server when
   * connecting over SSL. The default value is false.
   */
  allowHostNameCNMismatch?: any;
  /**
   * @member {any} [allowSelfSignedServerCert] Specifies whether to allow
   * self-signed certificates from the server. The default value is false.
   */
  allowSelfSignedServerCert?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing HubspotLinkedServiceTypeProperties.
 * Hubspot Serivce linked service properties.
 *
 */
export interface HubspotLinkedServiceTypeProperties {
  /**
   * @member {any} clientId The client ID associated with your Hubspot
   * application.
   */
  clientId: any;
  /**
   * @member {SecretBaseUnion} [clientSecret] The client secret associated with
   * your Hubspot application.
   */
  clientSecret?: SecretBaseUnion;
  /**
   * @member {SecretBaseUnion} [accessToken] The access token obtained when
   * initially authenticating your OAuth integration.
   */
  accessToken?: SecretBaseUnion;
  /**
   * @member {SecretBaseUnion} [refreshToken] The refresh token obtained when
   * initially authenticating your OAuth integration.
   */
  refreshToken?: SecretBaseUnion;
  /**
   * @member {any} [useEncryptedEndpoints] Specifies whether the data source
   * endpoints are encrypted using HTTPS. The default value is true.
   */
  useEncryptedEndpoints?: any;
  /**
   * @member {any} [useHostVerification] Specifies whether to require the host
   * name in the server's certificate to match the host name of the server when
   * connecting over SSL. The default value is true.
   */
  useHostVerification?: any;
  /**
   * @member {any} [usePeerVerification] Specifies whether to verify the
   * identity of the server when connecting over SSL. The default value is
   * true.
   */
  usePeerVerification?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing HubspotLinkedService.
 * Hubspot Serivce linked service.
 *
 */
export interface HubspotLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Hubspot";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} clientId The client ID associated with your Hubspot
   * application.
   */
  clientId: any;
  /**
   * @member {SecretBaseUnion} [clientSecret] The client secret associated with
   * your Hubspot application.
   */
  clientSecret?: SecretBaseUnion;
  /**
   * @member {SecretBaseUnion} [accessToken] The access token obtained when
   * initially authenticating your OAuth integration.
   */
  accessToken?: SecretBaseUnion;
  /**
   * @member {SecretBaseUnion} [refreshToken] The refresh token obtained when
   * initially authenticating your OAuth integration.
   */
  refreshToken?: SecretBaseUnion;
  /**
   * @member {any} [useEncryptedEndpoints] Specifies whether the data source
   * endpoints are encrypted using HTTPS. The default value is true.
   */
  useEncryptedEndpoints?: any;
  /**
   * @member {any} [useHostVerification] Specifies whether to require the host
   * name in the server's certificate to match the host name of the server when
   * connecting over SSL. The default value is true.
   */
  useHostVerification?: any;
  /**
   * @member {any} [usePeerVerification] Specifies whether to verify the
   * identity of the server when connecting over SSL. The default value is
   * true.
   */
  usePeerVerification?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing HiveLinkedServiceTypeProperties.
 * Hive Server linked service properties.
 *
 */
export interface HiveLinkedServiceTypeProperties {
  /**
   * @member {any} host IP address or host name of the Hive server, separated
   * by ';' for multiple hosts (only when serviceDiscoveryMode is enable).
   */
  host: any;
  /**
   * @member {any} [port] The TCP port that the Hive server uses to listen for
   * client connections.
   */
  port?: any;
  /**
   * @member {HiveServerType} [serverType] The type of Hive server. Possible
   * values include: 'HiveServer1', 'HiveServer2', 'HiveThriftServer'
   */
  serverType?: HiveServerType;
  /**
   * @member {HiveThriftTransportProtocol} [thriftTransportProtocol] The
   * transport protocol to use in the Thrift layer. Possible values include:
   * 'Binary', 'SASL', 'HTTP '
   */
  thriftTransportProtocol?: HiveThriftTransportProtocol;
  /**
   * @member {HiveAuthenticationType} authenticationType The authentication
   * method used to access the Hive server. Possible values include:
   * 'Anonymous', 'Username', 'UsernameAndPassword',
   * 'WindowsAzureHDInsightService'
   */
  authenticationType: HiveAuthenticationType;
  /**
   * @member {any} [serviceDiscoveryMode] true to indicate using the ZooKeeper
   * service, false not.
   */
  serviceDiscoveryMode?: any;
  /**
   * @member {any} [zooKeeperNameSpace] The namespace on ZooKeeper under which
   * Hive Server 2 nodes are added.
   */
  zooKeeperNameSpace?: any;
  /**
   * @member {any} [useNativeQuery] Specifies whether the driver uses native
   * HiveQL queries,or converts them into an equivalent form in HiveQL.
   */
  useNativeQuery?: any;
  /**
   * @member {any} [username] The user name that you use to access Hive Server.
   */
  username?: any;
  /**
   * @member {SecretBaseUnion} [password] The password corresponding to the
   * user name that you provided in the Username field
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [httpPath] The partial URL corresponding to the Hive server.
   */
  httpPath?: any;
  /**
   * @member {any} [enableSsl] Specifies whether the connections to the server
   * are encrypted using SSL. The default value is false.
   */
  enableSsl?: any;
  /**
   * @member {any} [trustedCertPath] The full path of the .pem file containing
   * trusted CA certificates for verifying the server when connecting over SSL.
   * This property can only be set when using SSL on self-hosted IR. The
   * default value is the cacerts.pem file installed with the IR.
   */
  trustedCertPath?: any;
  /**
   * @member {any} [useSystemTrustStore] Specifies whether to use a CA
   * certificate from the system trust store or from a specified PEM file. The
   * default value is false.
   */
  useSystemTrustStore?: any;
  /**
   * @member {any} [allowHostNameCNMismatch] Specifies whether to require a
   * CA-issued SSL certificate name to match the host name of the server when
   * connecting over SSL. The default value is false.
   */
  allowHostNameCNMismatch?: any;
  /**
   * @member {any} [allowSelfSignedServerCert] Specifies whether to allow
   * self-signed certificates from the server. The default value is false.
   */
  allowSelfSignedServerCert?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing HiveLinkedService.
 * Hive Server linked service.
 *
 */
export interface HiveLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Hive";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} host IP address or host name of the Hive server, separated
   * by ';' for multiple hosts (only when serviceDiscoveryMode is enable).
   */
  host: any;
  /**
   * @member {any} [port] The TCP port that the Hive server uses to listen for
   * client connections.
   */
  port?: any;
  /**
   * @member {HiveServerType} [serverType] The type of Hive server. Possible
   * values include: 'HiveServer1', 'HiveServer2', 'HiveThriftServer'
   */
  serverType?: HiveServerType;
  /**
   * @member {HiveThriftTransportProtocol} [thriftTransportProtocol] The
   * transport protocol to use in the Thrift layer. Possible values include:
   * 'Binary', 'SASL', 'HTTP '
   */
  thriftTransportProtocol?: HiveThriftTransportProtocol;
  /**
   * @member {HiveAuthenticationType} authenticationType The authentication
   * method used to access the Hive server. Possible values include:
   * 'Anonymous', 'Username', 'UsernameAndPassword',
   * 'WindowsAzureHDInsightService'
   */
  authenticationType: HiveAuthenticationType;
  /**
   * @member {any} [serviceDiscoveryMode] true to indicate using the ZooKeeper
   * service, false not.
   */
  serviceDiscoveryMode?: any;
  /**
   * @member {any} [zooKeeperNameSpace] The namespace on ZooKeeper under which
   * Hive Server 2 nodes are added.
   */
  zooKeeperNameSpace?: any;
  /**
   * @member {any} [useNativeQuery] Specifies whether the driver uses native
   * HiveQL queries,or converts them into an equivalent form in HiveQL.
   */
  useNativeQuery?: any;
  /**
   * @member {any} [username] The user name that you use to access Hive Server.
   */
  username?: any;
  /**
   * @member {SecretBaseUnion} [password] The password corresponding to the
   * user name that you provided in the Username field
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [httpPath] The partial URL corresponding to the Hive server.
   */
  httpPath?: any;
  /**
   * @member {any} [enableSsl] Specifies whether the connections to the server
   * are encrypted using SSL. The default value is false.
   */
  enableSsl?: any;
  /**
   * @member {any} [trustedCertPath] The full path of the .pem file containing
   * trusted CA certificates for verifying the server when connecting over SSL.
   * This property can only be set when using SSL on self-hosted IR. The
   * default value is the cacerts.pem file installed with the IR.
   */
  trustedCertPath?: any;
  /**
   * @member {any} [useSystemTrustStore] Specifies whether to use a CA
   * certificate from the system trust store or from a specified PEM file. The
   * default value is false.
   */
  useSystemTrustStore?: any;
  /**
   * @member {any} [allowHostNameCNMismatch] Specifies whether to require a
   * CA-issued SSL certificate name to match the host name of the server when
   * connecting over SSL. The default value is false.
   */
  allowHostNameCNMismatch?: any;
  /**
   * @member {any} [allowSelfSignedServerCert] Specifies whether to allow
   * self-signed certificates from the server. The default value is false.
   */
  allowSelfSignedServerCert?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing HBaseLinkedServiceTypeProperties.
 * HBase server linked service properties.
 *
 */
export interface HBaseLinkedServiceTypeProperties {
  /**
   * @member {any} host The IP address or host name of the HBase server. (i.e.
   * 192.168.222.160)
   */
  host: any;
  /**
   * @member {any} [port] The TCP port that the HBase instance uses to listen
   * for client connections. The default value is 9090.
   */
  port?: any;
  /**
   * @member {any} [httpPath] The partial URL corresponding to the HBase
   * server. (i.e. /gateway/sandbox/hbase/version)
   */
  httpPath?: any;
  /**
   * @member {HBaseAuthenticationType} authenticationType The authentication
   * mechanism to use to connect to the HBase server. Possible values include:
   * 'Anonymous', 'Basic'
   */
  authenticationType: HBaseAuthenticationType;
  /**
   * @member {any} [username] The user name used to connect to the HBase
   * instance.
   */
  username?: any;
  /**
   * @member {SecretBaseUnion} [password] The password corresponding to the
   * user name.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [enableSsl] Specifies whether the connections to the server
   * are encrypted using SSL. The default value is false.
   */
  enableSsl?: any;
  /**
   * @member {any} [trustedCertPath] The full path of the .pem file containing
   * trusted CA certificates for verifying the server when connecting over SSL.
   * This property can only be set when using SSL on self-hosted IR. The
   * default value is the cacerts.pem file installed with the IR.
   */
  trustedCertPath?: any;
  /**
   * @member {any} [allowHostNameCNMismatch] Specifies whether to require a
   * CA-issued SSL certificate name to match the host name of the server when
   * connecting over SSL. The default value is false.
   */
  allowHostNameCNMismatch?: any;
  /**
   * @member {any} [allowSelfSignedServerCert] Specifies whether to allow
   * self-signed certificates from the server. The default value is false.
   */
  allowSelfSignedServerCert?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing HBaseLinkedService.
 * HBase server linked service.
 *
 */
export interface HBaseLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "HBase";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} host The IP address or host name of the HBase server. (i.e.
   * 192.168.222.160)
   */
  host: any;
  /**
   * @member {any} [port] The TCP port that the HBase instance uses to listen
   * for client connections. The default value is 9090.
   */
  port?: any;
  /**
   * @member {any} [httpPath] The partial URL corresponding to the HBase
   * server. (i.e. /gateway/sandbox/hbase/version)
   */
  httpPath?: any;
  /**
   * @member {HBaseAuthenticationType} authenticationType The authentication
   * mechanism to use to connect to the HBase server. Possible values include:
   * 'Anonymous', 'Basic'
   */
  authenticationType: HBaseAuthenticationType;
  /**
   * @member {any} [username] The user name used to connect to the HBase
   * instance.
   */
  username?: any;
  /**
   * @member {SecretBaseUnion} [password] The password corresponding to the
   * user name.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [enableSsl] Specifies whether the connections to the server
   * are encrypted using SSL. The default value is false.
   */
  enableSsl?: any;
  /**
   * @member {any} [trustedCertPath] The full path of the .pem file containing
   * trusted CA certificates for verifying the server when connecting over SSL.
   * This property can only be set when using SSL on self-hosted IR. The
   * default value is the cacerts.pem file installed with the IR.
   */
  trustedCertPath?: any;
  /**
   * @member {any} [allowHostNameCNMismatch] Specifies whether to require a
   * CA-issued SSL certificate name to match the host name of the server when
   * connecting over SSL. The default value is false.
   */
  allowHostNameCNMismatch?: any;
  /**
   * @member {any} [allowSelfSignedServerCert] Specifies whether to allow
   * self-signed certificates from the server. The default value is false.
   */
  allowSelfSignedServerCert?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing GreenplumLinkedServiceTypeProperties.
 * Greenplum Database linked service properties.
 *
 */
export interface GreenplumLinkedServiceTypeProperties {
  /**
   * @member {any} [connectionString] An ODBC connection string. Type: string,
   * SecureString or AzureKeyVaultSecretReference.
   */
  connectionString?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing GreenplumLinkedService.
 * Greenplum Database linked service.
 *
 */
export interface GreenplumLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Greenplum";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} [connectionString] An ODBC connection string. Type: string,
   * SecureString or AzureKeyVaultSecretReference.
   */
  connectionString?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing GoogleBigQueryLinkedServiceTypeProperties.
 * Google BigQuery service linked service properties.
 *
 */
export interface GoogleBigQueryLinkedServiceTypeProperties {
  /**
   * @member {any} project The default BigQuery project to query against.
   */
  project: any;
  /**
   * @member {any} [additionalProjects] A comma-separated list of public
   * BigQuery projects to access.
   */
  additionalProjects?: any;
  /**
   * @member {any} [requestGoogleDriveScope] Whether to request access to
   * Google Drive. Allowing Google Drive access enables support for federated
   * tables that combine BigQuery data with data from Google Drive. The default
   * value is false.
   */
  requestGoogleDriveScope?: any;
  /**
   * @member {GoogleBigQueryAuthenticationType} authenticationType The OAuth
   * 2.0 authentication mechanism used for authentication.
   * ServiceAuthentication can only be used on self-hosted IR. Possible values
   * include: 'ServiceAuthentication', 'UserAuthentication'
   */
  authenticationType: GoogleBigQueryAuthenticationType;
  /**
   * @member {SecretBaseUnion} [refreshToken] The refresh token obtained from
   * Google for authorizing access to BigQuery for UserAuthentication.
   */
  refreshToken?: SecretBaseUnion;
  /**
   * @member {SecretBaseUnion} [clientId] The client id of the google
   * application used to acquire the refresh token.
   */
  clientId?: SecretBaseUnion;
  /**
   * @member {SecretBaseUnion} [clientSecret] The client secret of the google
   * application used to acquire the refresh token.
   */
  clientSecret?: SecretBaseUnion;
  /**
   * @member {any} [email] The service account email ID that is used for
   * ServiceAuthentication and can only be used on self-hosted IR.
   */
  email?: any;
  /**
   * @member {any} [keyFilePath] The full path to the .p12 key file that is
   * used to authenticate the service account email address and can only be
   * used on self-hosted IR.
   */
  keyFilePath?: any;
  /**
   * @member {any} [trustedCertPath] The full path of the .pem file containing
   * trusted CA certificates for verifying the server when connecting over SSL.
   * This property can only be set when using SSL on self-hosted IR. The
   * default value is the cacerts.pem file installed with the IR.
   */
  trustedCertPath?: any;
  /**
   * @member {any} [useSystemTrustStore] Specifies whether to use a CA
   * certificate from the system trust store or from a specified PEM file. The
   * default value is false.
   */
  useSystemTrustStore?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing GoogleBigQueryLinkedService.
 * Google BigQuery service linked service.
 *
 */
export interface GoogleBigQueryLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "GoogleBigQuery";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} project The default BigQuery project to query against.
   */
  project: any;
  /**
   * @member {any} [additionalProjects] A comma-separated list of public
   * BigQuery projects to access.
   */
  additionalProjects?: any;
  /**
   * @member {any} [requestGoogleDriveScope] Whether to request access to
   * Google Drive. Allowing Google Drive access enables support for federated
   * tables that combine BigQuery data with data from Google Drive. The default
   * value is false.
   */
  requestGoogleDriveScope?: any;
  /**
   * @member {GoogleBigQueryAuthenticationType} authenticationType The OAuth
   * 2.0 authentication mechanism used for authentication.
   * ServiceAuthentication can only be used on self-hosted IR. Possible values
   * include: 'ServiceAuthentication', 'UserAuthentication'
   */
  authenticationType: GoogleBigQueryAuthenticationType;
  /**
   * @member {SecretBaseUnion} [refreshToken] The refresh token obtained from
   * Google for authorizing access to BigQuery for UserAuthentication.
   */
  refreshToken?: SecretBaseUnion;
  /**
   * @member {SecretBaseUnion} [clientId] The client id of the google
   * application used to acquire the refresh token.
   */
  clientId?: SecretBaseUnion;
  /**
   * @member {SecretBaseUnion} [clientSecret] The client secret of the google
   * application used to acquire the refresh token.
   */
  clientSecret?: SecretBaseUnion;
  /**
   * @member {any} [email] The service account email ID that is used for
   * ServiceAuthentication and can only be used on self-hosted IR.
   */
  email?: any;
  /**
   * @member {any} [keyFilePath] The full path to the .p12 key file that is
   * used to authenticate the service account email address and can only be
   * used on self-hosted IR.
   */
  keyFilePath?: any;
  /**
   * @member {any} [trustedCertPath] The full path of the .pem file containing
   * trusted CA certificates for verifying the server when connecting over SSL.
   * This property can only be set when using SSL on self-hosted IR. The
   * default value is the cacerts.pem file installed with the IR.
   */
  trustedCertPath?: any;
  /**
   * @member {any} [useSystemTrustStore] Specifies whether to use a CA
   * certificate from the system trust store or from a specified PEM file. The
   * default value is false.
   */
  useSystemTrustStore?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing EloquaLinkedServiceTypeProperties.
 * Eloqua server linked service properties.
 *
 */
export interface EloquaLinkedServiceTypeProperties {
  /**
   * @member {any} endpoint The endpoint of the Eloqua server. (i.e.
   * eloqua.example.com)
   */
  endpoint: any;
  /**
   * @member {any} username The site name and user name of your Eloqua account
   * in the form: sitename/username. (i.e. Eloqua/Alice)
   */
  username: any;
  /**
   * @member {SecretBaseUnion} [password] The password corresponding to the
   * user name.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [useEncryptedEndpoints] Specifies whether the data source
   * endpoints are encrypted using HTTPS. The default value is true.
   */
  useEncryptedEndpoints?: any;
  /**
   * @member {any} [useHostVerification] Specifies whether to require the host
   * name in the server's certificate to match the host name of the server when
   * connecting over SSL. The default value is true.
   */
  useHostVerification?: any;
  /**
   * @member {any} [usePeerVerification] Specifies whether to verify the
   * identity of the server when connecting over SSL. The default value is
   * true.
   */
  usePeerVerification?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing EloquaLinkedService.
 * Eloqua server linked service.
 *
 */
export interface EloquaLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Eloqua";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} endpoint The endpoint of the Eloqua server. (i.e.
   * eloqua.example.com)
   */
  endpoint: any;
  /**
   * @member {any} username The site name and user name of your Eloqua account
   * in the form: sitename/username. (i.e. Eloqua/Alice)
   */
  username: any;
  /**
   * @member {SecretBaseUnion} [password] The password corresponding to the
   * user name.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [useEncryptedEndpoints] Specifies whether the data source
   * endpoints are encrypted using HTTPS. The default value is true.
   */
  useEncryptedEndpoints?: any;
  /**
   * @member {any} [useHostVerification] Specifies whether to require the host
   * name in the server's certificate to match the host name of the server when
   * connecting over SSL. The default value is true.
   */
  useHostVerification?: any;
  /**
   * @member {any} [usePeerVerification] Specifies whether to verify the
   * identity of the server when connecting over SSL. The default value is
   * true.
   */
  usePeerVerification?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing DrillLinkedServiceTypeProperties.
 * Drill server linked service properties.
 *
 */
export interface DrillLinkedServiceTypeProperties {
  /**
   * @member {any} [connectionString] An ODBC connection string. Type: string,
   * SecureString or AzureKeyVaultSecretReference.
   */
  connectionString?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing DrillLinkedService.
 * Drill server linked service.
 *
 */
export interface DrillLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Drill";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} [connectionString] An ODBC connection string. Type: string,
   * SecureString or AzureKeyVaultSecretReference.
   */
  connectionString?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing CouchbaseLinkedServiceTypeProperties.
 * Couchbase server linked service properties.
 *
 */
export interface CouchbaseLinkedServiceTypeProperties {
  /**
   * @member {any} [connectionString] An ODBC connection string. Type: string,
   * SecureString or AzureKeyVaultSecretReference.
   */
  connectionString?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing CouchbaseLinkedService.
 * Couchbase server linked service.
 *
 */
export interface CouchbaseLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Couchbase";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} [connectionString] An ODBC connection string. Type: string,
   * SecureString or AzureKeyVaultSecretReference.
   */
  connectionString?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing ConcurLinkedServiceTypeProperties.
 * Concur Serivce linked service properties.
 *
 */
export interface ConcurLinkedServiceTypeProperties {
  /**
   * @member {any} clientId Application client_id supplied by Concur App
   * Management.
   */
  clientId: any;
  /**
   * @member {any} username The user name that you use to access Concur
   * Service.
   */
  username: any;
  /**
   * @member {SecretBaseUnion} [password] The password corresponding to the
   * user name that you provided in the username field.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [useEncryptedEndpoints] Specifies whether the data source
   * endpoints are encrypted using HTTPS. The default value is true.
   */
  useEncryptedEndpoints?: any;
  /**
   * @member {any} [useHostVerification] Specifies whether to require the host
   * name in the server's certificate to match the host name of the server when
   * connecting over SSL. The default value is true.
   */
  useHostVerification?: any;
  /**
   * @member {any} [usePeerVerification] Specifies whether to verify the
   * identity of the server when connecting over SSL. The default value is
   * true.
   */
  usePeerVerification?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing ConcurLinkedService.
 * Concur Serivce linked service.
 *
 */
export interface ConcurLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Concur";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} clientId Application client_id supplied by Concur App
   * Management.
   */
  clientId: any;
  /**
   * @member {any} username The user name that you use to access Concur
   * Service.
   */
  username: any;
  /**
   * @member {SecretBaseUnion} [password] The password corresponding to the
   * user name that you provided in the username field.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [useEncryptedEndpoints] Specifies whether the data source
   * endpoints are encrypted using HTTPS. The default value is true.
   */
  useEncryptedEndpoints?: any;
  /**
   * @member {any} [useHostVerification] Specifies whether to require the host
   * name in the server's certificate to match the host name of the server when
   * connecting over SSL. The default value is true.
   */
  useHostVerification?: any;
  /**
   * @member {any} [usePeerVerification] Specifies whether to verify the
   * identity of the server when connecting over SSL. The default value is
   * true.
   */
  usePeerVerification?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing AzurePostgreSqlLinkedServiceTypeProperties.
 * Azure PostgreSQL linked service properties.
 *
 */
export interface AzurePostgreSqlLinkedServiceTypeProperties {
  /**
   * @member {any} [connectionString] An ODBC connection string. Type: string,
   * SecureString or AzureKeyVaultSecretReference.
   */
  connectionString?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing AzurePostgreSqlLinkedService.
 * Azure PostgreSQL linked service.
 *
 */
export interface AzurePostgreSqlLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AzurePostgreSql";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} [connectionString] An ODBC connection string. Type: string,
   * SecureString or AzureKeyVaultSecretReference.
   */
  connectionString?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing AmazonMWSLinkedServiceTypeProperties.
 * Amazon Marketplace Web Service linked service properties.
 *
 */
export interface AmazonMWSLinkedServiceTypeProperties {
  /**
   * @member {any} endpoint The endpoint of the Amazon MWS server, (i.e.
   * mws.amazonservices.com)
   */
  endpoint: any;
  /**
   * @member {any} marketplaceID The Amazon Marketplace ID you want to retrieve
   * data from. To retrive data from multiple Marketplace IDs, seperate them
   * with a comma (,). (i.e. A2EUQ1WTGCTBG2)
   */
  marketplaceID: any;
  /**
   * @member {any} sellerID The Amazon seller ID.
   */
  sellerID: any;
  /**
   * @member {SecretBaseUnion} [mwsAuthToken] The Amazon MWS authentication
   * token.
   */
  mwsAuthToken?: SecretBaseUnion;
  /**
   * @member {any} accessKeyId The access key id used to access data.
   */
  accessKeyId: any;
  /**
   * @member {SecretBaseUnion} [secretKey] The secret key used to access data.
   */
  secretKey?: SecretBaseUnion;
  /**
   * @member {any} [useEncryptedEndpoints] Specifies whether the data source
   * endpoints are encrypted using HTTPS. The default value is true.
   */
  useEncryptedEndpoints?: any;
  /**
   * @member {any} [useHostVerification] Specifies whether to require the host
   * name in the server's certificate to match the host name of the server when
   * connecting over SSL. The default value is true.
   */
  useHostVerification?: any;
  /**
   * @member {any} [usePeerVerification] Specifies whether to verify the
   * identity of the server when connecting over SSL. The default value is
   * true.
   */
  usePeerVerification?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing AmazonMWSLinkedService.
 * Amazon Marketplace Web Service linked service.
 *
 */
export interface AmazonMWSLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AmazonMWS";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} endpoint The endpoint of the Amazon MWS server, (i.e.
   * mws.amazonservices.com)
   */
  endpoint: any;
  /**
   * @member {any} marketplaceID The Amazon Marketplace ID you want to retrieve
   * data from. To retrive data from multiple Marketplace IDs, seperate them
   * with a comma (,). (i.e. A2EUQ1WTGCTBG2)
   */
  marketplaceID: any;
  /**
   * @member {any} sellerID The Amazon seller ID.
   */
  sellerID: any;
  /**
   * @member {SecretBaseUnion} [mwsAuthToken] The Amazon MWS authentication
   * token.
   */
  mwsAuthToken?: SecretBaseUnion;
  /**
   * @member {any} accessKeyId The access key id used to access data.
   */
  accessKeyId: any;
  /**
   * @member {SecretBaseUnion} [secretKey] The secret key used to access data.
   */
  secretKey?: SecretBaseUnion;
  /**
   * @member {any} [useEncryptedEndpoints] Specifies whether the data source
   * endpoints are encrypted using HTTPS. The default value is true.
   */
  useEncryptedEndpoints?: any;
  /**
   * @member {any} [useHostVerification] Specifies whether to require the host
   * name in the server's certificate to match the host name of the server when
   * connecting over SSL. The default value is true.
   */
  useHostVerification?: any;
  /**
   * @member {any} [usePeerVerification] Specifies whether to verify the
   * identity of the server when connecting over SSL. The default value is
   * true.
   */
  usePeerVerification?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing SapHanaLinkedServiceProperties.
 * Properties specific to this linked service type.
 *
 */
export interface SapHanaLinkedServiceProperties {
  /**
   * @member {any} server Host name of the SAP HANA server. Type: string (or
   * Expression with resultType string).
   */
  server: any;
  /**
   * @member {SapHanaAuthenticationType} [authenticationType] The
   * authentication type to be used to connect to the SAP HANA server. Possible
   * values include: 'Basic', 'Windows'
   */
  authenticationType?: SapHanaAuthenticationType;
  /**
   * @member {any} [userName] Username to access the SAP HANA server. Type:
   * string (or Expression with resultType string).
   */
  userName?: any;
  /**
   * @member {SecretBaseUnion} [password] Password to access the SAP HANA
   * server.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing SapHanaLinkedService.
 * SAP HANA Linked Service.
 *
 */
export interface SapHanaLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "SapHana";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} server Host name of the SAP HANA server. Type: string (or
   * Expression with resultType string).
   */
  server: any;
  /**
   * @member {SapHanaAuthenticationType} [authenticationType] The
   * authentication type to be used to connect to the SAP HANA server. Possible
   * values include: 'Basic', 'Windows'
   */
  authenticationType?: SapHanaAuthenticationType;
  /**
   * @member {any} [userName] Username to access the SAP HANA server. Type:
   * string (or Expression with resultType string).
   */
  userName?: any;
  /**
   * @member {SecretBaseUnion} [password] Password to access the SAP HANA
   * server.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing SapBWLinkedServiceTypeProperties.
 * Properties specific to this linked service type.
 *
 */
export interface SapBWLinkedServiceTypeProperties {
  /**
   * @member {any} server Host name of the SAP BW instance. Type: string (or
   * Expression with resultType string).
   */
  server: any;
  /**
   * @member {any} systemNumber System number of the BW system. (Usually a
   * two-digit decimal number represented as a string.) Type: string (or
   * Expression with resultType string).
   */
  systemNumber: any;
  /**
   * @member {any} clientId Client ID of the client on the BW system. (Usually
   * a three-digit decimal number represented as a string) Type: string (or
   * Expression with resultType string).
   */
  clientId: any;
  /**
   * @member {any} [userName] Username to access the SAP BW server. Type:
   * string (or Expression with resultType string).
   */
  userName?: any;
  /**
   * @member {SecretBaseUnion} [password] Password to access the SAP BW server.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing SapBWLinkedService.
 * SAP Business Warehouse Linked Service.
 *
 */
export interface SapBWLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "SapBW";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} server Host name of the SAP BW instance. Type: string (or
   * Expression with resultType string).
   */
  server: any;
  /**
   * @member {any} systemNumber System number of the BW system. (Usually a
   * two-digit decimal number represented as a string.) Type: string (or
   * Expression with resultType string).
   */
  systemNumber: any;
  /**
   * @member {any} clientId Client ID of the client on the BW system. (Usually
   * a three-digit decimal number represented as a string) Type: string (or
   * Expression with resultType string).
   */
  clientId: any;
  /**
   * @member {any} [userName] Username to access the SAP BW server. Type:
   * string (or Expression with resultType string).
   */
  userName?: any;
  /**
   * @member {SecretBaseUnion} [password] Password to access the SAP BW server.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing SftpServerLinkedServiceTypeProperties.
 * Properties specific to this linked service type.
 *
 */
export interface SftpServerLinkedServiceTypeProperties {
  /**
   * @member {any} host The SFTP server host name. Type: string (or Expression
   * with resultType string).
   */
  host: any;
  /**
   * @member {any} [port] The TCP port number that the SFTP server uses to
   * listen for client connections. Default value is 22. Type: integer (or
   * Expression with resultType integer), minimum: 0.
   */
  port?: any;
  /**
   * @member {SftpAuthenticationType} [authenticationType] The authentication
   * type to be used to connect to the FTP server. Possible values include:
   * 'Basic', 'SshPublicKey'
   */
  authenticationType?: SftpAuthenticationType;
  /**
   * @member {any} [userName] The username used to log on to the SFTP server.
   * Type: string (or Expression with resultType string).
   */
  userName?: any;
  /**
   * @member {SecretBaseUnion} [password] Password to logon the SFTP server for
   * Basic authentication.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
  /**
   * @member {any} [privateKeyPath] The SSH private key file path for
   * SshPublicKey authentication. Only valid for on-premises copy. For
   * on-premises copy with SshPublicKey authentication, either PrivateKeyPath
   * or PrivateKeyContent should be specified. SSH private key should be
   * OpenSSH format. Type: string (or Expression with resultType string).
   */
  privateKeyPath?: any;
  /**
   * @member {SecretBaseUnion} [privateKeyContent] Base64 encoded SSH private
   * key content for SshPublicKey authentication. For on-premises copy with
   * SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent
   * should be specified. SSH private key should be OpenSSH format.
   */
  privateKeyContent?: SecretBaseUnion;
  /**
   * @member {SecretBaseUnion} [passPhrase] The password to decrypt the SSH
   * private key if the SSH private key is encrypted.
   */
  passPhrase?: SecretBaseUnion;
  /**
   * @member {any} [skipHostKeyValidation] If true, skip the SSH host key
   * validation. Default value is false. Type: boolean (or Expression with
   * resultType boolean).
   */
  skipHostKeyValidation?: any;
  /**
   * @member {any} [hostKeyFingerprint] The host key finger-print of the SFTP
   * server. When SkipHostKeyValidation is false, HostKeyFingerprint should be
   * specified. Type: string (or Expression with resultType string).
   */
  hostKeyFingerprint?: any;
}

/**
 * @interface
 * An interface representing SftpServerLinkedService.
 * A linked service for an SSH File Transfer Protocol (SFTP) server.
 *
 */
export interface SftpServerLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Sftp";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} host The SFTP server host name. Type: string (or Expression
   * with resultType string).
   */
  host: any;
  /**
   * @member {any} [port] The TCP port number that the SFTP server uses to
   * listen for client connections. Default value is 22. Type: integer (or
   * Expression with resultType integer), minimum: 0.
   */
  port?: any;
  /**
   * @member {SftpAuthenticationType} [authenticationType] The authentication
   * type to be used to connect to the FTP server. Possible values include:
   * 'Basic', 'SshPublicKey'
   */
  authenticationType?: SftpAuthenticationType;
  /**
   * @member {any} [userName] The username used to log on to the SFTP server.
   * Type: string (or Expression with resultType string).
   */
  userName?: any;
  /**
   * @member {SecretBaseUnion} [password] Password to logon the SFTP server for
   * Basic authentication.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
  /**
   * @member {any} [privateKeyPath] The SSH private key file path for
   * SshPublicKey authentication. Only valid for on-premises copy. For
   * on-premises copy with SshPublicKey authentication, either PrivateKeyPath
   * or PrivateKeyContent should be specified. SSH private key should be
   * OpenSSH format. Type: string (or Expression with resultType string).
   */
  privateKeyPath?: any;
  /**
   * @member {SecretBaseUnion} [privateKeyContent] Base64 encoded SSH private
   * key content for SshPublicKey authentication. For on-premises copy with
   * SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent
   * should be specified. SSH private key should be OpenSSH format.
   */
  privateKeyContent?: SecretBaseUnion;
  /**
   * @member {SecretBaseUnion} [passPhrase] The password to decrypt the SSH
   * private key if the SSH private key is encrypted.
   */
  passPhrase?: SecretBaseUnion;
  /**
   * @member {any} [skipHostKeyValidation] If true, skip the SSH host key
   * validation. Default value is false. Type: boolean (or Expression with
   * resultType boolean).
   */
  skipHostKeyValidation?: any;
  /**
   * @member {any} [hostKeyFingerprint] The host key finger-print of the SFTP
   * server. When SkipHostKeyValidation is false, HostKeyFingerprint should be
   * specified. Type: string (or Expression with resultType string).
   */
  hostKeyFingerprint?: any;
}

/**
 * @interface
 * An interface representing FtpServerLinkedServiceTypeProperties.
 * Properties specific to this linked service type.
 *
 */
export interface FtpServerLinkedServiceTypeProperties {
  /**
   * @member {any} host Host name of the FTP server. Type: string (or
   * Expression with resultType string).
   */
  host: any;
  /**
   * @member {any} [port] The TCP port number that the FTP server uses to
   * listen for client connections. Default value is 21. Type: integer (or
   * Expression with resultType integer), minimum: 0.
   */
  port?: any;
  /**
   * @member {FtpAuthenticationType} [authenticationType] The authentication
   * type to be used to connect to the FTP server. Possible values include:
   * 'Basic', 'Anonymous'
   */
  authenticationType?: FtpAuthenticationType;
  /**
   * @member {any} [userName] Username to logon the FTP server. Type: string
   * (or Expression with resultType string).
   */
  userName?: any;
  /**
   * @member {SecretBaseUnion} [password] Password to logon the FTP server.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
  /**
   * @member {any} [enableSsl] If true, connect to the FTP server over SSL/TLS
   * channel. Default value is true. Type: boolean (or Expression with
   * resultType boolean).
   */
  enableSsl?: any;
  /**
   * @member {any} [enableServerCertificateValidation] If true, validate the
   * FTP server SSL certificate when connect over SSL/TLS channel. Default
   * value is true. Type: boolean (or Expression with resultType boolean).
   */
  enableServerCertificateValidation?: any;
}

/**
 * @interface
 * An interface representing FtpServerLinkedService.
 * A FTP server Linked Service.
 *
 */
export interface FtpServerLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "FtpServer";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} host Host name of the FTP server. Type: string (or
   * Expression with resultType string).
   */
  host: any;
  /**
   * @member {any} [port] The TCP port number that the FTP server uses to
   * listen for client connections. Default value is 21. Type: integer (or
   * Expression with resultType integer), minimum: 0.
   */
  port?: any;
  /**
   * @member {FtpAuthenticationType} [authenticationType] The authentication
   * type to be used to connect to the FTP server. Possible values include:
   * 'Basic', 'Anonymous'
   */
  authenticationType?: FtpAuthenticationType;
  /**
   * @member {any} [userName] Username to logon the FTP server. Type: string
   * (or Expression with resultType string).
   */
  userName?: any;
  /**
   * @member {SecretBaseUnion} [password] Password to logon the FTP server.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
  /**
   * @member {any} [enableSsl] If true, connect to the FTP server over SSL/TLS
   * channel. Default value is true. Type: boolean (or Expression with
   * resultType boolean).
   */
  enableSsl?: any;
  /**
   * @member {any} [enableServerCertificateValidation] If true, validate the
   * FTP server SSL certificate when connect over SSL/TLS channel. Default
   * value is true. Type: boolean (or Expression with resultType boolean).
   */
  enableServerCertificateValidation?: any;
}

/**
 * @interface
 * An interface representing HttpLinkedServiceTypeProperties.
 * Properties specific to this linked service type.
 *
 */
export interface HttpLinkedServiceTypeProperties {
  /**
   * @member {any} url The base URL of the HTTP endpoint, e.g.
   * http://www.microsoft.com. Type: string (or Expression with resultType
   * string).
   */
  url: any;
  /**
   * @member {HttpAuthenticationType} [authenticationType] The authentication
   * type to be used to connect to the HTTP server. Possible values include:
   * 'Basic', 'Anonymous', 'Digest', 'Windows', 'ClientCertificate'
   */
  authenticationType?: HttpAuthenticationType;
  /**
   * @member {any} [userName] User name for Basic, Digest, or Windows
   * authentication. Type: string (or Expression with resultType string).
   */
  userName?: any;
  /**
   * @member {SecretBaseUnion} [password] Password for Basic, Digest, Windows,
   * or ClientCertificate with EmbeddedCertData authentication.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [embeddedCertData] Base64 encoded certificate data for
   * ClientCertificate authentication. For on-premises copy with
   * ClientCertificate authentication, either CertThumbprint or
   * EmbeddedCertData/Password should be specified. Type: string (or Expression
   * with resultType string).
   */
  embeddedCertData?: any;
  /**
   * @member {any} [certThumbprint] Thumbprint of certificate for
   * ClientCertificate authentication. Only valid for on-premises copy. For
   * on-premises copy with ClientCertificate authentication, either
   * CertThumbprint or EmbeddedCertData/Password should be specified. Type:
   * string (or Expression with resultType string).
   */
  certThumbprint?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
  /**
   * @member {any} [enableServerCertificateValidation] If true, validate the
   * HTTPS server SSL certificate. Default value is true. Type: boolean (or
   * Expression with resultType boolean).
   */
  enableServerCertificateValidation?: any;
}

/**
 * @interface
 * An interface representing HttpLinkedService.
 * Linked service for an HTTP source.
 *
 */
export interface HttpLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "HttpServer";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} url The base URL of the HTTP endpoint, e.g.
   * http://www.microsoft.com. Type: string (or Expression with resultType
   * string).
   */
  url: any;
  /**
   * @member {HttpAuthenticationType} [authenticationType] The authentication
   * type to be used to connect to the HTTP server. Possible values include:
   * 'Basic', 'Anonymous', 'Digest', 'Windows', 'ClientCertificate'
   */
  authenticationType?: HttpAuthenticationType;
  /**
   * @member {any} [userName] User name for Basic, Digest, or Windows
   * authentication. Type: string (or Expression with resultType string).
   */
  userName?: any;
  /**
   * @member {SecretBaseUnion} [password] Password for Basic, Digest, Windows,
   * or ClientCertificate with EmbeddedCertData authentication.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [embeddedCertData] Base64 encoded certificate data for
   * ClientCertificate authentication. For on-premises copy with
   * ClientCertificate authentication, either CertThumbprint or
   * EmbeddedCertData/Password should be specified. Type: string (or Expression
   * with resultType string).
   */
  embeddedCertData?: any;
  /**
   * @member {any} [certThumbprint] Thumbprint of certificate for
   * ClientCertificate authentication. Only valid for on-premises copy. For
   * on-premises copy with ClientCertificate authentication, either
   * CertThumbprint or EmbeddedCertData/Password should be specified. Type:
   * string (or Expression with resultType string).
   */
  certThumbprint?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
  /**
   * @member {any} [enableServerCertificateValidation] If true, validate the
   * HTTPS server SSL certificate. Default value is true. Type: boolean (or
   * Expression with resultType boolean).
   */
  enableServerCertificateValidation?: any;
}

/**
 * @interface
 * An interface representing AzureSearchLinkedServiceTypeProperties.
 * Windows Azure Search Service linked service properties.
 *
 */
export interface AzureSearchLinkedServiceTypeProperties {
  /**
   * @member {any} url URL for Azure Search service. Type: string (or
   * Expression with resultType string).
   */
  url: any;
  /**
   * @member {SecretBaseUnion} [key] Admin Key for Azure Search service
   */
  key?: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing AzureSearchLinkedService.
 * Linked service for Windows Azure Search Service.
 *
 */
export interface AzureSearchLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AzureSearch";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} url URL for Azure Search service. Type: string (or
   * Expression with resultType string).
   */
  url: any;
  /**
   * @member {SecretBaseUnion} [key] Admin Key for Azure Search service
   */
  key?: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing CustomDataSourceLinkedService.
 * Custom linked service.
 *
 */
export interface CustomDataSourceLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "CustomDataSource";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} typeProperties Custom linked service properties.
   */
  typeProperties: any;
}

/**
 * @interface
 * An interface representing AmazonRedshiftLinkedServiceTypeProperties.
 * Amazon Redshift linked service properties.
 *
 */
export interface AmazonRedshiftLinkedServiceTypeProperties {
  /**
   * @member {any} server The name of the Amazon Redshift server. Type: string
   * (or Expression with resultType string).
   */
  server: any;
  /**
   * @member {any} [username] The username of the Amazon Redshift source. Type:
   * string (or Expression with resultType string).
   */
  username?: any;
  /**
   * @member {SecretBaseUnion} [password] The password of the Amazon Redshift
   * source.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} database The database name of the Amazon Redshift source.
   * Type: string (or Expression with resultType string).
   */
  database: any;
  /**
   * @member {any} [port] The TCP port number that the Amazon Redshift server
   * uses to listen for client connections. The default value is 5439. Type:
   * integer (or Expression with resultType integer).
   */
  port?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing AmazonRedshiftLinkedService.
 * Linked service for Amazon Redshift.
 *
 */
export interface AmazonRedshiftLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AmazonRedshift";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} server The name of the Amazon Redshift server. Type: string
   * (or Expression with resultType string).
   */
  server: any;
  /**
   * @member {any} [username] The username of the Amazon Redshift source. Type:
   * string (or Expression with resultType string).
   */
  username?: any;
  /**
   * @member {SecretBaseUnion} [password] The password of the Amazon Redshift
   * source.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} database The database name of the Amazon Redshift source.
   * Type: string (or Expression with resultType string).
   */
  database: any;
  /**
   * @member {any} [port] The TCP port number that the Amazon Redshift server
   * uses to listen for client connections. The default value is 5439. Type:
   * integer (or Expression with resultType integer).
   */
  port?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing AmazonS3LinkedServiceTypeProperties.
 * Amazon S3 linked service properties.
 *
 */
export interface AmazonS3LinkedServiceTypeProperties {
  /**
   * @member {any} [accessKeyId] The access key identifier of the Amazon S3
   * Identity and Access Management (IAM) user. Type: string (or Expression
   * with resultType string).
   */
  accessKeyId?: any;
  /**
   * @member {SecretBaseUnion} [secretAccessKey] The secret access key of the
   * Amazon S3 Identity and Access Management (IAM) user.
   */
  secretAccessKey?: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing AmazonS3LinkedService.
 * Linked service for Amazon S3.
 *
 */
export interface AmazonS3LinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AmazonS3";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} [accessKeyId] The access key identifier of the Amazon S3
   * Identity and Access Management (IAM) user. Type: string (or Expression
   * with resultType string).
   */
  accessKeyId?: any;
  /**
   * @member {SecretBaseUnion} [secretAccessKey] The secret access key of the
   * Amazon S3 Identity and Access Management (IAM) user.
   */
  secretAccessKey?: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing SapEccLinkedServiceTypeProperties.
 * SAP ECC linked service properties.
 *
 */
export interface SapEccLinkedServiceTypeProperties {
  /**
   * @member {string} url The URL of SAP ECC OData API. For example,
   * '[https://hostname:port/sap/opu/odata/sap/servicename/]'. Type: string (or
   * Expression with resultType string).
   */
  url: string;
  /**
   * @member {string} [username] The username for Basic authentication. Type:
   * string (or Expression with resultType string).
   */
  username?: string;
  /**
   * @member {SecretBaseUnion} [password] The password for Basic
   * authentication.
   */
  password?: SecretBaseUnion;
  /**
   * @member {string} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Either encryptedCredential or username/password must
   * be provided. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: string;
}

/**
 * @interface
 * An interface representing SapEccLinkedService.
 * Linked service for SAP ERP Central Component(SAP ECC).
 *
 */
export interface SapEccLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "SapEcc";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {string} url The URL of SAP ECC OData API. For example,
   * '[https://hostname:port/sap/opu/odata/sap/servicename/]'. Type: string (or
   * Expression with resultType string).
   */
  url: string;
  /**
   * @member {string} [username] The username for Basic authentication. Type:
   * string (or Expression with resultType string).
   */
  username?: string;
  /**
   * @member {SecretBaseUnion} [password] The password for Basic
   * authentication.
   */
  password?: SecretBaseUnion;
  /**
   * @member {string} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Either encryptedCredential or username/password must
   * be provided. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: string;
}

/**
 * @interface
 * An interface representing SapCloudForCustomerLinkedServiceTypeProperties.
 * SAP Cloud for Customer linked service properties.
 *
 */
export interface SapCloudForCustomerLinkedServiceTypeProperties {
  /**
   * @member {any} url The URL of SAP Cloud for Customer OData API. For
   * example, '[https://[tenantname].crm.ondemand.com/sap/c4c/odata/v1]'. Type:
   * string (or Expression with resultType string).
   */
  url: any;
  /**
   * @member {any} [username] The username for Basic authentication. Type:
   * string (or Expression with resultType string).
   */
  username?: any;
  /**
   * @member {SecretBaseUnion} [password] The password for Basic
   * authentication.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Either encryptedCredential or username/password must
   * be provided. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing SapCloudForCustomerLinkedService.
 * Linked service for SAP Cloud for Customer.
 *
 */
export interface SapCloudForCustomerLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "SapCloudForCustomer";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} url The URL of SAP Cloud for Customer OData API. For
   * example, '[https://[tenantname].crm.ondemand.com/sap/c4c/odata/v1]'. Type:
   * string (or Expression with resultType string).
   */
  url: any;
  /**
   * @member {any} [username] The username for Basic authentication. Type:
   * string (or Expression with resultType string).
   */
  username?: any;
  /**
   * @member {SecretBaseUnion} [password] The password for Basic
   * authentication.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Either encryptedCredential or username/password must
   * be provided. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing SalesforceLinkedServiceTypeProperties.
 * Salesforce linked service properties.
 *
 */
export interface SalesforceLinkedServiceTypeProperties {
  /**
   * @member {any} [environmentUrl] The URL of Salesforce instance. Default is
   * 'https://login.salesforce.com'. To copy data from sandbox, specify
   * 'https://test.salesforce.com'. To copy data from custom domain, specify,
   * for example, 'https://[domain].my.salesforce.com'. Type: string (or
   * Expression with resultType string).
   */
  environmentUrl?: any;
  /**
   * @member {any} [username] The username for Basic authentication of the
   * Salesforce instance. Type: string (or Expression with resultType string).
   */
  username?: any;
  /**
   * @member {SecretBaseUnion} [password] The password for Basic authentication
   * of the Salesforce instance.
   */
  password?: SecretBaseUnion;
  /**
   * @member {SecretBaseUnion} [securityToken] The security token is required
   * to remotely access Salesforce instance.
   */
  securityToken?: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing SalesforceLinkedService.
 * Linked service for Salesforce.
 *
 */
export interface SalesforceLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Salesforce";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} [environmentUrl] The URL of Salesforce instance. Default is
   * 'https://login.salesforce.com'. To copy data from sandbox, specify
   * 'https://test.salesforce.com'. To copy data from custom domain, specify,
   * for example, 'https://[domain].my.salesforce.com'. Type: string (or
   * Expression with resultType string).
   */
  environmentUrl?: any;
  /**
   * @member {any} [username] The username for Basic authentication of the
   * Salesforce instance. Type: string (or Expression with resultType string).
   */
  username?: any;
  /**
   * @member {SecretBaseUnion} [password] The password for Basic authentication
   * of the Salesforce instance.
   */
  password?: SecretBaseUnion;
  /**
   * @member {SecretBaseUnion} [securityToken] The security token is required
   * to remotely access Salesforce instance.
   */
  securityToken?: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing AzureDataLakeStoreLinkedServiceTypeProperties.
 * Azure Data Lake Store linked service properties.
 *
 */
export interface AzureDataLakeStoreLinkedServiceTypeProperties {
  /**
   * @member {any} dataLakeStoreUri Data Lake Store service URI. Type: string
   * (or Expression with resultType string).
   */
  dataLakeStoreUri: any;
  /**
   * @member {any} [servicePrincipalId] The ID of the application used to
   * authenticate against the Azure Data Lake Store account. Type: string (or
   * Expression with resultType string).
   */
  servicePrincipalId?: any;
  /**
   * @member {SecretBaseUnion} [servicePrincipalKey] The Key of the application
   * used to authenticate against the Azure Data Lake Store account.
   */
  servicePrincipalKey?: SecretBaseUnion;
  /**
   * @member {any} [tenant] The name or ID of the tenant to which the service
   * principal belongs. Type: string (or Expression with resultType string).
   */
  tenant?: any;
  /**
   * @member {any} [accountName] Data Lake Store account name. Type: string (or
   * Expression with resultType string).
   */
  accountName?: any;
  /**
   * @member {any} [subscriptionId] Data Lake Store account subscription ID (if
   * different from Data Factory account). Type: string (or Expression with
   * resultType string).
   */
  subscriptionId?: any;
  /**
   * @member {any} [resourceGroupName] Data Lake Store account resource group
   * name (if different from Data Factory account). Type: string (or Expression
   * with resultType string).
   */
  resourceGroupName?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing AzureDataLakeStoreLinkedService.
 * Azure Data Lake Store linked service.
 *
 */
export interface AzureDataLakeStoreLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AzureDataLakeStore";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} dataLakeStoreUri Data Lake Store service URI. Type: string
   * (or Expression with resultType string).
   */
  dataLakeStoreUri: any;
  /**
   * @member {any} [servicePrincipalId] The ID of the application used to
   * authenticate against the Azure Data Lake Store account. Type: string (or
   * Expression with resultType string).
   */
  servicePrincipalId?: any;
  /**
   * @member {SecretBaseUnion} [servicePrincipalKey] The Key of the application
   * used to authenticate against the Azure Data Lake Store account.
   */
  servicePrincipalKey?: SecretBaseUnion;
  /**
   * @member {any} [tenant] The name or ID of the tenant to which the service
   * principal belongs. Type: string (or Expression with resultType string).
   */
  tenant?: any;
  /**
   * @member {any} [accountName] Data Lake Store account name. Type: string (or
   * Expression with resultType string).
   */
  accountName?: any;
  /**
   * @member {any} [subscriptionId] Data Lake Store account subscription ID (if
   * different from Data Factory account). Type: string (or Expression with
   * resultType string).
   */
  subscriptionId?: any;
  /**
   * @member {any} [resourceGroupName] Data Lake Store account resource group
   * name (if different from Data Factory account). Type: string (or Expression
   * with resultType string).
   */
  resourceGroupName?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing MongoDbLinkedServiceTypeProperties.
 * MongoDB linked service properties.
 *
 */
export interface MongoDbLinkedServiceTypeProperties {
  /**
   * @member {any} server The IP address or server name of the MongoDB server.
   * Type: string (or Expression with resultType string).
   */
  server: any;
  /**
   * @member {MongoDbAuthenticationType} [authenticationType] The
   * authentication type to be used to connect to the MongoDB database.
   * Possible values include: 'Basic', 'Anonymous'
   */
  authenticationType?: MongoDbAuthenticationType;
  /**
   * @member {any} databaseName The name of the MongoDB database that you want
   * to access. Type: string (or Expression with resultType string).
   */
  databaseName: any;
  /**
   * @member {any} [username] Username for authentication. Type: string (or
   * Expression with resultType string).
   */
  username?: any;
  /**
   * @member {SecretBaseUnion} [password] Password for authentication.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [authSource] Database to verify the username and password.
   * Type: string (or Expression with resultType string).
   */
  authSource?: any;
  /**
   * @member {any} [port] The TCP port number that the MongoDB server uses to
   * listen for client connections. The default value is 27017. Type: integer
   * (or Expression with resultType integer), minimum: 0.
   */
  port?: any;
  /**
   * @member {any} [enableSsl] Specifies whether the connections to the server
   * are encrypted using SSL. The default value is false. Type: boolean (or
   * Expression with resultType boolean).
   */
  enableSsl?: any;
  /**
   * @member {any} [allowSelfSignedServerCert] Specifies whether to allow
   * self-signed certificates from the server. The default value is false.
   * Type: boolean (or Expression with resultType boolean).
   */
  allowSelfSignedServerCert?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing MongoDbLinkedService.
 * Linked service for MongoDb data source.
 *
 */
export interface MongoDbLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "MongoDb";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} server The IP address or server name of the MongoDB server.
   * Type: string (or Expression with resultType string).
   */
  server: any;
  /**
   * @member {MongoDbAuthenticationType} [authenticationType] The
   * authentication type to be used to connect to the MongoDB database.
   * Possible values include: 'Basic', 'Anonymous'
   */
  authenticationType?: MongoDbAuthenticationType;
  /**
   * @member {any} databaseName The name of the MongoDB database that you want
   * to access. Type: string (or Expression with resultType string).
   */
  databaseName: any;
  /**
   * @member {any} [username] Username for authentication. Type: string (or
   * Expression with resultType string).
   */
  username?: any;
  /**
   * @member {SecretBaseUnion} [password] Password for authentication.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [authSource] Database to verify the username and password.
   * Type: string (or Expression with resultType string).
   */
  authSource?: any;
  /**
   * @member {any} [port] The TCP port number that the MongoDB server uses to
   * listen for client connections. The default value is 27017. Type: integer
   * (or Expression with resultType integer), minimum: 0.
   */
  port?: any;
  /**
   * @member {any} [enableSsl] Specifies whether the connections to the server
   * are encrypted using SSL. The default value is false. Type: boolean (or
   * Expression with resultType boolean).
   */
  enableSsl?: any;
  /**
   * @member {any} [allowSelfSignedServerCert] Specifies whether to allow
   * self-signed certificates from the server. The default value is false.
   * Type: boolean (or Expression with resultType boolean).
   */
  allowSelfSignedServerCert?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing CassandraLinkedServiceTypeProperties.
 * Cassandra linked service properties.
 *
 */
export interface CassandraLinkedServiceTypeProperties {
  /**
   * @member {any} host Host name for connection. Type: string (or Expression
   * with resultType string).
   */
  host: any;
  /**
   * @member {any} [authenticationType] AuthenticationType to be used for
   * connection. Type: string (or Expression with resultType string).
   */
  authenticationType?: any;
  /**
   * @member {any} [port] The port for the connection. Type: integer (or
   * Expression with resultType integer).
   */
  port?: any;
  /**
   * @member {any} [username] Username for authentication. Type: string (or
   * Expression with resultType string).
   */
  username?: any;
  /**
   * @member {SecretBaseUnion} [password] Password for authentication.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing CassandraLinkedService.
 * Linked service for Cassandra data source.
 *
 */
export interface CassandraLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Cassandra";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} host Host name for connection. Type: string (or Expression
   * with resultType string).
   */
  host: any;
  /**
   * @member {any} [authenticationType] AuthenticationType to be used for
   * connection. Type: string (or Expression with resultType string).
   */
  authenticationType?: any;
  /**
   * @member {any} [port] The port for the connection. Type: integer (or
   * Expression with resultType integer).
   */
  port?: any;
  /**
   * @member {any} [username] Username for authentication. Type: string (or
   * Expression with resultType string).
   */
  username?: any;
  /**
   * @member {SecretBaseUnion} [password] Password for authentication.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * Contains the possible cases for WebLinkedServiceTypeProperties.
 */
export type WebLinkedServiceTypePropertiesUnion = WebLinkedServiceTypeProperties | WebClientCertificateAuthentication | WebBasicAuthentication | WebAnonymousAuthentication;

/**
 * @interface
 * An interface representing WebLinkedServiceTypeProperties.
 * Base definition of WebLinkedServiceTypeProperties, this typeProperties is
 * polymorphic based on authenticationType, so not flattened in SDK models.
 *
 */
export interface WebLinkedServiceTypeProperties {
  /**
   * @member {string} authenticationType Polymorphic Discriminator
   */
  authenticationType: "WebLinkedServiceTypeProperties";
  /**
   * @member {any} url The URL of the web service endpoint, e.g.
   * http://www.microsoft.com . Type: string (or Expression with resultType
   * string).
   */
  url: any;
}

/**
 * @interface
 * An interface representing WebClientCertificateAuthentication.
 * A WebLinkedService that uses client certificate based authentication to
 * communicate with an HTTP endpoint. This scheme follows mutual
 * authentication; the server must also provide valid credentials to the
 * client.
 *
 */
export interface WebClientCertificateAuthentication {
  /**
   * @member {string} authenticationType Polymorphic Discriminator
   */
  authenticationType: "ClientCertificate";
  /**
   * @member {any} url The URL of the web service endpoint, e.g.
   * http://www.microsoft.com . Type: string (or Expression with resultType
   * string).
   */
  url: any;
  /**
   * @member {SecretBaseUnion} pfx Base64-encoded contents of a PFX file.
   */
  pfx: SecretBaseUnion;
  /**
   * @member {SecretBaseUnion} password Password for the PFX file.
   */
  password: SecretBaseUnion;
}

/**
 * @interface
 * An interface representing WebBasicAuthentication.
 * A WebLinkedService that uses basic authentication to communicate with an
 * HTTP endpoint.
 *
 */
export interface WebBasicAuthentication {
  /**
   * @member {string} authenticationType Polymorphic Discriminator
   */
  authenticationType: "Basic";
  /**
   * @member {any} url The URL of the web service endpoint, e.g.
   * http://www.microsoft.com . Type: string (or Expression with resultType
   * string).
   */
  url: any;
  /**
   * @member {any} username User name for Basic authentication. Type: string
   * (or Expression with resultType string).
   */
  username: any;
  /**
   * @member {SecretBaseUnion} password The password for Basic authentication.
   */
  password: SecretBaseUnion;
}

/**
 * @interface
 * An interface representing WebAnonymousAuthentication.
 * A WebLinkedService that uses anonymous authentication to communicate with an
 * HTTP endpoint.
 *
 */
export interface WebAnonymousAuthentication {
  /**
   * @member {string} authenticationType Polymorphic Discriminator
   */
  authenticationType: "Anonymous";
  /**
   * @member {any} url The URL of the web service endpoint, e.g.
   * http://www.microsoft.com . Type: string (or Expression with resultType
   * string).
   */
  url: any;
}

/**
 * @interface
 * An interface representing WebLinkedService.
 * Web linked service.
 *
 */
export interface WebLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Web";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {WebLinkedServiceTypePropertiesUnion} typeProperties Web linked
   * service properties.
   */
  typeProperties: WebLinkedServiceTypePropertiesUnion;
}

/**
 * @interface
 * An interface representing ODataLinkedServiceTypeProperties.
 * OData linked service properties.
 *
 */
export interface ODataLinkedServiceTypeProperties {
  /**
   * @member {any} url The URL of the OData service endpoint. Type: string (or
   * Expression with resultType string).
   */
  url: any;
  /**
   * @member {ODataAuthenticationType} [authenticationType] Type of
   * authentication used to connect to the OData service. Possible values
   * include: 'Basic', 'Anonymous'
   */
  authenticationType?: ODataAuthenticationType;
  /**
   * @member {any} [userName] User name of the OData service. Type: string (or
   * Expression with resultType string).
   */
  userName?: any;
  /**
   * @member {SecretBaseUnion} [password] Password of the OData service.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing ODataLinkedService.
 * Open Data Protocol (OData) linked service.
 *
 */
export interface ODataLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "OData";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} url The URL of the OData service endpoint. Type: string (or
   * Expression with resultType string).
   */
  url: any;
  /**
   * @member {ODataAuthenticationType} [authenticationType] Type of
   * authentication used to connect to the OData service. Possible values
   * include: 'Basic', 'Anonymous'
   */
  authenticationType?: ODataAuthenticationType;
  /**
   * @member {any} [userName] User name of the OData service. Type: string (or
   * Expression with resultType string).
   */
  userName?: any;
  /**
   * @member {SecretBaseUnion} [password] Password of the OData service.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing HdfsLinkedServiceTypeProperties.
 * HDFS linked service properties.
 *
 */
export interface HdfsLinkedServiceTypeProperties {
  /**
   * @member {any} url The URL of the HDFS service endpoint, e.g.
   * http://myhostname:50070/webhdfs/v1 . Type: string (or Expression with
   * resultType string).
   */
  url: any;
  /**
   * @member {any} [authenticationType] Type of authentication used to connect
   * to the HDFS. Possible values are: Anonymous and Windows. Type: string (or
   * Expression with resultType string).
   */
  authenticationType?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
  /**
   * @member {any} [userName] User name for Windows authentication. Type:
   * string (or Expression with resultType string).
   */
  userName?: any;
  /**
   * @member {SecretBaseUnion} [password] Password for Windows authentication.
   */
  password?: SecretBaseUnion;
}

/**
 * @interface
 * An interface representing HdfsLinkedService.
 * Hadoop Distributed File System (HDFS) linked service.
 *
 */
export interface HdfsLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Hdfs";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} url The URL of the HDFS service endpoint, e.g.
   * http://myhostname:50070/webhdfs/v1 . Type: string (or Expression with
   * resultType string).
   */
  url: any;
  /**
   * @member {any} [authenticationType] Type of authentication used to connect
   * to the HDFS. Possible values are: Anonymous and Windows. Type: string (or
   * Expression with resultType string).
   */
  authenticationType?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
  /**
   * @member {any} [userName] User name for Windows authentication. Type:
   * string (or Expression with resultType string).
   */
  userName?: any;
  /**
   * @member {SecretBaseUnion} [password] Password for Windows authentication.
   */
  password?: SecretBaseUnion;
}

/**
 * @interface
 * An interface representing OdbcLinkedServiceTypeProperties.
 * ODBC linked service properties.
 *
 */
export interface OdbcLinkedServiceTypeProperties {
  /**
   * @member {any} connectionString The non-access credential portion of the
   * connection string as well as an optional encrypted credential. Type:
   * string, SecureString or AzureKeyVaultSecretReference.
   */
  connectionString: any;
  /**
   * @member {any} [authenticationType] Type of authentication used to connect
   * to the ODBC data store. Possible values are: Anonymous and Basic. Type:
   * string (or Expression with resultType string).
   */
  authenticationType?: any;
  /**
   * @member {SecretBaseUnion} [credential] The access credential portion of
   * the connection string specified in driver-specific property-value format.
   */
  credential?: SecretBaseUnion;
  /**
   * @member {any} [userName] User name for Basic authentication. Type: string
   * (or Expression with resultType string).
   */
  userName?: any;
  /**
   * @member {SecretBaseUnion} [password] Password for Basic authentication.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing OdbcLinkedService.
 * Open Database Connectivity (ODBC) linked service.
 *
 */
export interface OdbcLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Odbc";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} connectionString The non-access credential portion of the
   * connection string as well as an optional encrypted credential. Type:
   * string, SecureString or AzureKeyVaultSecretReference.
   */
  connectionString: any;
  /**
   * @member {any} [authenticationType] Type of authentication used to connect
   * to the ODBC data store. Possible values are: Anonymous and Basic. Type:
   * string (or Expression with resultType string).
   */
  authenticationType?: any;
  /**
   * @member {SecretBaseUnion} [credential] The access credential portion of
   * the connection string specified in driver-specific property-value format.
   */
  credential?: SecretBaseUnion;
  /**
   * @member {any} [userName] User name for Basic authentication. Type: string
   * (or Expression with resultType string).
   */
  userName?: any;
  /**
   * @member {SecretBaseUnion} [password] Password for Basic authentication.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing AzureMLLinkedServiceTypeProperties.
 * Azure ML Web Service linked service properties.
 *
 */
export interface AzureMLLinkedServiceTypeProperties {
  /**
   * @member {any} mlEndpoint The Batch Execution REST URL for an Azure ML Web
   * Service endpoint. Type: string (or Expression with resultType string).
   */
  mlEndpoint: any;
  /**
   * @member {SecretBaseUnion} apiKey The API key for accessing the Azure ML
   * model endpoint.
   */
  apiKey: SecretBaseUnion;
  /**
   * @member {any} [updateResourceEndpoint] The Update Resource REST URL for an
   * Azure ML Web Service endpoint. Type: string (or Expression with resultType
   * string).
   */
  updateResourceEndpoint?: any;
  /**
   * @member {any} [servicePrincipalId] The ID of the service principal used to
   * authenticate against the ARM-based updateResourceEndpoint of an Azure ML
   * web service. Type: string (or Expression with resultType string).
   */
  servicePrincipalId?: any;
  /**
   * @member {SecretBaseUnion} [servicePrincipalKey] The key of the service
   * principal used to authenticate against the ARM-based
   * updateResourceEndpoint of an Azure ML web service.
   */
  servicePrincipalKey?: SecretBaseUnion;
  /**
   * @member {any} [tenant] The name or ID of the tenant to which the service
   * principal belongs. Type: string (or Expression with resultType string).
   */
  tenant?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing AzureMLLinkedService.
 * Azure ML Web Service linked service.
 *
 */
export interface AzureMLLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AzureML";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} mlEndpoint The Batch Execution REST URL for an Azure ML Web
   * Service endpoint. Type: string (or Expression with resultType string).
   */
  mlEndpoint: any;
  /**
   * @member {SecretBaseUnion} apiKey The API key for accessing the Azure ML
   * model endpoint.
   */
  apiKey: SecretBaseUnion;
  /**
   * @member {any} [updateResourceEndpoint] The Update Resource REST URL for an
   * Azure ML Web Service endpoint. Type: string (or Expression with resultType
   * string).
   */
  updateResourceEndpoint?: any;
  /**
   * @member {any} [servicePrincipalId] The ID of the service principal used to
   * authenticate against the ARM-based updateResourceEndpoint of an Azure ML
   * web service. Type: string (or Expression with resultType string).
   */
  servicePrincipalId?: any;
  /**
   * @member {SecretBaseUnion} [servicePrincipalKey] The key of the service
   * principal used to authenticate against the ARM-based
   * updateResourceEndpoint of an Azure ML web service.
   */
  servicePrincipalKey?: SecretBaseUnion;
  /**
   * @member {any} [tenant] The name or ID of the tenant to which the service
   * principal belongs. Type: string (or Expression with resultType string).
   */
  tenant?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing TeradataLinkedServiceTypeProperties.
 * Teradata linked service properties.
 *
 */
export interface TeradataLinkedServiceTypeProperties {
  /**
   * @member {any} server Server name for connection. Type: string (or
   * Expression with resultType string).
   */
  server: any;
  /**
   * @member {TeradataAuthenticationType} [authenticationType]
   * AuthenticationType to be used for connection. Possible values include:
   * 'Basic', 'Windows'
   */
  authenticationType?: TeradataAuthenticationType;
  /**
   * @member {any} [username] Username for authentication. Type: string (or
   * Expression with resultType string).
   */
  username?: any;
  /**
   * @member {SecretBaseUnion} [password] Password for authentication.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing TeradataLinkedService.
 * Linked service for Teradata data source.
 *
 */
export interface TeradataLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Teradata";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} server Server name for connection. Type: string (or
   * Expression with resultType string).
   */
  server: any;
  /**
   * @member {TeradataAuthenticationType} [authenticationType]
   * AuthenticationType to be used for connection. Possible values include:
   * 'Basic', 'Windows'
   */
  authenticationType?: TeradataAuthenticationType;
  /**
   * @member {any} [username] Username for authentication. Type: string (or
   * Expression with resultType string).
   */
  username?: any;
  /**
   * @member {SecretBaseUnion} [password] Password for authentication.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing Db2LinkedServiceTypeProperties.
 * DB2 linked service properties.
 *
 */
export interface Db2LinkedServiceTypeProperties {
  /**
   * @member {any} server Server name for connection. Type: string (or
   * Expression with resultType string).
   */
  server: any;
  /**
   * @member {any} database Database name for connection. Type: string (or
   * Expression with resultType string).
   */
  database: any;
  /**
   * @member {Db2AuthenticationType} [authenticationType] AuthenticationType to
   * be used for connection. Possible values include: 'Basic'
   */
  authenticationType?: Db2AuthenticationType;
  /**
   * @member {any} [username] Username for authentication. Type: string (or
   * Expression with resultType string).
   */
  username?: any;
  /**
   * @member {SecretBaseUnion} [password] Password for authentication.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing Db2LinkedService.
 * Linked service for DB2 data source.
 *
 */
export interface Db2LinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Db2";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} server Server name for connection. Type: string (or
   * Expression with resultType string).
   */
  server: any;
  /**
   * @member {any} database Database name for connection. Type: string (or
   * Expression with resultType string).
   */
  database: any;
  /**
   * @member {Db2AuthenticationType} [authenticationType] AuthenticationType to
   * be used for connection. Possible values include: 'Basic'
   */
  authenticationType?: Db2AuthenticationType;
  /**
   * @member {any} [username] Username for authentication. Type: string (or
   * Expression with resultType string).
   */
  username?: any;
  /**
   * @member {SecretBaseUnion} [password] Password for authentication.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing SybaseLinkedServiceTypeProperties.
 * Sybase linked service properties.
 *
 */
export interface SybaseLinkedServiceTypeProperties {
  /**
   * @member {any} server Server name for connection. Type: string (or
   * Expression with resultType string).
   */
  server: any;
  /**
   * @member {any} database Database name for connection. Type: string (or
   * Expression with resultType string).
   */
  database: any;
  /**
   * @member {any} [schema] Schema name for connection. Type: string (or
   * Expression with resultType string).
   */
  schema?: any;
  /**
   * @member {SybaseAuthenticationType} [authenticationType] AuthenticationType
   * to be used for connection. Possible values include: 'Basic', 'Windows'
   */
  authenticationType?: SybaseAuthenticationType;
  /**
   * @member {any} [username] Username for authentication. Type: string (or
   * Expression with resultType string).
   */
  username?: any;
  /**
   * @member {SecretBaseUnion} [password] Password for authentication.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing SybaseLinkedService.
 * Linked service for Sybase data source.
 *
 */
export interface SybaseLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Sybase";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} server Server name for connection. Type: string (or
   * Expression with resultType string).
   */
  server: any;
  /**
   * @member {any} database Database name for connection. Type: string (or
   * Expression with resultType string).
   */
  database: any;
  /**
   * @member {any} [schema] Schema name for connection. Type: string (or
   * Expression with resultType string).
   */
  schema?: any;
  /**
   * @member {SybaseAuthenticationType} [authenticationType] AuthenticationType
   * to be used for connection. Possible values include: 'Basic', 'Windows'
   */
  authenticationType?: SybaseAuthenticationType;
  /**
   * @member {any} [username] Username for authentication. Type: string (or
   * Expression with resultType string).
   */
  username?: any;
  /**
   * @member {SecretBaseUnion} [password] Password for authentication.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing PostgreSqlLinkedServiceTypeProperties.
 * PostgreSQL linked service properties.
 *
 */
export interface PostgreSqlLinkedServiceTypeProperties {
  /**
   * @member {SecretBaseUnion} connectionString The connection string.
   */
  connectionString: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing PostgreSqlLinkedService.
 * Linked service for PostgreSQL data source.
 *
 */
export interface PostgreSqlLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "PostgreSql";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {SecretBaseUnion} connectionString The connection string.
   */
  connectionString: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing MySqlLinkedServiceTypeProperties.
 * MySQL linked service properties.
 *
 */
export interface MySqlLinkedServiceTypeProperties {
  /**
   * @member {SecretBaseUnion} connectionString The connection string.
   */
  connectionString: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing MySqlLinkedService.
 * Linked service for MySQL data source.
 *
 */
export interface MySqlLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "MySql";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {SecretBaseUnion} connectionString The connection string.
   */
  connectionString: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing AzureMySqlLinkedServiceTypeProperties.
 * Azure MySQL database linked service properties.
 *
 */
export interface AzureMySqlLinkedServiceTypeProperties {
  /**
   * @member {any} connectionString The connection string. Type: string,
   * SecureString or AzureKeyVaultSecretReference.
   */
  connectionString: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing AzureMySqlLinkedService.
 * Azure MySQL database linked service.
 *
 */
export interface AzureMySqlLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AzureMySql";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} connectionString The connection string. Type: string,
   * SecureString or AzureKeyVaultSecretReference.
   */
  connectionString: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing OracleLinkedServiceTypeProperties.
 * Oracle database linked service properties.
 *
 */
export interface OracleLinkedServiceTypeProperties {
  /**
   * @member {any} connectionString The connection string. Type: string,
   * SecureString or AzureKeyVaultSecretReference.
   */
  connectionString: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing OracleLinkedService.
 * Oracle database.
 *
 */
export interface OracleLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Oracle";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} connectionString The connection string. Type: string,
   * SecureString or AzureKeyVaultSecretReference.
   */
  connectionString: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing FileServerLinkedServiceTypeProperties.
 * File system linked service properties.
 *
 */
export interface FileServerLinkedServiceTypeProperties {
  /**
   * @member {any} host Host name of the server. Type: string (or Expression
   * with resultType string).
   */
  host: any;
  /**
   * @member {any} [userId] User ID to logon the server. Type: string (or
   * Expression with resultType string).
   */
  userId?: any;
  /**
   * @member {SecretBaseUnion} [password] Password to logon the server.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing FileServerLinkedService.
 * File system linked service.
 *
 */
export interface FileServerLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "FileServer";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} host Host name of the server. Type: string (or Expression
   * with resultType string).
   */
  host: any;
  /**
   * @member {any} [userId] User ID to logon the server. Type: string (or
   * Expression with resultType string).
   */
  userId?: any;
  /**
   * @member {SecretBaseUnion} [password] Password to logon the server.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing HDInsightLinkedServiceTypeProperties.
 * HDInsight linked service properties.
 *
 */
export interface HDInsightLinkedServiceTypeProperties {
  /**
   * @member {any} clusterUri HDInsight cluster URI. Type: string (or
   * Expression with resultType string).
   */
  clusterUri: any;
  /**
   * @member {any} [userName] HDInsight cluster user name. Type: string (or
   * Expression with resultType string).
   */
  userName?: any;
  /**
   * @member {SecretBaseUnion} [password] HDInsight cluster password.
   */
  password?: SecretBaseUnion;
  /**
   * @member {LinkedServiceReference} [linkedServiceName] The Azure Storage
   * linked service reference.
   */
  linkedServiceName?: LinkedServiceReference;
  /**
   * @member {LinkedServiceReference} [hcatalogLinkedServiceName] A reference
   * to the Azure SQL linked service that points to the HCatalog database.
   */
  hcatalogLinkedServiceName?: LinkedServiceReference;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing HDInsightLinkedService.
 * HDInsight linked service.
 *
 */
export interface HDInsightLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "HDInsight";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} clusterUri HDInsight cluster URI. Type: string (or
   * Expression with resultType string).
   */
  clusterUri: any;
  /**
   * @member {any} [userName] HDInsight cluster user name. Type: string (or
   * Expression with resultType string).
   */
  userName?: any;
  /**
   * @member {SecretBaseUnion} [password] HDInsight cluster password.
   */
  password?: SecretBaseUnion;
  /**
   * @member {LinkedServiceReference} [linkedServiceName] The Azure Storage
   * linked service reference.
   */
  linkedServiceName?: LinkedServiceReference;
  /**
   * @member {LinkedServiceReference} [hcatalogLinkedServiceName] A reference
   * to the Azure SQL linked service that points to the HCatalog database.
   */
  hcatalogLinkedServiceName?: LinkedServiceReference;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing DynamicsLinkedServiceTypeProperties.
 * Dynamics linked service properties.
 *
 */
export interface DynamicsLinkedServiceTypeProperties {
  /**
   * @member {any} deploymentType The deployment type of the Dynamics instance.
   * 'Online' for Dynamics Online and 'OnPremisesWithIfd' for Dynamics
   * on-premises with Ifd. Type: string (or Expression with resultType string).
   */
  deploymentType: any;
  /**
   * @member {any} [hostName] The host name of the on-premises Dynamics server.
   * The property is required for on-prem and not allowed for online. Type:
   * string (or Expression with resultType string).
   */
  hostName?: any;
  /**
   * @member {any} [port] The port of on-premises Dynamics server. The property
   * is required for on-prem and not allowed for online. Default is 443. Type:
   * integer (or Expression with resultType integer), minimum: 0.
   */
  port?: any;
  /**
   * @member {any} [serviceUri] The URL to the Microsoft Dynamics server. The
   * property is required for on-line and not allowed for on-prem. Type: string
   * (or Expression with resultType string).
   */
  serviceUri?: any;
  /**
   * @member {any} [organizationName] The organization name of the Dynamics
   * instance. The property is required for on-prem and required for online
   * when there are more than one Dynamics instances associated with the user.
   * Type: string (or Expression with resultType string).
   */
  organizationName?: any;
  /**
   * @member {any} authenticationType The authentication type to connect to
   * Dynamics server. 'Office365' for online scenario, 'Ifd' for on-premises
   * with Ifd scenario. Type: string (or Expression with resultType string).
   */
  authenticationType: any;
  /**
   * @member {any} username User name to access the Dynamics instance. Type:
   * string (or Expression with resultType string).
   */
  username: any;
  /**
   * @member {SecretBaseUnion} [password] Password to access the Dynamics
   * instance.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing DynamicsLinkedService.
 * Dynamics linked service.
 *
 */
export interface DynamicsLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Dynamics";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} deploymentType The deployment type of the Dynamics instance.
   * 'Online' for Dynamics Online and 'OnPremisesWithIfd' for Dynamics
   * on-premises with Ifd. Type: string (or Expression with resultType string).
   */
  deploymentType: any;
  /**
   * @member {any} [hostName] The host name of the on-premises Dynamics server.
   * The property is required for on-prem and not allowed for online. Type:
   * string (or Expression with resultType string).
   */
  hostName?: any;
  /**
   * @member {any} [port] The port of on-premises Dynamics server. The property
   * is required for on-prem and not allowed for online. Default is 443. Type:
   * integer (or Expression with resultType integer), minimum: 0.
   */
  port?: any;
  /**
   * @member {any} [serviceUri] The URL to the Microsoft Dynamics server. The
   * property is required for on-line and not allowed for on-prem. Type: string
   * (or Expression with resultType string).
   */
  serviceUri?: any;
  /**
   * @member {any} [organizationName] The organization name of the Dynamics
   * instance. The property is required for on-prem and required for online
   * when there are more than one Dynamics instances associated with the user.
   * Type: string (or Expression with resultType string).
   */
  organizationName?: any;
  /**
   * @member {any} authenticationType The authentication type to connect to
   * Dynamics server. 'Office365' for online scenario, 'Ifd' for on-premises
   * with Ifd scenario. Type: string (or Expression with resultType string).
   */
  authenticationType: any;
  /**
   * @member {any} username User name to access the Dynamics instance. Type:
   * string (or Expression with resultType string).
   */
  username: any;
  /**
   * @member {SecretBaseUnion} [password] Password to access the Dynamics
   * instance.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing CosmosDbLinkedServiceTypeProperties.
 * CosmosDB linked service properties.
 *
 */
export interface CosmosDbLinkedServiceTypeProperties {
  /**
   * @member {any} connectionString The connection string. Type: string,
   * SecureString or AzureKeyVaultSecretReference.
   */
  connectionString: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing CosmosDbLinkedService.
 * Microsoft Azure Cosmos Database (CosmosDB) linked service.
 *
 */
export interface CosmosDbLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "CosmosDb";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} connectionString The connection string. Type: string,
   * SecureString or AzureKeyVaultSecretReference.
   */
  connectionString: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing AzureKeyVaultLinkedServiceTypeProperties.
 * Azure Key Vault linked service properties.
 *
 */
export interface AzureKeyVaultLinkedServiceTypeProperties {
  /**
   * @member {any} baseUrl The base URL of the Azure Key Vault. e.g.
   * https://myakv.vault.azure.net Type: string (or Expression with resultType
   * string).
   */
  baseUrl: any;
}

/**
 * @interface
 * An interface representing AzureKeyVaultLinkedService.
 * Azure Key Vault linked service.
 *
 */
export interface AzureKeyVaultLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AzureKeyVault";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} baseUrl The base URL of the Azure Key Vault. e.g.
   * https://myakv.vault.azure.net Type: string (or Expression with resultType
   * string).
   */
  baseUrl: any;
}

/**
 * @interface
 * An interface representing AzureBatchLinkedServiceTypeProperties.
 * Azure Batch linked service properties.
 *
 */
export interface AzureBatchLinkedServiceTypeProperties {
  /**
   * @member {any} accountName The Azure Batch account name. Type: string (or
   * Expression with resultType string).
   */
  accountName: any;
  /**
   * @member {SecretBaseUnion} [accessKey] The Azure Batch account access key.
   */
  accessKey?: SecretBaseUnion;
  /**
   * @member {any} batchUri The Azure Batch URI. Type: string (or Expression
   * with resultType string).
   */
  batchUri: any;
  /**
   * @member {any} poolName The Azure Batch pool name. Type: string (or
   * Expression with resultType string).
   */
  poolName: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName The Azure Storage
   * linked service reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing AzureBatchLinkedService.
 * Azure Batch linked service.
 *
 */
export interface AzureBatchLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AzureBatch";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} accountName The Azure Batch account name. Type: string (or
   * Expression with resultType string).
   */
  accountName: any;
  /**
   * @member {SecretBaseUnion} [accessKey] The Azure Batch account access key.
   */
  accessKey?: SecretBaseUnion;
  /**
   * @member {any} batchUri The Azure Batch URI. Type: string (or Expression
   * with resultType string).
   */
  batchUri: any;
  /**
   * @member {any} poolName The Azure Batch pool name. Type: string (or
   * Expression with resultType string).
   */
  poolName: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName The Azure Storage
   * linked service reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing AzureSqlDatabaseLinkedServiceTypeProperties.
 * Azure SQL Database linked service properties.
 *
 */
export interface AzureSqlDatabaseLinkedServiceTypeProperties {
  /**
   * @member {any} connectionString The connection string. Type: string,
   * SecureString or AzureKeyVaultSecretReference.
   */
  connectionString: any;
  /**
   * @member {any} [servicePrincipalId] The ID of the service principal used to
   * authenticate against Azure SQL Database. Type: string (or Expression with
   * resultType string).
   */
  servicePrincipalId?: any;
  /**
   * @member {SecretBaseUnion} [servicePrincipalKey] The key of the service
   * principal used to authenticate against Azure SQL Database.
   */
  servicePrincipalKey?: SecretBaseUnion;
  /**
   * @member {any} [tenant] The name or ID of the tenant to which the service
   * principal belongs. Type: string (or Expression with resultType string).
   */
  tenant?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing AzureSqlDatabaseLinkedService.
 * Microsoft Azure SQL Database linked service.
 *
 */
export interface AzureSqlDatabaseLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AzureSqlDatabase";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} connectionString The connection string. Type: string,
   * SecureString or AzureKeyVaultSecretReference.
   */
  connectionString: any;
  /**
   * @member {any} [servicePrincipalId] The ID of the service principal used to
   * authenticate against Azure SQL Database. Type: string (or Expression with
   * resultType string).
   */
  servicePrincipalId?: any;
  /**
   * @member {SecretBaseUnion} [servicePrincipalKey] The key of the service
   * principal used to authenticate against Azure SQL Database.
   */
  servicePrincipalKey?: SecretBaseUnion;
  /**
   * @member {any} [tenant] The name or ID of the tenant to which the service
   * principal belongs. Type: string (or Expression with resultType string).
   */
  tenant?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing SqlServerLinkedServiceTypeProperties.
 * SQL Server linked service properties.
 *
 */
export interface SqlServerLinkedServiceTypeProperties {
  /**
   * @member {any} connectionString The connection string. Type: string,
   * SecureString or AzureKeyVaultSecretReference.
   */
  connectionString: any;
  /**
   * @member {any} [userName] The on-premises Windows authentication user name.
   * Type: string (or Expression with resultType string).
   */
  userName?: any;
  /**
   * @member {SecretBaseUnion} [password] The on-premises Windows
   * authentication password.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing SqlServerLinkedService.
 * SQL Server linked service.
 *
 */
export interface SqlServerLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "SqlServer";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} connectionString The connection string. Type: string,
   * SecureString or AzureKeyVaultSecretReference.
   */
  connectionString: any;
  /**
   * @member {any} [userName] The on-premises Windows authentication user name.
   * Type: string (or Expression with resultType string).
   */
  userName?: any;
  /**
   * @member {SecretBaseUnion} [password] The on-premises Windows
   * authentication password.
   */
  password?: SecretBaseUnion;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing AzureSqlDWLinkedServiceTypeProperties.
 * Azure SQL Data Warehouse linked service properties.
 *
 */
export interface AzureSqlDWLinkedServiceTypeProperties {
  /**
   * @member {any} connectionString The connection string. Type: string,
   * SecureString or AzureKeyVaultSecretReference. Type: string, SecureString
   * or AzureKeyVaultSecretReference.
   */
  connectionString: any;
  /**
   * @member {any} [servicePrincipalId] The ID of the service principal used to
   * authenticate against Azure SQL Data Warehouse. Type: string (or Expression
   * with resultType string).
   */
  servicePrincipalId?: any;
  /**
   * @member {SecretBaseUnion} [servicePrincipalKey] The key of the service
   * principal used to authenticate against Azure SQL Data Warehouse.
   */
  servicePrincipalKey?: SecretBaseUnion;
  /**
   * @member {any} [tenant] The name or ID of the tenant to which the service
   * principal belongs. Type: string (or Expression with resultType string).
   */
  tenant?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing AzureSqlDWLinkedService.
 * Azure SQL Data Warehouse linked service.
 *
 */
export interface AzureSqlDWLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AzureSqlDW";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} connectionString The connection string. Type: string,
   * SecureString or AzureKeyVaultSecretReference. Type: string, SecureString
   * or AzureKeyVaultSecretReference.
   */
  connectionString: any;
  /**
   * @member {any} [servicePrincipalId] The ID of the service principal used to
   * authenticate against Azure SQL Data Warehouse. Type: string (or Expression
   * with resultType string).
   */
  servicePrincipalId?: any;
  /**
   * @member {SecretBaseUnion} [servicePrincipalKey] The key of the service
   * principal used to authenticate against Azure SQL Data Warehouse.
   */
  servicePrincipalKey?: SecretBaseUnion;
  /**
   * @member {any} [tenant] The name or ID of the tenant to which the service
   * principal belongs. Type: string (or Expression with resultType string).
   */
  tenant?: any;
  /**
   * @member {any} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: any;
}

/**
 * @interface
 * An interface representing AzureStorageLinkedServiceTypeProperties.
 * Azure Storage linked service properties.
 *
 */
export interface AzureStorageLinkedServiceTypeProperties {
  /**
   * @member {any} [connectionString] The connection string. It is mutually
   * exclusive with sasUri property. Type: string, SecureString or
   * AzureKeyVaultSecretReference.
   */
  connectionString?: any;
  /**
   * @member {SecretBaseUnion} [sasUri] SAS URI of the Azure Storage resource.
   * It is mutually exclusive with connectionString property.
   */
  sasUri?: SecretBaseUnion;
  /**
   * @member {string} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: string;
}

/**
 * @interface
 * An interface representing AzureTableStorageLinkedService.
 * The azure table storage linked service.
 *
 */
export interface AzureTableStorageLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AzureTableStorage";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} [connectionString] The connection string. It is mutually
   * exclusive with sasUri property. Type: string, SecureString or
   * AzureKeyVaultSecretReference.
   */
  connectionString?: any;
  /**
   * @member {SecretBaseUnion} [sasUri] SAS URI of the Azure Storage resource.
   * It is mutually exclusive with connectionString property.
   */
  sasUri?: SecretBaseUnion;
  /**
   * @member {string} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: string;
}

/**
 * @interface
 * An interface representing AzureBlobStorageLinkedServiceTypeProperties.
 * Azure Blob Storage linked service properties.
 *
 */
export interface AzureBlobStorageLinkedServiceTypeProperties {
  /**
   * @member {any} [connectionString] The connection string. It is mutually
   * exclusive with sasUri, serviceEndpoint property. Type: string,
   * SecureString or AzureKeyVaultSecretReference.
   */
  connectionString?: any;
  /**
   * @member {SecretBaseUnion} [sasUri] SAS URI of the Azure Blob Storage
   * resource. It is mutually exclusive with connectionString, serviceEndpoint
   * property.
   */
  sasUri?: SecretBaseUnion;
  /**
   * @member {string} [serviceEndpoint] Blob service endpoint of the Azure Blob
   * Storage resource. It is mutually exclusive with connectionString, sasUri
   * property.
   */
  serviceEndpoint?: string;
  /**
   * @member {any} [servicePrincipalId] The ID of the service principal used to
   * authenticate against Azure SQL Data Warehouse. Type: string (or Expression
   * with resultType string).
   */
  servicePrincipalId?: any;
  /**
   * @member {SecretBaseUnion} [servicePrincipalKey] The key of the service
   * principal used to authenticate against Azure SQL Data Warehouse.
   */
  servicePrincipalKey?: SecretBaseUnion;
  /**
   * @member {any} [tenant] The name or ID of the tenant to which the service
   * principal belongs. Type: string (or Expression with resultType string).
   */
  tenant?: any;
  /**
   * @member {string} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: string;
}

/**
 * @interface
 * An interface representing AzureBlobStorageLinkedService.
 * The azure blob storage linked service.
 *
 */
export interface AzureBlobStorageLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AzureBlobStorage";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} [connectionString] The connection string. It is mutually
   * exclusive with sasUri, serviceEndpoint property. Type: string,
   * SecureString or AzureKeyVaultSecretReference.
   */
  connectionString?: any;
  /**
   * @member {SecretBaseUnion} [sasUri] SAS URI of the Azure Blob Storage
   * resource. It is mutually exclusive with connectionString, serviceEndpoint
   * property.
   */
  sasUri?: SecretBaseUnion;
  /**
   * @member {string} [serviceEndpoint] Blob service endpoint of the Azure Blob
   * Storage resource. It is mutually exclusive with connectionString, sasUri
   * property.
   */
  serviceEndpoint?: string;
  /**
   * @member {any} [servicePrincipalId] The ID of the service principal used to
   * authenticate against Azure SQL Data Warehouse. Type: string (or Expression
   * with resultType string).
   */
  servicePrincipalId?: any;
  /**
   * @member {SecretBaseUnion} [servicePrincipalKey] The key of the service
   * principal used to authenticate against Azure SQL Data Warehouse.
   */
  servicePrincipalKey?: SecretBaseUnion;
  /**
   * @member {any} [tenant] The name or ID of the tenant to which the service
   * principal belongs. Type: string (or Expression with resultType string).
   */
  tenant?: any;
  /**
   * @member {string} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: string;
}

/**
 * @interface
 * An interface representing AzureStorageLinkedService.
 * The storage account linked service.
 *
 */
export interface AzureStorageLinkedService {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AzureStorage";
  /**
   * @member {IntegrationRuntimeReference} [connectVia] The integration runtime
   * reference.
   */
  connectVia?: IntegrationRuntimeReference;
  /**
   * @member {string} [description] Linked service description.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for linked service.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {any} [connectionString] The connection string. It is mutually
   * exclusive with sasUri property. Type: string, SecureString or
   * AzureKeyVaultSecretReference.
   */
  connectionString?: any;
  /**
   * @member {SecretBaseUnion} [sasUri] SAS URI of the Azure Storage resource.
   * It is mutually exclusive with connectionString property.
   */
  sasUri?: SecretBaseUnion;
  /**
   * @member {string} [encryptedCredential] The encrypted credential used for
   * authentication. Credentials are encrypted using the integration runtime
   * credential manager. Type: string (or Expression with resultType string).
   */
  encryptedCredential?: string;
}

/**
 * @interface
 * An interface representing ResponsysObjectDataset.
 * Responsys dataset.
 *
 */
export interface ResponsysObjectDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "ResponsysObject";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
}

/**
 * @interface
 * An interface representing SalesforceMarketingCloudObjectDataset.
 * Salesforce Marketing Cloud dataset.
 *
 */
export interface SalesforceMarketingCloudObjectDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "SalesforceMarketingCloudObject";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
}

/**
 * @interface
 * An interface representing VerticaTableDataset.
 * Vertica dataset.
 *
 */
export interface VerticaTableDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "VerticaTable";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
}

/**
 * @interface
 * An interface representing NetezzaTableDataset.
 * Netezza dataset.
 *
 */
export interface NetezzaTableDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "NetezzaTable";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
}

/**
 * @interface
 * An interface representing ZohoObjectDataset.
 * Zoho server dataset.
 *
 */
export interface ZohoObjectDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "ZohoObject";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
}

/**
 * @interface
 * An interface representing XeroObjectDataset.
 * Xero Serivce dataset.
 *
 */
export interface XeroObjectDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "XeroObject";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
}

/**
 * @interface
 * An interface representing SquareObjectDataset.
 * Square Serivce dataset.
 *
 */
export interface SquareObjectDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "SquareObject";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
}

/**
 * @interface
 * An interface representing SparkObjectDataset.
 * Spark Server dataset.
 *
 */
export interface SparkObjectDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "SparkObject";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
}

/**
 * @interface
 * An interface representing ShopifyObjectDataset.
 * Shopify Serivce dataset.
 *
 */
export interface ShopifyObjectDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "ShopifyObject";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
}

/**
 * @interface
 * An interface representing ServiceNowObjectDataset.
 * ServiceNow server dataset.
 *
 */
export interface ServiceNowObjectDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "ServiceNowObject";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
}

/**
 * @interface
 * An interface representing QuickBooksObjectDataset.
 * QuickBooks server dataset.
 *
 */
export interface QuickBooksObjectDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "QuickBooksObject";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
}

/**
 * @interface
 * An interface representing PrestoObjectDataset.
 * Presto server dataset.
 *
 */
export interface PrestoObjectDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "PrestoObject";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
}

/**
 * @interface
 * An interface representing PhoenixObjectDataset.
 * Phoenix server dataset.
 *
 */
export interface PhoenixObjectDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "PhoenixObject";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
}

/**
 * @interface
 * An interface representing PaypalObjectDataset.
 * Paypal Serivce dataset.
 *
 */
export interface PaypalObjectDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "PaypalObject";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
}

/**
 * @interface
 * An interface representing MarketoObjectDataset.
 * Marketo server dataset.
 *
 */
export interface MarketoObjectDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "MarketoObject";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
}

/**
 * @interface
 * An interface representing MariaDBTableDataset.
 * MariaDB server dataset.
 *
 */
export interface MariaDBTableDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "MariaDBTable";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
}

/**
 * @interface
 * An interface representing MagentoObjectDataset.
 * Magento server dataset.
 *
 */
export interface MagentoObjectDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "MagentoObject";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
}

/**
 * @interface
 * An interface representing JiraObjectDataset.
 * Jira Serivce dataset.
 *
 */
export interface JiraObjectDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "JiraObject";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
}

/**
 * @interface
 * An interface representing ImpalaObjectDataset.
 * Impala server dataset.
 *
 */
export interface ImpalaObjectDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "ImpalaObject";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
}

/**
 * @interface
 * An interface representing HubspotObjectDataset.
 * Hubspot Serivce dataset.
 *
 */
export interface HubspotObjectDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "HubspotObject";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
}

/**
 * @interface
 * An interface representing HiveObjectDataset.
 * Hive Server dataset.
 *
 */
export interface HiveObjectDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "HiveObject";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
}

/**
 * @interface
 * An interface representing HBaseObjectDataset.
 * HBase server dataset.
 *
 */
export interface HBaseObjectDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "HBaseObject";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
}

/**
 * @interface
 * An interface representing GreenplumTableDataset.
 * Greenplum Database dataset.
 *
 */
export interface GreenplumTableDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "GreenplumTable";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
}

/**
 * @interface
 * An interface representing GoogleBigQueryObjectDataset.
 * Google BigQuery service dataset.
 *
 */
export interface GoogleBigQueryObjectDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "GoogleBigQueryObject";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
}

/**
 * @interface
 * An interface representing EloquaObjectDataset.
 * Eloqua server dataset.
 *
 */
export interface EloquaObjectDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "EloquaObject";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
}

/**
 * @interface
 * An interface representing DrillTableDataset.
 * Drill server dataset.
 *
 */
export interface DrillTableDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "DrillTable";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
}

/**
 * @interface
 * An interface representing CouchbaseTableDataset.
 * Couchbase server dataset.
 *
 */
export interface CouchbaseTableDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "CouchbaseTable";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
}

/**
 * @interface
 * An interface representing ConcurObjectDataset.
 * Concur Serivce dataset.
 *
 */
export interface ConcurObjectDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "ConcurObject";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
}

/**
 * @interface
 * An interface representing AzurePostgreSqlTableDataset.
 * Azure PostgreSQL dataset.
 *
 */
export interface AzurePostgreSqlTableDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AzurePostgreSqlTable";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
}

/**
 * @interface
 * An interface representing AmazonMWSObjectDataset.
 * Amazon Marketplace Web Service dataset.
 *
 */
export interface AmazonMWSObjectDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AmazonMWSObject";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
}

/**
 * Contains the possible cases for DatasetCompression.
 */
export type DatasetCompressionUnion = DatasetCompression | DatasetZipDeflateCompression | DatasetDeflateCompression | DatasetGZipCompression | DatasetBZip2Compression;

/**
 * @interface
 * An interface representing DatasetCompression.
 * The compression method used on a dataset.
 *
 */
export interface DatasetCompression {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "DatasetCompression";
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * @interface
 * An interface representing DatasetZipDeflateCompression.
 * The ZipDeflate compression method used on a dataset.
 *
 */
export interface DatasetZipDeflateCompression {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "ZipDeflate";
  /**
   * @member {DatasetCompressionLevel} [level] The ZipDeflate compression
   * level. Possible values include: 'Optimal', 'Fastest'
   */
  level?: DatasetCompressionLevel;
}

/**
 * @interface
 * An interface representing DatasetDeflateCompression.
 * The Deflate compression method used on a dataset.
 *
 */
export interface DatasetDeflateCompression {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Deflate";
  /**
   * @member {DatasetCompressionLevel} [level] The Deflate compression level.
   * Possible values include: 'Optimal', 'Fastest'
   */
  level?: DatasetCompressionLevel;
}

/**
 * @interface
 * An interface representing DatasetGZipCompression.
 * The GZip compression method used on a dataset.
 *
 */
export interface DatasetGZipCompression {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "GZip";
  /**
   * @member {DatasetCompressionLevel} [level] The GZip compression level.
   * Possible values include: 'Optimal', 'Fastest'
   */
  level?: DatasetCompressionLevel;
}

/**
 * @interface
 * An interface representing DatasetBZip2Compression.
 * The BZip2 compression method used on a dataset.
 *
 */
export interface DatasetBZip2Compression {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "BZip2";
}

/**
 * Contains the possible cases for DatasetStorageFormat.
 */
export type DatasetStorageFormatUnion = DatasetStorageFormat | ParquetFormat | OrcFormat | AvroFormat | JsonFormat | TextFormat;

/**
 * @interface
 * An interface representing DatasetStorageFormat.
 * The format definition of a storage.
 *
 */
export interface DatasetStorageFormat {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "DatasetStorageFormat";
  /**
   * @member {any} [serializer] Serializer. Type: string (or Expression with
   * resultType string).
   */
  serializer?: any;
  /**
   * @member {any} [deserializer] Deserializer. Type: string (or Expression
   * with resultType string).
   */
  deserializer?: any;
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * @interface
 * An interface representing ParquetFormat.
 * The data stored in Parquet format.
 *
 */
export interface ParquetFormat {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "ParquetFormat";
  /**
   * @member {any} [serializer] Serializer. Type: string (or Expression with
   * resultType string).
   */
  serializer?: any;
  /**
   * @member {any} [deserializer] Deserializer. Type: string (or Expression
   * with resultType string).
   */
  deserializer?: any;
}

/**
 * @interface
 * An interface representing OrcFormat.
 * The data stored in Optimized Row Columnar (ORC) format.
 *
 */
export interface OrcFormat {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "OrcFormat";
  /**
   * @member {any} [serializer] Serializer. Type: string (or Expression with
   * resultType string).
   */
  serializer?: any;
  /**
   * @member {any} [deserializer] Deserializer. Type: string (or Expression
   * with resultType string).
   */
  deserializer?: any;
}

/**
 * @interface
 * An interface representing AvroFormat.
 * The data stored in Avro format.
 *
 */
export interface AvroFormat {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AvroFormat";
  /**
   * @member {any} [serializer] Serializer. Type: string (or Expression with
   * resultType string).
   */
  serializer?: any;
  /**
   * @member {any} [deserializer] Deserializer. Type: string (or Expression
   * with resultType string).
   */
  deserializer?: any;
}

/**
 * @interface
 * An interface representing JsonFormat.
 * The data stored in JSON format.
 *
 */
export interface JsonFormat {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "JsonFormat";
  /**
   * @member {any} [serializer] Serializer. Type: string (or Expression with
   * resultType string).
   */
  serializer?: any;
  /**
   * @member {any} [deserializer] Deserializer. Type: string (or Expression
   * with resultType string).
   */
  deserializer?: any;
  /**
   * @member {JsonFormatFilePattern} [filePattern] File pattern of JSON. To be
   * more specific, the way of separating a collection of JSON objects. The
   * default value is 'setOfObjects'. It is case-sensitive. Possible values
   * include: 'setOfObjects', 'arrayOfObjects'
   */
  filePattern?: JsonFormatFilePattern;
  /**
   * @member {any} [nestingSeparator] The character used to separate nesting
   * levels. Default value is '.' (dot). Type: string (or Expression with
   * resultType string).
   */
  nestingSeparator?: any;
  /**
   * @member {any} [encodingName] The code page name of the preferred encoding.
   * If not provided, the default value is 'utf-8', unless the byte order mark
   * (BOM) denotes another Unicode encoding. The full list of supported values
   * can be found in the 'Name' column of the table of encodings in the
   * following reference: https://go.microsoft.com/fwlink/?linkid=861078. Type:
   * string (or Expression with resultType string).
   */
  encodingName?: any;
  /**
   * @member {any} [jsonNodeReference] The JSONPath of the JSON array element
   * to be flattened. Example: "$.ArrayPath". Type: string (or Expression with
   * resultType string).
   */
  jsonNodeReference?: any;
  /**
   * @member {any} [jsonPathDefinition] The JSONPath definition for each column
   * mapping with a customized column name to extract data from JSON file. For
   * fields under root object, start with "$"; for fields inside the array
   * chosen by jsonNodeReference property, start from the array element.
   * Example: {"Column1": "$.Column1Path", "Column2": "Column2PathInArray"}.
   * Type: object (or Expression with resultType object).
   */
  jsonPathDefinition?: any;
}

/**
 * @interface
 * An interface representing TextFormat.
 * The data stored in text format.
 *
 */
export interface TextFormat {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "TextFormat";
  /**
   * @member {any} [serializer] Serializer. Type: string (or Expression with
   * resultType string).
   */
  serializer?: any;
  /**
   * @member {any} [deserializer] Deserializer. Type: string (or Expression
   * with resultType string).
   */
  deserializer?: any;
  /**
   * @member {any} [columnDelimiter] The column delimiter. Type: string (or
   * Expression with resultType string).
   */
  columnDelimiter?: any;
  /**
   * @member {any} [rowDelimiter] The row delimiter. Type: string (or
   * Expression with resultType string).
   */
  rowDelimiter?: any;
  /**
   * @member {any} [escapeChar] The escape character. Type: string (or
   * Expression with resultType string).
   */
  escapeChar?: any;
  /**
   * @member {any} [quoteChar] The quote character. Type: string (or Expression
   * with resultType string).
   */
  quoteChar?: any;
  /**
   * @member {any} [nullValue] The null value string. Type: string (or
   * Expression with resultType string).
   */
  nullValue?: any;
  /**
   * @member {any} [encodingName] The code page name of the preferred encoding.
   * If miss, the default value is ΓÇ£utf-8ΓÇ¥, unless BOM denotes another
   * Unicode encoding. Refer to the ΓÇ£NameΓÇ¥ column of the table in the
   * following link to set supported values:
   * https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string
   * (or Expression with resultType string).
   */
  encodingName?: any;
  /**
   * @member {any} [treatEmptyAsNull] Treat empty column values in the text
   * file as null. The default value is true. Type: boolean (or Expression with
   * resultType boolean).
   */
  treatEmptyAsNull?: any;
  /**
   * @member {any} [skipLineCount] The number of lines/rows to be skipped when
   * parsing text files. The default value is 0. Type: integer (or Expression
   * with resultType integer).
   */
  skipLineCount?: any;
  /**
   * @member {any} [firstRowAsHeader] When used as input, treat the first row
   * of data as headers. When used as output,write the headers into the output
   * as the first row of data. The default value is false. Type: boolean (or
   * Expression with resultType boolean).
   */
  firstRowAsHeader?: any;
}

/**
 * @interface
 * An interface representing HttpDatasetTypeProperties.
 * Properties specific to this dataset type.
 *
 */
export interface HttpDatasetTypeProperties {
  /**
   * @member {any} [relativeUrl] The relative URL based on the URL in the
   * HttpLinkedService refers to an HTTP file Type: string (or Expression with
   * resultType string).
   */
  relativeUrl?: any;
  /**
   * @member {any} [requestMethod] The HTTP method for the HTTP request. Type:
   * string (or Expression with resultType string).
   */
  requestMethod?: any;
  /**
   * @member {any} [requestBody] The body for the HTTP request. Type: string
   * (or Expression with resultType string).
   */
  requestBody?: any;
  /**
   * @member {any} [additionalHeaders] The headers for the HTTP Request. e.g.
   * request-header-name-1:request-header-value-1
   * ...
   * request-header-name-n:request-header-value-n Type: string (or Expression
   * with resultType string).
   */
  additionalHeaders?: any;
  /**
   * @member {DatasetStorageFormatUnion} [format] The format of files.
   */
  format?: DatasetStorageFormatUnion;
  /**
   * @member {DatasetCompressionUnion} [compression] The data compression
   * method used on files.
   */
  compression?: DatasetCompressionUnion;
}

/**
 * @interface
 * An interface representing HttpDataset.
 * A file in an HTTP web server.
 *
 */
export interface HttpDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "HttpFile";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
  /**
   * @member {any} [relativeUrl] The relative URL based on the URL in the
   * HttpLinkedService refers to an HTTP file Type: string (or Expression with
   * resultType string).
   */
  relativeUrl?: any;
  /**
   * @member {any} [requestMethod] The HTTP method for the HTTP request. Type:
   * string (or Expression with resultType string).
   */
  requestMethod?: any;
  /**
   * @member {any} [requestBody] The body for the HTTP request. Type: string
   * (or Expression with resultType string).
   */
  requestBody?: any;
  /**
   * @member {any} [additionalHeaders] The headers for the HTTP Request. e.g.
   * request-header-name-1:request-header-value-1
   * ...
   * request-header-name-n:request-header-value-n Type: string (or Expression
   * with resultType string).
   */
  additionalHeaders?: any;
  /**
   * @member {DatasetStorageFormatUnion} [format] The format of files.
   */
  format?: DatasetStorageFormatUnion;
  /**
   * @member {DatasetCompressionUnion} [compression] The data compression
   * method used on files.
   */
  compression?: DatasetCompressionUnion;
}

/**
 * @interface
 * An interface representing AzureSearchIndexDatasetTypeProperties.
 * Properties specific to this dataset type.
 *
 */
export interface AzureSearchIndexDatasetTypeProperties {
  /**
   * @member {any} indexName The name of the Azure Search Index. Type: string
   * (or Expression with resultType string).
   */
  indexName: any;
}

/**
 * @interface
 * An interface representing AzureSearchIndexDataset.
 * The Azure Search Index.
 *
 */
export interface AzureSearchIndexDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AzureSearchIndex";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
  /**
   * @member {any} indexName The name of the Azure Search Index. Type: string
   * (or Expression with resultType string).
   */
  indexName: any;
}

/**
 * @interface
 * An interface representing WebTableDatasetTypeProperties.
 * Web table dataset properties.
 *
 */
export interface WebTableDatasetTypeProperties {
  /**
   * @member {any} index The zero-based index of the table in the web page.
   * Type: integer (or Expression with resultType integer), minimum: 0.
   */
  index: any;
  /**
   * @member {any} [path] The relative URL to the web page from the linked
   * service URL. Type: string (or Expression with resultType string).
   */
  path?: any;
}

/**
 * @interface
 * An interface representing WebTableDataset.
 * The dataset points to a HTML table in the web page.
 *
 */
export interface WebTableDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "WebTable";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
  /**
   * @member {any} index The zero-based index of the table in the web page.
   * Type: integer (or Expression with resultType integer), minimum: 0.
   */
  index: any;
  /**
   * @member {any} [path] The relative URL to the web page from the linked
   * service URL. Type: string (or Expression with resultType string).
   */
  path?: any;
}

/**
 * @interface
 * An interface representing SqlServerTableDatasetTypeProperties.
 * On-premises SQL Server dataset properties.
 *
 */
export interface SqlServerTableDatasetTypeProperties {
  /**
   * @member {any} tableName The table name of the SQL Server dataset. Type:
   * string (or Expression with resultType string).
   */
  tableName: any;
}

/**
 * @interface
 * An interface representing SqlServerTableDataset.
 * The on-premises SQL Server dataset.
 *
 */
export interface SqlServerTableDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "SqlServerTable";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
  /**
   * @member {any} tableName The table name of the SQL Server dataset. Type:
   * string (or Expression with resultType string).
   */
  tableName: any;
}

/**
 * @interface
 * An interface representing SapEccResourceDatasetTypeProperties.
 * Sap ECC OData resource dataset properties.
 *
 */
export interface SapEccResourceDatasetTypeProperties {
  /**
   * @member {string} path The path of the SAP ECC OData entity. Type: string
   * (or Expression with resultType string).
   */
  path: string;
}

/**
 * @interface
 * An interface representing SapEccResourceDataset.
 * The path of the SAP ECC OData entity.
 *
 */
export interface SapEccResourceDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "SapEccResource";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
  /**
   * @member {string} path The path of the SAP ECC OData entity. Type: string
   * (or Expression with resultType string).
   */
  path: string;
}

/**
 * @interface
 * An interface representing SapCloudForCustomerResourceDatasetTypeProperties.
 * Sap Cloud For Customer OData resource dataset properties.
 *
 */
export interface SapCloudForCustomerResourceDatasetTypeProperties {
  /**
   * @member {any} path The path of the SAP Cloud for Customer OData entity.
   * Type: string (or Expression with resultType string).
   */
  path: any;
}

/**
 * @interface
 * An interface representing SapCloudForCustomerResourceDataset.
 * The path of the SAP Cloud for Customer OData entity.
 *
 */
export interface SapCloudForCustomerResourceDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "SapCloudForCustomerResource";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
  /**
   * @member {any} path The path of the SAP Cloud for Customer OData entity.
   * Type: string (or Expression with resultType string).
   */
  path: any;
}

/**
 * @interface
 * An interface representing SalesforceObjectDatasetTypeProperties.
 * Salesforce object dataset properties.
 *
 */
export interface SalesforceObjectDatasetTypeProperties {
  /**
   * @member {any} [objectApiName] The Salesforce object API name. Type: string
   * (or Expression with resultType string).
   */
  objectApiName?: any;
}

/**
 * @interface
 * An interface representing SalesforceObjectDataset.
 * The Salesforce object dataset.
 *
 */
export interface SalesforceObjectDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "SalesforceObject";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
  /**
   * @member {any} [objectApiName] The Salesforce object API name. Type: string
   * (or Expression with resultType string).
   */
  objectApiName?: any;
}

/**
 * @interface
 * An interface representing RelationalTableDatasetTypeProperties.
 * Relational table dataset properties.
 *
 */
export interface RelationalTableDatasetTypeProperties {
  /**
   * @member {any} [tableName] The relational table name. Type: string (or
   * Expression with resultType string).
   */
  tableName?: any;
}

/**
 * @interface
 * An interface representing RelationalTableDataset.
 * The relational table dataset.
 *
 */
export interface RelationalTableDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "RelationalTable";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
  /**
   * @member {any} [tableName] The relational table name. Type: string (or
   * Expression with resultType string).
   */
  tableName?: any;
}

/**
 * @interface
 * An interface representing AzureMySqlTableDatasetTypeProperties.
 * Azure MySQL database dataset properties.
 *
 */
export interface AzureMySqlTableDatasetTypeProperties {
  /**
   * @member {any} [tableName] The Azure MySQL database table name. Type:
   * string (or Expression with resultType string).
   */
  tableName?: any;
}

/**
 * @interface
 * An interface representing AzureMySqlTableDataset.
 * The Azure MySQL database dataset.
 *
 */
export interface AzureMySqlTableDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AzureMySqlTable";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
  /**
   * @member {any} [tableName] The Azure MySQL database table name. Type:
   * string (or Expression with resultType string).
   */
  tableName?: any;
}

/**
 * @interface
 * An interface representing OracleTableDatasetTypeProperties.
 * On-premises Oracle dataset properties.
 *
 */
export interface OracleTableDatasetTypeProperties {
  /**
   * @member {any} tableName The table name of the on-premises Oracle database.
   * Type: string (or Expression with resultType string).
   */
  tableName: any;
}

/**
 * @interface
 * An interface representing OracleTableDataset.
 * The on-premises Oracle database dataset.
 *
 */
export interface OracleTableDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "OracleTable";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
  /**
   * @member {any} tableName The table name of the on-premises Oracle database.
   * Type: string (or Expression with resultType string).
   */
  tableName: any;
}

/**
 * @interface
 * An interface representing ODataResourceDatasetTypeProperties.
 * OData dataset properties.
 *
 */
export interface ODataResourceDatasetTypeProperties {
  /**
   * @member {any} [path] The OData resource path. Type: string (or Expression
   * with resultType string).
   */
  path?: any;
}

/**
 * @interface
 * An interface representing ODataResourceDataset.
 * The Open Data Protocol (OData) resource dataset.
 *
 */
export interface ODataResourceDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "ODataResource";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
  /**
   * @member {any} [path] The OData resource path. Type: string (or Expression
   * with resultType string).
   */
  path?: any;
}

/**
 * @interface
 * An interface representing MongoDbCollectionDatasetTypeProperties.
 * MongoDB database dataset properties.
 *
 */
export interface MongoDbCollectionDatasetTypeProperties {
  /**
   * @member {any} collectionName The table name of the MongoDB database. Type:
   * string (or Expression with resultType string).
   */
  collectionName: any;
}

/**
 * @interface
 * An interface representing MongoDbCollectionDataset.
 * The MongoDB database dataset.
 *
 */
export interface MongoDbCollectionDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "MongoDbCollection";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
  /**
   * @member {any} collectionName The table name of the MongoDB database. Type:
   * string (or Expression with resultType string).
   */
  collectionName: any;
}

/**
 * @interface
 * An interface representing FileShareDatasetTypeProperties.
 * On-premises file system dataset properties.
 *
 */
export interface FileShareDatasetTypeProperties {
  /**
   * @member {any} [folderPath] The path of the on-premises file system. Type:
   * string (or Expression with resultType string).
   */
  folderPath?: any;
  /**
   * @member {any} [fileName] The name of the on-premises file system. Type:
   * string (or Expression with resultType string).
   */
  fileName?: any;
  /**
   * @member {DatasetStorageFormatUnion} [format] The format of the files.
   */
  format?: DatasetStorageFormatUnion;
  /**
   * @member {any} [fileFilter] Specify a filter to be used to select a subset
   * of files in the folderPath rather than all files. Type: string (or
   * Expression with resultType string).
   */
  fileFilter?: any;
  /**
   * @member {DatasetCompressionUnion} [compression] The data compression
   * method used for the file system.
   */
  compression?: DatasetCompressionUnion;
}

/**
 * @interface
 * An interface representing FileShareDataset.
 * An on-premises file system dataset.
 *
 */
export interface FileShareDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "FileShare";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
  /**
   * @member {any} [folderPath] The path of the on-premises file system. Type:
   * string (or Expression with resultType string).
   */
  folderPath?: any;
  /**
   * @member {any} [fileName] The name of the on-premises file system. Type:
   * string (or Expression with resultType string).
   */
  fileName?: any;
  /**
   * @member {DatasetStorageFormatUnion} [format] The format of the files.
   */
  format?: DatasetStorageFormatUnion;
  /**
   * @member {any} [fileFilter] Specify a filter to be used to select a subset
   * of files in the folderPath rather than all files. Type: string (or
   * Expression with resultType string).
   */
  fileFilter?: any;
  /**
   * @member {DatasetCompressionUnion} [compression] The data compression
   * method used for the file system.
   */
  compression?: DatasetCompressionUnion;
}

/**
 * @interface
 * An interface representing AzureDataLakeStoreDatasetTypeProperties.
 * Azure Data Lake Store dataset properties.
 *
 */
export interface AzureDataLakeStoreDatasetTypeProperties {
  /**
   * @member {any} folderPath Path to the folder in the Azure Data Lake Store.
   * Type: string (or Expression with resultType string).
   */
  folderPath: any;
  /**
   * @member {any} [fileName] The name of the file in the Azure Data Lake
   * Store. Type: string (or Expression with resultType string).
   */
  fileName?: any;
  /**
   * @member {DatasetStorageFormatUnion} [format] The format of the Data Lake
   * Store.
   */
  format?: DatasetStorageFormatUnion;
  /**
   * @member {DatasetCompressionUnion} [compression] The data compression
   * method used for the item(s) in the Azure Data Lake Store.
   */
  compression?: DatasetCompressionUnion;
}

/**
 * @interface
 * An interface representing AzureDataLakeStoreDataset.
 * Azure Data Lake Store dataset.
 *
 */
export interface AzureDataLakeStoreDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AzureDataLakeStoreFile";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
  /**
   * @member {any} folderPath Path to the folder in the Azure Data Lake Store.
   * Type: string (or Expression with resultType string).
   */
  folderPath: any;
  /**
   * @member {any} [fileName] The name of the file in the Azure Data Lake
   * Store. Type: string (or Expression with resultType string).
   */
  fileName?: any;
  /**
   * @member {DatasetStorageFormatUnion} [format] The format of the Data Lake
   * Store.
   */
  format?: DatasetStorageFormatUnion;
  /**
   * @member {DatasetCompressionUnion} [compression] The data compression
   * method used for the item(s) in the Azure Data Lake Store.
   */
  compression?: DatasetCompressionUnion;
}

/**
 * @interface
 * An interface representing DynamicsEntityDatasetTypeProperties.
 * Dynamics entity dataset properties.
 *
 */
export interface DynamicsEntityDatasetTypeProperties {
  /**
   * @member {any} [entityName] The logical name of the entity. Type: string
   * (or Expression with resultType string).
   */
  entityName?: any;
}

/**
 * @interface
 * An interface representing DynamicsEntityDataset.
 * The Dynamics entity dataset.
 *
 */
export interface DynamicsEntityDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "DynamicsEntity";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
  /**
   * @member {any} [entityName] The logical name of the entity. Type: string
   * (or Expression with resultType string).
   */
  entityName?: any;
}

/**
 * @interface
 * An interface representing DocumentDbCollectionDatasetTypeProperties.
 * DocumentDB Collection dataset properties.
 *
 */
export interface DocumentDbCollectionDatasetTypeProperties {
  /**
   * @member {any} collectionName Document Database collection name. Type:
   * string (or Expression with resultType string).
   */
  collectionName: any;
}

/**
 * @interface
 * An interface representing DocumentDbCollectionDataset.
 * Microsoft Azure Document Database Collection dataset.
 *
 */
export interface DocumentDbCollectionDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "DocumentDbCollection";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
  /**
   * @member {any} collectionName Document Database collection name. Type:
   * string (or Expression with resultType string).
   */
  collectionName: any;
}

/**
 * @interface
 * An interface representing CustomDataset.
 * The custom dataset.
 *
 */
export interface CustomDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "CustomDataset";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
  /**
   * @member {any} typeProperties Custom dataset properties.
   */
  typeProperties: any;
}

/**
 * @interface
 * An interface representing CassandraTableDatasetTypeProperties.
 * Cassandra dataset properties.
 *
 */
export interface CassandraTableDatasetTypeProperties {
  /**
   * @member {any} [tableName] The table name of the Cassandra database. Type:
   * string (or Expression with resultType string).
   */
  tableName?: any;
  /**
   * @member {any} [keyspace] The keyspace of the Cassandra database. Type:
   * string (or Expression with resultType string).
   */
  keyspace?: any;
}

/**
 * @interface
 * An interface representing CassandraTableDataset.
 * The Cassandra database dataset.
 *
 */
export interface CassandraTableDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "CassandraTable";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
  /**
   * @member {any} [tableName] The table name of the Cassandra database. Type:
   * string (or Expression with resultType string).
   */
  tableName?: any;
  /**
   * @member {any} [keyspace] The keyspace of the Cassandra database. Type:
   * string (or Expression with resultType string).
   */
  keyspace?: any;
}

/**
 * @interface
 * An interface representing AzureSqlDWTableDatasetTypeProperties.
 * Azure SQL Data Warehouse dataset properties.
 *
 */
export interface AzureSqlDWTableDatasetTypeProperties {
  /**
   * @member {any} tableName The table name of the Azure SQL Data Warehouse.
   * Type: string (or Expression with resultType string).
   */
  tableName: any;
}

/**
 * @interface
 * An interface representing AzureSqlDWTableDataset.
 * The Azure SQL Data Warehouse dataset.
 *
 */
export interface AzureSqlDWTableDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AzureSqlDWTable";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
  /**
   * @member {any} tableName The table name of the Azure SQL Data Warehouse.
   * Type: string (or Expression with resultType string).
   */
  tableName: any;
}

/**
 * @interface
 * An interface representing AzureSqlTableDatasetTypeProperties.
 * Azure SQL dataset properties.
 *
 */
export interface AzureSqlTableDatasetTypeProperties {
  /**
   * @member {any} tableName The table name of the Azure SQL database. Type:
   * string (or Expression with resultType string).
   */
  tableName: any;
}

/**
 * @interface
 * An interface representing AzureSqlTableDataset.
 * The Azure SQL Server database dataset.
 *
 */
export interface AzureSqlTableDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AzureSqlTable";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
  /**
   * @member {any} tableName The table name of the Azure SQL database. Type:
   * string (or Expression with resultType string).
   */
  tableName: any;
}

/**
 * @interface
 * An interface representing AzureTableDatasetTypeProperties.
 * Azure Table dataset properties.
 *
 */
export interface AzureTableDatasetTypeProperties {
  /**
   * @member {any} tableName The table name of the Azure Table storage. Type:
   * string (or Expression with resultType string).
   */
  tableName: any;
}

/**
 * @interface
 * An interface representing AzureTableDataset.
 * The Azure Table storage dataset.
 *
 */
export interface AzureTableDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AzureTable";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
  /**
   * @member {any} tableName The table name of the Azure Table storage. Type:
   * string (or Expression with resultType string).
   */
  tableName: any;
}

/**
 * @interface
 * An interface representing AzureBlobDatasetTypeProperties.
 * Azure Blob dataset properties.
 *
 */
export interface AzureBlobDatasetTypeProperties {
  /**
   * @member {any} [folderPath] The path of the Azure Blob storage. Type:
   * string (or Expression with resultType string).
   */
  folderPath?: any;
  /**
   * @member {any} [tableRootLocation] The root of blob path. Type: string (or
   * Expression with resultType string).
   */
  tableRootLocation?: any;
  /**
   * @member {any} [fileName] The name of the Azure Blob. Type: string (or
   * Expression with resultType string).
   */
  fileName?: any;
  /**
   * @member {DatasetStorageFormatUnion} [format] The format of the Azure Blob
   * storage.
   */
  format?: DatasetStorageFormatUnion;
  /**
   * @member {DatasetCompressionUnion} [compression] The data compression
   * method used for the blob storage.
   */
  compression?: DatasetCompressionUnion;
}

/**
 * @interface
 * An interface representing AzureBlobDataset.
 * The Azure Blob storage.
 *
 */
export interface AzureBlobDataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AzureBlob";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
  /**
   * @member {any} [folderPath] The path of the Azure Blob storage. Type:
   * string (or Expression with resultType string).
   */
  folderPath?: any;
  /**
   * @member {any} [tableRootLocation] The root of blob path. Type: string (or
   * Expression with resultType string).
   */
  tableRootLocation?: any;
  /**
   * @member {any} [fileName] The name of the Azure Blob. Type: string (or
   * Expression with resultType string).
   */
  fileName?: any;
  /**
   * @member {DatasetStorageFormatUnion} [format] The format of the Azure Blob
   * storage.
   */
  format?: DatasetStorageFormatUnion;
  /**
   * @member {DatasetCompressionUnion} [compression] The data compression
   * method used for the blob storage.
   */
  compression?: DatasetCompressionUnion;
}

/**
 * @interface
 * An interface representing AmazonS3DatasetTypeProperties.
 * Amazon S3 dataset properties.
 *
 */
export interface AmazonS3DatasetTypeProperties {
  /**
   * @member {any} bucketName The name of the Amazon S3 bucket. Type: string
   * (or Expression with resultType string).
   */
  bucketName: any;
  /**
   * @member {any} [key] The key of the Amazon S3 object. Type: string (or
   * Expression with resultType string).
   */
  key?: any;
  /**
   * @member {any} [prefix] The prefix filter for the S3 object name. Type:
   * string (or Expression with resultType string).
   */
  prefix?: any;
  /**
   * @member {any} [version] The version for the S3 object. Type: string (or
   * Expression with resultType string).
   */
  version?: any;
  /**
   * @member {DatasetStorageFormatUnion} [format] The format of files.
   */
  format?: DatasetStorageFormatUnion;
  /**
   * @member {DatasetCompressionUnion} [compression] The data compression
   * method used for the Amazon S3 object.
   */
  compression?: DatasetCompressionUnion;
}

/**
 * @interface
 * An interface representing AmazonS3Dataset.
 * A single Amazon Simple Storage Service (S3) object or a set of S3 objects.
 *
 */
export interface AmazonS3Dataset {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AmazonS3Object";
  /**
   * @member {string} [description] Dataset description.
   */
  description?: string;
  /**
   * @member {any} [structure] Columns that define the structure of the
   * dataset. Type: array (or Expression with resultType array), itemType:
   * DatasetDataElement.
   */
  structure?: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: ParameterSpecification }} [parameters]
   * Parameters for dataset.
   */
  parameters?: { [propertyName: string]: ParameterSpecification };
  /**
   * @member {any[]} [annotations] List of tags that can be used for describing
   * the Dataset.
   */
  annotations?: any[];
  /**
   * @member {DatasetFolder} [folder] The folder that this Dataset is in. If
   * not specified, Dataset will appear at the root level.
   */
  folder?: DatasetFolder;
  /**
   * @member {any} bucketName The name of the Amazon S3 bucket. Type: string
   * (or Expression with resultType string).
   */
  bucketName: any;
  /**
   * @member {any} [key] The key of the Amazon S3 object. Type: string (or
   * Expression with resultType string).
   */
  key?: any;
  /**
   * @member {any} [prefix] The prefix filter for the S3 object name. Type:
   * string (or Expression with resultType string).
   */
  prefix?: any;
  /**
   * @member {any} [version] The version for the S3 object. Type: string (or
   * Expression with resultType string).
   */
  version?: any;
  /**
   * @member {DatasetStorageFormatUnion} [format] The format of files.
   */
  format?: DatasetStorageFormatUnion;
  /**
   * @member {DatasetCompressionUnion} [compression] The data compression
   * method used for the Amazon S3 object.
   */
  compression?: DatasetCompressionUnion;
}

/**
 * @interface
 * An interface representing ActivityPolicy.
 * Execution policy for an activity.
 *
 */
export interface ActivityPolicy {
  /**
   * @member {any} [timeout] Specifies the timeout for the activity to run. The
   * default timeout is 7 days. Type: string (or Expression with resultType
   * string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  timeout?: any;
  /**
   * @member {any} [retry] Maximum ordinary retry attempts. Default is 0. Type:
   * integer (or Expression with resultType integer), minimum: 0.
   */
  retry?: any;
  /**
   * @member {number} [retryIntervalInSeconds] Interval between each retry
   * attempt (in seconds). The default is 30 sec.
   */
  retryIntervalInSeconds?: number;
  /**
   * @member {boolean} [secureInput] When set to true, Input from activity is
   * considered as secure and will not be logged to monitoring.
   */
  secureInput?: boolean;
  /**
   * @member {boolean} [secureOutput] When set to true, Output from activity is
   * considered as secure and will not be logged to monitoring.
   */
  secureOutput?: boolean;
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * @interface
 * An interface representing DatabricksSparkPythonActivityTypeProperties.
 * Databricks SparkPython activity properties.
 *
 */
export interface DatabricksSparkPythonActivityTypeProperties {
  /**
   * @member {any} pythonFile The URI of the Python file to be executed. DBFS
   * paths are supported. Type: string (or Expression with resultType string).
   */
  pythonFile: any;
  /**
   * @member {any[]} [parameters] Command line parameters that will be passed
   * to the Python file.
   */
  parameters?: any[];
  /**
   * @member {{ [propertyName: string]: any }[]} [libraries] A list of
   * libraries to be installed on the cluster that will execute the job.
   */
  libraries?: { [propertyName: string]: any }[];
}

/**
 * Contains the possible cases for ExecutionActivity.
 */
export type ExecutionActivityUnion = ExecutionActivity | DatabricksSparkPythonActivity | DatabricksSparkJarActivity | DatabricksNotebookActivity | DataLakeAnalyticsUSQLActivity | AzureMLUpdateResourceActivity | AzureMLBatchExecutionActivity | GetMetadataActivity | WebActivity | LookupActivity | SqlServerStoredProcedureActivity | CustomActivity | ExecuteSSISPackageActivity | HDInsightSparkActivity | HDInsightStreamingActivity | HDInsightMapReduceActivity | HDInsightPigActivity | HDInsightHiveActivity | CopyActivity;

/**
 * @interface
 * An interface representing ExecutionActivity.
 * Base class for all execution activities.
 *
 */
export interface ExecutionActivity {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Execution";
  /**
   * @member {string} name Activity name.
   */
  name: string;
  /**
   * @member {string} [description] Activity description.
   */
  description?: string;
  /**
   * @member {ActivityDependency[]} [dependsOn] Activity depends on condition.
   */
  dependsOn?: ActivityDependency[];
  /**
   * @member {UserProperty[]} [userProperties] Activity user properties.
   */
  userProperties?: UserProperty[];
  /**
   * @member {LinkedServiceReference} [linkedServiceName] Linked service
   * reference.
   */
  linkedServiceName?: LinkedServiceReference;
  /**
   * @member {ActivityPolicy} [policy] Activity policy.
   */
  policy?: ActivityPolicy;
}

/**
 * @interface
 * An interface representing DatabricksSparkPythonActivity.
 * DatabricksSparkPython activity.
 *
 */
export interface DatabricksSparkPythonActivity {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "DatabricksSparkPython";
  /**
   * @member {string} name Activity name.
   */
  name: string;
  /**
   * @member {string} [description] Activity description.
   */
  description?: string;
  /**
   * @member {ActivityDependency[]} [dependsOn] Activity depends on condition.
   */
  dependsOn?: ActivityDependency[];
  /**
   * @member {UserProperty[]} [userProperties] Activity user properties.
   */
  userProperties?: UserProperty[];
  /**
   * @member {LinkedServiceReference} [linkedServiceName] Linked service
   * reference.
   */
  linkedServiceName?: LinkedServiceReference;
  /**
   * @member {ActivityPolicy} [policy] Activity policy.
   */
  policy?: ActivityPolicy;
  /**
   * @member {any} pythonFile The URI of the Python file to be executed. DBFS
   * paths are supported. Type: string (or Expression with resultType string).
   */
  pythonFile: any;
  /**
   * @member {any[]} [parameters] Command line parameters that will be passed
   * to the Python file.
   */
  parameters?: any[];
  /**
   * @member {{ [propertyName: string]: any }[]} [libraries] A list of
   * libraries to be installed on the cluster that will execute the job.
   */
  libraries?: { [propertyName: string]: any }[];
}

/**
 * @interface
 * An interface representing DatabricksSparkJarActivityTypeProperties.
 * Databricks SparkJar activity properties.
 *
 */
export interface DatabricksSparkJarActivityTypeProperties {
  /**
   * @member {any} mainClassName The full name of the class containing the main
   * method to be executed. This class must be contained in a JAR provided as a
   * library. Type: string (or Expression with resultType string).
   */
  mainClassName: any;
  /**
   * @member {any[]} [parameters] Parameters that will be passed to the main
   * method.
   */
  parameters?: any[];
  /**
   * @member {{ [propertyName: string]: any }[]} [libraries] A list of
   * libraries to be installed on the cluster that will execute the job.
   */
  libraries?: { [propertyName: string]: any }[];
}

/**
 * @interface
 * An interface representing DatabricksSparkJarActivity.
 * DatabricksSparkJar activity.
 *
 */
export interface DatabricksSparkJarActivity {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "DatabricksSparkJar";
  /**
   * @member {string} name Activity name.
   */
  name: string;
  /**
   * @member {string} [description] Activity description.
   */
  description?: string;
  /**
   * @member {ActivityDependency[]} [dependsOn] Activity depends on condition.
   */
  dependsOn?: ActivityDependency[];
  /**
   * @member {UserProperty[]} [userProperties] Activity user properties.
   */
  userProperties?: UserProperty[];
  /**
   * @member {LinkedServiceReference} [linkedServiceName] Linked service
   * reference.
   */
  linkedServiceName?: LinkedServiceReference;
  /**
   * @member {ActivityPolicy} [policy] Activity policy.
   */
  policy?: ActivityPolicy;
  /**
   * @member {any} mainClassName The full name of the class containing the main
   * method to be executed. This class must be contained in a JAR provided as a
   * library. Type: string (or Expression with resultType string).
   */
  mainClassName: any;
  /**
   * @member {any[]} [parameters] Parameters that will be passed to the main
   * method.
   */
  parameters?: any[];
  /**
   * @member {{ [propertyName: string]: any }[]} [libraries] A list of
   * libraries to be installed on the cluster that will execute the job.
   */
  libraries?: { [propertyName: string]: any }[];
}

/**
 * @interface
 * An interface representing DatabricksNotebookActivityTypeProperties.
 * Databricks Notebook activity properties.
 *
 */
export interface DatabricksNotebookActivityTypeProperties {
  /**
   * @member {any} notebookPath The absolute path of the notebook to be run in
   * the Databricks Workspace. This path must begin with a slash. Type: string
   * (or Expression with resultType string).
   */
  notebookPath: any;
  /**
   * @member {{ [propertyName: string]: any }} [baseParameters] Base parameters
   * to be used for each run of this job.If the notebook takes a parameter that
   * is not specified, the default value from the notebook will be used.
   */
  baseParameters?: { [propertyName: string]: any };
  /**
   * @member {{ [propertyName: string]: any }[]} [libraries] A list of
   * libraries to be installed on the cluster that will execute the job.
   */
  libraries?: { [propertyName: string]: any }[];
}

/**
 * @interface
 * An interface representing DatabricksNotebookActivity.
 * DatabricksNotebook activity.
 *
 */
export interface DatabricksNotebookActivity {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "DatabricksNotebook";
  /**
   * @member {string} name Activity name.
   */
  name: string;
  /**
   * @member {string} [description] Activity description.
   */
  description?: string;
  /**
   * @member {ActivityDependency[]} [dependsOn] Activity depends on condition.
   */
  dependsOn?: ActivityDependency[];
  /**
   * @member {UserProperty[]} [userProperties] Activity user properties.
   */
  userProperties?: UserProperty[];
  /**
   * @member {LinkedServiceReference} [linkedServiceName] Linked service
   * reference.
   */
  linkedServiceName?: LinkedServiceReference;
  /**
   * @member {ActivityPolicy} [policy] Activity policy.
   */
  policy?: ActivityPolicy;
  /**
   * @member {any} notebookPath The absolute path of the notebook to be run in
   * the Databricks Workspace. This path must begin with a slash. Type: string
   * (or Expression with resultType string).
   */
  notebookPath: any;
  /**
   * @member {{ [propertyName: string]: any }} [baseParameters] Base parameters
   * to be used for each run of this job.If the notebook takes a parameter that
   * is not specified, the default value from the notebook will be used.
   */
  baseParameters?: { [propertyName: string]: any };
  /**
   * @member {{ [propertyName: string]: any }[]} [libraries] A list of
   * libraries to be installed on the cluster that will execute the job.
   */
  libraries?: { [propertyName: string]: any }[];
}

/**
 * @interface
 * An interface representing DataLakeAnalyticsUSQLActivityTypeProperties.
 * DataLakeAnalyticsU-SQL activity properties.
 *
 */
export interface DataLakeAnalyticsUSQLActivityTypeProperties {
  /**
   * @member {any} scriptPath Case-sensitive path to folder that contains the
   * U-SQL script. Type: string (or Expression with resultType string).
   */
  scriptPath: any;
  /**
   * @member {LinkedServiceReference} scriptLinkedService Script linked service
   * reference.
   */
  scriptLinkedService: LinkedServiceReference;
  /**
   * @member {any} [degreeOfParallelism] The maximum number of nodes
   * simultaneously used to run the job. Default value is 1. Type: integer (or
   * Expression with resultType integer), minimum: 1.
   */
  degreeOfParallelism?: any;
  /**
   * @member {any} [priority] Determines which jobs out of all that are queued
   * should be selected to run first. The lower the number, the higher the
   * priority. Default value is 1000. Type: integer (or Expression with
   * resultType integer), minimum: 1.
   */
  priority?: any;
  /**
   * @member {{ [propertyName: string]: any }} [parameters] Parameters for
   * U-SQL job request.
   */
  parameters?: { [propertyName: string]: any };
  /**
   * @member {any} [runtimeVersion] Runtime version of the U-SQL engine to use.
   * Type: string (or Expression with resultType string).
   */
  runtimeVersion?: any;
  /**
   * @member {any} [compilationMode] Compilation mode of U-SQL. Must be one of
   * these values : Semantic, Full and SingleBox. Type: string (or Expression
   * with resultType string).
   */
  compilationMode?: any;
}

/**
 * @interface
 * An interface representing DataLakeAnalyticsUSQLActivity.
 * Data Lake Analytics U-SQL activity.
 *
 */
export interface DataLakeAnalyticsUSQLActivity {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "DataLakeAnalyticsU-SQL";
  /**
   * @member {string} name Activity name.
   */
  name: string;
  /**
   * @member {string} [description] Activity description.
   */
  description?: string;
  /**
   * @member {ActivityDependency[]} [dependsOn] Activity depends on condition.
   */
  dependsOn?: ActivityDependency[];
  /**
   * @member {UserProperty[]} [userProperties] Activity user properties.
   */
  userProperties?: UserProperty[];
  /**
   * @member {LinkedServiceReference} [linkedServiceName] Linked service
   * reference.
   */
  linkedServiceName?: LinkedServiceReference;
  /**
   * @member {ActivityPolicy} [policy] Activity policy.
   */
  policy?: ActivityPolicy;
  /**
   * @member {any} scriptPath Case-sensitive path to folder that contains the
   * U-SQL script. Type: string (or Expression with resultType string).
   */
  scriptPath: any;
  /**
   * @member {LinkedServiceReference} scriptLinkedService Script linked service
   * reference.
   */
  scriptLinkedService: LinkedServiceReference;
  /**
   * @member {any} [degreeOfParallelism] The maximum number of nodes
   * simultaneously used to run the job. Default value is 1. Type: integer (or
   * Expression with resultType integer), minimum: 1.
   */
  degreeOfParallelism?: any;
  /**
   * @member {any} [priority] Determines which jobs out of all that are queued
   * should be selected to run first. The lower the number, the higher the
   * priority. Default value is 1000. Type: integer (or Expression with
   * resultType integer), minimum: 1.
   */
  priority?: any;
  /**
   * @member {{ [propertyName: string]: any }} [parameters] Parameters for
   * U-SQL job request.
   */
  parameters?: { [propertyName: string]: any };
  /**
   * @member {any} [runtimeVersion] Runtime version of the U-SQL engine to use.
   * Type: string (or Expression with resultType string).
   */
  runtimeVersion?: any;
  /**
   * @member {any} [compilationMode] Compilation mode of U-SQL. Must be one of
   * these values : Semantic, Full and SingleBox. Type: string (or Expression
   * with resultType string).
   */
  compilationMode?: any;
}

/**
 * @interface
 * An interface representing AzureMLUpdateResourceActivityTypeProperties.
 * Azure ML Update Resource activity properties.
 *
 */
export interface AzureMLUpdateResourceActivityTypeProperties {
  /**
   * @member {any} trainedModelName Name of the Trained Model module in the Web
   * Service experiment to be updated. Type: string (or Expression with
   * resultType string).
   */
  trainedModelName: any;
  /**
   * @member {LinkedServiceReference} trainedModelLinkedServiceName Name of
   * Azure Storage linked service holding the .ilearner file that will be
   * uploaded by the update operation.
   */
  trainedModelLinkedServiceName: LinkedServiceReference;
  /**
   * @member {any} trainedModelFilePath The relative file path in
   * trainedModelLinkedService to represent the .ilearner file that will be
   * uploaded by the update operation.  Type: string (or Expression with
   * resultType string).
   */
  trainedModelFilePath: any;
}

/**
 * @interface
 * An interface representing AzureMLUpdateResourceActivity.
 * Azure ML Update Resource management activity.
 *
 */
export interface AzureMLUpdateResourceActivity {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AzureMLUpdateResource";
  /**
   * @member {string} name Activity name.
   */
  name: string;
  /**
   * @member {string} [description] Activity description.
   */
  description?: string;
  /**
   * @member {ActivityDependency[]} [dependsOn] Activity depends on condition.
   */
  dependsOn?: ActivityDependency[];
  /**
   * @member {UserProperty[]} [userProperties] Activity user properties.
   */
  userProperties?: UserProperty[];
  /**
   * @member {LinkedServiceReference} [linkedServiceName] Linked service
   * reference.
   */
  linkedServiceName?: LinkedServiceReference;
  /**
   * @member {ActivityPolicy} [policy] Activity policy.
   */
  policy?: ActivityPolicy;
  /**
   * @member {any} trainedModelName Name of the Trained Model module in the Web
   * Service experiment to be updated. Type: string (or Expression with
   * resultType string).
   */
  trainedModelName: any;
  /**
   * @member {LinkedServiceReference} trainedModelLinkedServiceName Name of
   * Azure Storage linked service holding the .ilearner file that will be
   * uploaded by the update operation.
   */
  trainedModelLinkedServiceName: LinkedServiceReference;
  /**
   * @member {any} trainedModelFilePath The relative file path in
   * trainedModelLinkedService to represent the .ilearner file that will be
   * uploaded by the update operation.  Type: string (or Expression with
   * resultType string).
   */
  trainedModelFilePath: any;
}

/**
 * @interface
 * An interface representing AzureMLWebServiceFile.
 * Azure ML WebService Input/Output file
 *
 */
export interface AzureMLWebServiceFile {
  /**
   * @member {any} filePath The relative file path, including container name,
   * in the Azure Blob Storage specified by the LinkedService. Type: string (or
   * Expression with resultType string).
   */
  filePath: any;
  /**
   * @member {LinkedServiceReference} linkedServiceName Reference to an Azure
   * Storage LinkedService, where Azure ML WebService Input/Output file
   * located.
   */
  linkedServiceName: LinkedServiceReference;
}

/**
 * @interface
 * An interface representing AzureMLBatchExecutionActivityTypeProperties.
 * Azure ML Batch Execution activity properties.
 *
 */
export interface AzureMLBatchExecutionActivityTypeProperties {
  /**
   * @member {{ [propertyName: string]: any }} [globalParameters] Key,Value
   * pairs to be passed to the Azure ML Batch Execution Service endpoint. Keys
   * must match the names of web service parameters defined in the published
   * Azure ML web service. Values will be passed in the GlobalParameters
   * property of the Azure ML batch execution request.
   */
  globalParameters?: { [propertyName: string]: any };
  /**
   * @member {{ [propertyName: string]: AzureMLWebServiceFile }}
   * [webServiceOutputs] Key,Value pairs, mapping the names of Azure ML
   * endpoint's Web Service Outputs to AzureMLWebServiceFile objects specifying
   * the output Blob locations. This information will be passed in the
   * WebServiceOutputs property of the Azure ML batch execution request.
   */
  webServiceOutputs?: { [propertyName: string]: AzureMLWebServiceFile };
  /**
   * @member {{ [propertyName: string]: AzureMLWebServiceFile }}
   * [webServiceInputs] Key,Value pairs, mapping the names of Azure ML
   * endpoint's Web Service Inputs to AzureMLWebServiceFile objects specifying
   * the input Blob locations.. This information will be passed in the
   * WebServiceInputs property of the Azure ML batch execution request.
   */
  webServiceInputs?: { [propertyName: string]: AzureMLWebServiceFile };
}

/**
 * @interface
 * An interface representing AzureMLBatchExecutionActivity.
 * Azure ML Batch Execution activity.
 *
 */
export interface AzureMLBatchExecutionActivity {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AzureMLBatchExecution";
  /**
   * @member {string} name Activity name.
   */
  name: string;
  /**
   * @member {string} [description] Activity description.
   */
  description?: string;
  /**
   * @member {ActivityDependency[]} [dependsOn] Activity depends on condition.
   */
  dependsOn?: ActivityDependency[];
  /**
   * @member {UserProperty[]} [userProperties] Activity user properties.
   */
  userProperties?: UserProperty[];
  /**
   * @member {LinkedServiceReference} [linkedServiceName] Linked service
   * reference.
   */
  linkedServiceName?: LinkedServiceReference;
  /**
   * @member {ActivityPolicy} [policy] Activity policy.
   */
  policy?: ActivityPolicy;
  /**
   * @member {{ [propertyName: string]: any }} [globalParameters] Key,Value
   * pairs to be passed to the Azure ML Batch Execution Service endpoint. Keys
   * must match the names of web service parameters defined in the published
   * Azure ML web service. Values will be passed in the GlobalParameters
   * property of the Azure ML batch execution request.
   */
  globalParameters?: { [propertyName: string]: any };
  /**
   * @member {{ [propertyName: string]: AzureMLWebServiceFile }}
   * [webServiceOutputs] Key,Value pairs, mapping the names of Azure ML
   * endpoint's Web Service Outputs to AzureMLWebServiceFile objects specifying
   * the output Blob locations. This information will be passed in the
   * WebServiceOutputs property of the Azure ML batch execution request.
   */
  webServiceOutputs?: { [propertyName: string]: AzureMLWebServiceFile };
  /**
   * @member {{ [propertyName: string]: AzureMLWebServiceFile }}
   * [webServiceInputs] Key,Value pairs, mapping the names of Azure ML
   * endpoint's Web Service Inputs to AzureMLWebServiceFile objects specifying
   * the input Blob locations.. This information will be passed in the
   * WebServiceInputs property of the Azure ML batch execution request.
   */
  webServiceInputs?: { [propertyName: string]: AzureMLWebServiceFile };
}

/**
 * @interface
 * An interface representing GetMetadataActivityTypeProperties.
 * GetMetadata activity properties.
 *
 */
export interface GetMetadataActivityTypeProperties {
  /**
   * @member {DatasetReference} dataset GetMetadata activity dataset reference.
   */
  dataset: DatasetReference;
  /**
   * @member {any[]} [fieldList] Fields of metadata to get from dataset.
   */
  fieldList?: any[];
}

/**
 * @interface
 * An interface representing GetMetadataActivity.
 * Activity to get metadata of dataset
 *
 */
export interface GetMetadataActivity {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "GetMetadata";
  /**
   * @member {string} name Activity name.
   */
  name: string;
  /**
   * @member {string} [description] Activity description.
   */
  description?: string;
  /**
   * @member {ActivityDependency[]} [dependsOn] Activity depends on condition.
   */
  dependsOn?: ActivityDependency[];
  /**
   * @member {UserProperty[]} [userProperties] Activity user properties.
   */
  userProperties?: UserProperty[];
  /**
   * @member {LinkedServiceReference} [linkedServiceName] Linked service
   * reference.
   */
  linkedServiceName?: LinkedServiceReference;
  /**
   * @member {ActivityPolicy} [policy] Activity policy.
   */
  policy?: ActivityPolicy;
  /**
   * @member {DatasetReference} dataset GetMetadata activity dataset reference.
   */
  dataset: DatasetReference;
  /**
   * @member {any[]} [fieldList] Fields of metadata to get from dataset.
   */
  fieldList?: any[];
}

/**
 * @interface
 * An interface representing WebActivityAuthentication.
 * Web activity authentication properties.
 *
 */
export interface WebActivityAuthentication {
  /**
   * @member {string} type Web activity authentication
   * (Basic/ClientCertificate/MSI)
   */
  type: string;
  /**
   * @member {SecureString} [pfx] Base64-encoded contents of a PFX file.
   */
  pfx?: SecureString;
  /**
   * @member {string} [username] Web activity authentication user name for
   * basic authentication.
   */
  username?: string;
  /**
   * @member {SecureString} [password] Password for the PFX file or basic
   * authentication.
   */
  password?: SecureString;
  /**
   * @member {string} [resource] Resource for which Azure Auth token will be
   * requested when using MSI Authentication.
   */
  resource?: string;
}

/**
 * @interface
 * An interface representing WebActivityTypeProperties.
 * Web activity type properties.
 *
 */
export interface WebActivityTypeProperties {
  /**
   * @member {WebActivityMethod} method Rest API method for target endpoint.
   * Possible values include: 'GET', 'POST', 'PUT', 'DELETE'
   */
  method: WebActivityMethod;
  /**
   * @member {any} url Web activity target endpoint and path. Type: string (or
   * Expression with resultType string).
   */
  url: any;
  /**
   * @member {any} [headers] Represents the headers that will be sent to the
   * request. For example, to set the language and type on a request: "headers"
   * : { "Accept-Language": "en-us", "Content-Type": "application/json" }.
   * Type: string (or Expression with resultType string).
   */
  headers?: any;
  /**
   * @member {any} [body] Represents the payload that will be sent to the
   * endpoint. Required for POST/PUT method, not allowed for GET method Type:
   * string (or Expression with resultType string).
   */
  body?: any;
  /**
   * @member {WebActivityAuthentication} [authentication] Authentication method
   * used for calling the endpoint.
   */
  authentication?: WebActivityAuthentication;
  /**
   * @member {DatasetReference[]} [datasets] List of datasets passed to web
   * endpoint.
   */
  datasets?: DatasetReference[];
  /**
   * @member {LinkedServiceReference[]} [linkedServices] List of linked
   * services passed to web endpoint.
   */
  linkedServices?: LinkedServiceReference[];
}

/**
 * @interface
 * An interface representing WebActivity.
 * Web activity.
 *
 */
export interface WebActivity {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "WebActivity";
  /**
   * @member {string} name Activity name.
   */
  name: string;
  /**
   * @member {string} [description] Activity description.
   */
  description?: string;
  /**
   * @member {ActivityDependency[]} [dependsOn] Activity depends on condition.
   */
  dependsOn?: ActivityDependency[];
  /**
   * @member {UserProperty[]} [userProperties] Activity user properties.
   */
  userProperties?: UserProperty[];
  /**
   * @member {LinkedServiceReference} [linkedServiceName] Linked service
   * reference.
   */
  linkedServiceName?: LinkedServiceReference;
  /**
   * @member {ActivityPolicy} [policy] Activity policy.
   */
  policy?: ActivityPolicy;
  /**
   * @member {WebActivityMethod} method Rest API method for target endpoint.
   * Possible values include: 'GET', 'POST', 'PUT', 'DELETE'
   */
  method: WebActivityMethod;
  /**
   * @member {any} url Web activity target endpoint and path. Type: string (or
   * Expression with resultType string).
   */
  url: any;
  /**
   * @member {any} [headers] Represents the headers that will be sent to the
   * request. For example, to set the language and type on a request: "headers"
   * : { "Accept-Language": "en-us", "Content-Type": "application/json" }.
   * Type: string (or Expression with resultType string).
   */
  headers?: any;
  /**
   * @member {any} [body] Represents the payload that will be sent to the
   * endpoint. Required for POST/PUT method, not allowed for GET method Type:
   * string (or Expression with resultType string).
   */
  body?: any;
  /**
   * @member {WebActivityAuthentication} [authentication] Authentication method
   * used for calling the endpoint.
   */
  authentication?: WebActivityAuthentication;
  /**
   * @member {DatasetReference[]} [datasets] List of datasets passed to web
   * endpoint.
   */
  datasets?: DatasetReference[];
  /**
   * @member {LinkedServiceReference[]} [linkedServices] List of linked
   * services passed to web endpoint.
   */
  linkedServices?: LinkedServiceReference[];
}

/**
 * @interface
 * An interface representing RedshiftUnloadSettings.
 * The Amazon S3 settings needed for the interim Amazon S3 when copying from
 * Amazon Redshift with unload. With this, data from Amazon Redshift source
 * will be unloaded into S3 first and then copied into the targeted sink from
 * the interim S3.
 *
 */
export interface RedshiftUnloadSettings {
  /**
   * @member {LinkedServiceReference} s3LinkedServiceName The name of the
   * Amazon S3 linked service which will be used for the unload operation when
   * copying from the Amazon Redshift source.
   */
  s3LinkedServiceName: LinkedServiceReference;
  /**
   * @member {any} bucketName The bucket of the interim Amazon S3 which will be
   * used to store the unloaded data from Amazon Redshift source. The bucket
   * must be in the same region as the Amazon Redshift source. Type: string (or
   * Expression with resultType string).
   */
  bucketName: any;
}

/**
 * Contains the possible cases for CopySource.
 */
export type CopySourceUnion = CopySource | AmazonRedshiftSource | ResponsysSource | SalesforceMarketingCloudSource | VerticaSource | NetezzaSource | ZohoSource | XeroSource | SquareSource | SparkSource | ShopifySource | ServiceNowSource | QuickBooksSource | PrestoSource | PhoenixSource | PaypalSource | MarketoSource | MariaDBSource | MagentoSource | JiraSource | ImpalaSource | HubspotSource | HiveSource | HBaseSource | GreenplumSource | GoogleBigQuerySource | EloquaSource | DrillSource | CouchbaseSource | ConcurSource | AzurePostgreSqlSource | AmazonMWSSource | HttpSource | AzureDataLakeStoreSource | MongoDbSource | CassandraSource | WebSource | OracleSource | AzureMySqlSource | HdfsSource | FileSystemSource | SqlDWSource | SqlSource | SapEccSource | SapCloudForCustomerSource | SalesforceSource | RelationalSource | DynamicsSource | DocumentDbCollectionSource | BlobSource | AzureTableSource;

/**
 * @interface
 * An interface representing CopySource.
 * A copy activity source.
 *
 */
export interface CopySource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "CopySource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * @interface
 * An interface representing AmazonRedshiftSource.
 * A copy activity source for Amazon Redshift Source.
 *
 */
export interface AmazonRedshiftSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AmazonRedshiftSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] Database query. Type: string (or Expression with
   * resultType string).
   */
  query?: any;
  /**
   * @member {RedshiftUnloadSettings} [redshiftUnloadSettings] The Amazon S3
   * settings needed for the interim Amazon S3 when copying from Amazon
   * Redshift with unload. With this, data from Amazon Redshift source will be
   * unloaded into S3 first and then copied into the targeted sink from the
   * interim S3.
   */
  redshiftUnloadSettings?: RedshiftUnloadSettings;
}

/**
 * @interface
 * An interface representing ResponsysSource.
 * A copy activity Responsys source.
 *
 */
export interface ResponsysSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "ResponsysSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] A query to retrieve data from source. Type: string
   * (or Expression with resultType string).
   */
  query?: any;
}

/**
 * @interface
 * An interface representing SalesforceMarketingCloudSource.
 * A copy activity Salesforce Marketing Cloud source.
 *
 */
export interface SalesforceMarketingCloudSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "SalesforceMarketingCloudSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] A query to retrieve data from source. Type: string
   * (or Expression with resultType string).
   */
  query?: any;
}

/**
 * @interface
 * An interface representing VerticaSource.
 * A copy activity Vertica source.
 *
 */
export interface VerticaSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "VerticaSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] A query to retrieve data from source. Type: string
   * (or Expression with resultType string).
   */
  query?: any;
}

/**
 * @interface
 * An interface representing NetezzaSource.
 * A copy activity Netezza source.
 *
 */
export interface NetezzaSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "NetezzaSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] A query to retrieve data from source. Type: string
   * (or Expression with resultType string).
   */
  query?: any;
}

/**
 * @interface
 * An interface representing ZohoSource.
 * A copy activity Zoho server source.
 *
 */
export interface ZohoSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "ZohoSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] A query to retrieve data from source. Type: string
   * (or Expression with resultType string).
   */
  query?: any;
}

/**
 * @interface
 * An interface representing XeroSource.
 * A copy activity Xero Serivce source.
 *
 */
export interface XeroSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "XeroSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] A query to retrieve data from source. Type: string
   * (or Expression with resultType string).
   */
  query?: any;
}

/**
 * @interface
 * An interface representing SquareSource.
 * A copy activity Square Serivce source.
 *
 */
export interface SquareSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "SquareSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] A query to retrieve data from source. Type: string
   * (or Expression with resultType string).
   */
  query?: any;
}

/**
 * @interface
 * An interface representing SparkSource.
 * A copy activity Spark Server source.
 *
 */
export interface SparkSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "SparkSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] A query to retrieve data from source. Type: string
   * (or Expression with resultType string).
   */
  query?: any;
}

/**
 * @interface
 * An interface representing ShopifySource.
 * A copy activity Shopify Serivce source.
 *
 */
export interface ShopifySource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "ShopifySource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] A query to retrieve data from source. Type: string
   * (or Expression with resultType string).
   */
  query?: any;
}

/**
 * @interface
 * An interface representing ServiceNowSource.
 * A copy activity ServiceNow server source.
 *
 */
export interface ServiceNowSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "ServiceNowSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] A query to retrieve data from source. Type: string
   * (or Expression with resultType string).
   */
  query?: any;
}

/**
 * @interface
 * An interface representing QuickBooksSource.
 * A copy activity QuickBooks server source.
 *
 */
export interface QuickBooksSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "QuickBooksSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] A query to retrieve data from source. Type: string
   * (or Expression with resultType string).
   */
  query?: any;
}

/**
 * @interface
 * An interface representing PrestoSource.
 * A copy activity Presto server source.
 *
 */
export interface PrestoSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "PrestoSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] A query to retrieve data from source. Type: string
   * (or Expression with resultType string).
   */
  query?: any;
}

/**
 * @interface
 * An interface representing PhoenixSource.
 * A copy activity Phoenix server source.
 *
 */
export interface PhoenixSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "PhoenixSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] A query to retrieve data from source. Type: string
   * (or Expression with resultType string).
   */
  query?: any;
}

/**
 * @interface
 * An interface representing PaypalSource.
 * A copy activity Paypal Serivce source.
 *
 */
export interface PaypalSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "PaypalSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] A query to retrieve data from source. Type: string
   * (or Expression with resultType string).
   */
  query?: any;
}

/**
 * @interface
 * An interface representing MarketoSource.
 * A copy activity Marketo server source.
 *
 */
export interface MarketoSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "MarketoSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] A query to retrieve data from source. Type: string
   * (or Expression with resultType string).
   */
  query?: any;
}

/**
 * @interface
 * An interface representing MariaDBSource.
 * A copy activity MariaDB server source.
 *
 */
export interface MariaDBSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "MariaDBSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] A query to retrieve data from source. Type: string
   * (or Expression with resultType string).
   */
  query?: any;
}

/**
 * @interface
 * An interface representing MagentoSource.
 * A copy activity Magento server source.
 *
 */
export interface MagentoSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "MagentoSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] A query to retrieve data from source. Type: string
   * (or Expression with resultType string).
   */
  query?: any;
}

/**
 * @interface
 * An interface representing JiraSource.
 * A copy activity Jira Serivce source.
 *
 */
export interface JiraSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "JiraSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] A query to retrieve data from source. Type: string
   * (or Expression with resultType string).
   */
  query?: any;
}

/**
 * @interface
 * An interface representing ImpalaSource.
 * A copy activity Impala server source.
 *
 */
export interface ImpalaSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "ImpalaSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] A query to retrieve data from source. Type: string
   * (or Expression with resultType string).
   */
  query?: any;
}

/**
 * @interface
 * An interface representing HubspotSource.
 * A copy activity Hubspot Serivce source.
 *
 */
export interface HubspotSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "HubspotSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] A query to retrieve data from source. Type: string
   * (or Expression with resultType string).
   */
  query?: any;
}

/**
 * @interface
 * An interface representing HiveSource.
 * A copy activity Hive Server source.
 *
 */
export interface HiveSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "HiveSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] A query to retrieve data from source. Type: string
   * (or Expression with resultType string).
   */
  query?: any;
}

/**
 * @interface
 * An interface representing HBaseSource.
 * A copy activity HBase server source.
 *
 */
export interface HBaseSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "HBaseSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] A query to retrieve data from source. Type: string
   * (or Expression with resultType string).
   */
  query?: any;
}

/**
 * @interface
 * An interface representing GreenplumSource.
 * A copy activity Greenplum Database source.
 *
 */
export interface GreenplumSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "GreenplumSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] A query to retrieve data from source. Type: string
   * (or Expression with resultType string).
   */
  query?: any;
}

/**
 * @interface
 * An interface representing GoogleBigQuerySource.
 * A copy activity Google BigQuery service source.
 *
 */
export interface GoogleBigQuerySource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "GoogleBigQuerySource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] A query to retrieve data from source. Type: string
   * (or Expression with resultType string).
   */
  query?: any;
}

/**
 * @interface
 * An interface representing EloquaSource.
 * A copy activity Eloqua server source.
 *
 */
export interface EloquaSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "EloquaSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] A query to retrieve data from source. Type: string
   * (or Expression with resultType string).
   */
  query?: any;
}

/**
 * @interface
 * An interface representing DrillSource.
 * A copy activity Drill server source.
 *
 */
export interface DrillSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "DrillSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] A query to retrieve data from source. Type: string
   * (or Expression with resultType string).
   */
  query?: any;
}

/**
 * @interface
 * An interface representing CouchbaseSource.
 * A copy activity Couchbase server source.
 *
 */
export interface CouchbaseSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "CouchbaseSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] A query to retrieve data from source. Type: string
   * (or Expression with resultType string).
   */
  query?: any;
}

/**
 * @interface
 * An interface representing ConcurSource.
 * A copy activity Concur Serivce source.
 *
 */
export interface ConcurSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "ConcurSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] A query to retrieve data from source. Type: string
   * (or Expression with resultType string).
   */
  query?: any;
}

/**
 * @interface
 * An interface representing AzurePostgreSqlSource.
 * A copy activity Azure PostgreSQL source.
 *
 */
export interface AzurePostgreSqlSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AzurePostgreSqlSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] A query to retrieve data from source. Type: string
   * (or Expression with resultType string).
   */
  query?: any;
}

/**
 * @interface
 * An interface representing AmazonMWSSource.
 * A copy activity Amazon Marketplace Web Service source.
 *
 */
export interface AmazonMWSSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AmazonMWSSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] A query to retrieve data from source. Type: string
   * (or Expression with resultType string).
   */
  query?: any;
}

/**
 * @interface
 * An interface representing HttpSource.
 * A copy activity source for an HTTP file.
 *
 */
export interface HttpSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "HttpSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [httpRequestTimeout] Specifies the timeout for a HTTP client
   * to get HTTP response from HTTP server. The default value is equivalent to
   * System.Net.HttpWebRequest.Timeout. Type: string (or Expression with
   * resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  httpRequestTimeout?: any;
}

/**
 * @interface
 * An interface representing AzureDataLakeStoreSource.
 * A copy activity Azure Data Lake source.
 *
 */
export interface AzureDataLakeStoreSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AzureDataLakeStoreSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [recursive] If true, files under the folder path will be
   * read recursively. Default is true. Type: boolean (or Expression with
   * resultType boolean).
   */
  recursive?: any;
}

/**
 * @interface
 * An interface representing MongoDbSource.
 * A copy activity source for a MongoDB database.
 *
 */
export interface MongoDbSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "MongoDbSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] Database query. Should be a SQL-92 query expression.
   * Type: string (or Expression with resultType string).
   */
  query?: any;
}

/**
 * @interface
 * An interface representing CassandraSource.
 * A copy activity source for a Cassandra database.
 *
 */
export interface CassandraSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "CassandraSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] Database query. Should be a SQL-92 query expression
   * or Cassandra Query Language (CQL) command. Type: string (or Expression
   * with resultType string).
   */
  query?: any;
  /**
   * @member {CassandraSourceReadConsistencyLevels} [consistencyLevel] The
   * consistency level specifies how many Cassandra servers must respond to a
   * read request before returning data to the client application. Cassandra
   * checks the specified number of Cassandra servers for data to satisfy the
   * read request. Must be one of cassandraSourceReadConsistencyLevels. The
   * default value is 'ONE'. It is case-insensitive. Possible values include:
   * 'ALL', 'EACH_QUORUM', 'QUORUM', 'LOCAL_QUORUM', 'ONE', 'TWO', 'THREE',
   * 'LOCAL_ONE', 'SERIAL', 'LOCAL_SERIAL'
   */
  consistencyLevel?: CassandraSourceReadConsistencyLevels;
}

/**
 * @interface
 * An interface representing WebSource.
 * A copy activity source for web page table.
 *
 */
export interface WebSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "WebSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
}

/**
 * @interface
 * An interface representing OracleSource.
 * A copy activity Oracle source.
 *
 */
export interface OracleSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "OracleSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [oracleReaderQuery] Oracle reader query. Type: string (or
   * Expression with resultType string).
   */
  oracleReaderQuery?: any;
  /**
   * @member {any} [queryTimeout] Query timeout. Type: string (or Expression
   * with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  queryTimeout?: any;
}

/**
 * @interface
 * An interface representing AzureMySqlSource.
 * A copy activity Azure MySQL source.
 *
 */
export interface AzureMySqlSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AzureMySqlSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] Database query. Type: string (or Expression with
   * resultType string).
   */
  query?: any;
}

/**
 * @interface
 * An interface representing DistcpSettings.
 * Distcp settings.
 *
 */
export interface DistcpSettings {
  /**
   * @member {any} resourceManagerEndpoint Specifies the Yarn ResourceManager
   * endpoint. Type: string (or Expression with resultType string).
   */
  resourceManagerEndpoint: any;
  /**
   * @member {any} tempScriptPath Specifies an existing folder path which will
   * be used to store temp Distcp command script. The script file is generated
   * by ADF and will be removed after Copy job finished. Type: string (or
   * Expression with resultType string).
   */
  tempScriptPath: any;
  /**
   * @member {any} [distcpOptions] Specifies the Distcp options. Type: string
   * (or Expression with resultType string).
   */
  distcpOptions?: any;
}

/**
 * @interface
 * An interface representing HdfsSource.
 * A copy activity HDFS source.
 *
 */
export interface HdfsSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "HdfsSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [recursive] If true, files under the folder path will be
   * read recursively. Default is true. Type: boolean (or Expression with
   * resultType boolean).
   */
  recursive?: any;
  /**
   * @member {DistcpSettings} [distcpSettings] Specifies Distcp-related
   * settings.
   */
  distcpSettings?: DistcpSettings;
}

/**
 * @interface
 * An interface representing FileSystemSource.
 * A copy activity file system source.
 *
 */
export interface FileSystemSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "FileSystemSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [recursive] If true, files under the folder path will be
   * read recursively. Default is true. Type: boolean (or Expression with
   * resultType boolean).
   */
  recursive?: any;
}

/**
 * @interface
 * An interface representing SqlDWSource.
 * A copy activity SQL Data Warehouse source.
 *
 */
export interface SqlDWSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "SqlDWSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [sqlReaderQuery] SQL Data Warehouse reader query. Type:
   * string (or Expression with resultType string).
   */
  sqlReaderQuery?: any;
  /**
   * @member {any} [sqlReaderStoredProcedureName] Name of the stored procedure
   * for a SQL Data Warehouse source. This cannot be used at the same time as
   * SqlReaderQuery. Type: string (or Expression with resultType string).
   */
  sqlReaderStoredProcedureName?: any;
  /**
   * @member {any} [storedProcedureParameters] Value and type setting for
   * stored procedure parameters. Example: "{Parameter1: {value: "1", type:
   * "int"}}". Type: object (or Expression with resultType object), itemType:
   * StoredProcedureParameter.
   */
  storedProcedureParameters?: any;
}

/**
 * @interface
 * An interface representing StoredProcedureParameter.
 * SQL stored procedure parameter.
 *
 */
export interface StoredProcedureParameter {
  /**
   * @member {any} value Stored procedure parameter value. Type: string (or
   * Expression with resultType string).
   */
  value: any;
  /**
   * @member {StoredProcedureParameterType} [type] Stored procedure parameter
   * type. Possible values include: 'String', 'Int', 'Decimal', 'Guid',
   * 'Boolean', 'Date'
   */
  type?: StoredProcedureParameterType;
}

/**
 * @interface
 * An interface representing SqlSource.
 * A copy activity SQL source.
 *
 */
export interface SqlSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "SqlSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [sqlReaderQuery] SQL reader query. Type: string (or
   * Expression with resultType string).
   */
  sqlReaderQuery?: any;
  /**
   * @member {any} [sqlReaderStoredProcedureName] Name of the stored procedure
   * for a SQL Database source. This cannot be used at the same time as
   * SqlReaderQuery. Type: string (or Expression with resultType string).
   */
  sqlReaderStoredProcedureName?: any;
  /**
   * @member {{ [propertyName: string]: StoredProcedureParameter }}
   * [storedProcedureParameters] Value and type setting for stored procedure
   * parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
   */
  storedProcedureParameters?: { [propertyName: string]: StoredProcedureParameter };
}

/**
 * @interface
 * An interface representing SapEccSource.
 * A copy activity source for SAP ECC source.
 *
 */
export interface SapEccSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "SapEccSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {string} [query] SAP ECC OData query. For example, "$top=1". Type:
   * string (or Expression with resultType string).
   */
  query?: string;
}

/**
 * @interface
 * An interface representing SapCloudForCustomerSource.
 * A copy activity source for SAP Cloud for Customer source.
 *
 */
export interface SapCloudForCustomerSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "SapCloudForCustomerSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] SAP Cloud for Customer OData query. For example,
   * "$top=1". Type: string (or Expression with resultType string).
   */
  query?: any;
}

/**
 * @interface
 * An interface representing SalesforceSource.
 * A copy activity Salesforce source.
 *
 */
export interface SalesforceSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "SalesforceSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] Database query. Type: string (or Expression with
   * resultType string).
   */
  query?: any;
  /**
   * @member {SalesforceSourceReadBehavior} [readBehavior] The read behavior
   * for the operation. Default is Query. Possible values include: 'Query',
   * 'QueryAll'
   */
  readBehavior?: SalesforceSourceReadBehavior;
}

/**
 * @interface
 * An interface representing RelationalSource.
 * A copy activity source for various relational databases.
 *
 */
export interface RelationalSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "RelationalSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] Database query. Type: string (or Expression with
   * resultType string).
   */
  query?: any;
}

/**
 * @interface
 * An interface representing DynamicsSource.
 * A copy activity Dynamics source.
 *
 */
export interface DynamicsSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "DynamicsSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] FetchXML is a proprietary query language that is
   * used in Microsoft Dynamics (online & on-premises). Type: string (or
   * Expression with resultType string).
   */
  query?: any;
}

/**
 * @interface
 * An interface representing DocumentDbCollectionSource.
 * A copy activity Document Database Collection source.
 *
 */
export interface DocumentDbCollectionSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "DocumentDbCollectionSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [query] Documents query. Type: string (or Expression with
   * resultType string).
   */
  query?: any;
  /**
   * @member {any} [nestingSeparator] Nested properties separator. Type: string
   * (or Expression with resultType string).
   */
  nestingSeparator?: any;
}

/**
 * @interface
 * An interface representing BlobSource.
 * A copy activity Azure Blob source.
 *
 */
export interface BlobSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "BlobSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [treatEmptyAsNull] Treat empty as null. Type: boolean (or
   * Expression with resultType boolean).
   */
  treatEmptyAsNull?: any;
  /**
   * @member {any} [skipHeaderLineCount] Number of header lines to skip from
   * each blob. Type: integer (or Expression with resultType integer).
   */
  skipHeaderLineCount?: any;
  /**
   * @member {any} [recursive] If true, files under the folder path will be
   * read recursively. Default is true. Type: boolean (or Expression with
   * resultType boolean).
   */
  recursive?: any;
}

/**
 * @interface
 * An interface representing AzureTableSource.
 * A copy activity Azure Table source.
 *
 */
export interface AzureTableSource {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AzureTableSource";
  /**
   * @member {any} [sourceRetryCount] Source retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sourceRetryCount?: any;
  /**
   * @member {any} [sourceRetryWait] Source retry wait. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sourceRetryWait?: any;
  /**
   * @member {any} [azureTableSourceQuery] Azure Table source query. Type:
   * string (or Expression with resultType string).
   */
  azureTableSourceQuery?: any;
  /**
   * @member {any} [azureTableSourceIgnoreTableNotFound] Azure Table source
   * ignore table not found. Type: boolean (or Expression with resultType
   * boolean).
   */
  azureTableSourceIgnoreTableNotFound?: any;
}

/**
 * @interface
 * An interface representing LookupActivityTypeProperties.
 * Lookup activity properties.
 *
 */
export interface LookupActivityTypeProperties {
  /**
   * @member {CopySourceUnion} source Dataset-specific source properties, same
   * as copy activity source.
   */
  source: CopySourceUnion;
  /**
   * @member {DatasetReference} dataset Lookup activity dataset reference.
   */
  dataset: DatasetReference;
  /**
   * @member {any} [firstRowOnly] Whether to return first row or all rows.
   * Default value is true. Type: boolean (or Expression with resultType
   * boolean).
   */
  firstRowOnly?: any;
}

/**
 * @interface
 * An interface representing LookupActivity.
 * Lookup activity.
 *
 */
export interface LookupActivity {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Lookup";
  /**
   * @member {string} name Activity name.
   */
  name: string;
  /**
   * @member {string} [description] Activity description.
   */
  description?: string;
  /**
   * @member {ActivityDependency[]} [dependsOn] Activity depends on condition.
   */
  dependsOn?: ActivityDependency[];
  /**
   * @member {UserProperty[]} [userProperties] Activity user properties.
   */
  userProperties?: UserProperty[];
  /**
   * @member {LinkedServiceReference} [linkedServiceName] Linked service
   * reference.
   */
  linkedServiceName?: LinkedServiceReference;
  /**
   * @member {ActivityPolicy} [policy] Activity policy.
   */
  policy?: ActivityPolicy;
  /**
   * @member {CopySourceUnion} source Dataset-specific source properties, same
   * as copy activity source.
   */
  source: CopySourceUnion;
  /**
   * @member {DatasetReference} dataset Lookup activity dataset reference.
   */
  dataset: DatasetReference;
  /**
   * @member {any} [firstRowOnly] Whether to return first row or all rows.
   * Default value is true. Type: boolean (or Expression with resultType
   * boolean).
   */
  firstRowOnly?: any;
}

/**
 * @interface
 * An interface representing SqlServerStoredProcedureActivityTypeProperties.
 * SQL stored procedure activity properties.
 *
 */
export interface SqlServerStoredProcedureActivityTypeProperties {
  /**
   * @member {any} storedProcedureName Stored procedure name. Type: string (or
   * Expression with resultType string).
   */
  storedProcedureName: any;
  /**
   * @member {{ [propertyName: string]: StoredProcedureParameter }}
   * [storedProcedureParameters] Value and type setting for stored procedure
   * parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
   */
  storedProcedureParameters?: { [propertyName: string]: StoredProcedureParameter };
}

/**
 * @interface
 * An interface representing SqlServerStoredProcedureActivity.
 * SQL stored procedure activity type.
 *
 */
export interface SqlServerStoredProcedureActivity {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "SqlServerStoredProcedure";
  /**
   * @member {string} name Activity name.
   */
  name: string;
  /**
   * @member {string} [description] Activity description.
   */
  description?: string;
  /**
   * @member {ActivityDependency[]} [dependsOn] Activity depends on condition.
   */
  dependsOn?: ActivityDependency[];
  /**
   * @member {UserProperty[]} [userProperties] Activity user properties.
   */
  userProperties?: UserProperty[];
  /**
   * @member {LinkedServiceReference} [linkedServiceName] Linked service
   * reference.
   */
  linkedServiceName?: LinkedServiceReference;
  /**
   * @member {ActivityPolicy} [policy] Activity policy.
   */
  policy?: ActivityPolicy;
  /**
   * @member {any} storedProcedureName Stored procedure name. Type: string (or
   * Expression with resultType string).
   */
  storedProcedureName: any;
  /**
   * @member {{ [propertyName: string]: StoredProcedureParameter }}
   * [storedProcedureParameters] Value and type setting for stored procedure
   * parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
   */
  storedProcedureParameters?: { [propertyName: string]: StoredProcedureParameter };
}

/**
 * @interface
 * An interface representing CustomActivityReferenceObject.
 * Reference objects for custom activity
 *
 */
export interface CustomActivityReferenceObject {
  /**
   * @member {LinkedServiceReference[]} [linkedServices] Linked service
   * references.
   */
  linkedServices?: LinkedServiceReference[];
  /**
   * @member {DatasetReference[]} [datasets] Dataset references.
   */
  datasets?: DatasetReference[];
}

/**
 * @interface
 * An interface representing CustomActivityTypeProperties.
 * Custom activity properties.
 *
 */
export interface CustomActivityTypeProperties {
  /**
   * @member {any} command Command for custom activity Type: string (or
   * Expression with resultType string).
   */
  command: any;
  /**
   * @member {LinkedServiceReference} [resourceLinkedService] Resource linked
   * service reference.
   */
  resourceLinkedService?: LinkedServiceReference;
  /**
   * @member {any} [folderPath] Folder path for resource files Type: string (or
   * Expression with resultType string).
   */
  folderPath?: any;
  /**
   * @member {CustomActivityReferenceObject} [referenceObjects] Reference
   * objects
   */
  referenceObjects?: CustomActivityReferenceObject;
  /**
   * @member {{ [propertyName: string]: any }} [extendedProperties] User
   * defined property bag. There is no restriction on the keys or values that
   * can be used. The user specified custom activity has the full
   * responsibility to consume and interpret the content defined.
   */
  extendedProperties?: { [propertyName: string]: any };
}

/**
 * @interface
 * An interface representing CustomActivity.
 * Custom activity type.
 *
 */
export interface CustomActivity {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Custom";
  /**
   * @member {string} name Activity name.
   */
  name: string;
  /**
   * @member {string} [description] Activity description.
   */
  description?: string;
  /**
   * @member {ActivityDependency[]} [dependsOn] Activity depends on condition.
   */
  dependsOn?: ActivityDependency[];
  /**
   * @member {UserProperty[]} [userProperties] Activity user properties.
   */
  userProperties?: UserProperty[];
  /**
   * @member {LinkedServiceReference} [linkedServiceName] Linked service
   * reference.
   */
  linkedServiceName?: LinkedServiceReference;
  /**
   * @member {ActivityPolicy} [policy] Activity policy.
   */
  policy?: ActivityPolicy;
  /**
   * @member {any} command Command for custom activity Type: string (or
   * Expression with resultType string).
   */
  command: any;
  /**
   * @member {LinkedServiceReference} [resourceLinkedService] Resource linked
   * service reference.
   */
  resourceLinkedService?: LinkedServiceReference;
  /**
   * @member {any} [folderPath] Folder path for resource files Type: string (or
   * Expression with resultType string).
   */
  folderPath?: any;
  /**
   * @member {CustomActivityReferenceObject} [referenceObjects] Reference
   * objects
   */
  referenceObjects?: CustomActivityReferenceObject;
  /**
   * @member {{ [propertyName: string]: any }} [extendedProperties] User
   * defined property bag. There is no restriction on the keys or values that
   * can be used. The user specified custom activity has the full
   * responsibility to consume and interpret the content defined.
   */
  extendedProperties?: { [propertyName: string]: any };
}

/**
 * @interface
 * An interface representing SSISPropertyOverride.
 * SSIS property override.
 *
 */
export interface SSISPropertyOverride {
  /**
   * @member {any} value SSIS package property override value. Type: string (or
   * Expression with resultType string).
   */
  value: any;
  /**
   * @member {boolean} [isSensitive] Whether SSIS package property override
   * value is sensitive data. Value will be encrypted in SSISDB if it is true
   */
  isSensitive?: boolean;
}

/**
 * @interface
 * An interface representing SSISExecutionParameter.
 * SSIS execution parameter.
 *
 */
export interface SSISExecutionParameter {
  /**
   * @member {any} value SSIS package execution parameter value. Type: string
   * (or Expression with resultType string).
   */
  value: any;
}

/**
 * @interface
 * An interface representing SSISPackageLocation.
 * SSIS package location.
 *
 */
export interface SSISPackageLocation {
  /**
   * @member {string} packagePath The SSIS package path.
   */
  packagePath: string;
}

/**
 * @interface
 * An interface representing ExecuteSSISPackageActivityTypeProperties.
 * Execute SSIS package activity properties.
 *
 */
export interface ExecuteSSISPackageActivityTypeProperties {
  /**
   * @member {SSISPackageLocation} packageLocation SSIS package location.
   */
  packageLocation: SSISPackageLocation;
  /**
   * @member {SSISExecutionRuntime} [runtime] Specifies the runtime to execute
   * SSIS package. Possible values include: 'x64', 'x86'
   */
  runtime?: SSISExecutionRuntime;
  /**
   * @member {string} [loggingLevel] The logging level of SSIS package
   * execution.
   */
  loggingLevel?: string;
  /**
   * @member {string} [environmentPath] The environment path to execute the
   * SSIS package.
   */
  environmentPath?: string;
  /**
   * @member {IntegrationRuntimeReference} connectVia The integration runtime
   * reference.
   */
  connectVia: IntegrationRuntimeReference;
  /**
   * @member {{ [propertyName: string]: SSISExecutionParameter }}
   * [projectParameters] The project level parameters to execute the SSIS
   * package.
   */
  projectParameters?: { [propertyName: string]: SSISExecutionParameter };
  /**
   * @member {{ [propertyName: string]: SSISExecutionParameter }}
   * [packageParameters] The package level parameters to execute the SSIS
   * package.
   */
  packageParameters?: { [propertyName: string]: SSISExecutionParameter };
  /**
   * @member {{ [propertyName: string]: { [propertyName: string]:
   * SSISExecutionParameter } }} [projectConnectionManagers] The project level
   * connection managers to execute the SSIS package.
   */
  projectConnectionManagers?: { [propertyName: string]: { [propertyName: string]: SSISExecutionParameter } };
  /**
   * @member {{ [propertyName: string]: { [propertyName: string]:
   * SSISExecutionParameter } }} [packageConnectionManagers] The package level
   * connection managers to execute the SSIS package.
   */
  packageConnectionManagers?: { [propertyName: string]: { [propertyName: string]: SSISExecutionParameter } };
  /**
   * @member {{ [propertyName: string]: SSISPropertyOverride }}
   * [propertyOverrides] The property overrides to execute the SSIS package.
   */
  propertyOverrides?: { [propertyName: string]: SSISPropertyOverride };
}

/**
 * @interface
 * An interface representing ExecuteSSISPackageActivity.
 * Execute SSIS package activity.
 *
 */
export interface ExecuteSSISPackageActivity {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "ExecuteSSISPackage";
  /**
   * @member {string} name Activity name.
   */
  name: string;
  /**
   * @member {string} [description] Activity description.
   */
  description?: string;
  /**
   * @member {ActivityDependency[]} [dependsOn] Activity depends on condition.
   */
  dependsOn?: ActivityDependency[];
  /**
   * @member {UserProperty[]} [userProperties] Activity user properties.
   */
  userProperties?: UserProperty[];
  /**
   * @member {LinkedServiceReference} [linkedServiceName] Linked service
   * reference.
   */
  linkedServiceName?: LinkedServiceReference;
  /**
   * @member {ActivityPolicy} [policy] Activity policy.
   */
  policy?: ActivityPolicy;
  /**
   * @member {SSISPackageLocation} packageLocation SSIS package location.
   */
  packageLocation: SSISPackageLocation;
  /**
   * @member {SSISExecutionRuntime} [runtime] Specifies the runtime to execute
   * SSIS package. Possible values include: 'x64', 'x86'
   */
  runtime?: SSISExecutionRuntime;
  /**
   * @member {string} [loggingLevel] The logging level of SSIS package
   * execution.
   */
  loggingLevel?: string;
  /**
   * @member {string} [environmentPath] The environment path to execute the
   * SSIS package.
   */
  environmentPath?: string;
  /**
   * @member {IntegrationRuntimeReference} connectVia The integration runtime
   * reference.
   */
  connectVia: IntegrationRuntimeReference;
  /**
   * @member {{ [propertyName: string]: SSISExecutionParameter }}
   * [projectParameters] The project level parameters to execute the SSIS
   * package.
   */
  projectParameters?: { [propertyName: string]: SSISExecutionParameter };
  /**
   * @member {{ [propertyName: string]: SSISExecutionParameter }}
   * [packageParameters] The package level parameters to execute the SSIS
   * package.
   */
  packageParameters?: { [propertyName: string]: SSISExecutionParameter };
  /**
   * @member {{ [propertyName: string]: { [propertyName: string]:
   * SSISExecutionParameter } }} [projectConnectionManagers] The project level
   * connection managers to execute the SSIS package.
   */
  projectConnectionManagers?: { [propertyName: string]: { [propertyName: string]: SSISExecutionParameter } };
  /**
   * @member {{ [propertyName: string]: { [propertyName: string]:
   * SSISExecutionParameter } }} [packageConnectionManagers] The package level
   * connection managers to execute the SSIS package.
   */
  packageConnectionManagers?: { [propertyName: string]: { [propertyName: string]: SSISExecutionParameter } };
  /**
   * @member {{ [propertyName: string]: SSISPropertyOverride }}
   * [propertyOverrides] The property overrides to execute the SSIS package.
   */
  propertyOverrides?: { [propertyName: string]: SSISPropertyOverride };
}

/**
 * @interface
 * An interface representing HDInsightSparkActivityTypeProperties.
 * HDInsight spark activity properties.
 *
 */
export interface HDInsightSparkActivityTypeProperties {
  /**
   * @member {any} rootPath The root path in 'sparkJobLinkedService' for all
   * the job’s files. Type: string (or Expression with resultType string).
   */
  rootPath: any;
  /**
   * @member {any} entryFilePath The relative path to the root folder of the
   * code/package to be executed. Type: string (or Expression with resultType
   * string).
   */
  entryFilePath: any;
  /**
   * @member {any[]} [argumentsProperty] The user-specified arguments to
   * HDInsightSparkActivity.
   */
  argumentsProperty?: any[];
  /**
   * @member {HDInsightActivityDebugInfoOption} [getDebugInfo] Debug info
   * option. Possible values include: 'None', 'Always', 'Failure'
   */
  getDebugInfo?: HDInsightActivityDebugInfoOption;
  /**
   * @member {LinkedServiceReference} [sparkJobLinkedService] The storage
   * linked service for uploading the entry file and dependencies, and for
   * receiving logs.
   */
  sparkJobLinkedService?: LinkedServiceReference;
  /**
   * @member {string} [className] The application's Java/Spark main class.
   */
  className?: string;
  /**
   * @member {any} [proxyUser] The user to impersonate that will execute the
   * job. Type: string (or Expression with resultType string).
   */
  proxyUser?: any;
  /**
   * @member {{ [propertyName: string]: any }} [sparkConfig] Spark
   * configuration property.
   */
  sparkConfig?: { [propertyName: string]: any };
}

/**
 * @interface
 * An interface representing HDInsightSparkActivity.
 * HDInsight Spark activity.
 *
 */
export interface HDInsightSparkActivity {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "HDInsightSpark";
  /**
   * @member {string} name Activity name.
   */
  name: string;
  /**
   * @member {string} [description] Activity description.
   */
  description?: string;
  /**
   * @member {ActivityDependency[]} [dependsOn] Activity depends on condition.
   */
  dependsOn?: ActivityDependency[];
  /**
   * @member {UserProperty[]} [userProperties] Activity user properties.
   */
  userProperties?: UserProperty[];
  /**
   * @member {LinkedServiceReference} [linkedServiceName] Linked service
   * reference.
   */
  linkedServiceName?: LinkedServiceReference;
  /**
   * @member {ActivityPolicy} [policy] Activity policy.
   */
  policy?: ActivityPolicy;
  /**
   * @member {any} rootPath The root path in 'sparkJobLinkedService' for all
   * the job’s files. Type: string (or Expression with resultType string).
   */
  rootPath: any;
  /**
   * @member {any} entryFilePath The relative path to the root folder of the
   * code/package to be executed. Type: string (or Expression with resultType
   * string).
   */
  entryFilePath: any;
  /**
   * @member {any[]} [argumentsProperty] The user-specified arguments to
   * HDInsightSparkActivity.
   */
  argumentsProperty?: any[];
  /**
   * @member {HDInsightActivityDebugInfoOption} [getDebugInfo] Debug info
   * option. Possible values include: 'None', 'Always', 'Failure'
   */
  getDebugInfo?: HDInsightActivityDebugInfoOption;
  /**
   * @member {LinkedServiceReference} [sparkJobLinkedService] The storage
   * linked service for uploading the entry file and dependencies, and for
   * receiving logs.
   */
  sparkJobLinkedService?: LinkedServiceReference;
  /**
   * @member {string} [className] The application's Java/Spark main class.
   */
  className?: string;
  /**
   * @member {any} [proxyUser] The user to impersonate that will execute the
   * job. Type: string (or Expression with resultType string).
   */
  proxyUser?: any;
  /**
   * @member {{ [propertyName: string]: any }} [sparkConfig] Spark
   * configuration property.
   */
  sparkConfig?: { [propertyName: string]: any };
}

/**
 * @interface
 * An interface representing HDInsightStreamingActivityTypeProperties.
 * HDInsight streaming activity properties.
 *
 */
export interface HDInsightStreamingActivityTypeProperties {
  /**
   * @member {LinkedServiceReference[]} [storageLinkedServices] Storage linked
   * service references.
   */
  storageLinkedServices?: LinkedServiceReference[];
  /**
   * @member {any[]} [argumentsProperty] User specified arguments to
   * HDInsightActivity.
   */
  argumentsProperty?: any[];
  /**
   * @member {HDInsightActivityDebugInfoOption} [getDebugInfo] Debug info
   * option. Possible values include: 'None', 'Always', 'Failure'
   */
  getDebugInfo?: HDInsightActivityDebugInfoOption;
  /**
   * @member {any} mapper Mapper executable name. Type: string (or Expression
   * with resultType string).
   */
  mapper: any;
  /**
   * @member {any} reducer Reducer executable name. Type: string (or Expression
   * with resultType string).
   */
  reducer: any;
  /**
   * @member {any} input Input blob path. Type: string (or Expression with
   * resultType string).
   */
  input: any;
  /**
   * @member {any} output Output blob path. Type: string (or Expression with
   * resultType string).
   */
  output: any;
  /**
   * @member {any[]} filePaths Paths to streaming job files. Can be
   * directories.
   */
  filePaths: any[];
  /**
   * @member {LinkedServiceReference} [fileLinkedService] Linked service
   * reference where the files are located.
   */
  fileLinkedService?: LinkedServiceReference;
  /**
   * @member {any} [combiner] Combiner executable name. Type: string (or
   * Expression with resultType string).
   */
  combiner?: any;
  /**
   * @member {any[]} [commandEnvironment] Command line environment values.
   */
  commandEnvironment?: any[];
  /**
   * @member {{ [propertyName: string]: any }} [defines] Allows user to specify
   * defines for streaming job request.
   */
  defines?: { [propertyName: string]: any };
}

/**
 * @interface
 * An interface representing HDInsightStreamingActivity.
 * HDInsight streaming activity type.
 *
 */
export interface HDInsightStreamingActivity {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "HDInsightStreaming";
  /**
   * @member {string} name Activity name.
   */
  name: string;
  /**
   * @member {string} [description] Activity description.
   */
  description?: string;
  /**
   * @member {ActivityDependency[]} [dependsOn] Activity depends on condition.
   */
  dependsOn?: ActivityDependency[];
  /**
   * @member {UserProperty[]} [userProperties] Activity user properties.
   */
  userProperties?: UserProperty[];
  /**
   * @member {LinkedServiceReference} [linkedServiceName] Linked service
   * reference.
   */
  linkedServiceName?: LinkedServiceReference;
  /**
   * @member {ActivityPolicy} [policy] Activity policy.
   */
  policy?: ActivityPolicy;
  /**
   * @member {LinkedServiceReference[]} [storageLinkedServices] Storage linked
   * service references.
   */
  storageLinkedServices?: LinkedServiceReference[];
  /**
   * @member {any[]} [argumentsProperty] User specified arguments to
   * HDInsightActivity.
   */
  argumentsProperty?: any[];
  /**
   * @member {HDInsightActivityDebugInfoOption} [getDebugInfo] Debug info
   * option. Possible values include: 'None', 'Always', 'Failure'
   */
  getDebugInfo?: HDInsightActivityDebugInfoOption;
  /**
   * @member {any} mapper Mapper executable name. Type: string (or Expression
   * with resultType string).
   */
  mapper: any;
  /**
   * @member {any} reducer Reducer executable name. Type: string (or Expression
   * with resultType string).
   */
  reducer: any;
  /**
   * @member {any} input Input blob path. Type: string (or Expression with
   * resultType string).
   */
  input: any;
  /**
   * @member {any} output Output blob path. Type: string (or Expression with
   * resultType string).
   */
  output: any;
  /**
   * @member {any[]} filePaths Paths to streaming job files. Can be
   * directories.
   */
  filePaths: any[];
  /**
   * @member {LinkedServiceReference} [fileLinkedService] Linked service
   * reference where the files are located.
   */
  fileLinkedService?: LinkedServiceReference;
  /**
   * @member {any} [combiner] Combiner executable name. Type: string (or
   * Expression with resultType string).
   */
  combiner?: any;
  /**
   * @member {any[]} [commandEnvironment] Command line environment values.
   */
  commandEnvironment?: any[];
  /**
   * @member {{ [propertyName: string]: any }} [defines] Allows user to specify
   * defines for streaming job request.
   */
  defines?: { [propertyName: string]: any };
}

/**
 * @interface
 * An interface representing HDInsightMapReduceActivityTypeProperties.
 * HDInsight MapReduce activity properties.
 *
 */
export interface HDInsightMapReduceActivityTypeProperties {
  /**
   * @member {LinkedServiceReference[]} [storageLinkedServices] Storage linked
   * service references.
   */
  storageLinkedServices?: LinkedServiceReference[];
  /**
   * @member {any[]} [argumentsProperty] User specified arguments to
   * HDInsightActivity.
   */
  argumentsProperty?: any[];
  /**
   * @member {HDInsightActivityDebugInfoOption} [getDebugInfo] Debug info
   * option. Possible values include: 'None', 'Always', 'Failure'
   */
  getDebugInfo?: HDInsightActivityDebugInfoOption;
  /**
   * @member {any} className Class name. Type: string (or Expression with
   * resultType string).
   */
  className: any;
  /**
   * @member {any} jarFilePath Jar path. Type: string (or Expression with
   * resultType string).
   */
  jarFilePath: any;
  /**
   * @member {LinkedServiceReference} [jarLinkedService] Jar linked service
   * reference.
   */
  jarLinkedService?: LinkedServiceReference;
  /**
   * @member {any[]} [jarLibs] Jar libs.
   */
  jarLibs?: any[];
  /**
   * @member {{ [propertyName: string]: any }} [defines] Allows user to specify
   * defines for the MapReduce job request.
   */
  defines?: { [propertyName: string]: any };
}

/**
 * @interface
 * An interface representing HDInsightMapReduceActivity.
 * HDInsight MapReduce activity type.
 *
 */
export interface HDInsightMapReduceActivity {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "HDInsightMapReduce";
  /**
   * @member {string} name Activity name.
   */
  name: string;
  /**
   * @member {string} [description] Activity description.
   */
  description?: string;
  /**
   * @member {ActivityDependency[]} [dependsOn] Activity depends on condition.
   */
  dependsOn?: ActivityDependency[];
  /**
   * @member {UserProperty[]} [userProperties] Activity user properties.
   */
  userProperties?: UserProperty[];
  /**
   * @member {LinkedServiceReference} [linkedServiceName] Linked service
   * reference.
   */
  linkedServiceName?: LinkedServiceReference;
  /**
   * @member {ActivityPolicy} [policy] Activity policy.
   */
  policy?: ActivityPolicy;
  /**
   * @member {LinkedServiceReference[]} [storageLinkedServices] Storage linked
   * service references.
   */
  storageLinkedServices?: LinkedServiceReference[];
  /**
   * @member {any[]} [argumentsProperty] User specified arguments to
   * HDInsightActivity.
   */
  argumentsProperty?: any[];
  /**
   * @member {HDInsightActivityDebugInfoOption} [getDebugInfo] Debug info
   * option. Possible values include: 'None', 'Always', 'Failure'
   */
  getDebugInfo?: HDInsightActivityDebugInfoOption;
  /**
   * @member {any} className Class name. Type: string (or Expression with
   * resultType string).
   */
  className: any;
  /**
   * @member {any} jarFilePath Jar path. Type: string (or Expression with
   * resultType string).
   */
  jarFilePath: any;
  /**
   * @member {LinkedServiceReference} [jarLinkedService] Jar linked service
   * reference.
   */
  jarLinkedService?: LinkedServiceReference;
  /**
   * @member {any[]} [jarLibs] Jar libs.
   */
  jarLibs?: any[];
  /**
   * @member {{ [propertyName: string]: any }} [defines] Allows user to specify
   * defines for the MapReduce job request.
   */
  defines?: { [propertyName: string]: any };
}

/**
 * @interface
 * An interface representing HDInsightPigActivityTypeProperties.
 * HDInsight Pig activity properties.
 *
 */
export interface HDInsightPigActivityTypeProperties {
  /**
   * @member {LinkedServiceReference[]} [storageLinkedServices] Storage linked
   * service references.
   */
  storageLinkedServices?: LinkedServiceReference[];
  /**
   * @member {any[]} [argumentsProperty] User specified arguments to
   * HDInsightActivity.
   */
  argumentsProperty?: any[];
  /**
   * @member {HDInsightActivityDebugInfoOption} [getDebugInfo] Debug info
   * option. Possible values include: 'None', 'Always', 'Failure'
   */
  getDebugInfo?: HDInsightActivityDebugInfoOption;
  /**
   * @member {any} [scriptPath] Script path. Type: string (or Expression with
   * resultType string).
   */
  scriptPath?: any;
  /**
   * @member {LinkedServiceReference} [scriptLinkedService] Script linked
   * service reference.
   */
  scriptLinkedService?: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: any }} [defines] Allows user to specify
   * defines for Pig job request.
   */
  defines?: { [propertyName: string]: any };
}

/**
 * @interface
 * An interface representing HDInsightPigActivity.
 * HDInsight Pig activity type.
 *
 */
export interface HDInsightPigActivity {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "HDInsightPig";
  /**
   * @member {string} name Activity name.
   */
  name: string;
  /**
   * @member {string} [description] Activity description.
   */
  description?: string;
  /**
   * @member {ActivityDependency[]} [dependsOn] Activity depends on condition.
   */
  dependsOn?: ActivityDependency[];
  /**
   * @member {UserProperty[]} [userProperties] Activity user properties.
   */
  userProperties?: UserProperty[];
  /**
   * @member {LinkedServiceReference} [linkedServiceName] Linked service
   * reference.
   */
  linkedServiceName?: LinkedServiceReference;
  /**
   * @member {ActivityPolicy} [policy] Activity policy.
   */
  policy?: ActivityPolicy;
  /**
   * @member {LinkedServiceReference[]} [storageLinkedServices] Storage linked
   * service references.
   */
  storageLinkedServices?: LinkedServiceReference[];
  /**
   * @member {any[]} [argumentsProperty] User specified arguments to
   * HDInsightActivity.
   */
  argumentsProperty?: any[];
  /**
   * @member {HDInsightActivityDebugInfoOption} [getDebugInfo] Debug info
   * option. Possible values include: 'None', 'Always', 'Failure'
   */
  getDebugInfo?: HDInsightActivityDebugInfoOption;
  /**
   * @member {any} [scriptPath] Script path. Type: string (or Expression with
   * resultType string).
   */
  scriptPath?: any;
  /**
   * @member {LinkedServiceReference} [scriptLinkedService] Script linked
   * service reference.
   */
  scriptLinkedService?: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: any }} [defines] Allows user to specify
   * defines for Pig job request.
   */
  defines?: { [propertyName: string]: any };
}

/**
 * @interface
 * An interface representing HDInsightHiveActivityTypeProperties.
 * HDInsight Hive activity properties.
 *
 */
export interface HDInsightHiveActivityTypeProperties {
  /**
   * @member {LinkedServiceReference[]} [storageLinkedServices] Storage linked
   * service references.
   */
  storageLinkedServices?: LinkedServiceReference[];
  /**
   * @member {any[]} [argumentsProperty] User specified arguments to
   * HDInsightActivity.
   */
  argumentsProperty?: any[];
  /**
   * @member {HDInsightActivityDebugInfoOption} [getDebugInfo] Debug info
   * option. Possible values include: 'None', 'Always', 'Failure'
   */
  getDebugInfo?: HDInsightActivityDebugInfoOption;
  /**
   * @member {any} [scriptPath] Script path. Type: string (or Expression with
   * resultType string).
   */
  scriptPath?: any;
  /**
   * @member {LinkedServiceReference} [scriptLinkedService] Script linked
   * service reference.
   */
  scriptLinkedService?: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: any }} [defines] Allows user to specify
   * defines for Hive job request.
   */
  defines?: { [propertyName: string]: any };
}

/**
 * @interface
 * An interface representing HDInsightHiveActivity.
 * HDInsight Hive activity type.
 *
 */
export interface HDInsightHiveActivity {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "HDInsightHive";
  /**
   * @member {string} name Activity name.
   */
  name: string;
  /**
   * @member {string} [description] Activity description.
   */
  description?: string;
  /**
   * @member {ActivityDependency[]} [dependsOn] Activity depends on condition.
   */
  dependsOn?: ActivityDependency[];
  /**
   * @member {UserProperty[]} [userProperties] Activity user properties.
   */
  userProperties?: UserProperty[];
  /**
   * @member {LinkedServiceReference} [linkedServiceName] Linked service
   * reference.
   */
  linkedServiceName?: LinkedServiceReference;
  /**
   * @member {ActivityPolicy} [policy] Activity policy.
   */
  policy?: ActivityPolicy;
  /**
   * @member {LinkedServiceReference[]} [storageLinkedServices] Storage linked
   * service references.
   */
  storageLinkedServices?: LinkedServiceReference[];
  /**
   * @member {any[]} [argumentsProperty] User specified arguments to
   * HDInsightActivity.
   */
  argumentsProperty?: any[];
  /**
   * @member {HDInsightActivityDebugInfoOption} [getDebugInfo] Debug info
   * option. Possible values include: 'None', 'Always', 'Failure'
   */
  getDebugInfo?: HDInsightActivityDebugInfoOption;
  /**
   * @member {any} [scriptPath] Script path. Type: string (or Expression with
   * resultType string).
   */
  scriptPath?: any;
  /**
   * @member {LinkedServiceReference} [scriptLinkedService] Script linked
   * service reference.
   */
  scriptLinkedService?: LinkedServiceReference;
  /**
   * @member {{ [propertyName: string]: any }} [defines] Allows user to specify
   * defines for Hive job request.
   */
  defines?: { [propertyName: string]: any };
}

/**
 * @interface
 * An interface representing RedirectIncompatibleRowSettings.
 * Redirect incompatible row settings
 *
 */
export interface RedirectIncompatibleRowSettings {
  /**
   * @member {any} linkedServiceName Name of the Azure Storage, Storage SAS, or
   * Azure Data Lake Store linked service used for redirecting incompatible
   * row. Must be specified if redirectIncompatibleRowSettings is specified.
   * Type: string (or Expression with resultType string).
   */
  linkedServiceName: any;
  /**
   * @member {any} [path] The path for storing the redirect incompatible row
   * data. Type: string (or Expression with resultType string).
   */
  path?: any;
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * @interface
 * An interface representing StagingSettings.
 * Staging settings.
 *
 */
export interface StagingSettings {
  /**
   * @member {LinkedServiceReference} linkedServiceName Staging linked service
   * reference.
   */
  linkedServiceName: LinkedServiceReference;
  /**
   * @member {any} [path] The path to storage for storing the interim data.
   * Type: string (or Expression with resultType string).
   */
  path?: any;
  /**
   * @member {any} [enableCompression] Specifies whether to use compression
   * when copying data via an interim staging. Default value is false. Type:
   * boolean (or Expression with resultType boolean).
   */
  enableCompression?: any;
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * Contains the possible cases for CopyTranslator.
 */
export type CopyTranslatorUnion = CopyTranslator | TabularTranslator;

/**
 * @interface
 * An interface representing CopyTranslator.
 * A copy activity translator.
 *
 */
export interface CopyTranslator {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "CopyTranslator";
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * @interface
 * An interface representing TabularTranslator.
 * A copy activity tabular translator.
 *
 */
export interface TabularTranslator {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "TabularTranslator";
  /**
   * @member {any} [columnMappings] Column mappings. Example: "UserId:
   * MyUserId, Group: MyGroup, Name: MyName" Type: string (or Expression with
   * resultType string).
   */
  columnMappings?: any;
  /**
   * @member {any} [schemaMapping] The schema mapping to map between tabular
   * data and hierarchical data. Example: {"Column1": "$.Column1", "Column2":
   * "$.Column2.Property1", "Column3": "$.Column2.Property2"}. Type: object (or
   * Expression with resultType object).
   */
  schemaMapping?: any;
}

/**
 * Contains the possible cases for CopySink.
 */
export type CopySinkUnion = CopySink | SalesforceSink | DynamicsSink | OdbcSink | AzureSearchIndexSink | AzureDataLakeStoreSink | OracleSink | SqlDWSink | SqlSink | DocumentDbCollectionSink | FileSystemSink | BlobSink | AzureTableSink | AzureQueueSink | SapCloudForCustomerSink;

/**
 * @interface
 * An interface representing CopySink.
 * A copy activity sink.
 *
 */
export interface CopySink {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "CopySink";
  /**
   * @member {any} [writeBatchSize] Write batch size. Type: integer (or
   * Expression with resultType integer), minimum: 0.
   */
  writeBatchSize?: any;
  /**
   * @member {any} [writeBatchTimeout] Write batch timeout. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  writeBatchTimeout?: any;
  /**
   * @member {any} [sinkRetryCount] Sink retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sinkRetryCount?: any;
  /**
   * @member {any} [sinkRetryWait] Sink retry wait. Type: string (or Expression
   * with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sinkRetryWait?: any;
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * @interface
 * An interface representing SalesforceSink.
 * A copy activity Salesforce sink.
 *
 */
export interface SalesforceSink {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "SalesforceSink";
  /**
   * @member {any} [writeBatchSize] Write batch size. Type: integer (or
   * Expression with resultType integer), minimum: 0.
   */
  writeBatchSize?: any;
  /**
   * @member {any} [writeBatchTimeout] Write batch timeout. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  writeBatchTimeout?: any;
  /**
   * @member {any} [sinkRetryCount] Sink retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sinkRetryCount?: any;
  /**
   * @member {any} [sinkRetryWait] Sink retry wait. Type: string (or Expression
   * with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sinkRetryWait?: any;
  /**
   * @member {SalesforceSinkWriteBehavior} [writeBehavior] The write behavior
   * for the operation. Default is Insert. Possible values include: 'Insert',
   * 'Upsert'
   */
  writeBehavior?: SalesforceSinkWriteBehavior;
  /**
   * @member {any} [externalIdFieldName] The name of the external ID field for
   * upsert operation. Default value is 'Id' column. Type: string (or
   * Expression with resultType string).
   */
  externalIdFieldName?: any;
  /**
   * @member {any} [ignoreNullValues] The flag indicating whether or not to
   * ignore null values from input dataset (except key fields) during write
   * operation. Default value is false. If set it to true, it means ADF will
   * leave the data in the destination object unchanged when doing
   * upsert/update operation and insert defined default value when doing insert
   * operation, versus ADF will update the data in the destination object to
   * NULL when doing upsert/update operation and insert NULL value when doing
   * insert operation. Type: boolean (or Expression with resultType boolean).
   */
  ignoreNullValues?: any;
}

/**
 * @interface
 * An interface representing DynamicsSink.
 * A copy activity Dynamics sink.
 *
 */
export interface DynamicsSink {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "DynamicsSink";
  /**
   * @member {any} [writeBatchSize] Write batch size. Type: integer (or
   * Expression with resultType integer), minimum: 0.
   */
  writeBatchSize?: any;
  /**
   * @member {any} [writeBatchTimeout] Write batch timeout. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  writeBatchTimeout?: any;
  /**
   * @member {any} [sinkRetryCount] Sink retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sinkRetryCount?: any;
  /**
   * @member {any} [sinkRetryWait] Sink retry wait. Type: string (or Expression
   * with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sinkRetryWait?: any;
  /**
   * @member {any} [ignoreNullValues] The flag indicating whether ignore null
   * values from input dataset (except key fields) during write operation.
   * Default is false. Type: boolean (or Expression with resultType boolean).
   */
  ignoreNullValues?: any;
}

/**
 * @interface
 * An interface representing OdbcSink.
 * A copy activity ODBC sink.
 *
 */
export interface OdbcSink {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "OdbcSink";
  /**
   * @member {any} [writeBatchSize] Write batch size. Type: integer (or
   * Expression with resultType integer), minimum: 0.
   */
  writeBatchSize?: any;
  /**
   * @member {any} [writeBatchTimeout] Write batch timeout. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  writeBatchTimeout?: any;
  /**
   * @member {any} [sinkRetryCount] Sink retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sinkRetryCount?: any;
  /**
   * @member {any} [sinkRetryWait] Sink retry wait. Type: string (or Expression
   * with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sinkRetryWait?: any;
  /**
   * @member {any} [preCopyScript] A query to execute before starting the copy.
   * Type: string (or Expression with resultType string).
   */
  preCopyScript?: any;
}

/**
 * @interface
 * An interface representing AzureSearchIndexSink.
 * A copy activity Azure Search Index sink.
 *
 */
export interface AzureSearchIndexSink {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AzureSearchIndexSink";
  /**
   * @member {any} [writeBatchSize] Write batch size. Type: integer (or
   * Expression with resultType integer), minimum: 0.
   */
  writeBatchSize?: any;
  /**
   * @member {any} [writeBatchTimeout] Write batch timeout. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  writeBatchTimeout?: any;
  /**
   * @member {any} [sinkRetryCount] Sink retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sinkRetryCount?: any;
  /**
   * @member {any} [sinkRetryWait] Sink retry wait. Type: string (or Expression
   * with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sinkRetryWait?: any;
  /**
   * @member {AzureSearchIndexWriteBehaviorType} [writeBehavior] Specify the
   * write behavior when upserting documents into Azure Search Index. Possible
   * values include: 'Merge', 'Upload'
   */
  writeBehavior?: AzureSearchIndexWriteBehaviorType;
}

/**
 * @interface
 * An interface representing AzureDataLakeStoreSink.
 * A copy activity Azure Data Lake Store sink.
 *
 */
export interface AzureDataLakeStoreSink {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AzureDataLakeStoreSink";
  /**
   * @member {any} [writeBatchSize] Write batch size. Type: integer (or
   * Expression with resultType integer), minimum: 0.
   */
  writeBatchSize?: any;
  /**
   * @member {any} [writeBatchTimeout] Write batch timeout. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  writeBatchTimeout?: any;
  /**
   * @member {any} [sinkRetryCount] Sink retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sinkRetryCount?: any;
  /**
   * @member {any} [sinkRetryWait] Sink retry wait. Type: string (or Expression
   * with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sinkRetryWait?: any;
  /**
   * @member {CopyBehaviorType} [copyBehavior] The type of copy behavior for
   * copy sink. Possible values include: 'PreserveHierarchy',
   * 'FlattenHierarchy', 'MergeFiles'
   */
  copyBehavior?: CopyBehaviorType;
}

/**
 * @interface
 * An interface representing OracleSink.
 * A copy activity Oracle sink.
 *
 */
export interface OracleSink {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "OracleSink";
  /**
   * @member {any} [writeBatchSize] Write batch size. Type: integer (or
   * Expression with resultType integer), minimum: 0.
   */
  writeBatchSize?: any;
  /**
   * @member {any} [writeBatchTimeout] Write batch timeout. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  writeBatchTimeout?: any;
  /**
   * @member {any} [sinkRetryCount] Sink retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sinkRetryCount?: any;
  /**
   * @member {any} [sinkRetryWait] Sink retry wait. Type: string (or Expression
   * with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sinkRetryWait?: any;
  /**
   * @member {any} [preCopyScript] SQL pre-copy script. Type: string (or
   * Expression with resultType string).
   */
  preCopyScript?: any;
}

/**
 * @interface
 * An interface representing PolybaseSettings.
 * PolyBase settings.
 *
 */
export interface PolybaseSettings {
  /**
   * @member {PolybaseSettingsRejectType} [rejectType] Reject type. Possible
   * values include: 'value', 'percentage'
   */
  rejectType?: PolybaseSettingsRejectType;
  /**
   * @member {any} [rejectValue] Specifies the value or the percentage of rows
   * that can be rejected before the query fails. Type: number (or Expression
   * with resultType number), minimum: 0.
   */
  rejectValue?: any;
  /**
   * @member {any} [rejectSampleValue] Determines the number of rows to attempt
   * to retrieve before the PolyBase recalculates the percentage of rejected
   * rows. Type: integer (or Expression with resultType integer), minimum: 0.
   */
  rejectSampleValue?: any;
  /**
   * @member {any} [useTypeDefault] Specifies how to handle missing values in
   * delimited text files when PolyBase retrieves data from the text file.
   * Type: boolean (or Expression with resultType boolean).
   */
  useTypeDefault?: any;
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * @interface
 * An interface representing SqlDWSink.
 * A copy activity SQL Data Warehouse sink.
 *
 */
export interface SqlDWSink {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "SqlDWSink";
  /**
   * @member {any} [writeBatchSize] Write batch size. Type: integer (or
   * Expression with resultType integer), minimum: 0.
   */
  writeBatchSize?: any;
  /**
   * @member {any} [writeBatchTimeout] Write batch timeout. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  writeBatchTimeout?: any;
  /**
   * @member {any} [sinkRetryCount] Sink retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sinkRetryCount?: any;
  /**
   * @member {any} [sinkRetryWait] Sink retry wait. Type: string (or Expression
   * with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sinkRetryWait?: any;
  /**
   * @member {any} [preCopyScript] SQL pre-copy script. Type: string (or
   * Expression with resultType string).
   */
  preCopyScript?: any;
  /**
   * @member {any} [allowPolyBase] Indicates to use PolyBase to copy data into
   * SQL Data Warehouse when applicable. Type: boolean (or Expression with
   * resultType boolean).
   */
  allowPolyBase?: any;
  /**
   * @member {PolybaseSettings} [polyBaseSettings] Specifies PolyBase-related
   * settings when allowPolyBase is true.
   */
  polyBaseSettings?: PolybaseSettings;
}

/**
 * @interface
 * An interface representing SqlSink.
 * A copy activity SQL sink.
 *
 */
export interface SqlSink {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "SqlSink";
  /**
   * @member {any} [writeBatchSize] Write batch size. Type: integer (or
   * Expression with resultType integer), minimum: 0.
   */
  writeBatchSize?: any;
  /**
   * @member {any} [writeBatchTimeout] Write batch timeout. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  writeBatchTimeout?: any;
  /**
   * @member {any} [sinkRetryCount] Sink retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sinkRetryCount?: any;
  /**
   * @member {any} [sinkRetryWait] Sink retry wait. Type: string (or Expression
   * with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sinkRetryWait?: any;
  /**
   * @member {any} [sqlWriterStoredProcedureName] SQL writer stored procedure
   * name. Type: string (or Expression with resultType string).
   */
  sqlWriterStoredProcedureName?: any;
  /**
   * @member {any} [sqlWriterTableType] SQL writer table type. Type: string (or
   * Expression with resultType string).
   */
  sqlWriterTableType?: any;
  /**
   * @member {any} [preCopyScript] SQL pre-copy script. Type: string (or
   * Expression with resultType string).
   */
  preCopyScript?: any;
  /**
   * @member {{ [propertyName: string]: StoredProcedureParameter }}
   * [storedProcedureParameters] SQL stored procedure parameters.
   */
  storedProcedureParameters?: { [propertyName: string]: StoredProcedureParameter };
}

/**
 * @interface
 * An interface representing DocumentDbCollectionSink.
 * A copy activity Document Database Collection sink.
 *
 */
export interface DocumentDbCollectionSink {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "DocumentDbCollectionSink";
  /**
   * @member {any} [writeBatchSize] Write batch size. Type: integer (or
   * Expression with resultType integer), minimum: 0.
   */
  writeBatchSize?: any;
  /**
   * @member {any} [writeBatchTimeout] Write batch timeout. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  writeBatchTimeout?: any;
  /**
   * @member {any} [sinkRetryCount] Sink retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sinkRetryCount?: any;
  /**
   * @member {any} [sinkRetryWait] Sink retry wait. Type: string (or Expression
   * with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sinkRetryWait?: any;
  /**
   * @member {any} [nestingSeparator] Nested properties separator. Default is .
   * (dot). Type: string (or Expression with resultType string).
   */
  nestingSeparator?: any;
}

/**
 * @interface
 * An interface representing FileSystemSink.
 * A copy activity file system sink.
 *
 */
export interface FileSystemSink {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "FileSystemSink";
  /**
   * @member {any} [writeBatchSize] Write batch size. Type: integer (or
   * Expression with resultType integer), minimum: 0.
   */
  writeBatchSize?: any;
  /**
   * @member {any} [writeBatchTimeout] Write batch timeout. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  writeBatchTimeout?: any;
  /**
   * @member {any} [sinkRetryCount] Sink retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sinkRetryCount?: any;
  /**
   * @member {any} [sinkRetryWait] Sink retry wait. Type: string (or Expression
   * with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sinkRetryWait?: any;
  /**
   * @member {CopyBehaviorType} [copyBehavior] The type of copy behavior for
   * copy sink. Possible values include: 'PreserveHierarchy',
   * 'FlattenHierarchy', 'MergeFiles'
   */
  copyBehavior?: CopyBehaviorType;
}

/**
 * @interface
 * An interface representing BlobSink.
 * A copy activity Azure Blob sink.
 *
 */
export interface BlobSink {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "BlobSink";
  /**
   * @member {any} [writeBatchSize] Write batch size. Type: integer (or
   * Expression with resultType integer), minimum: 0.
   */
  writeBatchSize?: any;
  /**
   * @member {any} [writeBatchTimeout] Write batch timeout. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  writeBatchTimeout?: any;
  /**
   * @member {any} [sinkRetryCount] Sink retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sinkRetryCount?: any;
  /**
   * @member {any} [sinkRetryWait] Sink retry wait. Type: string (or Expression
   * with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sinkRetryWait?: any;
  /**
   * @member {any} [blobWriterOverwriteFiles] Blob writer overwrite files.
   * Type: boolean (or Expression with resultType boolean).
   */
  blobWriterOverwriteFiles?: any;
  /**
   * @member {any} [blobWriterDateTimeFormat] Blob writer date time format.
   * Type: string (or Expression with resultType string).
   */
  blobWriterDateTimeFormat?: any;
  /**
   * @member {any} [blobWriterAddHeader] Blob writer add header. Type: boolean
   * (or Expression with resultType boolean).
   */
  blobWriterAddHeader?: any;
  /**
   * @member {CopyBehaviorType} [copyBehavior] The type of copy behavior for
   * copy sink. Possible values include: 'PreserveHierarchy',
   * 'FlattenHierarchy', 'MergeFiles'
   */
  copyBehavior?: CopyBehaviorType;
}

/**
 * @interface
 * An interface representing AzureTableSink.
 * A copy activity Azure Table sink.
 *
 */
export interface AzureTableSink {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AzureTableSink";
  /**
   * @member {any} [writeBatchSize] Write batch size. Type: integer (or
   * Expression with resultType integer), minimum: 0.
   */
  writeBatchSize?: any;
  /**
   * @member {any} [writeBatchTimeout] Write batch timeout. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  writeBatchTimeout?: any;
  /**
   * @member {any} [sinkRetryCount] Sink retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sinkRetryCount?: any;
  /**
   * @member {any} [sinkRetryWait] Sink retry wait. Type: string (or Expression
   * with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sinkRetryWait?: any;
  /**
   * @member {any} [azureTableDefaultPartitionKeyValue] Azure Table default
   * partition key value. Type: string (or Expression with resultType string).
   */
  azureTableDefaultPartitionKeyValue?: any;
  /**
   * @member {any} [azureTablePartitionKeyName] Azure Table partition key name.
   * Type: string (or Expression with resultType string).
   */
  azureTablePartitionKeyName?: any;
  /**
   * @member {any} [azureTableRowKeyName] Azure Table row key name. Type:
   * string (or Expression with resultType string).
   */
  azureTableRowKeyName?: any;
  /**
   * @member {any} [azureTableInsertType] Azure Table insert type. Type: string
   * (or Expression with resultType string).
   */
  azureTableInsertType?: any;
}

/**
 * @interface
 * An interface representing AzureQueueSink.
 * A copy activity Azure Queue sink.
 *
 */
export interface AzureQueueSink {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AzureQueueSink";
  /**
   * @member {any} [writeBatchSize] Write batch size. Type: integer (or
   * Expression with resultType integer), minimum: 0.
   */
  writeBatchSize?: any;
  /**
   * @member {any} [writeBatchTimeout] Write batch timeout. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  writeBatchTimeout?: any;
  /**
   * @member {any} [sinkRetryCount] Sink retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sinkRetryCount?: any;
  /**
   * @member {any} [sinkRetryWait] Sink retry wait. Type: string (or Expression
   * with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sinkRetryWait?: any;
}

/**
 * @interface
 * An interface representing SapCloudForCustomerSink.
 * A copy activity SAP Cloud for Customer sink.
 *
 */
export interface SapCloudForCustomerSink {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "SapCloudForCustomerSink";
  /**
   * @member {any} [writeBatchSize] Write batch size. Type: integer (or
   * Expression with resultType integer), minimum: 0.
   */
  writeBatchSize?: any;
  /**
   * @member {any} [writeBatchTimeout] Write batch timeout. Type: string (or
   * Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  writeBatchTimeout?: any;
  /**
   * @member {any} [sinkRetryCount] Sink retry count. Type: integer (or
   * Expression with resultType integer).
   */
  sinkRetryCount?: any;
  /**
   * @member {any} [sinkRetryWait] Sink retry wait. Type: string (or Expression
   * with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  sinkRetryWait?: any;
  /**
   * @member {SapCloudForCustomerSinkWriteBehavior} [writeBehavior] The write
   * behavior for the operation. Default is 'Insert'. Possible values include:
   * 'Insert', 'Update'
   */
  writeBehavior?: SapCloudForCustomerSinkWriteBehavior;
}

/**
 * @interface
 * An interface representing CopyActivityTypeProperties.
 * Copy activity properties.
 *
 */
export interface CopyActivityTypeProperties {
  /**
   * @member {CopySourceUnion} source Copy activity source.
   */
  source: CopySourceUnion;
  /**
   * @member {CopySinkUnion} sink Copy activity sink.
   */
  sink: CopySinkUnion;
  /**
   * @member {CopyTranslatorUnion} [translator] Copy activity translator. If
   * not specificed, tabular translator is used.
   */
  translator?: CopyTranslatorUnion;
  /**
   * @member {any} [enableStaging] Specifies whether to copy data via an
   * interim staging. Default value is false. Type: boolean (or Expression with
   * resultType boolean).
   */
  enableStaging?: any;
  /**
   * @member {StagingSettings} [stagingSettings] Specifies interim staging
   * settings when EnableStaging is true.
   */
  stagingSettings?: StagingSettings;
  /**
   * @member {any} [parallelCopies] Maximum number of concurrent sessions
   * opened on the source or sink to avoid overloading the data store. Type:
   * integer (or Expression with resultType integer), minimum: 0.
   */
  parallelCopies?: any;
  /**
   * @member {any} [dataIntegrationUnits] Maximum number of data integration
   * units that can be used to perform this data movement. Type: integer (or
   * Expression with resultType integer), minimum: 0.
   */
  dataIntegrationUnits?: any;
  /**
   * @member {any} [enableSkipIncompatibleRow] Whether to skip incompatible
   * row. Default value is false. Type: boolean (or Expression with resultType
   * boolean).
   */
  enableSkipIncompatibleRow?: any;
  /**
   * @member {RedirectIncompatibleRowSettings}
   * [redirectIncompatibleRowSettings] Redirect incompatible row settings when
   * EnableSkipIncompatibleRow is true.
   */
  redirectIncompatibleRowSettings?: RedirectIncompatibleRowSettings;
}

/**
 * @interface
 * An interface representing CopyActivity.
 * Copy activity.
 *
 */
export interface CopyActivity {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Copy";
  /**
   * @member {string} name Activity name.
   */
  name: string;
  /**
   * @member {string} [description] Activity description.
   */
  description?: string;
  /**
   * @member {ActivityDependency[]} [dependsOn] Activity depends on condition.
   */
  dependsOn?: ActivityDependency[];
  /**
   * @member {UserProperty[]} [userProperties] Activity user properties.
   */
  userProperties?: UserProperty[];
  /**
   * @member {LinkedServiceReference} [linkedServiceName] Linked service
   * reference.
   */
  linkedServiceName?: LinkedServiceReference;
  /**
   * @member {ActivityPolicy} [policy] Activity policy.
   */
  policy?: ActivityPolicy;
  /**
   * @member {CopySourceUnion} source Copy activity source.
   */
  source: CopySourceUnion;
  /**
   * @member {CopySinkUnion} sink Copy activity sink.
   */
  sink: CopySinkUnion;
  /**
   * @member {CopyTranslatorUnion} [translator] Copy activity translator. If
   * not specificed, tabular translator is used.
   */
  translator?: CopyTranslatorUnion;
  /**
   * @member {any} [enableStaging] Specifies whether to copy data via an
   * interim staging. Default value is false. Type: boolean (or Expression with
   * resultType boolean).
   */
  enableStaging?: any;
  /**
   * @member {StagingSettings} [stagingSettings] Specifies interim staging
   * settings when EnableStaging is true.
   */
  stagingSettings?: StagingSettings;
  /**
   * @member {any} [parallelCopies] Maximum number of concurrent sessions
   * opened on the source or sink to avoid overloading the data store. Type:
   * integer (or Expression with resultType integer), minimum: 0.
   */
  parallelCopies?: any;
  /**
   * @member {any} [dataIntegrationUnits] Maximum number of data integration
   * units that can be used to perform this data movement. Type: integer (or
   * Expression with resultType integer), minimum: 0.
   */
  dataIntegrationUnits?: any;
  /**
   * @member {any} [enableSkipIncompatibleRow] Whether to skip incompatible
   * row. Default value is false. Type: boolean (or Expression with resultType
   * boolean).
   */
  enableSkipIncompatibleRow?: any;
  /**
   * @member {RedirectIncompatibleRowSettings}
   * [redirectIncompatibleRowSettings] Redirect incompatible row settings when
   * EnableSkipIncompatibleRow is true.
   */
  redirectIncompatibleRowSettings?: RedirectIncompatibleRowSettings;
  /**
   * @member {DatasetReference[]} [inputs] List of inputs for the activity.
   */
  inputs?: DatasetReference[];
  /**
   * @member {DatasetReference[]} [outputs] List of outputs for the activity.
   */
  outputs?: DatasetReference[];
}

/**
 * @interface
 * An interface representing AppendVariableActivityTypeProperties.
 * AppendVariable activity properties.
 *
 */
export interface AppendVariableActivityTypeProperties {
  /**
   * @member {string} [variableName] Name of the variable whose value needs to
   * be appended to.
   */
  variableName?: string;
  /**
   * @member {any} [value] Value to be appended. Could be a static value or
   * Expression
   */
  value?: any;
}

/**
 * Contains the possible cases for ControlActivity.
 */
export type ControlActivityUnion = ControlActivity | AppendVariableActivity | SetVariableActivity | FilterActivity | UntilActivity | WaitActivity | ForEachActivity | IfConditionActivity | ExecutePipelineActivity;

/**
 * @interface
 * An interface representing ControlActivity.
 * Base class for all control activities like IfCondition, ForEach , Until.
 *
 */
export interface ControlActivity {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Container";
  /**
   * @member {string} name Activity name.
   */
  name: string;
  /**
   * @member {string} [description] Activity description.
   */
  description?: string;
  /**
   * @member {ActivityDependency[]} [dependsOn] Activity depends on condition.
   */
  dependsOn?: ActivityDependency[];
  /**
   * @member {UserProperty[]} [userProperties] Activity user properties.
   */
  userProperties?: UserProperty[];
}

/**
 * @interface
 * An interface representing AppendVariableActivity.
 * Append value for a Variable of type Array.
 *
 */
export interface AppendVariableActivity {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "AppendVariable";
  /**
   * @member {string} name Activity name.
   */
  name: string;
  /**
   * @member {string} [description] Activity description.
   */
  description?: string;
  /**
   * @member {ActivityDependency[]} [dependsOn] Activity depends on condition.
   */
  dependsOn?: ActivityDependency[];
  /**
   * @member {UserProperty[]} [userProperties] Activity user properties.
   */
  userProperties?: UserProperty[];
  /**
   * @member {string} [variableName] Name of the variable whose value needs to
   * be appended to.
   */
  variableName?: string;
  /**
   * @member {any} [value] Value to be appended. Could be a static value or
   * Expression
   */
  value?: any;
}

/**
 * @interface
 * An interface representing SetVariableActivityTypeProperties.
 * SetVariable activity properties.
 *
 */
export interface SetVariableActivityTypeProperties {
  /**
   * @member {string} [variableName] Name of the variable whose value needs to
   * be set.
   */
  variableName?: string;
  /**
   * @member {any} [value] Value to be set. Could be a static value or
   * Expression
   */
  value?: any;
}

/**
 * @interface
 * An interface representing SetVariableActivity.
 * Set value for a Variable.
 *
 */
export interface SetVariableActivity {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "SetVariable";
  /**
   * @member {string} name Activity name.
   */
  name: string;
  /**
   * @member {string} [description] Activity description.
   */
  description?: string;
  /**
   * @member {ActivityDependency[]} [dependsOn] Activity depends on condition.
   */
  dependsOn?: ActivityDependency[];
  /**
   * @member {UserProperty[]} [userProperties] Activity user properties.
   */
  userProperties?: UserProperty[];
  /**
   * @member {string} [variableName] Name of the variable whose value needs to
   * be set.
   */
  variableName?: string;
  /**
   * @member {any} [value] Value to be set. Could be a static value or
   * Expression
   */
  value?: any;
}

/**
 * @interface
 * An interface representing FilterActivityTypeProperties.
 * Filter activity properties.
 *
 */
export interface FilterActivityTypeProperties {
  /**
   * @member {Expression} items Input array on which filter should be applied.
   */
  items: Expression;
  /**
   * @member {Expression} condition Condition to be used for filtering the
   * input.
   */
  condition: Expression;
}

/**
 * @interface
 * An interface representing FilterActivity.
 * Filter and return results from input array based on the conditions.
 *
 */
export interface FilterActivity {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Filter";
  /**
   * @member {string} name Activity name.
   */
  name: string;
  /**
   * @member {string} [description] Activity description.
   */
  description?: string;
  /**
   * @member {ActivityDependency[]} [dependsOn] Activity depends on condition.
   */
  dependsOn?: ActivityDependency[];
  /**
   * @member {UserProperty[]} [userProperties] Activity user properties.
   */
  userProperties?: UserProperty[];
  /**
   * @member {Expression} items Input array on which filter should be applied.
   */
  items: Expression;
  /**
   * @member {Expression} condition Condition to be used for filtering the
   * input.
   */
  condition: Expression;
}

/**
 * @interface
 * An interface representing UntilActivityTypeProperties.
 * Until activity properties.
 *
 */
export interface UntilActivityTypeProperties {
  /**
   * @member {Expression} expression An expression that would evaluate to
   * Boolean. The loop will continue until this expression evaluates to true
   */
  expression: Expression;
  /**
   * @member {any} [timeout] Specifies the timeout for the activity to run. If
   * there is no value specified, it takes the value of TimeSpan.FromDays(7)
   * which is 1 week as default. Type: string (or Expression with resultType
   * string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   * Type: string (or Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  timeout?: any;
  /**
   * @member {ActivityUnion[]} activities List of activities to execute.
   */
  activities: ActivityUnion[];
}

/**
 * @interface
 * An interface representing UntilActivity.
 * This activity executes inner activities until the specified boolean
 * expression results to true or timeout is reached, whichever is earlier.
 *
 */
export interface UntilActivity {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Until";
  /**
   * @member {string} name Activity name.
   */
  name: string;
  /**
   * @member {string} [description] Activity description.
   */
  description?: string;
  /**
   * @member {ActivityDependency[]} [dependsOn] Activity depends on condition.
   */
  dependsOn?: ActivityDependency[];
  /**
   * @member {UserProperty[]} [userProperties] Activity user properties.
   */
  userProperties?: UserProperty[];
  /**
   * @member {Expression} expression An expression that would evaluate to
   * Boolean. The loop will continue until this expression evaluates to true
   */
  expression: Expression;
  /**
   * @member {any} [timeout] Specifies the timeout for the activity to run. If
   * there is no value specified, it takes the value of TimeSpan.FromDays(7)
   * which is 1 week as default. Type: string (or Expression with resultType
   * string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   * Type: string (or Expression with resultType string), pattern:
   * ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
   */
  timeout?: any;
  /**
   * @member {ActivityUnion[]} activities List of activities to execute.
   */
  activities: ActivityUnion[];
}

/**
 * @interface
 * An interface representing WaitActivityTypeProperties.
 * Wait activity properties.
 *
 */
export interface WaitActivityTypeProperties {
  /**
   * @member {number} waitTimeInSeconds Duration in seconds.
   */
  waitTimeInSeconds: number;
}

/**
 * @interface
 * An interface representing WaitActivity.
 * This activity suspends pipeline execution for the specified interval.
 *
 */
export interface WaitActivity {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Wait";
  /**
   * @member {string} name Activity name.
   */
  name: string;
  /**
   * @member {string} [description] Activity description.
   */
  description?: string;
  /**
   * @member {ActivityDependency[]} [dependsOn] Activity depends on condition.
   */
  dependsOn?: ActivityDependency[];
  /**
   * @member {UserProperty[]} [userProperties] Activity user properties.
   */
  userProperties?: UserProperty[];
  /**
   * @member {number} waitTimeInSeconds Duration in seconds.
   */
  waitTimeInSeconds: number;
}

/**
 * @interface
 * An interface representing ForEachActivityTypeProperties.
 * ForEach activity properties.
 *
 */
export interface ForEachActivityTypeProperties {
  /**
   * @member {boolean} [isSequential] Should the loop be executed in sequence
   * or in parallel (max 50)
   */
  isSequential?: boolean;
  /**
   * @member {number} [batchCount] Batch count to be used for controlling the
   * number of parallel execution (when isSequential is set to false).
   */
  batchCount?: number;
  /**
   * @member {Expression} items Collection to iterate.
   */
  items: Expression;
  /**
   * @member {ActivityUnion[]} activities List of activities to execute .
   */
  activities: ActivityUnion[];
}

/**
 * @interface
 * An interface representing ForEachActivity.
 * This activity is used for iterating over a collection and execute given
 * activities.
 *
 */
export interface ForEachActivity {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "ForEach";
  /**
   * @member {string} name Activity name.
   */
  name: string;
  /**
   * @member {string} [description] Activity description.
   */
  description?: string;
  /**
   * @member {ActivityDependency[]} [dependsOn] Activity depends on condition.
   */
  dependsOn?: ActivityDependency[];
  /**
   * @member {UserProperty[]} [userProperties] Activity user properties.
   */
  userProperties?: UserProperty[];
  /**
   * @member {boolean} [isSequential] Should the loop be executed in sequence
   * or in parallel (max 50)
   */
  isSequential?: boolean;
  /**
   * @member {number} [batchCount] Batch count to be used for controlling the
   * number of parallel execution (when isSequential is set to false).
   */
  batchCount?: number;
  /**
   * @member {Expression} items Collection to iterate.
   */
  items: Expression;
  /**
   * @member {ActivityUnion[]} activities List of activities to execute .
   */
  activities: ActivityUnion[];
}

/**
 * @interface
 * An interface representing IfConditionActivityTypeProperties.
 * IfCondition activity properties.
 *
 */
export interface IfConditionActivityTypeProperties {
  /**
   * @member {Expression} expression An expression that would evaluate to
   * Boolean. This is used to determine the block of activities
   * (ifTrueActivities or ifFalseActivities) that will be executed.
   */
  expression: Expression;
  /**
   * @member {ActivityUnion[]} [ifTrueActivities] List of activities to execute
   * if expression is evaluated to true. This is an optional property and if
   * not provided, the activity will exit without any action.
   */
  ifTrueActivities?: ActivityUnion[];
  /**
   * @member {ActivityUnion[]} [ifFalseActivities] List of activities to
   * execute if expression is evaluated to false. This is an optional property
   * and if not provided, the activity will exit without any action.
   */
  ifFalseActivities?: ActivityUnion[];
}

/**
 * @interface
 * An interface representing IfConditionActivity.
 * This activity evaluates a boolean expression and executes either the
 * activities under the ifTrueActivities property or the ifFalseActivities
 * property depending on the result of the expression.
 *
 */
export interface IfConditionActivity {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "IfCondition";
  /**
   * @member {string} name Activity name.
   */
  name: string;
  /**
   * @member {string} [description] Activity description.
   */
  description?: string;
  /**
   * @member {ActivityDependency[]} [dependsOn] Activity depends on condition.
   */
  dependsOn?: ActivityDependency[];
  /**
   * @member {UserProperty[]} [userProperties] Activity user properties.
   */
  userProperties?: UserProperty[];
  /**
   * @member {Expression} expression An expression that would evaluate to
   * Boolean. This is used to determine the block of activities
   * (ifTrueActivities or ifFalseActivities) that will be executed.
   */
  expression: Expression;
  /**
   * @member {ActivityUnion[]} [ifTrueActivities] List of activities to execute
   * if expression is evaluated to true. This is an optional property and if
   * not provided, the activity will exit without any action.
   */
  ifTrueActivities?: ActivityUnion[];
  /**
   * @member {ActivityUnion[]} [ifFalseActivities] List of activities to
   * execute if expression is evaluated to false. This is an optional property
   * and if not provided, the activity will exit without any action.
   */
  ifFalseActivities?: ActivityUnion[];
}

/**
 * @interface
 * An interface representing ExecutePipelineActivityTypeProperties.
 * Execute pipeline activity properties.
 *
 */
export interface ExecutePipelineActivityTypeProperties {
  /**
   * @member {PipelineReference} pipelineProperty Pipeline reference.
   */
  pipelineProperty: PipelineReference;
  /**
   * @member {{ [propertyName: string]: any }} [parameters] Pipeline
   * parameters.
   */
  parameters?: { [propertyName: string]: any };
  /**
   * @member {boolean} [waitOnCompletion] Defines whether activity execution
   * will wait for the dependent pipeline execution to finish. Default is
   * false.
   */
  waitOnCompletion?: boolean;
}

/**
 * @interface
 * An interface representing ExecutePipelineActivity.
 * Execute pipeline activity.
 *
 */
export interface ExecutePipelineActivity {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "ExecutePipeline";
  /**
   * @member {string} name Activity name.
   */
  name: string;
  /**
   * @member {string} [description] Activity description.
   */
  description?: string;
  /**
   * @member {ActivityDependency[]} [dependsOn] Activity depends on condition.
   */
  dependsOn?: ActivityDependency[];
  /**
   * @member {UserProperty[]} [userProperties] Activity user properties.
   */
  userProperties?: UserProperty[];
  /**
   * @member {PipelineReference} pipelineProperty Pipeline reference.
   */
  pipelineProperty: PipelineReference;
  /**
   * @member {{ [propertyName: string]: any }} [parameters] Pipeline
   * parameters.
   */
  parameters?: { [propertyName: string]: any };
  /**
   * @member {boolean} [waitOnCompletion] Defines whether activity execution
   * will wait for the dependent pipeline execution to finish. Default is
   * false.
   */
  waitOnCompletion?: boolean;
}

/**
 * @interface
 * An interface representing LinkedIntegrationRuntime.
 * The linked integration runtime information.
 *
 */
export interface LinkedIntegrationRuntime {
  /**
   * @member {string} [name] The name of the linked integration runtime.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [subscriptionId] The subscription ID for which the linked
   * integration runtime belong to.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly subscriptionId?: string;
  /**
   * @member {string} [dataFactoryName] The name of the data factory for which
   * the linked integration runtime belong to.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly dataFactoryName?: string;
  /**
   * @member {string} [dataFactoryLocation] The location of the data factory
   * for which the linked integration runtime belong to.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly dataFactoryLocation?: string;
  /**
   * @member {Date} [createTime] The creating time of the linked integration
   * runtime.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly createTime?: Date;
}

/**
 * @interface
 * An interface representing SelfHostedIntegrationRuntimeNode.
 * Properties of Self-hosted integration runtime node.
 *
 */
export interface SelfHostedIntegrationRuntimeNode {
  /**
   * @member {string} [nodeName] Name of the integration runtime node.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nodeName?: string;
  /**
   * @member {string} [machineName] Machine name of the integration runtime
   * node.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly machineName?: string;
  /**
   * @member {string} [hostServiceUri] URI for the host machine of the
   * integration runtime.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly hostServiceUri?: string;
  /**
   * @member {SelfHostedIntegrationRuntimeNodeStatus} [status] Status of the
   * integration runtime node. Possible values include: 'NeedRegistration',
   * 'Online', 'Limited', 'Offline', 'Upgrading', 'Initializing',
   * 'InitializeFailed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly status?: SelfHostedIntegrationRuntimeNodeStatus;
  /**
   * @member {{ [propertyName: string]: string }} [capabilities] The
   * integration runtime capabilities dictionary
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly capabilities?: { [propertyName: string]: string };
  /**
   * @member {string} [versionStatus] Status of the integration runtime node
   * version.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly versionStatus?: string;
  /**
   * @member {string} [version] Version of the integration runtime node.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly version?: string;
  /**
   * @member {Date} [registerTime] The time at which the integration runtime
   * node was registered in ISO8601 format.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly registerTime?: Date;
  /**
   * @member {Date} [lastConnectTime] The most recent time at which the
   * integration runtime was connected in ISO8601 format.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly lastConnectTime?: Date;
  /**
   * @member {Date} [expiryTime] The time at which the integration runtime will
   * expire in ISO8601 format.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly expiryTime?: Date;
  /**
   * @member {Date} [lastStartTime] The time the node last started up.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly lastStartTime?: Date;
  /**
   * @member {Date} [lastStopTime] The integration runtime node last stop time.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly lastStopTime?: Date;
  /**
   * @member {IntegrationRuntimeUpdateResult} [lastUpdateResult] The result of
   * the last integration runtime node update. Possible values include: 'None',
   * 'Succeed', 'Fail'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly lastUpdateResult?: IntegrationRuntimeUpdateResult;
  /**
   * @member {Date} [lastStartUpdateTime] The last time for the integration
   * runtime node update start.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly lastStartUpdateTime?: Date;
  /**
   * @member {Date} [lastEndUpdateTime] The last time for the integration
   * runtime node update end.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly lastEndUpdateTime?: Date;
  /**
   * @member {boolean} [isActiveDispatcher] Indicates whether this node is the
   * active dispatcher for integration runtime requests.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly isActiveDispatcher?: boolean;
  /**
   * @member {number} [concurrentJobsLimit] Maximum concurrent jobs on the
   * integration runtime node.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly concurrentJobsLimit?: number;
  /**
   * @member {number} [maxConcurrentJobs] The maximum concurrent jobs in this
   * integration runtime.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly maxConcurrentJobs?: number;
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * @interface
 * An interface representing SelfHostedIntegrationRuntimeStatusTypeProperties.
 * Self-hosted integration runtime status type properties.
 *
 */
export interface SelfHostedIntegrationRuntimeStatusTypeProperties {
  /**
   * @member {Date} [createTime] The time at which the integration runtime was
   * created, in ISO8601 format.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly createTime?: Date;
  /**
   * @member {string} [taskQueueId] The task queue id of the integration
   * runtime.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly taskQueueId?: string;
  /**
   * @member {IntegrationRuntimeInternalChannelEncryptionMode}
   * [internalChannelEncryption] It is used to set the encryption mode for
   * node-node communication channel (when more than 2 self-hosted integration
   * runtime nodes exist). Possible values include: 'NotSet', 'SslEncrypted',
   * 'NotEncrypted'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly internalChannelEncryption?: IntegrationRuntimeInternalChannelEncryptionMode;
  /**
   * @member {string} [version] Version of the integration runtime.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly version?: string;
  /**
   * @member {SelfHostedIntegrationRuntimeNode[]} [nodes] The list of nodes for
   * this integration runtime.
   */
  nodes?: SelfHostedIntegrationRuntimeNode[];
  /**
   * @member {Date} [scheduledUpdateDate] The date at which the integration
   * runtime will be scheduled to update, in ISO8601 format.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly scheduledUpdateDate?: Date;
  /**
   * @member {string} [updateDelayOffset] The time in the date scheduled by
   * service to update the integration runtime, e.g., PT03H is 3 hours
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly updateDelayOffset?: string;
  /**
   * @member {string} [localTimeZoneOffset] The local time zone offset in
   * hours.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly localTimeZoneOffset?: string;
  /**
   * @member {{ [propertyName: string]: string }} [capabilities] Object with
   * additional information about integration runtime capabilities.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly capabilities?: { [propertyName: string]: string };
  /**
   * @member {string[]} [serviceUrls] The URLs for the services used in
   * integration runtime backend service.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly serviceUrls?: string[];
  /**
   * @member {IntegrationRuntimeAutoUpdate} [autoUpdate] Whether Self-hosted
   * integration runtime auto update has been turned on. Possible values
   * include: 'On', 'Off'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly autoUpdate?: IntegrationRuntimeAutoUpdate;
  /**
   * @member {string} [versionStatus] Status of the integration runtime
   * version.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly versionStatus?: string;
  /**
   * @member {LinkedIntegrationRuntime[]} [links] The list of linked
   * integration runtimes that are created to share with this integration
   * runtime.
   */
  links?: LinkedIntegrationRuntime[];
  /**
   * @member {string} [pushedVersion] The version that the integration runtime
   * is going to update to.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly pushedVersion?: string;
  /**
   * @member {string} [latestVersion] The latest version on download center.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly latestVersion?: string;
  /**
   * @member {Date} [autoUpdateETA] The estimated time when the self-hosted
   * integration runtime will be updated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly autoUpdateETA?: Date;
}

/**
 * @interface
 * An interface representing SelfHostedIntegrationRuntimeStatus.
 * Self-hosted integration runtime status.
 *
 */
export interface SelfHostedIntegrationRuntimeStatus {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "SelfHosted";
  /**
   * @member {string} [dataFactoryName] The data factory name which the
   * integration runtime belong to.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly dataFactoryName?: string;
  /**
   * @member {IntegrationRuntimeState} [state] The state of integration
   * runtime. Possible values include: 'Initial', 'Stopped', 'Started',
   * 'Starting', 'Stopping', 'NeedRegistration', 'Online', 'Limited',
   * 'Offline', 'AccessDenied'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: IntegrationRuntimeState;
  /**
   * @member {Date} [createTime] The time at which the integration runtime was
   * created, in ISO8601 format.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly createTime?: Date;
  /**
   * @member {string} [taskQueueId] The task queue id of the integration
   * runtime.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly taskQueueId?: string;
  /**
   * @member {IntegrationRuntimeInternalChannelEncryptionMode}
   * [internalChannelEncryption] It is used to set the encryption mode for
   * node-node communication channel (when more than 2 self-hosted integration
   * runtime nodes exist). Possible values include: 'NotSet', 'SslEncrypted',
   * 'NotEncrypted'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly internalChannelEncryption?: IntegrationRuntimeInternalChannelEncryptionMode;
  /**
   * @member {string} [version] Version of the integration runtime.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly version?: string;
  /**
   * @member {SelfHostedIntegrationRuntimeNode[]} [nodes] The list of nodes for
   * this integration runtime.
   */
  nodes?: SelfHostedIntegrationRuntimeNode[];
  /**
   * @member {Date} [scheduledUpdateDate] The date at which the integration
   * runtime will be scheduled to update, in ISO8601 format.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly scheduledUpdateDate?: Date;
  /**
   * @member {string} [updateDelayOffset] The time in the date scheduled by
   * service to update the integration runtime, e.g., PT03H is 3 hours
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly updateDelayOffset?: string;
  /**
   * @member {string} [localTimeZoneOffset] The local time zone offset in
   * hours.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly localTimeZoneOffset?: string;
  /**
   * @member {{ [propertyName: string]: string }} [capabilities] Object with
   * additional information about integration runtime capabilities.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly capabilities?: { [propertyName: string]: string };
  /**
   * @member {string[]} [serviceUrls] The URLs for the services used in
   * integration runtime backend service.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly serviceUrls?: string[];
  /**
   * @member {IntegrationRuntimeAutoUpdate} [autoUpdate] Whether Self-hosted
   * integration runtime auto update has been turned on. Possible values
   * include: 'On', 'Off'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly autoUpdate?: IntegrationRuntimeAutoUpdate;
  /**
   * @member {string} [versionStatus] Status of the integration runtime
   * version.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly versionStatus?: string;
  /**
   * @member {LinkedIntegrationRuntime[]} [links] The list of linked
   * integration runtimes that are created to share with this integration
   * runtime.
   */
  links?: LinkedIntegrationRuntime[];
  /**
   * @member {string} [pushedVersion] The version that the integration runtime
   * is going to update to.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly pushedVersion?: string;
  /**
   * @member {string} [latestVersion] The latest version on download center.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly latestVersion?: string;
  /**
   * @member {Date} [autoUpdateETA] The estimated time when the self-hosted
   * integration runtime will be updated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly autoUpdateETA?: Date;
}

/**
 * @interface
 * An interface representing ManagedIntegrationRuntimeOperationResult.
 * Properties of managed integration runtime operation result.
 *
 */
export interface ManagedIntegrationRuntimeOperationResult {
  /**
   * @member {string} [type] The operation type. Could be start or stop.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {Date} [startTime] The start time of the operation.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly startTime?: Date;
  /**
   * @member {string} [result] The operation result.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly result?: string;
  /**
   * @member {string} [errorCode] The error code.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly errorCode?: string;
  /**
   * @member {string[]} [parameters] Managed integration runtime error
   * parameters.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly parameters?: string[];
  /**
   * @member {string} [activityId] The activity id for the operation request.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly activityId?: string;
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * @interface
 * An interface representing ManagedIntegrationRuntimeError.
 * Error definition for managed integration runtime.
 *
 */
export interface ManagedIntegrationRuntimeError {
  /**
   * @member {Date} [time] The time when the error occurred.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly time?: Date;
  /**
   * @member {string} [code] Error code.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly code?: string;
  /**
   * @member {string[]} [parameters] Managed integration runtime error
   * parameters.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly parameters?: string[];
  /**
   * @member {string} [message] Error message.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly message?: string;
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * @interface
 * An interface representing ManagedIntegrationRuntimeNode.
 * Properties of integration runtime node.
 *
 */
export interface ManagedIntegrationRuntimeNode {
  /**
   * @member {string} [nodeId] The managed integration runtime node id.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nodeId?: string;
  /**
   * @member {ManagedIntegrationRuntimeNodeStatus} [status] The managed
   * integration runtime node status. Possible values include: 'Starting',
   * 'Available', 'Recycling', 'Unavailable'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly status?: ManagedIntegrationRuntimeNodeStatus;
  /**
   * @member {ManagedIntegrationRuntimeError[]} [errors] The errors that
   * occurred on this integration runtime node.
   */
  errors?: ManagedIntegrationRuntimeError[];
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * @interface
 * An interface representing ManagedIntegrationRuntimeStatusTypeProperties.
 * Managed integration runtime status type properties.
 *
 */
export interface ManagedIntegrationRuntimeStatusTypeProperties {
  /**
   * @member {Date} [createTime] The time at which the integration runtime was
   * created, in ISO8601 format.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly createTime?: Date;
  /**
   * @member {ManagedIntegrationRuntimeNode[]} [nodes] The list of nodes for
   * managed integration runtime.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nodes?: ManagedIntegrationRuntimeNode[];
  /**
   * @member {ManagedIntegrationRuntimeError[]} [otherErrors] The errors that
   * occurred on this integration runtime.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly otherErrors?: ManagedIntegrationRuntimeError[];
  /**
   * @member {ManagedIntegrationRuntimeOperationResult} [lastOperation] The
   * last operation result that occurred on this integration runtime.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly lastOperation?: ManagedIntegrationRuntimeOperationResult;
}

/**
 * @interface
 * An interface representing ManagedIntegrationRuntimeStatus.
 * Managed integration runtime status.
 *
 */
export interface ManagedIntegrationRuntimeStatus {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Managed";
  /**
   * @member {string} [dataFactoryName] The data factory name which the
   * integration runtime belong to.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly dataFactoryName?: string;
  /**
   * @member {IntegrationRuntimeState} [state] The state of integration
   * runtime. Possible values include: 'Initial', 'Stopped', 'Started',
   * 'Starting', 'Stopping', 'NeedRegistration', 'Online', 'Limited',
   * 'Offline', 'AccessDenied'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: IntegrationRuntimeState;
  /**
   * @member {Date} [createTime] The time at which the integration runtime was
   * created, in ISO8601 format.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly createTime?: Date;
  /**
   * @member {ManagedIntegrationRuntimeNode[]} [nodes] The list of nodes for
   * managed integration runtime.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nodes?: ManagedIntegrationRuntimeNode[];
  /**
   * @member {ManagedIntegrationRuntimeError[]} [otherErrors] The errors that
   * occurred on this integration runtime.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly otherErrors?: ManagedIntegrationRuntimeError[];
  /**
   * @member {ManagedIntegrationRuntimeOperationResult} [lastOperation] The
   * last operation result that occurred on this integration runtime.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly lastOperation?: ManagedIntegrationRuntimeOperationResult;
}

/**
 * Contains the possible cases for LinkedIntegrationRuntimeType.
 */
export type LinkedIntegrationRuntimeTypeUnion = LinkedIntegrationRuntimeType | LinkedIntegrationRuntimeRbacAuthorization | LinkedIntegrationRuntimeKeyAuthorization;

/**
 * @interface
 * An interface representing LinkedIntegrationRuntimeType.
 * The base definition of a linked integration runtime.
 *
 */
export interface LinkedIntegrationRuntimeType {
  /**
   * @member {string} authorizationType Polymorphic Discriminator
   */
  authorizationType: "LinkedIntegrationRuntimeType";
}

/**
 * @interface
 * An interface representing LinkedIntegrationRuntimeRbacAuthorization.
 * The role based access control (RBAC) authorization type integration runtime.
 *
 */
export interface LinkedIntegrationRuntimeRbacAuthorization {
  /**
   * @member {string} authorizationType Polymorphic Discriminator
   */
  authorizationType: "RBAC";
  /**
   * @member {string} resourceId The resource identifier of the integration
   * runtime to be shared.
   */
  resourceId: string;
}

/**
 * @interface
 * An interface representing LinkedIntegrationRuntimeKeyAuthorization.
 * The key authorization type integration runtime.
 *
 */
export interface LinkedIntegrationRuntimeKeyAuthorization {
  /**
   * @member {string} authorizationType Polymorphic Discriminator
   */
  authorizationType: "Key";
  /**
   * @member {SecureString} key The key used for authorization.
   */
  key: SecureString;
}

/**
 * @interface
 * An interface representing SelfHostedIntegrationRuntimeTypeProperties.
 * The self-hosted integration runtime properties.
 *
 */
export interface SelfHostedIntegrationRuntimeTypeProperties {
  /**
   * @member {LinkedIntegrationRuntimeTypeUnion} [linkedInfo]
   */
  linkedInfo?: LinkedIntegrationRuntimeTypeUnion;
}

/**
 * @interface
 * An interface representing SelfHostedIntegrationRuntime.
 * Self-hosted integration runtime.
 *
 */
export interface SelfHostedIntegrationRuntime {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "SelfHosted";
  /**
   * @member {string} [description] Integration runtime description.
   */
  description?: string;
  /**
   * @member {LinkedIntegrationRuntimeTypeUnion} [linkedInfo]
   */
  linkedInfo?: LinkedIntegrationRuntimeTypeUnion;
}

/**
 * @interface
 * An interface representing IntegrationRuntimeCustomSetupScriptProperties.
 * Custom setup script properties for a managed dedicated integration runtime.
 *
 */
export interface IntegrationRuntimeCustomSetupScriptProperties {
  /**
   * @member {string} [blobContainerUri] The URI of the Azure blob container
   * that contains the custom setup script.
   */
  blobContainerUri?: string;
  /**
   * @member {SecureString} [sasToken] The SAS token of the Azure blob
   * container.
   */
  sasToken?: SecureString;
}

/**
 * @interface
 * An interface representing IntegrationRuntimeSsisCatalogInfo.
 * Catalog information for managed dedicated integration runtime.
 *
 */
export interface IntegrationRuntimeSsisCatalogInfo {
  /**
   * @member {string} [catalogServerEndpoint] The catalog database server URL.
   */
  catalogServerEndpoint?: string;
  /**
   * @member {string} [catalogAdminUserName] The administrator user name of
   * catalog database.
   */
  catalogAdminUserName?: string;
  /**
   * @member {SecureString} [catalogAdminPassword] The password of the
   * administrator user account of the catalog database.
   */
  catalogAdminPassword?: SecureString;
  /**
   * @member {IntegrationRuntimeSsisCatalogPricingTier} [catalogPricingTier]
   * The pricing tier for the catalog database. The valid values could be found
   * in https://azure.microsoft.com/en-us/pricing/details/sql-database/.
   * Possible values include: 'Basic', 'Standard', 'Premium', 'PremiumRS'
   */
  catalogPricingTier?: IntegrationRuntimeSsisCatalogPricingTier;
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * @interface
 * An interface representing IntegrationRuntimeSsisProperties.
 * SSIS properties for managed integration runtime.
 *
 */
export interface IntegrationRuntimeSsisProperties {
  /**
   * @member {IntegrationRuntimeSsisCatalogInfo} [catalogInfo] Catalog
   * information for managed dedicated integration runtime.
   */
  catalogInfo?: IntegrationRuntimeSsisCatalogInfo;
  /**
   * @member {IntegrationRuntimeLicenseType} [licenseType] License type for
   * bringing your own license scenario. Possible values include: 'BasePrice',
   * 'LicenseIncluded'
   */
  licenseType?: IntegrationRuntimeLicenseType;
  /**
   * @member {IntegrationRuntimeCustomSetupScriptProperties}
   * [customSetupScriptProperties] Custom setup script properties for a managed
   * dedicated integration runtime.
   */
  customSetupScriptProperties?: IntegrationRuntimeCustomSetupScriptProperties;
  /**
   * @member {IntegrationRuntimeEdition} [edition] The edition for the SSIS
   * Integration Runtime. Possible values include: 'Standard', 'Enterprise'
   */
  edition?: IntegrationRuntimeEdition;
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * @interface
 * An interface representing IntegrationRuntimeVNetProperties.
 * VNet properties for managed integration runtime.
 *
 */
export interface IntegrationRuntimeVNetProperties {
  /**
   * @member {string} [vNetId] The ID of the VNet that this integration runtime
   * will join.
   */
  vNetId?: string;
  /**
   * @member {string} [subnet] The name of the subnet this integration runtime
   * will join.
   */
  subnet?: string;
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * @interface
 * An interface representing IntegrationRuntimeComputeProperties.
 * The compute resource properties for managed integration runtime.
 *
 */
export interface IntegrationRuntimeComputeProperties {
  /**
   * @member {string} [location] The location for managed integration runtime.
   * The supported regions could be found on
   * https://docs.microsoft.com/en-us/azure/data-factory/data-factory-data-movement-activities
   */
  location?: string;
  /**
   * @member {string} [nodeSize] The node size requirement to managed
   * integration runtime.
   */
  nodeSize?: string;
  /**
   * @member {number} [numberOfNodes] The required number of nodes for managed
   * integration runtime.
   */
  numberOfNodes?: number;
  /**
   * @member {number} [maxParallelExecutionsPerNode] Maximum parallel
   * executions count per node for managed integration runtime.
   */
  maxParallelExecutionsPerNode?: number;
  /**
   * @member {IntegrationRuntimeVNetProperties} [vNetProperties] VNet
   * properties for managed integration runtime.
   */
  vNetProperties?: IntegrationRuntimeVNetProperties;
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * @interface
 * An interface representing ManagedIntegrationRuntimeTypeProperties.
 * Managed integration runtime type properties.
 *
 */
export interface ManagedIntegrationRuntimeTypeProperties {
  /**
   * @member {IntegrationRuntimeComputeProperties} [computeProperties] The
   * compute resource for managed integration runtime.
   */
  computeProperties?: IntegrationRuntimeComputeProperties;
  /**
   * @member {IntegrationRuntimeSsisProperties} [ssisProperties] SSIS
   * properties for managed integration runtime.
   */
  ssisProperties?: IntegrationRuntimeSsisProperties;
}

/**
 * @interface
 * An interface representing ManagedIntegrationRuntime.
 * Managed integration runtime, including managed elastic and managed dedicated
 * integration runtimes.
 *
 */
export interface ManagedIntegrationRuntime {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Managed";
  /**
   * @member {string} [description] Integration runtime description.
   */
  description?: string;
  /**
   * @member {IntegrationRuntimeState} [state] Integration runtime state, only
   * valid for managed dedicated integration runtime. Possible values include:
   * 'Initial', 'Stopped', 'Started', 'Starting', 'Stopping',
   * 'NeedRegistration', 'Online', 'Limited', 'Offline', 'AccessDenied'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: IntegrationRuntimeState;
  /**
   * @member {IntegrationRuntimeComputeProperties} [computeProperties] The
   * compute resource for managed integration runtime.
   */
  computeProperties?: IntegrationRuntimeComputeProperties;
  /**
   * @member {IntegrationRuntimeSsisProperties} [ssisProperties] SSIS
   * properties for managed integration runtime.
   */
  ssisProperties?: IntegrationRuntimeSsisProperties;
}

/**
 * @interface
 * An interface representing IntegrationRuntimeNodeIpAddress.
 * The IP address of self-hosted integration runtime node.
 *
 */
export interface IntegrationRuntimeNodeIpAddress {
  /**
   * @member {string} [ipAddress] The IP address of self-hosted integration
   * runtime node.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly ipAddress?: string;
}

/**
 * @interface
 * An interface representing IntegrationRuntimeNodeMonitoringData.
 * Monitoring data for integration runtime node.
 *
 */
export interface IntegrationRuntimeNodeMonitoringData {
  /**
   * @member {string} [nodeName] Name of the integration runtime node.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nodeName?: string;
  /**
   * @member {number} [availableMemoryInMB] Available memory (MB) on the
   * integration runtime node.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly availableMemoryInMB?: number;
  /**
   * @member {number} [cpuUtilization] CPU percentage on the integration
   * runtime node.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly cpuUtilization?: number;
  /**
   * @member {number} [concurrentJobsLimit] Maximum concurrent jobs on the
   * integration runtime node.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly concurrentJobsLimit?: number;
  /**
   * @member {number} [concurrentJobsRunning] The number of jobs currently
   * running on the integration runtime node.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly concurrentJobsRunning?: number;
  /**
   * @member {number} [maxConcurrentJobs] The maximum concurrent jobs in this
   * integration runtime.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly maxConcurrentJobs?: number;
  /**
   * @member {number} [sentBytes] Sent bytes on the integration runtime node.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sentBytes?: number;
  /**
   * @member {number} [receivedBytes] Received bytes on the integration runtime
   * node.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly receivedBytes?: number;
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * @interface
 * An interface representing IntegrationRuntimeMonitoringData.
 * Get monitoring data response.
 *
 */
export interface IntegrationRuntimeMonitoringData {
  /**
   * @member {string} [name] Integration runtime name.
   */
  name?: string;
  /**
   * @member {IntegrationRuntimeNodeMonitoringData[]} [nodes] Integration
   * runtime node monitoring data.
   */
  nodes?: IntegrationRuntimeNodeMonitoringData[];
}

/**
 * @interface
 * An interface representing IntegrationRuntimeAuthKeys.
 * The integration runtime authentication keys.
 *
 */
export interface IntegrationRuntimeAuthKeys {
  /**
   * @member {string} [authKey1] The primary integration runtime authentication
   * key.
   */
  authKey1?: string;
  /**
   * @member {string} [authKey2] The secondary integration runtime
   * authentication key.
   */
  authKey2?: string;
}

/**
 * @interface
 * An interface representing IntegrationRuntimeRegenerateKeyParameters.
 * Parameters to regenerate the authentication key.
 *
 */
export interface IntegrationRuntimeRegenerateKeyParameters {
  /**
   * @member {IntegrationRuntimeAuthKeyName} [keyName] The name of the
   * authentication key to regenerate. Possible values include: 'authKey1',
   * 'authKey2'
   */
  keyName?: IntegrationRuntimeAuthKeyName;
}

/**
 * @interface
 * An interface representing IntegrationRuntimeConnectionInfo.
 * Connection information for encrypting the on-premises data source
 * credentials.
 *
 */
export interface IntegrationRuntimeConnectionInfo {
  /**
   * @member {string} [serviceToken] The token generated in service. Callers
   * use this token to authenticate to integration runtime.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly serviceToken?: string;
  /**
   * @member {string} [identityCertThumbprint] The integration runtime SSL
   * certificate thumbprint. Click-Once application uses it to do server
   * validation.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly identityCertThumbprint?: string;
  /**
   * @member {string} [hostServiceUri] The on-premises integration runtime host
   * URL.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly hostServiceUri?: string;
  /**
   * @member {string} [version] The integration runtime version.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly version?: string;
  /**
   * @member {string} [publicKey] The public key for encrypting a credential
   * when transferring the credential to the integration runtime.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly publicKey?: string;
  /**
   * @member {boolean} [isIdentityCertExprired] Whether the identity
   * certificate is expired.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly isIdentityCertExprired?: boolean;
  /**
   * @property Describes unknown properties. The value of an unknown property
   * can be of "any" type.
   */
  [property: string]: any;
}

/**
 * @interface
 * An interface representing FactoriesCreateOrUpdateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface FactoriesCreateOrUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [ifMatch] ETag of the factory entity. Should only be
   * specified for update, for which it should match existing entity or can be
   * * for unconditional update.
   */
  ifMatch?: string;
}

/**
 * @interface
 * An interface representing FactoriesGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface FactoriesGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [ifNoneMatch] ETag of the factory entity. Should only be
   * specified for get. If the ETag matches the existing entity tag, or if *
   * was provided, then no content will be returned.
   */
  ifNoneMatch?: string;
}

/**
 * @interface
 * An interface representing IntegrationRuntimesCreateOrUpdateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface IntegrationRuntimesCreateOrUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [ifMatch] ETag of the integration runtime entity. Should
   * only be specified for update, for which it should match existing entity or
   * can be * for unconditional update.
   */
  ifMatch?: string;
}

/**
 * @interface
 * An interface representing IntegrationRuntimesGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface IntegrationRuntimesGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [ifNoneMatch] ETag of the integration runtime entity.
   * Should only be specified for get. If the ETag matches the existing entity
   * tag, or if * was provided, then no content will be returned.
   */
  ifNoneMatch?: string;
}

/**
 * @interface
 * An interface representing LinkedServicesCreateOrUpdateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface LinkedServicesCreateOrUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [ifMatch] ETag of the linkedService entity.  Should only
   * be specified for update, for which it should match existing entity or can
   * be * for unconditional update.
   */
  ifMatch?: string;
}

/**
 * @interface
 * An interface representing LinkedServicesGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface LinkedServicesGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [ifNoneMatch] ETag of the linked service entity. Should
   * only be specified for get. If the ETag matches the existing entity tag, or
   * if * was provided, then no content will be returned.
   */
  ifNoneMatch?: string;
}

/**
 * @interface
 * An interface representing DatasetsCreateOrUpdateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface DatasetsCreateOrUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [ifMatch] ETag of the dataset entity.  Should only be
   * specified for update, for which it should match existing entity or can be
   * * for unconditional update.
   */
  ifMatch?: string;
}

/**
 * @interface
 * An interface representing DatasetsGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface DatasetsGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [ifNoneMatch] ETag of the dataset entity. Should only be
   * specified for get. If the ETag matches the existing entity tag, or if *
   * was provided, then no content will be returned.
   */
  ifNoneMatch?: string;
}

/**
 * @interface
 * An interface representing PipelinesCreateOrUpdateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface PipelinesCreateOrUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [ifMatch] ETag of the pipeline entity.  Should only be
   * specified for update, for which it should match existing entity or can be
   * * for unconditional update.
   */
  ifMatch?: string;
}

/**
 * @interface
 * An interface representing PipelinesGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface PipelinesGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [ifNoneMatch] ETag of the pipeline entity. Should only be
   * specified for get. If the ETag matches the existing entity tag, or if *
   * was provided, then no content will be returned.
   */
  ifNoneMatch?: string;
}

/**
 * @interface
 * An interface representing PipelinesCreateRunOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface PipelinesCreateRunOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [referencePipelineRunId] The pipeline run identifier. If
   * run ID is specified the parameters of the the specified run will be used
   * to create a new run.
   */
  referencePipelineRunId?: string;
  /**
   * @member {{ [propertyName: string]: any }} [parameters] Parameters of the
   * pipeline run. These parameters will be used only if the runId is not
   * specified.
   */
  parameters?: { [propertyName: string]: any };
}

/**
 * @interface
 * An interface representing PipelineRunsCancelOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface PipelineRunsCancelOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {boolean} [isRecursive] If true, cancel all the Child pipelines
   * that are triggered by the current pipeline.
   */
  isRecursive?: boolean;
}

/**
 * @interface
 * An interface representing TriggersCreateOrUpdateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface TriggersCreateOrUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [ifMatch] ETag of the trigger entity.  Should only be
   * specified for update, for which it should match existing entity or can be
   * * for unconditional update.
   */
  ifMatch?: string;
}

/**
 * @interface
 * An interface representing TriggersGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface TriggersGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [ifNoneMatch] ETag of the trigger entity. Should only be
   * specified for get. If the ETag matches the existing entity tag, or if *
   * was provided, then no content will be returned.
   */
  ifNoneMatch?: string;
}

/**
 * @interface
 * An interface representing DataFactoryManagementClientOptions.
 * @extends AzureServiceClientOptions
 */
export interface DataFactoryManagementClientOptions extends AzureServiceClientOptions {
  /**
   * @member {string} [baseUri]
   */
  baseUri?: string;
}


/**
 * @interface
 * An interface representing the OperationListResponse.
 * A list of operations that can be performed by the Data Factory service.
 *
 * @extends Array<Operation>
 */
export interface OperationListResponse extends Array<Operation> {
  /**
   * @member {string} [nextLink] The link to the next page of results, if any
   * remaining results exist.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the FactoryListResponse.
 * A list of factory resources.
 *
 * @extends Array<Factory>
 */
export interface FactoryListResponse extends Array<Factory> {
  /**
   * @member {string} [nextLink] The link to the next page of results, if any
   * remaining results exist.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the IntegrationRuntimeListResponse.
 * A list of integration runtime resources.
 *
 * @extends Array<IntegrationRuntimeResource>
 */
export interface IntegrationRuntimeListResponse extends Array<IntegrationRuntimeResource> {
  /**
   * @member {string} [nextLink] The link to the next page of results, if any
   * remaining results exist.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the LinkedServiceListResponse.
 * A list of linked service resources.
 *
 * @extends Array<LinkedServiceResource>
 */
export interface LinkedServiceListResponse extends Array<LinkedServiceResource> {
  /**
   * @member {string} [nextLink] The link to the next page of results, if any
   * remaining results exist.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the DatasetListResponse.
 * A list of dataset resources.
 *
 * @extends Array<DatasetResource>
 */
export interface DatasetListResponse extends Array<DatasetResource> {
  /**
   * @member {string} [nextLink] The link to the next page of results, if any
   * remaining results exist.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the PipelineListResponse.
 * A list of pipeline resources.
 *
 * @extends Array<PipelineResource>
 */
export interface PipelineListResponse extends Array<PipelineResource> {
  /**
   * @member {string} [nextLink] The link to the next page of results, if any
   * remaining results exist.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the TriggerListResponse.
 * A list of trigger resources.
 *
 * @extends Array<TriggerResource>
 */
export interface TriggerListResponse extends Array<TriggerResource> {
  /**
   * @member {string} [nextLink] The link to the next page of results, if any
   * remaining results exist.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the RerunTriggerListResponse.
 * A list of rerun triggers.
 *
 * @extends Array<RerunTriggerResource>
 */
export interface RerunTriggerListResponse extends Array<RerunTriggerResource> {
  /**
   * @member {string} [nextLink] The continuation token for getting the next
   * page of results, if any remaining results exist, null otherwise.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * Defines values for IntegrationRuntimeState.
 * Possible values include: 'Initial', 'Stopped', 'Started', 'Starting',
 * 'Stopping', 'NeedRegistration', 'Online', 'Limited', 'Offline',
 * 'AccessDenied'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: IntegrationRuntimeState =
 * <IntegrationRuntimeState>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum IntegrationRuntimeState {
  Initial = 'Initial',
  Stopped = 'Stopped',
  Started = 'Started',
  Starting = 'Starting',
  Stopping = 'Stopping',
  NeedRegistration = 'NeedRegistration',
  Online = 'Online',
  Limited = 'Limited',
  Offline = 'Offline',
  AccessDenied = 'AccessDenied',
}

/**
 * Defines values for IntegrationRuntimeAutoUpdate.
 * Possible values include: 'On', 'Off'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: IntegrationRuntimeAutoUpdate =
 * <IntegrationRuntimeAutoUpdate>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum IntegrationRuntimeAutoUpdate {
  On = 'On',
  Off = 'Off',
}

/**
 * Defines values for ParameterType.
 * Possible values include: 'Object', 'String', 'Int', 'Float', 'Bool',
 * 'Array', 'SecureString'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ParameterType =
 * <ParameterType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum ParameterType {
  Object = 'Object',
  String = 'String',
  Int = 'Int',
  Float = 'Float',
  Bool = 'Bool',
  Array = 'Array',
  SecureString = 'SecureString',
}

/**
 * Defines values for DependencyCondition.
 * Possible values include: 'Succeeded', 'Failed', 'Skipped', 'Completed'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: DependencyCondition =
 * <DependencyCondition>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum DependencyCondition {
  Succeeded = 'Succeeded',
  Failed = 'Failed',
  Skipped = 'Skipped',
  Completed = 'Completed',
}

/**
 * Defines values for VariableType.
 * Possible values include: 'String', 'Bool', 'Array'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: VariableType =
 * <VariableType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum VariableType {
  String = 'String',
  Bool = 'Bool',
  Array = 'Array',
}

/**
 * Defines values for TriggerRuntimeState.
 * Possible values include: 'Started', 'Stopped', 'Disabled'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: TriggerRuntimeState =
 * <TriggerRuntimeState>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum TriggerRuntimeState {
  Started = 'Started',
  Stopped = 'Stopped',
  Disabled = 'Disabled',
}

/**
 * Defines values for RunQueryFilterOperand.
 * Possible values include: 'PipelineName', 'Status', 'RunStart', 'RunEnd',
 * 'ActivityName', 'ActivityRunStart', 'ActivityRunEnd', 'ActivityType',
 * 'TriggerName', 'TriggerRunTimestamp'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: RunQueryFilterOperand =
 * <RunQueryFilterOperand>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum RunQueryFilterOperand {
  PipelineName = 'PipelineName',
  Status = 'Status',
  RunStart = 'RunStart',
  RunEnd = 'RunEnd',
  ActivityName = 'ActivityName',
  ActivityRunStart = 'ActivityRunStart',
  ActivityRunEnd = 'ActivityRunEnd',
  ActivityType = 'ActivityType',
  TriggerName = 'TriggerName',
  TriggerRunTimestamp = 'TriggerRunTimestamp',
}

/**
 * Defines values for RunQueryFilterOperator.
 * Possible values include: 'Equals', 'NotEquals', 'In', 'NotIn'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: RunQueryFilterOperator =
 * <RunQueryFilterOperator>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum RunQueryFilterOperator {
  Equals = 'Equals',
  NotEquals = 'NotEquals',
  In = 'In',
  NotIn = 'NotIn',
}

/**
 * Defines values for RunQueryOrderByField.
 * Possible values include: 'RunStart', 'RunEnd', 'PipelineName', 'Status',
 * 'ActivityName', 'ActivityRunStart', 'ActivityRunEnd', 'TriggerName',
 * 'TriggerRunTimestamp'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: RunQueryOrderByField =
 * <RunQueryOrderByField>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum RunQueryOrderByField {
  RunStart = 'RunStart',
  RunEnd = 'RunEnd',
  PipelineName = 'PipelineName',
  Status = 'Status',
  ActivityName = 'ActivityName',
  ActivityRunStart = 'ActivityRunStart',
  ActivityRunEnd = 'ActivityRunEnd',
  TriggerName = 'TriggerName',
  TriggerRunTimestamp = 'TriggerRunTimestamp',
}

/**
 * Defines values for RunQueryOrder.
 * Possible values include: 'ASC', 'DESC'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: RunQueryOrder =
 * <RunQueryOrder>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum RunQueryOrder {
  ASC = 'ASC',
  DESC = 'DESC',
}

/**
 * Defines values for TriggerRunStatus.
 * Possible values include: 'Succeeded', 'Failed', 'Inprogress'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: TriggerRunStatus =
 * <TriggerRunStatus>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum TriggerRunStatus {
  Succeeded = 'Succeeded',
  Failed = 'Failed',
  Inprogress = 'Inprogress',
}

/**
 * Defines values for TumblingWindowFrequency.
 * Possible values include: 'Minute', 'Hour'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: TumblingWindowFrequency =
 * <TumblingWindowFrequency>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum TumblingWindowFrequency {
  Minute = 'Minute',
  Hour = 'Hour',
}

/**
 * Defines values for BlobEventTypes.
 * Possible values include: 'Microsoft.Storage.BlobCreated',
 * 'Microsoft.Storage.BlobDeleted'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: BlobEventTypes =
 * <BlobEventTypes>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum BlobEventTypes {
  MicrosoftStorageBlobCreated = 'Microsoft.Storage.BlobCreated',
  MicrosoftStorageBlobDeleted = 'Microsoft.Storage.BlobDeleted',
}

/**
 * Defines values for DayOfWeek.
 * Possible values include: 'Sunday', 'Monday', 'Tuesday', 'Wednesday',
 * 'Thursday', 'Friday', 'Saturday'
 * @readonly
 * @enum {string}
 */
export enum DayOfWeek {
  Sunday = 'Sunday',
  Monday = 'Monday',
  Tuesday = 'Tuesday',
  Wednesday = 'Wednesday',
  Thursday = 'Thursday',
  Friday = 'Friday',
  Saturday = 'Saturday',
}

/**
 * Defines values for DaysOfWeek.
 * Possible values include: 'Sunday', 'Monday', 'Tuesday', 'Wednesday',
 * 'Thursday', 'Friday', 'Saturday'
 * @readonly
 * @enum {string}
 */
export enum DaysOfWeek {
  Sunday = 'Sunday',
  Monday = 'Monday',
  Tuesday = 'Tuesday',
  Wednesday = 'Wednesday',
  Thursday = 'Thursday',
  Friday = 'Friday',
  Saturday = 'Saturday',
}

/**
 * Defines values for RecurrenceFrequency.
 * Possible values include: 'NotSpecified', 'Minute', 'Hour', 'Day', 'Week',
 * 'Month', 'Year'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: RecurrenceFrequency =
 * <RecurrenceFrequency>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum RecurrenceFrequency {
  NotSpecified = 'NotSpecified',
  Minute = 'Minute',
  Hour = 'Hour',
  Day = 'Day',
  Week = 'Week',
  Month = 'Month',
  Year = 'Year',
}

/**
 * Defines values for SparkServerType.
 * Possible values include: 'SharkServer', 'SharkServer2', 'SparkThriftServer'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SparkServerType =
 * <SparkServerType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SparkServerType {
  SharkServer = 'SharkServer',
  SharkServer2 = 'SharkServer2',
  SparkThriftServer = 'SparkThriftServer',
}

/**
 * Defines values for SparkThriftTransportProtocol.
 * Possible values include: 'Binary', 'SASL', 'HTTP '
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SparkThriftTransportProtocol =
 * <SparkThriftTransportProtocol>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SparkThriftTransportProtocol {
  Binary = 'Binary',
  SASL = 'SASL',
  HTTP = 'HTTP ',
}

/**
 * Defines values for SparkAuthenticationType.
 * Possible values include: 'Anonymous', 'Username', 'UsernameAndPassword',
 * 'WindowsAzureHDInsightService'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SparkAuthenticationType =
 * <SparkAuthenticationType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SparkAuthenticationType {
  Anonymous = 'Anonymous',
  Username = 'Username',
  UsernameAndPassword = 'UsernameAndPassword',
  WindowsAzureHDInsightService = 'WindowsAzureHDInsightService',
}

/**
 * Defines values for ServiceNowAuthenticationType.
 * Possible values include: 'Basic', 'OAuth2'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ServiceNowAuthenticationType =
 * <ServiceNowAuthenticationType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum ServiceNowAuthenticationType {
  Basic = 'Basic',
  OAuth2 = 'OAuth2',
}

/**
 * Defines values for PrestoAuthenticationType.
 * Possible values include: 'Anonymous', 'LDAP'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: PrestoAuthenticationType =
 * <PrestoAuthenticationType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum PrestoAuthenticationType {
  Anonymous = 'Anonymous',
  LDAP = 'LDAP',
}

/**
 * Defines values for PhoenixAuthenticationType.
 * Possible values include: 'Anonymous', 'UsernameAndPassword',
 * 'WindowsAzureHDInsightService'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: PhoenixAuthenticationType =
 * <PhoenixAuthenticationType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum PhoenixAuthenticationType {
  Anonymous = 'Anonymous',
  UsernameAndPassword = 'UsernameAndPassword',
  WindowsAzureHDInsightService = 'WindowsAzureHDInsightService',
}

/**
 * Defines values for ImpalaAuthenticationType.
 * Possible values include: 'Anonymous', 'SASLUsername', 'UsernameAndPassword'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ImpalaAuthenticationType =
 * <ImpalaAuthenticationType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum ImpalaAuthenticationType {
  Anonymous = 'Anonymous',
  SASLUsername = 'SASLUsername',
  UsernameAndPassword = 'UsernameAndPassword',
}

/**
 * Defines values for HiveServerType.
 * Possible values include: 'HiveServer1', 'HiveServer2', 'HiveThriftServer'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: HiveServerType =
 * <HiveServerType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum HiveServerType {
  HiveServer1 = 'HiveServer1',
  HiveServer2 = 'HiveServer2',
  HiveThriftServer = 'HiveThriftServer',
}

/**
 * Defines values for HiveThriftTransportProtocol.
 * Possible values include: 'Binary', 'SASL', 'HTTP '
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: HiveThriftTransportProtocol =
 * <HiveThriftTransportProtocol>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum HiveThriftTransportProtocol {
  Binary = 'Binary',
  SASL = 'SASL',
  HTTP = 'HTTP ',
}

/**
 * Defines values for HiveAuthenticationType.
 * Possible values include: 'Anonymous', 'Username', 'UsernameAndPassword',
 * 'WindowsAzureHDInsightService'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: HiveAuthenticationType =
 * <HiveAuthenticationType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum HiveAuthenticationType {
  Anonymous = 'Anonymous',
  Username = 'Username',
  UsernameAndPassword = 'UsernameAndPassword',
  WindowsAzureHDInsightService = 'WindowsAzureHDInsightService',
}

/**
 * Defines values for HBaseAuthenticationType.
 * Possible values include: 'Anonymous', 'Basic'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: HBaseAuthenticationType =
 * <HBaseAuthenticationType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum HBaseAuthenticationType {
  Anonymous = 'Anonymous',
  Basic = 'Basic',
}

/**
 * Defines values for GoogleBigQueryAuthenticationType.
 * Possible values include: 'ServiceAuthentication', 'UserAuthentication'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: GoogleBigQueryAuthenticationType =
 * <GoogleBigQueryAuthenticationType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum GoogleBigQueryAuthenticationType {
  ServiceAuthentication = 'ServiceAuthentication',
  UserAuthentication = 'UserAuthentication',
}

/**
 * Defines values for SapHanaAuthenticationType.
 * Possible values include: 'Basic', 'Windows'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SapHanaAuthenticationType =
 * <SapHanaAuthenticationType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SapHanaAuthenticationType {
  Basic = 'Basic',
  Windows = 'Windows',
}

/**
 * Defines values for SftpAuthenticationType.
 * Possible values include: 'Basic', 'SshPublicKey'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SftpAuthenticationType =
 * <SftpAuthenticationType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SftpAuthenticationType {
  Basic = 'Basic',
  SshPublicKey = 'SshPublicKey',
}

/**
 * Defines values for FtpAuthenticationType.
 * Possible values include: 'Basic', 'Anonymous'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: FtpAuthenticationType =
 * <FtpAuthenticationType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum FtpAuthenticationType {
  Basic = 'Basic',
  Anonymous = 'Anonymous',
}

/**
 * Defines values for HttpAuthenticationType.
 * Possible values include: 'Basic', 'Anonymous', 'Digest', 'Windows',
 * 'ClientCertificate'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: HttpAuthenticationType =
 * <HttpAuthenticationType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum HttpAuthenticationType {
  Basic = 'Basic',
  Anonymous = 'Anonymous',
  Digest = 'Digest',
  Windows = 'Windows',
  ClientCertificate = 'ClientCertificate',
}

/**
 * Defines values for MongoDbAuthenticationType.
 * Possible values include: 'Basic', 'Anonymous'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: MongoDbAuthenticationType =
 * <MongoDbAuthenticationType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum MongoDbAuthenticationType {
  Basic = 'Basic',
  Anonymous = 'Anonymous',
}

/**
 * Defines values for ODataAuthenticationType.
 * Possible values include: 'Basic', 'Anonymous'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ODataAuthenticationType =
 * <ODataAuthenticationType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum ODataAuthenticationType {
  Basic = 'Basic',
  Anonymous = 'Anonymous',
}

/**
 * Defines values for TeradataAuthenticationType.
 * Possible values include: 'Basic', 'Windows'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: TeradataAuthenticationType =
 * <TeradataAuthenticationType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum TeradataAuthenticationType {
  Basic = 'Basic',
  Windows = 'Windows',
}

/**
 * Defines values for Db2AuthenticationType.
 * Possible values include: 'Basic'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Db2AuthenticationType =
 * <Db2AuthenticationType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Db2AuthenticationType {
  Basic = 'Basic',
}

/**
 * Defines values for SybaseAuthenticationType.
 * Possible values include: 'Basic', 'Windows'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SybaseAuthenticationType =
 * <SybaseAuthenticationType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SybaseAuthenticationType {
  Basic = 'Basic',
  Windows = 'Windows',
}

/**
 * Defines values for DatasetCompressionLevel.
 * Possible values include: 'Optimal', 'Fastest'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: DatasetCompressionLevel =
 * <DatasetCompressionLevel>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum DatasetCompressionLevel {
  Optimal = 'Optimal',
  Fastest = 'Fastest',
}

/**
 * Defines values for JsonFormatFilePattern.
 * Possible values include: 'setOfObjects', 'arrayOfObjects'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: JsonFormatFilePattern =
 * <JsonFormatFilePattern>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum JsonFormatFilePattern {
  SetOfObjects = 'setOfObjects',
  ArrayOfObjects = 'arrayOfObjects',
}

/**
 * Defines values for WebActivityMethod.
 * Possible values include: 'GET', 'POST', 'PUT', 'DELETE'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: WebActivityMethod =
 * <WebActivityMethod>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum WebActivityMethod {
  GET = 'GET',
  POST = 'POST',
  PUT = 'PUT',
  DELETE = 'DELETE',
}

/**
 * Defines values for CassandraSourceReadConsistencyLevels.
 * Possible values include: 'ALL', 'EACH_QUORUM', 'QUORUM', 'LOCAL_QUORUM',
 * 'ONE', 'TWO', 'THREE', 'LOCAL_ONE', 'SERIAL', 'LOCAL_SERIAL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: CassandraSourceReadConsistencyLevels =
 * <CassandraSourceReadConsistencyLevels>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum CassandraSourceReadConsistencyLevels {
  ALL = 'ALL',
  EACHQUORUM = 'EACH_QUORUM',
  QUORUM = 'QUORUM',
  LOCALQUORUM = 'LOCAL_QUORUM',
  ONE = 'ONE',
  TWO = 'TWO',
  THREE = 'THREE',
  LOCALONE = 'LOCAL_ONE',
  SERIAL = 'SERIAL',
  LOCALSERIAL = 'LOCAL_SERIAL',
}

/**
 * Defines values for StoredProcedureParameterType.
 * Possible values include: 'String', 'Int', 'Decimal', 'Guid', 'Boolean',
 * 'Date'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: StoredProcedureParameterType =
 * <StoredProcedureParameterType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum StoredProcedureParameterType {
  String = 'String',
  Int = 'Int',
  Decimal = 'Decimal',
  Guid = 'Guid',
  Boolean = 'Boolean',
  Date = 'Date',
}

/**
 * Defines values for SalesforceSourceReadBehavior.
 * Possible values include: 'Query', 'QueryAll'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SalesforceSourceReadBehavior =
 * <SalesforceSourceReadBehavior>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SalesforceSourceReadBehavior {
  Query = 'Query',
  QueryAll = 'QueryAll',
}

/**
 * Defines values for SSISExecutionRuntime.
 * Possible values include: 'x64', 'x86'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SSISExecutionRuntime =
 * <SSISExecutionRuntime>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SSISExecutionRuntime {
  X64 = 'x64',
  X86 = 'x86',
}

/**
 * Defines values for HDInsightActivityDebugInfoOption.
 * Possible values include: 'None', 'Always', 'Failure'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: HDInsightActivityDebugInfoOption =
 * <HDInsightActivityDebugInfoOption>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum HDInsightActivityDebugInfoOption {
  None = 'None',
  Always = 'Always',
  Failure = 'Failure',
}

/**
 * Defines values for SalesforceSinkWriteBehavior.
 * Possible values include: 'Insert', 'Upsert'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SalesforceSinkWriteBehavior =
 * <SalesforceSinkWriteBehavior>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SalesforceSinkWriteBehavior {
  Insert = 'Insert',
  Upsert = 'Upsert',
}

/**
 * Defines values for AzureSearchIndexWriteBehaviorType.
 * Possible values include: 'Merge', 'Upload'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: AzureSearchIndexWriteBehaviorType =
 * <AzureSearchIndexWriteBehaviorType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum AzureSearchIndexWriteBehaviorType {
  Merge = 'Merge',
  Upload = 'Upload',
}

/**
 * Defines values for CopyBehaviorType.
 * Possible values include: 'PreserveHierarchy', 'FlattenHierarchy',
 * 'MergeFiles'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: CopyBehaviorType =
 * <CopyBehaviorType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum CopyBehaviorType {
  PreserveHierarchy = 'PreserveHierarchy',
  FlattenHierarchy = 'FlattenHierarchy',
  MergeFiles = 'MergeFiles',
}

/**
 * Defines values for PolybaseSettingsRejectType.
 * Possible values include: 'value', 'percentage'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: PolybaseSettingsRejectType =
 * <PolybaseSettingsRejectType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum PolybaseSettingsRejectType {
  Value = 'value',
  Percentage = 'percentage',
}

/**
 * Defines values for SapCloudForCustomerSinkWriteBehavior.
 * Possible values include: 'Insert', 'Update'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SapCloudForCustomerSinkWriteBehavior =
 * <SapCloudForCustomerSinkWriteBehavior>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SapCloudForCustomerSinkWriteBehavior {
  Insert = 'Insert',
  Update = 'Update',
}

/**
 * Defines values for IntegrationRuntimeType.
 * Possible values include: 'Managed', 'SelfHosted'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: IntegrationRuntimeType =
 * <IntegrationRuntimeType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum IntegrationRuntimeType {
  Managed = 'Managed',
  SelfHosted = 'SelfHosted',
}

/**
 * Defines values for SelfHostedIntegrationRuntimeNodeStatus.
 * Possible values include: 'NeedRegistration', 'Online', 'Limited', 'Offline',
 * 'Upgrading', 'Initializing', 'InitializeFailed'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SelfHostedIntegrationRuntimeNodeStatus =
 * <SelfHostedIntegrationRuntimeNodeStatus>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SelfHostedIntegrationRuntimeNodeStatus {
  NeedRegistration = 'NeedRegistration',
  Online = 'Online',
  Limited = 'Limited',
  Offline = 'Offline',
  Upgrading = 'Upgrading',
  Initializing = 'Initializing',
  InitializeFailed = 'InitializeFailed',
}

/**
 * Defines values for IntegrationRuntimeUpdateResult.
 * Possible values include: 'None', 'Succeed', 'Fail'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: IntegrationRuntimeUpdateResult =
 * <IntegrationRuntimeUpdateResult>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum IntegrationRuntimeUpdateResult {
  None = 'None',
  Succeed = 'Succeed',
  Fail = 'Fail',
}

/**
 * Defines values for IntegrationRuntimeInternalChannelEncryptionMode.
 * Possible values include: 'NotSet', 'SslEncrypted', 'NotEncrypted'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: IntegrationRuntimeInternalChannelEncryptionMode =
 * <IntegrationRuntimeInternalChannelEncryptionMode>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum IntegrationRuntimeInternalChannelEncryptionMode {
  NotSet = 'NotSet',
  SslEncrypted = 'SslEncrypted',
  NotEncrypted = 'NotEncrypted',
}

/**
 * Defines values for ManagedIntegrationRuntimeNodeStatus.
 * Possible values include: 'Starting', 'Available', 'Recycling', 'Unavailable'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ManagedIntegrationRuntimeNodeStatus =
 * <ManagedIntegrationRuntimeNodeStatus>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum ManagedIntegrationRuntimeNodeStatus {
  Starting = 'Starting',
  Available = 'Available',
  Recycling = 'Recycling',
  Unavailable = 'Unavailable',
}

/**
 * Defines values for IntegrationRuntimeSsisCatalogPricingTier.
 * Possible values include: 'Basic', 'Standard', 'Premium', 'PremiumRS'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: IntegrationRuntimeSsisCatalogPricingTier =
 * <IntegrationRuntimeSsisCatalogPricingTier>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum IntegrationRuntimeSsisCatalogPricingTier {
  Basic = 'Basic',
  Standard = 'Standard',
  Premium = 'Premium',
  PremiumRS = 'PremiumRS',
}

/**
 * Defines values for IntegrationRuntimeLicenseType.
 * Possible values include: 'BasePrice', 'LicenseIncluded'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: IntegrationRuntimeLicenseType =
 * <IntegrationRuntimeLicenseType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum IntegrationRuntimeLicenseType {
  BasePrice = 'BasePrice',
  LicenseIncluded = 'LicenseIncluded',
}

/**
 * Defines values for IntegrationRuntimeEdition.
 * Possible values include: 'Standard', 'Enterprise'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: IntegrationRuntimeEdition =
 * <IntegrationRuntimeEdition>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum IntegrationRuntimeEdition {
  Standard = 'Standard',
  Enterprise = 'Enterprise',
}

/**
 * Defines values for IntegrationRuntimeAuthKeyName.
 * Possible values include: 'authKey1', 'authKey2'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: IntegrationRuntimeAuthKeyName =
 * <IntegrationRuntimeAuthKeyName>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum IntegrationRuntimeAuthKeyName {
  AuthKey1 = 'authKey1',
  AuthKey2 = 'authKey2',
}

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResponse;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResponse;
    };
};

/**
 * Contains response data for the list operation.
 */
export type FactoriesListResponse = FactoryListResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FactoryListResponse;
    };
};

/**
 * Contains response data for the configureFactoryRepo operation.
 */
export type FactoriesConfigureFactoryRepoResponse = Factory & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Factory;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type FactoriesListByResourceGroupResponse = FactoryListResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FactoryListResponse;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type FactoriesCreateOrUpdateResponse = Factory & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Factory;
    };
};

/**
 * Contains response data for the update operation.
 */
export type FactoriesUpdateResponse = Factory & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Factory;
    };
};

/**
 * Contains response data for the get operation.
 */
export type FactoriesGetResponse = Factory & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Factory;
    };
};

/**
 * Contains response data for the getGitHubAccessToken operation.
 */
export type FactoriesGetGitHubAccessTokenResponse = GitHubAccessTokenResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GitHubAccessTokenResponse;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type FactoriesListNextResponse = FactoryListResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FactoryListResponse;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type FactoriesListByResourceGroupNextResponse = FactoryListResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FactoryListResponse;
    };
};

/**
 * Contains response data for the listByFactory operation.
 */
export type IntegrationRuntimesListByFactoryResponse = IntegrationRuntimeListResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationRuntimeListResponse;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type IntegrationRuntimesCreateOrUpdateResponse = IntegrationRuntimeResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationRuntimeResource;
    };
};

/**
 * Contains response data for the get operation.
 */
export type IntegrationRuntimesGetResponse = IntegrationRuntimeResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationRuntimeResource;
    };
};

/**
 * Contains response data for the update operation.
 */
export type IntegrationRuntimesUpdateResponse = IntegrationRuntimeResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationRuntimeResource;
    };
};

/**
 * Contains response data for the getStatus operation.
 */
export type IntegrationRuntimesGetStatusResponse = IntegrationRuntimeStatusResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationRuntimeStatusResponse;
    };
};

/**
 * Contains response data for the getConnectionInfo operation.
 */
export type IntegrationRuntimesGetConnectionInfoResponse = IntegrationRuntimeConnectionInfo & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationRuntimeConnectionInfo;
    };
};

/**
 * Contains response data for the regenerateAuthKey operation.
 */
export type IntegrationRuntimesRegenerateAuthKeyResponse = IntegrationRuntimeAuthKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationRuntimeAuthKeys;
    };
};

/**
 * Contains response data for the listAuthKeys operation.
 */
export type IntegrationRuntimesListAuthKeysResponse = IntegrationRuntimeAuthKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationRuntimeAuthKeys;
    };
};

/**
 * Contains response data for the start operation.
 */
export type IntegrationRuntimesStartResponse = IntegrationRuntimeStatusResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationRuntimeStatusResponse;
    };
};

/**
 * Contains response data for the getMonitoringData operation.
 */
export type IntegrationRuntimesGetMonitoringDataResponse = IntegrationRuntimeMonitoringData & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationRuntimeMonitoringData;
    };
};

/**
 * Contains response data for the createLinkedIntegrationRuntime operation.
 */
export type IntegrationRuntimesCreateLinkedIntegrationRuntimeResponse = IntegrationRuntimeStatusResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationRuntimeStatusResponse;
    };
};

/**
 * Contains response data for the beginStart operation.
 */
export type IntegrationRuntimesBeginStartResponse = IntegrationRuntimeStatusResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationRuntimeStatusResponse;
    };
};

/**
 * Contains response data for the listByFactoryNext operation.
 */
export type IntegrationRuntimesListByFactoryNextResponse = IntegrationRuntimeListResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationRuntimeListResponse;
    };
};

/**
 * Contains response data for the get operation.
 */
export type IntegrationRuntimeNodesGetResponse = SelfHostedIntegrationRuntimeNode & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SelfHostedIntegrationRuntimeNode;
    };
};

/**
 * Contains response data for the update operation.
 */
export type IntegrationRuntimeNodesUpdateResponse = SelfHostedIntegrationRuntimeNode & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SelfHostedIntegrationRuntimeNode;
    };
};

/**
 * Contains response data for the getIpAddress operation.
 */
export type IntegrationRuntimeNodesGetIpAddressResponse = IntegrationRuntimeNodeIpAddress & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationRuntimeNodeIpAddress;
    };
};

/**
 * Contains response data for the listByFactory operation.
 */
export type LinkedServicesListByFactoryResponse = LinkedServiceListResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LinkedServiceListResponse;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type LinkedServicesCreateOrUpdateResponse = LinkedServiceResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LinkedServiceResource;
    };
};

/**
 * Contains response data for the get operation.
 */
export type LinkedServicesGetResponse = LinkedServiceResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LinkedServiceResource;
    };
};

/**
 * Contains response data for the listByFactoryNext operation.
 */
export type LinkedServicesListByFactoryNextResponse = LinkedServiceListResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LinkedServiceListResponse;
    };
};

/**
 * Contains response data for the listByFactory operation.
 */
export type DatasetsListByFactoryResponse = DatasetListResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatasetListResponse;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DatasetsCreateOrUpdateResponse = DatasetResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatasetResource;
    };
};

/**
 * Contains response data for the get operation.
 */
export type DatasetsGetResponse = DatasetResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatasetResource;
    };
};

/**
 * Contains response data for the listByFactoryNext operation.
 */
export type DatasetsListByFactoryNextResponse = DatasetListResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatasetListResponse;
    };
};

/**
 * Contains response data for the listByFactory operation.
 */
export type PipelinesListByFactoryResponse = PipelineListResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PipelineListResponse;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PipelinesCreateOrUpdateResponse = PipelineResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PipelineResource;
    };
};

/**
 * Contains response data for the get operation.
 */
export type PipelinesGetResponse = PipelineResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PipelineResource;
    };
};

/**
 * Contains response data for the createRun operation.
 */
export type PipelinesCreateRunResponse = CreateRunResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CreateRunResponse;
    };
};

/**
 * Contains response data for the listByFactoryNext operation.
 */
export type PipelinesListByFactoryNextResponse = PipelineListResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PipelineListResponse;
    };
};

/**
 * Contains response data for the queryByFactory operation.
 */
export type PipelineRunsQueryByFactoryResponse = PipelineRunsQueryResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PipelineRunsQueryResponse;
    };
};

/**
 * Contains response data for the get operation.
 */
export type PipelineRunsGetResponse = PipelineRun & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PipelineRun;
    };
};

/**
 * Contains response data for the queryByPipelineRun operation.
 */
export type ActivityRunsQueryByPipelineRunResponse = ActivityRunsQueryResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ActivityRunsQueryResponse;
    };
};

/**
 * Contains response data for the listByFactory operation.
 */
export type TriggersListByFactoryResponse = TriggerListResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TriggerListResponse;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type TriggersCreateOrUpdateResponse = TriggerResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TriggerResource;
    };
};

/**
 * Contains response data for the get operation.
 */
export type TriggersGetResponse = TriggerResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TriggerResource;
    };
};

/**
 * Contains response data for the listByFactoryNext operation.
 */
export type TriggersListByFactoryNextResponse = TriggerListResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TriggerListResponse;
    };
};

/**
 * Contains response data for the create operation.
 */
export type RerunTriggersCreateResponse = TriggerResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TriggerResource;
    };
};

/**
 * Contains response data for the listByTrigger operation.
 */
export type RerunTriggersListByTriggerResponse = RerunTriggerListResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RerunTriggerListResponse;
    };
};

/**
 * Contains response data for the listByTriggerNext operation.
 */
export type RerunTriggersListByTriggerNextResponse = RerunTriggerListResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RerunTriggerListResponse;
    };
};

/**
 * Contains response data for the queryByFactory operation.
 */
export type TriggerRunsQueryByFactoryResponse = TriggerRunsQueryResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TriggerRunsQueryResponse;
    };
};
