/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as msRestAzure from "ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/rerunTriggersMappers";
import * as Parameters from "../models/parameters";
import { DataFactoryManagementClientContext } from "../dataFactoryManagementClientContext";

/** Class representing a RerunTriggers. */
export class RerunTriggers {
  private readonly client: DataFactoryManagementClientContext;

  /**
   * Create a RerunTriggers.
   * @param {DataFactoryManagementClientContext} client Reference to the service client.
   */
  constructor(client: DataFactoryManagementClientContext) {
    this.client = client;
  }

  /**
   * Creates a rerun trigger.
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param triggerName The trigger name.
   * @param rerunTriggerName The rerun trigger name.
   * @param rerunTumblingWindowTriggerActionParameters Rerun tumbling window trigger action
   * parameters.
   * @param [options] The optional parameters
   * @returns Promise<Models.RerunTriggersCreateResponse>
   */
  create(resourceGroupName: string, factoryName: string, triggerName: string, rerunTriggerName: string, rerunTumblingWindowTriggerActionParameters: Models.RerunTumblingWindowTriggerActionParameters, options?: msRest.RequestOptionsBase): Promise<Models.RerunTriggersCreateResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param triggerName The trigger name.
   * @param rerunTriggerName The rerun trigger name.
   * @param rerunTumblingWindowTriggerActionParameters Rerun tumbling window trigger action
   * parameters.
   * @param callback The callback
   */
  create(resourceGroupName: string, factoryName: string, triggerName: string, rerunTriggerName: string, rerunTumblingWindowTriggerActionParameters: Models.RerunTumblingWindowTriggerActionParameters, callback: msRest.ServiceCallback<Models.TriggerResource>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param triggerName The trigger name.
   * @param rerunTriggerName The rerun trigger name.
   * @param rerunTumblingWindowTriggerActionParameters Rerun tumbling window trigger action
   * parameters.
   * @param options The optional parameters
   * @param callback The callback
   */
  create(resourceGroupName: string, factoryName: string, triggerName: string, rerunTriggerName: string, rerunTumblingWindowTriggerActionParameters: Models.RerunTumblingWindowTriggerActionParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TriggerResource>): void;
  create(resourceGroupName: string, factoryName: string, triggerName: string, rerunTriggerName: string, rerunTumblingWindowTriggerActionParameters: Models.RerunTumblingWindowTriggerActionParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TriggerResource>, callback?: msRest.ServiceCallback<Models.TriggerResource>): Promise<Models.RerunTriggersCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        factoryName,
        triggerName,
        rerunTriggerName,
        rerunTumblingWindowTriggerActionParameters,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.RerunTriggersCreateResponse>;
  }

  /**
   * Starts a trigger.
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param triggerName The trigger name.
   * @param rerunTriggerName The rerun trigger name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  start(resourceGroupName: string, factoryName: string, triggerName: string, rerunTriggerName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginStart(resourceGroupName,factoryName,triggerName,rerunTriggerName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Stops a trigger.
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param triggerName The trigger name.
   * @param rerunTriggerName The rerun trigger name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  stop(resourceGroupName: string, factoryName: string, triggerName: string, rerunTriggerName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginStop(resourceGroupName,factoryName,triggerName,rerunTriggerName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Cancels a trigger.
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param triggerName The trigger name.
   * @param rerunTriggerName The rerun trigger name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  cancel(resourceGroupName: string, factoryName: string, triggerName: string, rerunTriggerName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginCancel(resourceGroupName,factoryName,triggerName,rerunTriggerName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Lists rerun triggers by an original trigger name.
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param triggerName The trigger name.
   * @param [options] The optional parameters
   * @returns Promise<Models.RerunTriggersListByTriggerResponse>
   */
  listByTrigger(resourceGroupName: string, factoryName: string, triggerName: string, options?: msRest.RequestOptionsBase): Promise<Models.RerunTriggersListByTriggerResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param triggerName The trigger name.
   * @param callback The callback
   */
  listByTrigger(resourceGroupName: string, factoryName: string, triggerName: string, callback: msRest.ServiceCallback<Models.RerunTriggerListResponse>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param triggerName The trigger name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByTrigger(resourceGroupName: string, factoryName: string, triggerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RerunTriggerListResponse>): void;
  listByTrigger(resourceGroupName: string, factoryName: string, triggerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RerunTriggerListResponse>, callback?: msRest.ServiceCallback<Models.RerunTriggerListResponse>): Promise<Models.RerunTriggersListByTriggerResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        factoryName,
        triggerName,
        options
      },
      listByTriggerOperationSpec,
      callback) as Promise<Models.RerunTriggersListByTriggerResponse>;
  }

  /**
   * Starts a trigger.
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param triggerName The trigger name.
   * @param rerunTriggerName The rerun trigger name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginStart(resourceGroupName: string, factoryName: string, triggerName: string, rerunTriggerName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        factoryName,
        triggerName,
        rerunTriggerName,
        options
      },
      beginStartOperationSpec,
      options);
  }

  /**
   * Stops a trigger.
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param triggerName The trigger name.
   * @param rerunTriggerName The rerun trigger name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginStop(resourceGroupName: string, factoryName: string, triggerName: string, rerunTriggerName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        factoryName,
        triggerName,
        rerunTriggerName,
        options
      },
      beginStopOperationSpec,
      options);
  }

  /**
   * Cancels a trigger.
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param triggerName The trigger name.
   * @param rerunTriggerName The rerun trigger name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCancel(resourceGroupName: string, factoryName: string, triggerName: string, rerunTriggerName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        factoryName,
        triggerName,
        rerunTriggerName,
        options
      },
      beginCancelOperationSpec,
      options);
  }

  /**
   * Lists rerun triggers by an original trigger name.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.RerunTriggersListByTriggerNextResponse>
   */
  listByTriggerNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.RerunTriggersListByTriggerNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByTriggerNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.RerunTriggerListResponse>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByTriggerNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RerunTriggerListResponse>): void;
  listByTriggerNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RerunTriggerListResponse>, callback?: msRest.ServiceCallback<Models.RerunTriggerListResponse>): Promise<Models.RerunTriggersListByTriggerNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByTriggerNextOperationSpec,
      callback) as Promise<Models.RerunTriggersListByTriggerNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/rerunTriggers/{rerunTriggerName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.factoryName,
    Parameters.triggerName,
    Parameters.rerunTriggerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "rerunTumblingWindowTriggerActionParameters",
    mapper: {
      ...Mappers.RerunTumblingWindowTriggerActionParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.TriggerResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByTriggerOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/rerunTriggers",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.factoryName,
    Parameters.triggerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RerunTriggerListResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginStartOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/rerunTriggers/{rerunTriggerName}/start",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.factoryName,
    Parameters.triggerName,
    Parameters.rerunTriggerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginStopOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/rerunTriggers/{rerunTriggerName}/stop",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.factoryName,
    Parameters.triggerName,
    Parameters.rerunTriggerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCancelOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/rerunTriggers/{rerunTriggerName}/cancel",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.factoryName,
    Parameters.triggerName,
    Parameters.rerunTriggerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByTriggerNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RerunTriggerListResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
