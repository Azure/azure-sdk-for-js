/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmDatafactory = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for IntegrationRuntimeState.
     * Possible values include: 'Initial', 'Stopped', 'Started', 'Starting',
     * 'Stopping', 'NeedRegistration', 'Online', 'Limited', 'Offline',
     * 'AccessDenied'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: IntegrationRuntimeState =
     * <IntegrationRuntimeState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var IntegrationRuntimeState;
    (function (IntegrationRuntimeState) {
        IntegrationRuntimeState["Initial"] = "Initial";
        IntegrationRuntimeState["Stopped"] = "Stopped";
        IntegrationRuntimeState["Started"] = "Started";
        IntegrationRuntimeState["Starting"] = "Starting";
        IntegrationRuntimeState["Stopping"] = "Stopping";
        IntegrationRuntimeState["NeedRegistration"] = "NeedRegistration";
        IntegrationRuntimeState["Online"] = "Online";
        IntegrationRuntimeState["Limited"] = "Limited";
        IntegrationRuntimeState["Offline"] = "Offline";
        IntegrationRuntimeState["AccessDenied"] = "AccessDenied";
    })(IntegrationRuntimeState || (IntegrationRuntimeState = {}));
    /**
     * Defines values for IntegrationRuntimeAutoUpdate.
     * Possible values include: 'On', 'Off'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: IntegrationRuntimeAutoUpdate =
     * <IntegrationRuntimeAutoUpdate>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var IntegrationRuntimeAutoUpdate;
    (function (IntegrationRuntimeAutoUpdate) {
        IntegrationRuntimeAutoUpdate["On"] = "On";
        IntegrationRuntimeAutoUpdate["Off"] = "Off";
    })(IntegrationRuntimeAutoUpdate || (IntegrationRuntimeAutoUpdate = {}));
    /**
     * Defines values for ParameterType.
     * Possible values include: 'Object', 'String', 'Int', 'Float', 'Bool',
     * 'Array', 'SecureString'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ParameterType =
     * <ParameterType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ParameterType;
    (function (ParameterType) {
        ParameterType["Object"] = "Object";
        ParameterType["String"] = "String";
        ParameterType["Int"] = "Int";
        ParameterType["Float"] = "Float";
        ParameterType["Bool"] = "Bool";
        ParameterType["Array"] = "Array";
        ParameterType["SecureString"] = "SecureString";
    })(ParameterType || (ParameterType = {}));
    /**
     * Defines values for DependencyCondition.
     * Possible values include: 'Succeeded', 'Failed', 'Skipped', 'Completed'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: DependencyCondition =
     * <DependencyCondition>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var DependencyCondition;
    (function (DependencyCondition) {
        DependencyCondition["Succeeded"] = "Succeeded";
        DependencyCondition["Failed"] = "Failed";
        DependencyCondition["Skipped"] = "Skipped";
        DependencyCondition["Completed"] = "Completed";
    })(DependencyCondition || (DependencyCondition = {}));
    /**
     * Defines values for VariableType.
     * Possible values include: 'String', 'Bool', 'Array'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: VariableType =
     * <VariableType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var VariableType;
    (function (VariableType) {
        VariableType["String"] = "String";
        VariableType["Bool"] = "Bool";
        VariableType["Array"] = "Array";
    })(VariableType || (VariableType = {}));
    /**
     * Defines values for TriggerRuntimeState.
     * Possible values include: 'Started', 'Stopped', 'Disabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: TriggerRuntimeState =
     * <TriggerRuntimeState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var TriggerRuntimeState;
    (function (TriggerRuntimeState) {
        TriggerRuntimeState["Started"] = "Started";
        TriggerRuntimeState["Stopped"] = "Stopped";
        TriggerRuntimeState["Disabled"] = "Disabled";
    })(TriggerRuntimeState || (TriggerRuntimeState = {}));
    /**
     * Defines values for RunQueryFilterOperand.
     * Possible values include: 'PipelineName', 'Status', 'RunStart', 'RunEnd',
     * 'ActivityName', 'ActivityRunStart', 'ActivityRunEnd', 'ActivityType',
     * 'TriggerName', 'TriggerRunTimestamp'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: RunQueryFilterOperand =
     * <RunQueryFilterOperand>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var RunQueryFilterOperand;
    (function (RunQueryFilterOperand) {
        RunQueryFilterOperand["PipelineName"] = "PipelineName";
        RunQueryFilterOperand["Status"] = "Status";
        RunQueryFilterOperand["RunStart"] = "RunStart";
        RunQueryFilterOperand["RunEnd"] = "RunEnd";
        RunQueryFilterOperand["ActivityName"] = "ActivityName";
        RunQueryFilterOperand["ActivityRunStart"] = "ActivityRunStart";
        RunQueryFilterOperand["ActivityRunEnd"] = "ActivityRunEnd";
        RunQueryFilterOperand["ActivityType"] = "ActivityType";
        RunQueryFilterOperand["TriggerName"] = "TriggerName";
        RunQueryFilterOperand["TriggerRunTimestamp"] = "TriggerRunTimestamp";
    })(RunQueryFilterOperand || (RunQueryFilterOperand = {}));
    /**
     * Defines values for RunQueryFilterOperator.
     * Possible values include: 'Equals', 'NotEquals', 'In', 'NotIn'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: RunQueryFilterOperator =
     * <RunQueryFilterOperator>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var RunQueryFilterOperator;
    (function (RunQueryFilterOperator) {
        RunQueryFilterOperator["Equals"] = "Equals";
        RunQueryFilterOperator["NotEquals"] = "NotEquals";
        RunQueryFilterOperator["In"] = "In";
        RunQueryFilterOperator["NotIn"] = "NotIn";
    })(RunQueryFilterOperator || (RunQueryFilterOperator = {}));
    /**
     * Defines values for RunQueryOrderByField.
     * Possible values include: 'RunStart', 'RunEnd', 'PipelineName', 'Status',
     * 'ActivityName', 'ActivityRunStart', 'ActivityRunEnd', 'TriggerName',
     * 'TriggerRunTimestamp'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: RunQueryOrderByField =
     * <RunQueryOrderByField>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var RunQueryOrderByField;
    (function (RunQueryOrderByField) {
        RunQueryOrderByField["RunStart"] = "RunStart";
        RunQueryOrderByField["RunEnd"] = "RunEnd";
        RunQueryOrderByField["PipelineName"] = "PipelineName";
        RunQueryOrderByField["Status"] = "Status";
        RunQueryOrderByField["ActivityName"] = "ActivityName";
        RunQueryOrderByField["ActivityRunStart"] = "ActivityRunStart";
        RunQueryOrderByField["ActivityRunEnd"] = "ActivityRunEnd";
        RunQueryOrderByField["TriggerName"] = "TriggerName";
        RunQueryOrderByField["TriggerRunTimestamp"] = "TriggerRunTimestamp";
    })(RunQueryOrderByField || (RunQueryOrderByField = {}));
    /**
     * Defines values for RunQueryOrder.
     * Possible values include: 'ASC', 'DESC'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: RunQueryOrder =
     * <RunQueryOrder>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var RunQueryOrder;
    (function (RunQueryOrder) {
        RunQueryOrder["ASC"] = "ASC";
        RunQueryOrder["DESC"] = "DESC";
    })(RunQueryOrder || (RunQueryOrder = {}));
    /**
     * Defines values for TriggerRunStatus.
     * Possible values include: 'Succeeded', 'Failed', 'Inprogress'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: TriggerRunStatus =
     * <TriggerRunStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var TriggerRunStatus;
    (function (TriggerRunStatus) {
        TriggerRunStatus["Succeeded"] = "Succeeded";
        TriggerRunStatus["Failed"] = "Failed";
        TriggerRunStatus["Inprogress"] = "Inprogress";
    })(TriggerRunStatus || (TriggerRunStatus = {}));
    /**
     * Defines values for TumblingWindowFrequency.
     * Possible values include: 'Minute', 'Hour'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: TumblingWindowFrequency =
     * <TumblingWindowFrequency>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var TumblingWindowFrequency;
    (function (TumblingWindowFrequency) {
        TumblingWindowFrequency["Minute"] = "Minute";
        TumblingWindowFrequency["Hour"] = "Hour";
    })(TumblingWindowFrequency || (TumblingWindowFrequency = {}));
    /**
     * Defines values for BlobEventTypes.
     * Possible values include: 'Microsoft.Storage.BlobCreated',
     * 'Microsoft.Storage.BlobDeleted'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: BlobEventTypes =
     * <BlobEventTypes>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var BlobEventTypes;
    (function (BlobEventTypes) {
        BlobEventTypes["MicrosoftStorageBlobCreated"] = "Microsoft.Storage.BlobCreated";
        BlobEventTypes["MicrosoftStorageBlobDeleted"] = "Microsoft.Storage.BlobDeleted";
    })(BlobEventTypes || (BlobEventTypes = {}));
    /**
     * Defines values for DayOfWeek.
     * Possible values include: 'Sunday', 'Monday', 'Tuesday', 'Wednesday',
     * 'Thursday', 'Friday', 'Saturday'
     * @readonly
     * @enum {string}
     */
    var DayOfWeek;
    (function (DayOfWeek) {
        DayOfWeek["Sunday"] = "Sunday";
        DayOfWeek["Monday"] = "Monday";
        DayOfWeek["Tuesday"] = "Tuesday";
        DayOfWeek["Wednesday"] = "Wednesday";
        DayOfWeek["Thursday"] = "Thursday";
        DayOfWeek["Friday"] = "Friday";
        DayOfWeek["Saturday"] = "Saturday";
    })(DayOfWeek || (DayOfWeek = {}));
    /**
     * Defines values for DaysOfWeek.
     * Possible values include: 'Sunday', 'Monday', 'Tuesday', 'Wednesday',
     * 'Thursday', 'Friday', 'Saturday'
     * @readonly
     * @enum {string}
     */
    var DaysOfWeek;
    (function (DaysOfWeek) {
        DaysOfWeek["Sunday"] = "Sunday";
        DaysOfWeek["Monday"] = "Monday";
        DaysOfWeek["Tuesday"] = "Tuesday";
        DaysOfWeek["Wednesday"] = "Wednesday";
        DaysOfWeek["Thursday"] = "Thursday";
        DaysOfWeek["Friday"] = "Friday";
        DaysOfWeek["Saturday"] = "Saturday";
    })(DaysOfWeek || (DaysOfWeek = {}));
    /**
     * Defines values for RecurrenceFrequency.
     * Possible values include: 'NotSpecified', 'Minute', 'Hour', 'Day', 'Week',
     * 'Month', 'Year'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: RecurrenceFrequency =
     * <RecurrenceFrequency>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var RecurrenceFrequency;
    (function (RecurrenceFrequency) {
        RecurrenceFrequency["NotSpecified"] = "NotSpecified";
        RecurrenceFrequency["Minute"] = "Minute";
        RecurrenceFrequency["Hour"] = "Hour";
        RecurrenceFrequency["Day"] = "Day";
        RecurrenceFrequency["Week"] = "Week";
        RecurrenceFrequency["Month"] = "Month";
        RecurrenceFrequency["Year"] = "Year";
    })(RecurrenceFrequency || (RecurrenceFrequency = {}));
    /**
     * Defines values for SparkServerType.
     * Possible values include: 'SharkServer', 'SharkServer2', 'SparkThriftServer'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SparkServerType =
     * <SparkServerType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SparkServerType;
    (function (SparkServerType) {
        SparkServerType["SharkServer"] = "SharkServer";
        SparkServerType["SharkServer2"] = "SharkServer2";
        SparkServerType["SparkThriftServer"] = "SparkThriftServer";
    })(SparkServerType || (SparkServerType = {}));
    /**
     * Defines values for SparkThriftTransportProtocol.
     * Possible values include: 'Binary', 'SASL', 'HTTP '
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SparkThriftTransportProtocol =
     * <SparkThriftTransportProtocol>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SparkThriftTransportProtocol;
    (function (SparkThriftTransportProtocol) {
        SparkThriftTransportProtocol["Binary"] = "Binary";
        SparkThriftTransportProtocol["SASL"] = "SASL";
        SparkThriftTransportProtocol["HTTP"] = "HTTP ";
    })(SparkThriftTransportProtocol || (SparkThriftTransportProtocol = {}));
    /**
     * Defines values for SparkAuthenticationType.
     * Possible values include: 'Anonymous', 'Username', 'UsernameAndPassword',
     * 'WindowsAzureHDInsightService'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SparkAuthenticationType =
     * <SparkAuthenticationType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SparkAuthenticationType;
    (function (SparkAuthenticationType) {
        SparkAuthenticationType["Anonymous"] = "Anonymous";
        SparkAuthenticationType["Username"] = "Username";
        SparkAuthenticationType["UsernameAndPassword"] = "UsernameAndPassword";
        SparkAuthenticationType["WindowsAzureHDInsightService"] = "WindowsAzureHDInsightService";
    })(SparkAuthenticationType || (SparkAuthenticationType = {}));
    /**
     * Defines values for ServiceNowAuthenticationType.
     * Possible values include: 'Basic', 'OAuth2'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ServiceNowAuthenticationType =
     * <ServiceNowAuthenticationType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ServiceNowAuthenticationType;
    (function (ServiceNowAuthenticationType) {
        ServiceNowAuthenticationType["Basic"] = "Basic";
        ServiceNowAuthenticationType["OAuth2"] = "OAuth2";
    })(ServiceNowAuthenticationType || (ServiceNowAuthenticationType = {}));
    /**
     * Defines values for PrestoAuthenticationType.
     * Possible values include: 'Anonymous', 'LDAP'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: PrestoAuthenticationType =
     * <PrestoAuthenticationType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var PrestoAuthenticationType;
    (function (PrestoAuthenticationType) {
        PrestoAuthenticationType["Anonymous"] = "Anonymous";
        PrestoAuthenticationType["LDAP"] = "LDAP";
    })(PrestoAuthenticationType || (PrestoAuthenticationType = {}));
    /**
     * Defines values for PhoenixAuthenticationType.
     * Possible values include: 'Anonymous', 'UsernameAndPassword',
     * 'WindowsAzureHDInsightService'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: PhoenixAuthenticationType =
     * <PhoenixAuthenticationType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var PhoenixAuthenticationType;
    (function (PhoenixAuthenticationType) {
        PhoenixAuthenticationType["Anonymous"] = "Anonymous";
        PhoenixAuthenticationType["UsernameAndPassword"] = "UsernameAndPassword";
        PhoenixAuthenticationType["WindowsAzureHDInsightService"] = "WindowsAzureHDInsightService";
    })(PhoenixAuthenticationType || (PhoenixAuthenticationType = {}));
    /**
     * Defines values for ImpalaAuthenticationType.
     * Possible values include: 'Anonymous', 'SASLUsername', 'UsernameAndPassword'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ImpalaAuthenticationType =
     * <ImpalaAuthenticationType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ImpalaAuthenticationType;
    (function (ImpalaAuthenticationType) {
        ImpalaAuthenticationType["Anonymous"] = "Anonymous";
        ImpalaAuthenticationType["SASLUsername"] = "SASLUsername";
        ImpalaAuthenticationType["UsernameAndPassword"] = "UsernameAndPassword";
    })(ImpalaAuthenticationType || (ImpalaAuthenticationType = {}));
    /**
     * Defines values for HiveServerType.
     * Possible values include: 'HiveServer1', 'HiveServer2', 'HiveThriftServer'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: HiveServerType =
     * <HiveServerType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var HiveServerType;
    (function (HiveServerType) {
        HiveServerType["HiveServer1"] = "HiveServer1";
        HiveServerType["HiveServer2"] = "HiveServer2";
        HiveServerType["HiveThriftServer"] = "HiveThriftServer";
    })(HiveServerType || (HiveServerType = {}));
    /**
     * Defines values for HiveThriftTransportProtocol.
     * Possible values include: 'Binary', 'SASL', 'HTTP '
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: HiveThriftTransportProtocol =
     * <HiveThriftTransportProtocol>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var HiveThriftTransportProtocol;
    (function (HiveThriftTransportProtocol) {
        HiveThriftTransportProtocol["Binary"] = "Binary";
        HiveThriftTransportProtocol["SASL"] = "SASL";
        HiveThriftTransportProtocol["HTTP"] = "HTTP ";
    })(HiveThriftTransportProtocol || (HiveThriftTransportProtocol = {}));
    /**
     * Defines values for HiveAuthenticationType.
     * Possible values include: 'Anonymous', 'Username', 'UsernameAndPassword',
     * 'WindowsAzureHDInsightService'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: HiveAuthenticationType =
     * <HiveAuthenticationType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var HiveAuthenticationType;
    (function (HiveAuthenticationType) {
        HiveAuthenticationType["Anonymous"] = "Anonymous";
        HiveAuthenticationType["Username"] = "Username";
        HiveAuthenticationType["UsernameAndPassword"] = "UsernameAndPassword";
        HiveAuthenticationType["WindowsAzureHDInsightService"] = "WindowsAzureHDInsightService";
    })(HiveAuthenticationType || (HiveAuthenticationType = {}));
    /**
     * Defines values for HBaseAuthenticationType.
     * Possible values include: 'Anonymous', 'Basic'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: HBaseAuthenticationType =
     * <HBaseAuthenticationType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var HBaseAuthenticationType;
    (function (HBaseAuthenticationType) {
        HBaseAuthenticationType["Anonymous"] = "Anonymous";
        HBaseAuthenticationType["Basic"] = "Basic";
    })(HBaseAuthenticationType || (HBaseAuthenticationType = {}));
    /**
     * Defines values for GoogleBigQueryAuthenticationType.
     * Possible values include: 'ServiceAuthentication', 'UserAuthentication'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: GoogleBigQueryAuthenticationType =
     * <GoogleBigQueryAuthenticationType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var GoogleBigQueryAuthenticationType;
    (function (GoogleBigQueryAuthenticationType) {
        GoogleBigQueryAuthenticationType["ServiceAuthentication"] = "ServiceAuthentication";
        GoogleBigQueryAuthenticationType["UserAuthentication"] = "UserAuthentication";
    })(GoogleBigQueryAuthenticationType || (GoogleBigQueryAuthenticationType = {}));
    /**
     * Defines values for GoogleAdWordsAuthenticationType.
     * Possible values include: 'ServiceAuthentication', 'UserAuthentication'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: GoogleAdWordsAuthenticationType =
     * <GoogleAdWordsAuthenticationType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var GoogleAdWordsAuthenticationType;
    (function (GoogleAdWordsAuthenticationType) {
        GoogleAdWordsAuthenticationType["ServiceAuthentication"] = "ServiceAuthentication";
        GoogleAdWordsAuthenticationType["UserAuthentication"] = "UserAuthentication";
    })(GoogleAdWordsAuthenticationType || (GoogleAdWordsAuthenticationType = {}));
    /**
     * Defines values for SapHanaAuthenticationType.
     * Possible values include: 'Basic', 'Windows'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SapHanaAuthenticationType =
     * <SapHanaAuthenticationType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SapHanaAuthenticationType;
    (function (SapHanaAuthenticationType) {
        SapHanaAuthenticationType["Basic"] = "Basic";
        SapHanaAuthenticationType["Windows"] = "Windows";
    })(SapHanaAuthenticationType || (SapHanaAuthenticationType = {}));
    /**
     * Defines values for SftpAuthenticationType.
     * Possible values include: 'Basic', 'SshPublicKey'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SftpAuthenticationType =
     * <SftpAuthenticationType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SftpAuthenticationType;
    (function (SftpAuthenticationType) {
        SftpAuthenticationType["Basic"] = "Basic";
        SftpAuthenticationType["SshPublicKey"] = "SshPublicKey";
    })(SftpAuthenticationType || (SftpAuthenticationType = {}));
    /**
     * Defines values for FtpAuthenticationType.
     * Possible values include: 'Basic', 'Anonymous'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: FtpAuthenticationType =
     * <FtpAuthenticationType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var FtpAuthenticationType;
    (function (FtpAuthenticationType) {
        FtpAuthenticationType["Basic"] = "Basic";
        FtpAuthenticationType["Anonymous"] = "Anonymous";
    })(FtpAuthenticationType || (FtpAuthenticationType = {}));
    /**
     * Defines values for RestServiceAuthenticationType.
     * Possible values include: 'Anonymous', 'Basic', 'AadServicePrincial',
     * 'ManagedServiceIdentity'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: RestServiceAuthenticationType =
     * <RestServiceAuthenticationType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var RestServiceAuthenticationType;
    (function (RestServiceAuthenticationType) {
        RestServiceAuthenticationType["Anonymous"] = "Anonymous";
        RestServiceAuthenticationType["Basic"] = "Basic";
        RestServiceAuthenticationType["AadServicePrincial"] = "AadServicePrincial";
        RestServiceAuthenticationType["ManagedServiceIdentity"] = "ManagedServiceIdentity";
    })(RestServiceAuthenticationType || (RestServiceAuthenticationType = {}));
    /**
     * Defines values for HttpAuthenticationType.
     * Possible values include: 'Basic', 'Anonymous', 'Digest', 'Windows',
     * 'ClientCertificate'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: HttpAuthenticationType =
     * <HttpAuthenticationType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var HttpAuthenticationType;
    (function (HttpAuthenticationType) {
        HttpAuthenticationType["Basic"] = "Basic";
        HttpAuthenticationType["Anonymous"] = "Anonymous";
        HttpAuthenticationType["Digest"] = "Digest";
        HttpAuthenticationType["Windows"] = "Windows";
        HttpAuthenticationType["ClientCertificate"] = "ClientCertificate";
    })(HttpAuthenticationType || (HttpAuthenticationType = {}));
    /**
     * Defines values for MongoDbAuthenticationType.
     * Possible values include: 'Basic', 'Anonymous'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: MongoDbAuthenticationType =
     * <MongoDbAuthenticationType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var MongoDbAuthenticationType;
    (function (MongoDbAuthenticationType) {
        MongoDbAuthenticationType["Basic"] = "Basic";
        MongoDbAuthenticationType["Anonymous"] = "Anonymous";
    })(MongoDbAuthenticationType || (MongoDbAuthenticationType = {}));
    /**
     * Defines values for ODataAuthenticationType.
     * Possible values include: 'Anonymous', 'Basic', 'Windows',
     * 'AadServicePrincipal', 'ManagedServiceIdentity'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ODataAuthenticationType =
     * <ODataAuthenticationType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ODataAuthenticationType;
    (function (ODataAuthenticationType) {
        ODataAuthenticationType["Anonymous"] = "Anonymous";
        ODataAuthenticationType["Basic"] = "Basic";
        ODataAuthenticationType["Windows"] = "Windows";
        ODataAuthenticationType["AadServicePrincipal"] = "AadServicePrincipal";
        ODataAuthenticationType["ManagedServiceIdentity"] = "ManagedServiceIdentity";
    })(ODataAuthenticationType || (ODataAuthenticationType = {}));
    /**
     * Defines values for ODataAadServicePrincipalCredentialType.
     * Possible values include: 'ServicePrincipalKey', 'ServicePrincipalCert'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ODataAadServicePrincipalCredentialType =
     * <ODataAadServicePrincipalCredentialType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ODataAadServicePrincipalCredentialType;
    (function (ODataAadServicePrincipalCredentialType) {
        ODataAadServicePrincipalCredentialType["ServicePrincipalKey"] = "ServicePrincipalKey";
        ODataAadServicePrincipalCredentialType["ServicePrincipalCert"] = "ServicePrincipalCert";
    })(ODataAadServicePrincipalCredentialType || (ODataAadServicePrincipalCredentialType = {}));
    /**
     * Defines values for TeradataAuthenticationType.
     * Possible values include: 'Basic', 'Windows'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: TeradataAuthenticationType =
     * <TeradataAuthenticationType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var TeradataAuthenticationType;
    (function (TeradataAuthenticationType) {
        TeradataAuthenticationType["Basic"] = "Basic";
        TeradataAuthenticationType["Windows"] = "Windows";
    })(TeradataAuthenticationType || (TeradataAuthenticationType = {}));
    /**
     * Defines values for Db2AuthenticationType.
     * Possible values include: 'Basic'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Db2AuthenticationType =
     * <Db2AuthenticationType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Db2AuthenticationType;
    (function (Db2AuthenticationType) {
        Db2AuthenticationType["Basic"] = "Basic";
    })(Db2AuthenticationType || (Db2AuthenticationType = {}));
    /**
     * Defines values for SybaseAuthenticationType.
     * Possible values include: 'Basic', 'Windows'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SybaseAuthenticationType =
     * <SybaseAuthenticationType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SybaseAuthenticationType;
    (function (SybaseAuthenticationType) {
        SybaseAuthenticationType["Basic"] = "Basic";
        SybaseAuthenticationType["Windows"] = "Windows";
    })(SybaseAuthenticationType || (SybaseAuthenticationType = {}));
    /**
     * Defines values for DatasetCompressionLevel.
     * Possible values include: 'Optimal', 'Fastest'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: DatasetCompressionLevel =
     * <DatasetCompressionLevel>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var DatasetCompressionLevel;
    (function (DatasetCompressionLevel) {
        DatasetCompressionLevel["Optimal"] = "Optimal";
        DatasetCompressionLevel["Fastest"] = "Fastest";
    })(DatasetCompressionLevel || (DatasetCompressionLevel = {}));
    /**
     * Defines values for JsonFormatFilePattern.
     * Possible values include: 'setOfObjects', 'arrayOfObjects'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: JsonFormatFilePattern =
     * <JsonFormatFilePattern>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var JsonFormatFilePattern;
    (function (JsonFormatFilePattern) {
        JsonFormatFilePattern["SetOfObjects"] = "setOfObjects";
        JsonFormatFilePattern["ArrayOfObjects"] = "arrayOfObjects";
    })(JsonFormatFilePattern || (JsonFormatFilePattern = {}));
    /**
     * Defines values for WebActivityMethod.
     * Possible values include: 'GET', 'POST', 'PUT', 'DELETE'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: WebActivityMethod =
     * <WebActivityMethod>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var WebActivityMethod;
    (function (WebActivityMethod) {
        WebActivityMethod["GET"] = "GET";
        WebActivityMethod["POST"] = "POST";
        WebActivityMethod["PUT"] = "PUT";
        WebActivityMethod["DELETE"] = "DELETE";
    })(WebActivityMethod || (WebActivityMethod = {}));
    /**
     * Defines values for CassandraSourceReadConsistencyLevels.
     * Possible values include: 'ALL', 'EACH_QUORUM', 'QUORUM', 'LOCAL_QUORUM',
     * 'ONE', 'TWO', 'THREE', 'LOCAL_ONE', 'SERIAL', 'LOCAL_SERIAL'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: CassandraSourceReadConsistencyLevels =
     * <CassandraSourceReadConsistencyLevels>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var CassandraSourceReadConsistencyLevels;
    (function (CassandraSourceReadConsistencyLevels) {
        CassandraSourceReadConsistencyLevels["ALL"] = "ALL";
        CassandraSourceReadConsistencyLevels["EACHQUORUM"] = "EACH_QUORUM";
        CassandraSourceReadConsistencyLevels["QUORUM"] = "QUORUM";
        CassandraSourceReadConsistencyLevels["LOCALQUORUM"] = "LOCAL_QUORUM";
        CassandraSourceReadConsistencyLevels["ONE"] = "ONE";
        CassandraSourceReadConsistencyLevels["TWO"] = "TWO";
        CassandraSourceReadConsistencyLevels["THREE"] = "THREE";
        CassandraSourceReadConsistencyLevels["LOCALONE"] = "LOCAL_ONE";
        CassandraSourceReadConsistencyLevels["SERIAL"] = "SERIAL";
        CassandraSourceReadConsistencyLevels["LOCALSERIAL"] = "LOCAL_SERIAL";
    })(CassandraSourceReadConsistencyLevels || (CassandraSourceReadConsistencyLevels = {}));
    /**
     * Defines values for StoredProcedureParameterType.
     * Possible values include: 'String', 'Int', 'Decimal', 'Guid', 'Boolean',
     * 'Date'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: StoredProcedureParameterType =
     * <StoredProcedureParameterType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var StoredProcedureParameterType;
    (function (StoredProcedureParameterType) {
        StoredProcedureParameterType["String"] = "String";
        StoredProcedureParameterType["Int"] = "Int";
        StoredProcedureParameterType["Decimal"] = "Decimal";
        StoredProcedureParameterType["Guid"] = "Guid";
        StoredProcedureParameterType["Boolean"] = "Boolean";
        StoredProcedureParameterType["Date"] = "Date";
    })(StoredProcedureParameterType || (StoredProcedureParameterType = {}));
    /**
     * Defines values for SalesforceSourceReadBehavior.
     * Possible values include: 'Query', 'QueryAll'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SalesforceSourceReadBehavior =
     * <SalesforceSourceReadBehavior>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SalesforceSourceReadBehavior;
    (function (SalesforceSourceReadBehavior) {
        SalesforceSourceReadBehavior["Query"] = "Query";
        SalesforceSourceReadBehavior["QueryAll"] = "QueryAll";
    })(SalesforceSourceReadBehavior || (SalesforceSourceReadBehavior = {}));
    /**
     * Defines values for SSISExecutionRuntime.
     * Possible values include: 'x64', 'x86'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SSISExecutionRuntime =
     * <SSISExecutionRuntime>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SSISExecutionRuntime;
    (function (SSISExecutionRuntime) {
        SSISExecutionRuntime["X64"] = "x64";
        SSISExecutionRuntime["X86"] = "x86";
    })(SSISExecutionRuntime || (SSISExecutionRuntime = {}));
    /**
     * Defines values for HDInsightActivityDebugInfoOption.
     * Possible values include: 'None', 'Always', 'Failure'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: HDInsightActivityDebugInfoOption =
     * <HDInsightActivityDebugInfoOption>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var HDInsightActivityDebugInfoOption;
    (function (HDInsightActivityDebugInfoOption) {
        HDInsightActivityDebugInfoOption["None"] = "None";
        HDInsightActivityDebugInfoOption["Always"] = "Always";
        HDInsightActivityDebugInfoOption["Failure"] = "Failure";
    })(HDInsightActivityDebugInfoOption || (HDInsightActivityDebugInfoOption = {}));
    /**
     * Defines values for SalesforceSinkWriteBehavior.
     * Possible values include: 'Insert', 'Upsert'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SalesforceSinkWriteBehavior =
     * <SalesforceSinkWriteBehavior>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SalesforceSinkWriteBehavior;
    (function (SalesforceSinkWriteBehavior) {
        SalesforceSinkWriteBehavior["Insert"] = "Insert";
        SalesforceSinkWriteBehavior["Upsert"] = "Upsert";
    })(SalesforceSinkWriteBehavior || (SalesforceSinkWriteBehavior = {}));
    /**
     * Defines values for AzureSearchIndexWriteBehaviorType.
     * Possible values include: 'Merge', 'Upload'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: AzureSearchIndexWriteBehaviorType =
     * <AzureSearchIndexWriteBehaviorType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var AzureSearchIndexWriteBehaviorType;
    (function (AzureSearchIndexWriteBehaviorType) {
        AzureSearchIndexWriteBehaviorType["Merge"] = "Merge";
        AzureSearchIndexWriteBehaviorType["Upload"] = "Upload";
    })(AzureSearchIndexWriteBehaviorType || (AzureSearchIndexWriteBehaviorType = {}));
    /**
     * Defines values for CopyBehaviorType.
     * Possible values include: 'PreserveHierarchy', 'FlattenHierarchy',
     * 'MergeFiles'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: CopyBehaviorType =
     * <CopyBehaviorType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var CopyBehaviorType;
    (function (CopyBehaviorType) {
        CopyBehaviorType["PreserveHierarchy"] = "PreserveHierarchy";
        CopyBehaviorType["FlattenHierarchy"] = "FlattenHierarchy";
        CopyBehaviorType["MergeFiles"] = "MergeFiles";
    })(CopyBehaviorType || (CopyBehaviorType = {}));
    /**
     * Defines values for PolybaseSettingsRejectType.
     * Possible values include: 'value', 'percentage'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: PolybaseSettingsRejectType =
     * <PolybaseSettingsRejectType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var PolybaseSettingsRejectType;
    (function (PolybaseSettingsRejectType) {
        PolybaseSettingsRejectType["Value"] = "value";
        PolybaseSettingsRejectType["Percentage"] = "percentage";
    })(PolybaseSettingsRejectType || (PolybaseSettingsRejectType = {}));
    /**
     * Defines values for SapCloudForCustomerSinkWriteBehavior.
     * Possible values include: 'Insert', 'Update'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SapCloudForCustomerSinkWriteBehavior =
     * <SapCloudForCustomerSinkWriteBehavior>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SapCloudForCustomerSinkWriteBehavior;
    (function (SapCloudForCustomerSinkWriteBehavior) {
        SapCloudForCustomerSinkWriteBehavior["Insert"] = "Insert";
        SapCloudForCustomerSinkWriteBehavior["Update"] = "Update";
    })(SapCloudForCustomerSinkWriteBehavior || (SapCloudForCustomerSinkWriteBehavior = {}));
    /**
     * Defines values for IntegrationRuntimeType.
     * Possible values include: 'Managed', 'SelfHosted'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: IntegrationRuntimeType =
     * <IntegrationRuntimeType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var IntegrationRuntimeType;
    (function (IntegrationRuntimeType) {
        IntegrationRuntimeType["Managed"] = "Managed";
        IntegrationRuntimeType["SelfHosted"] = "SelfHosted";
    })(IntegrationRuntimeType || (IntegrationRuntimeType = {}));
    /**
     * Defines values for SelfHostedIntegrationRuntimeNodeStatus.
     * Possible values include: 'NeedRegistration', 'Online', 'Limited', 'Offline',
     * 'Upgrading', 'Initializing', 'InitializeFailed'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SelfHostedIntegrationRuntimeNodeStatus =
     * <SelfHostedIntegrationRuntimeNodeStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SelfHostedIntegrationRuntimeNodeStatus;
    (function (SelfHostedIntegrationRuntimeNodeStatus) {
        SelfHostedIntegrationRuntimeNodeStatus["NeedRegistration"] = "NeedRegistration";
        SelfHostedIntegrationRuntimeNodeStatus["Online"] = "Online";
        SelfHostedIntegrationRuntimeNodeStatus["Limited"] = "Limited";
        SelfHostedIntegrationRuntimeNodeStatus["Offline"] = "Offline";
        SelfHostedIntegrationRuntimeNodeStatus["Upgrading"] = "Upgrading";
        SelfHostedIntegrationRuntimeNodeStatus["Initializing"] = "Initializing";
        SelfHostedIntegrationRuntimeNodeStatus["InitializeFailed"] = "InitializeFailed";
    })(SelfHostedIntegrationRuntimeNodeStatus || (SelfHostedIntegrationRuntimeNodeStatus = {}));
    /**
     * Defines values for IntegrationRuntimeUpdateResult.
     * Possible values include: 'None', 'Succeed', 'Fail'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: IntegrationRuntimeUpdateResult =
     * <IntegrationRuntimeUpdateResult>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var IntegrationRuntimeUpdateResult;
    (function (IntegrationRuntimeUpdateResult) {
        IntegrationRuntimeUpdateResult["None"] = "None";
        IntegrationRuntimeUpdateResult["Succeed"] = "Succeed";
        IntegrationRuntimeUpdateResult["Fail"] = "Fail";
    })(IntegrationRuntimeUpdateResult || (IntegrationRuntimeUpdateResult = {}));
    /**
     * Defines values for IntegrationRuntimeInternalChannelEncryptionMode.
     * Possible values include: 'NotSet', 'SslEncrypted', 'NotEncrypted'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: IntegrationRuntimeInternalChannelEncryptionMode =
     * <IntegrationRuntimeInternalChannelEncryptionMode>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var IntegrationRuntimeInternalChannelEncryptionMode;
    (function (IntegrationRuntimeInternalChannelEncryptionMode) {
        IntegrationRuntimeInternalChannelEncryptionMode["NotSet"] = "NotSet";
        IntegrationRuntimeInternalChannelEncryptionMode["SslEncrypted"] = "SslEncrypted";
        IntegrationRuntimeInternalChannelEncryptionMode["NotEncrypted"] = "NotEncrypted";
    })(IntegrationRuntimeInternalChannelEncryptionMode || (IntegrationRuntimeInternalChannelEncryptionMode = {}));
    /**
     * Defines values for ManagedIntegrationRuntimeNodeStatus.
     * Possible values include: 'Starting', 'Available', 'Recycling', 'Unavailable'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ManagedIntegrationRuntimeNodeStatus =
     * <ManagedIntegrationRuntimeNodeStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ManagedIntegrationRuntimeNodeStatus;
    (function (ManagedIntegrationRuntimeNodeStatus) {
        ManagedIntegrationRuntimeNodeStatus["Starting"] = "Starting";
        ManagedIntegrationRuntimeNodeStatus["Available"] = "Available";
        ManagedIntegrationRuntimeNodeStatus["Recycling"] = "Recycling";
        ManagedIntegrationRuntimeNodeStatus["Unavailable"] = "Unavailable";
    })(ManagedIntegrationRuntimeNodeStatus || (ManagedIntegrationRuntimeNodeStatus = {}));
    /**
     * Defines values for IntegrationRuntimeSsisCatalogPricingTier.
     * Possible values include: 'Basic', 'Standard', 'Premium', 'PremiumRS'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: IntegrationRuntimeSsisCatalogPricingTier =
     * <IntegrationRuntimeSsisCatalogPricingTier>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var IntegrationRuntimeSsisCatalogPricingTier;
    (function (IntegrationRuntimeSsisCatalogPricingTier) {
        IntegrationRuntimeSsisCatalogPricingTier["Basic"] = "Basic";
        IntegrationRuntimeSsisCatalogPricingTier["Standard"] = "Standard";
        IntegrationRuntimeSsisCatalogPricingTier["Premium"] = "Premium";
        IntegrationRuntimeSsisCatalogPricingTier["PremiumRS"] = "PremiumRS";
    })(IntegrationRuntimeSsisCatalogPricingTier || (IntegrationRuntimeSsisCatalogPricingTier = {}));
    /**
     * Defines values for IntegrationRuntimeLicenseType.
     * Possible values include: 'BasePrice', 'LicenseIncluded'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: IntegrationRuntimeLicenseType =
     * <IntegrationRuntimeLicenseType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var IntegrationRuntimeLicenseType;
    (function (IntegrationRuntimeLicenseType) {
        IntegrationRuntimeLicenseType["BasePrice"] = "BasePrice";
        IntegrationRuntimeLicenseType["LicenseIncluded"] = "LicenseIncluded";
    })(IntegrationRuntimeLicenseType || (IntegrationRuntimeLicenseType = {}));
    /**
     * Defines values for IntegrationRuntimeEdition.
     * Possible values include: 'Standard', 'Enterprise'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: IntegrationRuntimeEdition =
     * <IntegrationRuntimeEdition>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var IntegrationRuntimeEdition;
    (function (IntegrationRuntimeEdition) {
        IntegrationRuntimeEdition["Standard"] = "Standard";
        IntegrationRuntimeEdition["Enterprise"] = "Enterprise";
    })(IntegrationRuntimeEdition || (IntegrationRuntimeEdition = {}));
    /**
     * Defines values for IntegrationRuntimeAuthKeyName.
     * Possible values include: 'authKey1', 'authKey2'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: IntegrationRuntimeAuthKeyName =
     * <IntegrationRuntimeAuthKeyName>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var IntegrationRuntimeAuthKeyName;
    (function (IntegrationRuntimeAuthKeyName) {
        IntegrationRuntimeAuthKeyName["AuthKey1"] = "authKey1";
        IntegrationRuntimeAuthKeyName["AuthKey2"] = "authKey2";
    })(IntegrationRuntimeAuthKeyName || (IntegrationRuntimeAuthKeyName = {}));

    var index = /*#__PURE__*/Object.freeze({
        get IntegrationRuntimeState () { return IntegrationRuntimeState; },
        get IntegrationRuntimeAutoUpdate () { return IntegrationRuntimeAutoUpdate; },
        get ParameterType () { return ParameterType; },
        get DependencyCondition () { return DependencyCondition; },
        get VariableType () { return VariableType; },
        get TriggerRuntimeState () { return TriggerRuntimeState; },
        get RunQueryFilterOperand () { return RunQueryFilterOperand; },
        get RunQueryFilterOperator () { return RunQueryFilterOperator; },
        get RunQueryOrderByField () { return RunQueryOrderByField; },
        get RunQueryOrder () { return RunQueryOrder; },
        get TriggerRunStatus () { return TriggerRunStatus; },
        get TumblingWindowFrequency () { return TumblingWindowFrequency; },
        get BlobEventTypes () { return BlobEventTypes; },
        get DayOfWeek () { return DayOfWeek; },
        get DaysOfWeek () { return DaysOfWeek; },
        get RecurrenceFrequency () { return RecurrenceFrequency; },
        get SparkServerType () { return SparkServerType; },
        get SparkThriftTransportProtocol () { return SparkThriftTransportProtocol; },
        get SparkAuthenticationType () { return SparkAuthenticationType; },
        get ServiceNowAuthenticationType () { return ServiceNowAuthenticationType; },
        get PrestoAuthenticationType () { return PrestoAuthenticationType; },
        get PhoenixAuthenticationType () { return PhoenixAuthenticationType; },
        get ImpalaAuthenticationType () { return ImpalaAuthenticationType; },
        get HiveServerType () { return HiveServerType; },
        get HiveThriftTransportProtocol () { return HiveThriftTransportProtocol; },
        get HiveAuthenticationType () { return HiveAuthenticationType; },
        get HBaseAuthenticationType () { return HBaseAuthenticationType; },
        get GoogleBigQueryAuthenticationType () { return GoogleBigQueryAuthenticationType; },
        get GoogleAdWordsAuthenticationType () { return GoogleAdWordsAuthenticationType; },
        get SapHanaAuthenticationType () { return SapHanaAuthenticationType; },
        get SftpAuthenticationType () { return SftpAuthenticationType; },
        get FtpAuthenticationType () { return FtpAuthenticationType; },
        get RestServiceAuthenticationType () { return RestServiceAuthenticationType; },
        get HttpAuthenticationType () { return HttpAuthenticationType; },
        get MongoDbAuthenticationType () { return MongoDbAuthenticationType; },
        get ODataAuthenticationType () { return ODataAuthenticationType; },
        get ODataAadServicePrincipalCredentialType () { return ODataAadServicePrincipalCredentialType; },
        get TeradataAuthenticationType () { return TeradataAuthenticationType; },
        get Db2AuthenticationType () { return Db2AuthenticationType; },
        get SybaseAuthenticationType () { return SybaseAuthenticationType; },
        get DatasetCompressionLevel () { return DatasetCompressionLevel; },
        get JsonFormatFilePattern () { return JsonFormatFilePattern; },
        get WebActivityMethod () { return WebActivityMethod; },
        get CassandraSourceReadConsistencyLevels () { return CassandraSourceReadConsistencyLevels; },
        get StoredProcedureParameterType () { return StoredProcedureParameterType; },
        get SalesforceSourceReadBehavior () { return SalesforceSourceReadBehavior; },
        get SSISExecutionRuntime () { return SSISExecutionRuntime; },
        get HDInsightActivityDebugInfoOption () { return HDInsightActivityDebugInfoOption; },
        get SalesforceSinkWriteBehavior () { return SalesforceSinkWriteBehavior; },
        get AzureSearchIndexWriteBehaviorType () { return AzureSearchIndexWriteBehaviorType; },
        get CopyBehaviorType () { return CopyBehaviorType; },
        get PolybaseSettingsRejectType () { return PolybaseSettingsRejectType; },
        get SapCloudForCustomerSinkWriteBehavior () { return SapCloudForCustomerSinkWriteBehavior; },
        get IntegrationRuntimeType () { return IntegrationRuntimeType; },
        get SelfHostedIntegrationRuntimeNodeStatus () { return SelfHostedIntegrationRuntimeNodeStatus; },
        get IntegrationRuntimeUpdateResult () { return IntegrationRuntimeUpdateResult; },
        get IntegrationRuntimeInternalChannelEncryptionMode () { return IntegrationRuntimeInternalChannelEncryptionMode; },
        get ManagedIntegrationRuntimeNodeStatus () { return ManagedIntegrationRuntimeNodeStatus; },
        get IntegrationRuntimeSsisCatalogPricingTier () { return IntegrationRuntimeSsisCatalogPricingTier; },
        get IntegrationRuntimeLicenseType () { return IntegrationRuntimeLicenseType; },
        get IntegrationRuntimeEdition () { return IntegrationRuntimeEdition; },
        get IntegrationRuntimeAuthKeyName () { return IntegrationRuntimeAuthKeyName; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                eTag: {
                    readOnly: true,
                    serializedName: "eTag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SubResource = {
        serializedName: "SubResource",
        type: {
            name: "Composite",
            className: "SubResource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Expression = {
        serializedName: "Expression",
        type: {
            name: "Composite",
            className: "Expression",
            modelProperties: {
                type: {
                    required: true,
                    isConstant: true,
                    serializedName: "type",
                    defaultValue: 'Expression',
                    type: {
                        name: "String"
                    }
                },
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SecretBase = {
        serializedName: "SecretBase",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "type",
                clientName: "type"
            },
            uberParent: "SecretBase",
            className: "SecretBase",
            modelProperties: {
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SecureString = {
        serializedName: "SecureString",
        type: {
            name: "Composite",
            polymorphicDiscriminator: SecretBase.type.polymorphicDiscriminator,
            uberParent: "SecretBase",
            className: "SecureString",
            modelProperties: __assign({}, SecretBase.type.modelProperties, { value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var LinkedServiceReference = {
        serializedName: "LinkedServiceReference",
        type: {
            name: "Composite",
            className: "LinkedServiceReference",
            modelProperties: {
                type: {
                    required: true,
                    isConstant: true,
                    serializedName: "type",
                    defaultValue: 'LinkedServiceReference',
                    type: {
                        name: "String"
                    }
                },
                referenceName: {
                    required: true,
                    serializedName: "referenceName",
                    type: {
                        name: "String"
                    }
                },
                parameters: {
                    serializedName: "parameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }
            }
        }
    };
    var AzureKeyVaultSecretReference = {
        serializedName: "AzureKeyVaultSecret",
        type: {
            name: "Composite",
            polymorphicDiscriminator: SecretBase.type.polymorphicDiscriminator,
            uberParent: "SecretBase",
            className: "AzureKeyVaultSecretReference",
            modelProperties: __assign({}, SecretBase.type.modelProperties, { store: {
                    required: true,
                    serializedName: "store",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "LinkedServiceReference"
                    }
                }, secretName: {
                    required: true,
                    serializedName: "secretName",
                    type: {
                        name: "Object"
                    }
                }, secretVersion: {
                    serializedName: "secretVersion",
                    type: {
                        name: "Object"
                    }
                } })
        }
    };
    var FactoryIdentity = {
        serializedName: "FactoryIdentity",
        type: {
            name: "Composite",
            className: "FactoryIdentity",
            modelProperties: {
                type: {
                    required: true,
                    isConstant: true,
                    serializedName: "type",
                    defaultValue: 'SystemAssigned',
                    type: {
                        name: "String"
                    }
                },
                principalId: {
                    readOnly: true,
                    serializedName: "principalId",
                    type: {
                        name: "Uuid"
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "Uuid"
                    }
                }
            }
        }
    };
    var FactoryRepoConfiguration = {
        serializedName: "FactoryRepoConfiguration",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "type",
                clientName: "type"
            },
            uberParent: "FactoryRepoConfiguration",
            className: "FactoryRepoConfiguration",
            modelProperties: {
                accountName: {
                    required: true,
                    serializedName: "accountName",
                    type: {
                        name: "String"
                    }
                },
                repositoryName: {
                    required: true,
                    serializedName: "repositoryName",
                    type: {
                        name: "String"
                    }
                },
                collaborationBranch: {
                    required: true,
                    serializedName: "collaborationBranch",
                    type: {
                        name: "String"
                    }
                },
                rootFolder: {
                    required: true,
                    serializedName: "rootFolder",
                    type: {
                        name: "String"
                    }
                },
                lastCommitId: {
                    serializedName: "lastCommitId",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Factory = {
        serializedName: "Factory",
        type: {
            name: "Composite",
            className: "Factory",
            modelProperties: __assign({}, Resource.type.modelProperties, { identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "FactoryIdentity"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, createTime: {
                    readOnly: true,
                    serializedName: "properties.createTime",
                    type: {
                        name: "DateTime"
                    }
                }, version: {
                    readOnly: true,
                    serializedName: "properties.version",
                    type: {
                        name: "String"
                    }
                }, repoConfiguration: {
                    serializedName: "properties.repoConfiguration",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "FactoryRepoConfiguration",
                        className: "FactoryRepoConfiguration"
                    }
                } }),
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var IntegrationRuntime = {
        serializedName: "IntegrationRuntime",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "type",
                clientName: "type"
            },
            uberParent: "IntegrationRuntime",
            className: "IntegrationRuntime",
            modelProperties: {
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var IntegrationRuntimeResource = {
        serializedName: "IntegrationRuntimeResource",
        type: {
            name: "Composite",
            className: "IntegrationRuntimeResource",
            modelProperties: __assign({}, SubResource.type.modelProperties, { properties: {
                    required: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "IntegrationRuntime",
                        className: "IntegrationRuntime",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                } })
        }
    };
    var IntegrationRuntimeReference = {
        serializedName: "IntegrationRuntimeReference",
        type: {
            name: "Composite",
            className: "IntegrationRuntimeReference",
            modelProperties: {
                type: {
                    required: true,
                    isConstant: true,
                    serializedName: "type",
                    defaultValue: 'IntegrationRuntimeReference',
                    type: {
                        name: "String"
                    }
                },
                referenceName: {
                    required: true,
                    serializedName: "referenceName",
                    type: {
                        name: "String"
                    }
                },
                parameters: {
                    serializedName: "parameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }
            }
        }
    };
    var IntegrationRuntimeStatus = {
        serializedName: "IntegrationRuntimeStatus",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "type",
                clientName: "type"
            },
            uberParent: "IntegrationRuntimeStatus",
            className: "IntegrationRuntimeStatus",
            modelProperties: {
                dataFactoryName: {
                    readOnly: true,
                    serializedName: "dataFactoryName",
                    type: {
                        name: "String"
                    }
                },
                state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var IntegrationRuntimeStatusResponse = {
        serializedName: "IntegrationRuntimeStatusResponse",
        type: {
            name: "Composite",
            className: "IntegrationRuntimeStatusResponse",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    required: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "IntegrationRuntimeStatus",
                        className: "IntegrationRuntimeStatus",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }
            }
        }
    };
    var IntegrationRuntimeStatusListResponse = {
        serializedName: "IntegrationRuntimeStatusListResponse",
        type: {
            name: "Composite",
            className: "IntegrationRuntimeStatusListResponse",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IntegrationRuntimeStatusResponse"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UpdateIntegrationRuntimeRequest = {
        serializedName: "UpdateIntegrationRuntimeRequest",
        type: {
            name: "Composite",
            className: "UpdateIntegrationRuntimeRequest",
            modelProperties: {
                autoUpdate: {
                    serializedName: "autoUpdate",
                    type: {
                        name: "String"
                    }
                },
                updateDelayOffset: {
                    serializedName: "updateDelayOffset",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UpdateIntegrationRuntimeNodeRequest = {
        serializedName: "UpdateIntegrationRuntimeNodeRequest",
        type: {
            name: "Composite",
            className: "UpdateIntegrationRuntimeNodeRequest",
            modelProperties: {
                concurrentJobsLimit: {
                    serializedName: "concurrentJobsLimit",
                    constraints: {
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var LinkedIntegrationRuntimeRequest = {
        serializedName: "LinkedIntegrationRuntimeRequest",
        type: {
            name: "Composite",
            className: "LinkedIntegrationRuntimeRequest",
            modelProperties: {
                linkedFactoryName: {
                    required: true,
                    serializedName: "factoryName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CreateLinkedIntegrationRuntimeRequest = {
        serializedName: "CreateLinkedIntegrationRuntimeRequest",
        type: {
            name: "Composite",
            className: "CreateLinkedIntegrationRuntimeRequest",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                subscriptionId: {
                    serializedName: "subscriptionId",
                    type: {
                        name: "String"
                    }
                },
                dataFactoryName: {
                    serializedName: "dataFactoryName",
                    type: {
                        name: "String"
                    }
                },
                dataFactoryLocation: {
                    serializedName: "dataFactoryLocation",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ParameterSpecification = {
        serializedName: "ParameterSpecification",
        type: {
            name: "Composite",
            className: "ParameterSpecification",
            modelProperties: {
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                defaultValue: {
                    serializedName: "defaultValue",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var LinkedService = {
        serializedName: "LinkedService",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "type",
                clientName: "type"
            },
            uberParent: "LinkedService",
            className: "LinkedService",
            modelProperties: {
                connectVia: {
                    serializedName: "connectVia",
                    type: {
                        name: "Composite",
                        className: "IntegrationRuntimeReference"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                parameters: {
                    serializedName: "parameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "ParameterSpecification"
                            }
                        }
                    }
                },
                annotations: {
                    serializedName: "annotations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var LinkedServiceResource = {
        serializedName: "LinkedServiceResource",
        type: {
            name: "Composite",
            className: "LinkedServiceResource",
            modelProperties: __assign({}, SubResource.type.modelProperties, { properties: {
                    required: true,
                    serializedName: "properties",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "LinkedService",
                        className: "LinkedService",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                } })
        }
    };
    var DatasetFolder = {
        serializedName: "Dataset_folder",
        type: {
            name: "Composite",
            className: "DatasetFolder",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Dataset = {
        serializedName: "Dataset",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "type",
                clientName: "type"
            },
            uberParent: "Dataset",
            className: "Dataset",
            modelProperties: {
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                structure: {
                    serializedName: "structure",
                    type: {
                        name: "Object"
                    }
                },
                linkedServiceName: {
                    required: true,
                    serializedName: "linkedServiceName",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "LinkedServiceReference"
                    }
                },
                parameters: {
                    serializedName: "parameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "ParameterSpecification"
                            }
                        }
                    }
                },
                annotations: {
                    serializedName: "annotations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                },
                folder: {
                    serializedName: "folder",
                    type: {
                        name: "Composite",
                        className: "DatasetFolder"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var DatasetResource = {
        serializedName: "DatasetResource",
        type: {
            name: "Composite",
            className: "DatasetResource",
            modelProperties: __assign({}, SubResource.type.modelProperties, { properties: {
                    required: true,
                    serializedName: "properties",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "Dataset",
                        className: "Dataset",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                } })
        }
    };
    var ActivityDependency = {
        serializedName: "ActivityDependency",
        type: {
            name: "Composite",
            className: "ActivityDependency",
            modelProperties: {
                activity: {
                    required: true,
                    serializedName: "activity",
                    type: {
                        name: "String"
                    }
                },
                dependencyConditions: {
                    required: true,
                    serializedName: "dependencyConditions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var UserProperty = {
        serializedName: "UserProperty",
        type: {
            name: "Composite",
            className: "UserProperty",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var Activity = {
        serializedName: "Activity",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "type",
                clientName: "type"
            },
            uberParent: "Activity",
            className: "Activity",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                dependsOn: {
                    serializedName: "dependsOn",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ActivityDependency",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                },
                userProperties: {
                    serializedName: "userProperties",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UserProperty"
                            }
                        }
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var VariableSpecification = {
        serializedName: "VariableSpecification",
        type: {
            name: "Composite",
            className: "VariableSpecification",
            modelProperties: {
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                defaultValue: {
                    serializedName: "defaultValue",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var PipelineFolder = {
        serializedName: "Pipeline_folder",
        type: {
            name: "Composite",
            className: "PipelineFolder",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PipelineResource = {
        serializedName: "PipelineResource",
        type: {
            name: "Composite",
            className: "PipelineResource",
            modelProperties: __assign({}, SubResource.type.modelProperties, { description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, activities: {
                    serializedName: "properties.activities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: {
                                    serializedName: "type",
                                    clientName: "type"
                                },
                                uberParent: "Activity",
                                className: "Activity",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                }, parameters: {
                    serializedName: "properties.parameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "ParameterSpecification"
                            }
                        }
                    }
                }, variables: {
                    serializedName: "properties.variables",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "VariableSpecification"
                            }
                        }
                    }
                }, concurrency: {
                    serializedName: "properties.concurrency",
                    constraints: {
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }, annotations: {
                    serializedName: "properties.annotations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }, folder: {
                    serializedName: "properties.folder",
                    type: {
                        name: "Composite",
                        className: "PipelineFolder"
                    }
                } }),
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var Trigger = {
        serializedName: "Trigger",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "type",
                clientName: "type"
            },
            uberParent: "Trigger",
            className: "Trigger",
            modelProperties: {
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                runtimeState: {
                    readOnly: true,
                    serializedName: "runtimeState",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var TriggerResource = {
        serializedName: "TriggerResource",
        type: {
            name: "Composite",
            className: "TriggerResource",
            modelProperties: __assign({}, SubResource.type.modelProperties, { properties: {
                    required: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "Trigger",
                        className: "Trigger",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                } })
        }
    };
    var CreateRunResponse = {
        serializedName: "CreateRunResponse",
        type: {
            name: "Composite",
            className: "CreateRunResponse",
            modelProperties: {
                runId: {
                    required: true,
                    serializedName: "runId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FactoryVSTSConfiguration = {
        serializedName: "FactoryVSTSConfiguration",
        type: {
            name: "Composite",
            polymorphicDiscriminator: FactoryRepoConfiguration.type.polymorphicDiscriminator,
            uberParent: "FactoryRepoConfiguration",
            className: "FactoryVSTSConfiguration",
            modelProperties: __assign({}, FactoryRepoConfiguration.type.modelProperties, { projectName: {
                    required: true,
                    serializedName: "projectName",
                    type: {
                        name: "String"
                    }
                }, tenantId: {
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var FactoryGitHubConfiguration = {
        serializedName: "FactoryGitHubConfiguration",
        type: {
            name: "Composite",
            polymorphicDiscriminator: FactoryRepoConfiguration.type.polymorphicDiscriminator,
            uberParent: "FactoryRepoConfiguration",
            className: "FactoryGitHubConfiguration",
            modelProperties: __assign({}, FactoryRepoConfiguration.type.modelProperties, { hostName: {
                    serializedName: "hostName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var FactoryRepoUpdate = {
        serializedName: "FactoryRepoUpdate",
        type: {
            name: "Composite",
            className: "FactoryRepoUpdate",
            modelProperties: {
                factoryResourceId: {
                    serializedName: "factoryResourceId",
                    type: {
                        name: "String"
                    }
                },
                repoConfiguration: {
                    serializedName: "repoConfiguration",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "FactoryRepoConfiguration",
                        className: "FactoryRepoConfiguration"
                    }
                }
            }
        }
    };
    var GitHubAccessTokenRequest = {
        serializedName: "GitHubAccessTokenRequest",
        type: {
            name: "Composite",
            className: "GitHubAccessTokenRequest",
            modelProperties: {
                gitHubAccessCode: {
                    required: true,
                    serializedName: "gitHubAccessCode",
                    type: {
                        name: "String"
                    }
                },
                gitHubClientId: {
                    serializedName: "gitHubClientId",
                    type: {
                        name: "String"
                    }
                },
                gitHubAccessTokenBaseUrl: {
                    required: true,
                    serializedName: "gitHubAccessTokenBaseUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GitHubAccessTokenResponse = {
        serializedName: "GitHubAccessTokenResponse",
        type: {
            name: "Composite",
            className: "GitHubAccessTokenResponse",
            modelProperties: {
                gitHubAccessToken: {
                    serializedName: "gitHubAccessToken",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PipelineReference = {
        serializedName: "PipelineReference",
        type: {
            name: "Composite",
            className: "PipelineReference",
            modelProperties: {
                type: {
                    required: true,
                    isConstant: true,
                    serializedName: "type",
                    defaultValue: 'PipelineReference',
                    type: {
                        name: "String"
                    }
                },
                referenceName: {
                    required: true,
                    serializedName: "referenceName",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TriggerPipelineReference = {
        serializedName: "TriggerPipelineReference",
        type: {
            name: "Composite",
            className: "TriggerPipelineReference",
            modelProperties: {
                pipelineReference: {
                    serializedName: "pipelineReference",
                    type: {
                        name: "Composite",
                        className: "PipelineReference"
                    }
                },
                parameters: {
                    serializedName: "parameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }
            }
        }
    };
    var FactoryUpdateParameters = {
        serializedName: "FactoryUpdateParameters",
        type: {
            name: "Composite",
            className: "FactoryUpdateParameters",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "FactoryIdentity"
                    }
                }
            }
        }
    };
    var DatasetReference = {
        serializedName: "DatasetReference",
        type: {
            name: "Composite",
            className: "DatasetReference",
            modelProperties: {
                type: {
                    required: true,
                    isConstant: true,
                    serializedName: "type",
                    defaultValue: 'DatasetReference',
                    type: {
                        name: "String"
                    }
                },
                referenceName: {
                    required: true,
                    serializedName: "referenceName",
                    type: {
                        name: "String"
                    }
                },
                parameters: {
                    serializedName: "parameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }
            }
        }
    };
    var RunQueryFilter = {
        serializedName: "RunQueryFilter",
        type: {
            name: "Composite",
            className: "RunQueryFilter",
            modelProperties: {
                operand: {
                    required: true,
                    serializedName: "operand",
                    type: {
                        name: "String"
                    }
                },
                operator: {
                    required: true,
                    serializedName: "operator",
                    type: {
                        name: "String"
                    }
                },
                values: {
                    required: true,
                    serializedName: "values",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var RunQueryOrderBy = {
        serializedName: "RunQueryOrderBy",
        type: {
            name: "Composite",
            className: "RunQueryOrderBy",
            modelProperties: {
                orderBy: {
                    required: true,
                    serializedName: "orderBy",
                    type: {
                        name: "String"
                    }
                },
                order: {
                    required: true,
                    serializedName: "order",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RunFilterParameters = {
        serializedName: "RunFilterParameters",
        type: {
            name: "Composite",
            className: "RunFilterParameters",
            modelProperties: {
                continuationToken: {
                    serializedName: "continuationToken",
                    type: {
                        name: "String"
                    }
                },
                lastUpdatedAfter: {
                    required: true,
                    serializedName: "lastUpdatedAfter",
                    type: {
                        name: "DateTime"
                    }
                },
                lastUpdatedBefore: {
                    required: true,
                    serializedName: "lastUpdatedBefore",
                    type: {
                        name: "DateTime"
                    }
                },
                filters: {
                    serializedName: "filters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RunQueryFilter"
                            }
                        }
                    }
                },
                orderBy: {
                    serializedName: "orderBy",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RunQueryOrderBy"
                            }
                        }
                    }
                }
            }
        }
    };
    var PipelineRunInvokedBy = {
        serializedName: "PipelineRunInvokedBy",
        type: {
            name: "Composite",
            className: "PipelineRunInvokedBy",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                invokedByType: {
                    readOnly: true,
                    serializedName: "invokedByType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PipelineRun = {
        serializedName: "PipelineRun",
        type: {
            name: "Composite",
            className: "PipelineRun",
            modelProperties: {
                runId: {
                    readOnly: true,
                    serializedName: "runId",
                    type: {
                        name: "String"
                    }
                },
                pipelineName: {
                    readOnly: true,
                    serializedName: "pipelineName",
                    type: {
                        name: "String"
                    }
                },
                parameters: {
                    readOnly: true,
                    serializedName: "parameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                invokedBy: {
                    readOnly: true,
                    serializedName: "invokedBy",
                    type: {
                        name: "Composite",
                        className: "PipelineRunInvokedBy"
                    }
                },
                lastUpdated: {
                    readOnly: true,
                    serializedName: "lastUpdated",
                    type: {
                        name: "DateTime"
                    }
                },
                runStart: {
                    readOnly: true,
                    serializedName: "runStart",
                    type: {
                        name: "DateTime"
                    }
                },
                runEnd: {
                    readOnly: true,
                    serializedName: "runEnd",
                    type: {
                        name: "DateTime"
                    }
                },
                durationInMs: {
                    readOnly: true,
                    serializedName: "durationInMs",
                    type: {
                        name: "Number"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var PipelineRunsQueryResponse = {
        serializedName: "PipelineRunsQueryResponse",
        type: {
            name: "Composite",
            className: "PipelineRunsQueryResponse",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PipelineRun",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                },
                continuationToken: {
                    serializedName: "continuationToken",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ActivityRun = {
        serializedName: "ActivityRun",
        type: {
            name: "Composite",
            className: "ActivityRun",
            modelProperties: {
                pipelineName: {
                    readOnly: true,
                    serializedName: "pipelineName",
                    type: {
                        name: "String"
                    }
                },
                pipelineRunId: {
                    readOnly: true,
                    serializedName: "pipelineRunId",
                    type: {
                        name: "String"
                    }
                },
                activityName: {
                    readOnly: true,
                    serializedName: "activityName",
                    type: {
                        name: "String"
                    }
                },
                activityType: {
                    readOnly: true,
                    serializedName: "activityType",
                    type: {
                        name: "String"
                    }
                },
                activityRunId: {
                    readOnly: true,
                    serializedName: "activityRunId",
                    type: {
                        name: "String"
                    }
                },
                linkedServiceName: {
                    readOnly: true,
                    serializedName: "linkedServiceName",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                activityRunStart: {
                    readOnly: true,
                    serializedName: "activityRunStart",
                    type: {
                        name: "DateTime"
                    }
                },
                activityRunEnd: {
                    readOnly: true,
                    serializedName: "activityRunEnd",
                    type: {
                        name: "DateTime"
                    }
                },
                durationInMs: {
                    readOnly: true,
                    serializedName: "durationInMs",
                    type: {
                        name: "Number"
                    }
                },
                input: {
                    readOnly: true,
                    serializedName: "input",
                    type: {
                        name: "Object"
                    }
                },
                output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Object"
                    }
                },
                error: {
                    readOnly: true,
                    serializedName: "error",
                    type: {
                        name: "Object"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var ActivityRunsQueryResponse = {
        serializedName: "ActivityRunsQueryResponse",
        type: {
            name: "Composite",
            className: "ActivityRunsQueryResponse",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ActivityRun",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                },
                continuationToken: {
                    serializedName: "continuationToken",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TriggerRun = {
        serializedName: "TriggerRun",
        type: {
            name: "Composite",
            className: "TriggerRun",
            modelProperties: {
                triggerRunId: {
                    readOnly: true,
                    serializedName: "triggerRunId",
                    type: {
                        name: "String"
                    }
                },
                triggerName: {
                    readOnly: true,
                    serializedName: "triggerName",
                    type: {
                        name: "String"
                    }
                },
                triggerType: {
                    readOnly: true,
                    serializedName: "triggerType",
                    type: {
                        name: "String"
                    }
                },
                triggerRunTimestamp: {
                    readOnly: true,
                    serializedName: "triggerRunTimestamp",
                    type: {
                        name: "DateTime"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    readOnly: true,
                    serializedName: "properties",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                triggeredPipelines: {
                    readOnly: true,
                    serializedName: "triggeredPipelines",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var TriggerRunsQueryResponse = {
        serializedName: "TriggerRunsQueryResponse",
        type: {
            name: "Composite",
            className: "TriggerRunsQueryResponse",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TriggerRun",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                },
                continuationToken: {
                    serializedName: "continuationToken",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RerunTumblingWindowTriggerActionParameters = {
        serializedName: "RerunTumblingWindowTriggerActionParameters",
        type: {
            name: "Composite",
            className: "RerunTumblingWindowTriggerActionParameters",
            modelProperties: {
                startTime: {
                    required: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    required: true,
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                maxConcurrency: {
                    required: true,
                    serializedName: "maxConcurrency",
                    constraints: {
                        InclusiveMaximum: 50,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var RerunTumblingWindowTrigger = {
        serializedName: "RerunTumblingWindowTrigger",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Trigger.type.polymorphicDiscriminator,
            uberParent: "Trigger",
            className: "RerunTumblingWindowTrigger",
            modelProperties: __assign({}, Trigger.type.modelProperties, { parentTrigger: {
                    serializedName: "typeProperties.parentTrigger",
                    type: {
                        name: "Object"
                    }
                }, requestedStartTime: {
                    required: true,
                    serializedName: "typeProperties.requestedStartTime",
                    type: {
                        name: "DateTime"
                    }
                }, requestedEndTime: {
                    required: true,
                    serializedName: "typeProperties.requestedEndTime",
                    type: {
                        name: "DateTime"
                    }
                }, maxConcurrency: {
                    required: true,
                    serializedName: "typeProperties.maxConcurrency",
                    constraints: {
                        InclusiveMaximum: 50,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                } }),
            additionalProperties: Trigger.type.additionalProperties
        }
    };
    var RerunTriggerResource = {
        serializedName: "RerunTriggerResource",
        type: {
            name: "Composite",
            className: "RerunTriggerResource",
            modelProperties: __assign({}, SubResource.type.modelProperties, { properties: {
                    required: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: Trigger.type.polymorphicDiscriminator,
                        uberParent: "Trigger",
                        className: "RerunTumblingWindowTrigger",
                        additionalProperties: Trigger.type.additionalProperties
                    }
                } })
        }
    };
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationLogSpecification = {
        serializedName: "OperationLogSpecification",
        type: {
            name: "Composite",
            className: "OperationLogSpecification",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                blobDuration: {
                    serializedName: "blobDuration",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationMetricAvailability = {
        serializedName: "OperationMetricAvailability",
        type: {
            name: "Composite",
            className: "OperationMetricAvailability",
            modelProperties: {
                timeGrain: {
                    serializedName: "timeGrain",
                    type: {
                        name: "String"
                    }
                },
                blobDuration: {
                    serializedName: "blobDuration",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationMetricDimension = {
        serializedName: "OperationMetricDimension",
        type: {
            name: "Composite",
            className: "OperationMetricDimension",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                toBeExportedForShoebox: {
                    serializedName: "toBeExportedForShoebox",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var OperationMetricSpecification = {
        serializedName: "OperationMetricSpecification",
        type: {
            name: "Composite",
            className: "OperationMetricSpecification",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                displayDescription: {
                    serializedName: "displayDescription",
                    type: {
                        name: "String"
                    }
                },
                unit: {
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                aggregationType: {
                    serializedName: "aggregationType",
                    type: {
                        name: "String"
                    }
                },
                enableRegionalMdmAccount: {
                    serializedName: "enableRegionalMdmAccount",
                    type: {
                        name: "String"
                    }
                },
                sourceMdmAccount: {
                    serializedName: "sourceMdmAccount",
                    type: {
                        name: "String"
                    }
                },
                sourceMdmNamespace: {
                    serializedName: "sourceMdmNamespace",
                    type: {
                        name: "String"
                    }
                },
                availabilities: {
                    serializedName: "availabilities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OperationMetricAvailability"
                            }
                        }
                    }
                },
                dimensions: {
                    serializedName: "dimensions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OperationMetricDimension"
                            }
                        }
                    }
                }
            }
        }
    };
    var OperationServiceSpecification = {
        serializedName: "OperationServiceSpecification",
        type: {
            name: "Composite",
            className: "OperationServiceSpecification",
            modelProperties: {
                logSpecifications: {
                    serializedName: "logSpecifications",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OperationLogSpecification"
                            }
                        }
                    }
                },
                metricSpecifications: {
                    serializedName: "metricSpecifications",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OperationMetricSpecification"
                            }
                        }
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                origin: {
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                },
                serviceSpecification: {
                    serializedName: "properties.serviceSpecification",
                    type: {
                        name: "Composite",
                        className: "OperationServiceSpecification"
                    }
                }
            }
        }
    };
    var DependencyReference = {
        serializedName: "DependencyReference",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "type",
                clientName: "type"
            },
            uberParent: "DependencyReference",
            className: "DependencyReference",
            modelProperties: {
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SelfDependencyTumblingWindowTriggerReference = {
        serializedName: "SelfDependencyTumblingWindowTriggerReference",
        type: {
            name: "Composite",
            polymorphicDiscriminator: DependencyReference.type.polymorphicDiscriminator,
            uberParent: "DependencyReference",
            className: "SelfDependencyTumblingWindowTriggerReference",
            modelProperties: __assign({}, DependencyReference.type.modelProperties, { offset: {
                    required: true,
                    serializedName: "offset",
                    constraints: {
                        MaxLength: 15,
                        MinLength: 8,
                        Pattern: /((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))/
                    },
                    type: {
                        name: "String"
                    }
                }, size: {
                    serializedName: "size",
                    constraints: {
                        MaxLength: 15,
                        MinLength: 8,
                        Pattern: /((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))/
                    },
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var TriggerReference = {
        serializedName: "TriggerReference",
        type: {
            name: "Composite",
            className: "TriggerReference",
            modelProperties: {
                type: {
                    required: true,
                    isConstant: true,
                    serializedName: "type",
                    defaultValue: 'TriggerReference',
                    type: {
                        name: "String"
                    }
                },
                referenceName: {
                    required: true,
                    serializedName: "referenceName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TriggerDependencyReference = {
        serializedName: "TriggerDependencyReference",
        type: {
            name: "Composite",
            polymorphicDiscriminator: DependencyReference.type.polymorphicDiscriminator,
            uberParent: "DependencyReference",
            className: "TriggerDependencyReference",
            modelProperties: __assign({}, DependencyReference.type.modelProperties, { referenceTrigger: {
                    required: true,
                    serializedName: "referenceTrigger",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "TriggerReference"
                    }
                } })
        }
    };
    var TumblingWindowTriggerDependencyReference = {
        serializedName: "TumblingWindowTriggerDependencyReference",
        type: {
            name: "Composite",
            polymorphicDiscriminator: DependencyReference.type.polymorphicDiscriminator,
            uberParent: "DependencyReference",
            className: "TumblingWindowTriggerDependencyReference",
            modelProperties: __assign({}, TriggerDependencyReference.type.modelProperties, { offset: {
                    serializedName: "offset",
                    constraints: {
                        MaxLength: 15,
                        MinLength: 8,
                        Pattern: /((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))/
                    },
                    type: {
                        name: "String"
                    }
                }, size: {
                    serializedName: "size",
                    constraints: {
                        MaxLength: 15,
                        MinLength: 8,
                        Pattern: /((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))/
                    },
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RetryPolicy = {
        serializedName: "RetryPolicy",
        type: {
            name: "Composite",
            className: "RetryPolicy",
            modelProperties: {
                count: {
                    serializedName: "count",
                    type: {
                        name: "Object"
                    }
                },
                intervalInSeconds: {
                    serializedName: "intervalInSeconds",
                    constraints: {
                        InclusiveMaximum: 86400,
                        InclusiveMinimum: 30
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var TumblingWindowTrigger = {
        serializedName: "TumblingWindowTrigger",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Trigger.type.polymorphicDiscriminator,
            uberParent: "Trigger",
            className: "TumblingWindowTrigger",
            modelProperties: __assign({}, Trigger.type.modelProperties, { pipelineProperty: {
                    required: true,
                    serializedName: "pipeline",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "TriggerPipelineReference"
                    }
                }, frequency: {
                    required: true,
                    serializedName: "typeProperties.frequency",
                    type: {
                        name: "String"
                    }
                }, interval: {
                    required: true,
                    serializedName: "typeProperties.interval",
                    type: {
                        name: "Number"
                    }
                }, startTime: {
                    required: true,
                    serializedName: "typeProperties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, endTime: {
                    serializedName: "typeProperties.endTime",
                    type: {
                        name: "DateTime"
                    }
                }, delay: {
                    serializedName: "typeProperties.delay",
                    type: {
                        name: "Object"
                    }
                }, maxConcurrency: {
                    required: true,
                    serializedName: "typeProperties.maxConcurrency",
                    constraints: {
                        InclusiveMaximum: 50,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }, retryPolicy: {
                    serializedName: "typeProperties.retryPolicy",
                    type: {
                        name: "Composite",
                        className: "RetryPolicy"
                    }
                }, dependsOn: {
                    serializedName: "typeProperties.dependsOn",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: {
                                    serializedName: "type",
                                    clientName: "type"
                                },
                                uberParent: "DependencyReference",
                                className: "DependencyReference"
                            }
                        }
                    }
                } }),
            additionalProperties: Trigger.type.additionalProperties
        }
    };
    var MultiplePipelineTrigger = {
        serializedName: "MultiplePipelineTrigger",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Trigger.type.polymorphicDiscriminator,
            uberParent: "Trigger",
            className: "MultiplePipelineTrigger",
            modelProperties: __assign({}, Trigger.type.modelProperties, { pipelines: {
                    serializedName: "pipelines",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TriggerPipelineReference"
                            }
                        }
                    }
                } }),
            additionalProperties: Trigger.type.additionalProperties
        }
    };
    var BlobEventsTrigger = {
        serializedName: "BlobEventsTrigger",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Trigger.type.polymorphicDiscriminator,
            uberParent: "Trigger",
            className: "BlobEventsTrigger",
            modelProperties: __assign({}, MultiplePipelineTrigger.type.modelProperties, { blobPathBeginsWith: {
                    serializedName: "typeProperties.blobPathBeginsWith",
                    type: {
                        name: "String"
                    }
                }, blobPathEndsWith: {
                    serializedName: "typeProperties.blobPathEndsWith",
                    type: {
                        name: "String"
                    }
                }, events: {
                    required: true,
                    serializedName: "typeProperties.events",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, scope: {
                    required: true,
                    serializedName: "typeProperties.scope",
                    type: {
                        name: "String"
                    }
                } }),
            additionalProperties: Trigger.type.additionalProperties
        }
    };
    var BlobTrigger = {
        serializedName: "BlobTrigger",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Trigger.type.polymorphicDiscriminator,
            uberParent: "Trigger",
            className: "BlobTrigger",
            modelProperties: __assign({}, MultiplePipelineTrigger.type.modelProperties, { folderPath: {
                    required: true,
                    serializedName: "typeProperties.folderPath",
                    type: {
                        name: "String"
                    }
                }, maxConcurrency: {
                    required: true,
                    serializedName: "typeProperties.maxConcurrency",
                    type: {
                        name: "Number"
                    }
                }, linkedService: {
                    required: true,
                    serializedName: "typeProperties.linkedService",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "LinkedServiceReference"
                    }
                } }),
            additionalProperties: Trigger.type.additionalProperties
        }
    };
    var RecurrenceScheduleOccurrence = {
        serializedName: "RecurrenceScheduleOccurrence",
        type: {
            name: "Composite",
            className: "RecurrenceScheduleOccurrence",
            modelProperties: {
                day: {
                    serializedName: "day",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Sunday",
                            "Monday",
                            "Tuesday",
                            "Wednesday",
                            "Thursday",
                            "Friday",
                            "Saturday"
                        ]
                    }
                },
                occurrence: {
                    serializedName: "occurrence",
                    type: {
                        name: "Number"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var RecurrenceSchedule = {
        serializedName: "RecurrenceSchedule",
        type: {
            name: "Composite",
            className: "RecurrenceSchedule",
            modelProperties: {
                minutes: {
                    serializedName: "minutes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                },
                hours: {
                    serializedName: "hours",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                },
                weekDays: {
                    serializedName: "weekDays",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Enum",
                                allowedValues: [
                                    "Sunday",
                                    "Monday",
                                    "Tuesday",
                                    "Wednesday",
                                    "Thursday",
                                    "Friday",
                                    "Saturday"
                                ]
                            }
                        }
                    }
                },
                monthDays: {
                    serializedName: "monthDays",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                },
                monthlyOccurrences: {
                    serializedName: "monthlyOccurrences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RecurrenceScheduleOccurrence",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var ScheduleTriggerRecurrence = {
        serializedName: "ScheduleTriggerRecurrence",
        type: {
            name: "Composite",
            className: "ScheduleTriggerRecurrence",
            modelProperties: {
                frequency: {
                    serializedName: "frequency",
                    type: {
                        name: "String"
                    }
                },
                interval: {
                    serializedName: "interval",
                    type: {
                        name: "Number"
                    }
                },
                startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                timeZone: {
                    serializedName: "timeZone",
                    type: {
                        name: "String"
                    }
                },
                schedule: {
                    serializedName: "schedule",
                    type: {
                        name: "Composite",
                        className: "RecurrenceSchedule",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var ScheduleTrigger = {
        serializedName: "ScheduleTrigger",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Trigger.type.polymorphicDiscriminator,
            uberParent: "Trigger",
            className: "ScheduleTrigger",
            modelProperties: __assign({}, MultiplePipelineTrigger.type.modelProperties, { recurrence: {
                    required: true,
                    serializedName: "typeProperties.recurrence",
                    type: {
                        name: "Composite",
                        className: "ScheduleTriggerRecurrence",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                } }),
            additionalProperties: Trigger.type.additionalProperties
        }
    };
    var ResponsysLinkedService = {
        serializedName: "Responsys",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "ResponsysLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { endpoint: {
                    required: true,
                    serializedName: "typeProperties.endpoint",
                    type: {
                        name: "Object"
                    }
                }, clientId: {
                    required: true,
                    serializedName: "typeProperties.clientId",
                    type: {
                        name: "Object"
                    }
                }, clientSecret: {
                    serializedName: "typeProperties.clientSecret",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, useEncryptedEndpoints: {
                    serializedName: "typeProperties.useEncryptedEndpoints",
                    type: {
                        name: "Object"
                    }
                }, useHostVerification: {
                    serializedName: "typeProperties.useHostVerification",
                    type: {
                        name: "Object"
                    }
                }, usePeerVerification: {
                    serializedName: "typeProperties.usePeerVerification",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var AzureDatabricksLinkedService = {
        serializedName: "AzureDatabricks",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "AzureDatabricksLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { domain: {
                    required: true,
                    serializedName: "typeProperties.domain",
                    type: {
                        name: "Object"
                    }
                }, accessToken: {
                    required: true,
                    serializedName: "typeProperties.accessToken",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, existingClusterId: {
                    serializedName: "typeProperties.existingClusterId",
                    type: {
                        name: "Object"
                    }
                }, newClusterVersion: {
                    serializedName: "typeProperties.newClusterVersion",
                    type: {
                        name: "Object"
                    }
                }, newClusterNumOfWorker: {
                    serializedName: "typeProperties.newClusterNumOfWorker",
                    type: {
                        name: "Object"
                    }
                }, newClusterNodeType: {
                    serializedName: "typeProperties.newClusterNodeType",
                    type: {
                        name: "Object"
                    }
                }, newClusterSparkConf: {
                    serializedName: "typeProperties.newClusterSparkConf",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }, newClusterSparkEnvVars: {
                    serializedName: "typeProperties.newClusterSparkEnvVars",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }, newClusterCustomTags: {
                    serializedName: "typeProperties.newClusterCustomTags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var AzureDataLakeAnalyticsLinkedService = {
        serializedName: "AzureDataLakeAnalytics",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "AzureDataLakeAnalyticsLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { accountName: {
                    required: true,
                    serializedName: "typeProperties.accountName",
                    type: {
                        name: "Object"
                    }
                }, servicePrincipalId: {
                    serializedName: "typeProperties.servicePrincipalId",
                    type: {
                        name: "Object"
                    }
                }, servicePrincipalKey: {
                    serializedName: "typeProperties.servicePrincipalKey",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, tenant: {
                    required: true,
                    serializedName: "typeProperties.tenant",
                    type: {
                        name: "Object"
                    }
                }, subscriptionId: {
                    serializedName: "typeProperties.subscriptionId",
                    type: {
                        name: "Object"
                    }
                }, resourceGroupName: {
                    serializedName: "typeProperties.resourceGroupName",
                    type: {
                        name: "Object"
                    }
                }, dataLakeAnalyticsUri: {
                    serializedName: "typeProperties.dataLakeAnalyticsUri",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var ScriptAction = {
        serializedName: "ScriptAction",
        type: {
            name: "Composite",
            className: "ScriptAction",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                uri: {
                    required: true,
                    serializedName: "uri",
                    type: {
                        name: "String"
                    }
                },
                roles: {
                    required: true,
                    serializedName: "roles",
                    type: {
                        name: "Object"
                    }
                },
                parameters: {
                    serializedName: "parameters",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HDInsightOnDemandLinkedService = {
        serializedName: "HDInsightOnDemand",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "HDInsightOnDemandLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { clusterSize: {
                    required: true,
                    serializedName: "typeProperties.clusterSize",
                    type: {
                        name: "Object"
                    }
                }, timeToLive: {
                    required: true,
                    serializedName: "typeProperties.timeToLive",
                    type: {
                        name: "Object"
                    }
                }, version: {
                    required: true,
                    serializedName: "typeProperties.version",
                    type: {
                        name: "Object"
                    }
                }, linkedServiceName: {
                    required: true,
                    serializedName: "typeProperties.linkedServiceName",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "LinkedServiceReference"
                    }
                }, hostSubscriptionId: {
                    required: true,
                    serializedName: "typeProperties.hostSubscriptionId",
                    type: {
                        name: "Object"
                    }
                }, servicePrincipalId: {
                    serializedName: "typeProperties.servicePrincipalId",
                    type: {
                        name: "Object"
                    }
                }, servicePrincipalKey: {
                    serializedName: "typeProperties.servicePrincipalKey",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, tenant: {
                    required: true,
                    serializedName: "typeProperties.tenant",
                    type: {
                        name: "Object"
                    }
                }, clusterResourceGroup: {
                    required: true,
                    serializedName: "typeProperties.clusterResourceGroup",
                    type: {
                        name: "Object"
                    }
                }, clusterNamePrefix: {
                    serializedName: "typeProperties.clusterNamePrefix",
                    type: {
                        name: "Object"
                    }
                }, clusterUserName: {
                    serializedName: "typeProperties.clusterUserName",
                    type: {
                        name: "Object"
                    }
                }, clusterPassword: {
                    serializedName: "typeProperties.clusterPassword",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, clusterSshUserName: {
                    serializedName: "typeProperties.clusterSshUserName",
                    type: {
                        name: "Object"
                    }
                }, clusterSshPassword: {
                    serializedName: "typeProperties.clusterSshPassword",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, additionalLinkedServiceNames: {
                    serializedName: "typeProperties.additionalLinkedServiceNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LinkedServiceReference"
                            }
                        }
                    }
                }, hcatalogLinkedServiceName: {
                    serializedName: "typeProperties.hcatalogLinkedServiceName",
                    type: {
                        name: "Composite",
                        className: "LinkedServiceReference"
                    }
                }, clusterType: {
                    serializedName: "typeProperties.clusterType",
                    type: {
                        name: "Object"
                    }
                }, sparkVersion: {
                    serializedName: "typeProperties.sparkVersion",
                    type: {
                        name: "Object"
                    }
                }, coreConfiguration: {
                    serializedName: "typeProperties.coreConfiguration",
                    type: {
                        name: "Object"
                    }
                }, hBaseConfiguration: {
                    serializedName: "typeProperties.hBaseConfiguration",
                    type: {
                        name: "Object"
                    }
                }, hdfsConfiguration: {
                    serializedName: "typeProperties.hdfsConfiguration",
                    type: {
                        name: "Object"
                    }
                }, hiveConfiguration: {
                    serializedName: "typeProperties.hiveConfiguration",
                    type: {
                        name: "Object"
                    }
                }, mapReduceConfiguration: {
                    serializedName: "typeProperties.mapReduceConfiguration",
                    type: {
                        name: "Object"
                    }
                }, oozieConfiguration: {
                    serializedName: "typeProperties.oozieConfiguration",
                    type: {
                        name: "Object"
                    }
                }, stormConfiguration: {
                    serializedName: "typeProperties.stormConfiguration",
                    type: {
                        name: "Object"
                    }
                }, yarnConfiguration: {
                    serializedName: "typeProperties.yarnConfiguration",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                }, headNodeSize: {
                    serializedName: "typeProperties.headNodeSize",
                    type: {
                        name: "Object"
                    }
                }, dataNodeSize: {
                    serializedName: "typeProperties.dataNodeSize",
                    type: {
                        name: "Object"
                    }
                }, zookeeperNodeSize: {
                    serializedName: "typeProperties.zookeeperNodeSize",
                    type: {
                        name: "Object"
                    }
                }, scriptActions: {
                    serializedName: "typeProperties.scriptActions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ScriptAction"
                            }
                        }
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var SalesforceMarketingCloudLinkedService = {
        serializedName: "SalesforceMarketingCloud",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "SalesforceMarketingCloudLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { clientId: {
                    required: true,
                    serializedName: "typeProperties.clientId",
                    type: {
                        name: "Object"
                    }
                }, clientSecret: {
                    serializedName: "typeProperties.clientSecret",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, useEncryptedEndpoints: {
                    serializedName: "typeProperties.useEncryptedEndpoints",
                    type: {
                        name: "Object"
                    }
                }, useHostVerification: {
                    serializedName: "typeProperties.useHostVerification",
                    type: {
                        name: "Object"
                    }
                }, usePeerVerification: {
                    serializedName: "typeProperties.usePeerVerification",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var NetezzaLinkedService = {
        serializedName: "Netezza",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "NetezzaLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { connectionString: {
                    serializedName: "typeProperties.connectionString",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var VerticaLinkedService = {
        serializedName: "Vertica",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "VerticaLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { connectionString: {
                    serializedName: "typeProperties.connectionString",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var ZohoLinkedService = {
        serializedName: "Zoho",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "ZohoLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { endpoint: {
                    required: true,
                    serializedName: "typeProperties.endpoint",
                    type: {
                        name: "Object"
                    }
                }, accessToken: {
                    serializedName: "typeProperties.accessToken",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, useEncryptedEndpoints: {
                    serializedName: "typeProperties.useEncryptedEndpoints",
                    type: {
                        name: "Object"
                    }
                }, useHostVerification: {
                    serializedName: "typeProperties.useHostVerification",
                    type: {
                        name: "Object"
                    }
                }, usePeerVerification: {
                    serializedName: "typeProperties.usePeerVerification",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var XeroLinkedService = {
        serializedName: "Xero",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "XeroLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { host: {
                    required: true,
                    serializedName: "typeProperties.host",
                    type: {
                        name: "Object"
                    }
                }, consumerKey: {
                    serializedName: "typeProperties.consumerKey",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, privateKey: {
                    serializedName: "typeProperties.privateKey",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, useEncryptedEndpoints: {
                    serializedName: "typeProperties.useEncryptedEndpoints",
                    type: {
                        name: "Object"
                    }
                }, useHostVerification: {
                    serializedName: "typeProperties.useHostVerification",
                    type: {
                        name: "Object"
                    }
                }, usePeerVerification: {
                    serializedName: "typeProperties.usePeerVerification",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var SquareLinkedService = {
        serializedName: "Square",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "SquareLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { host: {
                    required: true,
                    serializedName: "typeProperties.host",
                    type: {
                        name: "Object"
                    }
                }, clientId: {
                    required: true,
                    serializedName: "typeProperties.clientId",
                    type: {
                        name: "Object"
                    }
                }, clientSecret: {
                    serializedName: "typeProperties.clientSecret",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, redirectUri: {
                    required: true,
                    serializedName: "typeProperties.redirectUri",
                    type: {
                        name: "Object"
                    }
                }, useEncryptedEndpoints: {
                    serializedName: "typeProperties.useEncryptedEndpoints",
                    type: {
                        name: "Object"
                    }
                }, useHostVerification: {
                    serializedName: "typeProperties.useHostVerification",
                    type: {
                        name: "Object"
                    }
                }, usePeerVerification: {
                    serializedName: "typeProperties.usePeerVerification",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var SparkLinkedService = {
        serializedName: "Spark",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "SparkLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { host: {
                    required: true,
                    serializedName: "typeProperties.host",
                    type: {
                        name: "Object"
                    }
                }, port: {
                    required: true,
                    serializedName: "typeProperties.port",
                    type: {
                        name: "Object"
                    }
                }, serverType: {
                    serializedName: "typeProperties.serverType",
                    type: {
                        name: "String"
                    }
                }, thriftTransportProtocol: {
                    serializedName: "typeProperties.thriftTransportProtocol",
                    type: {
                        name: "String"
                    }
                }, authenticationType: {
                    required: true,
                    serializedName: "typeProperties.authenticationType",
                    type: {
                        name: "String"
                    }
                }, username: {
                    serializedName: "typeProperties.username",
                    type: {
                        name: "Object"
                    }
                }, password: {
                    serializedName: "typeProperties.password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, httpPath: {
                    serializedName: "typeProperties.httpPath",
                    type: {
                        name: "Object"
                    }
                }, enableSsl: {
                    serializedName: "typeProperties.enableSsl",
                    type: {
                        name: "Object"
                    }
                }, trustedCertPath: {
                    serializedName: "typeProperties.trustedCertPath",
                    type: {
                        name: "Object"
                    }
                }, useSystemTrustStore: {
                    serializedName: "typeProperties.useSystemTrustStore",
                    type: {
                        name: "Object"
                    }
                }, allowHostNameCNMismatch: {
                    serializedName: "typeProperties.allowHostNameCNMismatch",
                    type: {
                        name: "Object"
                    }
                }, allowSelfSignedServerCert: {
                    serializedName: "typeProperties.allowSelfSignedServerCert",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var ShopifyLinkedService = {
        serializedName: "Shopify",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "ShopifyLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { host: {
                    required: true,
                    serializedName: "typeProperties.host",
                    type: {
                        name: "Object"
                    }
                }, accessToken: {
                    serializedName: "typeProperties.accessToken",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, useEncryptedEndpoints: {
                    serializedName: "typeProperties.useEncryptedEndpoints",
                    type: {
                        name: "Object"
                    }
                }, useHostVerification: {
                    serializedName: "typeProperties.useHostVerification",
                    type: {
                        name: "Object"
                    }
                }, usePeerVerification: {
                    serializedName: "typeProperties.usePeerVerification",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var ServiceNowLinkedService = {
        serializedName: "ServiceNow",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "ServiceNowLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { endpoint: {
                    required: true,
                    serializedName: "typeProperties.endpoint",
                    type: {
                        name: "Object"
                    }
                }, authenticationType: {
                    required: true,
                    serializedName: "typeProperties.authenticationType",
                    type: {
                        name: "String"
                    }
                }, username: {
                    serializedName: "typeProperties.username",
                    type: {
                        name: "Object"
                    }
                }, password: {
                    serializedName: "typeProperties.password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, clientId: {
                    serializedName: "typeProperties.clientId",
                    type: {
                        name: "Object"
                    }
                }, clientSecret: {
                    serializedName: "typeProperties.clientSecret",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, useEncryptedEndpoints: {
                    serializedName: "typeProperties.useEncryptedEndpoints",
                    type: {
                        name: "Object"
                    }
                }, useHostVerification: {
                    serializedName: "typeProperties.useHostVerification",
                    type: {
                        name: "Object"
                    }
                }, usePeerVerification: {
                    serializedName: "typeProperties.usePeerVerification",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var QuickBooksLinkedService = {
        serializedName: "QuickBooks",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "QuickBooksLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { endpoint: {
                    required: true,
                    serializedName: "typeProperties.endpoint",
                    type: {
                        name: "Object"
                    }
                }, companyId: {
                    required: true,
                    serializedName: "typeProperties.companyId",
                    type: {
                        name: "Object"
                    }
                }, consumerKey: {
                    required: true,
                    serializedName: "typeProperties.consumerKey",
                    type: {
                        name: "Object"
                    }
                }, consumerSecret: {
                    required: true,
                    serializedName: "typeProperties.consumerSecret",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, accessToken: {
                    required: true,
                    serializedName: "typeProperties.accessToken",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, accessTokenSecret: {
                    required: true,
                    serializedName: "typeProperties.accessTokenSecret",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, useEncryptedEndpoints: {
                    serializedName: "typeProperties.useEncryptedEndpoints",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var PrestoLinkedService = {
        serializedName: "Presto",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "PrestoLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { host: {
                    required: true,
                    serializedName: "typeProperties.host",
                    type: {
                        name: "Object"
                    }
                }, serverVersion: {
                    required: true,
                    serializedName: "typeProperties.serverVersion",
                    type: {
                        name: "Object"
                    }
                }, catalog: {
                    required: true,
                    serializedName: "typeProperties.catalog",
                    type: {
                        name: "Object"
                    }
                }, port: {
                    serializedName: "typeProperties.port",
                    type: {
                        name: "Object"
                    }
                }, authenticationType: {
                    required: true,
                    serializedName: "typeProperties.authenticationType",
                    type: {
                        name: "String"
                    }
                }, username: {
                    serializedName: "typeProperties.username",
                    type: {
                        name: "Object"
                    }
                }, password: {
                    serializedName: "typeProperties.password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, enableSsl: {
                    serializedName: "typeProperties.enableSsl",
                    type: {
                        name: "Object"
                    }
                }, trustedCertPath: {
                    serializedName: "typeProperties.trustedCertPath",
                    type: {
                        name: "Object"
                    }
                }, useSystemTrustStore: {
                    serializedName: "typeProperties.useSystemTrustStore",
                    type: {
                        name: "Object"
                    }
                }, allowHostNameCNMismatch: {
                    serializedName: "typeProperties.allowHostNameCNMismatch",
                    type: {
                        name: "Object"
                    }
                }, allowSelfSignedServerCert: {
                    serializedName: "typeProperties.allowSelfSignedServerCert",
                    type: {
                        name: "Object"
                    }
                }, timeZoneID: {
                    serializedName: "typeProperties.timeZoneID",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var PhoenixLinkedService = {
        serializedName: "Phoenix",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "PhoenixLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { host: {
                    required: true,
                    serializedName: "typeProperties.host",
                    type: {
                        name: "Object"
                    }
                }, port: {
                    serializedName: "typeProperties.port",
                    type: {
                        name: "Object"
                    }
                }, httpPath: {
                    serializedName: "typeProperties.httpPath",
                    type: {
                        name: "Object"
                    }
                }, authenticationType: {
                    required: true,
                    serializedName: "typeProperties.authenticationType",
                    type: {
                        name: "String"
                    }
                }, username: {
                    serializedName: "typeProperties.username",
                    type: {
                        name: "Object"
                    }
                }, password: {
                    serializedName: "typeProperties.password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, enableSsl: {
                    serializedName: "typeProperties.enableSsl",
                    type: {
                        name: "Object"
                    }
                }, trustedCertPath: {
                    serializedName: "typeProperties.trustedCertPath",
                    type: {
                        name: "Object"
                    }
                }, useSystemTrustStore: {
                    serializedName: "typeProperties.useSystemTrustStore",
                    type: {
                        name: "Object"
                    }
                }, allowHostNameCNMismatch: {
                    serializedName: "typeProperties.allowHostNameCNMismatch",
                    type: {
                        name: "Object"
                    }
                }, allowSelfSignedServerCert: {
                    serializedName: "typeProperties.allowSelfSignedServerCert",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var PaypalLinkedService = {
        serializedName: "Paypal",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "PaypalLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { host: {
                    required: true,
                    serializedName: "typeProperties.host",
                    type: {
                        name: "Object"
                    }
                }, clientId: {
                    required: true,
                    serializedName: "typeProperties.clientId",
                    type: {
                        name: "Object"
                    }
                }, clientSecret: {
                    serializedName: "typeProperties.clientSecret",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, useEncryptedEndpoints: {
                    serializedName: "typeProperties.useEncryptedEndpoints",
                    type: {
                        name: "Object"
                    }
                }, useHostVerification: {
                    serializedName: "typeProperties.useHostVerification",
                    type: {
                        name: "Object"
                    }
                }, usePeerVerification: {
                    serializedName: "typeProperties.usePeerVerification",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var MarketoLinkedService = {
        serializedName: "Marketo",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "MarketoLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { endpoint: {
                    required: true,
                    serializedName: "typeProperties.endpoint",
                    type: {
                        name: "Object"
                    }
                }, clientId: {
                    required: true,
                    serializedName: "typeProperties.clientId",
                    type: {
                        name: "Object"
                    }
                }, clientSecret: {
                    serializedName: "typeProperties.clientSecret",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, useEncryptedEndpoints: {
                    serializedName: "typeProperties.useEncryptedEndpoints",
                    type: {
                        name: "Object"
                    }
                }, useHostVerification: {
                    serializedName: "typeProperties.useHostVerification",
                    type: {
                        name: "Object"
                    }
                }, usePeerVerification: {
                    serializedName: "typeProperties.usePeerVerification",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var MariaDBLinkedService = {
        serializedName: "MariaDB",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "MariaDBLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { connectionString: {
                    serializedName: "typeProperties.connectionString",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var MagentoLinkedService = {
        serializedName: "Magento",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "MagentoLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { host: {
                    required: true,
                    serializedName: "typeProperties.host",
                    type: {
                        name: "Object"
                    }
                }, accessToken: {
                    serializedName: "typeProperties.accessToken",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, useEncryptedEndpoints: {
                    serializedName: "typeProperties.useEncryptedEndpoints",
                    type: {
                        name: "Object"
                    }
                }, useHostVerification: {
                    serializedName: "typeProperties.useHostVerification",
                    type: {
                        name: "Object"
                    }
                }, usePeerVerification: {
                    serializedName: "typeProperties.usePeerVerification",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var JiraLinkedService = {
        serializedName: "Jira",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "JiraLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { host: {
                    required: true,
                    serializedName: "typeProperties.host",
                    type: {
                        name: "Object"
                    }
                }, port: {
                    serializedName: "typeProperties.port",
                    type: {
                        name: "Object"
                    }
                }, username: {
                    required: true,
                    serializedName: "typeProperties.username",
                    type: {
                        name: "Object"
                    }
                }, password: {
                    serializedName: "typeProperties.password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, useEncryptedEndpoints: {
                    serializedName: "typeProperties.useEncryptedEndpoints",
                    type: {
                        name: "Object"
                    }
                }, useHostVerification: {
                    serializedName: "typeProperties.useHostVerification",
                    type: {
                        name: "Object"
                    }
                }, usePeerVerification: {
                    serializedName: "typeProperties.usePeerVerification",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var ImpalaLinkedService = {
        serializedName: "Impala",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "ImpalaLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { host: {
                    required: true,
                    serializedName: "typeProperties.host",
                    type: {
                        name: "Object"
                    }
                }, port: {
                    serializedName: "typeProperties.port",
                    type: {
                        name: "Object"
                    }
                }, authenticationType: {
                    required: true,
                    serializedName: "typeProperties.authenticationType",
                    type: {
                        name: "String"
                    }
                }, username: {
                    serializedName: "typeProperties.username",
                    type: {
                        name: "Object"
                    }
                }, password: {
                    serializedName: "typeProperties.password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, enableSsl: {
                    serializedName: "typeProperties.enableSsl",
                    type: {
                        name: "Object"
                    }
                }, trustedCertPath: {
                    serializedName: "typeProperties.trustedCertPath",
                    type: {
                        name: "Object"
                    }
                }, useSystemTrustStore: {
                    serializedName: "typeProperties.useSystemTrustStore",
                    type: {
                        name: "Object"
                    }
                }, allowHostNameCNMismatch: {
                    serializedName: "typeProperties.allowHostNameCNMismatch",
                    type: {
                        name: "Object"
                    }
                }, allowSelfSignedServerCert: {
                    serializedName: "typeProperties.allowSelfSignedServerCert",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var HubspotLinkedService = {
        serializedName: "Hubspot",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "HubspotLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { clientId: {
                    required: true,
                    serializedName: "typeProperties.clientId",
                    type: {
                        name: "Object"
                    }
                }, clientSecret: {
                    serializedName: "typeProperties.clientSecret",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, accessToken: {
                    serializedName: "typeProperties.accessToken",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, refreshToken: {
                    serializedName: "typeProperties.refreshToken",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, useEncryptedEndpoints: {
                    serializedName: "typeProperties.useEncryptedEndpoints",
                    type: {
                        name: "Object"
                    }
                }, useHostVerification: {
                    serializedName: "typeProperties.useHostVerification",
                    type: {
                        name: "Object"
                    }
                }, usePeerVerification: {
                    serializedName: "typeProperties.usePeerVerification",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var HiveLinkedService = {
        serializedName: "Hive",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "HiveLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { host: {
                    required: true,
                    serializedName: "typeProperties.host",
                    type: {
                        name: "Object"
                    }
                }, port: {
                    serializedName: "typeProperties.port",
                    type: {
                        name: "Object"
                    }
                }, serverType: {
                    serializedName: "typeProperties.serverType",
                    type: {
                        name: "String"
                    }
                }, thriftTransportProtocol: {
                    serializedName: "typeProperties.thriftTransportProtocol",
                    type: {
                        name: "String"
                    }
                }, authenticationType: {
                    required: true,
                    serializedName: "typeProperties.authenticationType",
                    type: {
                        name: "String"
                    }
                }, serviceDiscoveryMode: {
                    serializedName: "typeProperties.serviceDiscoveryMode",
                    type: {
                        name: "Object"
                    }
                }, zooKeeperNameSpace: {
                    serializedName: "typeProperties.zooKeeperNameSpace",
                    type: {
                        name: "Object"
                    }
                }, useNativeQuery: {
                    serializedName: "typeProperties.useNativeQuery",
                    type: {
                        name: "Object"
                    }
                }, username: {
                    serializedName: "typeProperties.username",
                    type: {
                        name: "Object"
                    }
                }, password: {
                    serializedName: "typeProperties.password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, httpPath: {
                    serializedName: "typeProperties.httpPath",
                    type: {
                        name: "Object"
                    }
                }, enableSsl: {
                    serializedName: "typeProperties.enableSsl",
                    type: {
                        name: "Object"
                    }
                }, trustedCertPath: {
                    serializedName: "typeProperties.trustedCertPath",
                    type: {
                        name: "Object"
                    }
                }, useSystemTrustStore: {
                    serializedName: "typeProperties.useSystemTrustStore",
                    type: {
                        name: "Object"
                    }
                }, allowHostNameCNMismatch: {
                    serializedName: "typeProperties.allowHostNameCNMismatch",
                    type: {
                        name: "Object"
                    }
                }, allowSelfSignedServerCert: {
                    serializedName: "typeProperties.allowSelfSignedServerCert",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var HBaseLinkedService = {
        serializedName: "HBase",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "HBaseLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { host: {
                    required: true,
                    serializedName: "typeProperties.host",
                    type: {
                        name: "Object"
                    }
                }, port: {
                    serializedName: "typeProperties.port",
                    type: {
                        name: "Object"
                    }
                }, httpPath: {
                    serializedName: "typeProperties.httpPath",
                    type: {
                        name: "Object"
                    }
                }, authenticationType: {
                    required: true,
                    serializedName: "typeProperties.authenticationType",
                    type: {
                        name: "String"
                    }
                }, username: {
                    serializedName: "typeProperties.username",
                    type: {
                        name: "Object"
                    }
                }, password: {
                    serializedName: "typeProperties.password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, enableSsl: {
                    serializedName: "typeProperties.enableSsl",
                    type: {
                        name: "Object"
                    }
                }, trustedCertPath: {
                    serializedName: "typeProperties.trustedCertPath",
                    type: {
                        name: "Object"
                    }
                }, allowHostNameCNMismatch: {
                    serializedName: "typeProperties.allowHostNameCNMismatch",
                    type: {
                        name: "Object"
                    }
                }, allowSelfSignedServerCert: {
                    serializedName: "typeProperties.allowSelfSignedServerCert",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var GreenplumLinkedService = {
        serializedName: "Greenplum",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "GreenplumLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { connectionString: {
                    serializedName: "typeProperties.connectionString",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var GoogleBigQueryLinkedService = {
        serializedName: "GoogleBigQuery",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "GoogleBigQueryLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { project: {
                    required: true,
                    serializedName: "typeProperties.project",
                    type: {
                        name: "Object"
                    }
                }, additionalProjects: {
                    serializedName: "typeProperties.additionalProjects",
                    type: {
                        name: "Object"
                    }
                }, requestGoogleDriveScope: {
                    serializedName: "typeProperties.requestGoogleDriveScope",
                    type: {
                        name: "Object"
                    }
                }, authenticationType: {
                    required: true,
                    serializedName: "typeProperties.authenticationType",
                    type: {
                        name: "String"
                    }
                }, refreshToken: {
                    serializedName: "typeProperties.refreshToken",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, clientId: {
                    serializedName: "typeProperties.clientId",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, clientSecret: {
                    serializedName: "typeProperties.clientSecret",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, email: {
                    serializedName: "typeProperties.email",
                    type: {
                        name: "Object"
                    }
                }, keyFilePath: {
                    serializedName: "typeProperties.keyFilePath",
                    type: {
                        name: "Object"
                    }
                }, trustedCertPath: {
                    serializedName: "typeProperties.trustedCertPath",
                    type: {
                        name: "Object"
                    }
                }, useSystemTrustStore: {
                    serializedName: "typeProperties.useSystemTrustStore",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var GoogleAdWordsLinkedService = {
        serializedName: "GoogleAdWords",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "GoogleAdWordsLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { clientCustomerID: {
                    required: true,
                    serializedName: "typeProperties.clientCustomerID",
                    type: {
                        name: "Object"
                    }
                }, developerToken: {
                    required: true,
                    serializedName: "typeProperties.developerToken",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, authenticationType: {
                    required: true,
                    serializedName: "typeProperties.authenticationType",
                    type: {
                        name: "String"
                    }
                }, refreshToken: {
                    serializedName: "typeProperties.refreshToken",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, clientId: {
                    serializedName: "typeProperties.clientId",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, clientSecret: {
                    serializedName: "typeProperties.clientSecret",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, email: {
                    serializedName: "typeProperties.email",
                    type: {
                        name: "Object"
                    }
                }, keyFilePath: {
                    serializedName: "typeProperties.keyFilePath",
                    type: {
                        name: "Object"
                    }
                }, trustedCertPath: {
                    serializedName: "typeProperties.trustedCertPath",
                    type: {
                        name: "Object"
                    }
                }, useSystemTrustStore: {
                    serializedName: "typeProperties.useSystemTrustStore",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var EloquaLinkedService = {
        serializedName: "Eloqua",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "EloquaLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { endpoint: {
                    required: true,
                    serializedName: "typeProperties.endpoint",
                    type: {
                        name: "Object"
                    }
                }, username: {
                    required: true,
                    serializedName: "typeProperties.username",
                    type: {
                        name: "Object"
                    }
                }, password: {
                    serializedName: "typeProperties.password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, useEncryptedEndpoints: {
                    serializedName: "typeProperties.useEncryptedEndpoints",
                    type: {
                        name: "Object"
                    }
                }, useHostVerification: {
                    serializedName: "typeProperties.useHostVerification",
                    type: {
                        name: "Object"
                    }
                }, usePeerVerification: {
                    serializedName: "typeProperties.usePeerVerification",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var DrillLinkedService = {
        serializedName: "Drill",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "DrillLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { connectionString: {
                    serializedName: "typeProperties.connectionString",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var CouchbaseLinkedService = {
        serializedName: "Couchbase",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "CouchbaseLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { connectionString: {
                    serializedName: "typeProperties.connectionString",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var ConcurLinkedService = {
        serializedName: "Concur",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "ConcurLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { clientId: {
                    required: true,
                    serializedName: "typeProperties.clientId",
                    type: {
                        name: "Object"
                    }
                }, username: {
                    required: true,
                    serializedName: "typeProperties.username",
                    type: {
                        name: "Object"
                    }
                }, password: {
                    serializedName: "typeProperties.password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, useEncryptedEndpoints: {
                    serializedName: "typeProperties.useEncryptedEndpoints",
                    type: {
                        name: "Object"
                    }
                }, useHostVerification: {
                    serializedName: "typeProperties.useHostVerification",
                    type: {
                        name: "Object"
                    }
                }, usePeerVerification: {
                    serializedName: "typeProperties.usePeerVerification",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var AzurePostgreSqlLinkedService = {
        serializedName: "AzurePostgreSql",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "AzurePostgreSqlLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { connectionString: {
                    serializedName: "typeProperties.connectionString",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var AmazonMWSLinkedService = {
        serializedName: "AmazonMWS",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "AmazonMWSLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { endpoint: {
                    required: true,
                    serializedName: "typeProperties.endpoint",
                    type: {
                        name: "Object"
                    }
                }, marketplaceID: {
                    required: true,
                    serializedName: "typeProperties.marketplaceID",
                    type: {
                        name: "Object"
                    }
                }, sellerID: {
                    required: true,
                    serializedName: "typeProperties.sellerID",
                    type: {
                        name: "Object"
                    }
                }, mwsAuthToken: {
                    serializedName: "typeProperties.mwsAuthToken",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, accessKeyId: {
                    required: true,
                    serializedName: "typeProperties.accessKeyId",
                    type: {
                        name: "Object"
                    }
                }, secretKey: {
                    serializedName: "typeProperties.secretKey",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, useEncryptedEndpoints: {
                    serializedName: "typeProperties.useEncryptedEndpoints",
                    type: {
                        name: "Object"
                    }
                }, useHostVerification: {
                    serializedName: "typeProperties.useHostVerification",
                    type: {
                        name: "Object"
                    }
                }, usePeerVerification: {
                    serializedName: "typeProperties.usePeerVerification",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var SapHanaLinkedService = {
        serializedName: "SapHana",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "SapHanaLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { server: {
                    required: true,
                    serializedName: "typeProperties.server",
                    type: {
                        name: "Object"
                    }
                }, authenticationType: {
                    serializedName: "typeProperties.authenticationType",
                    type: {
                        name: "String"
                    }
                }, userName: {
                    serializedName: "typeProperties.userName",
                    type: {
                        name: "Object"
                    }
                }, password: {
                    serializedName: "typeProperties.password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var SapBWLinkedService = {
        serializedName: "SapBW",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "SapBWLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { server: {
                    required: true,
                    serializedName: "typeProperties.server",
                    type: {
                        name: "Object"
                    }
                }, systemNumber: {
                    required: true,
                    serializedName: "typeProperties.systemNumber",
                    type: {
                        name: "Object"
                    }
                }, clientId: {
                    required: true,
                    serializedName: "typeProperties.clientId",
                    type: {
                        name: "Object"
                    }
                }, userName: {
                    serializedName: "typeProperties.userName",
                    type: {
                        name: "Object"
                    }
                }, password: {
                    serializedName: "typeProperties.password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var SftpServerLinkedService = {
        serializedName: "Sftp",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "SftpServerLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { host: {
                    required: true,
                    serializedName: "typeProperties.host",
                    type: {
                        name: "Object"
                    }
                }, port: {
                    serializedName: "typeProperties.port",
                    type: {
                        name: "Object"
                    }
                }, authenticationType: {
                    serializedName: "typeProperties.authenticationType",
                    type: {
                        name: "String"
                    }
                }, userName: {
                    serializedName: "typeProperties.userName",
                    type: {
                        name: "Object"
                    }
                }, password: {
                    serializedName: "typeProperties.password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                }, privateKeyPath: {
                    serializedName: "typeProperties.privateKeyPath",
                    type: {
                        name: "Object"
                    }
                }, privateKeyContent: {
                    serializedName: "typeProperties.privateKeyContent",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, passPhrase: {
                    serializedName: "typeProperties.passPhrase",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, skipHostKeyValidation: {
                    serializedName: "typeProperties.skipHostKeyValidation",
                    type: {
                        name: "Object"
                    }
                }, hostKeyFingerprint: {
                    serializedName: "typeProperties.hostKeyFingerprint",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var FtpServerLinkedService = {
        serializedName: "FtpServer",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "FtpServerLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { host: {
                    required: true,
                    serializedName: "typeProperties.host",
                    type: {
                        name: "Object"
                    }
                }, port: {
                    serializedName: "typeProperties.port",
                    type: {
                        name: "Object"
                    }
                }, authenticationType: {
                    serializedName: "typeProperties.authenticationType",
                    type: {
                        name: "String"
                    }
                }, userName: {
                    serializedName: "typeProperties.userName",
                    type: {
                        name: "Object"
                    }
                }, password: {
                    serializedName: "typeProperties.password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                }, enableSsl: {
                    serializedName: "typeProperties.enableSsl",
                    type: {
                        name: "Object"
                    }
                }, enableServerCertificateValidation: {
                    serializedName: "typeProperties.enableServerCertificateValidation",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var RestServiceLinkedService = {
        serializedName: "RestService",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "RestServiceLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { url: {
                    required: true,
                    serializedName: "typeProperties.url",
                    type: {
                        name: "Object"
                    }
                }, enableServerCertificateValidation: {
                    serializedName: "typeProperties.enableServerCertificateValidation",
                    type: {
                        name: "Object"
                    }
                }, authenticationType: {
                    required: true,
                    serializedName: "typeProperties.authenticationType",
                    type: {
                        name: "String"
                    }
                }, userName: {
                    serializedName: "typeProperties.userName",
                    type: {
                        name: "Object"
                    }
                }, password: {
                    serializedName: "typeProperties.password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, servicePrincipalId: {
                    serializedName: "typeProperties.servicePrincipalId",
                    type: {
                        name: "Object"
                    }
                }, servicePrincipalKey: {
                    serializedName: "typeProperties.servicePrincipalKey",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, tenant: {
                    serializedName: "typeProperties.tenant",
                    type: {
                        name: "Object"
                    }
                }, aadResourceId: {
                    serializedName: "typeProperties.aadResourceId",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var HttpLinkedService = {
        serializedName: "HttpServer",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "HttpLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { url: {
                    required: true,
                    serializedName: "typeProperties.url",
                    type: {
                        name: "Object"
                    }
                }, authenticationType: {
                    serializedName: "typeProperties.authenticationType",
                    type: {
                        name: "String"
                    }
                }, userName: {
                    serializedName: "typeProperties.userName",
                    type: {
                        name: "Object"
                    }
                }, password: {
                    serializedName: "typeProperties.password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, embeddedCertData: {
                    serializedName: "typeProperties.embeddedCertData",
                    type: {
                        name: "Object"
                    }
                }, certThumbprint: {
                    serializedName: "typeProperties.certThumbprint",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                }, enableServerCertificateValidation: {
                    serializedName: "typeProperties.enableServerCertificateValidation",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var AzureSearchLinkedService = {
        serializedName: "AzureSearch",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "AzureSearchLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { url: {
                    required: true,
                    serializedName: "typeProperties.url",
                    type: {
                        name: "Object"
                    }
                }, key: {
                    serializedName: "typeProperties.key",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var CustomDataSourceLinkedService = {
        serializedName: "CustomDataSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "CustomDataSourceLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { typeProperties: {
                    required: true,
                    serializedName: "typeProperties",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var AmazonRedshiftLinkedService = {
        serializedName: "AmazonRedshift",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "AmazonRedshiftLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { server: {
                    required: true,
                    serializedName: "typeProperties.server",
                    type: {
                        name: "Object"
                    }
                }, username: {
                    serializedName: "typeProperties.username",
                    type: {
                        name: "Object"
                    }
                }, password: {
                    serializedName: "typeProperties.password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, database: {
                    required: true,
                    serializedName: "typeProperties.database",
                    type: {
                        name: "Object"
                    }
                }, port: {
                    serializedName: "typeProperties.port",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var AmazonS3LinkedService = {
        serializedName: "AmazonS3",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "AmazonS3LinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { accessKeyId: {
                    serializedName: "typeProperties.accessKeyId",
                    type: {
                        name: "Object"
                    }
                }, secretAccessKey: {
                    serializedName: "typeProperties.secretAccessKey",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var SapEccLinkedService = {
        serializedName: "SapEcc",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "SapEccLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { url: {
                    required: true,
                    serializedName: "typeProperties.url",
                    type: {
                        name: "String"
                    }
                }, username: {
                    serializedName: "typeProperties.username",
                    type: {
                        name: "String"
                    }
                }, password: {
                    serializedName: "typeProperties.password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "String"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var SapCloudForCustomerLinkedService = {
        serializedName: "SapCloudForCustomer",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "SapCloudForCustomerLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { url: {
                    required: true,
                    serializedName: "typeProperties.url",
                    type: {
                        name: "Object"
                    }
                }, username: {
                    serializedName: "typeProperties.username",
                    type: {
                        name: "Object"
                    }
                }, password: {
                    serializedName: "typeProperties.password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var SalesforceLinkedService = {
        serializedName: "Salesforce",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "SalesforceLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { environmentUrl: {
                    serializedName: "typeProperties.environmentUrl",
                    type: {
                        name: "Object"
                    }
                }, username: {
                    serializedName: "typeProperties.username",
                    type: {
                        name: "Object"
                    }
                }, password: {
                    serializedName: "typeProperties.password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, securityToken: {
                    serializedName: "typeProperties.securityToken",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var AzureDataLakeStoreLinkedService = {
        serializedName: "AzureDataLakeStore",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "AzureDataLakeStoreLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { dataLakeStoreUri: {
                    required: true,
                    serializedName: "typeProperties.dataLakeStoreUri",
                    type: {
                        name: "Object"
                    }
                }, servicePrincipalId: {
                    serializedName: "typeProperties.servicePrincipalId",
                    type: {
                        name: "Object"
                    }
                }, servicePrincipalKey: {
                    serializedName: "typeProperties.servicePrincipalKey",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, tenant: {
                    serializedName: "typeProperties.tenant",
                    type: {
                        name: "Object"
                    }
                }, accountName: {
                    serializedName: "typeProperties.accountName",
                    type: {
                        name: "Object"
                    }
                }, subscriptionId: {
                    serializedName: "typeProperties.subscriptionId",
                    type: {
                        name: "Object"
                    }
                }, resourceGroupName: {
                    serializedName: "typeProperties.resourceGroupName",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var MongoDbLinkedService = {
        serializedName: "MongoDb",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "MongoDbLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { server: {
                    required: true,
                    serializedName: "typeProperties.server",
                    type: {
                        name: "Object"
                    }
                }, authenticationType: {
                    serializedName: "typeProperties.authenticationType",
                    type: {
                        name: "String"
                    }
                }, databaseName: {
                    required: true,
                    serializedName: "typeProperties.databaseName",
                    type: {
                        name: "Object"
                    }
                }, username: {
                    serializedName: "typeProperties.username",
                    type: {
                        name: "Object"
                    }
                }, password: {
                    serializedName: "typeProperties.password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, authSource: {
                    serializedName: "typeProperties.authSource",
                    type: {
                        name: "Object"
                    }
                }, port: {
                    serializedName: "typeProperties.port",
                    type: {
                        name: "Object"
                    }
                }, enableSsl: {
                    serializedName: "typeProperties.enableSsl",
                    type: {
                        name: "Object"
                    }
                }, allowSelfSignedServerCert: {
                    serializedName: "typeProperties.allowSelfSignedServerCert",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var CassandraLinkedService = {
        serializedName: "Cassandra",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "CassandraLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { host: {
                    required: true,
                    serializedName: "typeProperties.host",
                    type: {
                        name: "Object"
                    }
                }, authenticationType: {
                    serializedName: "typeProperties.authenticationType",
                    type: {
                        name: "Object"
                    }
                }, port: {
                    serializedName: "typeProperties.port",
                    type: {
                        name: "Object"
                    }
                }, username: {
                    serializedName: "typeProperties.username",
                    type: {
                        name: "Object"
                    }
                }, password: {
                    serializedName: "typeProperties.password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var WebLinkedServiceTypeProperties = {
        serializedName: "WebLinkedServiceTypeProperties",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "authenticationType",
                clientName: "authenticationType"
            },
            uberParent: "WebLinkedServiceTypeProperties",
            className: "WebLinkedServiceTypeProperties",
            modelProperties: {
                url: {
                    required: true,
                    serializedName: "url",
                    type: {
                        name: "Object"
                    }
                },
                authenticationType: {
                    required: true,
                    serializedName: "authenticationType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WebClientCertificateAuthentication = {
        serializedName: "ClientCertificate",
        type: {
            name: "Composite",
            polymorphicDiscriminator: WebLinkedServiceTypeProperties.type.polymorphicDiscriminator,
            uberParent: "WebLinkedServiceTypeProperties",
            className: "WebClientCertificateAuthentication",
            modelProperties: __assign({}, WebLinkedServiceTypeProperties.type.modelProperties, { pfx: {
                    required: true,
                    serializedName: "pfx",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, password: {
                    required: true,
                    serializedName: "password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                } })
        }
    };
    var WebBasicAuthentication = {
        serializedName: "Basic",
        type: {
            name: "Composite",
            polymorphicDiscriminator: WebLinkedServiceTypeProperties.type.polymorphicDiscriminator,
            uberParent: "WebLinkedServiceTypeProperties",
            className: "WebBasicAuthentication",
            modelProperties: __assign({}, WebLinkedServiceTypeProperties.type.modelProperties, { username: {
                    required: true,
                    serializedName: "username",
                    type: {
                        name: "Object"
                    }
                }, password: {
                    required: true,
                    serializedName: "password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                } })
        }
    };
    var WebAnonymousAuthentication = {
        serializedName: "Anonymous",
        type: {
            name: "Composite",
            polymorphicDiscriminator: WebLinkedServiceTypeProperties.type.polymorphicDiscriminator,
            uberParent: "WebLinkedServiceTypeProperties",
            className: "WebAnonymousAuthentication",
            modelProperties: __assign({}, WebLinkedServiceTypeProperties.type.modelProperties)
        }
    };
    var WebLinkedService = {
        serializedName: "Web",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "WebLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { typeProperties: {
                    required: true,
                    serializedName: "typeProperties",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "authenticationType",
                            clientName: "authenticationType"
                        },
                        uberParent: "WebLinkedServiceTypeProperties",
                        className: "WebLinkedServiceTypeProperties"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var ODataLinkedService = {
        serializedName: "OData",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "ODataLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { url: {
                    required: true,
                    serializedName: "typeProperties.url",
                    type: {
                        name: "Object"
                    }
                }, authenticationType: {
                    required: true,
                    serializedName: "typeProperties.authenticationType",
                    type: {
                        name: "String"
                    }
                }, userName: {
                    serializedName: "typeProperties.userName",
                    type: {
                        name: "Object"
                    }
                }, password: {
                    serializedName: "typeProperties.password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, tenant: {
                    serializedName: "typeProperties.tenant",
                    type: {
                        name: "Object"
                    }
                }, servicePrincipalId: {
                    serializedName: "typeProperties.servicePrincipalId",
                    type: {
                        name: "Object"
                    }
                }, aadResourceId: {
                    serializedName: "typeProperties.aadResourceId",
                    type: {
                        name: "Object"
                    }
                }, aadServicePrincipalCredentialType: {
                    serializedName: "typeProperties.aadServicePrincipalCredentialType",
                    type: {
                        name: "String"
                    }
                }, servicePrincipalKey: {
                    serializedName: "typeProperties.servicePrincipalKey",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, servicePrincipalEmbeddedCert: {
                    serializedName: "typeProperties.servicePrincipalEmbeddedCert",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, servicePrincipalEmbeddedCertPassword: {
                    serializedName: "typeProperties.servicePrincipalEmbeddedCertPassword",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var HdfsLinkedService = {
        serializedName: "Hdfs",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "HdfsLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { url: {
                    required: true,
                    serializedName: "typeProperties.url",
                    type: {
                        name: "Object"
                    }
                }, authenticationType: {
                    serializedName: "typeProperties.authenticationType",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                }, userName: {
                    serializedName: "typeProperties.userName",
                    type: {
                        name: "Object"
                    }
                }, password: {
                    serializedName: "typeProperties.password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var OdbcLinkedService = {
        serializedName: "Odbc",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "OdbcLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { connectionString: {
                    required: true,
                    serializedName: "typeProperties.connectionString",
                    type: {
                        name: "Object"
                    }
                }, authenticationType: {
                    serializedName: "typeProperties.authenticationType",
                    type: {
                        name: "Object"
                    }
                }, credential: {
                    serializedName: "typeProperties.credential",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, userName: {
                    serializedName: "typeProperties.userName",
                    type: {
                        name: "Object"
                    }
                }, password: {
                    serializedName: "typeProperties.password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var AzureMLLinkedService = {
        serializedName: "AzureML",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "AzureMLLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { mlEndpoint: {
                    required: true,
                    serializedName: "typeProperties.mlEndpoint",
                    type: {
                        name: "Object"
                    }
                }, apiKey: {
                    required: true,
                    serializedName: "typeProperties.apiKey",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, updateResourceEndpoint: {
                    serializedName: "typeProperties.updateResourceEndpoint",
                    type: {
                        name: "Object"
                    }
                }, servicePrincipalId: {
                    serializedName: "typeProperties.servicePrincipalId",
                    type: {
                        name: "Object"
                    }
                }, servicePrincipalKey: {
                    serializedName: "typeProperties.servicePrincipalKey",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, tenant: {
                    serializedName: "typeProperties.tenant",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var TeradataLinkedService = {
        serializedName: "Teradata",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "TeradataLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { server: {
                    required: true,
                    serializedName: "typeProperties.server",
                    type: {
                        name: "Object"
                    }
                }, authenticationType: {
                    serializedName: "typeProperties.authenticationType",
                    type: {
                        name: "String"
                    }
                }, username: {
                    serializedName: "typeProperties.username",
                    type: {
                        name: "Object"
                    }
                }, password: {
                    serializedName: "typeProperties.password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var Db2LinkedService = {
        serializedName: "Db2",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "Db2LinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { server: {
                    required: true,
                    serializedName: "typeProperties.server",
                    type: {
                        name: "Object"
                    }
                }, database: {
                    required: true,
                    serializedName: "typeProperties.database",
                    type: {
                        name: "Object"
                    }
                }, authenticationType: {
                    serializedName: "typeProperties.authenticationType",
                    type: {
                        name: "String"
                    }
                }, username: {
                    serializedName: "typeProperties.username",
                    type: {
                        name: "Object"
                    }
                }, password: {
                    serializedName: "typeProperties.password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var SybaseLinkedService = {
        serializedName: "Sybase",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "SybaseLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { server: {
                    required: true,
                    serializedName: "typeProperties.server",
                    type: {
                        name: "Object"
                    }
                }, database: {
                    required: true,
                    serializedName: "typeProperties.database",
                    type: {
                        name: "Object"
                    }
                }, schema: {
                    serializedName: "typeProperties.schema",
                    type: {
                        name: "Object"
                    }
                }, authenticationType: {
                    serializedName: "typeProperties.authenticationType",
                    type: {
                        name: "String"
                    }
                }, username: {
                    serializedName: "typeProperties.username",
                    type: {
                        name: "Object"
                    }
                }, password: {
                    serializedName: "typeProperties.password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var PostgreSqlLinkedService = {
        serializedName: "PostgreSql",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "PostgreSqlLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { connectionString: {
                    required: true,
                    serializedName: "typeProperties.connectionString",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var MySqlLinkedService = {
        serializedName: "MySql",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "MySqlLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { connectionString: {
                    required: true,
                    serializedName: "typeProperties.connectionString",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var AzureMySqlLinkedService = {
        serializedName: "AzureMySql",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "AzureMySqlLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { connectionString: {
                    required: true,
                    serializedName: "typeProperties.connectionString",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var OracleServiceCloudLinkedService = {
        serializedName: "OracleServiceCloud",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "OracleServiceCloudLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { host: {
                    required: true,
                    serializedName: "typeProperties.host",
                    type: {
                        name: "Object"
                    }
                }, username: {
                    required: true,
                    serializedName: "typeProperties.username",
                    type: {
                        name: "Object"
                    }
                }, password: {
                    required: true,
                    serializedName: "typeProperties.password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, useEncryptedEndpoints: {
                    serializedName: "typeProperties.useEncryptedEndpoints",
                    type: {
                        name: "Object"
                    }
                }, useHostVerification: {
                    serializedName: "typeProperties.useHostVerification",
                    type: {
                        name: "Object"
                    }
                }, usePeerVerification: {
                    serializedName: "typeProperties.usePeerVerification",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var OracleLinkedService = {
        serializedName: "Oracle",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "OracleLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { connectionString: {
                    required: true,
                    serializedName: "typeProperties.connectionString",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var FileServerLinkedService = {
        serializedName: "FileServer",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "FileServerLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { host: {
                    required: true,
                    serializedName: "typeProperties.host",
                    type: {
                        name: "Object"
                    }
                }, userId: {
                    serializedName: "typeProperties.userId",
                    type: {
                        name: "Object"
                    }
                }, password: {
                    serializedName: "typeProperties.password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var HDInsightLinkedService = {
        serializedName: "HDInsight",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "HDInsightLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { clusterUri: {
                    required: true,
                    serializedName: "typeProperties.clusterUri",
                    type: {
                        name: "Object"
                    }
                }, userName: {
                    serializedName: "typeProperties.userName",
                    type: {
                        name: "Object"
                    }
                }, password: {
                    serializedName: "typeProperties.password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, linkedServiceName: {
                    serializedName: "typeProperties.linkedServiceName",
                    type: {
                        name: "Composite",
                        className: "LinkedServiceReference"
                    }
                }, hcatalogLinkedServiceName: {
                    serializedName: "typeProperties.hcatalogLinkedServiceName",
                    type: {
                        name: "Composite",
                        className: "LinkedServiceReference"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var DynamicsAXLinkedService = {
        serializedName: "DynamicsAX",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "DynamicsAXLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { url: {
                    required: true,
                    serializedName: "typeProperties.url",
                    type: {
                        name: "Object"
                    }
                }, tenant: {
                    serializedName: "typeProperties.tenant",
                    type: {
                        name: "Object"
                    }
                }, servicePrincipalId: {
                    serializedName: "typeProperties.servicePrincipalId",
                    type: {
                        name: "Object"
                    }
                }, aadResourceId: {
                    serializedName: "typeProperties.aadResourceId",
                    type: {
                        name: "Object"
                    }
                }, servicePrincipalKey: {
                    serializedName: "typeProperties.servicePrincipalKey",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var DynamicsLinkedService = {
        serializedName: "Dynamics",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "DynamicsLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { deploymentType: {
                    required: true,
                    serializedName: "typeProperties.deploymentType",
                    type: {
                        name: "Object"
                    }
                }, hostName: {
                    serializedName: "typeProperties.hostName",
                    type: {
                        name: "Object"
                    }
                }, port: {
                    serializedName: "typeProperties.port",
                    type: {
                        name: "Object"
                    }
                }, serviceUri: {
                    serializedName: "typeProperties.serviceUri",
                    type: {
                        name: "Object"
                    }
                }, organizationName: {
                    serializedName: "typeProperties.organizationName",
                    type: {
                        name: "Object"
                    }
                }, authenticationType: {
                    required: true,
                    serializedName: "typeProperties.authenticationType",
                    type: {
                        name: "Object"
                    }
                }, username: {
                    required: true,
                    serializedName: "typeProperties.username",
                    type: {
                        name: "Object"
                    }
                }, password: {
                    serializedName: "typeProperties.password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var CosmosDbLinkedService = {
        serializedName: "CosmosDb",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "CosmosDbLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { connectionString: {
                    required: true,
                    serializedName: "typeProperties.connectionString",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var AzureKeyVaultLinkedService = {
        serializedName: "AzureKeyVault",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "AzureKeyVaultLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { baseUrl: {
                    required: true,
                    serializedName: "typeProperties.baseUrl",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var AzureBatchLinkedService = {
        serializedName: "AzureBatch",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "AzureBatchLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { accountName: {
                    required: true,
                    serializedName: "typeProperties.accountName",
                    type: {
                        name: "Object"
                    }
                }, accessKey: {
                    serializedName: "typeProperties.accessKey",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, batchUri: {
                    required: true,
                    serializedName: "typeProperties.batchUri",
                    type: {
                        name: "Object"
                    }
                }, poolName: {
                    required: true,
                    serializedName: "typeProperties.poolName",
                    type: {
                        name: "Object"
                    }
                }, linkedServiceName: {
                    required: true,
                    serializedName: "typeProperties.linkedServiceName",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "LinkedServiceReference"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var AzureSqlDatabaseLinkedService = {
        serializedName: "AzureSqlDatabase",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "AzureSqlDatabaseLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { connectionString: {
                    required: true,
                    serializedName: "typeProperties.connectionString",
                    type: {
                        name: "Object"
                    }
                }, servicePrincipalId: {
                    serializedName: "typeProperties.servicePrincipalId",
                    type: {
                        name: "Object"
                    }
                }, servicePrincipalKey: {
                    serializedName: "typeProperties.servicePrincipalKey",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, tenant: {
                    serializedName: "typeProperties.tenant",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var SqlServerLinkedService = {
        serializedName: "SqlServer",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "SqlServerLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { connectionString: {
                    required: true,
                    serializedName: "typeProperties.connectionString",
                    type: {
                        name: "Object"
                    }
                }, userName: {
                    serializedName: "typeProperties.userName",
                    type: {
                        name: "Object"
                    }
                }, password: {
                    serializedName: "typeProperties.password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var AzureSqlDWLinkedService = {
        serializedName: "AzureSqlDW",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "AzureSqlDWLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { connectionString: {
                    required: true,
                    serializedName: "typeProperties.connectionString",
                    type: {
                        name: "Object"
                    }
                }, servicePrincipalId: {
                    serializedName: "typeProperties.servicePrincipalId",
                    type: {
                        name: "Object"
                    }
                }, servicePrincipalKey: {
                    serializedName: "typeProperties.servicePrincipalKey",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, tenant: {
                    serializedName: "typeProperties.tenant",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var AzureTableStorageLinkedService = {
        serializedName: "AzureTableStorage",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "AzureTableStorageLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { connectionString: {
                    serializedName: "typeProperties.connectionString",
                    type: {
                        name: "Object"
                    }
                }, sasUri: {
                    serializedName: "typeProperties.sasUri",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "String"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var AzureBlobStorageLinkedService = {
        serializedName: "AzureBlobStorage",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "AzureBlobStorageLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { connectionString: {
                    serializedName: "typeProperties.connectionString",
                    type: {
                        name: "Object"
                    }
                }, sasUri: {
                    serializedName: "typeProperties.sasUri",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, serviceEndpoint: {
                    serializedName: "typeProperties.serviceEndpoint",
                    type: {
                        name: "String"
                    }
                }, servicePrincipalId: {
                    serializedName: "typeProperties.servicePrincipalId",
                    type: {
                        name: "Object"
                    }
                }, servicePrincipalKey: {
                    serializedName: "typeProperties.servicePrincipalKey",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, tenant: {
                    serializedName: "typeProperties.tenant",
                    type: {
                        name: "Object"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "String"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var AzureStorageLinkedService = {
        serializedName: "AzureStorage",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedService.type.polymorphicDiscriminator,
            uberParent: "LinkedService",
            className: "AzureStorageLinkedService",
            modelProperties: __assign({}, LinkedService.type.modelProperties, { connectionString: {
                    serializedName: "typeProperties.connectionString",
                    type: {
                        name: "Object"
                    }
                }, sasUri: {
                    serializedName: "typeProperties.sasUri",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "SecretBase",
                        className: "SecretBase"
                    }
                }, encryptedCredential: {
                    serializedName: "typeProperties.encryptedCredential",
                    type: {
                        name: "String"
                    }
                } }),
            additionalProperties: LinkedService.type.additionalProperties
        }
    };
    var ResponsysObjectDataset = {
        serializedName: "ResponsysObject",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "ResponsysObjectDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var SalesforceMarketingCloudObjectDataset = {
        serializedName: "SalesforceMarketingCloudObject",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "SalesforceMarketingCloudObjectDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var VerticaTableDataset = {
        serializedName: "VerticaTable",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "VerticaTableDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var NetezzaTableDataset = {
        serializedName: "NetezzaTable",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "NetezzaTableDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var ZohoObjectDataset = {
        serializedName: "ZohoObject",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "ZohoObjectDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var XeroObjectDataset = {
        serializedName: "XeroObject",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "XeroObjectDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var SquareObjectDataset = {
        serializedName: "SquareObject",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "SquareObjectDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var SparkObjectDataset = {
        serializedName: "SparkObject",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "SparkObjectDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var ShopifyObjectDataset = {
        serializedName: "ShopifyObject",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "ShopifyObjectDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var ServiceNowObjectDataset = {
        serializedName: "ServiceNowObject",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "ServiceNowObjectDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var QuickBooksObjectDataset = {
        serializedName: "QuickBooksObject",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "QuickBooksObjectDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var PrestoObjectDataset = {
        serializedName: "PrestoObject",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "PrestoObjectDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var PhoenixObjectDataset = {
        serializedName: "PhoenixObject",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "PhoenixObjectDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var PaypalObjectDataset = {
        serializedName: "PaypalObject",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "PaypalObjectDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var MarketoObjectDataset = {
        serializedName: "MarketoObject",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "MarketoObjectDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var MariaDBTableDataset = {
        serializedName: "MariaDBTable",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "MariaDBTableDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var MagentoObjectDataset = {
        serializedName: "MagentoObject",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "MagentoObjectDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var JiraObjectDataset = {
        serializedName: "JiraObject",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "JiraObjectDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var ImpalaObjectDataset = {
        serializedName: "ImpalaObject",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "ImpalaObjectDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var HubspotObjectDataset = {
        serializedName: "HubspotObject",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "HubspotObjectDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var HiveObjectDataset = {
        serializedName: "HiveObject",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "HiveObjectDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var HBaseObjectDataset = {
        serializedName: "HBaseObject",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "HBaseObjectDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var GreenplumTableDataset = {
        serializedName: "GreenplumTable",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "GreenplumTableDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var GoogleBigQueryObjectDataset = {
        serializedName: "GoogleBigQueryObject",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "GoogleBigQueryObjectDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var GoogleAdWordsObjectDataset = {
        serializedName: "GoogleAdWordsObject",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "GoogleAdWordsObjectDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var EloquaObjectDataset = {
        serializedName: "EloquaObject",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "EloquaObjectDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var DrillTableDataset = {
        serializedName: "DrillTable",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "DrillTableDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var CouchbaseTableDataset = {
        serializedName: "CouchbaseTable",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "CouchbaseTableDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var ConcurObjectDataset = {
        serializedName: "ConcurObject",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "ConcurObjectDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var AzurePostgreSqlTableDataset = {
        serializedName: "AzurePostgreSqlTable",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "AzurePostgreSqlTableDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var AmazonMWSObjectDataset = {
        serializedName: "AmazonMWSObject",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "AmazonMWSObjectDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var RestServiceDataset = {
        serializedName: "RestResource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "RestServiceDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties, { relativeUrl: {
                    serializedName: "typeProperties.relativeUrl",
                    type: {
                        name: "Object"
                    }
                }, requestMethod: {
                    serializedName: "typeProperties.requestMethod",
                    type: {
                        name: "Object"
                    }
                }, requestBody: {
                    serializedName: "typeProperties.requestBody",
                    type: {
                        name: "Object"
                    }
                }, additionalHeaders: {
                    serializedName: "typeProperties.additionalHeaders",
                    type: {
                        name: "Object"
                    }
                }, paginationRules: {
                    serializedName: "typeProperties.paginationRules",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var DatasetCompression = {
        serializedName: "DatasetCompression",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "type",
                clientName: "type"
            },
            uberParent: "DatasetCompression",
            className: "DatasetCompression",
            modelProperties: {
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var DatasetZipDeflateCompression = {
        serializedName: "ZipDeflate",
        type: {
            name: "Composite",
            polymorphicDiscriminator: DatasetCompression.type.polymorphicDiscriminator,
            uberParent: "DatasetCompression",
            className: "DatasetZipDeflateCompression",
            modelProperties: __assign({}, DatasetCompression.type.modelProperties, { level: {
                    serializedName: "level",
                    type: {
                        name: "String"
                    }
                } }),
            additionalProperties: DatasetCompression.type.additionalProperties
        }
    };
    var DatasetDeflateCompression = {
        serializedName: "Deflate",
        type: {
            name: "Composite",
            polymorphicDiscriminator: DatasetCompression.type.polymorphicDiscriminator,
            uberParent: "DatasetCompression",
            className: "DatasetDeflateCompression",
            modelProperties: __assign({}, DatasetCompression.type.modelProperties, { level: {
                    serializedName: "level",
                    type: {
                        name: "String"
                    }
                } }),
            additionalProperties: DatasetCompression.type.additionalProperties
        }
    };
    var DatasetGZipCompression = {
        serializedName: "GZip",
        type: {
            name: "Composite",
            polymorphicDiscriminator: DatasetCompression.type.polymorphicDiscriminator,
            uberParent: "DatasetCompression",
            className: "DatasetGZipCompression",
            modelProperties: __assign({}, DatasetCompression.type.modelProperties, { level: {
                    serializedName: "level",
                    type: {
                        name: "String"
                    }
                } }),
            additionalProperties: DatasetCompression.type.additionalProperties
        }
    };
    var DatasetBZip2Compression = {
        serializedName: "BZip2",
        type: {
            name: "Composite",
            polymorphicDiscriminator: DatasetCompression.type.polymorphicDiscriminator,
            uberParent: "DatasetCompression",
            className: "DatasetBZip2Compression",
            modelProperties: __assign({}, DatasetCompression.type.modelProperties),
            additionalProperties: DatasetCompression.type.additionalProperties
        }
    };
    var DatasetStorageFormat = {
        serializedName: "DatasetStorageFormat",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "type",
                clientName: "type"
            },
            uberParent: "DatasetStorageFormat",
            className: "DatasetStorageFormat",
            modelProperties: {
                serializer: {
                    serializedName: "serializer",
                    type: {
                        name: "Object"
                    }
                },
                deserializer: {
                    serializedName: "deserializer",
                    type: {
                        name: "Object"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var ParquetFormat = {
        serializedName: "ParquetFormat",
        type: {
            name: "Composite",
            polymorphicDiscriminator: DatasetStorageFormat.type.polymorphicDiscriminator,
            uberParent: "DatasetStorageFormat",
            className: "ParquetFormat",
            modelProperties: __assign({}, DatasetStorageFormat.type.modelProperties),
            additionalProperties: DatasetStorageFormat.type.additionalProperties
        }
    };
    var OrcFormat = {
        serializedName: "OrcFormat",
        type: {
            name: "Composite",
            polymorphicDiscriminator: DatasetStorageFormat.type.polymorphicDiscriminator,
            uberParent: "DatasetStorageFormat",
            className: "OrcFormat",
            modelProperties: __assign({}, DatasetStorageFormat.type.modelProperties),
            additionalProperties: DatasetStorageFormat.type.additionalProperties
        }
    };
    var AvroFormat = {
        serializedName: "AvroFormat",
        type: {
            name: "Composite",
            polymorphicDiscriminator: DatasetStorageFormat.type.polymorphicDiscriminator,
            uberParent: "DatasetStorageFormat",
            className: "AvroFormat",
            modelProperties: __assign({}, DatasetStorageFormat.type.modelProperties),
            additionalProperties: DatasetStorageFormat.type.additionalProperties
        }
    };
    var JsonFormat = {
        serializedName: "JsonFormat",
        type: {
            name: "Composite",
            polymorphicDiscriminator: DatasetStorageFormat.type.polymorphicDiscriminator,
            uberParent: "DatasetStorageFormat",
            className: "JsonFormat",
            modelProperties: __assign({}, DatasetStorageFormat.type.modelProperties, { filePattern: {
                    serializedName: "filePattern",
                    type: {
                        name: "String"
                    }
                }, nestingSeparator: {
                    serializedName: "nestingSeparator",
                    type: {
                        name: "Object"
                    }
                }, encodingName: {
                    serializedName: "encodingName",
                    type: {
                        name: "Object"
                    }
                }, jsonNodeReference: {
                    serializedName: "jsonNodeReference",
                    type: {
                        name: "Object"
                    }
                }, jsonPathDefinition: {
                    serializedName: "jsonPathDefinition",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: DatasetStorageFormat.type.additionalProperties
        }
    };
    var TextFormat = {
        serializedName: "TextFormat",
        type: {
            name: "Composite",
            polymorphicDiscriminator: DatasetStorageFormat.type.polymorphicDiscriminator,
            uberParent: "DatasetStorageFormat",
            className: "TextFormat",
            modelProperties: __assign({}, DatasetStorageFormat.type.modelProperties, { columnDelimiter: {
                    serializedName: "columnDelimiter",
                    type: {
                        name: "Object"
                    }
                }, rowDelimiter: {
                    serializedName: "rowDelimiter",
                    type: {
                        name: "Object"
                    }
                }, escapeChar: {
                    serializedName: "escapeChar",
                    type: {
                        name: "Object"
                    }
                }, quoteChar: {
                    serializedName: "quoteChar",
                    type: {
                        name: "Object"
                    }
                }, nullValue: {
                    serializedName: "nullValue",
                    type: {
                        name: "Object"
                    }
                }, encodingName: {
                    serializedName: "encodingName",
                    type: {
                        name: "Object"
                    }
                }, treatEmptyAsNull: {
                    serializedName: "treatEmptyAsNull",
                    type: {
                        name: "Object"
                    }
                }, skipLineCount: {
                    serializedName: "skipLineCount",
                    type: {
                        name: "Object"
                    }
                }, firstRowAsHeader: {
                    serializedName: "firstRowAsHeader",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: DatasetStorageFormat.type.additionalProperties
        }
    };
    var HttpDataset = {
        serializedName: "HttpFile",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "HttpDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties, { relativeUrl: {
                    serializedName: "typeProperties.relativeUrl",
                    type: {
                        name: "Object"
                    }
                }, requestMethod: {
                    serializedName: "typeProperties.requestMethod",
                    type: {
                        name: "Object"
                    }
                }, requestBody: {
                    serializedName: "typeProperties.requestBody",
                    type: {
                        name: "Object"
                    }
                }, additionalHeaders: {
                    serializedName: "typeProperties.additionalHeaders",
                    type: {
                        name: "Object"
                    }
                }, format: {
                    serializedName: "typeProperties.format",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "DatasetStorageFormat",
                        className: "DatasetStorageFormat",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }, compression: {
                    serializedName: "typeProperties.compression",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "DatasetCompression",
                        className: "DatasetCompression",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                } }),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var AzureSearchIndexDataset = {
        serializedName: "AzureSearchIndex",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "AzureSearchIndexDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties, { indexName: {
                    required: true,
                    serializedName: "typeProperties.indexName",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var WebTableDataset = {
        serializedName: "WebTable",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "WebTableDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties, { index: {
                    required: true,
                    serializedName: "typeProperties.index",
                    type: {
                        name: "Object"
                    }
                }, path: {
                    serializedName: "typeProperties.path",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var SqlServerTableDataset = {
        serializedName: "SqlServerTable",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "SqlServerTableDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties, { tableName: {
                    required: true,
                    serializedName: "typeProperties.tableName",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var SapEccResourceDataset = {
        serializedName: "SapEccResource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "SapEccResourceDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties, { path: {
                    required: true,
                    serializedName: "typeProperties.path",
                    type: {
                        name: "String"
                    }
                } }),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var SapCloudForCustomerResourceDataset = {
        serializedName: "SapCloudForCustomerResource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "SapCloudForCustomerResourceDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties, { path: {
                    required: true,
                    serializedName: "typeProperties.path",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var SalesforceObjectDataset = {
        serializedName: "SalesforceObject",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "SalesforceObjectDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties, { objectApiName: {
                    serializedName: "typeProperties.objectApiName",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var RelationalTableDataset = {
        serializedName: "RelationalTable",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "RelationalTableDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties, { tableName: {
                    serializedName: "typeProperties.tableName",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var AzureMySqlTableDataset = {
        serializedName: "AzureMySqlTable",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "AzureMySqlTableDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties, { tableName: {
                    serializedName: "typeProperties.tableName",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var OracleServiceCloudObjectDataset = {
        serializedName: "OracleServiceCloudObject",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "OracleServiceCloudObjectDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var OracleTableDataset = {
        serializedName: "OracleTable",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "OracleTableDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties, { tableName: {
                    required: true,
                    serializedName: "typeProperties.tableName",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var ODataResourceDataset = {
        serializedName: "ODataResource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "ODataResourceDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties, { path: {
                    serializedName: "typeProperties.path",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var MongoDbCollectionDataset = {
        serializedName: "MongoDbCollection",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "MongoDbCollectionDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties, { collectionName: {
                    required: true,
                    serializedName: "typeProperties.collectionName",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var FileShareDataset = {
        serializedName: "FileShare",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "FileShareDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties, { folderPath: {
                    serializedName: "typeProperties.folderPath",
                    type: {
                        name: "Object"
                    }
                }, fileName: {
                    serializedName: "typeProperties.fileName",
                    type: {
                        name: "Object"
                    }
                }, wildcardPath: {
                    serializedName: "typeProperties.wildcardPath",
                    type: {
                        name: "Object"
                    }
                }, format: {
                    serializedName: "typeProperties.format",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "DatasetStorageFormat",
                        className: "DatasetStorageFormat",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }, fileFilter: {
                    serializedName: "typeProperties.fileFilter",
                    type: {
                        name: "Object"
                    }
                }, compression: {
                    serializedName: "typeProperties.compression",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "DatasetCompression",
                        className: "DatasetCompression",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                } }),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var AzureDataLakeStoreDataset = {
        serializedName: "AzureDataLakeStoreFile",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "AzureDataLakeStoreDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties, { folderPath: {
                    serializedName: "typeProperties.folderPath",
                    type: {
                        name: "Object"
                    }
                }, fileName: {
                    serializedName: "typeProperties.fileName",
                    type: {
                        name: "Object"
                    }
                }, format: {
                    serializedName: "typeProperties.format",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "DatasetStorageFormat",
                        className: "DatasetStorageFormat",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }, wildcardPath: {
                    serializedName: "typeProperties.wildcardPath",
                    type: {
                        name: "Object"
                    }
                }, compression: {
                    serializedName: "typeProperties.compression",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "DatasetCompression",
                        className: "DatasetCompression",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                } }),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var DynamicsAXResourceDataset = {
        serializedName: "DynamicsAXResource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "DynamicsAXResourceDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties, { path: {
                    required: true,
                    serializedName: "typeProperties.path",
                    type: {
                        name: "String"
                    }
                } }),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var DynamicsEntityDataset = {
        serializedName: "DynamicsEntity",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "DynamicsEntityDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties, { entityName: {
                    serializedName: "typeProperties.entityName",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var DocumentDbCollectionDataset = {
        serializedName: "DocumentDbCollection",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "DocumentDbCollectionDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties, { collectionName: {
                    required: true,
                    serializedName: "typeProperties.collectionName",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var CustomDataset = {
        serializedName: "CustomDataset",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "CustomDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties, { typeProperties: {
                    required: true,
                    serializedName: "typeProperties",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var CassandraTableDataset = {
        serializedName: "CassandraTable",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "CassandraTableDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties, { tableName: {
                    serializedName: "typeProperties.tableName",
                    type: {
                        name: "Object"
                    }
                }, keyspace: {
                    serializedName: "typeProperties.keyspace",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var AzureSqlDWTableDataset = {
        serializedName: "AzureSqlDWTable",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "AzureSqlDWTableDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties, { tableName: {
                    required: true,
                    serializedName: "typeProperties.tableName",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var AzureSqlTableDataset = {
        serializedName: "AzureSqlTable",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "AzureSqlTableDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties, { tableName: {
                    required: true,
                    serializedName: "typeProperties.tableName",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var AzureTableDataset = {
        serializedName: "AzureTable",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "AzureTableDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties, { tableName: {
                    required: true,
                    serializedName: "typeProperties.tableName",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var AzureBlobDataset = {
        serializedName: "AzureBlob",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "AzureBlobDataset",
            modelProperties: __assign({}, Dataset.type.modelProperties, { folderPath: {
                    serializedName: "typeProperties.folderPath",
                    type: {
                        name: "Object"
                    }
                }, tableRootLocation: {
                    serializedName: "typeProperties.tableRootLocation",
                    type: {
                        name: "Object"
                    }
                }, fileName: {
                    serializedName: "typeProperties.fileName",
                    type: {
                        name: "Object"
                    }
                }, wildcardPath: {
                    serializedName: "typeProperties.wildcardPath",
                    type: {
                        name: "Object"
                    }
                }, format: {
                    serializedName: "typeProperties.format",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "DatasetStorageFormat",
                        className: "DatasetStorageFormat",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }, compression: {
                    serializedName: "typeProperties.compression",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "DatasetCompression",
                        className: "DatasetCompression",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                } }),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var AmazonS3Dataset = {
        serializedName: "AmazonS3Object",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Dataset.type.polymorphicDiscriminator,
            uberParent: "Dataset",
            className: "AmazonS3Dataset",
            modelProperties: __assign({}, Dataset.type.modelProperties, { bucketName: {
                    required: true,
                    serializedName: "typeProperties.bucketName",
                    type: {
                        name: "Object"
                    }
                }, key: {
                    serializedName: "typeProperties.key",
                    type: {
                        name: "Object"
                    }
                }, prefix: {
                    serializedName: "typeProperties.prefix",
                    type: {
                        name: "Object"
                    }
                }, wildcardPath: {
                    serializedName: "typeProperties.wildcardPath",
                    type: {
                        name: "Object"
                    }
                }, version: {
                    serializedName: "typeProperties.version",
                    type: {
                        name: "Object"
                    }
                }, format: {
                    serializedName: "typeProperties.format",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "DatasetStorageFormat",
                        className: "DatasetStorageFormat",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }, compression: {
                    serializedName: "typeProperties.compression",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "DatasetCompression",
                        className: "DatasetCompression",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                } }),
            additionalProperties: Dataset.type.additionalProperties
        }
    };
    var ActivityPolicy = {
        serializedName: "ActivityPolicy",
        type: {
            name: "Composite",
            className: "ActivityPolicy",
            modelProperties: {
                timeout: {
                    serializedName: "timeout",
                    type: {
                        name: "Object"
                    }
                },
                retry: {
                    serializedName: "retry",
                    type: {
                        name: "Object"
                    }
                },
                retryIntervalInSeconds: {
                    serializedName: "retryIntervalInSeconds",
                    constraints: {
                        InclusiveMaximum: 86400,
                        InclusiveMinimum: 30
                    },
                    type: {
                        name: "Number"
                    }
                },
                secureInput: {
                    serializedName: "secureInput",
                    type: {
                        name: "Boolean"
                    }
                },
                secureOutput: {
                    serializedName: "secureOutput",
                    type: {
                        name: "Boolean"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var ExecutionActivity = {
        serializedName: "Execution",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
            uberParent: "Activity",
            className: "ExecutionActivity",
            modelProperties: __assign({}, Activity.type.modelProperties, { linkedServiceName: {
                    serializedName: "linkedServiceName",
                    type: {
                        name: "Composite",
                        className: "LinkedServiceReference"
                    }
                }, policy: {
                    serializedName: "policy",
                    type: {
                        name: "Composite",
                        className: "ActivityPolicy",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                } }),
            additionalProperties: Activity.type.additionalProperties
        }
    };
    var DatabricksSparkPythonActivity = {
        serializedName: "DatabricksSparkPython",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
            uberParent: "Activity",
            className: "DatabricksSparkPythonActivity",
            modelProperties: __assign({}, ExecutionActivity.type.modelProperties, { pythonFile: {
                    required: true,
                    serializedName: "typeProperties.pythonFile",
                    type: {
                        name: "Object"
                    }
                }, parameters: {
                    serializedName: "typeProperties.parameters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }, libraries: {
                    serializedName: "typeProperties.libraries",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Dictionary",
                                value: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                } }),
            additionalProperties: Activity.type.additionalProperties
        }
    };
    var DatabricksSparkJarActivity = {
        serializedName: "DatabricksSparkJar",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
            uberParent: "Activity",
            className: "DatabricksSparkJarActivity",
            modelProperties: __assign({}, ExecutionActivity.type.modelProperties, { mainClassName: {
                    required: true,
                    serializedName: "typeProperties.mainClassName",
                    type: {
                        name: "Object"
                    }
                }, parameters: {
                    serializedName: "typeProperties.parameters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }, libraries: {
                    serializedName: "typeProperties.libraries",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Dictionary",
                                value: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                } }),
            additionalProperties: Activity.type.additionalProperties
        }
    };
    var DatabricksNotebookActivity = {
        serializedName: "DatabricksNotebook",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
            uberParent: "Activity",
            className: "DatabricksNotebookActivity",
            modelProperties: __assign({}, ExecutionActivity.type.modelProperties, { notebookPath: {
                    required: true,
                    serializedName: "typeProperties.notebookPath",
                    type: {
                        name: "Object"
                    }
                }, baseParameters: {
                    serializedName: "typeProperties.baseParameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }, libraries: {
                    serializedName: "typeProperties.libraries",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Dictionary",
                                value: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                } }),
            additionalProperties: Activity.type.additionalProperties
        }
    };
    var DataLakeAnalyticsUSQLActivity = {
        serializedName: "DataLakeAnalyticsU-SQL",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
            uberParent: "Activity",
            className: "DataLakeAnalyticsUSQLActivity",
            modelProperties: __assign({}, ExecutionActivity.type.modelProperties, { scriptPath: {
                    required: true,
                    serializedName: "typeProperties.scriptPath",
                    type: {
                        name: "Object"
                    }
                }, scriptLinkedService: {
                    required: true,
                    serializedName: "typeProperties.scriptLinkedService",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "LinkedServiceReference"
                    }
                }, degreeOfParallelism: {
                    serializedName: "typeProperties.degreeOfParallelism",
                    type: {
                        name: "Object"
                    }
                }, priority: {
                    serializedName: "typeProperties.priority",
                    type: {
                        name: "Object"
                    }
                }, parameters: {
                    serializedName: "typeProperties.parameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }, runtimeVersion: {
                    serializedName: "typeProperties.runtimeVersion",
                    type: {
                        name: "Object"
                    }
                }, compilationMode: {
                    serializedName: "typeProperties.compilationMode",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: Activity.type.additionalProperties
        }
    };
    var AzureMLUpdateResourceActivity = {
        serializedName: "AzureMLUpdateResource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
            uberParent: "Activity",
            className: "AzureMLUpdateResourceActivity",
            modelProperties: __assign({}, ExecutionActivity.type.modelProperties, { trainedModelName: {
                    required: true,
                    serializedName: "typeProperties.trainedModelName",
                    type: {
                        name: "Object"
                    }
                }, trainedModelLinkedServiceName: {
                    required: true,
                    serializedName: "typeProperties.trainedModelLinkedServiceName",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "LinkedServiceReference"
                    }
                }, trainedModelFilePath: {
                    required: true,
                    serializedName: "typeProperties.trainedModelFilePath",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: Activity.type.additionalProperties
        }
    };
    var AzureMLWebServiceFile = {
        serializedName: "AzureMLWebServiceFile",
        type: {
            name: "Composite",
            className: "AzureMLWebServiceFile",
            modelProperties: {
                filePath: {
                    required: true,
                    serializedName: "filePath",
                    type: {
                        name: "Object"
                    }
                },
                linkedServiceName: {
                    required: true,
                    serializedName: "linkedServiceName",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "LinkedServiceReference"
                    }
                }
            }
        }
    };
    var AzureMLBatchExecutionActivity = {
        serializedName: "AzureMLBatchExecution",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
            uberParent: "Activity",
            className: "AzureMLBatchExecutionActivity",
            modelProperties: __assign({}, ExecutionActivity.type.modelProperties, { globalParameters: {
                    serializedName: "typeProperties.globalParameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }, webServiceOutputs: {
                    serializedName: "typeProperties.webServiceOutputs",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "AzureMLWebServiceFile"
                            }
                        }
                    }
                }, webServiceInputs: {
                    serializedName: "typeProperties.webServiceInputs",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "AzureMLWebServiceFile"
                            }
                        }
                    }
                } }),
            additionalProperties: Activity.type.additionalProperties
        }
    };
    var GetMetadataActivity = {
        serializedName: "GetMetadata",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
            uberParent: "Activity",
            className: "GetMetadataActivity",
            modelProperties: __assign({}, ExecutionActivity.type.modelProperties, { dataset: {
                    required: true,
                    serializedName: "typeProperties.dataset",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "DatasetReference"
                    }
                }, fieldList: {
                    serializedName: "typeProperties.fieldList",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                } }),
            additionalProperties: Activity.type.additionalProperties
        }
    };
    var WebActivityAuthentication = {
        serializedName: "WebActivityAuthentication",
        type: {
            name: "Composite",
            className: "WebActivityAuthentication",
            modelProperties: {
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                pfx: {
                    serializedName: "pfx",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: SecretBase.type.polymorphicDiscriminator,
                        uberParent: "SecretBase",
                        className: "SecureString"
                    }
                },
                username: {
                    serializedName: "username",
                    type: {
                        name: "String"
                    }
                },
                password: {
                    serializedName: "password",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: SecretBase.type.polymorphicDiscriminator,
                        uberParent: "SecretBase",
                        className: "SecureString"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WebActivity = {
        serializedName: "WebActivity",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
            uberParent: "Activity",
            className: "WebActivity",
            modelProperties: __assign({}, ExecutionActivity.type.modelProperties, { method: {
                    required: true,
                    serializedName: "typeProperties.method",
                    type: {
                        name: "String"
                    }
                }, url: {
                    required: true,
                    serializedName: "typeProperties.url",
                    type: {
                        name: "Object"
                    }
                }, headers: {
                    serializedName: "typeProperties.headers",
                    type: {
                        name: "Object"
                    }
                }, body: {
                    serializedName: "typeProperties.body",
                    type: {
                        name: "Object"
                    }
                }, authentication: {
                    serializedName: "typeProperties.authentication",
                    type: {
                        name: "Composite",
                        className: "WebActivityAuthentication"
                    }
                }, datasets: {
                    serializedName: "typeProperties.datasets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DatasetReference"
                            }
                        }
                    }
                }, linkedServices: {
                    serializedName: "typeProperties.linkedServices",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LinkedServiceReference"
                            }
                        }
                    }
                } }),
            additionalProperties: Activity.type.additionalProperties
        }
    };
    var RedshiftUnloadSettings = {
        serializedName: "RedshiftUnloadSettings",
        type: {
            name: "Composite",
            className: "RedshiftUnloadSettings",
            modelProperties: {
                s3LinkedServiceName: {
                    required: true,
                    serializedName: "s3LinkedServiceName",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "LinkedServiceReference"
                    }
                },
                bucketName: {
                    required: true,
                    serializedName: "bucketName",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var CopySource = {
        serializedName: "CopySource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "type",
                clientName: "type"
            },
            uberParent: "CopySource",
            className: "CopySource",
            modelProperties: {
                sourceRetryCount: {
                    serializedName: "sourceRetryCount",
                    type: {
                        name: "Object"
                    }
                },
                sourceRetryWait: {
                    serializedName: "sourceRetryWait",
                    type: {
                        name: "Object"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var AmazonRedshiftSource = {
        serializedName: "AmazonRedshiftSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "AmazonRedshiftSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                }, redshiftUnloadSettings: {
                    serializedName: "redshiftUnloadSettings",
                    type: {
                        name: "Composite",
                        className: "RedshiftUnloadSettings"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var ResponsysSource = {
        serializedName: "ResponsysSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "ResponsysSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var SalesforceMarketingCloudSource = {
        serializedName: "SalesforceMarketingCloudSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "SalesforceMarketingCloudSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var VerticaSource = {
        serializedName: "VerticaSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "VerticaSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var NetezzaSource = {
        serializedName: "NetezzaSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "NetezzaSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var ZohoSource = {
        serializedName: "ZohoSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "ZohoSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var XeroSource = {
        serializedName: "XeroSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "XeroSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var SquareSource = {
        serializedName: "SquareSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "SquareSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var SparkSource = {
        serializedName: "SparkSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "SparkSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var ShopifySource = {
        serializedName: "ShopifySource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "ShopifySource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var ServiceNowSource = {
        serializedName: "ServiceNowSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "ServiceNowSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var QuickBooksSource = {
        serializedName: "QuickBooksSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "QuickBooksSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var PrestoSource = {
        serializedName: "PrestoSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "PrestoSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var PhoenixSource = {
        serializedName: "PhoenixSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "PhoenixSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var PaypalSource = {
        serializedName: "PaypalSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "PaypalSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var MarketoSource = {
        serializedName: "MarketoSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "MarketoSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var MariaDBSource = {
        serializedName: "MariaDBSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "MariaDBSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var MagentoSource = {
        serializedName: "MagentoSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "MagentoSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var JiraSource = {
        serializedName: "JiraSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "JiraSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var ImpalaSource = {
        serializedName: "ImpalaSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "ImpalaSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var HubspotSource = {
        serializedName: "HubspotSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "HubspotSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var HiveSource = {
        serializedName: "HiveSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "HiveSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var HBaseSource = {
        serializedName: "HBaseSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "HBaseSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var GreenplumSource = {
        serializedName: "GreenplumSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "GreenplumSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var GoogleBigQuerySource = {
        serializedName: "GoogleBigQuerySource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "GoogleBigQuerySource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var GoogleAdWordsSource = {
        serializedName: "GoogleAdWordsSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "GoogleAdWordsSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var EloquaSource = {
        serializedName: "EloquaSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "EloquaSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var DrillSource = {
        serializedName: "DrillSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "DrillSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var CouchbaseSource = {
        serializedName: "CouchbaseSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "CouchbaseSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var ConcurSource = {
        serializedName: "ConcurSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "ConcurSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var AzurePostgreSqlSource = {
        serializedName: "AzurePostgreSqlSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "AzurePostgreSqlSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var AmazonMWSSource = {
        serializedName: "AmazonMWSSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "AmazonMWSSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var RestServiceSource = {
        serializedName: "RestServiceSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "RestServiceSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { httpRequestTimeout: {
                    serializedName: "httpRequestTimeout",
                    type: {
                        name: "Object"
                    }
                }, requestInterval: {
                    serializedName: "requestInterval",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var HttpSource = {
        serializedName: "HttpSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "HttpSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { httpRequestTimeout: {
                    serializedName: "httpRequestTimeout",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var AzureDataLakeStoreSource = {
        serializedName: "AzureDataLakeStoreSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "AzureDataLakeStoreSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { recursive: {
                    serializedName: "recursive",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var MongoDbSource = {
        serializedName: "MongoDbSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "MongoDbSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var CassandraSource = {
        serializedName: "CassandraSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "CassandraSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                }, consistencyLevel: {
                    serializedName: "consistencyLevel",
                    type: {
                        name: "String"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var WebSource = {
        serializedName: "WebSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "WebSource",
            modelProperties: __assign({}, CopySource.type.modelProperties),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var OracleServiceCloudSource = {
        serializedName: "OracleServiceCloudSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "OracleServiceCloudSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var OracleSource = {
        serializedName: "OracleSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "OracleSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { oracleReaderQuery: {
                    serializedName: "oracleReaderQuery",
                    type: {
                        name: "Object"
                    }
                }, queryTimeout: {
                    serializedName: "queryTimeout",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var AzureMySqlSource = {
        serializedName: "AzureMySqlSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "AzureMySqlSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var DistcpSettings = {
        serializedName: "DistcpSettings",
        type: {
            name: "Composite",
            className: "DistcpSettings",
            modelProperties: {
                resourceManagerEndpoint: {
                    required: true,
                    serializedName: "resourceManagerEndpoint",
                    type: {
                        name: "Object"
                    }
                },
                tempScriptPath: {
                    required: true,
                    serializedName: "tempScriptPath",
                    type: {
                        name: "Object"
                    }
                },
                distcpOptions: {
                    serializedName: "distcpOptions",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var HdfsSource = {
        serializedName: "HdfsSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "HdfsSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { recursive: {
                    serializedName: "recursive",
                    type: {
                        name: "Object"
                    }
                }, distcpSettings: {
                    serializedName: "distcpSettings",
                    type: {
                        name: "Composite",
                        className: "DistcpSettings"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var FileSystemSource = {
        serializedName: "FileSystemSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "FileSystemSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { recursive: {
                    serializedName: "recursive",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var SqlDWSource = {
        serializedName: "SqlDWSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "SqlDWSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { sqlReaderQuery: {
                    serializedName: "sqlReaderQuery",
                    type: {
                        name: "Object"
                    }
                }, sqlReaderStoredProcedureName: {
                    serializedName: "sqlReaderStoredProcedureName",
                    type: {
                        name: "Object"
                    }
                }, storedProcedureParameters: {
                    serializedName: "storedProcedureParameters",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var StoredProcedureParameter = {
        serializedName: "StoredProcedureParameter",
        type: {
            name: "Composite",
            className: "StoredProcedureParameter",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Object"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SqlSource = {
        serializedName: "SqlSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "SqlSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { sqlReaderQuery: {
                    serializedName: "sqlReaderQuery",
                    type: {
                        name: "Object"
                    }
                }, sqlReaderStoredProcedureName: {
                    serializedName: "sqlReaderStoredProcedureName",
                    type: {
                        name: "Object"
                    }
                }, storedProcedureParameters: {
                    serializedName: "storedProcedureParameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "StoredProcedureParameter"
                            }
                        }
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var SapEccSource = {
        serializedName: "SapEccSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "SapEccSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "String"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var SapCloudForCustomerSource = {
        serializedName: "SapCloudForCustomerSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "SapCloudForCustomerSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var SalesforceSource = {
        serializedName: "SalesforceSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "SalesforceSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                }, readBehavior: {
                    serializedName: "readBehavior",
                    type: {
                        name: "String"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var RelationalSource = {
        serializedName: "RelationalSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "RelationalSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var DynamicsAXSource = {
        serializedName: "DynamicsAXSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "DynamicsAXSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var DynamicsSource = {
        serializedName: "DynamicsSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "DynamicsSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var DocumentDbCollectionSource = {
        serializedName: "DocumentDbCollectionSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "DocumentDbCollectionSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { query: {
                    serializedName: "query",
                    type: {
                        name: "Object"
                    }
                }, nestingSeparator: {
                    serializedName: "nestingSeparator",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var BlobSource = {
        serializedName: "BlobSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "BlobSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { treatEmptyAsNull: {
                    serializedName: "treatEmptyAsNull",
                    type: {
                        name: "Object"
                    }
                }, skipHeaderLineCount: {
                    serializedName: "skipHeaderLineCount",
                    type: {
                        name: "Object"
                    }
                }, recursive: {
                    serializedName: "recursive",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var AzureTableSource = {
        serializedName: "AzureTableSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySource.type.polymorphicDiscriminator,
            uberParent: "CopySource",
            className: "AzureTableSource",
            modelProperties: __assign({}, CopySource.type.modelProperties, { azureTableSourceQuery: {
                    serializedName: "azureTableSourceQuery",
                    type: {
                        name: "Object"
                    }
                }, azureTableSourceIgnoreTableNotFound: {
                    serializedName: "azureTableSourceIgnoreTableNotFound",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySource.type.additionalProperties
        }
    };
    var LookupActivity = {
        serializedName: "Lookup",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
            uberParent: "Activity",
            className: "LookupActivity",
            modelProperties: __assign({}, ExecutionActivity.type.modelProperties, { source: {
                    required: true,
                    serializedName: "typeProperties.source",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "CopySource",
                        className: "CopySource",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }, dataset: {
                    required: true,
                    serializedName: "typeProperties.dataset",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "DatasetReference"
                    }
                }, firstRowOnly: {
                    serializedName: "typeProperties.firstRowOnly",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: Activity.type.additionalProperties
        }
    };
    var SqlServerStoredProcedureActivity = {
        serializedName: "SqlServerStoredProcedure",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
            uberParent: "Activity",
            className: "SqlServerStoredProcedureActivity",
            modelProperties: __assign({}, ExecutionActivity.type.modelProperties, { storedProcedureName: {
                    required: true,
                    serializedName: "typeProperties.storedProcedureName",
                    type: {
                        name: "Object"
                    }
                }, storedProcedureParameters: {
                    serializedName: "typeProperties.storedProcedureParameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "StoredProcedureParameter"
                            }
                        }
                    }
                } }),
            additionalProperties: Activity.type.additionalProperties
        }
    };
    var CustomActivityReferenceObject = {
        serializedName: "CustomActivityReferenceObject",
        type: {
            name: "Composite",
            className: "CustomActivityReferenceObject",
            modelProperties: {
                linkedServices: {
                    serializedName: "linkedServices",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LinkedServiceReference"
                            }
                        }
                    }
                },
                datasets: {
                    serializedName: "datasets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DatasetReference"
                            }
                        }
                    }
                }
            }
        }
    };
    var CustomActivity = {
        serializedName: "Custom",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
            uberParent: "Activity",
            className: "CustomActivity",
            modelProperties: __assign({}, ExecutionActivity.type.modelProperties, { command: {
                    required: true,
                    serializedName: "typeProperties.command",
                    type: {
                        name: "Object"
                    }
                }, resourceLinkedService: {
                    serializedName: "typeProperties.resourceLinkedService",
                    type: {
                        name: "Composite",
                        className: "LinkedServiceReference"
                    }
                }, folderPath: {
                    serializedName: "typeProperties.folderPath",
                    type: {
                        name: "Object"
                    }
                }, referenceObjects: {
                    serializedName: "typeProperties.referenceObjects",
                    type: {
                        name: "Composite",
                        className: "CustomActivityReferenceObject"
                    }
                }, extendedProperties: {
                    serializedName: "typeProperties.extendedProperties",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                } }),
            additionalProperties: Activity.type.additionalProperties
        }
    };
    var SSISPropertyOverride = {
        serializedName: "SSISPropertyOverride",
        type: {
            name: "Composite",
            className: "SSISPropertyOverride",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "Object"
                    }
                },
                isSensitive: {
                    serializedName: "isSensitive",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var SSISExecutionParameter = {
        serializedName: "SSISExecutionParameter",
        type: {
            name: "Composite",
            className: "SSISExecutionParameter",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var SSISPackageLocation = {
        serializedName: "SSISPackageLocation",
        type: {
            name: "Composite",
            className: "SSISPackageLocation",
            modelProperties: {
                packagePath: {
                    required: true,
                    serializedName: "packagePath",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ExecuteSSISPackageActivity = {
        serializedName: "ExecuteSSISPackage",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
            uberParent: "Activity",
            className: "ExecuteSSISPackageActivity",
            modelProperties: __assign({}, ExecutionActivity.type.modelProperties, { packageLocation: {
                    required: true,
                    serializedName: "typeProperties.packageLocation",
                    type: {
                        name: "Composite",
                        className: "SSISPackageLocation"
                    }
                }, runtime: {
                    serializedName: "typeProperties.runtime",
                    type: {
                        name: "String"
                    }
                }, loggingLevel: {
                    serializedName: "typeProperties.loggingLevel",
                    type: {
                        name: "String"
                    }
                }, environmentPath: {
                    serializedName: "typeProperties.environmentPath",
                    type: {
                        name: "String"
                    }
                }, connectVia: {
                    required: true,
                    serializedName: "typeProperties.connectVia",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "IntegrationRuntimeReference"
                    }
                }, projectParameters: {
                    serializedName: "typeProperties.projectParameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "SSISExecutionParameter"
                            }
                        }
                    }
                }, packageParameters: {
                    serializedName: "typeProperties.packageParameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "SSISExecutionParameter"
                            }
                        }
                    }
                }, projectConnectionManagers: {
                    serializedName: "typeProperties.projectConnectionManagers",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Dictionary",
                                value: {
                                    type: {
                                        name: "Composite",
                                        className: "SSISExecutionParameter"
                                    }
                                }
                            }
                        }
                    }
                }, packageConnectionManagers: {
                    serializedName: "typeProperties.packageConnectionManagers",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Dictionary",
                                value: {
                                    type: {
                                        name: "Composite",
                                        className: "SSISExecutionParameter"
                                    }
                                }
                            }
                        }
                    }
                }, propertyOverrides: {
                    serializedName: "typeProperties.propertyOverrides",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "SSISPropertyOverride"
                            }
                        }
                    }
                } }),
            additionalProperties: Activity.type.additionalProperties
        }
    };
    var HDInsightSparkActivity = {
        serializedName: "HDInsightSpark",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
            uberParent: "Activity",
            className: "HDInsightSparkActivity",
            modelProperties: __assign({}, ExecutionActivity.type.modelProperties, { rootPath: {
                    required: true,
                    serializedName: "typeProperties.rootPath",
                    type: {
                        name: "Object"
                    }
                }, entryFilePath: {
                    required: true,
                    serializedName: "typeProperties.entryFilePath",
                    type: {
                        name: "Object"
                    }
                }, argumentsProperty: {
                    serializedName: "typeProperties.arguments",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }, getDebugInfo: {
                    serializedName: "typeProperties.getDebugInfo",
                    type: {
                        name: "String"
                    }
                }, sparkJobLinkedService: {
                    serializedName: "typeProperties.sparkJobLinkedService",
                    type: {
                        name: "Composite",
                        className: "LinkedServiceReference"
                    }
                }, className: {
                    serializedName: "typeProperties.className",
                    type: {
                        name: "String"
                    }
                }, proxyUser: {
                    serializedName: "typeProperties.proxyUser",
                    type: {
                        name: "Object"
                    }
                }, sparkConfig: {
                    serializedName: "typeProperties.sparkConfig",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                } }),
            additionalProperties: Activity.type.additionalProperties
        }
    };
    var HDInsightStreamingActivity = {
        serializedName: "HDInsightStreaming",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
            uberParent: "Activity",
            className: "HDInsightStreamingActivity",
            modelProperties: __assign({}, ExecutionActivity.type.modelProperties, { storageLinkedServices: {
                    serializedName: "typeProperties.storageLinkedServices",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LinkedServiceReference"
                            }
                        }
                    }
                }, argumentsProperty: {
                    serializedName: "typeProperties.arguments",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }, getDebugInfo: {
                    serializedName: "typeProperties.getDebugInfo",
                    type: {
                        name: "String"
                    }
                }, mapper: {
                    required: true,
                    serializedName: "typeProperties.mapper",
                    type: {
                        name: "Object"
                    }
                }, reducer: {
                    required: true,
                    serializedName: "typeProperties.reducer",
                    type: {
                        name: "Object"
                    }
                }, input: {
                    required: true,
                    serializedName: "typeProperties.input",
                    type: {
                        name: "Object"
                    }
                }, output: {
                    required: true,
                    serializedName: "typeProperties.output",
                    type: {
                        name: "Object"
                    }
                }, filePaths: {
                    required: true,
                    serializedName: "typeProperties.filePaths",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }, fileLinkedService: {
                    serializedName: "typeProperties.fileLinkedService",
                    type: {
                        name: "Composite",
                        className: "LinkedServiceReference"
                    }
                }, combiner: {
                    serializedName: "typeProperties.combiner",
                    type: {
                        name: "Object"
                    }
                }, commandEnvironment: {
                    serializedName: "typeProperties.commandEnvironment",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }, defines: {
                    serializedName: "typeProperties.defines",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                } }),
            additionalProperties: Activity.type.additionalProperties
        }
    };
    var HDInsightMapReduceActivity = {
        serializedName: "HDInsightMapReduce",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
            uberParent: "Activity",
            className: "HDInsightMapReduceActivity",
            modelProperties: __assign({}, ExecutionActivity.type.modelProperties, { storageLinkedServices: {
                    serializedName: "typeProperties.storageLinkedServices",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LinkedServiceReference"
                            }
                        }
                    }
                }, argumentsProperty: {
                    serializedName: "typeProperties.arguments",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }, getDebugInfo: {
                    serializedName: "typeProperties.getDebugInfo",
                    type: {
                        name: "String"
                    }
                }, className: {
                    required: true,
                    serializedName: "typeProperties.className",
                    type: {
                        name: "Object"
                    }
                }, jarFilePath: {
                    required: true,
                    serializedName: "typeProperties.jarFilePath",
                    type: {
                        name: "Object"
                    }
                }, jarLinkedService: {
                    serializedName: "typeProperties.jarLinkedService",
                    type: {
                        name: "Composite",
                        className: "LinkedServiceReference"
                    }
                }, jarLibs: {
                    serializedName: "typeProperties.jarLibs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }, defines: {
                    serializedName: "typeProperties.defines",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                } }),
            additionalProperties: Activity.type.additionalProperties
        }
    };
    var HDInsightPigActivity = {
        serializedName: "HDInsightPig",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
            uberParent: "Activity",
            className: "HDInsightPigActivity",
            modelProperties: __assign({}, ExecutionActivity.type.modelProperties, { storageLinkedServices: {
                    serializedName: "typeProperties.storageLinkedServices",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LinkedServiceReference"
                            }
                        }
                    }
                }, argumentsProperty: {
                    serializedName: "typeProperties.arguments",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }, getDebugInfo: {
                    serializedName: "typeProperties.getDebugInfo",
                    type: {
                        name: "String"
                    }
                }, scriptPath: {
                    serializedName: "typeProperties.scriptPath",
                    type: {
                        name: "Object"
                    }
                }, scriptLinkedService: {
                    serializedName: "typeProperties.scriptLinkedService",
                    type: {
                        name: "Composite",
                        className: "LinkedServiceReference"
                    }
                }, defines: {
                    serializedName: "typeProperties.defines",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                } }),
            additionalProperties: Activity.type.additionalProperties
        }
    };
    var HDInsightHiveActivity = {
        serializedName: "HDInsightHive",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
            uberParent: "Activity",
            className: "HDInsightHiveActivity",
            modelProperties: __assign({}, ExecutionActivity.type.modelProperties, { storageLinkedServices: {
                    serializedName: "typeProperties.storageLinkedServices",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LinkedServiceReference"
                            }
                        }
                    }
                }, argumentsProperty: {
                    serializedName: "typeProperties.arguments",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }, getDebugInfo: {
                    serializedName: "typeProperties.getDebugInfo",
                    type: {
                        name: "String"
                    }
                }, scriptPath: {
                    serializedName: "typeProperties.scriptPath",
                    type: {
                        name: "Object"
                    }
                }, scriptLinkedService: {
                    serializedName: "typeProperties.scriptLinkedService",
                    type: {
                        name: "Composite",
                        className: "LinkedServiceReference"
                    }
                }, defines: {
                    serializedName: "typeProperties.defines",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                } }),
            additionalProperties: Activity.type.additionalProperties
        }
    };
    var RedirectIncompatibleRowSettings = {
        serializedName: "RedirectIncompatibleRowSettings",
        type: {
            name: "Composite",
            className: "RedirectIncompatibleRowSettings",
            modelProperties: {
                linkedServiceName: {
                    required: true,
                    serializedName: "linkedServiceName",
                    type: {
                        name: "Object"
                    }
                },
                path: {
                    serializedName: "path",
                    type: {
                        name: "Object"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var StagingSettings = {
        serializedName: "StagingSettings",
        type: {
            name: "Composite",
            className: "StagingSettings",
            modelProperties: {
                linkedServiceName: {
                    required: true,
                    serializedName: "linkedServiceName",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "LinkedServiceReference"
                    }
                },
                path: {
                    serializedName: "path",
                    type: {
                        name: "Object"
                    }
                },
                enableCompression: {
                    serializedName: "enableCompression",
                    type: {
                        name: "Object"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var CopyTranslator = {
        serializedName: "CopyTranslator",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "type",
                clientName: "type"
            },
            uberParent: "CopyTranslator",
            className: "CopyTranslator",
            modelProperties: {
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var TabularTranslator = {
        serializedName: "TabularTranslator",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopyTranslator.type.polymorphicDiscriminator,
            uberParent: "CopyTranslator",
            className: "TabularTranslator",
            modelProperties: __assign({}, CopyTranslator.type.modelProperties, { columnMappings: {
                    serializedName: "columnMappings",
                    type: {
                        name: "Object"
                    }
                }, schemaMapping: {
                    serializedName: "schemaMapping",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopyTranslator.type.additionalProperties
        }
    };
    var CopySink = {
        serializedName: "CopySink",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "type",
                clientName: "type"
            },
            uberParent: "CopySink",
            className: "CopySink",
            modelProperties: {
                writeBatchSize: {
                    serializedName: "writeBatchSize",
                    type: {
                        name: "Object"
                    }
                },
                writeBatchTimeout: {
                    serializedName: "writeBatchTimeout",
                    type: {
                        name: "Object"
                    }
                },
                sinkRetryCount: {
                    serializedName: "sinkRetryCount",
                    type: {
                        name: "Object"
                    }
                },
                sinkRetryWait: {
                    serializedName: "sinkRetryWait",
                    type: {
                        name: "Object"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var SalesforceSink = {
        serializedName: "SalesforceSink",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
            uberParent: "CopySink",
            className: "SalesforceSink",
            modelProperties: __assign({}, CopySink.type.modelProperties, { writeBehavior: {
                    serializedName: "writeBehavior",
                    type: {
                        name: "String"
                    }
                }, externalIdFieldName: {
                    serializedName: "externalIdFieldName",
                    type: {
                        name: "Object"
                    }
                }, ignoreNullValues: {
                    serializedName: "ignoreNullValues",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySink.type.additionalProperties
        }
    };
    var DynamicsSink = {
        serializedName: "DynamicsSink",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
            uberParent: "CopySink",
            className: "DynamicsSink",
            modelProperties: __assign({}, CopySink.type.modelProperties, { writeBehavior: {
                    required: true,
                    isConstant: true,
                    serializedName: "writeBehavior",
                    defaultValue: 'Upsert',
                    type: {
                        name: "String"
                    }
                }, ignoreNullValues: {
                    serializedName: "ignoreNullValues",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySink.type.additionalProperties
        }
    };
    var OdbcSink = {
        serializedName: "OdbcSink",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
            uberParent: "CopySink",
            className: "OdbcSink",
            modelProperties: __assign({}, CopySink.type.modelProperties, { preCopyScript: {
                    serializedName: "preCopyScript",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySink.type.additionalProperties
        }
    };
    var AzureSearchIndexSink = {
        serializedName: "AzureSearchIndexSink",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
            uberParent: "CopySink",
            className: "AzureSearchIndexSink",
            modelProperties: __assign({}, CopySink.type.modelProperties, { writeBehavior: {
                    serializedName: "writeBehavior",
                    type: {
                        name: "String"
                    }
                } }),
            additionalProperties: CopySink.type.additionalProperties
        }
    };
    var AzureDataLakeStoreSink = {
        serializedName: "AzureDataLakeStoreSink",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
            uberParent: "CopySink",
            className: "AzureDataLakeStoreSink",
            modelProperties: __assign({}, CopySink.type.modelProperties, { copyBehavior: {
                    serializedName: "copyBehavior",
                    type: {
                        name: "String"
                    }
                } }),
            additionalProperties: CopySink.type.additionalProperties
        }
    };
    var OracleSink = {
        serializedName: "OracleSink",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
            uberParent: "CopySink",
            className: "OracleSink",
            modelProperties: __assign({}, CopySink.type.modelProperties, { preCopyScript: {
                    serializedName: "preCopyScript",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySink.type.additionalProperties
        }
    };
    var PolybaseSettings = {
        serializedName: "PolybaseSettings",
        type: {
            name: "Composite",
            className: "PolybaseSettings",
            modelProperties: {
                rejectType: {
                    serializedName: "rejectType",
                    type: {
                        name: "String"
                    }
                },
                rejectValue: {
                    serializedName: "rejectValue",
                    type: {
                        name: "Object"
                    }
                },
                rejectSampleValue: {
                    serializedName: "rejectSampleValue",
                    type: {
                        name: "Object"
                    }
                },
                useTypeDefault: {
                    serializedName: "useTypeDefault",
                    type: {
                        name: "Object"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var SqlDWSink = {
        serializedName: "SqlDWSink",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
            uberParent: "CopySink",
            className: "SqlDWSink",
            modelProperties: __assign({}, CopySink.type.modelProperties, { preCopyScript: {
                    serializedName: "preCopyScript",
                    type: {
                        name: "Object"
                    }
                }, allowPolyBase: {
                    serializedName: "allowPolyBase",
                    type: {
                        name: "Object"
                    }
                }, polyBaseSettings: {
                    serializedName: "polyBaseSettings",
                    type: {
                        name: "Composite",
                        className: "PolybaseSettings",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                } }),
            additionalProperties: CopySink.type.additionalProperties
        }
    };
    var SqlSink = {
        serializedName: "SqlSink",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
            uberParent: "CopySink",
            className: "SqlSink",
            modelProperties: __assign({}, CopySink.type.modelProperties, { sqlWriterStoredProcedureName: {
                    serializedName: "sqlWriterStoredProcedureName",
                    type: {
                        name: "Object"
                    }
                }, sqlWriterTableType: {
                    serializedName: "sqlWriterTableType",
                    type: {
                        name: "Object"
                    }
                }, preCopyScript: {
                    serializedName: "preCopyScript",
                    type: {
                        name: "Object"
                    }
                }, storedProcedureParameters: {
                    serializedName: "storedProcedureParameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "StoredProcedureParameter"
                            }
                        }
                    }
                } }),
            additionalProperties: CopySink.type.additionalProperties
        }
    };
    var DocumentDbCollectionSink = {
        serializedName: "DocumentDbCollectionSink",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
            uberParent: "CopySink",
            className: "DocumentDbCollectionSink",
            modelProperties: __assign({}, CopySink.type.modelProperties, { nestingSeparator: {
                    serializedName: "nestingSeparator",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySink.type.additionalProperties
        }
    };
    var FileSystemSink = {
        serializedName: "FileSystemSink",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
            uberParent: "CopySink",
            className: "FileSystemSink",
            modelProperties: __assign({}, CopySink.type.modelProperties, { copyBehavior: {
                    serializedName: "copyBehavior",
                    type: {
                        name: "String"
                    }
                } }),
            additionalProperties: CopySink.type.additionalProperties
        }
    };
    var BlobSink = {
        serializedName: "BlobSink",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
            uberParent: "CopySink",
            className: "BlobSink",
            modelProperties: __assign({}, CopySink.type.modelProperties, { blobWriterOverwriteFiles: {
                    serializedName: "blobWriterOverwriteFiles",
                    type: {
                        name: "Object"
                    }
                }, blobWriterDateTimeFormat: {
                    serializedName: "blobWriterDateTimeFormat",
                    type: {
                        name: "Object"
                    }
                }, blobWriterAddHeader: {
                    serializedName: "blobWriterAddHeader",
                    type: {
                        name: "Object"
                    }
                }, copyBehavior: {
                    serializedName: "copyBehavior",
                    type: {
                        name: "String"
                    }
                } }),
            additionalProperties: CopySink.type.additionalProperties
        }
    };
    var AzureTableSink = {
        serializedName: "AzureTableSink",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
            uberParent: "CopySink",
            className: "AzureTableSink",
            modelProperties: __assign({}, CopySink.type.modelProperties, { azureTableDefaultPartitionKeyValue: {
                    serializedName: "azureTableDefaultPartitionKeyValue",
                    type: {
                        name: "Object"
                    }
                }, azureTablePartitionKeyName: {
                    serializedName: "azureTablePartitionKeyName",
                    type: {
                        name: "Object"
                    }
                }, azureTableRowKeyName: {
                    serializedName: "azureTableRowKeyName",
                    type: {
                        name: "Object"
                    }
                }, azureTableInsertType: {
                    serializedName: "azureTableInsertType",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: CopySink.type.additionalProperties
        }
    };
    var AzureQueueSink = {
        serializedName: "AzureQueueSink",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
            uberParent: "CopySink",
            className: "AzureQueueSink",
            modelProperties: __assign({}, CopySink.type.modelProperties),
            additionalProperties: CopySink.type.additionalProperties
        }
    };
    var SapCloudForCustomerSink = {
        serializedName: "SapCloudForCustomerSink",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CopySink.type.polymorphicDiscriminator,
            uberParent: "CopySink",
            className: "SapCloudForCustomerSink",
            modelProperties: __assign({}, CopySink.type.modelProperties, { writeBehavior: {
                    serializedName: "writeBehavior",
                    type: {
                        name: "String"
                    }
                } }),
            additionalProperties: CopySink.type.additionalProperties
        }
    };
    var CopyActivity = {
        serializedName: "Copy",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
            uberParent: "Activity",
            className: "CopyActivity",
            modelProperties: __assign({}, ExecutionActivity.type.modelProperties, { source: {
                    required: true,
                    serializedName: "typeProperties.source",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "CopySource",
                        className: "CopySource",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }, sink: {
                    required: true,
                    serializedName: "typeProperties.sink",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "CopySink",
                        className: "CopySink",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }, translator: {
                    serializedName: "typeProperties.translator",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "CopyTranslator",
                        className: "CopyTranslator",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }, enableStaging: {
                    serializedName: "typeProperties.enableStaging",
                    type: {
                        name: "Object"
                    }
                }, stagingSettings: {
                    serializedName: "typeProperties.stagingSettings",
                    type: {
                        name: "Composite",
                        className: "StagingSettings",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }, parallelCopies: {
                    serializedName: "typeProperties.parallelCopies",
                    type: {
                        name: "Object"
                    }
                }, dataIntegrationUnits: {
                    serializedName: "typeProperties.dataIntegrationUnits",
                    type: {
                        name: "Object"
                    }
                }, enableSkipIncompatibleRow: {
                    serializedName: "typeProperties.enableSkipIncompatibleRow",
                    type: {
                        name: "Object"
                    }
                }, redirectIncompatibleRowSettings: {
                    serializedName: "typeProperties.redirectIncompatibleRowSettings",
                    type: {
                        name: "Composite",
                        className: "RedirectIncompatibleRowSettings",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }, inputs: {
                    serializedName: "inputs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DatasetReference"
                            }
                        }
                    }
                }, outputs: {
                    serializedName: "outputs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DatasetReference"
                            }
                        }
                    }
                } }),
            additionalProperties: Activity.type.additionalProperties
        }
    };
    var ControlActivity = {
        serializedName: "Container",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
            uberParent: "Activity",
            className: "ControlActivity",
            modelProperties: __assign({}, Activity.type.modelProperties),
            additionalProperties: Activity.type.additionalProperties
        }
    };
    var AppendVariableActivity = {
        serializedName: "AppendVariable",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
            uberParent: "Activity",
            className: "AppendVariableActivity",
            modelProperties: __assign({}, ControlActivity.type.modelProperties, { variableName: {
                    serializedName: "typeProperties.variableName",
                    type: {
                        name: "String"
                    }
                }, value: {
                    serializedName: "typeProperties.value",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: Activity.type.additionalProperties
        }
    };
    var SetVariableActivity = {
        serializedName: "SetVariable",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
            uberParent: "Activity",
            className: "SetVariableActivity",
            modelProperties: __assign({}, ControlActivity.type.modelProperties, { variableName: {
                    serializedName: "typeProperties.variableName",
                    type: {
                        name: "String"
                    }
                }, value: {
                    serializedName: "typeProperties.value",
                    type: {
                        name: "Object"
                    }
                } }),
            additionalProperties: Activity.type.additionalProperties
        }
    };
    var FilterActivity = {
        serializedName: "Filter",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
            uberParent: "Activity",
            className: "FilterActivity",
            modelProperties: __assign({}, ControlActivity.type.modelProperties, { items: {
                    required: true,
                    serializedName: "typeProperties.items",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "Expression"
                    }
                }, condition: {
                    required: true,
                    serializedName: "typeProperties.condition",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "Expression"
                    }
                } }),
            additionalProperties: Activity.type.additionalProperties
        }
    };
    var UntilActivity = {
        serializedName: "Until",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
            uberParent: "Activity",
            className: "UntilActivity",
            modelProperties: __assign({}, ControlActivity.type.modelProperties, { expression: {
                    required: true,
                    serializedName: "typeProperties.expression",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "Expression"
                    }
                }, timeout: {
                    serializedName: "typeProperties.timeout",
                    type: {
                        name: "Object"
                    }
                }, activities: {
                    required: true,
                    serializedName: "typeProperties.activities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: {
                                    serializedName: "type",
                                    clientName: "type"
                                },
                                uberParent: "Activity",
                                className: "Activity",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                } }),
            additionalProperties: Activity.type.additionalProperties
        }
    };
    var WaitActivity = {
        serializedName: "Wait",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
            uberParent: "Activity",
            className: "WaitActivity",
            modelProperties: __assign({}, ControlActivity.type.modelProperties, { waitTimeInSeconds: {
                    required: true,
                    serializedName: "typeProperties.waitTimeInSeconds",
                    type: {
                        name: "Number"
                    }
                } }),
            additionalProperties: Activity.type.additionalProperties
        }
    };
    var ForEachActivity = {
        serializedName: "ForEach",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
            uberParent: "Activity",
            className: "ForEachActivity",
            modelProperties: __assign({}, ControlActivity.type.modelProperties, { isSequential: {
                    serializedName: "typeProperties.isSequential",
                    type: {
                        name: "Boolean"
                    }
                }, batchCount: {
                    serializedName: "typeProperties.batchCount",
                    constraints: {
                        InclusiveMaximum: 50
                    },
                    type: {
                        name: "Number"
                    }
                }, items: {
                    required: true,
                    serializedName: "typeProperties.items",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "Expression"
                    }
                }, activities: {
                    required: true,
                    serializedName: "typeProperties.activities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: {
                                    serializedName: "type",
                                    clientName: "type"
                                },
                                uberParent: "Activity",
                                className: "Activity",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                } }),
            additionalProperties: Activity.type.additionalProperties
        }
    };
    var IfConditionActivity = {
        serializedName: "IfCondition",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
            uberParent: "Activity",
            className: "IfConditionActivity",
            modelProperties: __assign({}, ControlActivity.type.modelProperties, { expression: {
                    required: true,
                    serializedName: "typeProperties.expression",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "Expression"
                    }
                }, ifTrueActivities: {
                    serializedName: "typeProperties.ifTrueActivities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: {
                                    serializedName: "type",
                                    clientName: "type"
                                },
                                uberParent: "Activity",
                                className: "Activity",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                }, ifFalseActivities: {
                    serializedName: "typeProperties.ifFalseActivities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: {
                                    serializedName: "type",
                                    clientName: "type"
                                },
                                uberParent: "Activity",
                                className: "Activity",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                } }),
            additionalProperties: Activity.type.additionalProperties
        }
    };
    var ExecutePipelineActivity = {
        serializedName: "ExecutePipeline",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Activity.type.polymorphicDiscriminator,
            uberParent: "Activity",
            className: "ExecutePipelineActivity",
            modelProperties: __assign({}, ControlActivity.type.modelProperties, { pipelineProperty: {
                    required: true,
                    serializedName: "typeProperties.pipeline",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "PipelineReference"
                    }
                }, parameters: {
                    serializedName: "typeProperties.parameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }, waitOnCompletion: {
                    serializedName: "typeProperties.waitOnCompletion",
                    type: {
                        name: "Boolean"
                    }
                } }),
            additionalProperties: Activity.type.additionalProperties
        }
    };
    var LinkedIntegrationRuntime = {
        serializedName: "LinkedIntegrationRuntime",
        type: {
            name: "Composite",
            className: "LinkedIntegrationRuntime",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                subscriptionId: {
                    readOnly: true,
                    serializedName: "subscriptionId",
                    type: {
                        name: "String"
                    }
                },
                dataFactoryName: {
                    readOnly: true,
                    serializedName: "dataFactoryName",
                    type: {
                        name: "String"
                    }
                },
                dataFactoryLocation: {
                    readOnly: true,
                    serializedName: "dataFactoryLocation",
                    type: {
                        name: "String"
                    }
                },
                createTime: {
                    readOnly: true,
                    serializedName: "createTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var SelfHostedIntegrationRuntimeNode = {
        serializedName: "SelfHostedIntegrationRuntimeNode",
        type: {
            name: "Composite",
            className: "SelfHostedIntegrationRuntimeNode",
            modelProperties: {
                nodeName: {
                    readOnly: true,
                    serializedName: "nodeName",
                    type: {
                        name: "String"
                    }
                },
                machineName: {
                    readOnly: true,
                    serializedName: "machineName",
                    type: {
                        name: "String"
                    }
                },
                hostServiceUri: {
                    readOnly: true,
                    serializedName: "hostServiceUri",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                capabilities: {
                    readOnly: true,
                    serializedName: "capabilities",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                versionStatus: {
                    readOnly: true,
                    serializedName: "versionStatus",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    readOnly: true,
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                },
                registerTime: {
                    readOnly: true,
                    serializedName: "registerTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastConnectTime: {
                    readOnly: true,
                    serializedName: "lastConnectTime",
                    type: {
                        name: "DateTime"
                    }
                },
                expiryTime: {
                    readOnly: true,
                    serializedName: "expiryTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastStartTime: {
                    readOnly: true,
                    serializedName: "lastStartTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastStopTime: {
                    readOnly: true,
                    serializedName: "lastStopTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastUpdateResult: {
                    readOnly: true,
                    serializedName: "lastUpdateResult",
                    type: {
                        name: "String"
                    }
                },
                lastStartUpdateTime: {
                    readOnly: true,
                    serializedName: "lastStartUpdateTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastEndUpdateTime: {
                    readOnly: true,
                    serializedName: "lastEndUpdateTime",
                    type: {
                        name: "DateTime"
                    }
                },
                isActiveDispatcher: {
                    readOnly: true,
                    serializedName: "isActiveDispatcher",
                    type: {
                        name: "Boolean"
                    }
                },
                concurrentJobsLimit: {
                    readOnly: true,
                    serializedName: "concurrentJobsLimit",
                    type: {
                        name: "Number"
                    }
                },
                maxConcurrentJobs: {
                    readOnly: true,
                    serializedName: "maxConcurrentJobs",
                    type: {
                        name: "Number"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var SelfHostedIntegrationRuntimeStatus = {
        serializedName: "SelfHosted",
        type: {
            name: "Composite",
            polymorphicDiscriminator: IntegrationRuntimeStatus.type.polymorphicDiscriminator,
            uberParent: "IntegrationRuntimeStatus",
            className: "SelfHostedIntegrationRuntimeStatus",
            modelProperties: __assign({}, IntegrationRuntimeStatus.type.modelProperties, { createTime: {
                    readOnly: true,
                    serializedName: "typeProperties.createTime",
                    type: {
                        name: "DateTime"
                    }
                }, taskQueueId: {
                    readOnly: true,
                    serializedName: "typeProperties.taskQueueId",
                    type: {
                        name: "String"
                    }
                }, internalChannelEncryption: {
                    readOnly: true,
                    serializedName: "typeProperties.internalChannelEncryption",
                    type: {
                        name: "String"
                    }
                }, version: {
                    readOnly: true,
                    serializedName: "typeProperties.version",
                    type: {
                        name: "String"
                    }
                }, nodes: {
                    serializedName: "typeProperties.nodes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SelfHostedIntegrationRuntimeNode",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                }, scheduledUpdateDate: {
                    readOnly: true,
                    serializedName: "typeProperties.scheduledUpdateDate",
                    type: {
                        name: "DateTime"
                    }
                }, updateDelayOffset: {
                    readOnly: true,
                    serializedName: "typeProperties.updateDelayOffset",
                    type: {
                        name: "String"
                    }
                }, localTimeZoneOffset: {
                    readOnly: true,
                    serializedName: "typeProperties.localTimeZoneOffset",
                    type: {
                        name: "String"
                    }
                }, capabilities: {
                    readOnly: true,
                    serializedName: "typeProperties.capabilities",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, serviceUrls: {
                    readOnly: true,
                    serializedName: "typeProperties.serviceUrls",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, autoUpdate: {
                    readOnly: true,
                    serializedName: "typeProperties.autoUpdate",
                    type: {
                        name: "String"
                    }
                }, versionStatus: {
                    readOnly: true,
                    serializedName: "typeProperties.versionStatus",
                    type: {
                        name: "String"
                    }
                }, links: {
                    serializedName: "typeProperties.links",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LinkedIntegrationRuntime"
                            }
                        }
                    }
                }, pushedVersion: {
                    readOnly: true,
                    serializedName: "typeProperties.pushedVersion",
                    type: {
                        name: "String"
                    }
                }, latestVersion: {
                    readOnly: true,
                    serializedName: "typeProperties.latestVersion",
                    type: {
                        name: "String"
                    }
                }, autoUpdateETA: {
                    readOnly: true,
                    serializedName: "typeProperties.autoUpdateETA",
                    type: {
                        name: "DateTime"
                    }
                } }),
            additionalProperties: IntegrationRuntimeStatus.type.additionalProperties
        }
    };
    var ManagedIntegrationRuntimeOperationResult = {
        serializedName: "ManagedIntegrationRuntimeOperationResult",
        type: {
            name: "Composite",
            className: "ManagedIntegrationRuntimeOperationResult",
            modelProperties: {
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                startTime: {
                    readOnly: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                result: {
                    readOnly: true,
                    serializedName: "result",
                    type: {
                        name: "String"
                    }
                },
                errorCode: {
                    readOnly: true,
                    serializedName: "errorCode",
                    type: {
                        name: "String"
                    }
                },
                parameters: {
                    readOnly: true,
                    serializedName: "parameters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                activityId: {
                    readOnly: true,
                    serializedName: "activityId",
                    type: {
                        name: "String"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var ManagedIntegrationRuntimeError = {
        serializedName: "ManagedIntegrationRuntimeError",
        type: {
            name: "Composite",
            className: "ManagedIntegrationRuntimeError",
            modelProperties: {
                time: {
                    readOnly: true,
                    serializedName: "time",
                    type: {
                        name: "DateTime"
                    }
                },
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                parameters: {
                    readOnly: true,
                    serializedName: "parameters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var ManagedIntegrationRuntimeNode = {
        serializedName: "ManagedIntegrationRuntimeNode",
        type: {
            name: "Composite",
            className: "ManagedIntegrationRuntimeNode",
            modelProperties: {
                nodeId: {
                    readOnly: true,
                    serializedName: "nodeId",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                errors: {
                    serializedName: "errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagedIntegrationRuntimeError",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var ManagedIntegrationRuntimeStatus = {
        serializedName: "Managed",
        type: {
            name: "Composite",
            polymorphicDiscriminator: IntegrationRuntimeStatus.type.polymorphicDiscriminator,
            uberParent: "IntegrationRuntimeStatus",
            className: "ManagedIntegrationRuntimeStatus",
            modelProperties: __assign({}, IntegrationRuntimeStatus.type.modelProperties, { createTime: {
                    readOnly: true,
                    serializedName: "typeProperties.createTime",
                    type: {
                        name: "DateTime"
                    }
                }, nodes: {
                    readOnly: true,
                    serializedName: "typeProperties.nodes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagedIntegrationRuntimeNode",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                }, otherErrors: {
                    readOnly: true,
                    serializedName: "typeProperties.otherErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagedIntegrationRuntimeError",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                }, lastOperation: {
                    readOnly: true,
                    serializedName: "typeProperties.lastOperation",
                    type: {
                        name: "Composite",
                        className: "ManagedIntegrationRuntimeOperationResult",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                } }),
            additionalProperties: IntegrationRuntimeStatus.type.additionalProperties
        }
    };
    var LinkedIntegrationRuntimeType = {
        serializedName: "LinkedIntegrationRuntimeType",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "authorizationType",
                clientName: "authorizationType"
            },
            uberParent: "LinkedIntegrationRuntimeType",
            className: "LinkedIntegrationRuntimeType",
            modelProperties: {
                authorizationType: {
                    required: true,
                    serializedName: "authorizationType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LinkedIntegrationRuntimeRbacAuthorization = {
        serializedName: "RBAC",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedIntegrationRuntimeType.type.polymorphicDiscriminator,
            uberParent: "LinkedIntegrationRuntimeType",
            className: "LinkedIntegrationRuntimeRbacAuthorization",
            modelProperties: __assign({}, LinkedIntegrationRuntimeType.type.modelProperties, { resourceId: {
                    required: true,
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var LinkedIntegrationRuntimeKeyAuthorization = {
        serializedName: "Key",
        type: {
            name: "Composite",
            polymorphicDiscriminator: LinkedIntegrationRuntimeType.type.polymorphicDiscriminator,
            uberParent: "LinkedIntegrationRuntimeType",
            className: "LinkedIntegrationRuntimeKeyAuthorization",
            modelProperties: __assign({}, LinkedIntegrationRuntimeType.type.modelProperties, { key: {
                    required: true,
                    serializedName: "key",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: SecretBase.type.polymorphicDiscriminator,
                        uberParent: "SecretBase",
                        className: "SecureString"
                    }
                } })
        }
    };
    var SelfHostedIntegrationRuntime = {
        serializedName: "SelfHosted",
        type: {
            name: "Composite",
            polymorphicDiscriminator: IntegrationRuntime.type.polymorphicDiscriminator,
            uberParent: "IntegrationRuntime",
            className: "SelfHostedIntegrationRuntime",
            modelProperties: __assign({}, IntegrationRuntime.type.modelProperties, { linkedInfo: {
                    serializedName: "typeProperties.linkedInfo",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "authorizationType",
                            clientName: "authorizationType"
                        },
                        uberParent: "LinkedIntegrationRuntimeType",
                        className: "LinkedIntegrationRuntimeType"
                    }
                } }),
            additionalProperties: IntegrationRuntime.type.additionalProperties
        }
    };
    var IntegrationRuntimeCustomSetupScriptProperties = {
        serializedName: "IntegrationRuntimeCustomSetupScriptProperties",
        type: {
            name: "Composite",
            className: "IntegrationRuntimeCustomSetupScriptProperties",
            modelProperties: {
                blobContainerUri: {
                    serializedName: "blobContainerUri",
                    type: {
                        name: "String"
                    }
                },
                sasToken: {
                    serializedName: "sasToken",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: SecretBase.type.polymorphicDiscriminator,
                        uberParent: "SecretBase",
                        className: "SecureString"
                    }
                }
            }
        }
    };
    var IntegrationRuntimeSsisCatalogInfo = {
        serializedName: "IntegrationRuntimeSsisCatalogInfo",
        type: {
            name: "Composite",
            className: "IntegrationRuntimeSsisCatalogInfo",
            modelProperties: {
                catalogServerEndpoint: {
                    serializedName: "catalogServerEndpoint",
                    type: {
                        name: "String"
                    }
                },
                catalogAdminUserName: {
                    serializedName: "catalogAdminUserName",
                    constraints: {
                        MaxLength: 128,
                        MinLength: 1
                    },
                    type: {
                        name: "String"
                    }
                },
                catalogAdminPassword: {
                    serializedName: "catalogAdminPassword",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: SecretBase.type.polymorphicDiscriminator,
                        uberParent: "SecretBase",
                        className: "SecureString"
                    }
                },
                catalogPricingTier: {
                    serializedName: "catalogPricingTier",
                    type: {
                        name: "String"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var IntegrationRuntimeSsisProperties = {
        serializedName: "IntegrationRuntimeSsisProperties",
        type: {
            name: "Composite",
            className: "IntegrationRuntimeSsisProperties",
            modelProperties: {
                catalogInfo: {
                    serializedName: "catalogInfo",
                    type: {
                        name: "Composite",
                        className: "IntegrationRuntimeSsisCatalogInfo",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                },
                licenseType: {
                    serializedName: "licenseType",
                    type: {
                        name: "String"
                    }
                },
                customSetupScriptProperties: {
                    serializedName: "customSetupScriptProperties",
                    type: {
                        name: "Composite",
                        className: "IntegrationRuntimeCustomSetupScriptProperties"
                    }
                },
                edition: {
                    serializedName: "edition",
                    type: {
                        name: "String"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var IntegrationRuntimeVNetProperties = {
        serializedName: "IntegrationRuntimeVNetProperties",
        type: {
            name: "Composite",
            className: "IntegrationRuntimeVNetProperties",
            modelProperties: {
                vNetId: {
                    serializedName: "vNetId",
                    type: {
                        name: "String"
                    }
                },
                subnet: {
                    serializedName: "subnet",
                    type: {
                        name: "String"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var IntegrationRuntimeComputeProperties = {
        serializedName: "IntegrationRuntimeComputeProperties",
        type: {
            name: "Composite",
            className: "IntegrationRuntimeComputeProperties",
            modelProperties: {
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                nodeSize: {
                    serializedName: "nodeSize",
                    type: {
                        name: "String"
                    }
                },
                numberOfNodes: {
                    serializedName: "numberOfNodes",
                    constraints: {
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                maxParallelExecutionsPerNode: {
                    serializedName: "maxParallelExecutionsPerNode",
                    constraints: {
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                vNetProperties: {
                    serializedName: "vNetProperties",
                    type: {
                        name: "Composite",
                        className: "IntegrationRuntimeVNetProperties",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var ManagedIntegrationRuntime = {
        serializedName: "Managed",
        type: {
            name: "Composite",
            polymorphicDiscriminator: IntegrationRuntime.type.polymorphicDiscriminator,
            uberParent: "IntegrationRuntime",
            className: "ManagedIntegrationRuntime",
            modelProperties: __assign({}, IntegrationRuntime.type.modelProperties, { state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                }, computeProperties: {
                    serializedName: "typeProperties.computeProperties",
                    type: {
                        name: "Composite",
                        className: "IntegrationRuntimeComputeProperties",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }, ssisProperties: {
                    serializedName: "typeProperties.ssisProperties",
                    type: {
                        name: "Composite",
                        className: "IntegrationRuntimeSsisProperties",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                } }),
            additionalProperties: IntegrationRuntime.type.additionalProperties
        }
    };
    var IntegrationRuntimeNodeIpAddress = {
        serializedName: "IntegrationRuntimeNodeIpAddress",
        type: {
            name: "Composite",
            className: "IntegrationRuntimeNodeIpAddress",
            modelProperties: {
                ipAddress: {
                    readOnly: true,
                    serializedName: "ipAddress",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IntegrationRuntimeNodeMonitoringData = {
        serializedName: "IntegrationRuntimeNodeMonitoringData",
        type: {
            name: "Composite",
            className: "IntegrationRuntimeNodeMonitoringData",
            modelProperties: {
                nodeName: {
                    readOnly: true,
                    serializedName: "nodeName",
                    type: {
                        name: "String"
                    }
                },
                availableMemoryInMB: {
                    readOnly: true,
                    serializedName: "availableMemoryInMB",
                    type: {
                        name: "Number"
                    }
                },
                cpuUtilization: {
                    readOnly: true,
                    serializedName: "cpuUtilization",
                    type: {
                        name: "Number"
                    }
                },
                concurrentJobsLimit: {
                    readOnly: true,
                    serializedName: "concurrentJobsLimit",
                    type: {
                        name: "Number"
                    }
                },
                concurrentJobsRunning: {
                    readOnly: true,
                    serializedName: "concurrentJobsRunning",
                    type: {
                        name: "Number"
                    }
                },
                maxConcurrentJobs: {
                    readOnly: true,
                    serializedName: "maxConcurrentJobs",
                    type: {
                        name: "Number"
                    }
                },
                sentBytes: {
                    readOnly: true,
                    serializedName: "sentBytes",
                    type: {
                        name: "Number"
                    }
                },
                receivedBytes: {
                    readOnly: true,
                    serializedName: "receivedBytes",
                    type: {
                        name: "Number"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var IntegrationRuntimeMonitoringData = {
        serializedName: "IntegrationRuntimeMonitoringData",
        type: {
            name: "Composite",
            className: "IntegrationRuntimeMonitoringData",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                nodes: {
                    serializedName: "nodes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IntegrationRuntimeNodeMonitoringData",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    var IntegrationRuntimeAuthKeys = {
        serializedName: "IntegrationRuntimeAuthKeys",
        type: {
            name: "Composite",
            className: "IntegrationRuntimeAuthKeys",
            modelProperties: {
                authKey1: {
                    serializedName: "authKey1",
                    type: {
                        name: "String"
                    }
                },
                authKey2: {
                    serializedName: "authKey2",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IntegrationRuntimeRegenerateKeyParameters = {
        serializedName: "IntegrationRuntimeRegenerateKeyParameters",
        type: {
            name: "Composite",
            className: "IntegrationRuntimeRegenerateKeyParameters",
            modelProperties: {
                keyName: {
                    serializedName: "keyName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IntegrationRuntimeConnectionInfo = {
        serializedName: "IntegrationRuntimeConnectionInfo",
        type: {
            name: "Composite",
            className: "IntegrationRuntimeConnectionInfo",
            modelProperties: {
                serviceToken: {
                    readOnly: true,
                    serializedName: "serviceToken",
                    type: {
                        name: "String"
                    }
                },
                identityCertThumbprint: {
                    readOnly: true,
                    serializedName: "identityCertThumbprint",
                    type: {
                        name: "String"
                    }
                },
                hostServiceUri: {
                    readOnly: true,
                    serializedName: "hostServiceUri",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    readOnly: true,
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                },
                publicKey: {
                    readOnly: true,
                    serializedName: "publicKey",
                    type: {
                        name: "String"
                    }
                },
                isIdentityCertExprired: {
                    readOnly: true,
                    serializedName: "isIdentityCertExprired",
                    type: {
                        name: "Boolean"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var OperationListResponse = {
        serializedName: "OperationListResponse",
        type: {
            name: "Composite",
            className: "OperationListResponse",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FactoryListResponse = {
        serializedName: "FactoryListResponse",
        type: {
            name: "Composite",
            className: "FactoryListResponse",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Factory",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IntegrationRuntimeListResponse = {
        serializedName: "IntegrationRuntimeListResponse",
        type: {
            name: "Composite",
            className: "IntegrationRuntimeListResponse",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IntegrationRuntimeResource"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LinkedServiceListResponse = {
        serializedName: "LinkedServiceListResponse",
        type: {
            name: "Composite",
            className: "LinkedServiceListResponse",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LinkedServiceResource"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DatasetListResponse = {
        serializedName: "DatasetListResponse",
        type: {
            name: "Composite",
            className: "DatasetListResponse",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DatasetResource"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PipelineListResponse = {
        serializedName: "PipelineListResponse",
        type: {
            name: "Composite",
            className: "PipelineListResponse",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PipelineResource",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TriggerListResponse = {
        serializedName: "TriggerListResponse",
        type: {
            name: "Composite",
            className: "TriggerListResponse",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TriggerResource"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RerunTriggerListResponse = {
        serializedName: "RerunTriggerListResponse",
        type: {
            name: "Composite",
            className: "RerunTriggerListResponse",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RerunTriggerResource"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var discriminators = {
        'SecretBase.SecureString': SecureString,
        'SecretBase.AzureKeyVaultSecret': AzureKeyVaultSecretReference,
        'SecretBase': SecretBase,
        'FactoryRepoConfiguration': FactoryRepoConfiguration,
        'IntegrationRuntime': IntegrationRuntime,
        'IntegrationRuntimeStatus': IntegrationRuntimeStatus,
        'LinkedService': LinkedService,
        'Dataset': Dataset,
        'Activity': Activity,
        'Trigger': Trigger,
        'FactoryRepoConfiguration.FactoryVSTSConfiguration': FactoryVSTSConfiguration,
        'FactoryRepoConfiguration.FactoryGitHubConfiguration': FactoryGitHubConfiguration,
        'Trigger.RerunTumblingWindowTrigger': RerunTumblingWindowTrigger,
        'DependencyReference.SelfDependencyTumblingWindowTriggerReference': SelfDependencyTumblingWindowTriggerReference,
        'DependencyReference.TumblingWindowTriggerDependencyReference': TumblingWindowTriggerDependencyReference,
        'DependencyReference.TriggerDependencyReference': TriggerDependencyReference,
        'DependencyReference': DependencyReference,
        'Trigger.TumblingWindowTrigger': TumblingWindowTrigger,
        'Trigger.BlobEventsTrigger': BlobEventsTrigger,
        'Trigger.BlobTrigger': BlobTrigger,
        'Trigger.ScheduleTrigger': ScheduleTrigger,
        'Trigger.MultiplePipelineTrigger': MultiplePipelineTrigger,
        'LinkedService.Responsys': ResponsysLinkedService,
        'LinkedService.AzureDatabricks': AzureDatabricksLinkedService,
        'LinkedService.AzureDataLakeAnalytics': AzureDataLakeAnalyticsLinkedService,
        'LinkedService.HDInsightOnDemand': HDInsightOnDemandLinkedService,
        'LinkedService.SalesforceMarketingCloud': SalesforceMarketingCloudLinkedService,
        'LinkedService.Netezza': NetezzaLinkedService,
        'LinkedService.Vertica': VerticaLinkedService,
        'LinkedService.Zoho': ZohoLinkedService,
        'LinkedService.Xero': XeroLinkedService,
        'LinkedService.Square': SquareLinkedService,
        'LinkedService.Spark': SparkLinkedService,
        'LinkedService.Shopify': ShopifyLinkedService,
        'LinkedService.ServiceNow': ServiceNowLinkedService,
        'LinkedService.QuickBooks': QuickBooksLinkedService,
        'LinkedService.Presto': PrestoLinkedService,
        'LinkedService.Phoenix': PhoenixLinkedService,
        'LinkedService.Paypal': PaypalLinkedService,
        'LinkedService.Marketo': MarketoLinkedService,
        'LinkedService.MariaDB': MariaDBLinkedService,
        'LinkedService.Magento': MagentoLinkedService,
        'LinkedService.Jira': JiraLinkedService,
        'LinkedService.Impala': ImpalaLinkedService,
        'LinkedService.Hubspot': HubspotLinkedService,
        'LinkedService.Hive': HiveLinkedService,
        'LinkedService.HBase': HBaseLinkedService,
        'LinkedService.Greenplum': GreenplumLinkedService,
        'LinkedService.GoogleBigQuery': GoogleBigQueryLinkedService,
        'LinkedService.GoogleAdWords': GoogleAdWordsLinkedService,
        'LinkedService.Eloqua': EloquaLinkedService,
        'LinkedService.Drill': DrillLinkedService,
        'LinkedService.Couchbase': CouchbaseLinkedService,
        'LinkedService.Concur': ConcurLinkedService,
        'LinkedService.AzurePostgreSql': AzurePostgreSqlLinkedService,
        'LinkedService.AmazonMWS': AmazonMWSLinkedService,
        'LinkedService.SapHana': SapHanaLinkedService,
        'LinkedService.SapBW': SapBWLinkedService,
        'LinkedService.Sftp': SftpServerLinkedService,
        'LinkedService.FtpServer': FtpServerLinkedService,
        'LinkedService.RestService': RestServiceLinkedService,
        'LinkedService.HttpServer': HttpLinkedService,
        'LinkedService.AzureSearch': AzureSearchLinkedService,
        'LinkedService.CustomDataSource': CustomDataSourceLinkedService,
        'LinkedService.AmazonRedshift': AmazonRedshiftLinkedService,
        'LinkedService.AmazonS3': AmazonS3LinkedService,
        'LinkedService.SapEcc': SapEccLinkedService,
        'LinkedService.SapCloudForCustomer': SapCloudForCustomerLinkedService,
        'LinkedService.Salesforce': SalesforceLinkedService,
        'LinkedService.AzureDataLakeStore': AzureDataLakeStoreLinkedService,
        'LinkedService.MongoDb': MongoDbLinkedService,
        'LinkedService.Cassandra': CassandraLinkedService,
        'WebLinkedServiceTypeProperties.ClientCertificate': WebClientCertificateAuthentication,
        'WebLinkedServiceTypeProperties.Basic': WebBasicAuthentication,
        'WebLinkedServiceTypeProperties.Anonymous': WebAnonymousAuthentication,
        'WebLinkedServiceTypeProperties': WebLinkedServiceTypeProperties,
        'LinkedService.Web': WebLinkedService,
        'LinkedService.OData': ODataLinkedService,
        'LinkedService.Hdfs': HdfsLinkedService,
        'LinkedService.Odbc': OdbcLinkedService,
        'LinkedService.AzureML': AzureMLLinkedService,
        'LinkedService.Teradata': TeradataLinkedService,
        'LinkedService.Db2': Db2LinkedService,
        'LinkedService.Sybase': SybaseLinkedService,
        'LinkedService.PostgreSql': PostgreSqlLinkedService,
        'LinkedService.MySql': MySqlLinkedService,
        'LinkedService.AzureMySql': AzureMySqlLinkedService,
        'LinkedService.OracleServiceCloud': OracleServiceCloudLinkedService,
        'LinkedService.Oracle': OracleLinkedService,
        'LinkedService.FileServer': FileServerLinkedService,
        'LinkedService.HDInsight': HDInsightLinkedService,
        'LinkedService.DynamicsAX': DynamicsAXLinkedService,
        'LinkedService.Dynamics': DynamicsLinkedService,
        'LinkedService.CosmosDb': CosmosDbLinkedService,
        'LinkedService.AzureKeyVault': AzureKeyVaultLinkedService,
        'LinkedService.AzureBatch': AzureBatchLinkedService,
        'LinkedService.AzureSqlDatabase': AzureSqlDatabaseLinkedService,
        'LinkedService.SqlServer': SqlServerLinkedService,
        'LinkedService.AzureSqlDW': AzureSqlDWLinkedService,
        'LinkedService.AzureTableStorage': AzureTableStorageLinkedService,
        'LinkedService.AzureBlobStorage': AzureBlobStorageLinkedService,
        'LinkedService.AzureStorage': AzureStorageLinkedService,
        'Dataset.ResponsysObject': ResponsysObjectDataset,
        'Dataset.SalesforceMarketingCloudObject': SalesforceMarketingCloudObjectDataset,
        'Dataset.VerticaTable': VerticaTableDataset,
        'Dataset.NetezzaTable': NetezzaTableDataset,
        'Dataset.ZohoObject': ZohoObjectDataset,
        'Dataset.XeroObject': XeroObjectDataset,
        'Dataset.SquareObject': SquareObjectDataset,
        'Dataset.SparkObject': SparkObjectDataset,
        'Dataset.ShopifyObject': ShopifyObjectDataset,
        'Dataset.ServiceNowObject': ServiceNowObjectDataset,
        'Dataset.QuickBooksObject': QuickBooksObjectDataset,
        'Dataset.PrestoObject': PrestoObjectDataset,
        'Dataset.PhoenixObject': PhoenixObjectDataset,
        'Dataset.PaypalObject': PaypalObjectDataset,
        'Dataset.MarketoObject': MarketoObjectDataset,
        'Dataset.MariaDBTable': MariaDBTableDataset,
        'Dataset.MagentoObject': MagentoObjectDataset,
        'Dataset.JiraObject': JiraObjectDataset,
        'Dataset.ImpalaObject': ImpalaObjectDataset,
        'Dataset.HubspotObject': HubspotObjectDataset,
        'Dataset.HiveObject': HiveObjectDataset,
        'Dataset.HBaseObject': HBaseObjectDataset,
        'Dataset.GreenplumTable': GreenplumTableDataset,
        'Dataset.GoogleBigQueryObject': GoogleBigQueryObjectDataset,
        'Dataset.GoogleAdWordsObject': GoogleAdWordsObjectDataset,
        'Dataset.EloquaObject': EloquaObjectDataset,
        'Dataset.DrillTable': DrillTableDataset,
        'Dataset.CouchbaseTable': CouchbaseTableDataset,
        'Dataset.ConcurObject': ConcurObjectDataset,
        'Dataset.AzurePostgreSqlTable': AzurePostgreSqlTableDataset,
        'Dataset.AmazonMWSObject': AmazonMWSObjectDataset,
        'Dataset.RestResource': RestServiceDataset,
        'DatasetCompression.ZipDeflate': DatasetZipDeflateCompression,
        'DatasetCompression.Deflate': DatasetDeflateCompression,
        'DatasetCompression.GZip': DatasetGZipCompression,
        'DatasetCompression.BZip2': DatasetBZip2Compression,
        'DatasetCompression': DatasetCompression,
        'DatasetStorageFormat.ParquetFormat': ParquetFormat,
        'DatasetStorageFormat.OrcFormat': OrcFormat,
        'DatasetStorageFormat.AvroFormat': AvroFormat,
        'DatasetStorageFormat.JsonFormat': JsonFormat,
        'DatasetStorageFormat.TextFormat': TextFormat,
        'DatasetStorageFormat': DatasetStorageFormat,
        'Dataset.HttpFile': HttpDataset,
        'Dataset.AzureSearchIndex': AzureSearchIndexDataset,
        'Dataset.WebTable': WebTableDataset,
        'Dataset.SqlServerTable': SqlServerTableDataset,
        'Dataset.SapEccResource': SapEccResourceDataset,
        'Dataset.SapCloudForCustomerResource': SapCloudForCustomerResourceDataset,
        'Dataset.SalesforceObject': SalesforceObjectDataset,
        'Dataset.RelationalTable': RelationalTableDataset,
        'Dataset.AzureMySqlTable': AzureMySqlTableDataset,
        'Dataset.OracleServiceCloudObject': OracleServiceCloudObjectDataset,
        'Dataset.OracleTable': OracleTableDataset,
        'Dataset.ODataResource': ODataResourceDataset,
        'Dataset.MongoDbCollection': MongoDbCollectionDataset,
        'Dataset.FileShare': FileShareDataset,
        'Dataset.AzureDataLakeStoreFile': AzureDataLakeStoreDataset,
        'Dataset.DynamicsAXResource': DynamicsAXResourceDataset,
        'Dataset.DynamicsEntity': DynamicsEntityDataset,
        'Dataset.DocumentDbCollection': DocumentDbCollectionDataset,
        'Dataset.CustomDataset': CustomDataset,
        'Dataset.CassandraTable': CassandraTableDataset,
        'Dataset.AzureSqlDWTable': AzureSqlDWTableDataset,
        'Dataset.AzureSqlTable': AzureSqlTableDataset,
        'Dataset.AzureTable': AzureTableDataset,
        'Dataset.AzureBlob': AzureBlobDataset,
        'Dataset.AmazonS3Object': AmazonS3Dataset,
        'Activity.DatabricksSparkPython': DatabricksSparkPythonActivity,
        'Activity.DatabricksSparkJar': DatabricksSparkJarActivity,
        'Activity.DatabricksNotebook': DatabricksNotebookActivity,
        'Activity.DataLakeAnalyticsU-SQL': DataLakeAnalyticsUSQLActivity,
        'Activity.AzureMLUpdateResource': AzureMLUpdateResourceActivity,
        'Activity.AzureMLBatchExecution': AzureMLBatchExecutionActivity,
        'Activity.GetMetadata': GetMetadataActivity,
        'Activity.WebActivity': WebActivity,
        'CopySource.AmazonRedshiftSource': AmazonRedshiftSource,
        'CopySource.ResponsysSource': ResponsysSource,
        'CopySource.SalesforceMarketingCloudSource': SalesforceMarketingCloudSource,
        'CopySource.VerticaSource': VerticaSource,
        'CopySource.NetezzaSource': NetezzaSource,
        'CopySource.ZohoSource': ZohoSource,
        'CopySource.XeroSource': XeroSource,
        'CopySource.SquareSource': SquareSource,
        'CopySource.SparkSource': SparkSource,
        'CopySource.ShopifySource': ShopifySource,
        'CopySource.ServiceNowSource': ServiceNowSource,
        'CopySource.QuickBooksSource': QuickBooksSource,
        'CopySource.PrestoSource': PrestoSource,
        'CopySource.PhoenixSource': PhoenixSource,
        'CopySource.PaypalSource': PaypalSource,
        'CopySource.MarketoSource': MarketoSource,
        'CopySource.MariaDBSource': MariaDBSource,
        'CopySource.MagentoSource': MagentoSource,
        'CopySource.JiraSource': JiraSource,
        'CopySource.ImpalaSource': ImpalaSource,
        'CopySource.HubspotSource': HubspotSource,
        'CopySource.HiveSource': HiveSource,
        'CopySource.HBaseSource': HBaseSource,
        'CopySource.GreenplumSource': GreenplumSource,
        'CopySource.GoogleBigQuerySource': GoogleBigQuerySource,
        'CopySource.GoogleAdWordsSource': GoogleAdWordsSource,
        'CopySource.EloquaSource': EloquaSource,
        'CopySource.DrillSource': DrillSource,
        'CopySource.CouchbaseSource': CouchbaseSource,
        'CopySource.ConcurSource': ConcurSource,
        'CopySource.AzurePostgreSqlSource': AzurePostgreSqlSource,
        'CopySource.AmazonMWSSource': AmazonMWSSource,
        'CopySource.RestServiceSource': RestServiceSource,
        'CopySource.HttpSource': HttpSource,
        'CopySource.AzureDataLakeStoreSource': AzureDataLakeStoreSource,
        'CopySource.MongoDbSource': MongoDbSource,
        'CopySource.CassandraSource': CassandraSource,
        'CopySource.WebSource': WebSource,
        'CopySource.OracleServiceCloudSource': OracleServiceCloudSource,
        'CopySource.OracleSource': OracleSource,
        'CopySource.AzureMySqlSource': AzureMySqlSource,
        'CopySource.HdfsSource': HdfsSource,
        'CopySource.FileSystemSource': FileSystemSource,
        'CopySource.SqlDWSource': SqlDWSource,
        'CopySource.SqlSource': SqlSource,
        'CopySource.SapEccSource': SapEccSource,
        'CopySource.SapCloudForCustomerSource': SapCloudForCustomerSource,
        'CopySource.SalesforceSource': SalesforceSource,
        'CopySource.RelationalSource': RelationalSource,
        'CopySource.DynamicsAXSource': DynamicsAXSource,
        'CopySource.DynamicsSource': DynamicsSource,
        'CopySource.DocumentDbCollectionSource': DocumentDbCollectionSource,
        'CopySource.BlobSource': BlobSource,
        'CopySource.AzureTableSource': AzureTableSource,
        'CopySource': CopySource,
        'Activity.Lookup': LookupActivity,
        'Activity.SqlServerStoredProcedure': SqlServerStoredProcedureActivity,
        'Activity.Custom': CustomActivity,
        'Activity.ExecuteSSISPackage': ExecuteSSISPackageActivity,
        'Activity.HDInsightSpark': HDInsightSparkActivity,
        'Activity.HDInsightStreaming': HDInsightStreamingActivity,
        'Activity.HDInsightMapReduce': HDInsightMapReduceActivity,
        'Activity.HDInsightPig': HDInsightPigActivity,
        'Activity.HDInsightHive': HDInsightHiveActivity,
        'CopyTranslator.TabularTranslator': TabularTranslator,
        'CopyTranslator': CopyTranslator,
        'CopySink.SalesforceSink': SalesforceSink,
        'CopySink.DynamicsSink': DynamicsSink,
        'CopySink.OdbcSink': OdbcSink,
        'CopySink.AzureSearchIndexSink': AzureSearchIndexSink,
        'CopySink.AzureDataLakeStoreSink': AzureDataLakeStoreSink,
        'CopySink.OracleSink': OracleSink,
        'CopySink.SqlDWSink': SqlDWSink,
        'CopySink.SqlSink': SqlSink,
        'CopySink.DocumentDbCollectionSink': DocumentDbCollectionSink,
        'CopySink.FileSystemSink': FileSystemSink,
        'CopySink.BlobSink': BlobSink,
        'CopySink.AzureTableSink': AzureTableSink,
        'CopySink.AzureQueueSink': AzureQueueSink,
        'CopySink.SapCloudForCustomerSink': SapCloudForCustomerSink,
        'CopySink': CopySink,
        'Activity.Copy': CopyActivity,
        'Activity.Execution': ExecutionActivity,
        'Activity.AppendVariable': AppendVariableActivity,
        'Activity.SetVariable': SetVariableActivity,
        'Activity.Filter': FilterActivity,
        'Activity.Until': UntilActivity,
        'Activity.Wait': WaitActivity,
        'Activity.ForEach': ForEachActivity,
        'Activity.IfCondition': IfConditionActivity,
        'Activity.ExecutePipeline': ExecutePipelineActivity,
        'Activity.Container': ControlActivity,
        'IntegrationRuntimeStatus.SelfHosted': SelfHostedIntegrationRuntimeStatus,
        'IntegrationRuntimeStatus.Managed': ManagedIntegrationRuntimeStatus,
        'LinkedIntegrationRuntimeType.RBAC': LinkedIntegrationRuntimeRbacAuthorization,
        'LinkedIntegrationRuntimeType.Key': LinkedIntegrationRuntimeKeyAuthorization,
        'LinkedIntegrationRuntimeType': LinkedIntegrationRuntimeType,
        'IntegrationRuntime.SelfHosted': SelfHostedIntegrationRuntime,
        'IntegrationRuntime.Managed': ManagedIntegrationRuntime
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        Resource: Resource,
        SubResource: SubResource,
        Expression: Expression,
        SecretBase: SecretBase,
        SecureString: SecureString,
        LinkedServiceReference: LinkedServiceReference,
        AzureKeyVaultSecretReference: AzureKeyVaultSecretReference,
        FactoryIdentity: FactoryIdentity,
        FactoryRepoConfiguration: FactoryRepoConfiguration,
        Factory: Factory,
        IntegrationRuntime: IntegrationRuntime,
        IntegrationRuntimeResource: IntegrationRuntimeResource,
        IntegrationRuntimeReference: IntegrationRuntimeReference,
        IntegrationRuntimeStatus: IntegrationRuntimeStatus,
        IntegrationRuntimeStatusResponse: IntegrationRuntimeStatusResponse,
        IntegrationRuntimeStatusListResponse: IntegrationRuntimeStatusListResponse,
        UpdateIntegrationRuntimeRequest: UpdateIntegrationRuntimeRequest,
        UpdateIntegrationRuntimeNodeRequest: UpdateIntegrationRuntimeNodeRequest,
        LinkedIntegrationRuntimeRequest: LinkedIntegrationRuntimeRequest,
        CreateLinkedIntegrationRuntimeRequest: CreateLinkedIntegrationRuntimeRequest,
        ParameterSpecification: ParameterSpecification,
        LinkedService: LinkedService,
        LinkedServiceResource: LinkedServiceResource,
        DatasetFolder: DatasetFolder,
        Dataset: Dataset,
        DatasetResource: DatasetResource,
        ActivityDependency: ActivityDependency,
        UserProperty: UserProperty,
        Activity: Activity,
        VariableSpecification: VariableSpecification,
        PipelineFolder: PipelineFolder,
        PipelineResource: PipelineResource,
        Trigger: Trigger,
        TriggerResource: TriggerResource,
        CreateRunResponse: CreateRunResponse,
        FactoryVSTSConfiguration: FactoryVSTSConfiguration,
        FactoryGitHubConfiguration: FactoryGitHubConfiguration,
        FactoryRepoUpdate: FactoryRepoUpdate,
        GitHubAccessTokenRequest: GitHubAccessTokenRequest,
        GitHubAccessTokenResponse: GitHubAccessTokenResponse,
        PipelineReference: PipelineReference,
        TriggerPipelineReference: TriggerPipelineReference,
        FactoryUpdateParameters: FactoryUpdateParameters,
        DatasetReference: DatasetReference,
        RunQueryFilter: RunQueryFilter,
        RunQueryOrderBy: RunQueryOrderBy,
        RunFilterParameters: RunFilterParameters,
        PipelineRunInvokedBy: PipelineRunInvokedBy,
        PipelineRun: PipelineRun,
        PipelineRunsQueryResponse: PipelineRunsQueryResponse,
        ActivityRun: ActivityRun,
        ActivityRunsQueryResponse: ActivityRunsQueryResponse,
        TriggerRun: TriggerRun,
        TriggerRunsQueryResponse: TriggerRunsQueryResponse,
        RerunTumblingWindowTriggerActionParameters: RerunTumblingWindowTriggerActionParameters,
        RerunTumblingWindowTrigger: RerunTumblingWindowTrigger,
        RerunTriggerResource: RerunTriggerResource,
        OperationDisplay: OperationDisplay,
        OperationLogSpecification: OperationLogSpecification,
        OperationMetricAvailability: OperationMetricAvailability,
        OperationMetricDimension: OperationMetricDimension,
        OperationMetricSpecification: OperationMetricSpecification,
        OperationServiceSpecification: OperationServiceSpecification,
        Operation: Operation,
        DependencyReference: DependencyReference,
        SelfDependencyTumblingWindowTriggerReference: SelfDependencyTumblingWindowTriggerReference,
        TriggerReference: TriggerReference,
        TriggerDependencyReference: TriggerDependencyReference,
        TumblingWindowTriggerDependencyReference: TumblingWindowTriggerDependencyReference,
        RetryPolicy: RetryPolicy,
        TumblingWindowTrigger: TumblingWindowTrigger,
        MultiplePipelineTrigger: MultiplePipelineTrigger,
        BlobEventsTrigger: BlobEventsTrigger,
        BlobTrigger: BlobTrigger,
        RecurrenceScheduleOccurrence: RecurrenceScheduleOccurrence,
        RecurrenceSchedule: RecurrenceSchedule,
        ScheduleTriggerRecurrence: ScheduleTriggerRecurrence,
        ScheduleTrigger: ScheduleTrigger,
        ResponsysLinkedService: ResponsysLinkedService,
        AzureDatabricksLinkedService: AzureDatabricksLinkedService,
        AzureDataLakeAnalyticsLinkedService: AzureDataLakeAnalyticsLinkedService,
        ScriptAction: ScriptAction,
        HDInsightOnDemandLinkedService: HDInsightOnDemandLinkedService,
        SalesforceMarketingCloudLinkedService: SalesforceMarketingCloudLinkedService,
        NetezzaLinkedService: NetezzaLinkedService,
        VerticaLinkedService: VerticaLinkedService,
        ZohoLinkedService: ZohoLinkedService,
        XeroLinkedService: XeroLinkedService,
        SquareLinkedService: SquareLinkedService,
        SparkLinkedService: SparkLinkedService,
        ShopifyLinkedService: ShopifyLinkedService,
        ServiceNowLinkedService: ServiceNowLinkedService,
        QuickBooksLinkedService: QuickBooksLinkedService,
        PrestoLinkedService: PrestoLinkedService,
        PhoenixLinkedService: PhoenixLinkedService,
        PaypalLinkedService: PaypalLinkedService,
        MarketoLinkedService: MarketoLinkedService,
        MariaDBLinkedService: MariaDBLinkedService,
        MagentoLinkedService: MagentoLinkedService,
        JiraLinkedService: JiraLinkedService,
        ImpalaLinkedService: ImpalaLinkedService,
        HubspotLinkedService: HubspotLinkedService,
        HiveLinkedService: HiveLinkedService,
        HBaseLinkedService: HBaseLinkedService,
        GreenplumLinkedService: GreenplumLinkedService,
        GoogleBigQueryLinkedService: GoogleBigQueryLinkedService,
        GoogleAdWordsLinkedService: GoogleAdWordsLinkedService,
        EloquaLinkedService: EloquaLinkedService,
        DrillLinkedService: DrillLinkedService,
        CouchbaseLinkedService: CouchbaseLinkedService,
        ConcurLinkedService: ConcurLinkedService,
        AzurePostgreSqlLinkedService: AzurePostgreSqlLinkedService,
        AmazonMWSLinkedService: AmazonMWSLinkedService,
        SapHanaLinkedService: SapHanaLinkedService,
        SapBWLinkedService: SapBWLinkedService,
        SftpServerLinkedService: SftpServerLinkedService,
        FtpServerLinkedService: FtpServerLinkedService,
        RestServiceLinkedService: RestServiceLinkedService,
        HttpLinkedService: HttpLinkedService,
        AzureSearchLinkedService: AzureSearchLinkedService,
        CustomDataSourceLinkedService: CustomDataSourceLinkedService,
        AmazonRedshiftLinkedService: AmazonRedshiftLinkedService,
        AmazonS3LinkedService: AmazonS3LinkedService,
        SapEccLinkedService: SapEccLinkedService,
        SapCloudForCustomerLinkedService: SapCloudForCustomerLinkedService,
        SalesforceLinkedService: SalesforceLinkedService,
        AzureDataLakeStoreLinkedService: AzureDataLakeStoreLinkedService,
        MongoDbLinkedService: MongoDbLinkedService,
        CassandraLinkedService: CassandraLinkedService,
        WebLinkedServiceTypeProperties: WebLinkedServiceTypeProperties,
        WebClientCertificateAuthentication: WebClientCertificateAuthentication,
        WebBasicAuthentication: WebBasicAuthentication,
        WebAnonymousAuthentication: WebAnonymousAuthentication,
        WebLinkedService: WebLinkedService,
        ODataLinkedService: ODataLinkedService,
        HdfsLinkedService: HdfsLinkedService,
        OdbcLinkedService: OdbcLinkedService,
        AzureMLLinkedService: AzureMLLinkedService,
        TeradataLinkedService: TeradataLinkedService,
        Db2LinkedService: Db2LinkedService,
        SybaseLinkedService: SybaseLinkedService,
        PostgreSqlLinkedService: PostgreSqlLinkedService,
        MySqlLinkedService: MySqlLinkedService,
        AzureMySqlLinkedService: AzureMySqlLinkedService,
        OracleServiceCloudLinkedService: OracleServiceCloudLinkedService,
        OracleLinkedService: OracleLinkedService,
        FileServerLinkedService: FileServerLinkedService,
        HDInsightLinkedService: HDInsightLinkedService,
        DynamicsAXLinkedService: DynamicsAXLinkedService,
        DynamicsLinkedService: DynamicsLinkedService,
        CosmosDbLinkedService: CosmosDbLinkedService,
        AzureKeyVaultLinkedService: AzureKeyVaultLinkedService,
        AzureBatchLinkedService: AzureBatchLinkedService,
        AzureSqlDatabaseLinkedService: AzureSqlDatabaseLinkedService,
        SqlServerLinkedService: SqlServerLinkedService,
        AzureSqlDWLinkedService: AzureSqlDWLinkedService,
        AzureTableStorageLinkedService: AzureTableStorageLinkedService,
        AzureBlobStorageLinkedService: AzureBlobStorageLinkedService,
        AzureStorageLinkedService: AzureStorageLinkedService,
        ResponsysObjectDataset: ResponsysObjectDataset,
        SalesforceMarketingCloudObjectDataset: SalesforceMarketingCloudObjectDataset,
        VerticaTableDataset: VerticaTableDataset,
        NetezzaTableDataset: NetezzaTableDataset,
        ZohoObjectDataset: ZohoObjectDataset,
        XeroObjectDataset: XeroObjectDataset,
        SquareObjectDataset: SquareObjectDataset,
        SparkObjectDataset: SparkObjectDataset,
        ShopifyObjectDataset: ShopifyObjectDataset,
        ServiceNowObjectDataset: ServiceNowObjectDataset,
        QuickBooksObjectDataset: QuickBooksObjectDataset,
        PrestoObjectDataset: PrestoObjectDataset,
        PhoenixObjectDataset: PhoenixObjectDataset,
        PaypalObjectDataset: PaypalObjectDataset,
        MarketoObjectDataset: MarketoObjectDataset,
        MariaDBTableDataset: MariaDBTableDataset,
        MagentoObjectDataset: MagentoObjectDataset,
        JiraObjectDataset: JiraObjectDataset,
        ImpalaObjectDataset: ImpalaObjectDataset,
        HubspotObjectDataset: HubspotObjectDataset,
        HiveObjectDataset: HiveObjectDataset,
        HBaseObjectDataset: HBaseObjectDataset,
        GreenplumTableDataset: GreenplumTableDataset,
        GoogleBigQueryObjectDataset: GoogleBigQueryObjectDataset,
        GoogleAdWordsObjectDataset: GoogleAdWordsObjectDataset,
        EloquaObjectDataset: EloquaObjectDataset,
        DrillTableDataset: DrillTableDataset,
        CouchbaseTableDataset: CouchbaseTableDataset,
        ConcurObjectDataset: ConcurObjectDataset,
        AzurePostgreSqlTableDataset: AzurePostgreSqlTableDataset,
        AmazonMWSObjectDataset: AmazonMWSObjectDataset,
        RestServiceDataset: RestServiceDataset,
        DatasetCompression: DatasetCompression,
        DatasetZipDeflateCompression: DatasetZipDeflateCompression,
        DatasetDeflateCompression: DatasetDeflateCompression,
        DatasetGZipCompression: DatasetGZipCompression,
        DatasetBZip2Compression: DatasetBZip2Compression,
        DatasetStorageFormat: DatasetStorageFormat,
        ParquetFormat: ParquetFormat,
        OrcFormat: OrcFormat,
        AvroFormat: AvroFormat,
        JsonFormat: JsonFormat,
        TextFormat: TextFormat,
        HttpDataset: HttpDataset,
        AzureSearchIndexDataset: AzureSearchIndexDataset,
        WebTableDataset: WebTableDataset,
        SqlServerTableDataset: SqlServerTableDataset,
        SapEccResourceDataset: SapEccResourceDataset,
        SapCloudForCustomerResourceDataset: SapCloudForCustomerResourceDataset,
        SalesforceObjectDataset: SalesforceObjectDataset,
        RelationalTableDataset: RelationalTableDataset,
        AzureMySqlTableDataset: AzureMySqlTableDataset,
        OracleServiceCloudObjectDataset: OracleServiceCloudObjectDataset,
        OracleTableDataset: OracleTableDataset,
        ODataResourceDataset: ODataResourceDataset,
        MongoDbCollectionDataset: MongoDbCollectionDataset,
        FileShareDataset: FileShareDataset,
        AzureDataLakeStoreDataset: AzureDataLakeStoreDataset,
        DynamicsAXResourceDataset: DynamicsAXResourceDataset,
        DynamicsEntityDataset: DynamicsEntityDataset,
        DocumentDbCollectionDataset: DocumentDbCollectionDataset,
        CustomDataset: CustomDataset,
        CassandraTableDataset: CassandraTableDataset,
        AzureSqlDWTableDataset: AzureSqlDWTableDataset,
        AzureSqlTableDataset: AzureSqlTableDataset,
        AzureTableDataset: AzureTableDataset,
        AzureBlobDataset: AzureBlobDataset,
        AmazonS3Dataset: AmazonS3Dataset,
        ActivityPolicy: ActivityPolicy,
        ExecutionActivity: ExecutionActivity,
        DatabricksSparkPythonActivity: DatabricksSparkPythonActivity,
        DatabricksSparkJarActivity: DatabricksSparkJarActivity,
        DatabricksNotebookActivity: DatabricksNotebookActivity,
        DataLakeAnalyticsUSQLActivity: DataLakeAnalyticsUSQLActivity,
        AzureMLUpdateResourceActivity: AzureMLUpdateResourceActivity,
        AzureMLWebServiceFile: AzureMLWebServiceFile,
        AzureMLBatchExecutionActivity: AzureMLBatchExecutionActivity,
        GetMetadataActivity: GetMetadataActivity,
        WebActivityAuthentication: WebActivityAuthentication,
        WebActivity: WebActivity,
        RedshiftUnloadSettings: RedshiftUnloadSettings,
        CopySource: CopySource,
        AmazonRedshiftSource: AmazonRedshiftSource,
        ResponsysSource: ResponsysSource,
        SalesforceMarketingCloudSource: SalesforceMarketingCloudSource,
        VerticaSource: VerticaSource,
        NetezzaSource: NetezzaSource,
        ZohoSource: ZohoSource,
        XeroSource: XeroSource,
        SquareSource: SquareSource,
        SparkSource: SparkSource,
        ShopifySource: ShopifySource,
        ServiceNowSource: ServiceNowSource,
        QuickBooksSource: QuickBooksSource,
        PrestoSource: PrestoSource,
        PhoenixSource: PhoenixSource,
        PaypalSource: PaypalSource,
        MarketoSource: MarketoSource,
        MariaDBSource: MariaDBSource,
        MagentoSource: MagentoSource,
        JiraSource: JiraSource,
        ImpalaSource: ImpalaSource,
        HubspotSource: HubspotSource,
        HiveSource: HiveSource,
        HBaseSource: HBaseSource,
        GreenplumSource: GreenplumSource,
        GoogleBigQuerySource: GoogleBigQuerySource,
        GoogleAdWordsSource: GoogleAdWordsSource,
        EloquaSource: EloquaSource,
        DrillSource: DrillSource,
        CouchbaseSource: CouchbaseSource,
        ConcurSource: ConcurSource,
        AzurePostgreSqlSource: AzurePostgreSqlSource,
        AmazonMWSSource: AmazonMWSSource,
        RestServiceSource: RestServiceSource,
        HttpSource: HttpSource,
        AzureDataLakeStoreSource: AzureDataLakeStoreSource,
        MongoDbSource: MongoDbSource,
        CassandraSource: CassandraSource,
        WebSource: WebSource,
        OracleServiceCloudSource: OracleServiceCloudSource,
        OracleSource: OracleSource,
        AzureMySqlSource: AzureMySqlSource,
        DistcpSettings: DistcpSettings,
        HdfsSource: HdfsSource,
        FileSystemSource: FileSystemSource,
        SqlDWSource: SqlDWSource,
        StoredProcedureParameter: StoredProcedureParameter,
        SqlSource: SqlSource,
        SapEccSource: SapEccSource,
        SapCloudForCustomerSource: SapCloudForCustomerSource,
        SalesforceSource: SalesforceSource,
        RelationalSource: RelationalSource,
        DynamicsAXSource: DynamicsAXSource,
        DynamicsSource: DynamicsSource,
        DocumentDbCollectionSource: DocumentDbCollectionSource,
        BlobSource: BlobSource,
        AzureTableSource: AzureTableSource,
        LookupActivity: LookupActivity,
        SqlServerStoredProcedureActivity: SqlServerStoredProcedureActivity,
        CustomActivityReferenceObject: CustomActivityReferenceObject,
        CustomActivity: CustomActivity,
        SSISPropertyOverride: SSISPropertyOverride,
        SSISExecutionParameter: SSISExecutionParameter,
        SSISPackageLocation: SSISPackageLocation,
        ExecuteSSISPackageActivity: ExecuteSSISPackageActivity,
        HDInsightSparkActivity: HDInsightSparkActivity,
        HDInsightStreamingActivity: HDInsightStreamingActivity,
        HDInsightMapReduceActivity: HDInsightMapReduceActivity,
        HDInsightPigActivity: HDInsightPigActivity,
        HDInsightHiveActivity: HDInsightHiveActivity,
        RedirectIncompatibleRowSettings: RedirectIncompatibleRowSettings,
        StagingSettings: StagingSettings,
        CopyTranslator: CopyTranslator,
        TabularTranslator: TabularTranslator,
        CopySink: CopySink,
        SalesforceSink: SalesforceSink,
        DynamicsSink: DynamicsSink,
        OdbcSink: OdbcSink,
        AzureSearchIndexSink: AzureSearchIndexSink,
        AzureDataLakeStoreSink: AzureDataLakeStoreSink,
        OracleSink: OracleSink,
        PolybaseSettings: PolybaseSettings,
        SqlDWSink: SqlDWSink,
        SqlSink: SqlSink,
        DocumentDbCollectionSink: DocumentDbCollectionSink,
        FileSystemSink: FileSystemSink,
        BlobSink: BlobSink,
        AzureTableSink: AzureTableSink,
        AzureQueueSink: AzureQueueSink,
        SapCloudForCustomerSink: SapCloudForCustomerSink,
        CopyActivity: CopyActivity,
        ControlActivity: ControlActivity,
        AppendVariableActivity: AppendVariableActivity,
        SetVariableActivity: SetVariableActivity,
        FilterActivity: FilterActivity,
        UntilActivity: UntilActivity,
        WaitActivity: WaitActivity,
        ForEachActivity: ForEachActivity,
        IfConditionActivity: IfConditionActivity,
        ExecutePipelineActivity: ExecutePipelineActivity,
        LinkedIntegrationRuntime: LinkedIntegrationRuntime,
        SelfHostedIntegrationRuntimeNode: SelfHostedIntegrationRuntimeNode,
        SelfHostedIntegrationRuntimeStatus: SelfHostedIntegrationRuntimeStatus,
        ManagedIntegrationRuntimeOperationResult: ManagedIntegrationRuntimeOperationResult,
        ManagedIntegrationRuntimeError: ManagedIntegrationRuntimeError,
        ManagedIntegrationRuntimeNode: ManagedIntegrationRuntimeNode,
        ManagedIntegrationRuntimeStatus: ManagedIntegrationRuntimeStatus,
        LinkedIntegrationRuntimeType: LinkedIntegrationRuntimeType,
        LinkedIntegrationRuntimeRbacAuthorization: LinkedIntegrationRuntimeRbacAuthorization,
        LinkedIntegrationRuntimeKeyAuthorization: LinkedIntegrationRuntimeKeyAuthorization,
        SelfHostedIntegrationRuntime: SelfHostedIntegrationRuntime,
        IntegrationRuntimeCustomSetupScriptProperties: IntegrationRuntimeCustomSetupScriptProperties,
        IntegrationRuntimeSsisCatalogInfo: IntegrationRuntimeSsisCatalogInfo,
        IntegrationRuntimeSsisProperties: IntegrationRuntimeSsisProperties,
        IntegrationRuntimeVNetProperties: IntegrationRuntimeVNetProperties,
        IntegrationRuntimeComputeProperties: IntegrationRuntimeComputeProperties,
        ManagedIntegrationRuntime: ManagedIntegrationRuntime,
        IntegrationRuntimeNodeIpAddress: IntegrationRuntimeNodeIpAddress,
        IntegrationRuntimeNodeMonitoringData: IntegrationRuntimeNodeMonitoringData,
        IntegrationRuntimeMonitoringData: IntegrationRuntimeMonitoringData,
        IntegrationRuntimeAuthKeys: IntegrationRuntimeAuthKeys,
        IntegrationRuntimeRegenerateKeyParameters: IntegrationRuntimeRegenerateKeyParameters,
        IntegrationRuntimeConnectionInfo: IntegrationRuntimeConnectionInfo,
        OperationListResponse: OperationListResponse,
        FactoryListResponse: FactoryListResponse,
        IntegrationRuntimeListResponse: IntegrationRuntimeListResponse,
        LinkedServiceListResponse: LinkedServiceListResponse,
        DatasetListResponse: DatasetListResponse,
        PipelineListResponse: PipelineListResponse,
        TriggerListResponse: TriggerListResponse,
        RerunTriggerListResponse: RerunTriggerListResponse,
        discriminators: discriminators
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        OperationListResponse: OperationListResponse,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        OperationServiceSpecification: OperationServiceSpecification,
        OperationLogSpecification: OperationLogSpecification,
        OperationMetricSpecification: OperationMetricSpecification,
        OperationMetricAvailability: OperationMetricAvailability,
        OperationMetricDimension: OperationMetricDimension,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var datasetName = {
        parameterPath: "datasetName",
        mapper: {
            required: true,
            serializedName: "datasetName",
            constraints: {
                MaxLength: 260,
                MinLength: 1,
                Pattern: /^[A-Za-z0-9_][^<>*#.%&:\\+?\/]*$/
            },
            type: {
                name: "String"
            }
        }
    };
    var factoryName = {
        parameterPath: "factoryName",
        mapper: {
            required: true,
            serializedName: "factoryName",
            constraints: {
                MaxLength: 63,
                MinLength: 3,
                Pattern: /^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$/
            },
            type: {
                name: "String"
            }
        }
    };
    var ifMatch = {
        parameterPath: [
            "options",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifNoneMatch = {
        parameterPath: [
            "options",
            "ifNoneMatch"
        ],
        mapper: {
            serializedName: "If-None-Match",
            type: {
                name: "String"
            }
        }
    };
    var integrationRuntimeName = {
        parameterPath: "integrationRuntimeName",
        mapper: {
            required: true,
            serializedName: "integrationRuntimeName",
            constraints: {
                MaxLength: 63,
                MinLength: 3,
                Pattern: /^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$/
            },
            type: {
                name: "String"
            }
        }
    };
    var isRecursive = {
        parameterPath: [
            "options",
            "isRecursive"
        ],
        mapper: {
            serializedName: "isRecursive",
            type: {
                name: "Boolean"
            }
        }
    };
    var linkedServiceName = {
        parameterPath: "linkedServiceName",
        mapper: {
            required: true,
            serializedName: "linkedServiceName",
            constraints: {
                MaxLength: 260,
                MinLength: 1,
                Pattern: /^[A-Za-z0-9_][^<>*#.%&:\\+?\/]*$/
            },
            type: {
                name: "String"
            }
        }
    };
    var locationId = {
        parameterPath: "locationId",
        mapper: {
            required: true,
            serializedName: "locationId",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var nodeName = {
        parameterPath: "nodeName",
        mapper: {
            required: true,
            serializedName: "nodeName",
            constraints: {
                MaxLength: 150,
                MinLength: 1,
                Pattern: /^[a-z0-9A-Z][a-z0-9A-Z_-]{0,149}$/
            },
            type: {
                name: "String"
            }
        }
    };
    var pipelineName = {
        parameterPath: "pipelineName",
        mapper: {
            required: true,
            serializedName: "pipelineName",
            constraints: {
                MaxLength: 260,
                MinLength: 1,
                Pattern: /^[A-Za-z0-9_][^<>*#.%&:\\+?\/]*$/
            },
            type: {
                name: "String"
            }
        }
    };
    var referencePipelineRunId = {
        parameterPath: [
            "options",
            "referencePipelineRunId"
        ],
        mapper: {
            serializedName: "referencePipelineRunId",
            type: {
                name: "String"
            }
        }
    };
    var rerunTriggerName = {
        parameterPath: "rerunTriggerName",
        mapper: {
            required: true,
            serializedName: "rerunTriggerName",
            constraints: {
                MaxLength: 260,
                MinLength: 1,
                Pattern: /^[A-Za-z0-9_][^<>*#.%&:\\+?\/]*$/
            },
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            constraints: {
                MaxLength: 90,
                MinLength: 1,
                Pattern: /^[-\w\._\(\)]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var runId = {
        parameterPath: "runId",
        mapper: {
            required: true,
            serializedName: "runId",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var triggerName = {
        parameterPath: "triggerName",
        mapper: {
            required: true,
            serializedName: "triggerName",
            constraints: {
                MaxLength: 260,
                MinLength: 1,
                Pattern: /^[A-Za-z0-9_][^<>*#.%&:\\+?\/]*$/
            },
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {DataFactoryManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.DataFactory/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        FactoryListResponse: FactoryListResponse,
        Factory: Factory,
        Resource: Resource,
        BaseResource: BaseResource,
        FactoryIdentity: FactoryIdentity,
        FactoryRepoConfiguration: FactoryRepoConfiguration,
        CloudError: CloudError,
        FactoryRepoUpdate: FactoryRepoUpdate,
        FactoryUpdateParameters: FactoryUpdateParameters,
        GitHubAccessTokenRequest: GitHubAccessTokenRequest,
        GitHubAccessTokenResponse: GitHubAccessTokenResponse,
        SubResource: SubResource,
        IntegrationRuntimeResource: IntegrationRuntimeResource,
        IntegrationRuntime: IntegrationRuntime,
        LinkedServiceResource: LinkedServiceResource,
        LinkedService: LinkedService,
        IntegrationRuntimeReference: IntegrationRuntimeReference,
        ParameterSpecification: ParameterSpecification,
        DatasetResource: DatasetResource,
        Dataset: Dataset,
        LinkedServiceReference: LinkedServiceReference,
        DatasetFolder: DatasetFolder,
        PipelineResource: PipelineResource,
        Activity: Activity,
        ActivityDependency: ActivityDependency,
        UserProperty: UserProperty,
        VariableSpecification: VariableSpecification,
        PipelineFolder: PipelineFolder,
        TriggerResource: TriggerResource,
        Trigger: Trigger,
        FactoryVSTSConfiguration: FactoryVSTSConfiguration,
        FactoryGitHubConfiguration: FactoryGitHubConfiguration,
        RerunTumblingWindowTrigger: RerunTumblingWindowTrigger,
        RerunTriggerResource: RerunTriggerResource,
        TumblingWindowTrigger: TumblingWindowTrigger,
        TriggerPipelineReference: TriggerPipelineReference,
        PipelineReference: PipelineReference,
        RetryPolicy: RetryPolicy,
        DependencyReference: DependencyReference,
        MultiplePipelineTrigger: MultiplePipelineTrigger,
        ResponsysLinkedService: ResponsysLinkedService,
        SecretBase: SecretBase,
        AzureDatabricksLinkedService: AzureDatabricksLinkedService,
        AzureDataLakeAnalyticsLinkedService: AzureDataLakeAnalyticsLinkedService,
        HDInsightOnDemandLinkedService: HDInsightOnDemandLinkedService,
        ScriptAction: ScriptAction,
        SalesforceMarketingCloudLinkedService: SalesforceMarketingCloudLinkedService,
        NetezzaLinkedService: NetezzaLinkedService,
        VerticaLinkedService: VerticaLinkedService,
        ZohoLinkedService: ZohoLinkedService,
        XeroLinkedService: XeroLinkedService,
        SquareLinkedService: SquareLinkedService,
        SparkLinkedService: SparkLinkedService,
        ShopifyLinkedService: ShopifyLinkedService,
        ServiceNowLinkedService: ServiceNowLinkedService,
        QuickBooksLinkedService: QuickBooksLinkedService,
        PrestoLinkedService: PrestoLinkedService,
        PhoenixLinkedService: PhoenixLinkedService,
        PaypalLinkedService: PaypalLinkedService,
        MarketoLinkedService: MarketoLinkedService,
        MariaDBLinkedService: MariaDBLinkedService,
        MagentoLinkedService: MagentoLinkedService,
        JiraLinkedService: JiraLinkedService,
        ImpalaLinkedService: ImpalaLinkedService,
        HubspotLinkedService: HubspotLinkedService,
        HiveLinkedService: HiveLinkedService,
        HBaseLinkedService: HBaseLinkedService,
        GreenplumLinkedService: GreenplumLinkedService,
        GoogleBigQueryLinkedService: GoogleBigQueryLinkedService,
        GoogleAdWordsLinkedService: GoogleAdWordsLinkedService,
        EloquaLinkedService: EloquaLinkedService,
        DrillLinkedService: DrillLinkedService,
        CouchbaseLinkedService: CouchbaseLinkedService,
        ConcurLinkedService: ConcurLinkedService,
        AzurePostgreSqlLinkedService: AzurePostgreSqlLinkedService,
        AmazonMWSLinkedService: AmazonMWSLinkedService,
        SapHanaLinkedService: SapHanaLinkedService,
        SapBWLinkedService: SapBWLinkedService,
        SftpServerLinkedService: SftpServerLinkedService,
        FtpServerLinkedService: FtpServerLinkedService,
        RestServiceLinkedService: RestServiceLinkedService,
        HttpLinkedService: HttpLinkedService,
        AzureSearchLinkedService: AzureSearchLinkedService,
        CustomDataSourceLinkedService: CustomDataSourceLinkedService,
        AmazonRedshiftLinkedService: AmazonRedshiftLinkedService,
        AmazonS3LinkedService: AmazonS3LinkedService,
        SapEccLinkedService: SapEccLinkedService,
        SapCloudForCustomerLinkedService: SapCloudForCustomerLinkedService,
        SalesforceLinkedService: SalesforceLinkedService,
        AzureDataLakeStoreLinkedService: AzureDataLakeStoreLinkedService,
        MongoDbLinkedService: MongoDbLinkedService,
        CassandraLinkedService: CassandraLinkedService,
        WebLinkedService: WebLinkedService,
        WebLinkedServiceTypeProperties: WebLinkedServiceTypeProperties,
        ODataLinkedService: ODataLinkedService,
        HdfsLinkedService: HdfsLinkedService,
        OdbcLinkedService: OdbcLinkedService,
        AzureMLLinkedService: AzureMLLinkedService,
        TeradataLinkedService: TeradataLinkedService,
        Db2LinkedService: Db2LinkedService,
        SybaseLinkedService: SybaseLinkedService,
        PostgreSqlLinkedService: PostgreSqlLinkedService,
        MySqlLinkedService: MySqlLinkedService,
        AzureMySqlLinkedService: AzureMySqlLinkedService,
        OracleServiceCloudLinkedService: OracleServiceCloudLinkedService,
        OracleLinkedService: OracleLinkedService,
        FileServerLinkedService: FileServerLinkedService,
        HDInsightLinkedService: HDInsightLinkedService,
        DynamicsAXLinkedService: DynamicsAXLinkedService,
        DynamicsLinkedService: DynamicsLinkedService,
        CosmosDbLinkedService: CosmosDbLinkedService,
        AzureKeyVaultLinkedService: AzureKeyVaultLinkedService,
        AzureBatchLinkedService: AzureBatchLinkedService,
        AzureSqlDatabaseLinkedService: AzureSqlDatabaseLinkedService,
        SqlServerLinkedService: SqlServerLinkedService,
        AzureSqlDWLinkedService: AzureSqlDWLinkedService,
        AzureTableStorageLinkedService: AzureTableStorageLinkedService,
        AzureBlobStorageLinkedService: AzureBlobStorageLinkedService,
        AzureStorageLinkedService: AzureStorageLinkedService,
        ResponsysObjectDataset: ResponsysObjectDataset,
        SalesforceMarketingCloudObjectDataset: SalesforceMarketingCloudObjectDataset,
        VerticaTableDataset: VerticaTableDataset,
        NetezzaTableDataset: NetezzaTableDataset,
        ZohoObjectDataset: ZohoObjectDataset,
        XeroObjectDataset: XeroObjectDataset,
        SquareObjectDataset: SquareObjectDataset,
        SparkObjectDataset: SparkObjectDataset,
        ShopifyObjectDataset: ShopifyObjectDataset,
        ServiceNowObjectDataset: ServiceNowObjectDataset,
        QuickBooksObjectDataset: QuickBooksObjectDataset,
        PrestoObjectDataset: PrestoObjectDataset,
        PhoenixObjectDataset: PhoenixObjectDataset,
        PaypalObjectDataset: PaypalObjectDataset,
        MarketoObjectDataset: MarketoObjectDataset,
        MariaDBTableDataset: MariaDBTableDataset,
        MagentoObjectDataset: MagentoObjectDataset,
        JiraObjectDataset: JiraObjectDataset,
        ImpalaObjectDataset: ImpalaObjectDataset,
        HubspotObjectDataset: HubspotObjectDataset,
        HiveObjectDataset: HiveObjectDataset,
        HBaseObjectDataset: HBaseObjectDataset,
        GreenplumTableDataset: GreenplumTableDataset,
        GoogleBigQueryObjectDataset: GoogleBigQueryObjectDataset,
        GoogleAdWordsObjectDataset: GoogleAdWordsObjectDataset,
        EloquaObjectDataset: EloquaObjectDataset,
        DrillTableDataset: DrillTableDataset,
        CouchbaseTableDataset: CouchbaseTableDataset,
        ConcurObjectDataset: ConcurObjectDataset,
        AzurePostgreSqlTableDataset: AzurePostgreSqlTableDataset,
        AmazonMWSObjectDataset: AmazonMWSObjectDataset,
        RestServiceDataset: RestServiceDataset,
        HttpDataset: HttpDataset,
        DatasetStorageFormat: DatasetStorageFormat,
        DatasetCompression: DatasetCompression,
        AzureSearchIndexDataset: AzureSearchIndexDataset,
        WebTableDataset: WebTableDataset,
        SqlServerTableDataset: SqlServerTableDataset,
        SapEccResourceDataset: SapEccResourceDataset,
        SapCloudForCustomerResourceDataset: SapCloudForCustomerResourceDataset,
        SalesforceObjectDataset: SalesforceObjectDataset,
        RelationalTableDataset: RelationalTableDataset,
        AzureMySqlTableDataset: AzureMySqlTableDataset,
        OracleServiceCloudObjectDataset: OracleServiceCloudObjectDataset,
        OracleTableDataset: OracleTableDataset,
        ODataResourceDataset: ODataResourceDataset,
        MongoDbCollectionDataset: MongoDbCollectionDataset,
        FileShareDataset: FileShareDataset,
        AzureDataLakeStoreDataset: AzureDataLakeStoreDataset,
        DynamicsAXResourceDataset: DynamicsAXResourceDataset,
        DynamicsEntityDataset: DynamicsEntityDataset,
        DocumentDbCollectionDataset: DocumentDbCollectionDataset,
        CustomDataset: CustomDataset,
        CassandraTableDataset: CassandraTableDataset,
        AzureSqlDWTableDataset: AzureSqlDWTableDataset,
        AzureSqlTableDataset: AzureSqlTableDataset,
        AzureTableDataset: AzureTableDataset,
        AzureBlobDataset: AzureBlobDataset,
        AmazonS3Dataset: AmazonS3Dataset,
        ExecutionActivity: ExecutionActivity,
        ActivityPolicy: ActivityPolicy,
        ControlActivity: ControlActivity,
        SelfHostedIntegrationRuntime: SelfHostedIntegrationRuntime,
        LinkedIntegrationRuntimeType: LinkedIntegrationRuntimeType,
        ManagedIntegrationRuntime: ManagedIntegrationRuntime,
        IntegrationRuntimeComputeProperties: IntegrationRuntimeComputeProperties,
        IntegrationRuntimeVNetProperties: IntegrationRuntimeVNetProperties,
        IntegrationRuntimeSsisProperties: IntegrationRuntimeSsisProperties,
        IntegrationRuntimeSsisCatalogInfo: IntegrationRuntimeSsisCatalogInfo,
        SecureString: SecureString,
        IntegrationRuntimeCustomSetupScriptProperties: IntegrationRuntimeCustomSetupScriptProperties,
        AzureKeyVaultSecretReference: AzureKeyVaultSecretReference,
        SelfDependencyTumblingWindowTriggerReference: SelfDependencyTumblingWindowTriggerReference,
        TriggerDependencyReference: TriggerDependencyReference,
        TriggerReference: TriggerReference,
        BlobEventsTrigger: BlobEventsTrigger,
        BlobTrigger: BlobTrigger,
        ScheduleTrigger: ScheduleTrigger,
        ScheduleTriggerRecurrence: ScheduleTriggerRecurrence,
        RecurrenceSchedule: RecurrenceSchedule,
        RecurrenceScheduleOccurrence: RecurrenceScheduleOccurrence,
        WebClientCertificateAuthentication: WebClientCertificateAuthentication,
        WebBasicAuthentication: WebBasicAuthentication,
        WebAnonymousAuthentication: WebAnonymousAuthentication,
        DatasetZipDeflateCompression: DatasetZipDeflateCompression,
        DatasetDeflateCompression: DatasetDeflateCompression,
        DatasetGZipCompression: DatasetGZipCompression,
        DatasetBZip2Compression: DatasetBZip2Compression,
        ParquetFormat: ParquetFormat,
        OrcFormat: OrcFormat,
        AvroFormat: AvroFormat,
        JsonFormat: JsonFormat,
        TextFormat: TextFormat,
        DatabricksSparkPythonActivity: DatabricksSparkPythonActivity,
        DatabricksSparkJarActivity: DatabricksSparkJarActivity,
        DatabricksNotebookActivity: DatabricksNotebookActivity,
        DataLakeAnalyticsUSQLActivity: DataLakeAnalyticsUSQLActivity,
        AzureMLUpdateResourceActivity: AzureMLUpdateResourceActivity,
        AzureMLBatchExecutionActivity: AzureMLBatchExecutionActivity,
        AzureMLWebServiceFile: AzureMLWebServiceFile,
        GetMetadataActivity: GetMetadataActivity,
        DatasetReference: DatasetReference,
        WebActivity: WebActivity,
        WebActivityAuthentication: WebActivityAuthentication,
        LookupActivity: LookupActivity,
        CopySource: CopySource,
        SqlServerStoredProcedureActivity: SqlServerStoredProcedureActivity,
        StoredProcedureParameter: StoredProcedureParameter,
        CustomActivity: CustomActivity,
        CustomActivityReferenceObject: CustomActivityReferenceObject,
        ExecuteSSISPackageActivity: ExecuteSSISPackageActivity,
        SSISPackageLocation: SSISPackageLocation,
        SSISExecutionParameter: SSISExecutionParameter,
        SSISPropertyOverride: SSISPropertyOverride,
        HDInsightSparkActivity: HDInsightSparkActivity,
        HDInsightStreamingActivity: HDInsightStreamingActivity,
        HDInsightMapReduceActivity: HDInsightMapReduceActivity,
        HDInsightPigActivity: HDInsightPigActivity,
        HDInsightHiveActivity: HDInsightHiveActivity,
        CopyActivity: CopyActivity,
        CopySink: CopySink,
        CopyTranslator: CopyTranslator,
        StagingSettings: StagingSettings,
        RedirectIncompatibleRowSettings: RedirectIncompatibleRowSettings,
        AppendVariableActivity: AppendVariableActivity,
        SetVariableActivity: SetVariableActivity,
        FilterActivity: FilterActivity,
        Expression: Expression,
        UntilActivity: UntilActivity,
        WaitActivity: WaitActivity,
        ForEachActivity: ForEachActivity,
        IfConditionActivity: IfConditionActivity,
        ExecutePipelineActivity: ExecutePipelineActivity,
        LinkedIntegrationRuntimeRbacAuthorization: LinkedIntegrationRuntimeRbacAuthorization,
        LinkedIntegrationRuntimeKeyAuthorization: LinkedIntegrationRuntimeKeyAuthorization,
        TumblingWindowTriggerDependencyReference: TumblingWindowTriggerDependencyReference,
        AmazonRedshiftSource: AmazonRedshiftSource,
        RedshiftUnloadSettings: RedshiftUnloadSettings,
        ResponsysSource: ResponsysSource,
        SalesforceMarketingCloudSource: SalesforceMarketingCloudSource,
        VerticaSource: VerticaSource,
        NetezzaSource: NetezzaSource,
        ZohoSource: ZohoSource,
        XeroSource: XeroSource,
        SquareSource: SquareSource,
        SparkSource: SparkSource,
        ShopifySource: ShopifySource,
        ServiceNowSource: ServiceNowSource,
        QuickBooksSource: QuickBooksSource,
        PrestoSource: PrestoSource,
        PhoenixSource: PhoenixSource,
        PaypalSource: PaypalSource,
        MarketoSource: MarketoSource,
        MariaDBSource: MariaDBSource,
        MagentoSource: MagentoSource,
        JiraSource: JiraSource,
        ImpalaSource: ImpalaSource,
        HubspotSource: HubspotSource,
        HiveSource: HiveSource,
        HBaseSource: HBaseSource,
        GreenplumSource: GreenplumSource,
        GoogleBigQuerySource: GoogleBigQuerySource,
        GoogleAdWordsSource: GoogleAdWordsSource,
        EloquaSource: EloquaSource,
        DrillSource: DrillSource,
        CouchbaseSource: CouchbaseSource,
        ConcurSource: ConcurSource,
        AzurePostgreSqlSource: AzurePostgreSqlSource,
        AmazonMWSSource: AmazonMWSSource,
        RestServiceSource: RestServiceSource,
        HttpSource: HttpSource,
        AzureDataLakeStoreSource: AzureDataLakeStoreSource,
        MongoDbSource: MongoDbSource,
        CassandraSource: CassandraSource,
        WebSource: WebSource,
        OracleServiceCloudSource: OracleServiceCloudSource,
        OracleSource: OracleSource,
        AzureMySqlSource: AzureMySqlSource,
        HdfsSource: HdfsSource,
        DistcpSettings: DistcpSettings,
        FileSystemSource: FileSystemSource,
        SqlDWSource: SqlDWSource,
        SqlSource: SqlSource,
        SapEccSource: SapEccSource,
        SapCloudForCustomerSource: SapCloudForCustomerSource,
        SalesforceSource: SalesforceSource,
        RelationalSource: RelationalSource,
        DynamicsAXSource: DynamicsAXSource,
        DynamicsSource: DynamicsSource,
        DocumentDbCollectionSource: DocumentDbCollectionSource,
        BlobSource: BlobSource,
        AzureTableSource: AzureTableSource,
        TabularTranslator: TabularTranslator,
        SalesforceSink: SalesforceSink,
        DynamicsSink: DynamicsSink,
        OdbcSink: OdbcSink,
        AzureSearchIndexSink: AzureSearchIndexSink,
        AzureDataLakeStoreSink: AzureDataLakeStoreSink,
        OracleSink: OracleSink,
        SqlDWSink: SqlDWSink,
        PolybaseSettings: PolybaseSettings,
        SqlSink: SqlSink,
        DocumentDbCollectionSink: DocumentDbCollectionSink,
        FileSystemSink: FileSystemSink,
        BlobSink: BlobSink,
        AzureTableSink: AzureTableSink,
        AzureQueueSink: AzureQueueSink,
        SapCloudForCustomerSink: SapCloudForCustomerSink
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Factories. */
    var Factories = /** @class */ (function () {
        /**
         * Create a Factories.
         * @param {DataFactoryManagementClientContext} client Reference to the service client.
         */
        function Factories(client) {
            this.client = client;
        }
        Factories.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        Factories.prototype.configureFactoryRepo = function (locationId$$1, factoryRepoUpdate, options, callback) {
            return this.client.sendOperationRequest({
                locationId: locationId$$1,
                factoryRepoUpdate: factoryRepoUpdate,
                options: options
            }, configureFactoryRepoOperationSpec, callback);
        };
        Factories.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Factories.prototype.createOrUpdate = function (resourceGroupName$$1, factoryName$$1, factory, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                factory: factory,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        Factories.prototype.update = function (resourceGroupName$$1, factoryName$$1, factoryUpdateParameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                factoryUpdateParameters: factoryUpdateParameters,
                options: options
            }, updateOperationSpec, callback);
        };
        Factories.prototype.get = function (resourceGroupName$$1, factoryName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        Factories.prototype.deleteMethod = function (resourceGroupName$$1, factoryName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        Factories.prototype.getGitHubAccessToken = function (resourceGroupName$$1, factoryName$$1, gitHubAccessTokenRequest, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                gitHubAccessTokenRequest: gitHubAccessTokenRequest,
                options: options
            }, getGitHubAccessTokenOperationSpec, callback);
        };
        Factories.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        Factories.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        return Factories;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.DataFactory/factories",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FactoryListResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var configureFactoryRepoOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.DataFactory/locations/{locationId}/configureFactoryRepo",
        urlParameters: [
            subscriptionId,
            locationId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "factoryRepoUpdate",
            mapper: __assign({}, FactoryRepoUpdate, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Factory
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FactoryListResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "factory",
            mapper: __assign({}, Factory, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Factory
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "factoryUpdateParameters",
            mapper: __assign({}, FactoryUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Factory
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifNoneMatch,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Factory
            },
            304: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getGitHubAccessTokenOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/getGitHubAccessToken",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "gitHubAccessTokenRequest",
            mapper: __assign({}, GitHubAccessTokenRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: GitHubAccessTokenResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FactoryListResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FactoryListResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        IntegrationRuntimeListResponse: IntegrationRuntimeListResponse,
        IntegrationRuntimeResource: IntegrationRuntimeResource,
        SubResource: SubResource,
        BaseResource: BaseResource,
        IntegrationRuntime: IntegrationRuntime,
        CloudError: CloudError,
        UpdateIntegrationRuntimeRequest: UpdateIntegrationRuntimeRequest,
        IntegrationRuntimeStatusResponse: IntegrationRuntimeStatusResponse,
        IntegrationRuntimeStatus: IntegrationRuntimeStatus,
        IntegrationRuntimeConnectionInfo: IntegrationRuntimeConnectionInfo,
        IntegrationRuntimeRegenerateKeyParameters: IntegrationRuntimeRegenerateKeyParameters,
        IntegrationRuntimeAuthKeys: IntegrationRuntimeAuthKeys,
        IntegrationRuntimeMonitoringData: IntegrationRuntimeMonitoringData,
        IntegrationRuntimeNodeMonitoringData: IntegrationRuntimeNodeMonitoringData,
        LinkedIntegrationRuntimeRequest: LinkedIntegrationRuntimeRequest,
        CreateLinkedIntegrationRuntimeRequest: CreateLinkedIntegrationRuntimeRequest,
        Resource: Resource,
        Factory: Factory,
        FactoryIdentity: FactoryIdentity,
        FactoryRepoConfiguration: FactoryRepoConfiguration,
        LinkedServiceResource: LinkedServiceResource,
        LinkedService: LinkedService,
        IntegrationRuntimeReference: IntegrationRuntimeReference,
        ParameterSpecification: ParameterSpecification,
        DatasetResource: DatasetResource,
        Dataset: Dataset,
        LinkedServiceReference: LinkedServiceReference,
        DatasetFolder: DatasetFolder,
        PipelineResource: PipelineResource,
        Activity: Activity,
        ActivityDependency: ActivityDependency,
        UserProperty: UserProperty,
        VariableSpecification: VariableSpecification,
        PipelineFolder: PipelineFolder,
        TriggerResource: TriggerResource,
        Trigger: Trigger,
        FactoryVSTSConfiguration: FactoryVSTSConfiguration,
        FactoryGitHubConfiguration: FactoryGitHubConfiguration,
        RerunTumblingWindowTrigger: RerunTumblingWindowTrigger,
        RerunTriggerResource: RerunTriggerResource,
        TumblingWindowTrigger: TumblingWindowTrigger,
        TriggerPipelineReference: TriggerPipelineReference,
        PipelineReference: PipelineReference,
        RetryPolicy: RetryPolicy,
        DependencyReference: DependencyReference,
        MultiplePipelineTrigger: MultiplePipelineTrigger,
        ResponsysLinkedService: ResponsysLinkedService,
        SecretBase: SecretBase,
        AzureDatabricksLinkedService: AzureDatabricksLinkedService,
        AzureDataLakeAnalyticsLinkedService: AzureDataLakeAnalyticsLinkedService,
        HDInsightOnDemandLinkedService: HDInsightOnDemandLinkedService,
        ScriptAction: ScriptAction,
        SalesforceMarketingCloudLinkedService: SalesforceMarketingCloudLinkedService,
        NetezzaLinkedService: NetezzaLinkedService,
        VerticaLinkedService: VerticaLinkedService,
        ZohoLinkedService: ZohoLinkedService,
        XeroLinkedService: XeroLinkedService,
        SquareLinkedService: SquareLinkedService,
        SparkLinkedService: SparkLinkedService,
        ShopifyLinkedService: ShopifyLinkedService,
        ServiceNowLinkedService: ServiceNowLinkedService,
        QuickBooksLinkedService: QuickBooksLinkedService,
        PrestoLinkedService: PrestoLinkedService,
        PhoenixLinkedService: PhoenixLinkedService,
        PaypalLinkedService: PaypalLinkedService,
        MarketoLinkedService: MarketoLinkedService,
        MariaDBLinkedService: MariaDBLinkedService,
        MagentoLinkedService: MagentoLinkedService,
        JiraLinkedService: JiraLinkedService,
        ImpalaLinkedService: ImpalaLinkedService,
        HubspotLinkedService: HubspotLinkedService,
        HiveLinkedService: HiveLinkedService,
        HBaseLinkedService: HBaseLinkedService,
        GreenplumLinkedService: GreenplumLinkedService,
        GoogleBigQueryLinkedService: GoogleBigQueryLinkedService,
        GoogleAdWordsLinkedService: GoogleAdWordsLinkedService,
        EloquaLinkedService: EloquaLinkedService,
        DrillLinkedService: DrillLinkedService,
        CouchbaseLinkedService: CouchbaseLinkedService,
        ConcurLinkedService: ConcurLinkedService,
        AzurePostgreSqlLinkedService: AzurePostgreSqlLinkedService,
        AmazonMWSLinkedService: AmazonMWSLinkedService,
        SapHanaLinkedService: SapHanaLinkedService,
        SapBWLinkedService: SapBWLinkedService,
        SftpServerLinkedService: SftpServerLinkedService,
        FtpServerLinkedService: FtpServerLinkedService,
        RestServiceLinkedService: RestServiceLinkedService,
        HttpLinkedService: HttpLinkedService,
        AzureSearchLinkedService: AzureSearchLinkedService,
        CustomDataSourceLinkedService: CustomDataSourceLinkedService,
        AmazonRedshiftLinkedService: AmazonRedshiftLinkedService,
        AmazonS3LinkedService: AmazonS3LinkedService,
        SapEccLinkedService: SapEccLinkedService,
        SapCloudForCustomerLinkedService: SapCloudForCustomerLinkedService,
        SalesforceLinkedService: SalesforceLinkedService,
        AzureDataLakeStoreLinkedService: AzureDataLakeStoreLinkedService,
        MongoDbLinkedService: MongoDbLinkedService,
        CassandraLinkedService: CassandraLinkedService,
        WebLinkedService: WebLinkedService,
        WebLinkedServiceTypeProperties: WebLinkedServiceTypeProperties,
        ODataLinkedService: ODataLinkedService,
        HdfsLinkedService: HdfsLinkedService,
        OdbcLinkedService: OdbcLinkedService,
        AzureMLLinkedService: AzureMLLinkedService,
        TeradataLinkedService: TeradataLinkedService,
        Db2LinkedService: Db2LinkedService,
        SybaseLinkedService: SybaseLinkedService,
        PostgreSqlLinkedService: PostgreSqlLinkedService,
        MySqlLinkedService: MySqlLinkedService,
        AzureMySqlLinkedService: AzureMySqlLinkedService,
        OracleServiceCloudLinkedService: OracleServiceCloudLinkedService,
        OracleLinkedService: OracleLinkedService,
        FileServerLinkedService: FileServerLinkedService,
        HDInsightLinkedService: HDInsightLinkedService,
        DynamicsAXLinkedService: DynamicsAXLinkedService,
        DynamicsLinkedService: DynamicsLinkedService,
        CosmosDbLinkedService: CosmosDbLinkedService,
        AzureKeyVaultLinkedService: AzureKeyVaultLinkedService,
        AzureBatchLinkedService: AzureBatchLinkedService,
        AzureSqlDatabaseLinkedService: AzureSqlDatabaseLinkedService,
        SqlServerLinkedService: SqlServerLinkedService,
        AzureSqlDWLinkedService: AzureSqlDWLinkedService,
        AzureTableStorageLinkedService: AzureTableStorageLinkedService,
        AzureBlobStorageLinkedService: AzureBlobStorageLinkedService,
        AzureStorageLinkedService: AzureStorageLinkedService,
        ResponsysObjectDataset: ResponsysObjectDataset,
        SalesforceMarketingCloudObjectDataset: SalesforceMarketingCloudObjectDataset,
        VerticaTableDataset: VerticaTableDataset,
        NetezzaTableDataset: NetezzaTableDataset,
        ZohoObjectDataset: ZohoObjectDataset,
        XeroObjectDataset: XeroObjectDataset,
        SquareObjectDataset: SquareObjectDataset,
        SparkObjectDataset: SparkObjectDataset,
        ShopifyObjectDataset: ShopifyObjectDataset,
        ServiceNowObjectDataset: ServiceNowObjectDataset,
        QuickBooksObjectDataset: QuickBooksObjectDataset,
        PrestoObjectDataset: PrestoObjectDataset,
        PhoenixObjectDataset: PhoenixObjectDataset,
        PaypalObjectDataset: PaypalObjectDataset,
        MarketoObjectDataset: MarketoObjectDataset,
        MariaDBTableDataset: MariaDBTableDataset,
        MagentoObjectDataset: MagentoObjectDataset,
        JiraObjectDataset: JiraObjectDataset,
        ImpalaObjectDataset: ImpalaObjectDataset,
        HubspotObjectDataset: HubspotObjectDataset,
        HiveObjectDataset: HiveObjectDataset,
        HBaseObjectDataset: HBaseObjectDataset,
        GreenplumTableDataset: GreenplumTableDataset,
        GoogleBigQueryObjectDataset: GoogleBigQueryObjectDataset,
        GoogleAdWordsObjectDataset: GoogleAdWordsObjectDataset,
        EloquaObjectDataset: EloquaObjectDataset,
        DrillTableDataset: DrillTableDataset,
        CouchbaseTableDataset: CouchbaseTableDataset,
        ConcurObjectDataset: ConcurObjectDataset,
        AzurePostgreSqlTableDataset: AzurePostgreSqlTableDataset,
        AmazonMWSObjectDataset: AmazonMWSObjectDataset,
        RestServiceDataset: RestServiceDataset,
        HttpDataset: HttpDataset,
        DatasetStorageFormat: DatasetStorageFormat,
        DatasetCompression: DatasetCompression,
        AzureSearchIndexDataset: AzureSearchIndexDataset,
        WebTableDataset: WebTableDataset,
        SqlServerTableDataset: SqlServerTableDataset,
        SapEccResourceDataset: SapEccResourceDataset,
        SapCloudForCustomerResourceDataset: SapCloudForCustomerResourceDataset,
        SalesforceObjectDataset: SalesforceObjectDataset,
        RelationalTableDataset: RelationalTableDataset,
        AzureMySqlTableDataset: AzureMySqlTableDataset,
        OracleServiceCloudObjectDataset: OracleServiceCloudObjectDataset,
        OracleTableDataset: OracleTableDataset,
        ODataResourceDataset: ODataResourceDataset,
        MongoDbCollectionDataset: MongoDbCollectionDataset,
        FileShareDataset: FileShareDataset,
        AzureDataLakeStoreDataset: AzureDataLakeStoreDataset,
        DynamicsAXResourceDataset: DynamicsAXResourceDataset,
        DynamicsEntityDataset: DynamicsEntityDataset,
        DocumentDbCollectionDataset: DocumentDbCollectionDataset,
        CustomDataset: CustomDataset,
        CassandraTableDataset: CassandraTableDataset,
        AzureSqlDWTableDataset: AzureSqlDWTableDataset,
        AzureSqlTableDataset: AzureSqlTableDataset,
        AzureTableDataset: AzureTableDataset,
        AzureBlobDataset: AzureBlobDataset,
        AmazonS3Dataset: AmazonS3Dataset,
        ExecutionActivity: ExecutionActivity,
        ActivityPolicy: ActivityPolicy,
        ControlActivity: ControlActivity,
        SelfHostedIntegrationRuntimeStatus: SelfHostedIntegrationRuntimeStatus,
        SelfHostedIntegrationRuntimeNode: SelfHostedIntegrationRuntimeNode,
        LinkedIntegrationRuntime: LinkedIntegrationRuntime,
        ManagedIntegrationRuntimeStatus: ManagedIntegrationRuntimeStatus,
        ManagedIntegrationRuntimeNode: ManagedIntegrationRuntimeNode,
        ManagedIntegrationRuntimeError: ManagedIntegrationRuntimeError,
        ManagedIntegrationRuntimeOperationResult: ManagedIntegrationRuntimeOperationResult,
        SelfHostedIntegrationRuntime: SelfHostedIntegrationRuntime,
        LinkedIntegrationRuntimeType: LinkedIntegrationRuntimeType,
        ManagedIntegrationRuntime: ManagedIntegrationRuntime,
        IntegrationRuntimeComputeProperties: IntegrationRuntimeComputeProperties,
        IntegrationRuntimeVNetProperties: IntegrationRuntimeVNetProperties,
        IntegrationRuntimeSsisProperties: IntegrationRuntimeSsisProperties,
        IntegrationRuntimeSsisCatalogInfo: IntegrationRuntimeSsisCatalogInfo,
        SecureString: SecureString,
        IntegrationRuntimeCustomSetupScriptProperties: IntegrationRuntimeCustomSetupScriptProperties,
        AzureKeyVaultSecretReference: AzureKeyVaultSecretReference,
        SelfDependencyTumblingWindowTriggerReference: SelfDependencyTumblingWindowTriggerReference,
        TriggerDependencyReference: TriggerDependencyReference,
        TriggerReference: TriggerReference,
        BlobEventsTrigger: BlobEventsTrigger,
        BlobTrigger: BlobTrigger,
        ScheduleTrigger: ScheduleTrigger,
        ScheduleTriggerRecurrence: ScheduleTriggerRecurrence,
        RecurrenceSchedule: RecurrenceSchedule,
        RecurrenceScheduleOccurrence: RecurrenceScheduleOccurrence,
        WebClientCertificateAuthentication: WebClientCertificateAuthentication,
        WebBasicAuthentication: WebBasicAuthentication,
        WebAnonymousAuthentication: WebAnonymousAuthentication,
        DatasetZipDeflateCompression: DatasetZipDeflateCompression,
        DatasetDeflateCompression: DatasetDeflateCompression,
        DatasetGZipCompression: DatasetGZipCompression,
        DatasetBZip2Compression: DatasetBZip2Compression,
        ParquetFormat: ParquetFormat,
        OrcFormat: OrcFormat,
        AvroFormat: AvroFormat,
        JsonFormat: JsonFormat,
        TextFormat: TextFormat,
        DatabricksSparkPythonActivity: DatabricksSparkPythonActivity,
        DatabricksSparkJarActivity: DatabricksSparkJarActivity,
        DatabricksNotebookActivity: DatabricksNotebookActivity,
        DataLakeAnalyticsUSQLActivity: DataLakeAnalyticsUSQLActivity,
        AzureMLUpdateResourceActivity: AzureMLUpdateResourceActivity,
        AzureMLBatchExecutionActivity: AzureMLBatchExecutionActivity,
        AzureMLWebServiceFile: AzureMLWebServiceFile,
        GetMetadataActivity: GetMetadataActivity,
        DatasetReference: DatasetReference,
        WebActivity: WebActivity,
        WebActivityAuthentication: WebActivityAuthentication,
        LookupActivity: LookupActivity,
        CopySource: CopySource,
        SqlServerStoredProcedureActivity: SqlServerStoredProcedureActivity,
        StoredProcedureParameter: StoredProcedureParameter,
        CustomActivity: CustomActivity,
        CustomActivityReferenceObject: CustomActivityReferenceObject,
        ExecuteSSISPackageActivity: ExecuteSSISPackageActivity,
        SSISPackageLocation: SSISPackageLocation,
        SSISExecutionParameter: SSISExecutionParameter,
        SSISPropertyOverride: SSISPropertyOverride,
        HDInsightSparkActivity: HDInsightSparkActivity,
        HDInsightStreamingActivity: HDInsightStreamingActivity,
        HDInsightMapReduceActivity: HDInsightMapReduceActivity,
        HDInsightPigActivity: HDInsightPigActivity,
        HDInsightHiveActivity: HDInsightHiveActivity,
        CopyActivity: CopyActivity,
        CopySink: CopySink,
        CopyTranslator: CopyTranslator,
        StagingSettings: StagingSettings,
        RedirectIncompatibleRowSettings: RedirectIncompatibleRowSettings,
        AppendVariableActivity: AppendVariableActivity,
        SetVariableActivity: SetVariableActivity,
        FilterActivity: FilterActivity,
        Expression: Expression,
        UntilActivity: UntilActivity,
        WaitActivity: WaitActivity,
        ForEachActivity: ForEachActivity,
        IfConditionActivity: IfConditionActivity,
        ExecutePipelineActivity: ExecutePipelineActivity,
        LinkedIntegrationRuntimeRbacAuthorization: LinkedIntegrationRuntimeRbacAuthorization,
        LinkedIntegrationRuntimeKeyAuthorization: LinkedIntegrationRuntimeKeyAuthorization,
        TumblingWindowTriggerDependencyReference: TumblingWindowTriggerDependencyReference,
        AmazonRedshiftSource: AmazonRedshiftSource,
        RedshiftUnloadSettings: RedshiftUnloadSettings,
        ResponsysSource: ResponsysSource,
        SalesforceMarketingCloudSource: SalesforceMarketingCloudSource,
        VerticaSource: VerticaSource,
        NetezzaSource: NetezzaSource,
        ZohoSource: ZohoSource,
        XeroSource: XeroSource,
        SquareSource: SquareSource,
        SparkSource: SparkSource,
        ShopifySource: ShopifySource,
        ServiceNowSource: ServiceNowSource,
        QuickBooksSource: QuickBooksSource,
        PrestoSource: PrestoSource,
        PhoenixSource: PhoenixSource,
        PaypalSource: PaypalSource,
        MarketoSource: MarketoSource,
        MariaDBSource: MariaDBSource,
        MagentoSource: MagentoSource,
        JiraSource: JiraSource,
        ImpalaSource: ImpalaSource,
        HubspotSource: HubspotSource,
        HiveSource: HiveSource,
        HBaseSource: HBaseSource,
        GreenplumSource: GreenplumSource,
        GoogleBigQuerySource: GoogleBigQuerySource,
        GoogleAdWordsSource: GoogleAdWordsSource,
        EloquaSource: EloquaSource,
        DrillSource: DrillSource,
        CouchbaseSource: CouchbaseSource,
        ConcurSource: ConcurSource,
        AzurePostgreSqlSource: AzurePostgreSqlSource,
        AmazonMWSSource: AmazonMWSSource,
        RestServiceSource: RestServiceSource,
        HttpSource: HttpSource,
        AzureDataLakeStoreSource: AzureDataLakeStoreSource,
        MongoDbSource: MongoDbSource,
        CassandraSource: CassandraSource,
        WebSource: WebSource,
        OracleServiceCloudSource: OracleServiceCloudSource,
        OracleSource: OracleSource,
        AzureMySqlSource: AzureMySqlSource,
        HdfsSource: HdfsSource,
        DistcpSettings: DistcpSettings,
        FileSystemSource: FileSystemSource,
        SqlDWSource: SqlDWSource,
        SqlSource: SqlSource,
        SapEccSource: SapEccSource,
        SapCloudForCustomerSource: SapCloudForCustomerSource,
        SalesforceSource: SalesforceSource,
        RelationalSource: RelationalSource,
        DynamicsAXSource: DynamicsAXSource,
        DynamicsSource: DynamicsSource,
        DocumentDbCollectionSource: DocumentDbCollectionSource,
        BlobSource: BlobSource,
        AzureTableSource: AzureTableSource,
        TabularTranslator: TabularTranslator,
        SalesforceSink: SalesforceSink,
        DynamicsSink: DynamicsSink,
        OdbcSink: OdbcSink,
        AzureSearchIndexSink: AzureSearchIndexSink,
        AzureDataLakeStoreSink: AzureDataLakeStoreSink,
        OracleSink: OracleSink,
        SqlDWSink: SqlDWSink,
        PolybaseSettings: PolybaseSettings,
        SqlSink: SqlSink,
        DocumentDbCollectionSink: DocumentDbCollectionSink,
        FileSystemSink: FileSystemSink,
        BlobSink: BlobSink,
        AzureTableSink: AzureTableSink,
        AzureQueueSink: AzureQueueSink,
        SapCloudForCustomerSink: SapCloudForCustomerSink
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a IntegrationRuntimes. */
    var IntegrationRuntimes = /** @class */ (function () {
        /**
         * Create a IntegrationRuntimes.
         * @param {DataFactoryManagementClientContext} client Reference to the service client.
         */
        function IntegrationRuntimes(client) {
            this.client = client;
        }
        IntegrationRuntimes.prototype.listByFactory = function (resourceGroupName$$1, factoryName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                options: options
            }, listByFactoryOperationSpec, callback);
        };
        IntegrationRuntimes.prototype.createOrUpdate = function (resourceGroupName$$1, factoryName$$1, integrationRuntimeName$$1, integrationRuntime, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                integrationRuntimeName: integrationRuntimeName$$1,
                integrationRuntime: integrationRuntime,
                options: options
            }, createOrUpdateOperationSpec$1, callback);
        };
        IntegrationRuntimes.prototype.get = function (resourceGroupName$$1, factoryName$$1, integrationRuntimeName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                integrationRuntimeName: integrationRuntimeName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        IntegrationRuntimes.prototype.update = function (resourceGroupName$$1, factoryName$$1, integrationRuntimeName$$1, updateIntegrationRuntimeRequest, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                integrationRuntimeName: integrationRuntimeName$$1,
                updateIntegrationRuntimeRequest: updateIntegrationRuntimeRequest,
                options: options
            }, updateOperationSpec$1, callback);
        };
        IntegrationRuntimes.prototype.deleteMethod = function (resourceGroupName$$1, factoryName$$1, integrationRuntimeName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                integrationRuntimeName: integrationRuntimeName$$1,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        IntegrationRuntimes.prototype.getStatus = function (resourceGroupName$$1, factoryName$$1, integrationRuntimeName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                integrationRuntimeName: integrationRuntimeName$$1,
                options: options
            }, getStatusOperationSpec, callback);
        };
        IntegrationRuntimes.prototype.getConnectionInfo = function (resourceGroupName$$1, factoryName$$1, integrationRuntimeName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                integrationRuntimeName: integrationRuntimeName$$1,
                options: options
            }, getConnectionInfoOperationSpec, callback);
        };
        IntegrationRuntimes.prototype.regenerateAuthKey = function (resourceGroupName$$1, factoryName$$1, integrationRuntimeName$$1, regenerateKeyParameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                integrationRuntimeName: integrationRuntimeName$$1,
                regenerateKeyParameters: regenerateKeyParameters,
                options: options
            }, regenerateAuthKeyOperationSpec, callback);
        };
        IntegrationRuntimes.prototype.listAuthKeys = function (resourceGroupName$$1, factoryName$$1, integrationRuntimeName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                integrationRuntimeName: integrationRuntimeName$$1,
                options: options
            }, listAuthKeysOperationSpec, callback);
        };
        /**
         * Starts a ManagedReserved type integration runtime.
         * @param resourceGroupName The resource group name.
         * @param factoryName The factory name.
         * @param integrationRuntimeName The integration runtime name.
         * @param [options] The optional parameters
         * @returns Promise<Models.IntegrationRuntimesStartResponse>
         */
        IntegrationRuntimes.prototype.start = function (resourceGroupName$$1, factoryName$$1, integrationRuntimeName$$1, options) {
            return this.beginStart(resourceGroupName$$1, factoryName$$1, integrationRuntimeName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Stops a ManagedReserved type integration runtime.
         * @param resourceGroupName The resource group name.
         * @param factoryName The factory name.
         * @param integrationRuntimeName The integration runtime name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        IntegrationRuntimes.prototype.stop = function (resourceGroupName$$1, factoryName$$1, integrationRuntimeName$$1, options) {
            return this.beginStop(resourceGroupName$$1, factoryName$$1, integrationRuntimeName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        IntegrationRuntimes.prototype.syncCredentials = function (resourceGroupName$$1, factoryName$$1, integrationRuntimeName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                integrationRuntimeName: integrationRuntimeName$$1,
                options: options
            }, syncCredentialsOperationSpec, callback);
        };
        IntegrationRuntimes.prototype.getMonitoringData = function (resourceGroupName$$1, factoryName$$1, integrationRuntimeName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                integrationRuntimeName: integrationRuntimeName$$1,
                options: options
            }, getMonitoringDataOperationSpec, callback);
        };
        IntegrationRuntimes.prototype.upgrade = function (resourceGroupName$$1, factoryName$$1, integrationRuntimeName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                integrationRuntimeName: integrationRuntimeName$$1,
                options: options
            }, upgradeOperationSpec, callback);
        };
        IntegrationRuntimes.prototype.removeLinks = function (resourceGroupName$$1, factoryName$$1, integrationRuntimeName$$1, linkedIntegrationRuntimeRequest, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                integrationRuntimeName: integrationRuntimeName$$1,
                linkedIntegrationRuntimeRequest: linkedIntegrationRuntimeRequest,
                options: options
            }, removeLinksOperationSpec, callback);
        };
        IntegrationRuntimes.prototype.createLinkedIntegrationRuntime = function (resourceGroupName$$1, factoryName$$1, integrationRuntimeName$$1, createLinkedIntegrationRuntimeRequest, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                integrationRuntimeName: integrationRuntimeName$$1,
                createLinkedIntegrationRuntimeRequest: createLinkedIntegrationRuntimeRequest,
                options: options
            }, createLinkedIntegrationRuntimeOperationSpec, callback);
        };
        /**
         * Starts a ManagedReserved type integration runtime.
         * @param resourceGroupName The resource group name.
         * @param factoryName The factory name.
         * @param integrationRuntimeName The integration runtime name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        IntegrationRuntimes.prototype.beginStart = function (resourceGroupName$$1, factoryName$$1, integrationRuntimeName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                integrationRuntimeName: integrationRuntimeName$$1,
                options: options
            }, beginStartOperationSpec, options);
        };
        /**
         * Stops a ManagedReserved type integration runtime.
         * @param resourceGroupName The resource group name.
         * @param factoryName The factory name.
         * @param integrationRuntimeName The integration runtime name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        IntegrationRuntimes.prototype.beginStop = function (resourceGroupName$$1, factoryName$$1, integrationRuntimeName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                integrationRuntimeName: integrationRuntimeName$$1,
                options: options
            }, beginStopOperationSpec, options);
        };
        IntegrationRuntimes.prototype.listByFactoryNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByFactoryNextOperationSpec, callback);
        };
        return IntegrationRuntimes;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listByFactoryOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IntegrationRuntimeListResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var createOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            integrationRuntimeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "integrationRuntime",
            mapper: __assign({}, IntegrationRuntimeResource, { required: true })
        },
        responses: {
            200: {
                bodyMapper: IntegrationRuntimeResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            integrationRuntimeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifNoneMatch,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IntegrationRuntimeResource
            },
            304: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var updateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            integrationRuntimeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "updateIntegrationRuntimeRequest",
            mapper: __assign({}, UpdateIntegrationRuntimeRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: IntegrationRuntimeResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            integrationRuntimeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var getStatusOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/getStatus",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            integrationRuntimeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IntegrationRuntimeStatusResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var getConnectionInfoOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/getConnectionInfo",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            integrationRuntimeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IntegrationRuntimeConnectionInfo
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var regenerateAuthKeyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/regenerateAuthKey",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            integrationRuntimeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "regenerateKeyParameters",
            mapper: __assign({}, IntegrationRuntimeRegenerateKeyParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: IntegrationRuntimeAuthKeys
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listAuthKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/listAuthKeys",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            integrationRuntimeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IntegrationRuntimeAuthKeys
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var syncCredentialsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/syncCredentials",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            integrationRuntimeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var getMonitoringDataOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/monitoringData",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            integrationRuntimeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IntegrationRuntimeMonitoringData
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var upgradeOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/upgrade",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            integrationRuntimeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var removeLinksOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/removeLinks",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            integrationRuntimeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "linkedIntegrationRuntimeRequest",
            mapper: __assign({}, LinkedIntegrationRuntimeRequest, { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var createLinkedIntegrationRuntimeOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/linkedIntegrationRuntime",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            integrationRuntimeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "createLinkedIntegrationRuntimeRequest",
            mapper: __assign({}, CreateLinkedIntegrationRuntimeRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: IntegrationRuntimeStatusResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginStartOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/start",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            integrationRuntimeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IntegrationRuntimeStatusResponse
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginStopOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/stop",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            integrationRuntimeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listByFactoryNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IntegrationRuntimeListResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        SelfHostedIntegrationRuntimeNode: SelfHostedIntegrationRuntimeNode,
        CloudError: CloudError,
        UpdateIntegrationRuntimeNodeRequest: UpdateIntegrationRuntimeNodeRequest,
        IntegrationRuntimeNodeIpAddress: IntegrationRuntimeNodeIpAddress
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a IntegrationRuntimeNodes. */
    var IntegrationRuntimeNodes = /** @class */ (function () {
        /**
         * Create a IntegrationRuntimeNodes.
         * @param {DataFactoryManagementClientContext} client Reference to the service client.
         */
        function IntegrationRuntimeNodes(client) {
            this.client = client;
        }
        IntegrationRuntimeNodes.prototype.get = function (resourceGroupName$$1, factoryName$$1, integrationRuntimeName$$1, nodeName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                integrationRuntimeName: integrationRuntimeName$$1,
                nodeName: nodeName$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        IntegrationRuntimeNodes.prototype.deleteMethod = function (resourceGroupName$$1, factoryName$$1, integrationRuntimeName$$1, nodeName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                integrationRuntimeName: integrationRuntimeName$$1,
                nodeName: nodeName$$1,
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        IntegrationRuntimeNodes.prototype.update = function (resourceGroupName$$1, factoryName$$1, integrationRuntimeName$$1, nodeName$$1, updateIntegrationRuntimeNodeRequest, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                integrationRuntimeName: integrationRuntimeName$$1,
                nodeName: nodeName$$1,
                updateIntegrationRuntimeNodeRequest: updateIntegrationRuntimeNodeRequest,
                options: options
            }, updateOperationSpec$2, callback);
        };
        IntegrationRuntimeNodes.prototype.getIpAddress = function (resourceGroupName$$1, factoryName$$1, integrationRuntimeName$$1, nodeName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                integrationRuntimeName: integrationRuntimeName$$1,
                nodeName: nodeName$$1,
                options: options
            }, getIpAddressOperationSpec, callback);
        };
        return IntegrationRuntimeNodes;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/nodes/{nodeName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            integrationRuntimeName,
            nodeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SelfHostedIntegrationRuntimeNode
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/nodes/{nodeName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            integrationRuntimeName,
            nodeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var updateOperationSpec$2 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/nodes/{nodeName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            integrationRuntimeName,
            nodeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "updateIntegrationRuntimeNodeRequest",
            mapper: __assign({}, UpdateIntegrationRuntimeNodeRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: SelfHostedIntegrationRuntimeNode
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getIpAddressOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/nodes/{nodeName}/ipAddress",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            integrationRuntimeName,
            nodeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IntegrationRuntimeNodeIpAddress
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        LinkedServiceListResponse: LinkedServiceListResponse,
        LinkedServiceResource: LinkedServiceResource,
        SubResource: SubResource,
        BaseResource: BaseResource,
        LinkedService: LinkedService,
        IntegrationRuntimeReference: IntegrationRuntimeReference,
        ParameterSpecification: ParameterSpecification,
        CloudError: CloudError,
        Resource: Resource,
        Factory: Factory,
        FactoryIdentity: FactoryIdentity,
        FactoryRepoConfiguration: FactoryRepoConfiguration,
        IntegrationRuntimeResource: IntegrationRuntimeResource,
        IntegrationRuntime: IntegrationRuntime,
        DatasetResource: DatasetResource,
        Dataset: Dataset,
        LinkedServiceReference: LinkedServiceReference,
        DatasetFolder: DatasetFolder,
        PipelineResource: PipelineResource,
        Activity: Activity,
        ActivityDependency: ActivityDependency,
        UserProperty: UserProperty,
        VariableSpecification: VariableSpecification,
        PipelineFolder: PipelineFolder,
        TriggerResource: TriggerResource,
        Trigger: Trigger,
        FactoryVSTSConfiguration: FactoryVSTSConfiguration,
        FactoryGitHubConfiguration: FactoryGitHubConfiguration,
        RerunTumblingWindowTrigger: RerunTumblingWindowTrigger,
        RerunTriggerResource: RerunTriggerResource,
        TumblingWindowTrigger: TumblingWindowTrigger,
        TriggerPipelineReference: TriggerPipelineReference,
        PipelineReference: PipelineReference,
        RetryPolicy: RetryPolicy,
        DependencyReference: DependencyReference,
        MultiplePipelineTrigger: MultiplePipelineTrigger,
        ResponsysLinkedService: ResponsysLinkedService,
        SecretBase: SecretBase,
        AzureDatabricksLinkedService: AzureDatabricksLinkedService,
        AzureDataLakeAnalyticsLinkedService: AzureDataLakeAnalyticsLinkedService,
        HDInsightOnDemandLinkedService: HDInsightOnDemandLinkedService,
        ScriptAction: ScriptAction,
        SalesforceMarketingCloudLinkedService: SalesforceMarketingCloudLinkedService,
        NetezzaLinkedService: NetezzaLinkedService,
        VerticaLinkedService: VerticaLinkedService,
        ZohoLinkedService: ZohoLinkedService,
        XeroLinkedService: XeroLinkedService,
        SquareLinkedService: SquareLinkedService,
        SparkLinkedService: SparkLinkedService,
        ShopifyLinkedService: ShopifyLinkedService,
        ServiceNowLinkedService: ServiceNowLinkedService,
        QuickBooksLinkedService: QuickBooksLinkedService,
        PrestoLinkedService: PrestoLinkedService,
        PhoenixLinkedService: PhoenixLinkedService,
        PaypalLinkedService: PaypalLinkedService,
        MarketoLinkedService: MarketoLinkedService,
        MariaDBLinkedService: MariaDBLinkedService,
        MagentoLinkedService: MagentoLinkedService,
        JiraLinkedService: JiraLinkedService,
        ImpalaLinkedService: ImpalaLinkedService,
        HubspotLinkedService: HubspotLinkedService,
        HiveLinkedService: HiveLinkedService,
        HBaseLinkedService: HBaseLinkedService,
        GreenplumLinkedService: GreenplumLinkedService,
        GoogleBigQueryLinkedService: GoogleBigQueryLinkedService,
        GoogleAdWordsLinkedService: GoogleAdWordsLinkedService,
        EloquaLinkedService: EloquaLinkedService,
        DrillLinkedService: DrillLinkedService,
        CouchbaseLinkedService: CouchbaseLinkedService,
        ConcurLinkedService: ConcurLinkedService,
        AzurePostgreSqlLinkedService: AzurePostgreSqlLinkedService,
        AmazonMWSLinkedService: AmazonMWSLinkedService,
        SapHanaLinkedService: SapHanaLinkedService,
        SapBWLinkedService: SapBWLinkedService,
        SftpServerLinkedService: SftpServerLinkedService,
        FtpServerLinkedService: FtpServerLinkedService,
        RestServiceLinkedService: RestServiceLinkedService,
        HttpLinkedService: HttpLinkedService,
        AzureSearchLinkedService: AzureSearchLinkedService,
        CustomDataSourceLinkedService: CustomDataSourceLinkedService,
        AmazonRedshiftLinkedService: AmazonRedshiftLinkedService,
        AmazonS3LinkedService: AmazonS3LinkedService,
        SapEccLinkedService: SapEccLinkedService,
        SapCloudForCustomerLinkedService: SapCloudForCustomerLinkedService,
        SalesforceLinkedService: SalesforceLinkedService,
        AzureDataLakeStoreLinkedService: AzureDataLakeStoreLinkedService,
        MongoDbLinkedService: MongoDbLinkedService,
        CassandraLinkedService: CassandraLinkedService,
        WebLinkedService: WebLinkedService,
        WebLinkedServiceTypeProperties: WebLinkedServiceTypeProperties,
        ODataLinkedService: ODataLinkedService,
        HdfsLinkedService: HdfsLinkedService,
        OdbcLinkedService: OdbcLinkedService,
        AzureMLLinkedService: AzureMLLinkedService,
        TeradataLinkedService: TeradataLinkedService,
        Db2LinkedService: Db2LinkedService,
        SybaseLinkedService: SybaseLinkedService,
        PostgreSqlLinkedService: PostgreSqlLinkedService,
        MySqlLinkedService: MySqlLinkedService,
        AzureMySqlLinkedService: AzureMySqlLinkedService,
        OracleServiceCloudLinkedService: OracleServiceCloudLinkedService,
        OracleLinkedService: OracleLinkedService,
        FileServerLinkedService: FileServerLinkedService,
        HDInsightLinkedService: HDInsightLinkedService,
        DynamicsAXLinkedService: DynamicsAXLinkedService,
        DynamicsLinkedService: DynamicsLinkedService,
        CosmosDbLinkedService: CosmosDbLinkedService,
        AzureKeyVaultLinkedService: AzureKeyVaultLinkedService,
        AzureBatchLinkedService: AzureBatchLinkedService,
        AzureSqlDatabaseLinkedService: AzureSqlDatabaseLinkedService,
        SqlServerLinkedService: SqlServerLinkedService,
        AzureSqlDWLinkedService: AzureSqlDWLinkedService,
        AzureTableStorageLinkedService: AzureTableStorageLinkedService,
        AzureBlobStorageLinkedService: AzureBlobStorageLinkedService,
        AzureStorageLinkedService: AzureStorageLinkedService,
        ResponsysObjectDataset: ResponsysObjectDataset,
        SalesforceMarketingCloudObjectDataset: SalesforceMarketingCloudObjectDataset,
        VerticaTableDataset: VerticaTableDataset,
        NetezzaTableDataset: NetezzaTableDataset,
        ZohoObjectDataset: ZohoObjectDataset,
        XeroObjectDataset: XeroObjectDataset,
        SquareObjectDataset: SquareObjectDataset,
        SparkObjectDataset: SparkObjectDataset,
        ShopifyObjectDataset: ShopifyObjectDataset,
        ServiceNowObjectDataset: ServiceNowObjectDataset,
        QuickBooksObjectDataset: QuickBooksObjectDataset,
        PrestoObjectDataset: PrestoObjectDataset,
        PhoenixObjectDataset: PhoenixObjectDataset,
        PaypalObjectDataset: PaypalObjectDataset,
        MarketoObjectDataset: MarketoObjectDataset,
        MariaDBTableDataset: MariaDBTableDataset,
        MagentoObjectDataset: MagentoObjectDataset,
        JiraObjectDataset: JiraObjectDataset,
        ImpalaObjectDataset: ImpalaObjectDataset,
        HubspotObjectDataset: HubspotObjectDataset,
        HiveObjectDataset: HiveObjectDataset,
        HBaseObjectDataset: HBaseObjectDataset,
        GreenplumTableDataset: GreenplumTableDataset,
        GoogleBigQueryObjectDataset: GoogleBigQueryObjectDataset,
        GoogleAdWordsObjectDataset: GoogleAdWordsObjectDataset,
        EloquaObjectDataset: EloquaObjectDataset,
        DrillTableDataset: DrillTableDataset,
        CouchbaseTableDataset: CouchbaseTableDataset,
        ConcurObjectDataset: ConcurObjectDataset,
        AzurePostgreSqlTableDataset: AzurePostgreSqlTableDataset,
        AmazonMWSObjectDataset: AmazonMWSObjectDataset,
        RestServiceDataset: RestServiceDataset,
        HttpDataset: HttpDataset,
        DatasetStorageFormat: DatasetStorageFormat,
        DatasetCompression: DatasetCompression,
        AzureSearchIndexDataset: AzureSearchIndexDataset,
        WebTableDataset: WebTableDataset,
        SqlServerTableDataset: SqlServerTableDataset,
        SapEccResourceDataset: SapEccResourceDataset,
        SapCloudForCustomerResourceDataset: SapCloudForCustomerResourceDataset,
        SalesforceObjectDataset: SalesforceObjectDataset,
        RelationalTableDataset: RelationalTableDataset,
        AzureMySqlTableDataset: AzureMySqlTableDataset,
        OracleServiceCloudObjectDataset: OracleServiceCloudObjectDataset,
        OracleTableDataset: OracleTableDataset,
        ODataResourceDataset: ODataResourceDataset,
        MongoDbCollectionDataset: MongoDbCollectionDataset,
        FileShareDataset: FileShareDataset,
        AzureDataLakeStoreDataset: AzureDataLakeStoreDataset,
        DynamicsAXResourceDataset: DynamicsAXResourceDataset,
        DynamicsEntityDataset: DynamicsEntityDataset,
        DocumentDbCollectionDataset: DocumentDbCollectionDataset,
        CustomDataset: CustomDataset,
        CassandraTableDataset: CassandraTableDataset,
        AzureSqlDWTableDataset: AzureSqlDWTableDataset,
        AzureSqlTableDataset: AzureSqlTableDataset,
        AzureTableDataset: AzureTableDataset,
        AzureBlobDataset: AzureBlobDataset,
        AmazonS3Dataset: AmazonS3Dataset,
        ExecutionActivity: ExecutionActivity,
        ActivityPolicy: ActivityPolicy,
        ControlActivity: ControlActivity,
        SelfHostedIntegrationRuntime: SelfHostedIntegrationRuntime,
        LinkedIntegrationRuntimeType: LinkedIntegrationRuntimeType,
        ManagedIntegrationRuntime: ManagedIntegrationRuntime,
        IntegrationRuntimeComputeProperties: IntegrationRuntimeComputeProperties,
        IntegrationRuntimeVNetProperties: IntegrationRuntimeVNetProperties,
        IntegrationRuntimeSsisProperties: IntegrationRuntimeSsisProperties,
        IntegrationRuntimeSsisCatalogInfo: IntegrationRuntimeSsisCatalogInfo,
        SecureString: SecureString,
        IntegrationRuntimeCustomSetupScriptProperties: IntegrationRuntimeCustomSetupScriptProperties,
        AzureKeyVaultSecretReference: AzureKeyVaultSecretReference,
        SelfDependencyTumblingWindowTriggerReference: SelfDependencyTumblingWindowTriggerReference,
        TriggerDependencyReference: TriggerDependencyReference,
        TriggerReference: TriggerReference,
        BlobEventsTrigger: BlobEventsTrigger,
        BlobTrigger: BlobTrigger,
        ScheduleTrigger: ScheduleTrigger,
        ScheduleTriggerRecurrence: ScheduleTriggerRecurrence,
        RecurrenceSchedule: RecurrenceSchedule,
        RecurrenceScheduleOccurrence: RecurrenceScheduleOccurrence,
        WebClientCertificateAuthentication: WebClientCertificateAuthentication,
        WebBasicAuthentication: WebBasicAuthentication,
        WebAnonymousAuthentication: WebAnonymousAuthentication,
        DatasetZipDeflateCompression: DatasetZipDeflateCompression,
        DatasetDeflateCompression: DatasetDeflateCompression,
        DatasetGZipCompression: DatasetGZipCompression,
        DatasetBZip2Compression: DatasetBZip2Compression,
        ParquetFormat: ParquetFormat,
        OrcFormat: OrcFormat,
        AvroFormat: AvroFormat,
        JsonFormat: JsonFormat,
        TextFormat: TextFormat,
        DatabricksSparkPythonActivity: DatabricksSparkPythonActivity,
        DatabricksSparkJarActivity: DatabricksSparkJarActivity,
        DatabricksNotebookActivity: DatabricksNotebookActivity,
        DataLakeAnalyticsUSQLActivity: DataLakeAnalyticsUSQLActivity,
        AzureMLUpdateResourceActivity: AzureMLUpdateResourceActivity,
        AzureMLBatchExecutionActivity: AzureMLBatchExecutionActivity,
        AzureMLWebServiceFile: AzureMLWebServiceFile,
        GetMetadataActivity: GetMetadataActivity,
        DatasetReference: DatasetReference,
        WebActivity: WebActivity,
        WebActivityAuthentication: WebActivityAuthentication,
        LookupActivity: LookupActivity,
        CopySource: CopySource,
        SqlServerStoredProcedureActivity: SqlServerStoredProcedureActivity,
        StoredProcedureParameter: StoredProcedureParameter,
        CustomActivity: CustomActivity,
        CustomActivityReferenceObject: CustomActivityReferenceObject,
        ExecuteSSISPackageActivity: ExecuteSSISPackageActivity,
        SSISPackageLocation: SSISPackageLocation,
        SSISExecutionParameter: SSISExecutionParameter,
        SSISPropertyOverride: SSISPropertyOverride,
        HDInsightSparkActivity: HDInsightSparkActivity,
        HDInsightStreamingActivity: HDInsightStreamingActivity,
        HDInsightMapReduceActivity: HDInsightMapReduceActivity,
        HDInsightPigActivity: HDInsightPigActivity,
        HDInsightHiveActivity: HDInsightHiveActivity,
        CopyActivity: CopyActivity,
        CopySink: CopySink,
        CopyTranslator: CopyTranslator,
        StagingSettings: StagingSettings,
        RedirectIncompatibleRowSettings: RedirectIncompatibleRowSettings,
        AppendVariableActivity: AppendVariableActivity,
        SetVariableActivity: SetVariableActivity,
        FilterActivity: FilterActivity,
        Expression: Expression,
        UntilActivity: UntilActivity,
        WaitActivity: WaitActivity,
        ForEachActivity: ForEachActivity,
        IfConditionActivity: IfConditionActivity,
        ExecutePipelineActivity: ExecutePipelineActivity,
        LinkedIntegrationRuntimeRbacAuthorization: LinkedIntegrationRuntimeRbacAuthorization,
        LinkedIntegrationRuntimeKeyAuthorization: LinkedIntegrationRuntimeKeyAuthorization,
        TumblingWindowTriggerDependencyReference: TumblingWindowTriggerDependencyReference,
        AmazonRedshiftSource: AmazonRedshiftSource,
        RedshiftUnloadSettings: RedshiftUnloadSettings,
        ResponsysSource: ResponsysSource,
        SalesforceMarketingCloudSource: SalesforceMarketingCloudSource,
        VerticaSource: VerticaSource,
        NetezzaSource: NetezzaSource,
        ZohoSource: ZohoSource,
        XeroSource: XeroSource,
        SquareSource: SquareSource,
        SparkSource: SparkSource,
        ShopifySource: ShopifySource,
        ServiceNowSource: ServiceNowSource,
        QuickBooksSource: QuickBooksSource,
        PrestoSource: PrestoSource,
        PhoenixSource: PhoenixSource,
        PaypalSource: PaypalSource,
        MarketoSource: MarketoSource,
        MariaDBSource: MariaDBSource,
        MagentoSource: MagentoSource,
        JiraSource: JiraSource,
        ImpalaSource: ImpalaSource,
        HubspotSource: HubspotSource,
        HiveSource: HiveSource,
        HBaseSource: HBaseSource,
        GreenplumSource: GreenplumSource,
        GoogleBigQuerySource: GoogleBigQuerySource,
        GoogleAdWordsSource: GoogleAdWordsSource,
        EloquaSource: EloquaSource,
        DrillSource: DrillSource,
        CouchbaseSource: CouchbaseSource,
        ConcurSource: ConcurSource,
        AzurePostgreSqlSource: AzurePostgreSqlSource,
        AmazonMWSSource: AmazonMWSSource,
        RestServiceSource: RestServiceSource,
        HttpSource: HttpSource,
        AzureDataLakeStoreSource: AzureDataLakeStoreSource,
        MongoDbSource: MongoDbSource,
        CassandraSource: CassandraSource,
        WebSource: WebSource,
        OracleServiceCloudSource: OracleServiceCloudSource,
        OracleSource: OracleSource,
        AzureMySqlSource: AzureMySqlSource,
        HdfsSource: HdfsSource,
        DistcpSettings: DistcpSettings,
        FileSystemSource: FileSystemSource,
        SqlDWSource: SqlDWSource,
        SqlSource: SqlSource,
        SapEccSource: SapEccSource,
        SapCloudForCustomerSource: SapCloudForCustomerSource,
        SalesforceSource: SalesforceSource,
        RelationalSource: RelationalSource,
        DynamicsAXSource: DynamicsAXSource,
        DynamicsSource: DynamicsSource,
        DocumentDbCollectionSource: DocumentDbCollectionSource,
        BlobSource: BlobSource,
        AzureTableSource: AzureTableSource,
        TabularTranslator: TabularTranslator,
        SalesforceSink: SalesforceSink,
        DynamicsSink: DynamicsSink,
        OdbcSink: OdbcSink,
        AzureSearchIndexSink: AzureSearchIndexSink,
        AzureDataLakeStoreSink: AzureDataLakeStoreSink,
        OracleSink: OracleSink,
        SqlDWSink: SqlDWSink,
        PolybaseSettings: PolybaseSettings,
        SqlSink: SqlSink,
        DocumentDbCollectionSink: DocumentDbCollectionSink,
        FileSystemSink: FileSystemSink,
        BlobSink: BlobSink,
        AzureTableSink: AzureTableSink,
        AzureQueueSink: AzureQueueSink,
        SapCloudForCustomerSink: SapCloudForCustomerSink
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a LinkedServices. */
    var LinkedServices = /** @class */ (function () {
        /**
         * Create a LinkedServices.
         * @param {DataFactoryManagementClientContext} client Reference to the service client.
         */
        function LinkedServices(client) {
            this.client = client;
        }
        LinkedServices.prototype.listByFactory = function (resourceGroupName$$1, factoryName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                options: options
            }, listByFactoryOperationSpec$1, callback);
        };
        LinkedServices.prototype.createOrUpdate = function (resourceGroupName$$1, factoryName$$1, linkedServiceName$$1, linkedService, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                linkedServiceName: linkedServiceName$$1,
                linkedService: linkedService,
                options: options
            }, createOrUpdateOperationSpec$2, callback);
        };
        LinkedServices.prototype.get = function (resourceGroupName$$1, factoryName$$1, linkedServiceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                linkedServiceName: linkedServiceName$$1,
                options: options
            }, getOperationSpec$3, callback);
        };
        LinkedServices.prototype.deleteMethod = function (resourceGroupName$$1, factoryName$$1, linkedServiceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                linkedServiceName: linkedServiceName$$1,
                options: options
            }, deleteMethodOperationSpec$3, callback);
        };
        LinkedServices.prototype.listByFactoryNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByFactoryNextOperationSpec$1, callback);
        };
        return LinkedServices;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var listByFactoryOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/linkedservices",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LinkedServiceListResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var createOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/linkedservices/{linkedServiceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            linkedServiceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "linkedService",
            mapper: __assign({}, LinkedServiceResource, { required: true })
        },
        responses: {
            200: {
                bodyMapper: LinkedServiceResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/linkedservices/{linkedServiceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            linkedServiceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifNoneMatch,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LinkedServiceResource
            },
            304: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var deleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/linkedservices/{linkedServiceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            linkedServiceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listByFactoryNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LinkedServiceListResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        DatasetListResponse: DatasetListResponse,
        DatasetResource: DatasetResource,
        SubResource: SubResource,
        BaseResource: BaseResource,
        Dataset: Dataset,
        LinkedServiceReference: LinkedServiceReference,
        ParameterSpecification: ParameterSpecification,
        DatasetFolder: DatasetFolder,
        CloudError: CloudError,
        Resource: Resource,
        Factory: Factory,
        FactoryIdentity: FactoryIdentity,
        FactoryRepoConfiguration: FactoryRepoConfiguration,
        IntegrationRuntimeResource: IntegrationRuntimeResource,
        IntegrationRuntime: IntegrationRuntime,
        LinkedServiceResource: LinkedServiceResource,
        LinkedService: LinkedService,
        IntegrationRuntimeReference: IntegrationRuntimeReference,
        PipelineResource: PipelineResource,
        Activity: Activity,
        ActivityDependency: ActivityDependency,
        UserProperty: UserProperty,
        VariableSpecification: VariableSpecification,
        PipelineFolder: PipelineFolder,
        TriggerResource: TriggerResource,
        Trigger: Trigger,
        FactoryVSTSConfiguration: FactoryVSTSConfiguration,
        FactoryGitHubConfiguration: FactoryGitHubConfiguration,
        RerunTumblingWindowTrigger: RerunTumblingWindowTrigger,
        RerunTriggerResource: RerunTriggerResource,
        TumblingWindowTrigger: TumblingWindowTrigger,
        TriggerPipelineReference: TriggerPipelineReference,
        PipelineReference: PipelineReference,
        RetryPolicy: RetryPolicy,
        DependencyReference: DependencyReference,
        MultiplePipelineTrigger: MultiplePipelineTrigger,
        ResponsysLinkedService: ResponsysLinkedService,
        SecretBase: SecretBase,
        AzureDatabricksLinkedService: AzureDatabricksLinkedService,
        AzureDataLakeAnalyticsLinkedService: AzureDataLakeAnalyticsLinkedService,
        HDInsightOnDemandLinkedService: HDInsightOnDemandLinkedService,
        ScriptAction: ScriptAction,
        SalesforceMarketingCloudLinkedService: SalesforceMarketingCloudLinkedService,
        NetezzaLinkedService: NetezzaLinkedService,
        VerticaLinkedService: VerticaLinkedService,
        ZohoLinkedService: ZohoLinkedService,
        XeroLinkedService: XeroLinkedService,
        SquareLinkedService: SquareLinkedService,
        SparkLinkedService: SparkLinkedService,
        ShopifyLinkedService: ShopifyLinkedService,
        ServiceNowLinkedService: ServiceNowLinkedService,
        QuickBooksLinkedService: QuickBooksLinkedService,
        PrestoLinkedService: PrestoLinkedService,
        PhoenixLinkedService: PhoenixLinkedService,
        PaypalLinkedService: PaypalLinkedService,
        MarketoLinkedService: MarketoLinkedService,
        MariaDBLinkedService: MariaDBLinkedService,
        MagentoLinkedService: MagentoLinkedService,
        JiraLinkedService: JiraLinkedService,
        ImpalaLinkedService: ImpalaLinkedService,
        HubspotLinkedService: HubspotLinkedService,
        HiveLinkedService: HiveLinkedService,
        HBaseLinkedService: HBaseLinkedService,
        GreenplumLinkedService: GreenplumLinkedService,
        GoogleBigQueryLinkedService: GoogleBigQueryLinkedService,
        GoogleAdWordsLinkedService: GoogleAdWordsLinkedService,
        EloquaLinkedService: EloquaLinkedService,
        DrillLinkedService: DrillLinkedService,
        CouchbaseLinkedService: CouchbaseLinkedService,
        ConcurLinkedService: ConcurLinkedService,
        AzurePostgreSqlLinkedService: AzurePostgreSqlLinkedService,
        AmazonMWSLinkedService: AmazonMWSLinkedService,
        SapHanaLinkedService: SapHanaLinkedService,
        SapBWLinkedService: SapBWLinkedService,
        SftpServerLinkedService: SftpServerLinkedService,
        FtpServerLinkedService: FtpServerLinkedService,
        RestServiceLinkedService: RestServiceLinkedService,
        HttpLinkedService: HttpLinkedService,
        AzureSearchLinkedService: AzureSearchLinkedService,
        CustomDataSourceLinkedService: CustomDataSourceLinkedService,
        AmazonRedshiftLinkedService: AmazonRedshiftLinkedService,
        AmazonS3LinkedService: AmazonS3LinkedService,
        SapEccLinkedService: SapEccLinkedService,
        SapCloudForCustomerLinkedService: SapCloudForCustomerLinkedService,
        SalesforceLinkedService: SalesforceLinkedService,
        AzureDataLakeStoreLinkedService: AzureDataLakeStoreLinkedService,
        MongoDbLinkedService: MongoDbLinkedService,
        CassandraLinkedService: CassandraLinkedService,
        WebLinkedService: WebLinkedService,
        WebLinkedServiceTypeProperties: WebLinkedServiceTypeProperties,
        ODataLinkedService: ODataLinkedService,
        HdfsLinkedService: HdfsLinkedService,
        OdbcLinkedService: OdbcLinkedService,
        AzureMLLinkedService: AzureMLLinkedService,
        TeradataLinkedService: TeradataLinkedService,
        Db2LinkedService: Db2LinkedService,
        SybaseLinkedService: SybaseLinkedService,
        PostgreSqlLinkedService: PostgreSqlLinkedService,
        MySqlLinkedService: MySqlLinkedService,
        AzureMySqlLinkedService: AzureMySqlLinkedService,
        OracleServiceCloudLinkedService: OracleServiceCloudLinkedService,
        OracleLinkedService: OracleLinkedService,
        FileServerLinkedService: FileServerLinkedService,
        HDInsightLinkedService: HDInsightLinkedService,
        DynamicsAXLinkedService: DynamicsAXLinkedService,
        DynamicsLinkedService: DynamicsLinkedService,
        CosmosDbLinkedService: CosmosDbLinkedService,
        AzureKeyVaultLinkedService: AzureKeyVaultLinkedService,
        AzureBatchLinkedService: AzureBatchLinkedService,
        AzureSqlDatabaseLinkedService: AzureSqlDatabaseLinkedService,
        SqlServerLinkedService: SqlServerLinkedService,
        AzureSqlDWLinkedService: AzureSqlDWLinkedService,
        AzureTableStorageLinkedService: AzureTableStorageLinkedService,
        AzureBlobStorageLinkedService: AzureBlobStorageLinkedService,
        AzureStorageLinkedService: AzureStorageLinkedService,
        ResponsysObjectDataset: ResponsysObjectDataset,
        SalesforceMarketingCloudObjectDataset: SalesforceMarketingCloudObjectDataset,
        VerticaTableDataset: VerticaTableDataset,
        NetezzaTableDataset: NetezzaTableDataset,
        ZohoObjectDataset: ZohoObjectDataset,
        XeroObjectDataset: XeroObjectDataset,
        SquareObjectDataset: SquareObjectDataset,
        SparkObjectDataset: SparkObjectDataset,
        ShopifyObjectDataset: ShopifyObjectDataset,
        ServiceNowObjectDataset: ServiceNowObjectDataset,
        QuickBooksObjectDataset: QuickBooksObjectDataset,
        PrestoObjectDataset: PrestoObjectDataset,
        PhoenixObjectDataset: PhoenixObjectDataset,
        PaypalObjectDataset: PaypalObjectDataset,
        MarketoObjectDataset: MarketoObjectDataset,
        MariaDBTableDataset: MariaDBTableDataset,
        MagentoObjectDataset: MagentoObjectDataset,
        JiraObjectDataset: JiraObjectDataset,
        ImpalaObjectDataset: ImpalaObjectDataset,
        HubspotObjectDataset: HubspotObjectDataset,
        HiveObjectDataset: HiveObjectDataset,
        HBaseObjectDataset: HBaseObjectDataset,
        GreenplumTableDataset: GreenplumTableDataset,
        GoogleBigQueryObjectDataset: GoogleBigQueryObjectDataset,
        GoogleAdWordsObjectDataset: GoogleAdWordsObjectDataset,
        EloquaObjectDataset: EloquaObjectDataset,
        DrillTableDataset: DrillTableDataset,
        CouchbaseTableDataset: CouchbaseTableDataset,
        ConcurObjectDataset: ConcurObjectDataset,
        AzurePostgreSqlTableDataset: AzurePostgreSqlTableDataset,
        AmazonMWSObjectDataset: AmazonMWSObjectDataset,
        RestServiceDataset: RestServiceDataset,
        HttpDataset: HttpDataset,
        DatasetStorageFormat: DatasetStorageFormat,
        DatasetCompression: DatasetCompression,
        AzureSearchIndexDataset: AzureSearchIndexDataset,
        WebTableDataset: WebTableDataset,
        SqlServerTableDataset: SqlServerTableDataset,
        SapEccResourceDataset: SapEccResourceDataset,
        SapCloudForCustomerResourceDataset: SapCloudForCustomerResourceDataset,
        SalesforceObjectDataset: SalesforceObjectDataset,
        RelationalTableDataset: RelationalTableDataset,
        AzureMySqlTableDataset: AzureMySqlTableDataset,
        OracleServiceCloudObjectDataset: OracleServiceCloudObjectDataset,
        OracleTableDataset: OracleTableDataset,
        ODataResourceDataset: ODataResourceDataset,
        MongoDbCollectionDataset: MongoDbCollectionDataset,
        FileShareDataset: FileShareDataset,
        AzureDataLakeStoreDataset: AzureDataLakeStoreDataset,
        DynamicsAXResourceDataset: DynamicsAXResourceDataset,
        DynamicsEntityDataset: DynamicsEntityDataset,
        DocumentDbCollectionDataset: DocumentDbCollectionDataset,
        CustomDataset: CustomDataset,
        CassandraTableDataset: CassandraTableDataset,
        AzureSqlDWTableDataset: AzureSqlDWTableDataset,
        AzureSqlTableDataset: AzureSqlTableDataset,
        AzureTableDataset: AzureTableDataset,
        AzureBlobDataset: AzureBlobDataset,
        AmazonS3Dataset: AmazonS3Dataset,
        ExecutionActivity: ExecutionActivity,
        ActivityPolicy: ActivityPolicy,
        ControlActivity: ControlActivity,
        SelfHostedIntegrationRuntime: SelfHostedIntegrationRuntime,
        LinkedIntegrationRuntimeType: LinkedIntegrationRuntimeType,
        ManagedIntegrationRuntime: ManagedIntegrationRuntime,
        IntegrationRuntimeComputeProperties: IntegrationRuntimeComputeProperties,
        IntegrationRuntimeVNetProperties: IntegrationRuntimeVNetProperties,
        IntegrationRuntimeSsisProperties: IntegrationRuntimeSsisProperties,
        IntegrationRuntimeSsisCatalogInfo: IntegrationRuntimeSsisCatalogInfo,
        SecureString: SecureString,
        IntegrationRuntimeCustomSetupScriptProperties: IntegrationRuntimeCustomSetupScriptProperties,
        AzureKeyVaultSecretReference: AzureKeyVaultSecretReference,
        SelfDependencyTumblingWindowTriggerReference: SelfDependencyTumblingWindowTriggerReference,
        TriggerDependencyReference: TriggerDependencyReference,
        TriggerReference: TriggerReference,
        BlobEventsTrigger: BlobEventsTrigger,
        BlobTrigger: BlobTrigger,
        ScheduleTrigger: ScheduleTrigger,
        ScheduleTriggerRecurrence: ScheduleTriggerRecurrence,
        RecurrenceSchedule: RecurrenceSchedule,
        RecurrenceScheduleOccurrence: RecurrenceScheduleOccurrence,
        WebClientCertificateAuthentication: WebClientCertificateAuthentication,
        WebBasicAuthentication: WebBasicAuthentication,
        WebAnonymousAuthentication: WebAnonymousAuthentication,
        DatasetZipDeflateCompression: DatasetZipDeflateCompression,
        DatasetDeflateCompression: DatasetDeflateCompression,
        DatasetGZipCompression: DatasetGZipCompression,
        DatasetBZip2Compression: DatasetBZip2Compression,
        ParquetFormat: ParquetFormat,
        OrcFormat: OrcFormat,
        AvroFormat: AvroFormat,
        JsonFormat: JsonFormat,
        TextFormat: TextFormat,
        DatabricksSparkPythonActivity: DatabricksSparkPythonActivity,
        DatabricksSparkJarActivity: DatabricksSparkJarActivity,
        DatabricksNotebookActivity: DatabricksNotebookActivity,
        DataLakeAnalyticsUSQLActivity: DataLakeAnalyticsUSQLActivity,
        AzureMLUpdateResourceActivity: AzureMLUpdateResourceActivity,
        AzureMLBatchExecutionActivity: AzureMLBatchExecutionActivity,
        AzureMLWebServiceFile: AzureMLWebServiceFile,
        GetMetadataActivity: GetMetadataActivity,
        DatasetReference: DatasetReference,
        WebActivity: WebActivity,
        WebActivityAuthentication: WebActivityAuthentication,
        LookupActivity: LookupActivity,
        CopySource: CopySource,
        SqlServerStoredProcedureActivity: SqlServerStoredProcedureActivity,
        StoredProcedureParameter: StoredProcedureParameter,
        CustomActivity: CustomActivity,
        CustomActivityReferenceObject: CustomActivityReferenceObject,
        ExecuteSSISPackageActivity: ExecuteSSISPackageActivity,
        SSISPackageLocation: SSISPackageLocation,
        SSISExecutionParameter: SSISExecutionParameter,
        SSISPropertyOverride: SSISPropertyOverride,
        HDInsightSparkActivity: HDInsightSparkActivity,
        HDInsightStreamingActivity: HDInsightStreamingActivity,
        HDInsightMapReduceActivity: HDInsightMapReduceActivity,
        HDInsightPigActivity: HDInsightPigActivity,
        HDInsightHiveActivity: HDInsightHiveActivity,
        CopyActivity: CopyActivity,
        CopySink: CopySink,
        CopyTranslator: CopyTranslator,
        StagingSettings: StagingSettings,
        RedirectIncompatibleRowSettings: RedirectIncompatibleRowSettings,
        AppendVariableActivity: AppendVariableActivity,
        SetVariableActivity: SetVariableActivity,
        FilterActivity: FilterActivity,
        Expression: Expression,
        UntilActivity: UntilActivity,
        WaitActivity: WaitActivity,
        ForEachActivity: ForEachActivity,
        IfConditionActivity: IfConditionActivity,
        ExecutePipelineActivity: ExecutePipelineActivity,
        LinkedIntegrationRuntimeRbacAuthorization: LinkedIntegrationRuntimeRbacAuthorization,
        LinkedIntegrationRuntimeKeyAuthorization: LinkedIntegrationRuntimeKeyAuthorization,
        TumblingWindowTriggerDependencyReference: TumblingWindowTriggerDependencyReference,
        AmazonRedshiftSource: AmazonRedshiftSource,
        RedshiftUnloadSettings: RedshiftUnloadSettings,
        ResponsysSource: ResponsysSource,
        SalesforceMarketingCloudSource: SalesforceMarketingCloudSource,
        VerticaSource: VerticaSource,
        NetezzaSource: NetezzaSource,
        ZohoSource: ZohoSource,
        XeroSource: XeroSource,
        SquareSource: SquareSource,
        SparkSource: SparkSource,
        ShopifySource: ShopifySource,
        ServiceNowSource: ServiceNowSource,
        QuickBooksSource: QuickBooksSource,
        PrestoSource: PrestoSource,
        PhoenixSource: PhoenixSource,
        PaypalSource: PaypalSource,
        MarketoSource: MarketoSource,
        MariaDBSource: MariaDBSource,
        MagentoSource: MagentoSource,
        JiraSource: JiraSource,
        ImpalaSource: ImpalaSource,
        HubspotSource: HubspotSource,
        HiveSource: HiveSource,
        HBaseSource: HBaseSource,
        GreenplumSource: GreenplumSource,
        GoogleBigQuerySource: GoogleBigQuerySource,
        GoogleAdWordsSource: GoogleAdWordsSource,
        EloquaSource: EloquaSource,
        DrillSource: DrillSource,
        CouchbaseSource: CouchbaseSource,
        ConcurSource: ConcurSource,
        AzurePostgreSqlSource: AzurePostgreSqlSource,
        AmazonMWSSource: AmazonMWSSource,
        RestServiceSource: RestServiceSource,
        HttpSource: HttpSource,
        AzureDataLakeStoreSource: AzureDataLakeStoreSource,
        MongoDbSource: MongoDbSource,
        CassandraSource: CassandraSource,
        WebSource: WebSource,
        OracleServiceCloudSource: OracleServiceCloudSource,
        OracleSource: OracleSource,
        AzureMySqlSource: AzureMySqlSource,
        HdfsSource: HdfsSource,
        DistcpSettings: DistcpSettings,
        FileSystemSource: FileSystemSource,
        SqlDWSource: SqlDWSource,
        SqlSource: SqlSource,
        SapEccSource: SapEccSource,
        SapCloudForCustomerSource: SapCloudForCustomerSource,
        SalesforceSource: SalesforceSource,
        RelationalSource: RelationalSource,
        DynamicsAXSource: DynamicsAXSource,
        DynamicsSource: DynamicsSource,
        DocumentDbCollectionSource: DocumentDbCollectionSource,
        BlobSource: BlobSource,
        AzureTableSource: AzureTableSource,
        TabularTranslator: TabularTranslator,
        SalesforceSink: SalesforceSink,
        DynamicsSink: DynamicsSink,
        OdbcSink: OdbcSink,
        AzureSearchIndexSink: AzureSearchIndexSink,
        AzureDataLakeStoreSink: AzureDataLakeStoreSink,
        OracleSink: OracleSink,
        SqlDWSink: SqlDWSink,
        PolybaseSettings: PolybaseSettings,
        SqlSink: SqlSink,
        DocumentDbCollectionSink: DocumentDbCollectionSink,
        FileSystemSink: FileSystemSink,
        BlobSink: BlobSink,
        AzureTableSink: AzureTableSink,
        AzureQueueSink: AzureQueueSink,
        SapCloudForCustomerSink: SapCloudForCustomerSink
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Datasets. */
    var Datasets = /** @class */ (function () {
        /**
         * Create a Datasets.
         * @param {DataFactoryManagementClientContext} client Reference to the service client.
         */
        function Datasets(client) {
            this.client = client;
        }
        Datasets.prototype.listByFactory = function (resourceGroupName$$1, factoryName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                options: options
            }, listByFactoryOperationSpec$2, callback);
        };
        Datasets.prototype.createOrUpdate = function (resourceGroupName$$1, factoryName$$1, datasetName$$1, dataset, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                datasetName: datasetName$$1,
                dataset: dataset,
                options: options
            }, createOrUpdateOperationSpec$3, callback);
        };
        Datasets.prototype.get = function (resourceGroupName$$1, factoryName$$1, datasetName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                datasetName: datasetName$$1,
                options: options
            }, getOperationSpec$4, callback);
        };
        Datasets.prototype.deleteMethod = function (resourceGroupName$$1, factoryName$$1, datasetName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                datasetName: datasetName$$1,
                options: options
            }, deleteMethodOperationSpec$4, callback);
        };
        Datasets.prototype.listByFactoryNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByFactoryNextOperationSpec$2, callback);
        };
        return Datasets;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var listByFactoryOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/datasets",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatasetListResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var createOrUpdateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/datasets/{datasetName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            datasetName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "dataset",
            mapper: __assign({}, DatasetResource, { required: true })
        },
        responses: {
            200: {
                bodyMapper: DatasetResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/datasets/{datasetName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            datasetName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifNoneMatch,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatasetResource
            },
            304: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var deleteMethodOperationSpec$4 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/datasets/{datasetName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            datasetName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var listByFactoryNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatasetListResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        PipelineListResponse: PipelineListResponse,
        PipelineResource: PipelineResource,
        SubResource: SubResource,
        BaseResource: BaseResource,
        Activity: Activity,
        ActivityDependency: ActivityDependency,
        UserProperty: UserProperty,
        ParameterSpecification: ParameterSpecification,
        VariableSpecification: VariableSpecification,
        PipelineFolder: PipelineFolder,
        CloudError: CloudError,
        CreateRunResponse: CreateRunResponse,
        Resource: Resource,
        Factory: Factory,
        FactoryIdentity: FactoryIdentity,
        FactoryRepoConfiguration: FactoryRepoConfiguration,
        IntegrationRuntimeResource: IntegrationRuntimeResource,
        IntegrationRuntime: IntegrationRuntime,
        LinkedServiceResource: LinkedServiceResource,
        LinkedService: LinkedService,
        IntegrationRuntimeReference: IntegrationRuntimeReference,
        DatasetResource: DatasetResource,
        Dataset: Dataset,
        LinkedServiceReference: LinkedServiceReference,
        DatasetFolder: DatasetFolder,
        TriggerResource: TriggerResource,
        Trigger: Trigger,
        FactoryVSTSConfiguration: FactoryVSTSConfiguration,
        FactoryGitHubConfiguration: FactoryGitHubConfiguration,
        RerunTumblingWindowTrigger: RerunTumblingWindowTrigger,
        RerunTriggerResource: RerunTriggerResource,
        TumblingWindowTrigger: TumblingWindowTrigger,
        TriggerPipelineReference: TriggerPipelineReference,
        PipelineReference: PipelineReference,
        RetryPolicy: RetryPolicy,
        DependencyReference: DependencyReference,
        MultiplePipelineTrigger: MultiplePipelineTrigger,
        ResponsysLinkedService: ResponsysLinkedService,
        SecretBase: SecretBase,
        AzureDatabricksLinkedService: AzureDatabricksLinkedService,
        AzureDataLakeAnalyticsLinkedService: AzureDataLakeAnalyticsLinkedService,
        HDInsightOnDemandLinkedService: HDInsightOnDemandLinkedService,
        ScriptAction: ScriptAction,
        SalesforceMarketingCloudLinkedService: SalesforceMarketingCloudLinkedService,
        NetezzaLinkedService: NetezzaLinkedService,
        VerticaLinkedService: VerticaLinkedService,
        ZohoLinkedService: ZohoLinkedService,
        XeroLinkedService: XeroLinkedService,
        SquareLinkedService: SquareLinkedService,
        SparkLinkedService: SparkLinkedService,
        ShopifyLinkedService: ShopifyLinkedService,
        ServiceNowLinkedService: ServiceNowLinkedService,
        QuickBooksLinkedService: QuickBooksLinkedService,
        PrestoLinkedService: PrestoLinkedService,
        PhoenixLinkedService: PhoenixLinkedService,
        PaypalLinkedService: PaypalLinkedService,
        MarketoLinkedService: MarketoLinkedService,
        MariaDBLinkedService: MariaDBLinkedService,
        MagentoLinkedService: MagentoLinkedService,
        JiraLinkedService: JiraLinkedService,
        ImpalaLinkedService: ImpalaLinkedService,
        HubspotLinkedService: HubspotLinkedService,
        HiveLinkedService: HiveLinkedService,
        HBaseLinkedService: HBaseLinkedService,
        GreenplumLinkedService: GreenplumLinkedService,
        GoogleBigQueryLinkedService: GoogleBigQueryLinkedService,
        GoogleAdWordsLinkedService: GoogleAdWordsLinkedService,
        EloquaLinkedService: EloquaLinkedService,
        DrillLinkedService: DrillLinkedService,
        CouchbaseLinkedService: CouchbaseLinkedService,
        ConcurLinkedService: ConcurLinkedService,
        AzurePostgreSqlLinkedService: AzurePostgreSqlLinkedService,
        AmazonMWSLinkedService: AmazonMWSLinkedService,
        SapHanaLinkedService: SapHanaLinkedService,
        SapBWLinkedService: SapBWLinkedService,
        SftpServerLinkedService: SftpServerLinkedService,
        FtpServerLinkedService: FtpServerLinkedService,
        RestServiceLinkedService: RestServiceLinkedService,
        HttpLinkedService: HttpLinkedService,
        AzureSearchLinkedService: AzureSearchLinkedService,
        CustomDataSourceLinkedService: CustomDataSourceLinkedService,
        AmazonRedshiftLinkedService: AmazonRedshiftLinkedService,
        AmazonS3LinkedService: AmazonS3LinkedService,
        SapEccLinkedService: SapEccLinkedService,
        SapCloudForCustomerLinkedService: SapCloudForCustomerLinkedService,
        SalesforceLinkedService: SalesforceLinkedService,
        AzureDataLakeStoreLinkedService: AzureDataLakeStoreLinkedService,
        MongoDbLinkedService: MongoDbLinkedService,
        CassandraLinkedService: CassandraLinkedService,
        WebLinkedService: WebLinkedService,
        WebLinkedServiceTypeProperties: WebLinkedServiceTypeProperties,
        ODataLinkedService: ODataLinkedService,
        HdfsLinkedService: HdfsLinkedService,
        OdbcLinkedService: OdbcLinkedService,
        AzureMLLinkedService: AzureMLLinkedService,
        TeradataLinkedService: TeradataLinkedService,
        Db2LinkedService: Db2LinkedService,
        SybaseLinkedService: SybaseLinkedService,
        PostgreSqlLinkedService: PostgreSqlLinkedService,
        MySqlLinkedService: MySqlLinkedService,
        AzureMySqlLinkedService: AzureMySqlLinkedService,
        OracleServiceCloudLinkedService: OracleServiceCloudLinkedService,
        OracleLinkedService: OracleLinkedService,
        FileServerLinkedService: FileServerLinkedService,
        HDInsightLinkedService: HDInsightLinkedService,
        DynamicsAXLinkedService: DynamicsAXLinkedService,
        DynamicsLinkedService: DynamicsLinkedService,
        CosmosDbLinkedService: CosmosDbLinkedService,
        AzureKeyVaultLinkedService: AzureKeyVaultLinkedService,
        AzureBatchLinkedService: AzureBatchLinkedService,
        AzureSqlDatabaseLinkedService: AzureSqlDatabaseLinkedService,
        SqlServerLinkedService: SqlServerLinkedService,
        AzureSqlDWLinkedService: AzureSqlDWLinkedService,
        AzureTableStorageLinkedService: AzureTableStorageLinkedService,
        AzureBlobStorageLinkedService: AzureBlobStorageLinkedService,
        AzureStorageLinkedService: AzureStorageLinkedService,
        ResponsysObjectDataset: ResponsysObjectDataset,
        SalesforceMarketingCloudObjectDataset: SalesforceMarketingCloudObjectDataset,
        VerticaTableDataset: VerticaTableDataset,
        NetezzaTableDataset: NetezzaTableDataset,
        ZohoObjectDataset: ZohoObjectDataset,
        XeroObjectDataset: XeroObjectDataset,
        SquareObjectDataset: SquareObjectDataset,
        SparkObjectDataset: SparkObjectDataset,
        ShopifyObjectDataset: ShopifyObjectDataset,
        ServiceNowObjectDataset: ServiceNowObjectDataset,
        QuickBooksObjectDataset: QuickBooksObjectDataset,
        PrestoObjectDataset: PrestoObjectDataset,
        PhoenixObjectDataset: PhoenixObjectDataset,
        PaypalObjectDataset: PaypalObjectDataset,
        MarketoObjectDataset: MarketoObjectDataset,
        MariaDBTableDataset: MariaDBTableDataset,
        MagentoObjectDataset: MagentoObjectDataset,
        JiraObjectDataset: JiraObjectDataset,
        ImpalaObjectDataset: ImpalaObjectDataset,
        HubspotObjectDataset: HubspotObjectDataset,
        HiveObjectDataset: HiveObjectDataset,
        HBaseObjectDataset: HBaseObjectDataset,
        GreenplumTableDataset: GreenplumTableDataset,
        GoogleBigQueryObjectDataset: GoogleBigQueryObjectDataset,
        GoogleAdWordsObjectDataset: GoogleAdWordsObjectDataset,
        EloquaObjectDataset: EloquaObjectDataset,
        DrillTableDataset: DrillTableDataset,
        CouchbaseTableDataset: CouchbaseTableDataset,
        ConcurObjectDataset: ConcurObjectDataset,
        AzurePostgreSqlTableDataset: AzurePostgreSqlTableDataset,
        AmazonMWSObjectDataset: AmazonMWSObjectDataset,
        RestServiceDataset: RestServiceDataset,
        HttpDataset: HttpDataset,
        DatasetStorageFormat: DatasetStorageFormat,
        DatasetCompression: DatasetCompression,
        AzureSearchIndexDataset: AzureSearchIndexDataset,
        WebTableDataset: WebTableDataset,
        SqlServerTableDataset: SqlServerTableDataset,
        SapEccResourceDataset: SapEccResourceDataset,
        SapCloudForCustomerResourceDataset: SapCloudForCustomerResourceDataset,
        SalesforceObjectDataset: SalesforceObjectDataset,
        RelationalTableDataset: RelationalTableDataset,
        AzureMySqlTableDataset: AzureMySqlTableDataset,
        OracleServiceCloudObjectDataset: OracleServiceCloudObjectDataset,
        OracleTableDataset: OracleTableDataset,
        ODataResourceDataset: ODataResourceDataset,
        MongoDbCollectionDataset: MongoDbCollectionDataset,
        FileShareDataset: FileShareDataset,
        AzureDataLakeStoreDataset: AzureDataLakeStoreDataset,
        DynamicsAXResourceDataset: DynamicsAXResourceDataset,
        DynamicsEntityDataset: DynamicsEntityDataset,
        DocumentDbCollectionDataset: DocumentDbCollectionDataset,
        CustomDataset: CustomDataset,
        CassandraTableDataset: CassandraTableDataset,
        AzureSqlDWTableDataset: AzureSqlDWTableDataset,
        AzureSqlTableDataset: AzureSqlTableDataset,
        AzureTableDataset: AzureTableDataset,
        AzureBlobDataset: AzureBlobDataset,
        AmazonS3Dataset: AmazonS3Dataset,
        ExecutionActivity: ExecutionActivity,
        ActivityPolicy: ActivityPolicy,
        ControlActivity: ControlActivity,
        SelfHostedIntegrationRuntime: SelfHostedIntegrationRuntime,
        LinkedIntegrationRuntimeType: LinkedIntegrationRuntimeType,
        ManagedIntegrationRuntime: ManagedIntegrationRuntime,
        IntegrationRuntimeComputeProperties: IntegrationRuntimeComputeProperties,
        IntegrationRuntimeVNetProperties: IntegrationRuntimeVNetProperties,
        IntegrationRuntimeSsisProperties: IntegrationRuntimeSsisProperties,
        IntegrationRuntimeSsisCatalogInfo: IntegrationRuntimeSsisCatalogInfo,
        SecureString: SecureString,
        IntegrationRuntimeCustomSetupScriptProperties: IntegrationRuntimeCustomSetupScriptProperties,
        AzureKeyVaultSecretReference: AzureKeyVaultSecretReference,
        SelfDependencyTumblingWindowTriggerReference: SelfDependencyTumblingWindowTriggerReference,
        TriggerDependencyReference: TriggerDependencyReference,
        TriggerReference: TriggerReference,
        BlobEventsTrigger: BlobEventsTrigger,
        BlobTrigger: BlobTrigger,
        ScheduleTrigger: ScheduleTrigger,
        ScheduleTriggerRecurrence: ScheduleTriggerRecurrence,
        RecurrenceSchedule: RecurrenceSchedule,
        RecurrenceScheduleOccurrence: RecurrenceScheduleOccurrence,
        WebClientCertificateAuthentication: WebClientCertificateAuthentication,
        WebBasicAuthentication: WebBasicAuthentication,
        WebAnonymousAuthentication: WebAnonymousAuthentication,
        DatasetZipDeflateCompression: DatasetZipDeflateCompression,
        DatasetDeflateCompression: DatasetDeflateCompression,
        DatasetGZipCompression: DatasetGZipCompression,
        DatasetBZip2Compression: DatasetBZip2Compression,
        ParquetFormat: ParquetFormat,
        OrcFormat: OrcFormat,
        AvroFormat: AvroFormat,
        JsonFormat: JsonFormat,
        TextFormat: TextFormat,
        DatabricksSparkPythonActivity: DatabricksSparkPythonActivity,
        DatabricksSparkJarActivity: DatabricksSparkJarActivity,
        DatabricksNotebookActivity: DatabricksNotebookActivity,
        DataLakeAnalyticsUSQLActivity: DataLakeAnalyticsUSQLActivity,
        AzureMLUpdateResourceActivity: AzureMLUpdateResourceActivity,
        AzureMLBatchExecutionActivity: AzureMLBatchExecutionActivity,
        AzureMLWebServiceFile: AzureMLWebServiceFile,
        GetMetadataActivity: GetMetadataActivity,
        DatasetReference: DatasetReference,
        WebActivity: WebActivity,
        WebActivityAuthentication: WebActivityAuthentication,
        LookupActivity: LookupActivity,
        CopySource: CopySource,
        SqlServerStoredProcedureActivity: SqlServerStoredProcedureActivity,
        StoredProcedureParameter: StoredProcedureParameter,
        CustomActivity: CustomActivity,
        CustomActivityReferenceObject: CustomActivityReferenceObject,
        ExecuteSSISPackageActivity: ExecuteSSISPackageActivity,
        SSISPackageLocation: SSISPackageLocation,
        SSISExecutionParameter: SSISExecutionParameter,
        SSISPropertyOverride: SSISPropertyOverride,
        HDInsightSparkActivity: HDInsightSparkActivity,
        HDInsightStreamingActivity: HDInsightStreamingActivity,
        HDInsightMapReduceActivity: HDInsightMapReduceActivity,
        HDInsightPigActivity: HDInsightPigActivity,
        HDInsightHiveActivity: HDInsightHiveActivity,
        CopyActivity: CopyActivity,
        CopySink: CopySink,
        CopyTranslator: CopyTranslator,
        StagingSettings: StagingSettings,
        RedirectIncompatibleRowSettings: RedirectIncompatibleRowSettings,
        AppendVariableActivity: AppendVariableActivity,
        SetVariableActivity: SetVariableActivity,
        FilterActivity: FilterActivity,
        Expression: Expression,
        UntilActivity: UntilActivity,
        WaitActivity: WaitActivity,
        ForEachActivity: ForEachActivity,
        IfConditionActivity: IfConditionActivity,
        ExecutePipelineActivity: ExecutePipelineActivity,
        LinkedIntegrationRuntimeRbacAuthorization: LinkedIntegrationRuntimeRbacAuthorization,
        LinkedIntegrationRuntimeKeyAuthorization: LinkedIntegrationRuntimeKeyAuthorization,
        TumblingWindowTriggerDependencyReference: TumblingWindowTriggerDependencyReference,
        AmazonRedshiftSource: AmazonRedshiftSource,
        RedshiftUnloadSettings: RedshiftUnloadSettings,
        ResponsysSource: ResponsysSource,
        SalesforceMarketingCloudSource: SalesforceMarketingCloudSource,
        VerticaSource: VerticaSource,
        NetezzaSource: NetezzaSource,
        ZohoSource: ZohoSource,
        XeroSource: XeroSource,
        SquareSource: SquareSource,
        SparkSource: SparkSource,
        ShopifySource: ShopifySource,
        ServiceNowSource: ServiceNowSource,
        QuickBooksSource: QuickBooksSource,
        PrestoSource: PrestoSource,
        PhoenixSource: PhoenixSource,
        PaypalSource: PaypalSource,
        MarketoSource: MarketoSource,
        MariaDBSource: MariaDBSource,
        MagentoSource: MagentoSource,
        JiraSource: JiraSource,
        ImpalaSource: ImpalaSource,
        HubspotSource: HubspotSource,
        HiveSource: HiveSource,
        HBaseSource: HBaseSource,
        GreenplumSource: GreenplumSource,
        GoogleBigQuerySource: GoogleBigQuerySource,
        GoogleAdWordsSource: GoogleAdWordsSource,
        EloquaSource: EloquaSource,
        DrillSource: DrillSource,
        CouchbaseSource: CouchbaseSource,
        ConcurSource: ConcurSource,
        AzurePostgreSqlSource: AzurePostgreSqlSource,
        AmazonMWSSource: AmazonMWSSource,
        RestServiceSource: RestServiceSource,
        HttpSource: HttpSource,
        AzureDataLakeStoreSource: AzureDataLakeStoreSource,
        MongoDbSource: MongoDbSource,
        CassandraSource: CassandraSource,
        WebSource: WebSource,
        OracleServiceCloudSource: OracleServiceCloudSource,
        OracleSource: OracleSource,
        AzureMySqlSource: AzureMySqlSource,
        HdfsSource: HdfsSource,
        DistcpSettings: DistcpSettings,
        FileSystemSource: FileSystemSource,
        SqlDWSource: SqlDWSource,
        SqlSource: SqlSource,
        SapEccSource: SapEccSource,
        SapCloudForCustomerSource: SapCloudForCustomerSource,
        SalesforceSource: SalesforceSource,
        RelationalSource: RelationalSource,
        DynamicsAXSource: DynamicsAXSource,
        DynamicsSource: DynamicsSource,
        DocumentDbCollectionSource: DocumentDbCollectionSource,
        BlobSource: BlobSource,
        AzureTableSource: AzureTableSource,
        TabularTranslator: TabularTranslator,
        SalesforceSink: SalesforceSink,
        DynamicsSink: DynamicsSink,
        OdbcSink: OdbcSink,
        AzureSearchIndexSink: AzureSearchIndexSink,
        AzureDataLakeStoreSink: AzureDataLakeStoreSink,
        OracleSink: OracleSink,
        SqlDWSink: SqlDWSink,
        PolybaseSettings: PolybaseSettings,
        SqlSink: SqlSink,
        DocumentDbCollectionSink: DocumentDbCollectionSink,
        FileSystemSink: FileSystemSink,
        BlobSink: BlobSink,
        AzureTableSink: AzureTableSink,
        AzureQueueSink: AzureQueueSink,
        SapCloudForCustomerSink: SapCloudForCustomerSink
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Pipelines. */
    var Pipelines = /** @class */ (function () {
        /**
         * Create a Pipelines.
         * @param {DataFactoryManagementClientContext} client Reference to the service client.
         */
        function Pipelines(client) {
            this.client = client;
        }
        Pipelines.prototype.listByFactory = function (resourceGroupName$$1, factoryName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                options: options
            }, listByFactoryOperationSpec$3, callback);
        };
        Pipelines.prototype.createOrUpdate = function (resourceGroupName$$1, factoryName$$1, pipelineName$$1, pipelineParameter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                pipelineName: pipelineName$$1,
                pipelineParameter: pipelineParameter,
                options: options
            }, createOrUpdateOperationSpec$4, callback);
        };
        Pipelines.prototype.get = function (resourceGroupName$$1, factoryName$$1, pipelineName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                pipelineName: pipelineName$$1,
                options: options
            }, getOperationSpec$5, callback);
        };
        Pipelines.prototype.deleteMethod = function (resourceGroupName$$1, factoryName$$1, pipelineName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                pipelineName: pipelineName$$1,
                options: options
            }, deleteMethodOperationSpec$5, callback);
        };
        Pipelines.prototype.createRun = function (resourceGroupName$$1, factoryName$$1, pipelineName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                pipelineName: pipelineName$$1,
                options: options
            }, createRunOperationSpec, callback);
        };
        Pipelines.prototype.listByFactoryNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByFactoryNextOperationSpec$3, callback);
        };
        return Pipelines;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var listByFactoryOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PipelineListResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var createOrUpdateOperationSpec$4 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines/{pipelineName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            pipelineName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "pipelineParameter",
            mapper: __assign({}, PipelineResource, { required: true })
        },
        responses: {
            200: {
                bodyMapper: PipelineResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var getOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines/{pipelineName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            pipelineName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifNoneMatch,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PipelineResource
            },
            304: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var deleteMethodOperationSpec$5 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines/{pipelineName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            pipelineName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var createRunOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines/{pipelineName}/createRun",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            pipelineName
        ],
        queryParameters: [
            apiVersion,
            referencePipelineRunId
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "parameters"
            ],
            mapper: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Object"
                        }
                    }
                }
            }
        },
        responses: {
            200: {
                bodyMapper: CreateRunResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listByFactoryNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PipelineListResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        RunFilterParameters: RunFilterParameters,
        RunQueryFilter: RunQueryFilter,
        RunQueryOrderBy: RunQueryOrderBy,
        PipelineRunsQueryResponse: PipelineRunsQueryResponse,
        PipelineRun: PipelineRun,
        PipelineRunInvokedBy: PipelineRunInvokedBy,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a PipelineRuns. */
    var PipelineRuns = /** @class */ (function () {
        /**
         * Create a PipelineRuns.
         * @param {DataFactoryManagementClientContext} client Reference to the service client.
         */
        function PipelineRuns(client) {
            this.client = client;
        }
        PipelineRuns.prototype.queryByFactory = function (resourceGroupName$$1, factoryName$$1, filterParameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                filterParameters: filterParameters,
                options: options
            }, queryByFactoryOperationSpec, callback);
        };
        PipelineRuns.prototype.get = function (resourceGroupName$$1, factoryName$$1, runId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                runId: runId$$1,
                options: options
            }, getOperationSpec$6, callback);
        };
        PipelineRuns.prototype.cancel = function (resourceGroupName$$1, factoryName$$1, runId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                runId: runId$$1,
                options: options
            }, cancelOperationSpec, callback);
        };
        return PipelineRuns;
    }());
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers$7);
    var queryByFactoryOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/queryPipelineRuns",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "filterParameters",
            mapper: __assign({}, RunFilterParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: PipelineRunsQueryResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var getOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelineruns/{runId}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            runId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PipelineRun
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var cancelOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelineruns/{runId}/cancel",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            runId
        ],
        queryParameters: [
            isRecursive,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$8 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        RunFilterParameters: RunFilterParameters,
        RunQueryFilter: RunQueryFilter,
        RunQueryOrderBy: RunQueryOrderBy,
        ActivityRunsQueryResponse: ActivityRunsQueryResponse,
        ActivityRun: ActivityRun,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ActivityRuns. */
    var ActivityRuns = /** @class */ (function () {
        /**
         * Create a ActivityRuns.
         * @param {DataFactoryManagementClientContext} client Reference to the service client.
         */
        function ActivityRuns(client) {
            this.client = client;
        }
        ActivityRuns.prototype.queryByPipelineRun = function (resourceGroupName$$1, factoryName$$1, runId$$1, filterParameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                runId: runId$$1,
                filterParameters: filterParameters,
                options: options
            }, queryByPipelineRunOperationSpec, callback);
        };
        return ActivityRuns;
    }());
    // Operation Specifications
    var serializer$8 = new msRest.Serializer(Mappers$8);
    var queryByPipelineRunOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelineruns/{runId}/queryActivityruns",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            runId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "filterParameters",
            mapper: __assign({}, RunFilterParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ActivityRunsQueryResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$9 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        TriggerListResponse: TriggerListResponse,
        TriggerResource: TriggerResource,
        SubResource: SubResource,
        BaseResource: BaseResource,
        Trigger: Trigger,
        CloudError: CloudError,
        Resource: Resource,
        Factory: Factory,
        FactoryIdentity: FactoryIdentity,
        FactoryRepoConfiguration: FactoryRepoConfiguration,
        IntegrationRuntimeResource: IntegrationRuntimeResource,
        IntegrationRuntime: IntegrationRuntime,
        LinkedServiceResource: LinkedServiceResource,
        LinkedService: LinkedService,
        IntegrationRuntimeReference: IntegrationRuntimeReference,
        ParameterSpecification: ParameterSpecification,
        DatasetResource: DatasetResource,
        Dataset: Dataset,
        LinkedServiceReference: LinkedServiceReference,
        DatasetFolder: DatasetFolder,
        PipelineResource: PipelineResource,
        Activity: Activity,
        ActivityDependency: ActivityDependency,
        UserProperty: UserProperty,
        VariableSpecification: VariableSpecification,
        PipelineFolder: PipelineFolder,
        FactoryVSTSConfiguration: FactoryVSTSConfiguration,
        FactoryGitHubConfiguration: FactoryGitHubConfiguration,
        RerunTumblingWindowTrigger: RerunTumblingWindowTrigger,
        RerunTriggerResource: RerunTriggerResource,
        TumblingWindowTrigger: TumblingWindowTrigger,
        TriggerPipelineReference: TriggerPipelineReference,
        PipelineReference: PipelineReference,
        RetryPolicy: RetryPolicy,
        DependencyReference: DependencyReference,
        MultiplePipelineTrigger: MultiplePipelineTrigger,
        ResponsysLinkedService: ResponsysLinkedService,
        SecretBase: SecretBase,
        AzureDatabricksLinkedService: AzureDatabricksLinkedService,
        AzureDataLakeAnalyticsLinkedService: AzureDataLakeAnalyticsLinkedService,
        HDInsightOnDemandLinkedService: HDInsightOnDemandLinkedService,
        ScriptAction: ScriptAction,
        SalesforceMarketingCloudLinkedService: SalesforceMarketingCloudLinkedService,
        NetezzaLinkedService: NetezzaLinkedService,
        VerticaLinkedService: VerticaLinkedService,
        ZohoLinkedService: ZohoLinkedService,
        XeroLinkedService: XeroLinkedService,
        SquareLinkedService: SquareLinkedService,
        SparkLinkedService: SparkLinkedService,
        ShopifyLinkedService: ShopifyLinkedService,
        ServiceNowLinkedService: ServiceNowLinkedService,
        QuickBooksLinkedService: QuickBooksLinkedService,
        PrestoLinkedService: PrestoLinkedService,
        PhoenixLinkedService: PhoenixLinkedService,
        PaypalLinkedService: PaypalLinkedService,
        MarketoLinkedService: MarketoLinkedService,
        MariaDBLinkedService: MariaDBLinkedService,
        MagentoLinkedService: MagentoLinkedService,
        JiraLinkedService: JiraLinkedService,
        ImpalaLinkedService: ImpalaLinkedService,
        HubspotLinkedService: HubspotLinkedService,
        HiveLinkedService: HiveLinkedService,
        HBaseLinkedService: HBaseLinkedService,
        GreenplumLinkedService: GreenplumLinkedService,
        GoogleBigQueryLinkedService: GoogleBigQueryLinkedService,
        GoogleAdWordsLinkedService: GoogleAdWordsLinkedService,
        EloquaLinkedService: EloquaLinkedService,
        DrillLinkedService: DrillLinkedService,
        CouchbaseLinkedService: CouchbaseLinkedService,
        ConcurLinkedService: ConcurLinkedService,
        AzurePostgreSqlLinkedService: AzurePostgreSqlLinkedService,
        AmazonMWSLinkedService: AmazonMWSLinkedService,
        SapHanaLinkedService: SapHanaLinkedService,
        SapBWLinkedService: SapBWLinkedService,
        SftpServerLinkedService: SftpServerLinkedService,
        FtpServerLinkedService: FtpServerLinkedService,
        RestServiceLinkedService: RestServiceLinkedService,
        HttpLinkedService: HttpLinkedService,
        AzureSearchLinkedService: AzureSearchLinkedService,
        CustomDataSourceLinkedService: CustomDataSourceLinkedService,
        AmazonRedshiftLinkedService: AmazonRedshiftLinkedService,
        AmazonS3LinkedService: AmazonS3LinkedService,
        SapEccLinkedService: SapEccLinkedService,
        SapCloudForCustomerLinkedService: SapCloudForCustomerLinkedService,
        SalesforceLinkedService: SalesforceLinkedService,
        AzureDataLakeStoreLinkedService: AzureDataLakeStoreLinkedService,
        MongoDbLinkedService: MongoDbLinkedService,
        CassandraLinkedService: CassandraLinkedService,
        WebLinkedService: WebLinkedService,
        WebLinkedServiceTypeProperties: WebLinkedServiceTypeProperties,
        ODataLinkedService: ODataLinkedService,
        HdfsLinkedService: HdfsLinkedService,
        OdbcLinkedService: OdbcLinkedService,
        AzureMLLinkedService: AzureMLLinkedService,
        TeradataLinkedService: TeradataLinkedService,
        Db2LinkedService: Db2LinkedService,
        SybaseLinkedService: SybaseLinkedService,
        PostgreSqlLinkedService: PostgreSqlLinkedService,
        MySqlLinkedService: MySqlLinkedService,
        AzureMySqlLinkedService: AzureMySqlLinkedService,
        OracleServiceCloudLinkedService: OracleServiceCloudLinkedService,
        OracleLinkedService: OracleLinkedService,
        FileServerLinkedService: FileServerLinkedService,
        HDInsightLinkedService: HDInsightLinkedService,
        DynamicsAXLinkedService: DynamicsAXLinkedService,
        DynamicsLinkedService: DynamicsLinkedService,
        CosmosDbLinkedService: CosmosDbLinkedService,
        AzureKeyVaultLinkedService: AzureKeyVaultLinkedService,
        AzureBatchLinkedService: AzureBatchLinkedService,
        AzureSqlDatabaseLinkedService: AzureSqlDatabaseLinkedService,
        SqlServerLinkedService: SqlServerLinkedService,
        AzureSqlDWLinkedService: AzureSqlDWLinkedService,
        AzureTableStorageLinkedService: AzureTableStorageLinkedService,
        AzureBlobStorageLinkedService: AzureBlobStorageLinkedService,
        AzureStorageLinkedService: AzureStorageLinkedService,
        ResponsysObjectDataset: ResponsysObjectDataset,
        SalesforceMarketingCloudObjectDataset: SalesforceMarketingCloudObjectDataset,
        VerticaTableDataset: VerticaTableDataset,
        NetezzaTableDataset: NetezzaTableDataset,
        ZohoObjectDataset: ZohoObjectDataset,
        XeroObjectDataset: XeroObjectDataset,
        SquareObjectDataset: SquareObjectDataset,
        SparkObjectDataset: SparkObjectDataset,
        ShopifyObjectDataset: ShopifyObjectDataset,
        ServiceNowObjectDataset: ServiceNowObjectDataset,
        QuickBooksObjectDataset: QuickBooksObjectDataset,
        PrestoObjectDataset: PrestoObjectDataset,
        PhoenixObjectDataset: PhoenixObjectDataset,
        PaypalObjectDataset: PaypalObjectDataset,
        MarketoObjectDataset: MarketoObjectDataset,
        MariaDBTableDataset: MariaDBTableDataset,
        MagentoObjectDataset: MagentoObjectDataset,
        JiraObjectDataset: JiraObjectDataset,
        ImpalaObjectDataset: ImpalaObjectDataset,
        HubspotObjectDataset: HubspotObjectDataset,
        HiveObjectDataset: HiveObjectDataset,
        HBaseObjectDataset: HBaseObjectDataset,
        GreenplumTableDataset: GreenplumTableDataset,
        GoogleBigQueryObjectDataset: GoogleBigQueryObjectDataset,
        GoogleAdWordsObjectDataset: GoogleAdWordsObjectDataset,
        EloquaObjectDataset: EloquaObjectDataset,
        DrillTableDataset: DrillTableDataset,
        CouchbaseTableDataset: CouchbaseTableDataset,
        ConcurObjectDataset: ConcurObjectDataset,
        AzurePostgreSqlTableDataset: AzurePostgreSqlTableDataset,
        AmazonMWSObjectDataset: AmazonMWSObjectDataset,
        RestServiceDataset: RestServiceDataset,
        HttpDataset: HttpDataset,
        DatasetStorageFormat: DatasetStorageFormat,
        DatasetCompression: DatasetCompression,
        AzureSearchIndexDataset: AzureSearchIndexDataset,
        WebTableDataset: WebTableDataset,
        SqlServerTableDataset: SqlServerTableDataset,
        SapEccResourceDataset: SapEccResourceDataset,
        SapCloudForCustomerResourceDataset: SapCloudForCustomerResourceDataset,
        SalesforceObjectDataset: SalesforceObjectDataset,
        RelationalTableDataset: RelationalTableDataset,
        AzureMySqlTableDataset: AzureMySqlTableDataset,
        OracleServiceCloudObjectDataset: OracleServiceCloudObjectDataset,
        OracleTableDataset: OracleTableDataset,
        ODataResourceDataset: ODataResourceDataset,
        MongoDbCollectionDataset: MongoDbCollectionDataset,
        FileShareDataset: FileShareDataset,
        AzureDataLakeStoreDataset: AzureDataLakeStoreDataset,
        DynamicsAXResourceDataset: DynamicsAXResourceDataset,
        DynamicsEntityDataset: DynamicsEntityDataset,
        DocumentDbCollectionDataset: DocumentDbCollectionDataset,
        CustomDataset: CustomDataset,
        CassandraTableDataset: CassandraTableDataset,
        AzureSqlDWTableDataset: AzureSqlDWTableDataset,
        AzureSqlTableDataset: AzureSqlTableDataset,
        AzureTableDataset: AzureTableDataset,
        AzureBlobDataset: AzureBlobDataset,
        AmazonS3Dataset: AmazonS3Dataset,
        ExecutionActivity: ExecutionActivity,
        ActivityPolicy: ActivityPolicy,
        ControlActivity: ControlActivity,
        SelfHostedIntegrationRuntime: SelfHostedIntegrationRuntime,
        LinkedIntegrationRuntimeType: LinkedIntegrationRuntimeType,
        ManagedIntegrationRuntime: ManagedIntegrationRuntime,
        IntegrationRuntimeComputeProperties: IntegrationRuntimeComputeProperties,
        IntegrationRuntimeVNetProperties: IntegrationRuntimeVNetProperties,
        IntegrationRuntimeSsisProperties: IntegrationRuntimeSsisProperties,
        IntegrationRuntimeSsisCatalogInfo: IntegrationRuntimeSsisCatalogInfo,
        SecureString: SecureString,
        IntegrationRuntimeCustomSetupScriptProperties: IntegrationRuntimeCustomSetupScriptProperties,
        AzureKeyVaultSecretReference: AzureKeyVaultSecretReference,
        SelfDependencyTumblingWindowTriggerReference: SelfDependencyTumblingWindowTriggerReference,
        TriggerDependencyReference: TriggerDependencyReference,
        TriggerReference: TriggerReference,
        BlobEventsTrigger: BlobEventsTrigger,
        BlobTrigger: BlobTrigger,
        ScheduleTrigger: ScheduleTrigger,
        ScheduleTriggerRecurrence: ScheduleTriggerRecurrence,
        RecurrenceSchedule: RecurrenceSchedule,
        RecurrenceScheduleOccurrence: RecurrenceScheduleOccurrence,
        WebClientCertificateAuthentication: WebClientCertificateAuthentication,
        WebBasicAuthentication: WebBasicAuthentication,
        WebAnonymousAuthentication: WebAnonymousAuthentication,
        DatasetZipDeflateCompression: DatasetZipDeflateCompression,
        DatasetDeflateCompression: DatasetDeflateCompression,
        DatasetGZipCompression: DatasetGZipCompression,
        DatasetBZip2Compression: DatasetBZip2Compression,
        ParquetFormat: ParquetFormat,
        OrcFormat: OrcFormat,
        AvroFormat: AvroFormat,
        JsonFormat: JsonFormat,
        TextFormat: TextFormat,
        DatabricksSparkPythonActivity: DatabricksSparkPythonActivity,
        DatabricksSparkJarActivity: DatabricksSparkJarActivity,
        DatabricksNotebookActivity: DatabricksNotebookActivity,
        DataLakeAnalyticsUSQLActivity: DataLakeAnalyticsUSQLActivity,
        AzureMLUpdateResourceActivity: AzureMLUpdateResourceActivity,
        AzureMLBatchExecutionActivity: AzureMLBatchExecutionActivity,
        AzureMLWebServiceFile: AzureMLWebServiceFile,
        GetMetadataActivity: GetMetadataActivity,
        DatasetReference: DatasetReference,
        WebActivity: WebActivity,
        WebActivityAuthentication: WebActivityAuthentication,
        LookupActivity: LookupActivity,
        CopySource: CopySource,
        SqlServerStoredProcedureActivity: SqlServerStoredProcedureActivity,
        StoredProcedureParameter: StoredProcedureParameter,
        CustomActivity: CustomActivity,
        CustomActivityReferenceObject: CustomActivityReferenceObject,
        ExecuteSSISPackageActivity: ExecuteSSISPackageActivity,
        SSISPackageLocation: SSISPackageLocation,
        SSISExecutionParameter: SSISExecutionParameter,
        SSISPropertyOverride: SSISPropertyOverride,
        HDInsightSparkActivity: HDInsightSparkActivity,
        HDInsightStreamingActivity: HDInsightStreamingActivity,
        HDInsightMapReduceActivity: HDInsightMapReduceActivity,
        HDInsightPigActivity: HDInsightPigActivity,
        HDInsightHiveActivity: HDInsightHiveActivity,
        CopyActivity: CopyActivity,
        CopySink: CopySink,
        CopyTranslator: CopyTranslator,
        StagingSettings: StagingSettings,
        RedirectIncompatibleRowSettings: RedirectIncompatibleRowSettings,
        AppendVariableActivity: AppendVariableActivity,
        SetVariableActivity: SetVariableActivity,
        FilterActivity: FilterActivity,
        Expression: Expression,
        UntilActivity: UntilActivity,
        WaitActivity: WaitActivity,
        ForEachActivity: ForEachActivity,
        IfConditionActivity: IfConditionActivity,
        ExecutePipelineActivity: ExecutePipelineActivity,
        LinkedIntegrationRuntimeRbacAuthorization: LinkedIntegrationRuntimeRbacAuthorization,
        LinkedIntegrationRuntimeKeyAuthorization: LinkedIntegrationRuntimeKeyAuthorization,
        TumblingWindowTriggerDependencyReference: TumblingWindowTriggerDependencyReference,
        AmazonRedshiftSource: AmazonRedshiftSource,
        RedshiftUnloadSettings: RedshiftUnloadSettings,
        ResponsysSource: ResponsysSource,
        SalesforceMarketingCloudSource: SalesforceMarketingCloudSource,
        VerticaSource: VerticaSource,
        NetezzaSource: NetezzaSource,
        ZohoSource: ZohoSource,
        XeroSource: XeroSource,
        SquareSource: SquareSource,
        SparkSource: SparkSource,
        ShopifySource: ShopifySource,
        ServiceNowSource: ServiceNowSource,
        QuickBooksSource: QuickBooksSource,
        PrestoSource: PrestoSource,
        PhoenixSource: PhoenixSource,
        PaypalSource: PaypalSource,
        MarketoSource: MarketoSource,
        MariaDBSource: MariaDBSource,
        MagentoSource: MagentoSource,
        JiraSource: JiraSource,
        ImpalaSource: ImpalaSource,
        HubspotSource: HubspotSource,
        HiveSource: HiveSource,
        HBaseSource: HBaseSource,
        GreenplumSource: GreenplumSource,
        GoogleBigQuerySource: GoogleBigQuerySource,
        GoogleAdWordsSource: GoogleAdWordsSource,
        EloquaSource: EloquaSource,
        DrillSource: DrillSource,
        CouchbaseSource: CouchbaseSource,
        ConcurSource: ConcurSource,
        AzurePostgreSqlSource: AzurePostgreSqlSource,
        AmazonMWSSource: AmazonMWSSource,
        RestServiceSource: RestServiceSource,
        HttpSource: HttpSource,
        AzureDataLakeStoreSource: AzureDataLakeStoreSource,
        MongoDbSource: MongoDbSource,
        CassandraSource: CassandraSource,
        WebSource: WebSource,
        OracleServiceCloudSource: OracleServiceCloudSource,
        OracleSource: OracleSource,
        AzureMySqlSource: AzureMySqlSource,
        HdfsSource: HdfsSource,
        DistcpSettings: DistcpSettings,
        FileSystemSource: FileSystemSource,
        SqlDWSource: SqlDWSource,
        SqlSource: SqlSource,
        SapEccSource: SapEccSource,
        SapCloudForCustomerSource: SapCloudForCustomerSource,
        SalesforceSource: SalesforceSource,
        RelationalSource: RelationalSource,
        DynamicsAXSource: DynamicsAXSource,
        DynamicsSource: DynamicsSource,
        DocumentDbCollectionSource: DocumentDbCollectionSource,
        BlobSource: BlobSource,
        AzureTableSource: AzureTableSource,
        TabularTranslator: TabularTranslator,
        SalesforceSink: SalesforceSink,
        DynamicsSink: DynamicsSink,
        OdbcSink: OdbcSink,
        AzureSearchIndexSink: AzureSearchIndexSink,
        AzureDataLakeStoreSink: AzureDataLakeStoreSink,
        OracleSink: OracleSink,
        SqlDWSink: SqlDWSink,
        PolybaseSettings: PolybaseSettings,
        SqlSink: SqlSink,
        DocumentDbCollectionSink: DocumentDbCollectionSink,
        FileSystemSink: FileSystemSink,
        BlobSink: BlobSink,
        AzureTableSink: AzureTableSink,
        AzureQueueSink: AzureQueueSink,
        SapCloudForCustomerSink: SapCloudForCustomerSink
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Triggers. */
    var Triggers = /** @class */ (function () {
        /**
         * Create a Triggers.
         * @param {DataFactoryManagementClientContext} client Reference to the service client.
         */
        function Triggers(client) {
            this.client = client;
        }
        Triggers.prototype.listByFactory = function (resourceGroupName$$1, factoryName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                options: options
            }, listByFactoryOperationSpec$4, callback);
        };
        Triggers.prototype.createOrUpdate = function (resourceGroupName$$1, factoryName$$1, triggerName$$1, trigger, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                triggerName: triggerName$$1,
                trigger: trigger,
                options: options
            }, createOrUpdateOperationSpec$5, callback);
        };
        Triggers.prototype.get = function (resourceGroupName$$1, factoryName$$1, triggerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                triggerName: triggerName$$1,
                options: options
            }, getOperationSpec$7, callback);
        };
        Triggers.prototype.deleteMethod = function (resourceGroupName$$1, factoryName$$1, triggerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                triggerName: triggerName$$1,
                options: options
            }, deleteMethodOperationSpec$6, callback);
        };
        /**
         * Starts a trigger.
         * @param resourceGroupName The resource group name.
         * @param factoryName The factory name.
         * @param triggerName The trigger name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Triggers.prototype.start = function (resourceGroupName$$1, factoryName$$1, triggerName$$1, options) {
            return this.beginStart(resourceGroupName$$1, factoryName$$1, triggerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Stops a trigger.
         * @param resourceGroupName The resource group name.
         * @param factoryName The factory name.
         * @param triggerName The trigger name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Triggers.prototype.stop = function (resourceGroupName$$1, factoryName$$1, triggerName$$1, options) {
            return this.beginStop(resourceGroupName$$1, factoryName$$1, triggerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Starts a trigger.
         * @param resourceGroupName The resource group name.
         * @param factoryName The factory name.
         * @param triggerName The trigger name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Triggers.prototype.beginStart = function (resourceGroupName$$1, factoryName$$1, triggerName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                triggerName: triggerName$$1,
                options: options
            }, beginStartOperationSpec$1, options);
        };
        /**
         * Stops a trigger.
         * @param resourceGroupName The resource group name.
         * @param factoryName The factory name.
         * @param triggerName The trigger name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Triggers.prototype.beginStop = function (resourceGroupName$$1, factoryName$$1, triggerName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                triggerName: triggerName$$1,
                options: options
            }, beginStopOperationSpec$1, options);
        };
        Triggers.prototype.listByFactoryNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByFactoryNextOperationSpec$4, callback);
        };
        return Triggers;
    }());
    // Operation Specifications
    var serializer$9 = new msRest.Serializer(Mappers$9);
    var listByFactoryOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TriggerListResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var createOrUpdateOperationSpec$5 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            triggerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "trigger",
            mapper: __assign({}, TriggerResource, { required: true })
        },
        responses: {
            200: {
                bodyMapper: TriggerResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var getOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            triggerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifNoneMatch,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TriggerResource
            },
            304: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var deleteMethodOperationSpec$6 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            triggerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginStartOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/start",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            triggerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginStopOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/stop",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            triggerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var listByFactoryNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TriggerListResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$a = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        RerunTumblingWindowTriggerActionParameters: RerunTumblingWindowTriggerActionParameters,
        TriggerResource: TriggerResource,
        SubResource: SubResource,
        BaseResource: BaseResource,
        Trigger: Trigger,
        CloudError: CloudError,
        RerunTriggerListResponse: RerunTriggerListResponse,
        RerunTriggerResource: RerunTriggerResource,
        RerunTumblingWindowTrigger: RerunTumblingWindowTrigger,
        Resource: Resource,
        Factory: Factory,
        FactoryIdentity: FactoryIdentity,
        FactoryRepoConfiguration: FactoryRepoConfiguration,
        IntegrationRuntimeResource: IntegrationRuntimeResource,
        IntegrationRuntime: IntegrationRuntime,
        LinkedServiceResource: LinkedServiceResource,
        LinkedService: LinkedService,
        IntegrationRuntimeReference: IntegrationRuntimeReference,
        ParameterSpecification: ParameterSpecification,
        DatasetResource: DatasetResource,
        Dataset: Dataset,
        LinkedServiceReference: LinkedServiceReference,
        DatasetFolder: DatasetFolder,
        PipelineResource: PipelineResource,
        Activity: Activity,
        ActivityDependency: ActivityDependency,
        UserProperty: UserProperty,
        VariableSpecification: VariableSpecification,
        PipelineFolder: PipelineFolder,
        FactoryVSTSConfiguration: FactoryVSTSConfiguration,
        FactoryGitHubConfiguration: FactoryGitHubConfiguration,
        TumblingWindowTrigger: TumblingWindowTrigger,
        TriggerPipelineReference: TriggerPipelineReference,
        PipelineReference: PipelineReference,
        RetryPolicy: RetryPolicy,
        DependencyReference: DependencyReference,
        MultiplePipelineTrigger: MultiplePipelineTrigger,
        ResponsysLinkedService: ResponsysLinkedService,
        SecretBase: SecretBase,
        AzureDatabricksLinkedService: AzureDatabricksLinkedService,
        AzureDataLakeAnalyticsLinkedService: AzureDataLakeAnalyticsLinkedService,
        HDInsightOnDemandLinkedService: HDInsightOnDemandLinkedService,
        ScriptAction: ScriptAction,
        SalesforceMarketingCloudLinkedService: SalesforceMarketingCloudLinkedService,
        NetezzaLinkedService: NetezzaLinkedService,
        VerticaLinkedService: VerticaLinkedService,
        ZohoLinkedService: ZohoLinkedService,
        XeroLinkedService: XeroLinkedService,
        SquareLinkedService: SquareLinkedService,
        SparkLinkedService: SparkLinkedService,
        ShopifyLinkedService: ShopifyLinkedService,
        ServiceNowLinkedService: ServiceNowLinkedService,
        QuickBooksLinkedService: QuickBooksLinkedService,
        PrestoLinkedService: PrestoLinkedService,
        PhoenixLinkedService: PhoenixLinkedService,
        PaypalLinkedService: PaypalLinkedService,
        MarketoLinkedService: MarketoLinkedService,
        MariaDBLinkedService: MariaDBLinkedService,
        MagentoLinkedService: MagentoLinkedService,
        JiraLinkedService: JiraLinkedService,
        ImpalaLinkedService: ImpalaLinkedService,
        HubspotLinkedService: HubspotLinkedService,
        HiveLinkedService: HiveLinkedService,
        HBaseLinkedService: HBaseLinkedService,
        GreenplumLinkedService: GreenplumLinkedService,
        GoogleBigQueryLinkedService: GoogleBigQueryLinkedService,
        GoogleAdWordsLinkedService: GoogleAdWordsLinkedService,
        EloquaLinkedService: EloquaLinkedService,
        DrillLinkedService: DrillLinkedService,
        CouchbaseLinkedService: CouchbaseLinkedService,
        ConcurLinkedService: ConcurLinkedService,
        AzurePostgreSqlLinkedService: AzurePostgreSqlLinkedService,
        AmazonMWSLinkedService: AmazonMWSLinkedService,
        SapHanaLinkedService: SapHanaLinkedService,
        SapBWLinkedService: SapBWLinkedService,
        SftpServerLinkedService: SftpServerLinkedService,
        FtpServerLinkedService: FtpServerLinkedService,
        RestServiceLinkedService: RestServiceLinkedService,
        HttpLinkedService: HttpLinkedService,
        AzureSearchLinkedService: AzureSearchLinkedService,
        CustomDataSourceLinkedService: CustomDataSourceLinkedService,
        AmazonRedshiftLinkedService: AmazonRedshiftLinkedService,
        AmazonS3LinkedService: AmazonS3LinkedService,
        SapEccLinkedService: SapEccLinkedService,
        SapCloudForCustomerLinkedService: SapCloudForCustomerLinkedService,
        SalesforceLinkedService: SalesforceLinkedService,
        AzureDataLakeStoreLinkedService: AzureDataLakeStoreLinkedService,
        MongoDbLinkedService: MongoDbLinkedService,
        CassandraLinkedService: CassandraLinkedService,
        WebLinkedService: WebLinkedService,
        WebLinkedServiceTypeProperties: WebLinkedServiceTypeProperties,
        ODataLinkedService: ODataLinkedService,
        HdfsLinkedService: HdfsLinkedService,
        OdbcLinkedService: OdbcLinkedService,
        AzureMLLinkedService: AzureMLLinkedService,
        TeradataLinkedService: TeradataLinkedService,
        Db2LinkedService: Db2LinkedService,
        SybaseLinkedService: SybaseLinkedService,
        PostgreSqlLinkedService: PostgreSqlLinkedService,
        MySqlLinkedService: MySqlLinkedService,
        AzureMySqlLinkedService: AzureMySqlLinkedService,
        OracleServiceCloudLinkedService: OracleServiceCloudLinkedService,
        OracleLinkedService: OracleLinkedService,
        FileServerLinkedService: FileServerLinkedService,
        HDInsightLinkedService: HDInsightLinkedService,
        DynamicsAXLinkedService: DynamicsAXLinkedService,
        DynamicsLinkedService: DynamicsLinkedService,
        CosmosDbLinkedService: CosmosDbLinkedService,
        AzureKeyVaultLinkedService: AzureKeyVaultLinkedService,
        AzureBatchLinkedService: AzureBatchLinkedService,
        AzureSqlDatabaseLinkedService: AzureSqlDatabaseLinkedService,
        SqlServerLinkedService: SqlServerLinkedService,
        AzureSqlDWLinkedService: AzureSqlDWLinkedService,
        AzureTableStorageLinkedService: AzureTableStorageLinkedService,
        AzureBlobStorageLinkedService: AzureBlobStorageLinkedService,
        AzureStorageLinkedService: AzureStorageLinkedService,
        ResponsysObjectDataset: ResponsysObjectDataset,
        SalesforceMarketingCloudObjectDataset: SalesforceMarketingCloudObjectDataset,
        VerticaTableDataset: VerticaTableDataset,
        NetezzaTableDataset: NetezzaTableDataset,
        ZohoObjectDataset: ZohoObjectDataset,
        XeroObjectDataset: XeroObjectDataset,
        SquareObjectDataset: SquareObjectDataset,
        SparkObjectDataset: SparkObjectDataset,
        ShopifyObjectDataset: ShopifyObjectDataset,
        ServiceNowObjectDataset: ServiceNowObjectDataset,
        QuickBooksObjectDataset: QuickBooksObjectDataset,
        PrestoObjectDataset: PrestoObjectDataset,
        PhoenixObjectDataset: PhoenixObjectDataset,
        PaypalObjectDataset: PaypalObjectDataset,
        MarketoObjectDataset: MarketoObjectDataset,
        MariaDBTableDataset: MariaDBTableDataset,
        MagentoObjectDataset: MagentoObjectDataset,
        JiraObjectDataset: JiraObjectDataset,
        ImpalaObjectDataset: ImpalaObjectDataset,
        HubspotObjectDataset: HubspotObjectDataset,
        HiveObjectDataset: HiveObjectDataset,
        HBaseObjectDataset: HBaseObjectDataset,
        GreenplumTableDataset: GreenplumTableDataset,
        GoogleBigQueryObjectDataset: GoogleBigQueryObjectDataset,
        GoogleAdWordsObjectDataset: GoogleAdWordsObjectDataset,
        EloquaObjectDataset: EloquaObjectDataset,
        DrillTableDataset: DrillTableDataset,
        CouchbaseTableDataset: CouchbaseTableDataset,
        ConcurObjectDataset: ConcurObjectDataset,
        AzurePostgreSqlTableDataset: AzurePostgreSqlTableDataset,
        AmazonMWSObjectDataset: AmazonMWSObjectDataset,
        RestServiceDataset: RestServiceDataset,
        HttpDataset: HttpDataset,
        DatasetStorageFormat: DatasetStorageFormat,
        DatasetCompression: DatasetCompression,
        AzureSearchIndexDataset: AzureSearchIndexDataset,
        WebTableDataset: WebTableDataset,
        SqlServerTableDataset: SqlServerTableDataset,
        SapEccResourceDataset: SapEccResourceDataset,
        SapCloudForCustomerResourceDataset: SapCloudForCustomerResourceDataset,
        SalesforceObjectDataset: SalesforceObjectDataset,
        RelationalTableDataset: RelationalTableDataset,
        AzureMySqlTableDataset: AzureMySqlTableDataset,
        OracleServiceCloudObjectDataset: OracleServiceCloudObjectDataset,
        OracleTableDataset: OracleTableDataset,
        ODataResourceDataset: ODataResourceDataset,
        MongoDbCollectionDataset: MongoDbCollectionDataset,
        FileShareDataset: FileShareDataset,
        AzureDataLakeStoreDataset: AzureDataLakeStoreDataset,
        DynamicsAXResourceDataset: DynamicsAXResourceDataset,
        DynamicsEntityDataset: DynamicsEntityDataset,
        DocumentDbCollectionDataset: DocumentDbCollectionDataset,
        CustomDataset: CustomDataset,
        CassandraTableDataset: CassandraTableDataset,
        AzureSqlDWTableDataset: AzureSqlDWTableDataset,
        AzureSqlTableDataset: AzureSqlTableDataset,
        AzureTableDataset: AzureTableDataset,
        AzureBlobDataset: AzureBlobDataset,
        AmazonS3Dataset: AmazonS3Dataset,
        ExecutionActivity: ExecutionActivity,
        ActivityPolicy: ActivityPolicy,
        ControlActivity: ControlActivity,
        SelfHostedIntegrationRuntime: SelfHostedIntegrationRuntime,
        LinkedIntegrationRuntimeType: LinkedIntegrationRuntimeType,
        ManagedIntegrationRuntime: ManagedIntegrationRuntime,
        IntegrationRuntimeComputeProperties: IntegrationRuntimeComputeProperties,
        IntegrationRuntimeVNetProperties: IntegrationRuntimeVNetProperties,
        IntegrationRuntimeSsisProperties: IntegrationRuntimeSsisProperties,
        IntegrationRuntimeSsisCatalogInfo: IntegrationRuntimeSsisCatalogInfo,
        SecureString: SecureString,
        IntegrationRuntimeCustomSetupScriptProperties: IntegrationRuntimeCustomSetupScriptProperties,
        AzureKeyVaultSecretReference: AzureKeyVaultSecretReference,
        SelfDependencyTumblingWindowTriggerReference: SelfDependencyTumblingWindowTriggerReference,
        TriggerDependencyReference: TriggerDependencyReference,
        TriggerReference: TriggerReference,
        BlobEventsTrigger: BlobEventsTrigger,
        BlobTrigger: BlobTrigger,
        ScheduleTrigger: ScheduleTrigger,
        ScheduleTriggerRecurrence: ScheduleTriggerRecurrence,
        RecurrenceSchedule: RecurrenceSchedule,
        RecurrenceScheduleOccurrence: RecurrenceScheduleOccurrence,
        WebClientCertificateAuthentication: WebClientCertificateAuthentication,
        WebBasicAuthentication: WebBasicAuthentication,
        WebAnonymousAuthentication: WebAnonymousAuthentication,
        DatasetZipDeflateCompression: DatasetZipDeflateCompression,
        DatasetDeflateCompression: DatasetDeflateCompression,
        DatasetGZipCompression: DatasetGZipCompression,
        DatasetBZip2Compression: DatasetBZip2Compression,
        ParquetFormat: ParquetFormat,
        OrcFormat: OrcFormat,
        AvroFormat: AvroFormat,
        JsonFormat: JsonFormat,
        TextFormat: TextFormat,
        DatabricksSparkPythonActivity: DatabricksSparkPythonActivity,
        DatabricksSparkJarActivity: DatabricksSparkJarActivity,
        DatabricksNotebookActivity: DatabricksNotebookActivity,
        DataLakeAnalyticsUSQLActivity: DataLakeAnalyticsUSQLActivity,
        AzureMLUpdateResourceActivity: AzureMLUpdateResourceActivity,
        AzureMLBatchExecutionActivity: AzureMLBatchExecutionActivity,
        AzureMLWebServiceFile: AzureMLWebServiceFile,
        GetMetadataActivity: GetMetadataActivity,
        DatasetReference: DatasetReference,
        WebActivity: WebActivity,
        WebActivityAuthentication: WebActivityAuthentication,
        LookupActivity: LookupActivity,
        CopySource: CopySource,
        SqlServerStoredProcedureActivity: SqlServerStoredProcedureActivity,
        StoredProcedureParameter: StoredProcedureParameter,
        CustomActivity: CustomActivity,
        CustomActivityReferenceObject: CustomActivityReferenceObject,
        ExecuteSSISPackageActivity: ExecuteSSISPackageActivity,
        SSISPackageLocation: SSISPackageLocation,
        SSISExecutionParameter: SSISExecutionParameter,
        SSISPropertyOverride: SSISPropertyOverride,
        HDInsightSparkActivity: HDInsightSparkActivity,
        HDInsightStreamingActivity: HDInsightStreamingActivity,
        HDInsightMapReduceActivity: HDInsightMapReduceActivity,
        HDInsightPigActivity: HDInsightPigActivity,
        HDInsightHiveActivity: HDInsightHiveActivity,
        CopyActivity: CopyActivity,
        CopySink: CopySink,
        CopyTranslator: CopyTranslator,
        StagingSettings: StagingSettings,
        RedirectIncompatibleRowSettings: RedirectIncompatibleRowSettings,
        AppendVariableActivity: AppendVariableActivity,
        SetVariableActivity: SetVariableActivity,
        FilterActivity: FilterActivity,
        Expression: Expression,
        UntilActivity: UntilActivity,
        WaitActivity: WaitActivity,
        ForEachActivity: ForEachActivity,
        IfConditionActivity: IfConditionActivity,
        ExecutePipelineActivity: ExecutePipelineActivity,
        LinkedIntegrationRuntimeRbacAuthorization: LinkedIntegrationRuntimeRbacAuthorization,
        LinkedIntegrationRuntimeKeyAuthorization: LinkedIntegrationRuntimeKeyAuthorization,
        TumblingWindowTriggerDependencyReference: TumblingWindowTriggerDependencyReference,
        AmazonRedshiftSource: AmazonRedshiftSource,
        RedshiftUnloadSettings: RedshiftUnloadSettings,
        ResponsysSource: ResponsysSource,
        SalesforceMarketingCloudSource: SalesforceMarketingCloudSource,
        VerticaSource: VerticaSource,
        NetezzaSource: NetezzaSource,
        ZohoSource: ZohoSource,
        XeroSource: XeroSource,
        SquareSource: SquareSource,
        SparkSource: SparkSource,
        ShopifySource: ShopifySource,
        ServiceNowSource: ServiceNowSource,
        QuickBooksSource: QuickBooksSource,
        PrestoSource: PrestoSource,
        PhoenixSource: PhoenixSource,
        PaypalSource: PaypalSource,
        MarketoSource: MarketoSource,
        MariaDBSource: MariaDBSource,
        MagentoSource: MagentoSource,
        JiraSource: JiraSource,
        ImpalaSource: ImpalaSource,
        HubspotSource: HubspotSource,
        HiveSource: HiveSource,
        HBaseSource: HBaseSource,
        GreenplumSource: GreenplumSource,
        GoogleBigQuerySource: GoogleBigQuerySource,
        GoogleAdWordsSource: GoogleAdWordsSource,
        EloquaSource: EloquaSource,
        DrillSource: DrillSource,
        CouchbaseSource: CouchbaseSource,
        ConcurSource: ConcurSource,
        AzurePostgreSqlSource: AzurePostgreSqlSource,
        AmazonMWSSource: AmazonMWSSource,
        RestServiceSource: RestServiceSource,
        HttpSource: HttpSource,
        AzureDataLakeStoreSource: AzureDataLakeStoreSource,
        MongoDbSource: MongoDbSource,
        CassandraSource: CassandraSource,
        WebSource: WebSource,
        OracleServiceCloudSource: OracleServiceCloudSource,
        OracleSource: OracleSource,
        AzureMySqlSource: AzureMySqlSource,
        HdfsSource: HdfsSource,
        DistcpSettings: DistcpSettings,
        FileSystemSource: FileSystemSource,
        SqlDWSource: SqlDWSource,
        SqlSource: SqlSource,
        SapEccSource: SapEccSource,
        SapCloudForCustomerSource: SapCloudForCustomerSource,
        SalesforceSource: SalesforceSource,
        RelationalSource: RelationalSource,
        DynamicsAXSource: DynamicsAXSource,
        DynamicsSource: DynamicsSource,
        DocumentDbCollectionSource: DocumentDbCollectionSource,
        BlobSource: BlobSource,
        AzureTableSource: AzureTableSource,
        TabularTranslator: TabularTranslator,
        SalesforceSink: SalesforceSink,
        DynamicsSink: DynamicsSink,
        OdbcSink: OdbcSink,
        AzureSearchIndexSink: AzureSearchIndexSink,
        AzureDataLakeStoreSink: AzureDataLakeStoreSink,
        OracleSink: OracleSink,
        SqlDWSink: SqlDWSink,
        PolybaseSettings: PolybaseSettings,
        SqlSink: SqlSink,
        DocumentDbCollectionSink: DocumentDbCollectionSink,
        FileSystemSink: FileSystemSink,
        BlobSink: BlobSink,
        AzureTableSink: AzureTableSink,
        AzureQueueSink: AzureQueueSink,
        SapCloudForCustomerSink: SapCloudForCustomerSink
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a RerunTriggers. */
    var RerunTriggers = /** @class */ (function () {
        /**
         * Create a RerunTriggers.
         * @param {DataFactoryManagementClientContext} client Reference to the service client.
         */
        function RerunTriggers(client) {
            this.client = client;
        }
        RerunTriggers.prototype.create = function (resourceGroupName$$1, factoryName$$1, triggerName$$1, rerunTriggerName$$1, rerunTumblingWindowTriggerActionParameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                triggerName: triggerName$$1,
                rerunTriggerName: rerunTriggerName$$1,
                rerunTumblingWindowTriggerActionParameters: rerunTumblingWindowTriggerActionParameters,
                options: options
            }, createOperationSpec, callback);
        };
        /**
         * Starts a trigger.
         * @param resourceGroupName The resource group name.
         * @param factoryName The factory name.
         * @param triggerName The trigger name.
         * @param rerunTriggerName The rerun trigger name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        RerunTriggers.prototype.start = function (resourceGroupName$$1, factoryName$$1, triggerName$$1, rerunTriggerName$$1, options) {
            return this.beginStart(resourceGroupName$$1, factoryName$$1, triggerName$$1, rerunTriggerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Stops a trigger.
         * @param resourceGroupName The resource group name.
         * @param factoryName The factory name.
         * @param triggerName The trigger name.
         * @param rerunTriggerName The rerun trigger name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        RerunTriggers.prototype.stop = function (resourceGroupName$$1, factoryName$$1, triggerName$$1, rerunTriggerName$$1, options) {
            return this.beginStop(resourceGroupName$$1, factoryName$$1, triggerName$$1, rerunTriggerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Cancels a trigger.
         * @param resourceGroupName The resource group name.
         * @param factoryName The factory name.
         * @param triggerName The trigger name.
         * @param rerunTriggerName The rerun trigger name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        RerunTriggers.prototype.cancel = function (resourceGroupName$$1, factoryName$$1, triggerName$$1, rerunTriggerName$$1, options) {
            return this.beginCancel(resourceGroupName$$1, factoryName$$1, triggerName$$1, rerunTriggerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        RerunTriggers.prototype.listByTrigger = function (resourceGroupName$$1, factoryName$$1, triggerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                triggerName: triggerName$$1,
                options: options
            }, listByTriggerOperationSpec, callback);
        };
        /**
         * Starts a trigger.
         * @param resourceGroupName The resource group name.
         * @param factoryName The factory name.
         * @param triggerName The trigger name.
         * @param rerunTriggerName The rerun trigger name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        RerunTriggers.prototype.beginStart = function (resourceGroupName$$1, factoryName$$1, triggerName$$1, rerunTriggerName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                triggerName: triggerName$$1,
                rerunTriggerName: rerunTriggerName$$1,
                options: options
            }, beginStartOperationSpec$2, options);
        };
        /**
         * Stops a trigger.
         * @param resourceGroupName The resource group name.
         * @param factoryName The factory name.
         * @param triggerName The trigger name.
         * @param rerunTriggerName The rerun trigger name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        RerunTriggers.prototype.beginStop = function (resourceGroupName$$1, factoryName$$1, triggerName$$1, rerunTriggerName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                triggerName: triggerName$$1,
                rerunTriggerName: rerunTriggerName$$1,
                options: options
            }, beginStopOperationSpec$2, options);
        };
        /**
         * Cancels a trigger.
         * @param resourceGroupName The resource group name.
         * @param factoryName The factory name.
         * @param triggerName The trigger name.
         * @param rerunTriggerName The rerun trigger name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        RerunTriggers.prototype.beginCancel = function (resourceGroupName$$1, factoryName$$1, triggerName$$1, rerunTriggerName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                triggerName: triggerName$$1,
                rerunTriggerName: rerunTriggerName$$1,
                options: options
            }, beginCancelOperationSpec, options);
        };
        RerunTriggers.prototype.listByTriggerNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByTriggerNextOperationSpec, callback);
        };
        return RerunTriggers;
    }());
    // Operation Specifications
    var serializer$a = new msRest.Serializer(Mappers$a);
    var createOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/rerunTriggers/{rerunTriggerName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            triggerName,
            rerunTriggerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "rerunTumblingWindowTriggerActionParameters",
            mapper: __assign({}, RerunTumblingWindowTriggerActionParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: TriggerResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var listByTriggerOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/rerunTriggers",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            triggerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RerunTriggerListResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var beginStartOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/rerunTriggers/{rerunTriggerName}/start",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            triggerName,
            rerunTriggerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var beginStopOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/rerunTriggers/{rerunTriggerName}/stop",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            triggerName,
            rerunTriggerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var beginCancelOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/rerunTriggers/{rerunTriggerName}/cancel",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName,
            triggerName,
            rerunTriggerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var listByTriggerNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RerunTriggerListResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$b = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        RunFilterParameters: RunFilterParameters,
        RunQueryFilter: RunQueryFilter,
        RunQueryOrderBy: RunQueryOrderBy,
        TriggerRunsQueryResponse: TriggerRunsQueryResponse,
        TriggerRun: TriggerRun,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a TriggerRuns. */
    var TriggerRuns = /** @class */ (function () {
        /**
         * Create a TriggerRuns.
         * @param {DataFactoryManagementClientContext} client Reference to the service client.
         */
        function TriggerRuns(client) {
            this.client = client;
        }
        TriggerRuns.prototype.queryByFactory = function (resourceGroupName$$1, factoryName$$1, filterParameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                factoryName: factoryName$$1,
                filterParameters: filterParameters,
                options: options
            }, queryByFactoryOperationSpec$1, callback);
        };
        return TriggerRuns;
    }());
    // Operation Specifications
    var serializer$b = new msRest.Serializer(Mappers$b);
    var queryByFactoryOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/queryTriggerRuns",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            factoryName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "filterParameters",
            mapper: __assign({}, RunFilterParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: TriggerRunsQueryResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-datafactory";
    var packageVersion = "1.0.0";
    var DataFactoryManagementClientContext = /** @class */ (function (_super) {
        __extends(DataFactoryManagementClientContext, _super);
        /**
         * Initializes a new instance of the DataFactoryManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The subscription identifier.
         * @param [options] The parameter options
         */
        function DataFactoryManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2018-06-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return DataFactoryManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var DataFactoryManagementClient = /** @class */ (function (_super) {
        __extends(DataFactoryManagementClient, _super);
        /**
         * Initializes a new instance of the DataFactoryManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The subscription identifier.
         * @param [options] The parameter options
         */
        function DataFactoryManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.operations = new Operations(_this);
            _this.factories = new Factories(_this);
            _this.integrationRuntimes = new IntegrationRuntimes(_this);
            _this.integrationRuntimeNodes = new IntegrationRuntimeNodes(_this);
            _this.linkedServices = new LinkedServices(_this);
            _this.datasets = new Datasets(_this);
            _this.pipelines = new Pipelines(_this);
            _this.pipelineRuns = new PipelineRuns(_this);
            _this.activityRuns = new ActivityRuns(_this);
            _this.triggers = new Triggers(_this);
            _this.rerunTriggers = new RerunTriggers(_this);
            _this.triggerRuns = new TriggerRuns(_this);
            return _this;
        }
        return DataFactoryManagementClient;
    }(DataFactoryManagementClientContext));

    exports.DataFactoryManagementClient = DataFactoryManagementClient;
    exports.DataFactoryManagementClientContext = DataFactoryManagementClientContext;
    exports.DataFactoryManagementModels = index;
    exports.DataFactoryManagementMappers = mappers;
    exports.Operations = Operations;
    exports.Factories = Factories;
    exports.IntegrationRuntimes = IntegrationRuntimes;
    exports.IntegrationRuntimeNodes = IntegrationRuntimeNodes;
    exports.LinkedServices = LinkedServices;
    exports.Datasets = Datasets;
    exports.Pipelines = Pipelines;
    exports.PipelineRuns = PipelineRuns;
    exports.ActivityRuns = ActivityRuns;
    exports.Triggers = Triggers;
    exports.RerunTriggers = RerunTriggers;
    exports.TriggerRuns = TriggerRuns;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-datafactory.js.map
