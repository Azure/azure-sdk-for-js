/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmOperations = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({

    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                }
            }
        }
    };
    var SolutionProperties = {
        serializedName: "SolutionProperties",
        type: {
            name: "Composite",
            className: "SolutionProperties",
            modelProperties: {
                workspaceResourceId: {
                    required: true,
                    serializedName: "workspaceResourceId",
                    type: {
                        name: "String"
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                containedResources: {
                    serializedName: "containedResources",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                referencedResources: {
                    serializedName: "referencedResources",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ManagementAssociationProperties = {
        serializedName: "ManagementAssociationProperties",
        type: {
            name: "Composite",
            className: "ManagementAssociationProperties",
            modelProperties: {
                applicationId: {
                    required: true,
                    serializedName: "applicationId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ArmTemplateParameter = {
        serializedName: "ArmTemplateParameter",
        type: {
            name: "Composite",
            className: "ArmTemplateParameter",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagementConfigurationProperties = {
        serializedName: "ManagementConfigurationProperties",
        type: {
            name: "Composite",
            className: "ManagementConfigurationProperties",
            modelProperties: {
                applicationId: {
                    serializedName: "applicationId",
                    type: {
                        name: "String"
                    }
                },
                parentResourceType: {
                    required: true,
                    serializedName: "parentResourceType",
                    type: {
                        name: "String"
                    }
                },
                parameters: {
                    required: true,
                    serializedName: "parameters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ArmTemplateParameter"
                            }
                        }
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                template: {
                    required: true,
                    serializedName: "template",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var SolutionPlan = {
        serializedName: "SolutionPlan",
        type: {
            name: "Composite",
            className: "SolutionPlan",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                publisher: {
                    serializedName: "publisher",
                    type: {
                        name: "String"
                    }
                },
                promotionCode: {
                    serializedName: "promotionCode",
                    type: {
                        name: "String"
                    }
                },
                product: {
                    serializedName: "product",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Solution = {
        serializedName: "Solution",
        type: {
            name: "Composite",
            className: "Solution",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                plan: {
                    serializedName: "plan",
                    type: {
                        name: "Composite",
                        className: "SolutionPlan"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "SolutionProperties"
                    }
                }
            }
        }
    };
    var SolutionPropertiesList = {
        serializedName: "SolutionPropertiesList",
        type: {
            name: "Composite",
            className: "SolutionPropertiesList",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Solution"
                            }
                        }
                    }
                }
            }
        }
    };
    var ManagementAssociation = {
        serializedName: "ManagementAssociation",
        type: {
            name: "Composite",
            className: "ManagementAssociation",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "ManagementAssociationProperties"
                    }
                }
            }
        }
    };
    var ManagementAssociationPropertiesList = {
        serializedName: "ManagementAssociationPropertiesList",
        type: {
            name: "Composite",
            className: "ManagementAssociationPropertiesList",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagementAssociation"
                            }
                        }
                    }
                }
            }
        }
    };
    var ManagementConfiguration = {
        serializedName: "ManagementConfiguration",
        type: {
            name: "Composite",
            className: "ManagementConfiguration",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "ManagementConfigurationProperties"
                    }
                }
            }
        }
    };
    var ManagementConfigurationPropertiesList = {
        serializedName: "ManagementConfigurationPropertiesList",
        type: {
            name: "Composite",
            className: "ManagementConfigurationPropertiesList",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagementConfiguration"
                            }
                        }
                    }
                }
            }
        }
    };
    var CodeMessageErrorError = {
        serializedName: "CodeMessageError_error",
        type: {
            name: "Composite",
            className: "CodeMessageErrorError",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CodeMessageError = {
        serializedName: "CodeMessageError",
        type: {
            name: "Composite",
            className: "CodeMessageError",
            modelProperties: {
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "CodeMessageErrorError"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        SolutionProperties: SolutionProperties,
        ManagementAssociationProperties: ManagementAssociationProperties,
        ArmTemplateParameter: ArmTemplateParameter,
        ManagementConfigurationProperties: ManagementConfigurationProperties,
        SolutionPlan: SolutionPlan,
        Solution: Solution,
        SolutionPropertiesList: SolutionPropertiesList,
        ManagementAssociation: ManagementAssociation,
        ManagementAssociationPropertiesList: ManagementAssociationPropertiesList,
        ManagementConfiguration: ManagementConfiguration,
        ManagementConfigurationPropertiesList: ManagementConfigurationPropertiesList,
        CodeMessageErrorError: CodeMessageErrorError,
        CodeMessageError: CodeMessageError,
        OperationListResult: OperationListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        Solution: Solution,
        BaseResource: BaseResource,
        SolutionPlan: SolutionPlan,
        SolutionProperties: SolutionProperties,
        CodeMessageError: CodeMessageError,
        CodeMessageErrorError: CodeMessageErrorError,
        SolutionPropertiesList: SolutionPropertiesList,
        ManagementAssociationProperties: ManagementAssociationProperties,
        ManagementConfigurationProperties: ManagementConfigurationProperties,
        ArmTemplateParameter: ArmTemplateParameter,
        ManagementAssociation: ManagementAssociation,
        ManagementConfiguration: ManagementConfiguration
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var managementAssociationName = {
        parameterPath: "managementAssociationName",
        mapper: {
            required: true,
            serializedName: "managementAssociationName",
            type: {
                name: "String"
            }
        }
    };
    var managementConfigurationName = {
        parameterPath: "managementConfigurationName",
        mapper: {
            required: true,
            serializedName: "managementConfigurationName",
            type: {
                name: "String"
            }
        }
    };
    var providerName = {
        parameterPath: "providerName",
        mapper: {
            required: true,
            serializedName: "providerName",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            constraints: {
                MaxLength: 90,
                MinLength: 1,
                Pattern: /^[-\w\._\(\)]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var resourceName = {
        parameterPath: "resourceName",
        mapper: {
            required: true,
            serializedName: "resourceName",
            type: {
                name: "String"
            }
        }
    };
    var resourceType = {
        parameterPath: "resourceType",
        mapper: {
            required: true,
            serializedName: "resourceType",
            type: {
                name: "String"
            }
        }
    };
    var solutionName = {
        parameterPath: "solutionName",
        mapper: {
            required: true,
            serializedName: "solutionName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Solutions. */
    var Solutions = /** @class */ (function () {
        /**
         * Create a Solutions.
         * @param {OperationsManagementClientContext} client Reference to the service client.
         */
        function Solutions(client) {
            this.client = client;
        }
        /**
         * Creates or updates the Solution.
         * @summary Create/Update Solution.
         * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
         * @param solutionName User Solution Name.
         * @param parameters The parameters required to create OMS Solution.
         * @param [options] The optional parameters
         * @returns Promise<Models.SolutionsCreateOrUpdateResponse>
         */
        Solutions.prototype.createOrUpdate = function (resourceGroupName$$1, solutionName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, solutionName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the solution in the subscription.
         * @summary Deletes the solution
         * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
         * @param solutionName User Solution Name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Solutions.prototype.deleteMethod = function (resourceGroupName$$1, solutionName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, solutionName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Solutions.prototype.get = function (resourceGroupName$$1, solutionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                solutionName: solutionName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        Solutions.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Solutions.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec, callback);
        };
        /**
         * Creates or updates the Solution.
         * @summary Create/Update Solution.
         * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
         * @param solutionName User Solution Name.
         * @param parameters The parameters required to create OMS Solution.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Solutions.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, solutionName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                solutionName: solutionName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * Deletes the solution in the subscription.
         * @summary Deletes the solution
         * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
         * @param solutionName User Solution Name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Solutions.prototype.beginDeleteMethod = function (resourceGroupName$$1, solutionName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                solutionName: solutionName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        return Solutions;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationsManagement/solutions/{solutionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            solutionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Solution
            },
            default: {
                bodyMapper: CodeMessageError
            }
        },
        serializer: serializer
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationsManagement/solutions",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SolutionPropertiesList
            },
            default: {
                bodyMapper: CodeMessageError
            }
        },
        serializer: serializer
    };
    var listBySubscriptionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.OperationsManagement/solutions",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SolutionPropertiesList
            },
            default: {
                bodyMapper: CodeMessageError
            }
        },
        serializer: serializer
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationsManagement/solutions/{solutionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            solutionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Solution, { required: true })
        },
        responses: {
            201: {
                bodyMapper: Solution
            },
            default: {
                bodyMapper: CodeMessageError
            }
        },
        serializer: serializer
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationsManagement/solutions/{solutionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            solutionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CodeMessageError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        ManagementAssociationPropertiesList: ManagementAssociationPropertiesList,
        ManagementAssociation: ManagementAssociation,
        BaseResource: BaseResource,
        ManagementAssociationProperties: ManagementAssociationProperties,
        CodeMessageError: CodeMessageError,
        CodeMessageErrorError: CodeMessageErrorError,
        SolutionProperties: SolutionProperties,
        ManagementConfigurationProperties: ManagementConfigurationProperties,
        ArmTemplateParameter: ArmTemplateParameter,
        Solution: Solution,
        SolutionPlan: SolutionPlan,
        ManagementConfiguration: ManagementConfiguration
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ManagementAssociations. */
    var ManagementAssociations = /** @class */ (function () {
        /**
         * Create a ManagementAssociations.
         * @param {OperationsManagementClientContext} client Reference to the service client.
         */
        function ManagementAssociations(client) {
            this.client = client;
        }
        ManagementAssociations.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec$1, callback);
        };
        ManagementAssociations.prototype.createOrUpdate = function (resourceGroupName$$1, managementAssociationName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managementAssociationName: managementAssociationName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        ManagementAssociations.prototype.deleteMethod = function (resourceGroupName$$1, managementAssociationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managementAssociationName: managementAssociationName$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        ManagementAssociations.prototype.get = function (resourceGroupName$$1, managementAssociationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managementAssociationName: managementAssociationName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        return ManagementAssociations;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listBySubscriptionOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.OperationsManagement/ManagementAssociations",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagementAssociationPropertiesList
            },
            default: {
                bodyMapper: CodeMessageError
            }
        },
        serializer: serializer$1
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceType}/{resourceName}/providers/Microsoft.OperationsManagement/ManagementAssociations/{managementAssociationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            providerName,
            resourceType,
            resourceName,
            managementAssociationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ManagementAssociation, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ManagementAssociation
            },
            default: {
                bodyMapper: CodeMessageError
            }
        },
        serializer: serializer$1
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceType}/{resourceName}/providers/Microsoft.OperationsManagement/ManagementAssociations/{managementAssociationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            providerName,
            resourceType,
            resourceName,
            managementAssociationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CodeMessageError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceType}/{resourceName}/providers/Microsoft.OperationsManagement/ManagementAssociations/{managementAssociationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            providerName,
            resourceType,
            resourceName,
            managementAssociationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagementAssociation
            },
            default: {
                bodyMapper: CodeMessageError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        ManagementConfigurationPropertiesList: ManagementConfigurationPropertiesList,
        ManagementConfiguration: ManagementConfiguration,
        BaseResource: BaseResource,
        ManagementConfigurationProperties: ManagementConfigurationProperties,
        ArmTemplateParameter: ArmTemplateParameter,
        CodeMessageError: CodeMessageError,
        CodeMessageErrorError: CodeMessageErrorError,
        SolutionProperties: SolutionProperties,
        ManagementAssociationProperties: ManagementAssociationProperties,
        Solution: Solution,
        SolutionPlan: SolutionPlan,
        ManagementAssociation: ManagementAssociation
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ManagementConfigurations. */
    var ManagementConfigurations = /** @class */ (function () {
        /**
         * Create a ManagementConfigurations.
         * @param {OperationsManagementClientContext} client Reference to the service client.
         */
        function ManagementConfigurations(client) {
            this.client = client;
        }
        ManagementConfigurations.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec$2, callback);
        };
        ManagementConfigurations.prototype.createOrUpdate = function (resourceGroupName$$1, managementConfigurationName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managementConfigurationName: managementConfigurationName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$1, callback);
        };
        ManagementConfigurations.prototype.deleteMethod = function (resourceGroupName$$1, managementConfigurationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managementConfigurationName: managementConfigurationName$$1,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        ManagementConfigurations.prototype.get = function (resourceGroupName$$1, managementConfigurationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managementConfigurationName: managementConfigurationName$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        return ManagementConfigurations;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listBySubscriptionOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.OperationsManagement/ManagementConfigurations",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagementConfigurationPropertiesList
            },
            default: {
                bodyMapper: CodeMessageError
            }
        },
        serializer: serializer$2
    };
    var createOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationsManagement/ManagementConfigurations/{managementConfigurationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managementConfigurationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ManagementConfiguration, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ManagementConfiguration
            },
            default: {
                bodyMapper: CodeMessageError
            }
        },
        serializer: serializer$2
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationsManagement/ManagementConfigurations/{managementConfigurationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managementConfigurationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CodeMessageError
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationsManagement/ManagementConfigurations/{managementConfigurationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managementConfigurationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagementConfiguration
            },
            default: {
                bodyMapper: CodeMessageError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        OperationListResult: OperationListResult,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {OperationsManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.OperationsManagement/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-operations";
    var packageVersion = "1.0.0-preview";
    var OperationsManagementClientContext = /** @class */ (function (_super) {
        __extends(OperationsManagementClientContext, _super);
        /**
         * Initializes a new instance of the OperationsManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param providerName Provider name for the parent resource.
         * @param resourceType Resource type for the parent resource
         * @param resourceName Parent resource name.
         * @param [options] The parameter options
         */
        function OperationsManagementClientContext(credentials, subscriptionId, providerName, resourceType, resourceName, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (providerName == undefined) {
                throw new Error('\'providerName\' cannot be null.');
            }
            if (resourceType == undefined) {
                throw new Error('\'resourceType\' cannot be null.');
            }
            if (resourceName == undefined) {
                throw new Error('\'resourceName\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2015-11-01-preview';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.providerName = providerName;
            _this.resourceType = resourceType;
            _this.resourceName = resourceName;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return OperationsManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var OperationsManagementClient = /** @class */ (function (_super) {
        __extends(OperationsManagementClient, _super);
        /**
         * Initializes a new instance of the OperationsManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param providerName Provider name for the parent resource.
         * @param resourceType Resource type for the parent resource
         * @param resourceName Parent resource name.
         * @param [options] The parameter options
         */
        function OperationsManagementClient(credentials, subscriptionId, providerName, resourceType, resourceName, options) {
            var _this = _super.call(this, credentials, subscriptionId, providerName, resourceType, resourceName, options) || this;
            _this.solutions = new Solutions(_this);
            _this.managementAssociations = new ManagementAssociations(_this);
            _this.managementConfigurations = new ManagementConfigurations(_this);
            _this.operations = new Operations(_this);
            return _this;
        }
        return OperationsManagementClient;
    }(OperationsManagementClientContext));

    exports.OperationsManagementClient = OperationsManagementClient;
    exports.OperationsManagementClientContext = OperationsManagementClientContext;
    exports.OperationsManagementModels = index;
    exports.OperationsManagementMappers = mappers;
    exports.Solutions = Solutions;
    exports.ManagementAssociations = ManagementAssociations;
    exports.ManagementConfigurations = ManagementConfigurations;
    exports.Operations = Operations;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-operations.js.map
