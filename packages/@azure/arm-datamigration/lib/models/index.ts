/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "ms-rest-azure-js";
import * as msRest from "ms-rest-js";

export { BaseResource, CloudError };


/**
 * @interface
 * An interface representing ODataError.
 * Error information in OData format.
 *
 */
export interface ODataError {
  /**
   * @member {string} [code] The machine-readable description of the error,
   * such as 'InvalidRequest' or 'InternalServerError'
   */
  code?: string;
  /**
   * @member {string} [message] The human-readable description of the error
   */
  message?: string;
  /**
   * @member {ODataError[]} [details] Inner errors that caused this error
   */
  details?: ODataError[];
}

/**
 * @interface
 * An interface representing ReportableException.
 * Exception object for all custom exceptions
 *
 */
export interface ReportableException {
  /**
   * @member {string} [message] Error message
   */
  message?: string;
  /**
   * @member {string} [actionableMessage] Actionable steps for this exception
   */
  actionableMessage?: string;
  /**
   * @member {string} [filePath] The path to the file where exception occurred
   */
  filePath?: string;
  /**
   * @member {string} [lineNumber] The line number where exception occurred
   */
  lineNumber?: string;
  /**
   * @member {number} [hResult] Coded numerical value that is assigned to a
   * specific exception
   */
  hResult?: number;
  /**
   * @member {string} [stackTrace] Stack trace
   */
  stackTrace?: string;
}

/**
 * @interface
 * An interface representing MigrateSyncCompleteCommandOutput.
 * Output for command that completes sync migration for a database.
 *
 */
export interface MigrateSyncCompleteCommandOutput {
  /**
   * @member {ReportableException[]} [errors] List of errors that happened
   * during the command execution
   */
  errors?: ReportableException[];
}

/**
 * @interface
 * An interface representing MigrateSyncCompleteCommandInput.
 * Input for command that completes sync migration for a database.
 *
 */
export interface MigrateSyncCompleteCommandInput {
  /**
   * @member {string} databaseName Name of database
   */
  databaseName: string;
  /**
   * @member {Date} [commitTimeStamp] Time stamp to complete
   */
  commitTimeStamp?: Date;
}

/**
 * Contains the possible cases for CommandProperties.
 */
export type CommandPropertiesUnion = CommandProperties | MigrateSyncCompleteCommandProperties;

/**
 * @interface
 * An interface representing CommandProperties.
 * Base class for all types of DMS command properties. If command is not
 * supported by current client, this object is returned.
 *
 */
export interface CommandProperties {
  /**
   * @member {string} commandType Polymorphic Discriminator
   */
  commandType: "Unknown";
  /**
   * @member {ODataError[]} [errors] Array of errors. This is ignored if
   * submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly errors?: ODataError[];
  /**
   * @member {CommandState} [state] The state of the command. This is ignored
   * if submitted. Possible values include: 'Unknown', 'Accepted', 'Running',
   * 'Succeeded', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: CommandState;
}

/**
 * @interface
 * An interface representing MigrateSyncCompleteCommandProperties.
 * Properties for the command that completes sync migration for a database.
 *
 */
export interface MigrateSyncCompleteCommandProperties {
  /**
   * @member {string} commandType Polymorphic Discriminator
   */
  commandType: "Migrate.Sync.Complete.Database";
  /**
   * @member {ODataError[]} [errors] Array of errors. This is ignored if
   * submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly errors?: ODataError[];
  /**
   * @member {CommandState} [state] The state of the command. This is ignored
   * if submitted. Possible values include: 'Unknown', 'Accepted', 'Running',
   * 'Succeeded', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: CommandState;
  /**
   * @member {MigrateSyncCompleteCommandInput} [input] Command input
   */
  input?: MigrateSyncCompleteCommandInput;
  /**
   * @member {MigrateSyncCompleteCommandOutput} [output] Command output. This
   * is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly output?: MigrateSyncCompleteCommandOutput;
}

/**
 * @interface
 * An interface representing Resource.
 * ARM resource.
 *
 * @extends BaseResource
 */
export interface Resource extends BaseResource {
  /**
   * @member {string} [id] Resource ID.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [type] Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
}

/**
 * @interface
 * An interface representing TrackedResource.
 * ARM tracked top level resource.
 *
 * @extends Resource
 */
export interface TrackedResource extends Resource {
  /**
   * @member {{ [propertyName: string]: string }} [tags] Resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * @member {string} location Resource location.
   */
  location: string;
}

/**
 * @interface
 * An interface representing GetTdeCertificatesSqlTaskOutput.
 * Output of the task that gets TDE certificates in Base64 encoded format.
 *
 */
export interface GetTdeCertificatesSqlTaskOutput {
  /**
   * @member {{ [propertyName: string]: string[] }} [base64EncodedCertificates]
   * Mapping from certificate name to base 64 encoded format.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly base64EncodedCertificates?: { [propertyName: string]: string[] };
  /**
   * @member {ReportableException[]} [validationErrors] Validation errors
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly validationErrors?: ReportableException[];
}

/**
 * @interface
 * An interface representing SelectedCertificateInput.
 * Info for ertificate to be exported for TDE enabled databases.
 *
 */
export interface SelectedCertificateInput {
  /**
   * @member {string} certificateName Name of certificate to be exported.
   */
  certificateName: string;
  /**
   * @member {string} password Password to use for encrypting the exported
   * certificate.
   */
  password: string;
}

/**
 * @interface
 * An interface representing FileShare.
 * File share information with Path, Username, and Password.
 *
 */
export interface FileShare {
  /**
   * @member {string} [userName] User name credential to connect to the share
   * location
   */
  userName?: string;
  /**
   * @member {string} [password] Password credential used to connect to the
   * share location.
   */
  password?: string;
  /**
   * @member {string} path The folder path for this share.
   */
  path: string;
}

/**
 * Contains the possible cases for ConnectionInfo.
 */
export type ConnectionInfoUnion = ConnectionInfo | PostgreSqlConnectionInfo | MySqlConnectionInfo | SqlConnectionInfo;

/**
 * @interface
 * An interface representing ConnectionInfo.
 * Defines the connection properties of a server
 *
 */
export interface ConnectionInfo {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Unknown";
  /**
   * @member {string} [userName] User name
   */
  userName?: string;
  /**
   * @member {string} [password] Password credential.
   */
  password?: string;
}

/**
 * @interface
 * An interface representing PostgreSqlConnectionInfo.
 * Information for connecting to PostgreSQL server
 *
 */
export interface PostgreSqlConnectionInfo {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "PostgreSqlConnectionInfo";
  /**
   * @member {string} [userName] User name
   */
  userName?: string;
  /**
   * @member {string} [password] Password credential.
   */
  password?: string;
  /**
   * @member {string} serverName Name of the server
   */
  serverName: string;
  /**
   * @member {string} [databaseName] Name of the database
   */
  databaseName?: string;
  /**
   * @member {number} port Port for Server
   */
  port: number;
}

/**
 * @interface
 * An interface representing MySqlConnectionInfo.
 * Information for connecting to MySQL server
 *
 */
export interface MySqlConnectionInfo {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "MySqlConnectionInfo";
  /**
   * @member {string} [userName] User name
   */
  userName?: string;
  /**
   * @member {string} [password] Password credential.
   */
  password?: string;
  /**
   * @member {string} serverName Name of the server
   */
  serverName: string;
  /**
   * @member {number} port Port for Server
   */
  port: number;
}

/**
 * @interface
 * An interface representing SqlConnectionInfo.
 * Information for connecting to SQL database server
 *
 */
export interface SqlConnectionInfo {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "SqlConnectionInfo";
  /**
   * @member {string} [userName] User name
   */
  userName?: string;
  /**
   * @member {string} [password] Password credential.
   */
  password?: string;
  /**
   * @member {string} dataSource Data source in the format
   * Protocol:MachineName\SQLServerInstanceName,PortNumber
   */
  dataSource: string;
  /**
   * @member {AuthenticationType} [authentication] Authentication type to use
   * for connection. Possible values include: 'None', 'WindowsAuthentication',
   * 'SqlAuthentication', 'ActiveDirectoryIntegrated',
   * 'ActiveDirectoryPassword'
   */
  authentication?: AuthenticationType;
  /**
   * @member {boolean} [encryptConnection] Whether to encrypt the connection.
   * Default value: true .
   */
  encryptConnection?: boolean;
  /**
   * @member {string} [additionalSettings] Additional connection settings
   */
  additionalSettings?: string;
  /**
   * @member {boolean} [trustServerCertificate] Whether to trust the server
   * certificate. Default value: false .
   */
  trustServerCertificate?: boolean;
  /**
   * @member {SqlSourcePlatform} [platform] Server platform type for
   * connection. Possible values include: 'SqlOnPrem'
   */
  platform?: SqlSourcePlatform;
}

/**
 * @interface
 * An interface representing GetTdeCertificatesSqlTaskInput.
 * Input for the task that gets TDE certificates in Base64 encoded format.
 *
 */
export interface GetTdeCertificatesSqlTaskInput {
  /**
   * @member {SqlConnectionInfo} connectionInfo Connection information for SQL
   * Server
   */
  connectionInfo: SqlConnectionInfo;
  /**
   * @member {FileShare} backupFileShare Backup file share information for file
   * share to be used for temporarily storing files.
   */
  backupFileShare: FileShare;
  /**
   * @member {SelectedCertificateInput[]} selectedCertificates List containing
   * certificate names and corresponding password to use for encrypting the
   * exported certificate.
   */
  selectedCertificates: SelectedCertificateInput[];
}

/**
 * Contains the possible cases for ProjectTaskProperties.
 */
export type ProjectTaskPropertiesUnion = ProjectTaskProperties | GetTdeCertificatesSqlTaskProperties | ValidateMigrationInputSqlServerSqlMITaskProperties | ValidateMigrationInputSqlServerSqlDbSyncTaskProperties | MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties | MigrateMySqlAzureDbForMySqlSyncTaskProperties | MigrateSqlServerSqlDbSyncTaskProperties | MigrateSqlServerSqlDbTaskProperties | MigrateSqlServerSqlMITaskProperties | ConnectToTargetAzureDbForMySqlTaskProperties | ConnectToTargetSqlMITaskProperties | GetUserTablesSqlSyncTaskProperties | GetUserTablesSqlTaskProperties | ConnectToTargetSqlSqlDbSyncTaskProperties | ConnectToTargetSqlDbTaskProperties | ConnectToSourceSqlServerSyncTaskProperties | ConnectToSourceSqlServerTaskProperties | ConnectToSourceMySqlTaskProperties | MigrateSchemaSqlServerSqlDbTaskProperties;

/**
 * @interface
 * An interface representing ProjectTaskProperties.
 * Base class for all types of DMS task properties. If task is not supported by
 * current client, this object is returned.
 *
 */
export interface ProjectTaskProperties {
  /**
   * @member {string} taskType Polymorphic Discriminator
   */
  taskType: "Unknown";
  /**
   * @member {ODataError[]} [errors] Array of errors. This is ignored if
   * submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly errors?: ODataError[];
  /**
   * @member {TaskState} [state] The state of the task. This is ignored if
   * submitted. Possible values include: 'Unknown', 'Queued', 'Running',
   * 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: TaskState;
  /**
   * @member {CommandPropertiesUnion[]} [commands] Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
}

/**
 * @interface
 * An interface representing GetTdeCertificatesSqlTaskProperties.
 * Properties for the task that gets TDE certificates in Base64 encoded format.
 *
 */
export interface GetTdeCertificatesSqlTaskProperties {
  /**
   * @member {string} taskType Polymorphic Discriminator
   */
  taskType: "GetTDECertificates.Sql";
  /**
   * @member {ODataError[]} [errors] Array of errors. This is ignored if
   * submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly errors?: ODataError[];
  /**
   * @member {TaskState} [state] The state of the task. This is ignored if
   * submitted. Possible values include: 'Unknown', 'Queued', 'Running',
   * 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: TaskState;
  /**
   * @member {CommandPropertiesUnion[]} [commands] Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * @member {GetTdeCertificatesSqlTaskInput} [input] Task input
   */
  input?: GetTdeCertificatesSqlTaskInput;
  /**
   * @member {GetTdeCertificatesSqlTaskOutput[]} [output] Task output. This is
   * ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly output?: GetTdeCertificatesSqlTaskOutput[];
}

/**
 * @interface
 * An interface representing DatabaseBackupInfo.
 * Information about backup files when existing backup mode is used.
 *
 */
export interface DatabaseBackupInfo {
  /**
   * @member {string} [databaseName] Database name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly databaseName?: string;
  /**
   * @member {BackupType} [backupType] Backup Type. Possible values include:
   * 'Database', 'TransactionLog', 'File', 'DifferentialDatabase',
   * 'DifferentialFile', 'Partial', 'DifferentialPartial'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly backupType?: BackupType;
  /**
   * @member {string[]} [backupFiles] The list of backup files for the current
   * database.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly backupFiles?: string[];
  /**
   * @member {number} [position] Position of current database backup in the
   * file.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly position?: number;
  /**
   * @member {boolean} [isDamaged] Database was damaged when backed up, but the
   * backup operation was requested to continue despite errors.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly isDamaged?: boolean;
  /**
   * @member {boolean} [isCompressed] Whether the backup set is compressed
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly isCompressed?: boolean;
  /**
   * @member {number} [familyCount] Number of files in the backup set.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly familyCount?: number;
  /**
   * @member {Date} [backupFinishDate] Date and time when the backup operation
   * finished.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly backupFinishDate?: Date;
}

/**
 * @interface
 * An interface representing ValidateMigrationInputSqlServerSqlMITaskOutput.
 * Output for task that validates migration input for SQL to Azure SQL Managed
 * Instance migrations
 *
 */
export interface ValidateMigrationInputSqlServerSqlMITaskOutput {
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] Name of database
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {ReportableException[]} [restoreDatabaseNameErrors] Errors
   * associated with the RestoreDatabaseName
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly restoreDatabaseNameErrors?: ReportableException[];
  /**
   * @member {ReportableException[]} [backupFolderErrors] Errors associated
   * with the BackupFolder path
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly backupFolderErrors?: ReportableException[];
  /**
   * @member {ReportableException[]} [backupShareCredentialsErrors] Errors
   * associated with backup share user name and password credentials
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly backupShareCredentialsErrors?: ReportableException[];
  /**
   * @member {ReportableException[]} [backupStorageAccountErrors] Errors
   * associated with the storage account provided.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly backupStorageAccountErrors?: ReportableException[];
  /**
   * @member {ReportableException[]} [existingBackupErrors] Errors associated
   * with existing backup files.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly existingBackupErrors?: ReportableException[];
  /**
   * @member {DatabaseBackupInfo} [databaseBackupInfo] Information about backup
   * files when existing backup mode is used.
   */
  databaseBackupInfo?: DatabaseBackupInfo;
}

/**
 * @interface
 * An interface representing BlobShare.
 * Blob container storage information.
 *
 */
export interface BlobShare {
  /**
   * @member {string} sasUri SAS URI of Azure Storage Account Container.
   */
  sasUri: string;
}

/**
 * @interface
 * An interface representing MigrateSqlServerSqlMIDatabaseInput.
 * Database specific information for SQL to Azure SQL DB Managed Instance
 * migration task inputs
 *
 */
export interface MigrateSqlServerSqlMIDatabaseInput {
  /**
   * @member {string} name Name of the database
   */
  name: string;
  /**
   * @member {string} restoreDatabaseName Name of the database at destination
   */
  restoreDatabaseName: string;
  /**
   * @member {FileShare} [backupFileShare] Backup file share information for
   * backing up this database.
   */
  backupFileShare?: FileShare;
  /**
   * @member {string[]} [backupFilePaths] The list of backup files to be used
   * in case of existing backups.
   */
  backupFilePaths?: string[];
}

/**
 * @interface
 * An interface representing ValidateMigrationInputSqlServerSqlMITaskInput.
 * Input for task that validates migration input for SQL to Azure SQL Managed
 * Instance
 *
 */
export interface ValidateMigrationInputSqlServerSqlMITaskInput {
  /**
   * @member {SqlConnectionInfo} sourceConnectionInfo Information for
   * connecting to source
   */
  sourceConnectionInfo: SqlConnectionInfo;
  /**
   * @member {SqlConnectionInfo} targetConnectionInfo Information for
   * connecting to target
   */
  targetConnectionInfo: SqlConnectionInfo;
  /**
   * @member {MigrateSqlServerSqlMIDatabaseInput[]} selectedDatabases Databases
   * to migrate
   */
  selectedDatabases: MigrateSqlServerSqlMIDatabaseInput[];
  /**
   * @member {string[]} [selectedLogins] Logins to migrate
   */
  selectedLogins?: string[];
  /**
   * @member {FileShare} [backupFileShare] Backup file share information for
   * all selected databases.
   */
  backupFileShare?: FileShare;
  /**
   * @member {BlobShare} backupBlobShare SAS URI of Azure Storage Account
   * Container to be used for storing backup files.
   */
  backupBlobShare: BlobShare;
  /**
   * @member {BackupMode} [backupMode] Backup Mode to specify whether to use
   * existing backup or create new backup. Possible values include:
   * 'CreateBackup', 'ExistingBackup'
   */
  backupMode?: BackupMode;
}

/**
 * @interface
 * An interface representing ValidateMigrationInputSqlServerSqlMITaskProperties.
 * Properties for task that validates migration input for SQL to Azure SQL
 * Database Managed Instance
 *
 */
export interface ValidateMigrationInputSqlServerSqlMITaskProperties {
  /**
   * @member {string} taskType Polymorphic Discriminator
   */
  taskType: "ValidateMigrationInput.SqlServer.AzureSqlDbMI";
  /**
   * @member {ODataError[]} [errors] Array of errors. This is ignored if
   * submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly errors?: ODataError[];
  /**
   * @member {TaskState} [state] The state of the task. This is ignored if
   * submitted. Possible values include: 'Unknown', 'Queued', 'Running',
   * 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: TaskState;
  /**
   * @member {CommandPropertiesUnion[]} [commands] Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * @member {ValidateMigrationInputSqlServerSqlMITaskInput} [input] Task input
   */
  input?: ValidateMigrationInputSqlServerSqlMITaskInput;
  /**
   * @member {ValidateMigrationInputSqlServerSqlMITaskOutput[]} [output] Task
   * output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly output?: ValidateMigrationInputSqlServerSqlMITaskOutput[];
}

/**
 * @interface
 * An interface representing ValidateSyncMigrationInputSqlServerTaskOutput.
 * Output for task that validates migration input for SQL sync migrations
 *
 */
export interface ValidateSyncMigrationInputSqlServerTaskOutput {
  /**
   * @member {string} [id] Database identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] Name of database
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {ReportableException[]} [validationErrors] Errors associated with
   * a selected database object
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly validationErrors?: ReportableException[];
}

/**
 * @interface
 * An interface representing MigrateSqlServerSqlDbSyncDatabaseInput.
 * Database specific information for SQL to Azure SQL DB sync migration task
 * inputs
 *
 */
export interface MigrateSqlServerSqlDbSyncDatabaseInput {
  /**
   * @member {string} [id] Unique identifier for database
   */
  id?: string;
  /**
   * @member {string} [name] Name of database
   */
  name?: string;
  /**
   * @member {string} [targetDatabaseName] Target database name
   */
  targetDatabaseName?: string;
  /**
   * @member {string} [schemaName] Schema name to be migrated
   */
  schemaName?: string;
  /**
   * @member {{ [propertyName: string]: string }} [tableMap] Mapping of source
   * to target tables
   */
  tableMap?: { [propertyName: string]: string };
  /**
   * @member {{ [propertyName: string]: string }} [migrationSetting] Migration
   * settings which tune the migration behavior
   */
  migrationSetting?: { [propertyName: string]: string };
  /**
   * @member {{ [propertyName: string]: string }} [sourceSetting] Source
   * settings to tune source endpoint migration behavior
   */
  sourceSetting?: { [propertyName: string]: string };
  /**
   * @member {{ [propertyName: string]: string }} [targetSetting] Target
   * settings to tune target endpoint migration behavior
   */
  targetSetting?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing ValidateSyncMigrationInputSqlServerTaskInput.
 * Input for task that validates migration input for SQL sync migrations
 *
 */
export interface ValidateSyncMigrationInputSqlServerTaskInput {
  /**
   * @member {SqlConnectionInfo} sourceConnectionInfo Information for
   * connecting to source SQL server
   */
  sourceConnectionInfo: SqlConnectionInfo;
  /**
   * @member {SqlConnectionInfo} targetConnectionInfo Information for
   * connecting to target
   */
  targetConnectionInfo: SqlConnectionInfo;
  /**
   * @member {MigrateSqlServerSqlDbSyncDatabaseInput[]} selectedDatabases
   * Databases to migrate
   */
  selectedDatabases: MigrateSqlServerSqlDbSyncDatabaseInput[];
}

/**
 * @interface
 * An interface representing ValidateMigrationInputSqlServerSqlDbSyncTaskProperties.
 * Properties for task that validates migration input for SQL to Azure SQL DB
 * sync migrations
 *
 */
export interface ValidateMigrationInputSqlServerSqlDbSyncTaskProperties {
  /**
   * @member {string} taskType Polymorphic Discriminator
   */
  taskType: "ValidateMigrationInput.SqlServer.SqlDb.Sync";
  /**
   * @member {ODataError[]} [errors] Array of errors. This is ignored if
   * submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly errors?: ODataError[];
  /**
   * @member {TaskState} [state] The state of the task. This is ignored if
   * submitted. Possible values include: 'Unknown', 'Queued', 'Running',
   * 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: TaskState;
  /**
   * @member {CommandPropertiesUnion[]} [commands] Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * @member {ValidateSyncMigrationInputSqlServerTaskInput} [input] Task input
   */
  input?: ValidateSyncMigrationInputSqlServerTaskInput;
  /**
   * @member {ValidateSyncMigrationInputSqlServerTaskOutput[]} [output] Task
   * output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly output?: ValidateSyncMigrationInputSqlServerTaskOutput[];
}

/**
 * @interface
 * An interface representing SyncMigrationDatabaseErrorEvent.
 * Database migration errors for online migration
 *
 */
export interface SyncMigrationDatabaseErrorEvent {
  /**
   * @member {string} [timestampString] String value of timestamp.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly timestampString?: string;
  /**
   * @member {string} [eventTypeString] Event type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly eventTypeString?: string;
  /**
   * @member {string} [eventText] Event text.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly eventText?: string;
}

/**
 * Contains the possible cases for MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput.
 */
export type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputUnion = MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput | MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseError | MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputError | MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevel | MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel | MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevel;

/**
 * @interface
 * An interface representing MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput.
 * Output for the task that migrates PostgreSQL databases to Azure Database for
 * PostgreSQL for online migrations
 *
 */
export interface MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
}

/**
 * @interface
 * An interface representing MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseError.
 */
export interface MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseError {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "DatabaseLevelErrorOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [errorMessage] Error message
   */
  errorMessage?: string;
  /**
   * @member {SyncMigrationDatabaseErrorEvent[]} [events] List of error events.
   */
  events?: SyncMigrationDatabaseErrorEvent[];
}

/**
 * @interface
 * An interface representing MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputError.
 */
export interface MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputError {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "ErrorOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {ReportableException} [error] Migration error
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly error?: ReportableException;
}

/**
 * @interface
 * An interface representing MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevel.
 */
export interface MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevel {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "TableLevelOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [tableName] Name of the table
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tableName?: string;
  /**
   * @member {string} [databaseName] Name of the database
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly databaseName?: string;
  /**
   * @member {number} [cdcInsertCounter] Number of applied inserts
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly cdcInsertCounter?: number;
  /**
   * @member {number} [cdcUpdateCounter] Number of applied updates
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly cdcUpdateCounter?: number;
  /**
   * @member {number} [cdcDeleteCounter] Number of applied deletes
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly cdcDeleteCounter?: number;
  /**
   * @member {Date} [fullLoadEstFinishTime] Estimate to finish full load
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly fullLoadEstFinishTime?: Date;
  /**
   * @member {Date} [fullLoadStartedOn] Full load start time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly fullLoadStartedOn?: Date;
  /**
   * @member {Date} [fullLoadEndedOn] Full load end time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly fullLoadEndedOn?: Date;
  /**
   * @member {number} [fullLoadTotalRows] Number of rows applied in full load
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly fullLoadTotalRows?: number;
  /**
   * @member {SyncTableMigrationState} [state] Current state of the table
   * migration. Possible values include: 'BEFORE_LOAD', 'FULL_LOAD',
   * 'COMPLETED', 'CANCELED', 'ERROR', 'FAILED'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: SyncTableMigrationState;
  /**
   * @member {number} [totalChangesApplied] Total number of applied changes
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly totalChangesApplied?: number;
  /**
   * @member {number} [dataErrorsCounter] Number of data errors occurred
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly dataErrorsCounter?: number;
  /**
   * @member {Date} [lastModifiedTime] Last modified time on target
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly lastModifiedTime?: Date;
}

/**
 * @interface
 * An interface representing MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel.
 */
export interface MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "DatabaseLevelOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [databaseName] Name of the database
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly databaseName?: string;
  /**
   * @member {Date} [startedOn] Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly startedOn?: Date;
  /**
   * @member {Date} [endedOn] Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly endedOn?: Date;
  /**
   * @member {SyncDatabaseMigrationReportingState} [migrationState] Migration
   * state that this database is in. Possible values include: 'UNDEFINED',
   * 'CONFIGURING', 'INITIALIAZING', 'STARTING', 'RUNNING',
   * 'READY_TO_COMPLETE', 'COMPLETING', 'COMPLETE', 'CANCELLING', 'CANCELLED',
   * 'FAILED'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly migrationState?: SyncDatabaseMigrationReportingState;
  /**
   * @member {number} [incomingChanges] Number of incoming changes
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly incomingChanges?: number;
  /**
   * @member {number} [appliedChanges] Number of applied changes
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly appliedChanges?: number;
  /**
   * @member {number} [cdcInsertCounter] Number of cdc inserts
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly cdcInsertCounter?: number;
  /**
   * @member {number} [cdcDeleteCounter] Number of cdc deletes
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly cdcDeleteCounter?: number;
  /**
   * @member {number} [cdcUpdateCounter] Number of cdc updates
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly cdcUpdateCounter?: number;
  /**
   * @member {number} [fullLoadCompletedTables] Number of tables completed in
   * full load
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly fullLoadCompletedTables?: number;
  /**
   * @member {number} [fullLoadLoadingTables] Number of tables loading in full
   * load
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly fullLoadLoadingTables?: number;
  /**
   * @member {number} [fullLoadQueuedTables] Number of tables queued in full
   * load
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly fullLoadQueuedTables?: number;
  /**
   * @member {number} [fullLoadErroredTables] Number of tables errored in full
   * load
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly fullLoadErroredTables?: number;
  /**
   * @member {boolean} [initializationCompleted] Indicates if initial load
   * (full load) has been completed
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly initializationCompleted?: boolean;
  /**
   * @member {number} [latency] CDC apply latency
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly latency?: number;
}

/**
 * @interface
 * An interface representing MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevel.
 */
export interface MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevel {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "MigrationLevelOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {Date} [startedOn] Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly startedOn?: Date;
  /**
   * @member {Date} [endedOn] Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly endedOn?: Date;
  /**
   * @member {string} [sourceServerVersion] Source server version
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sourceServerVersion?: string;
  /**
   * @member {string} [sourceServer] Source server name
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sourceServer?: string;
  /**
   * @member {string} [targetServerVersion] Target server version
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly targetServerVersion?: string;
  /**
   * @member {string} [targetServer] Target server name
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly targetServer?: string;
}

/**
 * @interface
 * An interface representing MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput.
 * Database specific information for PostgreSQL to Azure Database for
 * PostgreSQL migration task inputs
 *
 */
export interface MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput {
  /**
   * @member {string} [name] Name of the database
   */
  name?: string;
  /**
   * @member {string} [targetDatabaseName] Name of target database. Note:
   * Target database will be truncated before starting migration.
   */
  targetDatabaseName?: string;
}

/**
 * @interface
 * An interface representing MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput.
 * Input for the task that migrates PostgreSQL databases to Azure Database for
 * PostgreSQL for online migrations
 *
 */
export interface MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput {
  /**
   * @member {MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput[]}
   * selectedDatabases Databases to migrate
   */
  selectedDatabases: MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput[];
  /**
   * @member {PostgreSqlConnectionInfo} targetConnectionInfo Connection
   * information for target Azure Database for PostgreSQL
   */
  targetConnectionInfo: PostgreSqlConnectionInfo;
  /**
   * @member {PostgreSqlConnectionInfo} sourceConnectionInfo Connection
   * information for source PostgreSQL
   */
  sourceConnectionInfo: PostgreSqlConnectionInfo;
}

/**
 * @interface
 * An interface representing MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties.
 * Properties for the task that migrates PostgreSQL databases to Azure Database
 * for PostgreSQL for online migrations
 *
 */
export interface MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties {
  /**
   * @member {string} taskType Polymorphic Discriminator
   */
  taskType: "Migrate.PostgreSql.AzureDbForPostgreSql.Sync";
  /**
   * @member {ODataError[]} [errors] Array of errors. This is ignored if
   * submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly errors?: ODataError[];
  /**
   * @member {TaskState} [state] The state of the task. This is ignored if
   * submitted. Possible values include: 'Unknown', 'Queued', 'Running',
   * 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: TaskState;
  /**
   * @member {CommandPropertiesUnion[]} [commands] Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * @member {MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput} [input] Task
   * input
   */
  input?: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput;
  /**
   * @member {MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputUnion[]}
   * [output] Task output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly output?: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputUnion[];
}

/**
 * Contains the possible cases for MigrateMySqlAzureDbForMySqlSyncTaskOutput.
 */
export type MigrateMySqlAzureDbForMySqlSyncTaskOutputUnion = MigrateMySqlAzureDbForMySqlSyncTaskOutput | MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseError | MigrateMySqlAzureDbForMySqlSyncTaskOutputError | MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevel | MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevel | MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevel;

/**
 * @interface
 * An interface representing MigrateMySqlAzureDbForMySqlSyncTaskOutput.
 * Output for the task that migrates MySQL databases to Azure Database for
 * MySQL for online migrations
 *
 */
export interface MigrateMySqlAzureDbForMySqlSyncTaskOutput {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "MigrateMySqlAzureDbForMySqlSyncTaskOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
}

/**
 * @interface
 * An interface representing MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseError.
 */
export interface MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseError {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "DatabaseLevelErrorOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [errorMessage] Error message
   */
  errorMessage?: string;
  /**
   * @member {SyncMigrationDatabaseErrorEvent[]} [events] List of error events.
   */
  events?: SyncMigrationDatabaseErrorEvent[];
}

/**
 * @interface
 * An interface representing MigrateMySqlAzureDbForMySqlSyncTaskOutputError.
 */
export interface MigrateMySqlAzureDbForMySqlSyncTaskOutputError {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "ErrorOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {ReportableException} [error] Migration error
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly error?: ReportableException;
}

/**
 * @interface
 * An interface representing MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevel.
 */
export interface MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevel {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "TableLevelOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [tableName] Name of the table
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tableName?: string;
  /**
   * @member {string} [databaseName] Name of the database
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly databaseName?: string;
  /**
   * @member {string} [cdcInsertCounter] Number of applied inserts
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly cdcInsertCounter?: string;
  /**
   * @member {string} [cdcUpdateCounter] Number of applied updates
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly cdcUpdateCounter?: string;
  /**
   * @member {string} [cdcDeleteCounter] Number of applied deletes
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly cdcDeleteCounter?: string;
  /**
   * @member {Date} [fullLoadEstFinishTime] Estimate to finish full load
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly fullLoadEstFinishTime?: Date;
  /**
   * @member {Date} [fullLoadStartedOn] Full load start time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly fullLoadStartedOn?: Date;
  /**
   * @member {Date} [fullLoadEndedOn] Full load end time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly fullLoadEndedOn?: Date;
  /**
   * @member {number} [fullLoadTotalRows] Number of rows applied in full load
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly fullLoadTotalRows?: number;
  /**
   * @member {SyncTableMigrationState} [state] Current state of the table
   * migration. Possible values include: 'BEFORE_LOAD', 'FULL_LOAD',
   * 'COMPLETED', 'CANCELED', 'ERROR', 'FAILED'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: SyncTableMigrationState;
  /**
   * @member {number} [totalChangesApplied] Total number of applied changes
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly totalChangesApplied?: number;
  /**
   * @member {number} [dataErrorsCounter] Number of data errors occurred
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly dataErrorsCounter?: number;
  /**
   * @member {Date} [lastModifiedTime] Last modified time on target
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly lastModifiedTime?: Date;
}

/**
 * @interface
 * An interface representing MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevel.
 */
export interface MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevel {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "DatabaseLevelOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [databaseName] Name of the database
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly databaseName?: string;
  /**
   * @member {Date} [startedOn] Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly startedOn?: Date;
  /**
   * @member {Date} [endedOn] Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly endedOn?: Date;
  /**
   * @member {SyncDatabaseMigrationReportingState} [migrationState] Migration
   * state that this database is in. Possible values include: 'UNDEFINED',
   * 'CONFIGURING', 'INITIALIAZING', 'STARTING', 'RUNNING',
   * 'READY_TO_COMPLETE', 'COMPLETING', 'COMPLETE', 'CANCELLING', 'CANCELLED',
   * 'FAILED'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly migrationState?: SyncDatabaseMigrationReportingState;
  /**
   * @member {number} [incomingChanges] Number of incoming changes
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly incomingChanges?: number;
  /**
   * @member {number} [appliedChanges] Number of applied changes
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly appliedChanges?: number;
  /**
   * @member {number} [cdcInsertCounter] Number of cdc inserts
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly cdcInsertCounter?: number;
  /**
   * @member {number} [cdcDeleteCounter] Number of cdc deletes
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly cdcDeleteCounter?: number;
  /**
   * @member {number} [cdcUpdateCounter] Number of cdc updates
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly cdcUpdateCounter?: number;
  /**
   * @member {number} [fullLoadCompletedTables] Number of tables completed in
   * full load
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly fullLoadCompletedTables?: number;
  /**
   * @member {number} [fullLoadLoadingTables] Number of tables loading in full
   * load
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly fullLoadLoadingTables?: number;
  /**
   * @member {number} [fullLoadQueuedTables] Number of tables queued in full
   * load
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly fullLoadQueuedTables?: number;
  /**
   * @member {number} [fullLoadErroredTables] Number of tables errored in full
   * load
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly fullLoadErroredTables?: number;
  /**
   * @member {boolean} [initializationCompleted] Indicates if initial load
   * (full load) has been completed
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly initializationCompleted?: boolean;
  /**
   * @member {number} [latency] CDC apply latency
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly latency?: number;
}

/**
 * @interface
 * An interface representing MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevel.
 */
export interface MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevel {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "MigrationLevelOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {Date} [startedOn] Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly startedOn?: Date;
  /**
   * @member {Date} [endedOn] Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly endedOn?: Date;
  /**
   * @member {string} [sourceServerVersion] Source server version
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sourceServerVersion?: string;
  /**
   * @member {string} [sourceServer] Source server name
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sourceServer?: string;
  /**
   * @member {string} [targetServerVersion] Target server version
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly targetServerVersion?: string;
  /**
   * @member {string} [targetServer] Target server name
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly targetServer?: string;
}

/**
 * @interface
 * An interface representing MigrateMySqlAzureDbForMySqlSyncDatabaseInput.
 * Database specific information for MySQL to Azure Database for MySQL
 * migration task inputs
 *
 */
export interface MigrateMySqlAzureDbForMySqlSyncDatabaseInput {
  /**
   * @member {string} [name] Name of the database
   */
  name?: string;
  /**
   * @member {string} [targetDatabaseName] Name of target database. Note:
   * Target database will be truncated before starting migration.
   */
  targetDatabaseName?: string;
}

/**
 * @interface
 * An interface representing MigrateMySqlAzureDbForMySqlSyncTaskInput.
 * Input for the task that migrates MySQL databases to Azure Database for MySQL
 * for online migrations
 *
 */
export interface MigrateMySqlAzureDbForMySqlSyncTaskInput {
  /**
   * @member {MySqlConnectionInfo} sourceConnectionInfo Connection information
   * for source MySQL
   */
  sourceConnectionInfo: MySqlConnectionInfo;
  /**
   * @member {MySqlConnectionInfo} targetConnectionInfo Connection information
   * for target Azure Database for MySQL
   */
  targetConnectionInfo: MySqlConnectionInfo;
  /**
   * @member {MigrateMySqlAzureDbForMySqlSyncDatabaseInput[]} selectedDatabases
   * Databases to migrate
   */
  selectedDatabases: MigrateMySqlAzureDbForMySqlSyncDatabaseInput[];
}

/**
 * @interface
 * An interface representing MigrateMySqlAzureDbForMySqlSyncTaskProperties.
 * Properties for the task that migrates MySQL databases to Azure Database for
 * MySQL for online migrations
 *
 */
export interface MigrateMySqlAzureDbForMySqlSyncTaskProperties {
  /**
   * @member {string} taskType Polymorphic Discriminator
   */
  taskType: "Migrate.MySql.AzureDbForMySql.Sync";
  /**
   * @member {ODataError[]} [errors] Array of errors. This is ignored if
   * submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly errors?: ODataError[];
  /**
   * @member {TaskState} [state] The state of the task. This is ignored if
   * submitted. Possible values include: 'Unknown', 'Queued', 'Running',
   * 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: TaskState;
  /**
   * @member {CommandPropertiesUnion[]} [commands] Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * @member {MigrateMySqlAzureDbForMySqlSyncTaskInput} [input] Task input
   */
  input?: MigrateMySqlAzureDbForMySqlSyncTaskInput;
  /**
   * @member {MigrateMySqlAzureDbForMySqlSyncTaskOutputUnion[]} [output] Task
   * output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly output?: MigrateMySqlAzureDbForMySqlSyncTaskOutputUnion[];
}

/**
 * Contains the possible cases for MigrateSqlServerSqlDbSyncTaskOutput.
 */
export type MigrateSqlServerSqlDbSyncTaskOutputUnion = MigrateSqlServerSqlDbSyncTaskOutput | MigrateSqlServerSqlDbSyncTaskOutputDatabaseError | MigrateSqlServerSqlDbSyncTaskOutputError | MigrateSqlServerSqlDbSyncTaskOutputTableLevel | MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevel | MigrateSqlServerSqlDbSyncTaskOutputMigrationLevel;

/**
 * @interface
 * An interface representing MigrateSqlServerSqlDbSyncTaskOutput.
 * Output for the task that migrates on-prem SQL Server databases to Azure SQL
 * Database for online migrations
 *
 */
export interface MigrateSqlServerSqlDbSyncTaskOutput {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "MigrateSqlServerSqlDbSyncTaskOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
}

/**
 * @interface
 * An interface representing MigrateSqlServerSqlDbSyncTaskOutputDatabaseError.
 */
export interface MigrateSqlServerSqlDbSyncTaskOutputDatabaseError {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "DatabaseLevelErrorOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [errorMessage] Error message
   */
  errorMessage?: string;
  /**
   * @member {SyncMigrationDatabaseErrorEvent[]} [events] List of error events.
   */
  events?: SyncMigrationDatabaseErrorEvent[];
}

/**
 * @interface
 * An interface representing MigrateSqlServerSqlDbSyncTaskOutputError.
 */
export interface MigrateSqlServerSqlDbSyncTaskOutputError {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "ErrorOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {ReportableException} [error] Migration error
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly error?: ReportableException;
}

/**
 * @interface
 * An interface representing MigrateSqlServerSqlDbSyncTaskOutputTableLevel.
 */
export interface MigrateSqlServerSqlDbSyncTaskOutputTableLevel {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "TableLevelOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [tableName] Name of the table
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tableName?: string;
  /**
   * @member {string} [databaseName] Name of the database
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly databaseName?: string;
  /**
   * @member {number} [cdcInsertCounter] Number of applied inserts
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly cdcInsertCounter?: number;
  /**
   * @member {number} [cdcUpdateCounter] Number of applied updates
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly cdcUpdateCounter?: number;
  /**
   * @member {number} [cdcDeleteCounter] Number of applied deletes
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly cdcDeleteCounter?: number;
  /**
   * @member {Date} [fullLoadEstFinishTime] Estimate to finish full load
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly fullLoadEstFinishTime?: Date;
  /**
   * @member {Date} [fullLoadStartedOn] Full load start time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly fullLoadStartedOn?: Date;
  /**
   * @member {Date} [fullLoadEndedOn] Full load end time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly fullLoadEndedOn?: Date;
  /**
   * @member {number} [fullLoadTotalRows] Number of rows applied in full load
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly fullLoadTotalRows?: number;
  /**
   * @member {SyncTableMigrationState} [state] Current state of the table
   * migration. Possible values include: 'BEFORE_LOAD', 'FULL_LOAD',
   * 'COMPLETED', 'CANCELED', 'ERROR', 'FAILED'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: SyncTableMigrationState;
  /**
   * @member {number} [totalChangesApplied] Total number of applied changes
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly totalChangesApplied?: number;
  /**
   * @member {number} [dataErrorsCounter] Number of data errors occurred
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly dataErrorsCounter?: number;
  /**
   * @member {Date} [lastModifiedTime] Last modified time on target
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly lastModifiedTime?: Date;
}

/**
 * @interface
 * An interface representing MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevel.
 */
export interface MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevel {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "DatabaseLevelOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [databaseName] Name of the database
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly databaseName?: string;
  /**
   * @member {Date} [startedOn] Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly startedOn?: Date;
  /**
   * @member {Date} [endedOn] Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly endedOn?: Date;
  /**
   * @member {SyncDatabaseMigrationReportingState} [migrationState] Migration
   * state that this database is in. Possible values include: 'UNDEFINED',
   * 'CONFIGURING', 'INITIALIAZING', 'STARTING', 'RUNNING',
   * 'READY_TO_COMPLETE', 'COMPLETING', 'COMPLETE', 'CANCELLING', 'CANCELLED',
   * 'FAILED'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly migrationState?: SyncDatabaseMigrationReportingState;
  /**
   * @member {number} [incomingChanges] Number of incoming changes
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly incomingChanges?: number;
  /**
   * @member {number} [appliedChanges] Number of applied changes
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly appliedChanges?: number;
  /**
   * @member {number} [cdcInsertCounter] Number of cdc inserts
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly cdcInsertCounter?: number;
  /**
   * @member {number} [cdcDeleteCounter] Number of cdc deletes
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly cdcDeleteCounter?: number;
  /**
   * @member {number} [cdcUpdateCounter] Number of cdc updates
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly cdcUpdateCounter?: number;
  /**
   * @member {number} [fullLoadCompletedTables] Number of tables completed in
   * full load
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly fullLoadCompletedTables?: number;
  /**
   * @member {number} [fullLoadLoadingTables] Number of tables loading in full
   * load
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly fullLoadLoadingTables?: number;
  /**
   * @member {number} [fullLoadQueuedTables] Number of tables queued in full
   * load
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly fullLoadQueuedTables?: number;
  /**
   * @member {number} [fullLoadErroredTables] Number of tables errored in full
   * load
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly fullLoadErroredTables?: number;
  /**
   * @member {boolean} [initializationCompleted] Indicates if initial load
   * (full load) has been completed
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly initializationCompleted?: boolean;
  /**
   * @member {number} [latency] CDC apply latency
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly latency?: number;
}

/**
 * @interface
 * An interface representing MigrateSqlServerSqlDbSyncTaskOutputMigrationLevel.
 */
export interface MigrateSqlServerSqlDbSyncTaskOutputMigrationLevel {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "MigrationLevelOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {Date} [startedOn] Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly startedOn?: Date;
  /**
   * @member {Date} [endedOn] Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly endedOn?: Date;
  /**
   * @member {string} [sourceServerVersion] Source server version
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sourceServerVersion?: string;
  /**
   * @member {string} [sourceServer] Source server name
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sourceServer?: string;
  /**
   * @member {string} [targetServerVersion] Target server version
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly targetServerVersion?: string;
  /**
   * @member {string} [targetServer] Target server name
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly targetServer?: string;
  /**
   * @member {number} [databaseCount] Count of databases
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly databaseCount?: number;
}

/**
 * @interface
 * An interface representing SqlMigrationTaskInput.
 * Base class for migration task input
 *
 */
export interface SqlMigrationTaskInput {
  /**
   * @member {SqlConnectionInfo} sourceConnectionInfo Information for
   * connecting to source
   */
  sourceConnectionInfo: SqlConnectionInfo;
  /**
   * @member {SqlConnectionInfo} targetConnectionInfo Information for
   * connecting to target
   */
  targetConnectionInfo: SqlConnectionInfo;
}

/**
 * @interface
 * An interface representing MigrationValidationOptions.
 * Types of validations to run after the migration
 *
 */
export interface MigrationValidationOptions {
  /**
   * @member {boolean} [enableSchemaValidation] Allows to compare the schema
   * information between source and target.
   */
  enableSchemaValidation?: boolean;
  /**
   * @member {boolean} [enableDataIntegrityValidation] Allows to perform a
   * checksum based data integrity validation between source and target for the
   * selected database / tables .
   */
  enableDataIntegrityValidation?: boolean;
  /**
   * @member {boolean} [enableQueryAnalysisValidation] Allows to perform a
   * quick and intelligent query analysis by retrieving queries from the source
   * database and executes them in the target. The result will have execution
   * statistics for executions in source and target databases for the extracted
   * queries.
   */
  enableQueryAnalysisValidation?: boolean;
}

/**
 * @interface
 * An interface representing MigrateSqlServerSqlDbSyncTaskInput.
 * Input for the task that migrates on-prem SQL Server databases to Azure SQL
 * Database for online migrations
 *
 * @extends SqlMigrationTaskInput
 */
export interface MigrateSqlServerSqlDbSyncTaskInput extends SqlMigrationTaskInput {
  /**
   * @member {MigrateSqlServerSqlDbSyncDatabaseInput[]} selectedDatabases
   * Databases to migrate
   */
  selectedDatabases: MigrateSqlServerSqlDbSyncDatabaseInput[];
  /**
   * @member {MigrationValidationOptions} [validationOptions] Validation
   * options
   */
  validationOptions?: MigrationValidationOptions;
}

/**
 * @interface
 * An interface representing MigrateSqlServerSqlDbSyncTaskProperties.
 * Properties for the task that migrates on-prem SQL Server databases to Azure
 * SQL Database for online migrations
 *
 */
export interface MigrateSqlServerSqlDbSyncTaskProperties {
  /**
   * @member {string} taskType Polymorphic Discriminator
   */
  taskType: "Migrate.SqlServer.AzureSqlDb.Sync";
  /**
   * @member {ODataError[]} [errors] Array of errors. This is ignored if
   * submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly errors?: ODataError[];
  /**
   * @member {TaskState} [state] The state of the task. This is ignored if
   * submitted. Possible values include: 'Unknown', 'Queued', 'Running',
   * 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: TaskState;
  /**
   * @member {CommandPropertiesUnion[]} [commands] Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * @member {MigrateSqlServerSqlDbSyncTaskInput} [input] Task input
   */
  input?: MigrateSqlServerSqlDbSyncTaskInput;
  /**
   * @member {MigrateSqlServerSqlDbSyncTaskOutputUnion[]} [output] Task output.
   * This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly output?: MigrateSqlServerSqlDbSyncTaskOutputUnion[];
}

/**
 * @interface
 * An interface representing ValidationError.
 * Description about the errors happen while performing migration validation
 *
 */
export interface ValidationError {
  /**
   * @member {string} [text] Error Text
   */
  text?: string;
  /**
   * @member {Severity} [severity] Severity of the error. Possible values
   * include: 'Message', 'Warning', 'Error'
   */
  severity?: Severity;
}

/**
 * @interface
 * An interface representing WaitStatistics.
 * Wait statistics gathered during query batch execution
 *
 */
export interface WaitStatistics {
  /**
   * @member {string} [waitType] Type of the Wait
   */
  waitType?: string;
  /**
   * @member {number} [waitTimeMs] Total wait time in millisecond(s) . Default
   * value: 0 .
   */
  waitTimeMs?: number;
  /**
   * @member {number} [waitCount] Total no. of waits
   */
  waitCount?: number;
}

/**
 * @interface
 * An interface representing ExecutionStatistics.
 * Description about the errors happen while performing migration validation
 *
 */
export interface ExecutionStatistics {
  /**
   * @member {number} [executionCount] No. of query executions
   */
  executionCount?: number;
  /**
   * @member {number} [cpuTimeMs] CPU Time in millisecond(s) for the query
   * execution
   */
  cpuTimeMs?: number;
  /**
   * @member {number} [elapsedTimeMs] Time taken in millisecond(s) for
   * executing the query
   */
  elapsedTimeMs?: number;
  /**
   * @member {{ [propertyName: string]: WaitStatistics }} [waitStats]
   * Dictionary of sql query execution wait types and the respective statistics
   */
  waitStats?: { [propertyName: string]: WaitStatistics };
  /**
   * @member {boolean} [hasErrors] Indicates whether the query resulted in an
   * error
   */
  hasErrors?: boolean;
  /**
   * @member {string[]} [sqlErrors] List of sql Errors
   */
  sqlErrors?: string[];
}

/**
 * @interface
 * An interface representing QueryExecutionResult.
 * Describes query analysis results for execution in source and target
 *
 */
export interface QueryExecutionResult {
  /**
   * @member {string} [queryText] Query text retrieved from the source server
   */
  queryText?: string;
  /**
   * @member {number} [statementsInBatch] Total no. of statements in the batch
   */
  statementsInBatch?: number;
  /**
   * @member {ExecutionStatistics} [sourceResult] Query analysis result from
   * the source
   */
  sourceResult?: ExecutionStatistics;
  /**
   * @member {ExecutionStatistics} [targetResult] Query analysis result from
   * the target
   */
  targetResult?: ExecutionStatistics;
}

/**
 * @interface
 * An interface representing QueryAnalysisValidationResult.
 * Results for query analysis comparison between the source and target
 *
 */
export interface QueryAnalysisValidationResult {
  /**
   * @member {QueryExecutionResult} [queryResults] List of queries executed and
   * it's execution results in source and target
   */
  queryResults?: QueryExecutionResult;
  /**
   * @member {ValidationError} [validationErrors] Errors that are part of the
   * execution
   */
  validationErrors?: ValidationError;
}

/**
 * @interface
 * An interface representing SchemaComparisonValidationResultType.
 * Description about the errors happen while performing migration validation
 *
 */
export interface SchemaComparisonValidationResultType {
  /**
   * @member {string} [objectName] Name of the object that has the difference
   */
  objectName?: string;
  /**
   * @member {ObjectType} [objectType] Type of the object that has the
   * difference. e.g (Table/View/StoredProcedure). Possible values include:
   * 'StoredProcedures', 'Table', 'User', 'View', 'Function'
   */
  objectType?: ObjectType;
  /**
   * @member {UpdateActionType} [updateAction] Update action type with respect
   * to target. Possible values include: 'DeletedOnTarget', 'ChangedOnTarget',
   * 'AddedOnTarget'
   */
  updateAction?: UpdateActionType;
}

/**
 * @interface
 * An interface representing SchemaComparisonValidationResult.
 * Results for schema comparison between the source and target
 *
 */
export interface SchemaComparisonValidationResult {
  /**
   * @member {SchemaComparisonValidationResultType} [schemaDifferences] List of
   * schema differences between the source and target databases
   */
  schemaDifferences?: SchemaComparisonValidationResultType;
  /**
   * @member {ValidationError} [validationErrors] List of errors that happened
   * while performing schema compare validation
   */
  validationErrors?: ValidationError;
  /**
   * @member {{ [propertyName: string]: number }} [sourceDatabaseObjectCount]
   * Count of source database objects
   */
  sourceDatabaseObjectCount?: { [propertyName: string]: number };
  /**
   * @member {{ [propertyName: string]: number }} [targetDatabaseObjectCount]
   * Count of target database objects
   */
  targetDatabaseObjectCount?: { [propertyName: string]: number };
}

/**
 * @interface
 * An interface representing DataIntegrityValidationResult.
 * Results for checksum based Data Integrity validation results
 *
 */
export interface DataIntegrityValidationResult {
  /**
   * @member {{ [propertyName: string]: string }} [failedObjects] List of
   * failed table names of source and target pair
   */
  failedObjects?: { [propertyName: string]: string };
  /**
   * @member {ValidationError} [validationErrors] List of errors that happened
   * while performing data integrity validation
   */
  validationErrors?: ValidationError;
}

/**
 * @interface
 * An interface representing MigrationValidationDatabaseLevelResult.
 * Database level validation results
 *
 */
export interface MigrationValidationDatabaseLevelResult {
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [migrationId] Migration Identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly migrationId?: string;
  /**
   * @member {string} [sourceDatabaseName] Name of the source database
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sourceDatabaseName?: string;
  /**
   * @member {string} [targetDatabaseName] Name of the target database
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly targetDatabaseName?: string;
  /**
   * @member {Date} [startedOn] Validation start time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly startedOn?: Date;
  /**
   * @member {Date} [endedOn] Validation end time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly endedOn?: Date;
  /**
   * @member {DataIntegrityValidationResult} [dataIntegrityValidationResult]
   * Provides data integrity validation result between the source and target
   * tables that are migrated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly dataIntegrityValidationResult?: DataIntegrityValidationResult;
  /**
   * @member {SchemaComparisonValidationResult} [schemaValidationResult]
   * Provides schema comparison result between source and target database
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly schemaValidationResult?: SchemaComparisonValidationResult;
  /**
   * @member {QueryAnalysisValidationResult} [queryAnalysisValidationResult]
   * Results of some of the query execution result between source and target
   * database
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly queryAnalysisValidationResult?: QueryAnalysisValidationResult;
  /**
   * @member {ValidationStatus} [status] Current status of validation at the
   * database level. Possible values include: 'Default', 'NotStarted',
   * 'Initialized', 'InProgress', 'Completed', 'CompletedWithIssues',
   * 'Stopped', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly status?: ValidationStatus;
}

/**
 * @interface
 * An interface representing MigrationValidationDatabaseSummaryResult.
 * Migration Validation Database level summary result
 *
 */
export interface MigrationValidationDatabaseSummaryResult {
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [migrationId] Migration Identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly migrationId?: string;
  /**
   * @member {string} [sourceDatabaseName] Name of the source database
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sourceDatabaseName?: string;
  /**
   * @member {string} [targetDatabaseName] Name of the target database
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly targetDatabaseName?: string;
  /**
   * @member {Date} [startedOn] Validation start time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly startedOn?: Date;
  /**
   * @member {Date} [endedOn] Validation end time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly endedOn?: Date;
  /**
   * @member {ValidationStatus} [status] Current status of validation at the
   * database level. Possible values include: 'Default', 'NotStarted',
   * 'Initialized', 'InProgress', 'Completed', 'CompletedWithIssues',
   * 'Stopped', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly status?: ValidationStatus;
}

/**
 * @interface
 * An interface representing MigrationValidationResult.
 * Migration Validation Result
 *
 */
export interface MigrationValidationResult {
  /**
   * @member {string} [id] Migration validation result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [migrationId] Migration Identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly migrationId?: string;
  /**
   * @member {{ [propertyName: string]:
   * MigrationValidationDatabaseSummaryResult }} [summaryResults] Validation
   * summary results for each database
   */
  summaryResults?: { [propertyName: string]: MigrationValidationDatabaseSummaryResult };
  /**
   * @member {ValidationStatus} [status] Current status of validation at the
   * migration level. Status from the database validation result status will be
   * aggregated here. Possible values include: 'Default', 'NotStarted',
   * 'Initialized', 'InProgress', 'Completed', 'CompletedWithIssues',
   * 'Stopped', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly status?: ValidationStatus;
}

/**
 * Contains the possible cases for MigrateSqlServerSqlDbTaskOutput.
 */
export type MigrateSqlServerSqlDbTaskOutputUnion = MigrateSqlServerSqlDbTaskOutput | MigrateSqlServerSqlDbTaskOutputError | MigrateSqlServerSqlDbTaskOutputTableLevel | MigrateSqlServerSqlDbTaskOutputDatabaseLevel | MigrateSqlServerSqlDbTaskOutputMigrationLevel;

/**
 * @interface
 * An interface representing MigrateSqlServerSqlDbTaskOutput.
 * Output for the task that migrates on-prem SQL Server databases to Azure SQL
 * Database
 *
 */
export interface MigrateSqlServerSqlDbTaskOutput {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "MigrateSqlServerSqlDbTaskOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
}

/**
 * @interface
 * An interface representing MigrateSqlServerSqlDbTaskOutputError.
 */
export interface MigrateSqlServerSqlDbTaskOutputError {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "ErrorOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {ReportableException} [error] Migration error
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly error?: ReportableException;
}

/**
 * @interface
 * An interface representing MigrateSqlServerSqlDbTaskOutputTableLevel.
 */
export interface MigrateSqlServerSqlDbTaskOutputTableLevel {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "TableLevelOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [objectName] Name of the item
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly objectName?: string;
  /**
   * @member {Date} [startedOn] Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly startedOn?: Date;
  /**
   * @member {Date} [endedOn] Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly endedOn?: Date;
  /**
   * @member {MigrationState} [state] Current state of migration. Possible
   * values include: 'None', 'InProgress', 'Failed', 'Warning', 'Completed',
   * 'Skipped', 'Stopped'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: MigrationState;
  /**
   * @member {string} [statusMessage] Status message
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly statusMessage?: string;
  /**
   * @member {number} [itemsCount] Number of items
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly itemsCount?: number;
  /**
   * @member {number} [itemsCompletedCount] Number of successfully completed
   * items
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly itemsCompletedCount?: number;
  /**
   * @member {string} [errorPrefix] Wildcard string prefix to use for querying
   * all errors of the item
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly errorPrefix?: string;
  /**
   * @member {string} [resultPrefix] Wildcard string prefix to use for querying
   * all sub-tem results of the item
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly resultPrefix?: string;
}

/**
 * @interface
 * An interface representing DataItemMigrationSummaryResult.
 * Basic summary of a data item migration
 *
 */
export interface DataItemMigrationSummaryResult {
  /**
   * @member {string} [name] Name of the item
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {Date} [startedOn] Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly startedOn?: Date;
  /**
   * @member {Date} [endedOn] Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly endedOn?: Date;
  /**
   * @member {MigrationState} [state] Current state of migration. Possible
   * values include: 'None', 'InProgress', 'Failed', 'Warning', 'Completed',
   * 'Skipped', 'Stopped'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: MigrationState;
  /**
   * @member {string} [statusMessage] Status message
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly statusMessage?: string;
  /**
   * @member {number} [itemsCount] Number of items
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly itemsCount?: number;
  /**
   * @member {number} [itemsCompletedCount] Number of successfully completed
   * items
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly itemsCompletedCount?: number;
  /**
   * @member {string} [errorPrefix] Wildcard string prefix to use for querying
   * all errors of the item
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly errorPrefix?: string;
  /**
   * @member {string} [resultPrefix] Wildcard string prefix to use for querying
   * all sub-tem results of the item
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly resultPrefix?: string;
}

/**
 * @interface
 * An interface representing MigrateSqlServerSqlDbTaskOutputDatabaseLevel.
 */
export interface MigrateSqlServerSqlDbTaskOutputDatabaseLevel {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "DatabaseLevelOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [databaseName] Name of the item
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly databaseName?: string;
  /**
   * @member {Date} [startedOn] Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly startedOn?: Date;
  /**
   * @member {Date} [endedOn] Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly endedOn?: Date;
  /**
   * @member {MigrationState} [state] Current state of migration. Possible
   * values include: 'None', 'InProgress', 'Failed', 'Warning', 'Completed',
   * 'Skipped', 'Stopped'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: MigrationState;
  /**
   * @member {DatabaseMigrationStage} [stage] Migration stage that this
   * database is in. Possible values include: 'None', 'Initialize', 'Backup',
   * 'FileCopy', 'Restore', 'Completed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly stage?: DatabaseMigrationStage;
  /**
   * @member {string} [statusMessage] Status message
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly statusMessage?: string;
  /**
   * @member {string} [message] Migration progress message
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly message?: string;
  /**
   * @member {number} [numberOfObjects] Number of objects
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly numberOfObjects?: number;
  /**
   * @member {number} [numberOfObjectsCompleted] Number of successfully
   * completed objects
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly numberOfObjectsCompleted?: number;
  /**
   * @member {number} [errorCount] Number of database/object errors.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly errorCount?: number;
  /**
   * @member {string} [errorPrefix] Wildcard string prefix to use for querying
   * all errors of the item
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly errorPrefix?: string;
  /**
   * @member {string} [resultPrefix] Wildcard string prefix to use for querying
   * all sub-tem results of the item
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly resultPrefix?: string;
  /**
   * @member {ReportableException[]} [exceptionsAndWarnings] Migration
   * exceptions and warnings.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly exceptionsAndWarnings?: ReportableException[];
  /**
   * @member {{ [propertyName: string]: DataItemMigrationSummaryResult }}
   * [objectSummary] Summary of object results in the migration
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly objectSummary?: { [propertyName: string]: DataItemMigrationSummaryResult };
}

/**
 * @interface
 * An interface representing MigrationReportResult.
 * Migration validation report result, contains the url for downloading the
 * generated report.
 *
 */
export interface MigrationReportResult {
  /**
   * @member {string} [id] Migration validation result identifier
   */
  id?: string;
  /**
   * @member {string} [reportUrl] The url of the report.
   */
  reportUrl?: string;
}

/**
 * @interface
 * An interface representing DatabaseSummaryResult.
 * Summary of database results in the migration
 *
 * @extends DataItemMigrationSummaryResult
 */
export interface DatabaseSummaryResult extends DataItemMigrationSummaryResult {
  /**
   * @member {number} [sizeMB] Size of the database in megabytes
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sizeMB?: number;
}

/**
 * @interface
 * An interface representing MigrateSqlServerSqlDbTaskOutputMigrationLevel.
 */
export interface MigrateSqlServerSqlDbTaskOutputMigrationLevel {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "MigrationLevelOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {Date} [startedOn] Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly startedOn?: Date;
  /**
   * @member {Date} [endedOn] Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly endedOn?: Date;
  /**
   * @member {number} [durationInSeconds] Duration of task execution in
   * seconds.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly durationInSeconds?: number;
  /**
   * @member {MigrationStatus} [status] Current status of migration. Possible
   * values include: 'Default', 'Connecting', 'SourceAndTargetSelected',
   * 'SelectLogins', 'Configured', 'Running', 'Error', 'Stopped', 'Completed',
   * 'CompletedWithWarnings'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly status?: MigrationStatus;
  /**
   * @member {string} [statusMessage] Migration status message
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly statusMessage?: string;
  /**
   * @member {string} [message] Migration progress message
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly message?: string;
  /**
   * @member {{ [propertyName: string]: string }} [databases] Selected
   * databases as a map from database name to database id
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly databases?: { [propertyName: string]: string };
  /**
   * @member {{ [propertyName: string]: DatabaseSummaryResult }}
   * [databaseSummary] Summary of database results in the migration
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly databaseSummary?: { [propertyName: string]: DatabaseSummaryResult };
  /**
   * @member {MigrationValidationResult} [migrationValidationResult] Migration
   * Validation Results
   */
  migrationValidationResult?: MigrationValidationResult;
  /**
   * @member {MigrationReportResult} [migrationReportResult] Migration Report
   * Result, provides unique url for downloading your migration report.
   */
  migrationReportResult?: MigrationReportResult;
  /**
   * @member {string} [sourceServerVersion] Source server version
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sourceServerVersion?: string;
  /**
   * @member {string} [sourceServerBrandVersion] Source server brand version
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sourceServerBrandVersion?: string;
  /**
   * @member {string} [targetServerVersion] Target server version
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly targetServerVersion?: string;
  /**
   * @member {string} [targetServerBrandVersion] Target server brand version
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly targetServerBrandVersion?: string;
  /**
   * @member {ReportableException[]} [exceptionsAndWarnings] Migration
   * exceptions and warnings.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly exceptionsAndWarnings?: ReportableException[];
}

/**
 * @interface
 * An interface representing MigrateSqlServerSqlDbDatabaseInput.
 * Database specific information for SQL to Azure SQL DB migration task inputs
 *
 */
export interface MigrateSqlServerSqlDbDatabaseInput {
  /**
   * @member {string} [name] Name of the database
   */
  name?: string;
  /**
   * @member {string} [targetDatabaseName] Name of target database. Note:
   * Target database will be truncated before starting migration.
   */
  targetDatabaseName?: string;
  /**
   * @member {boolean} [makeSourceDbReadOnly] Whether to set database read only
   * before migration
   */
  makeSourceDbReadOnly?: boolean;
  /**
   * @member {{ [propertyName: string]: string }} [tableMap] Mapping of source
   * to target tables
   */
  tableMap?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing MigrateSqlServerSqlDbTaskInput.
 * Input for the task that migrates on-prem SQL Server databases to Azure SQL
 * Database
 *
 * @extends SqlMigrationTaskInput
 */
export interface MigrateSqlServerSqlDbTaskInput extends SqlMigrationTaskInput {
  /**
   * @member {MigrateSqlServerSqlDbDatabaseInput[]} selectedDatabases Databases
   * to migrate
   */
  selectedDatabases: MigrateSqlServerSqlDbDatabaseInput[];
  /**
   * @member {MigrationValidationOptions} [validationOptions] Options for
   * enabling various post migration validations. Available options,
   * 1.) Data Integrity Check: Performs a checksum based comparison on source
   * and target tables after the migration to ensure the correctness of the
   * data.
   * 2.) Schema Validation: Performs a thorough schema comparison between the
   * source and target tables and provides a list of differences between the
   * source and target database, 3.) Query Analysis: Executes a set of queries
   * picked up automatically either from the Query Plan Cache or Query Store
   * and execute them and compares the execution time between the source and
   * target database.
   */
  validationOptions?: MigrationValidationOptions;
}

/**
 * @interface
 * An interface representing MigrateSqlServerSqlDbTaskProperties.
 * Properties for the task that migrates on-prem SQL Server databases to Azure
 * SQL Database
 *
 */
export interface MigrateSqlServerSqlDbTaskProperties {
  /**
   * @member {string} taskType Polymorphic Discriminator
   */
  taskType: "Migrate.SqlServer.SqlDb";
  /**
   * @member {ODataError[]} [errors] Array of errors. This is ignored if
   * submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly errors?: ODataError[];
  /**
   * @member {TaskState} [state] The state of the task. This is ignored if
   * submitted. Possible values include: 'Unknown', 'Queued', 'Running',
   * 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: TaskState;
  /**
   * @member {CommandPropertiesUnion[]} [commands] Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * @member {MigrateSqlServerSqlDbTaskInput} [input] Task input
   */
  input?: MigrateSqlServerSqlDbTaskInput;
  /**
   * @member {MigrateSqlServerSqlDbTaskOutputUnion[]} [output] Task output.
   * This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly output?: MigrateSqlServerSqlDbTaskOutputUnion[];
}

/**
 * Contains the possible cases for MigrateSqlServerSqlMITaskOutput.
 */
export type MigrateSqlServerSqlMITaskOutputUnion = MigrateSqlServerSqlMITaskOutput | MigrateSqlServerSqlMITaskOutputError | MigrateSqlServerSqlMITaskOutputLoginLevel | MigrateSqlServerSqlMITaskOutputAgentJobLevel | MigrateSqlServerSqlMITaskOutputDatabaseLevel | MigrateSqlServerSqlMITaskOutputMigrationLevel;

/**
 * @interface
 * An interface representing MigrateSqlServerSqlMITaskOutput.
 * Output for task that migrates SQL Server databases to Azure SQL Database
 * Managed Instance.
 *
 */
export interface MigrateSqlServerSqlMITaskOutput {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "MigrateSqlServerSqlMITaskOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
}

/**
 * @interface
 * An interface representing MigrateSqlServerSqlMITaskOutputError.
 */
export interface MigrateSqlServerSqlMITaskOutputError {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "ErrorOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {ReportableException} [error] Migration error
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly error?: ReportableException;
}

/**
 * @interface
 * An interface representing MigrateSqlServerSqlMITaskOutputLoginLevel.
 */
export interface MigrateSqlServerSqlMITaskOutputLoginLevel {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "LoginLevelOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [loginName] Login name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly loginName?: string;
  /**
   * @member {MigrationState} [state] Current state of login. Possible values
   * include: 'None', 'InProgress', 'Failed', 'Warning', 'Completed',
   * 'Skipped', 'Stopped'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: MigrationState;
  /**
   * @member {LoginMigrationStage} [stage] Current stage of login. Possible
   * values include: 'None', 'Initialize', 'LoginMigration',
   * 'EstablishUserMapping', 'AssignRoleMembership', 'AssignRoleOwnership',
   * 'EstablishServerPermissions', 'EstablishObjectPermissions', 'Completed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly stage?: LoginMigrationStage;
  /**
   * @member {Date} [startedOn] Login migration start time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly startedOn?: Date;
  /**
   * @member {Date} [endedOn] Login migration end time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly endedOn?: Date;
  /**
   * @member {string} [message] Login migration progress message
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly message?: string;
  /**
   * @member {ReportableException[]} [exceptionsAndWarnings] Login migration
   * errors and warnings per login
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly exceptionsAndWarnings?: ReportableException[];
}

/**
 * @interface
 * An interface representing MigrateSqlServerSqlMITaskOutputAgentJobLevel.
 */
export interface MigrateSqlServerSqlMITaskOutputAgentJobLevel {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "AgentJobLevelOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] Agent Job name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {boolean} [isEnabled] The state of the original Agent Job.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly isEnabled?: boolean;
  /**
   * @member {MigrationState} [state] Current state of migration. Possible
   * values include: 'None', 'InProgress', 'Failed', 'Warning', 'Completed',
   * 'Skipped', 'Stopped'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: MigrationState;
  /**
   * @member {Date} [startedOn] Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly startedOn?: Date;
  /**
   * @member {Date} [endedOn] Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly endedOn?: Date;
  /**
   * @member {string} [message] Migration progress message
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly message?: string;
  /**
   * @member {ReportableException[]} [exceptionsAndWarnings] Migration errors
   * and warnings per job
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly exceptionsAndWarnings?: ReportableException[];
}

/**
 * @interface
 * An interface representing MigrateSqlServerSqlMITaskOutputDatabaseLevel.
 */
export interface MigrateSqlServerSqlMITaskOutputDatabaseLevel {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "DatabaseLevelOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [databaseName] Name of the database
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly databaseName?: string;
  /**
   * @member {number} [sizeMB] Size of the database in megabytes
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sizeMB?: number;
  /**
   * @member {MigrationState} [state] Current state of migration. Possible
   * values include: 'None', 'InProgress', 'Failed', 'Warning', 'Completed',
   * 'Skipped', 'Stopped'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: MigrationState;
  /**
   * @member {DatabaseMigrationStage} [stage] Current stage of migration.
   * Possible values include: 'None', 'Initialize', 'Backup', 'FileCopy',
   * 'Restore', 'Completed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly stage?: DatabaseMigrationStage;
  /**
   * @member {Date} [startedOn] Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly startedOn?: Date;
  /**
   * @member {Date} [endedOn] Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly endedOn?: Date;
  /**
   * @member {string} [message] Migration progress message
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly message?: string;
  /**
   * @member {ReportableException[]} [exceptionsAndWarnings] Migration
   * exceptions and warnings
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly exceptionsAndWarnings?: ReportableException[];
}

/**
 * @interface
 * An interface representing StartMigrationScenarioServerRoleResult.
 * Server role migration result
 *
 */
export interface StartMigrationScenarioServerRoleResult {
  /**
   * @member {string} [name] Name of server role.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {MigrationState} [state] Current state of migration. Possible
   * values include: 'None', 'InProgress', 'Failed', 'Warning', 'Completed',
   * 'Skipped', 'Stopped'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: MigrationState;
  /**
   * @member {ReportableException[]} [exceptionsAndWarnings] Migration
   * exceptions and warnings.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly exceptionsAndWarnings?: ReportableException[];
}

/**
 * @interface
 * An interface representing MigrateSqlServerSqlMITaskOutputMigrationLevel.
 */
export interface MigrateSqlServerSqlMITaskOutputMigrationLevel {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "MigrationLevelOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {Date} [startedOn] Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly startedOn?: Date;
  /**
   * @member {Date} [endedOn] Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly endedOn?: Date;
  /**
   * @member {MigrationStatus} [status] Current status of migration. Possible
   * values include: 'Default', 'Connecting', 'SourceAndTargetSelected',
   * 'SelectLogins', 'Configured', 'Running', 'Error', 'Stopped', 'Completed',
   * 'CompletedWithWarnings'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly status?: MigrationStatus;
  /**
   * @member {MigrationState} [state] Current state of migration. Possible
   * values include: 'None', 'InProgress', 'Failed', 'Warning', 'Completed',
   * 'Skipped', 'Stopped'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: MigrationState;
  /**
   * @member {{ [propertyName: string]: string }} [agentJobs] Selected agent
   * jobs as a map from name to id
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly agentJobs?: { [propertyName: string]: string };
  /**
   * @member {{ [propertyName: string]: string }} [logins] Selected logins as a
   * map from name to id
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly logins?: { [propertyName: string]: string };
  /**
   * @member {string} [message] Migration progress message
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly message?: string;
  /**
   * @member {{ [propertyName: string]: StartMigrationScenarioServerRoleResult
   * }} [serverRoleResults] Map of server role migration results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly serverRoleResults?: { [propertyName: string]: StartMigrationScenarioServerRoleResult };
  /**
   * @member {{ [propertyName: string]: string }} [orphanedUsers] Map of users
   * to database name of orphaned users.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly orphanedUsers?: { [propertyName: string]: string };
  /**
   * @member {{ [propertyName: string]: string }} [databases] Selected
   * databases as a map from database name to database id
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly databases?: { [propertyName: string]: string };
  /**
   * @member {string} [sourceServerVersion] Source server version
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sourceServerVersion?: string;
  /**
   * @member {string} [sourceServerBrandVersion] Source server brand version
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sourceServerBrandVersion?: string;
  /**
   * @member {string} [targetServerVersion] Target server version
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly targetServerVersion?: string;
  /**
   * @member {string} [targetServerBrandVersion] Target server brand version
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly targetServerBrandVersion?: string;
  /**
   * @member {ReportableException[]} [exceptionsAndWarnings] Migration
   * exceptions and warnings.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly exceptionsAndWarnings?: ReportableException[];
}

/**
 * @interface
 * An interface representing MigrateSqlServerSqlMITaskInput.
 * Input for task that migrates SQL Server databases to Azure SQL Database
 * Managed Instance.
 *
 * @extends SqlMigrationTaskInput
 */
export interface MigrateSqlServerSqlMITaskInput extends SqlMigrationTaskInput {
  /**
   * @member {MigrateSqlServerSqlMIDatabaseInput[]} selectedDatabases Databases
   * to migrate
   */
  selectedDatabases: MigrateSqlServerSqlMIDatabaseInput[];
  /**
   * @member {string[]} [selectedLogins] Logins to migrate.
   */
  selectedLogins?: string[];
  /**
   * @member {string[]} [selectedAgentJobs] Agent Jobs to migrate.
   */
  selectedAgentJobs?: string[];
  /**
   * @member {FileShare} [backupFileShare] Backup file share information for
   * all selected databases.
   */
  backupFileShare?: FileShare;
  /**
   * @member {BlobShare} backupBlobShare SAS URI of Azure Storage Account
   * Container to be used for storing backup files.
   */
  backupBlobShare: BlobShare;
  /**
   * @member {BackupMode} [backupMode] Backup Mode to specify whether to use
   * existing backup or create new backup. If using existing backups, backup
   * file paths are required to be provided in selectedDatabases. Possible
   * values include: 'CreateBackup', 'ExistingBackup'
   */
  backupMode?: BackupMode;
}

/**
 * @interface
 * An interface representing MigrateSqlServerSqlMITaskProperties.
 * Properties for task that migrates SQL Server databases to Azure SQL Database
 * Managed Instance
 *
 */
export interface MigrateSqlServerSqlMITaskProperties {
  /**
   * @member {string} taskType Polymorphic Discriminator
   */
  taskType: "Migrate.SqlServer.AzureSqlDbMI";
  /**
   * @member {ODataError[]} [errors] Array of errors. This is ignored if
   * submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly errors?: ODataError[];
  /**
   * @member {TaskState} [state] The state of the task. This is ignored if
   * submitted. Possible values include: 'Unknown', 'Queued', 'Running',
   * 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: TaskState;
  /**
   * @member {CommandPropertiesUnion[]} [commands] Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * @member {MigrateSqlServerSqlMITaskInput} [input] Task input
   */
  input?: MigrateSqlServerSqlMITaskInput;
  /**
   * @member {MigrateSqlServerSqlMITaskOutputUnion[]} [output] Task output.
   * This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly output?: MigrateSqlServerSqlMITaskOutputUnion[];
}

/**
 * @interface
 * An interface representing ConnectToTargetAzureDbForMySqlTaskOutput.
 * Output for the task that validates connection to Azure Database for MySQL
 * and target server requirements
 *
 */
export interface ConnectToTargetAzureDbForMySqlTaskOutput {
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [serverVersion] Version of the target server
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly serverVersion?: string;
  /**
   * @member {string[]} [databases] List of databases on target server
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly databases?: string[];
  /**
   * @member {string} [targetServerBrandVersion] Target server brand version
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly targetServerBrandVersion?: string;
  /**
   * @member {ReportableException[]} [validationErrors] Validation errors
   * associated with the task
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly validationErrors?: ReportableException[];
}

/**
 * @interface
 * An interface representing ConnectToTargetAzureDbForMySqlTaskInput.
 * Input for the task that validates connection to Azure Database for MySQL and
 * target server requirements
 *
 */
export interface ConnectToTargetAzureDbForMySqlTaskInput {
  /**
   * @member {MySqlConnectionInfo} sourceConnectionInfo Connection information
   * for source MySQL server
   */
  sourceConnectionInfo: MySqlConnectionInfo;
  /**
   * @member {MySqlConnectionInfo} targetConnectionInfo Connection information
   * for target Azure Database for MySQL server
   */
  targetConnectionInfo: MySqlConnectionInfo;
}

/**
 * @interface
 * An interface representing ConnectToTargetAzureDbForMySqlTaskProperties.
 * Properties for the task that validates connection to Azure Database for
 * MySQL and target server requirements
 *
 */
export interface ConnectToTargetAzureDbForMySqlTaskProperties {
  /**
   * @member {string} taskType Polymorphic Discriminator
   */
  taskType: "ConnectToTarget.AzureDbForMySql";
  /**
   * @member {ODataError[]} [errors] Array of errors. This is ignored if
   * submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly errors?: ODataError[];
  /**
   * @member {TaskState} [state] The state of the task. This is ignored if
   * submitted. Possible values include: 'Unknown', 'Queued', 'Running',
   * 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: TaskState;
  /**
   * @member {CommandPropertiesUnion[]} [commands] Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * @member {ConnectToTargetAzureDbForMySqlTaskInput} [input] Task input
   */
  input?: ConnectToTargetAzureDbForMySqlTaskInput;
  /**
   * @member {ConnectToTargetAzureDbForMySqlTaskOutput[]} [output] Task output.
   * This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly output?: ConnectToTargetAzureDbForMySqlTaskOutput[];
}

/**
 * @interface
 * An interface representing ConnectToTargetSqlMITaskOutput.
 * Output for the task that validates connection to Azure SQL Database Managed
 * Instance.
 *
 */
export interface ConnectToTargetSqlMITaskOutput {
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [targetServerVersion] Target server version
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly targetServerVersion?: string;
  /**
   * @member {string} [targetServerBrandVersion] Target server brand version
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly targetServerBrandVersion?: string;
  /**
   * @member {string[]} [logins] List of logins on the target server.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly logins?: string[];
  /**
   * @member {string[]} [agentJobs] List of agent jobs on the target server.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly agentJobs?: string[];
  /**
   * @member {ReportableException[]} [validationErrors] Validation errors
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly validationErrors?: ReportableException[];
}

/**
 * @interface
 * An interface representing ConnectToTargetSqlMITaskInput.
 * Input for the task that validates connection to Azure SQL Database Managed
 * Instance.
 *
 */
export interface ConnectToTargetSqlMITaskInput {
  /**
   * @member {SqlConnectionInfo} targetConnectionInfo Connection information
   * for target SQL Server
   */
  targetConnectionInfo: SqlConnectionInfo;
}

/**
 * @interface
 * An interface representing ConnectToTargetSqlMITaskProperties.
 * Properties for the task that validates connection to Azure SQL Database
 * Managed Instance
 *
 */
export interface ConnectToTargetSqlMITaskProperties {
  /**
   * @member {string} taskType Polymorphic Discriminator
   */
  taskType: "ConnectToTarget.AzureSqlDbMI";
  /**
   * @member {ODataError[]} [errors] Array of errors. This is ignored if
   * submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly errors?: ODataError[];
  /**
   * @member {TaskState} [state] The state of the task. This is ignored if
   * submitted. Possible values include: 'Unknown', 'Queued', 'Running',
   * 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: TaskState;
  /**
   * @member {CommandPropertiesUnion[]} [commands] Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * @member {ConnectToTargetSqlMITaskInput} [input] Task input
   */
  input?: ConnectToTargetSqlMITaskInput;
  /**
   * @member {ConnectToTargetSqlMITaskOutput[]} [output] Task output. This is
   * ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly output?: ConnectToTargetSqlMITaskOutput[];
}

/**
 * @interface
 * An interface representing DatabaseTable.
 * Table properties
 *
 */
export interface DatabaseTable {
  /**
   * @member {boolean} [hasRows] Indicates whether table is empty or not
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly hasRows?: boolean;
  /**
   * @member {string} [name] Schema-qualified name of the table
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
}

/**
 * @interface
 * An interface representing GetUserTablesSqlSyncTaskOutput.
 * Output of the task that collects user tables for the given list of databases
 *
 */
export interface GetUserTablesSqlSyncTaskOutput {
  /**
   * @member {{ [propertyName: string]: DatabaseTable[] }}
   * [databasesToSourceTables] Mapping from database name to list of source
   * tables
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly databasesToSourceTables?: { [propertyName: string]: DatabaseTable[] };
  /**
   * @member {{ [propertyName: string]: DatabaseTable[] }}
   * [databasesToTargetTables] Mapping from database name to list of target
   * tables
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly databasesToTargetTables?: { [propertyName: string]: DatabaseTable[] };
  /**
   * @member {{ [propertyName: string]: string[] }} [tableValidationErrors]
   * Mapping from database name to list of validation errors
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tableValidationErrors?: { [propertyName: string]: string[] };
  /**
   * @member {ReportableException[]} [validationErrors] Validation errors
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly validationErrors?: ReportableException[];
}

/**
 * @interface
 * An interface representing GetUserTablesSqlSyncTaskInput.
 * Input for the task that collects user tables for the given list of databases
 *
 */
export interface GetUserTablesSqlSyncTaskInput {
  /**
   * @member {SqlConnectionInfo} sourceConnectionInfo Connection information
   * for SQL Server
   */
  sourceConnectionInfo: SqlConnectionInfo;
  /**
   * @member {SqlConnectionInfo} targetConnectionInfo Connection information
   * for SQL DB
   */
  targetConnectionInfo: SqlConnectionInfo;
  /**
   * @member {string[]} selectedSourceDatabases List of source database names
   * to collect tables for
   */
  selectedSourceDatabases: string[];
  /**
   * @member {string[]} selectedTargetDatabases List of target database names
   * to collect tables for
   */
  selectedTargetDatabases: string[];
}

/**
 * @interface
 * An interface representing GetUserTablesSqlSyncTaskProperties.
 * Properties for the task that collects user tables for the given list of
 * databases
 *
 */
export interface GetUserTablesSqlSyncTaskProperties {
  /**
   * @member {string} taskType Polymorphic Discriminator
   */
  taskType: "GetUserTables.AzureSqlDb.Sync";
  /**
   * @member {ODataError[]} [errors] Array of errors. This is ignored if
   * submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly errors?: ODataError[];
  /**
   * @member {TaskState} [state] The state of the task. This is ignored if
   * submitted. Possible values include: 'Unknown', 'Queued', 'Running',
   * 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: TaskState;
  /**
   * @member {CommandPropertiesUnion[]} [commands] Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * @member {GetUserTablesSqlSyncTaskInput} [input] Task input
   */
  input?: GetUserTablesSqlSyncTaskInput;
  /**
   * @member {GetUserTablesSqlSyncTaskOutput[]} [output] Task output. This is
   * ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly output?: GetUserTablesSqlSyncTaskOutput[];
}

/**
 * @interface
 * An interface representing GetUserTablesSqlTaskOutput.
 * Output of the task that collects user tables for the given list of databases
 *
 */
export interface GetUserTablesSqlTaskOutput {
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {{ [propertyName: string]: DatabaseTable[] }} [databasesToTables]
   * Mapping from database name to list of tables
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly databasesToTables?: { [propertyName: string]: DatabaseTable[] };
  /**
   * @member {ReportableException[]} [validationErrors] Validation errors
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly validationErrors?: ReportableException[];
}

/**
 * @interface
 * An interface representing GetUserTablesSqlTaskInput.
 * Input for the task that collects user tables for the given list of databases
 *
 */
export interface GetUserTablesSqlTaskInput {
  /**
   * @member {SqlConnectionInfo} connectionInfo Connection information for SQL
   * Server
   */
  connectionInfo: SqlConnectionInfo;
  /**
   * @member {string[]} selectedDatabases List of database names to collect
   * tables for
   */
  selectedDatabases: string[];
}

/**
 * @interface
 * An interface representing GetUserTablesSqlTaskProperties.
 * Properties for the task that collects user tables for the given list of
 * databases
 *
 */
export interface GetUserTablesSqlTaskProperties {
  /**
   * @member {string} taskType Polymorphic Discriminator
   */
  taskType: "GetUserTables.Sql";
  /**
   * @member {ODataError[]} [errors] Array of errors. This is ignored if
   * submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly errors?: ODataError[];
  /**
   * @member {TaskState} [state] The state of the task. This is ignored if
   * submitted. Possible values include: 'Unknown', 'Queued', 'Running',
   * 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: TaskState;
  /**
   * @member {CommandPropertiesUnion[]} [commands] Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * @member {GetUserTablesSqlTaskInput} [input] Task input
   */
  input?: GetUserTablesSqlTaskInput;
  /**
   * @member {GetUserTablesSqlTaskOutput[]} [output] Task output. This is
   * ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly output?: GetUserTablesSqlTaskOutput[];
}

/**
 * @interface
 * An interface representing ConnectToTargetSqlDbTaskOutput.
 * Output for the task that validates connection to SQL DB and target server
 * requirements
 *
 */
export interface ConnectToTargetSqlDbTaskOutput {
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {{ [propertyName: string]: string }} [databases] Source databases
   * as a map from database name to database id
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly databases?: { [propertyName: string]: string };
  /**
   * @member {string} [targetServerVersion] Version of the target server
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly targetServerVersion?: string;
  /**
   * @member {string} [targetServerBrandVersion] Target server brand version
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly targetServerBrandVersion?: string;
}

/**
 * @interface
 * An interface representing ConnectToTargetSqlSqlDbSyncTaskInput.
 * Input for the task that validates connection to Azure SQL DB and target
 * server requirements
 *
 */
export interface ConnectToTargetSqlSqlDbSyncTaskInput {
  /**
   * @member {SqlConnectionInfo} sourceConnectionInfo Connection information
   * for source SQL Server
   */
  sourceConnectionInfo: SqlConnectionInfo;
  /**
   * @member {SqlConnectionInfo} targetConnectionInfo Connection information
   * for target SQL DB
   */
  targetConnectionInfo: SqlConnectionInfo;
}

/**
 * @interface
 * An interface representing ConnectToTargetSqlSqlDbSyncTaskProperties.
 * Properties for the task that validates connection to SQL DB and target
 * server requirements for online migration
 *
 */
export interface ConnectToTargetSqlSqlDbSyncTaskProperties {
  /**
   * @member {string} taskType Polymorphic Discriminator
   */
  taskType: "ConnectToTarget.SqlDb.Sync";
  /**
   * @member {ODataError[]} [errors] Array of errors. This is ignored if
   * submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly errors?: ODataError[];
  /**
   * @member {TaskState} [state] The state of the task. This is ignored if
   * submitted. Possible values include: 'Unknown', 'Queued', 'Running',
   * 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: TaskState;
  /**
   * @member {CommandPropertiesUnion[]} [commands] Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * @member {ConnectToTargetSqlSqlDbSyncTaskInput} [input] Task input
   */
  input?: ConnectToTargetSqlSqlDbSyncTaskInput;
  /**
   * @member {ConnectToTargetSqlDbTaskOutput[]} [output] Task output. This is
   * ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly output?: ConnectToTargetSqlDbTaskOutput[];
}

/**
 * @interface
 * An interface representing ConnectToTargetSqlDbTaskInput.
 * Input for the task that validates connection to SQL DB and target server
 * requirements
 *
 */
export interface ConnectToTargetSqlDbTaskInput {
  /**
   * @member {SqlConnectionInfo} targetConnectionInfo Connection information
   * for target SQL DB
   */
  targetConnectionInfo: SqlConnectionInfo;
}

/**
 * @interface
 * An interface representing ConnectToTargetSqlDbTaskProperties.
 * Properties for the task that validates connection to SQL DB and target
 * server requirements
 *
 */
export interface ConnectToTargetSqlDbTaskProperties {
  /**
   * @member {string} taskType Polymorphic Discriminator
   */
  taskType: "ConnectToTarget.SqlDb";
  /**
   * @member {ODataError[]} [errors] Array of errors. This is ignored if
   * submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly errors?: ODataError[];
  /**
   * @member {TaskState} [state] The state of the task. This is ignored if
   * submitted. Possible values include: 'Unknown', 'Queued', 'Running',
   * 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: TaskState;
  /**
   * @member {CommandPropertiesUnion[]} [commands] Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * @member {ConnectToTargetSqlDbTaskInput} [input] Task input
   */
  input?: ConnectToTargetSqlDbTaskInput;
  /**
   * @member {ConnectToTargetSqlDbTaskOutput[]} [output] Task output. This is
   * ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly output?: ConnectToTargetSqlDbTaskOutput[];
}

/**
 * @interface
 * An interface representing MigrationEligibilityInfo.
 * Information about migration eligibility of a server object
 *
 */
export interface MigrationEligibilityInfo {
  /**
   * @member {boolean} [isEligibileForMigration] Whether object is eligible for
   * migration or not.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly isEligibileForMigration?: boolean;
  /**
   * @member {string[]} [validationMessages] Information about eligibility
   * failure for the server object.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly validationMessages?: string[];
}

/**
 * Contains the possible cases for ConnectToSourceSqlServerTaskOutput.
 */
export type ConnectToSourceSqlServerTaskOutputUnion = ConnectToSourceSqlServerTaskOutput | ConnectToSourceSqlServerTaskOutputAgentJobLevel | ConnectToSourceSqlServerTaskOutputLoginLevel | ConnectToSourceSqlServerTaskOutputDatabaseLevel | ConnectToSourceSqlServerTaskOutputTaskLevel;

/**
 * @interface
 * An interface representing ConnectToSourceSqlServerTaskOutput.
 * Output for the task that validates connection to SQL Server and also
 * validates source server requirements
 *
 */
export interface ConnectToSourceSqlServerTaskOutput {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "ConnectToSourceSqlServerTaskOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
}

/**
 * @interface
 * An interface representing ConnectToSourceSqlServerTaskOutputAgentJobLevel.
 * Agent Job level output for the task that validates connection to SQL Server
 * and also validates source server requirements
 *
 */
export interface ConnectToSourceSqlServerTaskOutputAgentJobLevel {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "AgentJobLevelOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] Agent Job name
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [jobCategory] The type of Agent Job.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly jobCategory?: string;
  /**
   * @member {boolean} [isEnabled] The state of the original Agent Job.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly isEnabled?: boolean;
  /**
   * @member {string} [jobOwner] The owner of the Agent Job
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly jobOwner?: string;
  /**
   * @member {Date} [lastExecutedOn] UTC Date and time when the Agent Job was
   * last executed.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly lastExecutedOn?: Date;
  /**
   * @member {ReportableException[]} [validationErrors] Validation errors
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly validationErrors?: ReportableException[];
  /**
   * @member {MigrationEligibilityInfo} [migrationEligibility] Information
   * about eligiblity of agent job for migration.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly migrationEligibility?: MigrationEligibilityInfo;
}

/**
 * @interface
 * An interface representing ConnectToSourceSqlServerTaskOutputLoginLevel.
 * Login level output for the task that validates connection to SQL Server and
 * also validates source server requirements
 *
 */
export interface ConnectToSourceSqlServerTaskOutputLoginLevel {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "LoginLevelOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] Login name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {LoginType} [loginType] The type of login. Possible values
   * include: 'WindowsUser', 'WindowsGroup', 'SqlLogin', 'Certificate',
   * 'AsymmetricKey', 'ExternalUser', 'ExternalGroup'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly loginType?: LoginType;
  /**
   * @member {string} [defaultDatabase] The default database for the login.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly defaultDatabase?: string;
  /**
   * @member {boolean} [isEnabled] The state of the login.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly isEnabled?: boolean;
  /**
   * @member {MigrationEligibilityInfo} [migrationEligibility] Information
   * about eligiblity of login for migration.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly migrationEligibility?: MigrationEligibilityInfo;
}

/**
 * @interface
 * An interface representing DatabaseFileInfo.
 * Database file specific information
 *
 */
export interface DatabaseFileInfo {
  /**
   * @member {string} [databaseName] Name of the database
   */
  databaseName?: string;
  /**
   * @member {string} [id] Unique identifier for database file
   */
  id?: string;
  /**
   * @member {string} [logicalName] Logical name of the file
   */
  logicalName?: string;
  /**
   * @member {string} [physicalFullName] Operating-system full path of the file
   */
  physicalFullName?: string;
  /**
   * @member {string} [restoreFullName] Suggested full path of the file for
   * restoring
   */
  restoreFullName?: string;
  /**
   * @member {DatabaseFileType} [fileType] Database file type. Possible values
   * include: 'Rows', 'Log', 'Filestream', 'NotSupported', 'Fulltext'
   */
  fileType?: DatabaseFileType;
  /**
   * @member {number} [sizeMB] Size of the file in megabytes
   */
  sizeMB?: number;
}

/**
 * @interface
 * An interface representing ConnectToSourceSqlServerTaskOutputDatabaseLevel.
 * Database level output for the task that validates connection to SQL Server
 * and also validates source server requirements
 *
 */
export interface ConnectToSourceSqlServerTaskOutputDatabaseLevel {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "DatabaseLevelOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] Database name
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {number} [sizeMB] Size of the file in megabytes
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sizeMB?: number;
  /**
   * @member {DatabaseFileInfo[]} [databaseFiles] The list of database files
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly databaseFiles?: DatabaseFileInfo[];
  /**
   * @member {DatabaseCompatLevel} [compatibilityLevel] SQL Server
   * compatibility level of database. Possible values include: 'CompatLevel80',
   * 'CompatLevel90', 'CompatLevel100', 'CompatLevel110', 'CompatLevel120',
   * 'CompatLevel130', 'CompatLevel140'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly compatibilityLevel?: DatabaseCompatLevel;
  /**
   * @member {DatabaseState} [databaseState] State of the database. Possible
   * values include: 'Online', 'Restoring', 'Recovering', 'RecoveryPending',
   * 'Suspect', 'Emergency', 'Offline', 'Copying', 'OfflineSecondary'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly databaseState?: DatabaseState;
}

/**
 * @interface
 * An interface representing ConnectToSourceSqlServerTaskOutputTaskLevel.
 * Task level output for the task that validates connection to SQL Server and
 * also validates source server requirements
 *
 */
export interface ConnectToSourceSqlServerTaskOutputTaskLevel {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "TaskLevelOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {{ [propertyName: string]: string }} [databases] Source databases
   * as a map from database name to database id
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly databases?: { [propertyName: string]: string };
  /**
   * @member {{ [propertyName: string]: string }} [logins] Source logins as a
   * map from login name to login id.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly logins?: { [propertyName: string]: string };
  /**
   * @member {{ [propertyName: string]: string }} [agentJobs] Source agent jobs
   * as a map from agent job name to id.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly agentJobs?: { [propertyName: string]: string };
  /**
   * @member {{ [propertyName: string]: string }}
   * [databaseTdeCertificateMapping] Mapping from database name to TDE
   * certificate name, if applicable
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly databaseTdeCertificateMapping?: { [propertyName: string]: string };
  /**
   * @member {string} [sourceServerVersion] Source server version
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sourceServerVersion?: string;
  /**
   * @member {string} [sourceServerBrandVersion] Source server brand version
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sourceServerBrandVersion?: string;
  /**
   * @member {ReportableException[]} [validationErrors] Validation errors
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly validationErrors?: ReportableException[];
}

/**
 * @interface
 * An interface representing ConnectToSourceSqlServerTaskInput.
 * Input for the task that validates connection to SQL Server and also
 * validates source server requirements
 *
 */
export interface ConnectToSourceSqlServerTaskInput {
  /**
   * @member {SqlConnectionInfo} sourceConnectionInfo Connection information
   * for Source SQL Server
   */
  sourceConnectionInfo: SqlConnectionInfo;
  /**
   * @member {ServerLevelPermissionsGroup} [checkPermissionsGroup] Permission
   * group for validations. Possible values include: 'Default',
   * 'MigrationFromSqlServerToAzureDB', 'MigrationFromSqlServerToAzureMI',
   * 'MigrationFromMySQLToAzureDBForMySQL'
   */
  checkPermissionsGroup?: ServerLevelPermissionsGroup;
  /**
   * @member {boolean} [collectLogins] Flag for whether to collect logins from
   * source server. Default value: false .
   */
  collectLogins?: boolean;
  /**
   * @member {boolean} [collectAgentJobs] Flag for whether to collect agent
   * jobs from source server. Default value: false .
   */
  collectAgentJobs?: boolean;
  /**
   * @member {boolean} [collectTdeCertificateInfo] Flag for whether to collect
   * TDE Certificate names from source server. Default value: false .
   */
  collectTdeCertificateInfo?: boolean;
}

/**
 * @interface
 * An interface representing ConnectToSourceSqlServerSyncTaskProperties.
 * Properties for the task that validates connection to SQL Server and source
 * server requirements for online migration
 *
 */
export interface ConnectToSourceSqlServerSyncTaskProperties {
  /**
   * @member {string} taskType Polymorphic Discriminator
   */
  taskType: "ConnectToSource.SqlServer.Sync";
  /**
   * @member {ODataError[]} [errors] Array of errors. This is ignored if
   * submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly errors?: ODataError[];
  /**
   * @member {TaskState} [state] The state of the task. This is ignored if
   * submitted. Possible values include: 'Unknown', 'Queued', 'Running',
   * 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: TaskState;
  /**
   * @member {CommandPropertiesUnion[]} [commands] Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * @member {ConnectToSourceSqlServerTaskInput} [input] Task input
   */
  input?: ConnectToSourceSqlServerTaskInput;
  /**
   * @member {ConnectToSourceSqlServerTaskOutputUnion[]} [output] Task output.
   * This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly output?: ConnectToSourceSqlServerTaskOutputUnion[];
}

/**
 * @interface
 * An interface representing ConnectToSourceSqlServerTaskProperties.
 * Properties for the task that validates connection to SQL Server and also
 * validates source server requirements
 *
 */
export interface ConnectToSourceSqlServerTaskProperties {
  /**
   * @member {string} taskType Polymorphic Discriminator
   */
  taskType: "ConnectToSource.SqlServer";
  /**
   * @member {ODataError[]} [errors] Array of errors. This is ignored if
   * submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly errors?: ODataError[];
  /**
   * @member {TaskState} [state] The state of the task. This is ignored if
   * submitted. Possible values include: 'Unknown', 'Queued', 'Running',
   * 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: TaskState;
  /**
   * @member {CommandPropertiesUnion[]} [commands] Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * @member {ConnectToSourceSqlServerTaskInput} [input] Task input
   */
  input?: ConnectToSourceSqlServerTaskInput;
  /**
   * @member {ConnectToSourceSqlServerTaskOutputUnion[]} [output] Task output.
   * This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly output?: ConnectToSourceSqlServerTaskOutputUnion[];
}

/**
 * @interface
 * An interface representing ProjectTask.
 * A task resource
 *
 * @extends Resource
 */
export interface ProjectTask extends Resource {
  /**
   * @member {string} [etag] HTTP strong entity tag value. This is ignored if
   * submitted.
   */
  etag?: string;
  /**
   * @member {ProjectTaskPropertiesUnion} [properties] Custom task properties
   */
  properties?: ProjectTaskPropertiesUnion;
}

/**
 * @interface
 * An interface representing ServiceSku.
 * An Azure SKU instance
 *
 */
export interface ServiceSku {
  /**
   * @member {string} [name] The unique name of the SKU, such as 'P3'
   */
  name?: string;
  /**
   * @member {string} [tier] The tier of the SKU, such as 'Basic', 'General
   * Purpose', or 'Business Critical'
   */
  tier?: string;
  /**
   * @member {string} [family] The SKU family, used when the service has
   * multiple performance classes within a tier, such as 'A', 'D', etc. for
   * virtual machines
   */
  family?: string;
  /**
   * @member {string} [size] The size of the SKU, used when the name alone does
   * not denote a service size or when a SKU has multiple performance classes
   * within a family, e.g. 'A1' for virtual machines
   */
  size?: string;
  /**
   * @member {number} [capacity] The capacity of the SKU, if it supports
   * scaling
   */
  capacity?: number;
}

/**
 * @interface
 * An interface representing DataMigrationServiceProperties.
 * Properties of the Database Migration Service instance
 *
 */
export interface DataMigrationServiceProperties {
  /**
   * @member {ServiceProvisioningState} [provisioningState] The resource's
   * provisioning state. Possible values include: 'Accepted', 'Deleting',
   * 'Deploying', 'Stopped', 'Stopping', 'Starting', 'FailedToStart',
   * 'FailedToStop', 'Succeeded', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: ServiceProvisioningState;
  /**
   * @member {string} [publicKey] The public key of the service, used to
   * encrypt secrets sent to the service
   */
  publicKey?: string;
  /**
   * @member {string} virtualSubnetId The ID of the
   * Microsoft.Network/virtualNetworks/subnets resource to which the service
   * should be joined
   */
  virtualSubnetId: string;
}

/**
 * @interface
 * An interface representing DataMigrationService.
 * A Database Migration Service resource
 *
 * @extends TrackedResource
 */
export interface DataMigrationService extends TrackedResource {
  /**
   * @member {string} [etag] HTTP strong entity tag value. Ignored if submitted
   */
  etag?: string;
  /**
   * @member {string} [kind] The resource kind. Only 'vm' (the default) is
   * supported.
   */
  kind?: string;
  /**
   * @member {ServiceProvisioningState} [provisioningState] The resource's
   * provisioning state. Possible values include: 'Accepted', 'Deleting',
   * 'Deploying', 'Stopped', 'Stopping', 'Starting', 'FailedToStart',
   * 'FailedToStop', 'Succeeded', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: ServiceProvisioningState;
  /**
   * @member {string} [publicKey] The public key of the service, used to
   * encrypt secrets sent to the service
   */
  publicKey?: string;
  /**
   * @member {string} virtualSubnetId The ID of the
   * Microsoft.Network/virtualNetworks/subnets resource to which the service
   * should be joined
   */
  virtualSubnetId: string;
  /**
   * @member {ServiceSku} [sku] Service SKU
   */
  sku?: ServiceSku;
}

/**
 * @interface
 * An interface representing NameAvailabilityRequest.
 * A resource type and proposed name
 *
 */
export interface NameAvailabilityRequest {
  /**
   * @member {string} [name] The proposed resource name
   */
  name?: string;
  /**
   * @member {string} [type] The resource type chain (e.g.
   * virtualMachines/extensions)
   */
  type?: string;
}

/**
 * @interface
 * An interface representing DatabaseInfo.
 * Project Database Details
 *
 */
export interface DatabaseInfo {
  /**
   * @member {string} sourceDatabaseName Name of the database
   */
  sourceDatabaseName: string;
}

/**
 * @interface
 * An interface representing ProjectProperties.
 * Project-specific properties
 *
 */
export interface ProjectProperties {
  /**
   * @member {ProjectSourcePlatform} sourcePlatform Source platform for the
   * project. Possible values include: 'SQL', 'MySQL', 'PostgreSql', 'Unknown'
   */
  sourcePlatform: ProjectSourcePlatform;
  /**
   * @member {ProjectTargetPlatform} targetPlatform Target platform for the
   * project. Possible values include: 'SQLDB', 'SQLMI', 'AzureDbForMySql',
   * 'AzureDbForPostgreSql', 'Unknown'
   */
  targetPlatform: ProjectTargetPlatform;
  /**
   * @member {Date} [creationTime] UTC Date and time when project was created
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly creationTime?: Date;
  /**
   * @member {ConnectionInfoUnion} [sourceConnectionInfo] Information for
   * connecting to source
   */
  sourceConnectionInfo?: ConnectionInfoUnion;
  /**
   * @member {ConnectionInfoUnion} [targetConnectionInfo] Information for
   * connecting to target
   */
  targetConnectionInfo?: ConnectionInfoUnion;
  /**
   * @member {DatabaseInfo[]} [databasesInfo] List of DatabaseInfo
   */
  databasesInfo?: DatabaseInfo[];
  /**
   * @member {ProjectProvisioningState} [provisioningState] The project's
   * provisioning state. Possible values include: 'Deleting', 'Succeeded'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: ProjectProvisioningState;
}

/**
 * @interface
 * An interface representing Project.
 * A project resource
 *
 * @extends TrackedResource
 */
export interface Project extends TrackedResource {
  /**
   * @member {ProjectSourcePlatform} sourcePlatform Source platform for the
   * project. Possible values include: 'SQL', 'MySQL', 'PostgreSql', 'Unknown'
   */
  sourcePlatform: ProjectSourcePlatform;
  /**
   * @member {ProjectTargetPlatform} targetPlatform Target platform for the
   * project. Possible values include: 'SQLDB', 'SQLMI', 'AzureDbForMySql',
   * 'AzureDbForPostgreSql', 'Unknown'
   */
  targetPlatform: ProjectTargetPlatform;
  /**
   * @member {Date} [creationTime] UTC Date and time when project was created
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly creationTime?: Date;
  /**
   * @member {ConnectionInfoUnion} [sourceConnectionInfo] Information for
   * connecting to source
   */
  sourceConnectionInfo?: ConnectionInfoUnion;
  /**
   * @member {ConnectionInfoUnion} [targetConnectionInfo] Information for
   * connecting to target
   */
  targetConnectionInfo?: ConnectionInfoUnion;
  /**
   * @member {DatabaseInfo[]} [databasesInfo] List of DatabaseInfo
   */
  databasesInfo?: DatabaseInfo[];
  /**
   * @member {ProjectProvisioningState} [provisioningState] The project's
   * provisioning state. Possible values include: 'Deleting', 'Succeeded'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: ProjectProvisioningState;
}

/**
 * @interface
 * An interface representing ApiError.
 * Error information.
 *
 */
export interface ApiError {
  /**
   * @member {ODataError} [error] Error information in OData format
   */
  error?: ODataError;
}

/**
 * @interface
 * An interface representing ServiceOperationDisplay.
 * Localized display text
 *
 */
export interface ServiceOperationDisplay {
  /**
   * @member {string} [provider] The localized resource provider name
   */
  provider?: string;
  /**
   * @member {string} [resource] The localized resource type name
   */
  resource?: string;
  /**
   * @member {string} [operation] The localized operation name
   */
  operation?: string;
  /**
   * @member {string} [description] The localized operation description
   */
  description?: string;
}

/**
 * @interface
 * An interface representing ServiceOperation.
 * Description of an action supported by the Database Migration Service
 *
 */
export interface ServiceOperation {
  /**
   * @member {string} [name] The fully qualified action name, e.g.
   * Microsoft.DataMigration/services/read
   */
  name?: string;
  /**
   * @member {ServiceOperationDisplay} [display] Localized display text
   */
  display?: ServiceOperationDisplay;
}

/**
 * @interface
 * An interface representing QuotaName.
 * The name of the quota
 *
 */
export interface QuotaName {
  /**
   * @member {string} [localizedValue] The localized name of the quota
   */
  localizedValue?: string;
  /**
   * @member {string} [value] The unlocalized name (or ID) of the quota
   */
  value?: string;
}

/**
 * @interface
 * An interface representing Quota.
 * Describes a quota for or usage details about a resource
 *
 */
export interface Quota {
  /**
   * @member {number} [currentValue] The current value of the quota. If null or
   * missing, the current value cannot be determined in the context of the
   * request.
   */
  currentValue?: number;
  /**
   * @member {string} [id] The resource ID of the quota object
   */
  id?: string;
  /**
   * @member {number} [limit] The maximum value of the quota. If null or
   * missing, the quota has no maximum, in which case it merely tracks usage.
   */
  limit?: number;
  /**
   * @member {QuotaName} [name] The name of the quota
   */
  name?: QuotaName;
  /**
   * @member {string} [unit] The unit for the quota, such as Count, Bytes,
   * BytesPerSecond, etc.
   */
  unit?: string;
}

/**
 * @interface
 * An interface representing NameAvailabilityResponse.
 * Indicates whether a proposed resource name is available
 *
 */
export interface NameAvailabilityResponse {
  /**
   * @member {boolean} [nameAvailable] If true, the name is valid and
   * available. If false, 'reason' describes why not.
   */
  nameAvailable?: boolean;
  /**
   * @member {NameCheckFailureReason} [reason] The reason why the name is not
   * available, if nameAvailable is false. Possible values include:
   * 'AlreadyExists', 'Invalid'
   */
  reason?: NameCheckFailureReason;
  /**
   * @member {string} [message] The localized reason why the name is not
   * available, if nameAvailable is false
   */
  message?: string;
}

/**
 * @interface
 * An interface representing AvailableServiceSkuSku.
 * SKU name, tier, etc.
 *
 */
export interface AvailableServiceSkuSku {
  /**
   * @member {string} [name] The name of the SKU
   */
  name?: string;
  /**
   * @member {string} [family] SKU family
   */
  family?: string;
  /**
   * @member {string} [size] SKU size
   */
  size?: string;
  /**
   * @member {string} [tier] The tier of the SKU, such as "Basic", "General
   * Purpose", or "Business Critical"
   */
  tier?: string;
}

/**
 * @interface
 * An interface representing AvailableServiceSkuCapacity.
 * A description of the scaling capacities of the SKU
 *
 */
export interface AvailableServiceSkuCapacity {
  /**
   * @member {number} [minimum] The minimum capacity, usually 0 or 1.
   */
  minimum?: number;
  /**
   * @member {number} [maximum] The maximum capacity
   */
  maximum?: number;
  /**
   * @member {number} [default] The default capacity
   */
  default?: number;
  /**
   * @member {ServiceScalability} [scaleType] The scalability approach.
   * Possible values include: 'none', 'manual', 'automatic'
   */
  scaleType?: ServiceScalability;
}

/**
 * @interface
 * An interface representing AvailableServiceSku.
 * Describes the available service SKU.
 *
 */
export interface AvailableServiceSku {
  /**
   * @member {string} [resourceType] The resource type, including the provider
   * namespace
   */
  resourceType?: string;
  /**
   * @member {AvailableServiceSkuSku} [sku] SKU name, tier, etc.
   */
  sku?: AvailableServiceSkuSku;
  /**
   * @member {AvailableServiceSkuCapacity} [capacity] A description of the
   * scaling capacities of the SKU
   */
  capacity?: AvailableServiceSkuCapacity;
}

/**
 * @interface
 * An interface representing DataMigrationServiceStatusResponse.
 * Service health status
 *
 */
export interface DataMigrationServiceStatusResponse {
  /**
   * @member {string} [agentVersion] The DMS instance agent version
   */
  agentVersion?: string;
  /**
   * @member {string} [status] The machine-readable status, such as
   * 'Initializing', 'Offline', 'Online', 'Deploying', 'Deleting', 'Stopped',
   * 'Stopping', 'Starting', 'FailedToStart', 'FailedToStop' or 'Failed'
   */
  status?: string;
  /**
   * @member {string} [vmSize] The services virtual machine size, such as
   * 'Standard_D2_v2'
   */
  vmSize?: string;
  /**
   * @member {string[]} [supportedTaskTypes] The list of supported task types
   */
  supportedTaskTypes?: string[];
}

/**
 * @interface
 * An interface representing ResourceSkuRestrictions.
 * Describes scaling information of a SKU.
 *
 */
export interface ResourceSkuRestrictions {
  /**
   * @member {ResourceSkuRestrictionsType} [type] The type of restrictions.
   * Possible values include: 'location'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: ResourceSkuRestrictionsType;
  /**
   * @member {string[]} [values] The value of restrictions. If the restriction
   * type is set to location. This would be different locations where the SKU
   * is restricted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly values?: string[];
  /**
   * @member {ResourceSkuRestrictionsReasonCode} [reasonCode] The reason code
   * for restriction. Possible values include: 'QuotaId',
   * 'NotAvailableForSubscription'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly reasonCode?: ResourceSkuRestrictionsReasonCode;
}

/**
 * @interface
 * An interface representing ResourceSkuCapabilities.
 * Describes The SKU capabilites object.
 *
 */
export interface ResourceSkuCapabilities {
  /**
   * @member {string} [name] An invariant to describe the feature.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [value] An invariant if the feature is measured by
   * quantity.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly value?: string;
}

/**
 * @interface
 * An interface representing ResourceSkuCosts.
 * Describes metadata for retrieving price info.
 *
 */
export interface ResourceSkuCosts {
  /**
   * @member {string} [meterID] Used for querying price from commerce.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly meterID?: string;
  /**
   * @member {number} [quantity] The multiplier is needed to extend the base
   * metered cost.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly quantity?: number;
  /**
   * @member {string} [extendedUnit] An invariant to show the extended unit.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly extendedUnit?: string;
}

/**
 * @interface
 * An interface representing ResourceSkuCapacity.
 * Describes scaling information of a SKU.
 *
 */
export interface ResourceSkuCapacity {
  /**
   * @member {number} [minimum] The minimum capacity.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly minimum?: number;
  /**
   * @member {number} [maximum] The maximum capacity.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly maximum?: number;
  /**
   * @member {number} [default] The default capacity.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly default?: number;
  /**
   * @member {ResourceSkuCapacityScaleType} [scaleType] The scale type
   * applicable to the SKU. Possible values include: 'Automatic', 'Manual',
   * 'None'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly scaleType?: ResourceSkuCapacityScaleType;
}

/**
 * @interface
 * An interface representing ResourceSku.
 * Describes an available DMS SKU.
 *
 */
export interface ResourceSku {
  /**
   * @member {string} [resourceType] The type of resource the SKU applies to.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly resourceType?: string;
  /**
   * @member {string} [name] The name of SKU.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [tier] Specifies the tier of DMS in a scale set.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tier?: string;
  /**
   * @member {string} [size] The Size of the SKU.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly size?: string;
  /**
   * @member {string} [family] The Family of this particular SKU.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly family?: string;
  /**
   * @member {string} [kind] The Kind of resources that are supported in this
   * SKU.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly kind?: string;
  /**
   * @member {ResourceSkuCapacity} [capacity] Not used.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly capacity?: ResourceSkuCapacity;
  /**
   * @member {string[]} [locations] The set of locations that the SKU is
   * available.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly locations?: string[];
  /**
   * @member {string[]} [apiVersions] The api versions that support this SKU.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly apiVersions?: string[];
  /**
   * @member {ResourceSkuCosts[]} [costs] Metadata for retrieving price info.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly costs?: ResourceSkuCosts[];
  /**
   * @member {ResourceSkuCapabilities[]} [capabilities] A name value pair to
   * describe the capability.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly capabilities?: ResourceSkuCapabilities[];
  /**
   * @member {ResourceSkuRestrictions[]} [restrictions] The restrictions
   * because of which SKU cannot be used. This is empty if there are no
   * restrictions.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly restrictions?: ResourceSkuRestrictions[];
}

/**
 * @interface
 * An interface representing ConnectToSourceMySqlTaskInput.
 * Input for the task that validates MySQL database connection
 *
 */
export interface ConnectToSourceMySqlTaskInput {
  /**
   * @member {MySqlConnectionInfo} sourceConnectionInfo Information for
   * connecting to MySQL source
   */
  sourceConnectionInfo: MySqlConnectionInfo;
  /**
   * @member {MySqlTargetPlatformType} [targetPlatform] Target Platform for the
   * migration. Possible values include: 'AzureDbForMySQL'
   */
  targetPlatform?: MySqlTargetPlatformType;
  /**
   * @member {ServerLevelPermissionsGroup} [checkPermissionsGroup] Permission
   * group for validations. Possible values include: 'Default',
   * 'MigrationFromSqlServerToAzureDB', 'MigrationFromSqlServerToAzureMI',
   * 'MigrationFromMySQLToAzureDBForMySQL'
   */
  checkPermissionsGroup?: ServerLevelPermissionsGroup;
}

/**
 * @interface
 * An interface representing ServerProperties.
 * Server properties for Oracle, MySQL type source
 *
 */
export interface ServerProperties {
  /**
   * @member {string} [serverPlatform] Name of the server platform
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly serverPlatform?: string;
  /**
   * @member {string} [serverName] Name of the server
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly serverName?: string;
  /**
   * @member {string} [serverVersion] Version of the database server
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly serverVersion?: string;
  /**
   * @member {string} [serverEdition] Edition of the database server
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly serverEdition?: string;
  /**
   * @member {string} [serverOperatingSystemVersion] Version of the operating
   * system
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly serverOperatingSystemVersion?: string;
  /**
   * @member {number} [serverDatabaseCount] Number of databases in the server
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly serverDatabaseCount?: number;
}

/**
 * @interface
 * An interface representing ConnectToSourceNonSqlTaskOutput.
 * Output for connect to Oracle, MySQL type source
 *
 */
export interface ConnectToSourceNonSqlTaskOutput {
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [sourceServerBrandVersion] Server brand version
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sourceServerBrandVersion?: string;
  /**
   * @member {ServerProperties} [serverProperties] Server properties
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly serverProperties?: ServerProperties;
  /**
   * @member {string[]} [databases] List of databases on the server
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly databases?: string[];
  /**
   * @member {ReportableException[]} [validationErrors] Validation errors
   * associated with the task
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly validationErrors?: ReportableException[];
}

/**
 * @interface
 * An interface representing ConnectToSourceMySqlTaskProperties.
 * Properties for the task that validates MySQL database connection
 *
 */
export interface ConnectToSourceMySqlTaskProperties {
  /**
   * @member {string} taskType Polymorphic Discriminator
   */
  taskType: "ConnectToSource.MySql";
  /**
   * @member {ODataError[]} [errors] Array of errors. This is ignored if
   * submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly errors?: ODataError[];
  /**
   * @member {TaskState} [state] The state of the task. This is ignored if
   * submitted. Possible values include: 'Unknown', 'Queued', 'Running',
   * 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: TaskState;
  /**
   * @member {CommandPropertiesUnion[]} [commands] Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * @member {ConnectToSourceMySqlTaskInput} [input] Task input
   */
  input?: ConnectToSourceMySqlTaskInput;
  /**
   * @member {ConnectToSourceNonSqlTaskOutput[]} [output] Task output. This is
   * ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly output?: ConnectToSourceNonSqlTaskOutput[];
}

/**
 * @interface
 * An interface representing SchemaMigrationSetting.
 * Settings for migrating schema from source to target
 *
 */
export interface SchemaMigrationSetting {
  /**
   * @member {SchemaMigrationOption} [schemaOption] Option on how to migrate
   * the schema. Possible values include: 'None', 'ExtractFromSource',
   * 'UseStorageFile'
   */
  schemaOption?: SchemaMigrationOption;
  /**
   * @member {string} [fileId] Resource Identifier of a file resource
   * containing the uploaded schema file
   */
  fileId?: string;
}

/**
 * @interface
 * An interface representing MigrateSchemaSqlServerSqlDbDatabaseInput.
 * Database input for migrate schema Sql Server to Azure SQL Server scenario
 *
 */
export interface MigrateSchemaSqlServerSqlDbDatabaseInput {
  /**
   * @member {string} [targetDatabaseName] Name of target database
   */
  targetDatabaseName?: string;
  /**
   * @member {SchemaMigrationSetting} [schemaSetting] Database schema migration
   * settings
   */
  schemaSetting?: SchemaMigrationSetting;
}

/**
 * @interface
 * An interface representing MigrateSchemaSqlServerSqlDbTaskInput.
 * Input for task that migrates Schema for SQL Server databases to Azure SQL
 * databases
 *
 * @extends SqlMigrationTaskInput
 */
export interface MigrateSchemaSqlServerSqlDbTaskInput extends SqlMigrationTaskInput {
  /**
   * @member {MigrateSchemaSqlServerSqlDbDatabaseInput[]} selectedDatabases
   * Databases to migrate
   */
  selectedDatabases: MigrateSchemaSqlServerSqlDbDatabaseInput[];
}

/**
 * Contains the possible cases for MigrateSchemaSqlServerSqlDbTaskOutput.
 */
export type MigrateSchemaSqlServerSqlDbTaskOutputUnion = MigrateSchemaSqlServerSqlDbTaskOutput | MigrateSchemaSqlServerSqlDbTaskOutputMigrationLevel | MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel | MigrateSchemaSqlServerSqlDbTaskOutputError | MigrateSchemaSqlTaskOutputError;

/**
 * @interface
 * An interface representing MigrateSchemaSqlServerSqlDbTaskOutput.
 * Output for the task that migrates Schema for SQL Server databases to Azure
 * SQL databases
 *
 */
export interface MigrateSchemaSqlServerSqlDbTaskOutput {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "MigrateSchemaSqlServerSqlDbTaskOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
}

/**
 * @interface
 * An interface representing MigrateSchemaSqlServerSqlDbTaskProperties.
 * Properties for task that migrates Schema for SQL Server databases to Azure
 * SQL databases
 *
 */
export interface MigrateSchemaSqlServerSqlDbTaskProperties {
  /**
   * @member {string} taskType Polymorphic Discriminator
   */
  taskType: "MigrateSchemaSqlServerSqlDb";
  /**
   * @member {ODataError[]} [errors] Array of errors. This is ignored if
   * submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly errors?: ODataError[];
  /**
   * @member {TaskState} [state] The state of the task. This is ignored if
   * submitted. Possible values include: 'Unknown', 'Queued', 'Running',
   * 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: TaskState;
  /**
   * @member {CommandPropertiesUnion[]} [commands] Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * @member {MigrateSchemaSqlServerSqlDbTaskInput} [input] Task input
   */
  input?: MigrateSchemaSqlServerSqlDbTaskInput;
  /**
   * @member {MigrateSchemaSqlServerSqlDbTaskOutputUnion[]} [output] Task
   * output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly output?: MigrateSchemaSqlServerSqlDbTaskOutputUnion[];
}

/**
 * @interface
 * An interface representing MigrateSchemaSqlServerSqlDbTaskOutputMigrationLevel.
 */
export interface MigrateSchemaSqlServerSqlDbTaskOutputMigrationLevel {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "MigrationLevelOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {MigrationState} [state] Overall state of the schema migration.
   * Possible values include: 'None', 'InProgress', 'Failed', 'Warning',
   * 'Completed', 'Skipped', 'Stopped'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: MigrationState;
  /**
   * @member {Date} [startedOn] Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly startedOn?: Date;
  /**
   * @member {Date} [endedOn] Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly endedOn?: Date;
  /**
   * @member {string} [sourceServerVersion] Source server version
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sourceServerVersion?: string;
  /**
   * @member {string} [sourceServerBrandVersion] Source server brand version
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sourceServerBrandVersion?: string;
  /**
   * @member {string} [targetServerVersion] Target server version
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly targetServerVersion?: string;
  /**
   * @member {string} [targetServerBrandVersion] Target server brand version
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly targetServerBrandVersion?: string;
}

/**
 * @interface
 * An interface representing MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel.
 */
export interface MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "DatabaseLevelOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [databaseName] The name of the database
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly databaseName?: string;
  /**
   * @member {MigrationState} [state] State of the schema migration for this
   * database. Possible values include: 'None', 'InProgress', 'Failed',
   * 'Warning', 'Completed', 'Skipped', 'Stopped'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: MigrationState;
  /**
   * @member {SchemaMigrationStage} [stage] Schema migration stage for this
   * database. Possible values include: 'NotStarted', 'ValidatingInputs',
   * 'CollectingObjects', 'DownloadingScript', 'GeneratingScript',
   * 'UploadingScript', 'DeployingSchema', 'Completed',
   * 'CompletedWithWarnings', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly stage?: SchemaMigrationStage;
  /**
   * @member {Date} [startedOn] Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly startedOn?: Date;
  /**
   * @member {Date} [endedOn] Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly endedOn?: Date;
  /**
   * @member {string} [databaseErrorResultPrefix] Prefix string to use for
   * querying errors for this database
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly databaseErrorResultPrefix?: string;
  /**
   * @member {string} [schemaErrorResultPrefix] Prefix string to use for
   * querying schema errors for this database
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly schemaErrorResultPrefix?: string;
  /**
   * @member {number} [numberOfSuccessfulOperations] Number of successful
   * operations for this database
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly numberOfSuccessfulOperations?: number;
  /**
   * @member {number} [numberOfFailedOperations] Number of failed operations
   * for this database
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly numberOfFailedOperations?: number;
  /**
   * @member {string} [fileId] Identifier for the file resource containing the
   * schema of this database
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly fileId?: string;
}

/**
 * @interface
 * An interface representing MigrateSchemaSqlServerSqlDbTaskOutputError.
 */
export interface MigrateSchemaSqlServerSqlDbTaskOutputError {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "SchemaErrorOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [commandText] Schema command which failed
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly commandText?: string;
  /**
   * @member {string} [errorText] Reason of failure
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly errorText?: string;
}

/**
 * @interface
 * An interface representing MigrateSchemaSqlTaskOutputError.
 */
export interface MigrateSchemaSqlTaskOutputError {
  /**
   * @member {string} resultType Polymorphic Discriminator
   */
  resultType: "ErrorOutput";
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {ReportableException} [error] Migration error
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly error?: ReportableException;
}

/**
 * @interface
 * An interface representing Database.
 * Information about a single database
 *
 */
export interface Database {
  /**
   * @member {string} [id] Unique identifier for the database
   */
  id?: string;
  /**
   * @member {string} [name] Name of the database
   */
  name?: string;
  /**
   * @member {DatabaseCompatLevel} [compatibilityLevel] SQL Server
   * compatibility level of database. Possible values include: 'CompatLevel80',
   * 'CompatLevel90', 'CompatLevel100', 'CompatLevel110', 'CompatLevel120',
   * 'CompatLevel130', 'CompatLevel140'
   */
  compatibilityLevel?: DatabaseCompatLevel;
  /**
   * @member {string} [collation] Collation name of the database
   */
  collation?: string;
  /**
   * @member {string} [serverName] Name of the server
   */
  serverName?: string;
  /**
   * @member {string} [fqdn] Fully qualified name
   */
  fqdn?: string;
  /**
   * @member {string} [installId] Install id of the database
   */
  installId?: string;
  /**
   * @member {string} [serverVersion] Version of the server
   */
  serverVersion?: string;
  /**
   * @member {string} [serverEdition] Edition of the server
   */
  serverEdition?: string;
  /**
   * @member {string} [serverLevel] Product level of the server (RTM, SP, CTP).
   */
  serverLevel?: string;
  /**
   * @member {string} [serverDefaultDataPath] Default path of the data files
   */
  serverDefaultDataPath?: string;
  /**
   * @member {string} [serverDefaultLogPath] Default path of the log files
   */
  serverDefaultLogPath?: string;
  /**
   * @member {string} [serverDefaultBackupPath] Default path of the backup
   * folder
   */
  serverDefaultBackupPath?: string;
  /**
   * @member {number} [serverCoreCount] Number of cores on the server
   */
  serverCoreCount?: number;
  /**
   * @member {number} [serverVisibleOnlineCoreCount] Number of cores on the
   * server that have VISIBLE ONLINE status
   */
  serverVisibleOnlineCoreCount?: number;
  /**
   * @member {DatabaseState} [databaseState] State of the database. Possible
   * values include: 'Online', 'Restoring', 'Recovering', 'RecoveryPending',
   * 'Suspect', 'Emergency', 'Offline', 'Copying', 'OfflineSecondary'
   */
  databaseState?: DatabaseState;
  /**
   * @member {string} [serverId] The unique Server Id
   */
  serverId?: string;
}

/**
 * @interface
 * An interface representing DatabaseObjectName.
 * A representation of the name of an object in a database
 *
 */
export interface DatabaseObjectName {
  /**
   * @member {string} [databaseName] The unescaped name of the database
   * containing the object
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly databaseName?: string;
  /**
   * @member {string} [objectName] The unescaped name of the object
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly objectName?: string;
  /**
   * @member {string} [schemaName] The unescaped name of the schema containing
   * the object
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly schemaName?: string;
  /**
   * @member {ObjectType} [objectType] Type of the object in the database.
   * Possible values include: 'StoredProcedures', 'Table', 'User', 'View',
   * 'Function'
   */
  objectType?: ObjectType;
}

/**
 * @interface
 * An interface representing MigrationTableMetadata.
 * Metadata for tables selected in migration project
 *
 */
export interface MigrationTableMetadata {
  /**
   * @member {string} [sourceTableName] Source table name
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sourceTableName?: string;
  /**
   * @member {string} [targetTableName] Target table name
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly targetTableName?: string;
}

/**
 * @interface
 * An interface representing DataMigrationProjectMetadata.
 * Common metadata for migration projects
 *
 */
export interface DataMigrationProjectMetadata {
  /**
   * @member {string} [sourceServerName] Source server name
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sourceServerName?: string;
  /**
   * @member {string} [sourceServerPort] Source server port number
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sourceServerPort?: string;
  /**
   * @member {string} [sourceUsername] Source username
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sourceUsername?: string;
  /**
   * @member {string} [targetServerName] Target server name
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly targetServerName?: string;
  /**
   * @member {string} [targetUsername] Target username
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly targetUsername?: string;
  /**
   * @member {string} [targetDbName] Target database name
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly targetDbName?: string;
  /**
   * @member {boolean} [targetUsingWinAuth] Whether target connection is
   * Windows authentication
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly targetUsingWinAuth?: boolean;
  /**
   * @member {MigrationTableMetadata[]} [selectedMigrationTables] List of
   * tables selected for migration
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly selectedMigrationTables?: MigrationTableMetadata[];
}

/**
 * @interface
 * An interface representing GetProjectDetailsNonSqlTaskInput.
 * Input for the task that reads configuration from project artifacts
 *
 */
export interface GetProjectDetailsNonSqlTaskInput {
  /**
   * @member {string} projectName Name of the migration project
   */
  projectName: string;
  /**
   * @member {string} projectLocation A URL that points to the location to
   * access project artifacts
   */
  projectLocation: string;
}

/**
 * @interface
 * An interface representing NonSqlDataMigrationTable.
 * Defines metadata for table to be migrated
 *
 */
export interface NonSqlDataMigrationTable {
  /**
   * @member {string} [sourceName] Source table name
   */
  sourceName?: string;
}

/**
 * @interface
 * An interface representing NonSqlMigrationTaskInput.
 * Base class for non sql migration task input
 *
 */
export interface NonSqlMigrationTaskInput {
  /**
   * @member {SqlConnectionInfo} targetConnectionInfo Information for
   * connecting to target
   */
  targetConnectionInfo: SqlConnectionInfo;
  /**
   * @member {string} targetDatabaseName Target database name
   */
  targetDatabaseName: string;
  /**
   * @member {string} projectName Name of the migration project
   */
  projectName: string;
  /**
   * @member {string} projectLocation A URL that points to the drop location to
   * access project artifacts
   */
  projectLocation: string;
  /**
   * @member {NonSqlDataMigrationTable[]} selectedTables Metadata of the tables
   * selected for migration
   */
  selectedTables: NonSqlDataMigrationTable[];
}

/**
 * @interface
 * An interface representing DataMigrationError.
 * Migration Task errors
 *
 */
export interface DataMigrationError {
  /**
   * @member {string} [message] Error description
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly message?: string;
  /**
   * @member {ErrorType} [type] Possible values include: 'Default', 'Warning',
   * 'Error'
   */
  type?: ErrorType;
}

/**
 * @interface
 * An interface representing NonSqlDataMigrationTableResult.
 * Object used to report the data migration results of a table
 *
 */
export interface NonSqlDataMigrationTableResult {
  /**
   * @member {DataMigrationResultCode} [resultCode] Result code of the data
   * migration. Possible values include: 'Initial', 'Completed',
   * 'ObjectNotExistsInSource', 'ObjectNotExistsInTarget',
   * 'TargetObjectIsInaccessible', 'FatalError'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly resultCode?: DataMigrationResultCode;
  /**
   * @member {string} [sourceName] Name of the source table
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sourceName?: string;
  /**
   * @member {string} [targetName] Name of the target table
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly targetName?: string;
  /**
   * @member {number} [sourceRowCount] Number of rows in the source table
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sourceRowCount?: number;
  /**
   * @member {number} [targetRowCount] Number of rows in the target table
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly targetRowCount?: number;
  /**
   * @member {number} [elapsedTimeInMiliseconds] Time taken to migrate the data
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly elapsedTimeInMiliseconds?: number;
  /**
   * @member {DataMigrationError[]} [errors] List of errors, if any, during
   * migration
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly errors?: DataMigrationError[];
}

/**
 * @interface
 * An interface representing NonSqlMigrationTaskOutput.
 * Base class for non sql migration task output
 *
 */
export interface NonSqlMigrationTaskOutput {
  /**
   * @member {string} [id] Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {Date} [startedOn] Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly startedOn?: Date;
  /**
   * @member {Date} [endedOn] Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly endedOn?: Date;
  /**
   * @member {MigrationStatus} [status] Current state of migration. Possible
   * values include: 'Default', 'Connecting', 'SourceAndTargetSelected',
   * 'SelectLogins', 'Configured', 'Running', 'Error', 'Stopped', 'Completed',
   * 'CompletedWithWarnings'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly status?: MigrationStatus;
  /**
   * @member {{ [propertyName: string]: NonSqlDataMigrationTableResult }}
   * [dataMigrationTableResults] Results of the migration. The key contains the
   * table name and the value the table result object
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly dataMigrationTableResults?: { [propertyName: string]: NonSqlDataMigrationTableResult };
  /**
   * @member {string} [progressMessage] Message about the progress of the
   * migration
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly progressMessage?: string;
  /**
   * @member {string} [sourceServerName] Name of source server
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sourceServerName?: string;
  /**
   * @member {string} [targetServerName] Name of target server
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly targetServerName?: string;
}

/**
 * @interface
 * An interface representing DatabaseFileInput.
 * Database file specific information for input
 *
 */
export interface DatabaseFileInput {
  /**
   * @member {string} [id] Unique identifier for database file
   */
  id?: string;
  /**
   * @member {string} [logicalName] Logical name of the file
   */
  logicalName?: string;
  /**
   * @member {string} [physicalFullName] Operating-system full path of the file
   */
  physicalFullName?: string;
  /**
   * @member {string} [restoreFullName] Suggested full path of the file for
   * restoring
   */
  restoreFullName?: string;
  /**
   * @member {DatabaseFileType} [fileType] Database file type. Possible values
   * include: 'Rows', 'Log', 'Filestream', 'NotSupported', 'Fulltext'
   */
  fileType?: DatabaseFileType;
}

/**
 * @interface
 * An interface representing MigrateSqlServerSqlServerDatabaseInput.
 * Database specific information for SQL to SQL migration task inputs
 *
 */
export interface MigrateSqlServerSqlServerDatabaseInput {
  /**
   * @member {string} [name] Name of the database
   */
  name?: string;
  /**
   * @member {string} [restoreDatabaseName] Name of the database at destination
   */
  restoreDatabaseName?: string;
  /**
   * @member {string} [backupAndRestoreFolder] The backup and restore folder
   */
  backupAndRestoreFolder?: string;
  /**
   * @member {DatabaseFileInput[]} [databaseFiles] The list of database files
   */
  databaseFiles?: DatabaseFileInput[];
}

/**
 * @interface
 * An interface representing ServicesDeleteMethodOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ServicesDeleteMethodOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {boolean} [deleteRunningTasks] Delete the resource even if it
   * contains running tasks
   */
  deleteRunningTasks?: boolean;
}

/**
 * @interface
 * An interface representing ServicesBeginDeleteMethodOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ServicesBeginDeleteMethodOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {boolean} [deleteRunningTasks] Delete the resource even if it
   * contains running tasks
   */
  deleteRunningTasks?: boolean;
}

/**
 * @interface
 * An interface representing TasksListOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface TasksListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [taskType] Filter tasks by task type
   */
  taskType?: string;
}

/**
 * @interface
 * An interface representing TasksGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface TasksGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Expand the response
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing TasksDeleteMethodOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface TasksDeleteMethodOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {boolean} [deleteRunningTasks] Delete the resource even if it
   * contains running tasks
   */
  deleteRunningTasks?: boolean;
}

/**
 * @interface
 * An interface representing ProjectsDeleteMethodOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ProjectsDeleteMethodOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {boolean} [deleteRunningTasks] Delete the resource even if it
   * contains running tasks
   */
  deleteRunningTasks?: boolean;
}

/**
 * @interface
 * An interface representing DataMigrationServiceClientOptions.
 * @extends AzureServiceClientOptions
 */
export interface DataMigrationServiceClientOptions extends AzureServiceClientOptions {
  /**
   * @member {string} [baseUri]
   */
  baseUri?: string;
}


/**
 * @interface
 * An interface representing the ResourceSkusResult.
 * The DMS List SKUs operation response.
 *
 * @extends Array<ResourceSku>
 */
export interface ResourceSkusResult extends Array<ResourceSku> {
  /**
   * @member {string} [nextLink] The uri to fetch the next page of DMS SKUs.
   * Call ListNext() with this to fetch the next page of DMS SKUs.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ServiceSkuList.
 * OData page of available SKUs
 *
 * @extends Array<AvailableServiceSku>
 */
export interface ServiceSkuList extends Array<AvailableServiceSku> {
  /**
   * @member {string} [nextLink] URL to load the next page of service SKUs
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the DataMigrationServiceList.
 * OData page of service objects
 *
 * @extends Array<DataMigrationService>
 */
export interface DataMigrationServiceList extends Array<DataMigrationService> {
  /**
   * @member {string} [nextLink] URL to load the next page of services
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the TaskList.
 * OData page of tasks
 *
 * @extends Array<ProjectTask>
 */
export interface TaskList extends Array<ProjectTask> {
  /**
   * @member {string} [nextLink] URL to load the next page of tasks
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ProjectList.
 * OData page of project resources
 *
 * @extends Array<Project>
 */
export interface ProjectList extends Array<Project> {
  /**
   * @member {string} [nextLink] URL to load the next page of projects
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the QuotaList.
 * OData page of quota objects
 *
 * @extends Array<Quota>
 */
export interface QuotaList extends Array<Quota> {
  /**
   * @member {string} [nextLink] URL to load the next page of quotas, or null
   * or missing if this is the last page
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ServiceOperationList.
 * OData page of action (operation) objects
 *
 * @extends Array<ServiceOperation>
 */
export interface ServiceOperationList extends Array<ServiceOperation> {
  /**
   * @member {string} [nextLink] URL to load the next page of actions
   */
  nextLink?: string;
}

/**
 * Defines values for CommandState.
 * Possible values include: 'Unknown', 'Accepted', 'Running', 'Succeeded',
 * 'Failed'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: CommandState =
 * <CommandState>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum CommandState {
  Unknown = 'Unknown',
  Accepted = 'Accepted',
  Running = 'Running',
  Succeeded = 'Succeeded',
  Failed = 'Failed',
}

/**
 * Defines values for SqlSourcePlatform.
 * Possible values include: 'SqlOnPrem'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SqlSourcePlatform =
 * <SqlSourcePlatform>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SqlSourcePlatform {
  SqlOnPrem = 'SqlOnPrem',
}

/**
 * Defines values for AuthenticationType.
 * Possible values include: 'None', 'WindowsAuthentication',
 * 'SqlAuthentication', 'ActiveDirectoryIntegrated', 'ActiveDirectoryPassword'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: AuthenticationType =
 * <AuthenticationType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum AuthenticationType {
  None = 'None',
  WindowsAuthentication = 'WindowsAuthentication',
  SqlAuthentication = 'SqlAuthentication',
  ActiveDirectoryIntegrated = 'ActiveDirectoryIntegrated',
  ActiveDirectoryPassword = 'ActiveDirectoryPassword',
}

/**
 * Defines values for BackupType.
 * Possible values include: 'Database', 'TransactionLog', 'File',
 * 'DifferentialDatabase', 'DifferentialFile', 'Partial', 'DifferentialPartial'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: BackupType = <BackupType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum BackupType {
  Database = 'Database',
  TransactionLog = 'TransactionLog',
  File = 'File',
  DifferentialDatabase = 'DifferentialDatabase',
  DifferentialFile = 'DifferentialFile',
  Partial = 'Partial',
  DifferentialPartial = 'DifferentialPartial',
}

/**
 * Defines values for BackupMode.
 * Possible values include: 'CreateBackup', 'ExistingBackup'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: BackupMode = <BackupMode>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum BackupMode {
  CreateBackup = 'CreateBackup',
  ExistingBackup = 'ExistingBackup',
}

/**
 * Defines values for SyncTableMigrationState.
 * Possible values include: 'BEFORE_LOAD', 'FULL_LOAD', 'COMPLETED',
 * 'CANCELED', 'ERROR', 'FAILED'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SyncTableMigrationState =
 * <SyncTableMigrationState>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SyncTableMigrationState {
  BEFORELOAD = 'BEFORE_LOAD',
  FULLLOAD = 'FULL_LOAD',
  COMPLETED = 'COMPLETED',
  CANCELED = 'CANCELED',
  ERROR = 'ERROR',
  FAILED = 'FAILED',
}

/**
 * Defines values for SyncDatabaseMigrationReportingState.
 * Possible values include: 'UNDEFINED', 'CONFIGURING', 'INITIALIAZING',
 * 'STARTING', 'RUNNING', 'READY_TO_COMPLETE', 'COMPLETING', 'COMPLETE',
 * 'CANCELLING', 'CANCELLED', 'FAILED'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SyncDatabaseMigrationReportingState =
 * <SyncDatabaseMigrationReportingState>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SyncDatabaseMigrationReportingState {
  UNDEFINED = 'UNDEFINED',
  CONFIGURING = 'CONFIGURING',
  INITIALIAZING = 'INITIALIAZING',
  STARTING = 'STARTING',
  RUNNING = 'RUNNING',
  READYTOCOMPLETE = 'READY_TO_COMPLETE',
  COMPLETING = 'COMPLETING',
  COMPLETE = 'COMPLETE',
  CANCELLING = 'CANCELLING',
  CANCELLED = 'CANCELLED',
  FAILED = 'FAILED',
}

/**
 * Defines values for ValidationStatus.
 * Possible values include: 'Default', 'NotStarted', 'Initialized',
 * 'InProgress', 'Completed', 'CompletedWithIssues', 'Stopped', 'Failed'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ValidationStatus =
 * <ValidationStatus>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum ValidationStatus {
  Default = 'Default',
  NotStarted = 'NotStarted',
  Initialized = 'Initialized',
  InProgress = 'InProgress',
  Completed = 'Completed',
  CompletedWithIssues = 'CompletedWithIssues',
  Stopped = 'Stopped',
  Failed = 'Failed',
}

/**
 * Defines values for Severity.
 * Possible values include: 'Message', 'Warning', 'Error'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Severity = <Severity>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Severity {
  Message = 'Message',
  Warning = 'Warning',
  Error = 'Error',
}

/**
 * Defines values for UpdateActionType.
 * Possible values include: 'DeletedOnTarget', 'ChangedOnTarget',
 * 'AddedOnTarget'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: UpdateActionType =
 * <UpdateActionType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum UpdateActionType {
  DeletedOnTarget = 'DeletedOnTarget',
  ChangedOnTarget = 'ChangedOnTarget',
  AddedOnTarget = 'AddedOnTarget',
}

/**
 * Defines values for ObjectType.
 * Possible values include: 'StoredProcedures', 'Table', 'User', 'View',
 * 'Function'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ObjectType = <ObjectType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum ObjectType {
  StoredProcedures = 'StoredProcedures',
  Table = 'Table',
  User = 'User',
  View = 'View',
  Function = 'Function',
}

/**
 * Defines values for MigrationState.
 * Possible values include: 'None', 'InProgress', 'Failed', 'Warning',
 * 'Completed', 'Skipped', 'Stopped'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: MigrationState =
 * <MigrationState>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum MigrationState {
  None = 'None',
  InProgress = 'InProgress',
  Failed = 'Failed',
  Warning = 'Warning',
  Completed = 'Completed',
  Skipped = 'Skipped',
  Stopped = 'Stopped',
}

/**
 * Defines values for DatabaseMigrationStage.
 * Possible values include: 'None', 'Initialize', 'Backup', 'FileCopy',
 * 'Restore', 'Completed'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: DatabaseMigrationStage =
 * <DatabaseMigrationStage>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum DatabaseMigrationStage {
  None = 'None',
  Initialize = 'Initialize',
  Backup = 'Backup',
  FileCopy = 'FileCopy',
  Restore = 'Restore',
  Completed = 'Completed',
}

/**
 * Defines values for MigrationStatus.
 * Possible values include: 'Default', 'Connecting', 'SourceAndTargetSelected',
 * 'SelectLogins', 'Configured', 'Running', 'Error', 'Stopped', 'Completed',
 * 'CompletedWithWarnings'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: MigrationStatus =
 * <MigrationStatus>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum MigrationStatus {
  Default = 'Default',
  Connecting = 'Connecting',
  SourceAndTargetSelected = 'SourceAndTargetSelected',
  SelectLogins = 'SelectLogins',
  Configured = 'Configured',
  Running = 'Running',
  Error = 'Error',
  Stopped = 'Stopped',
  Completed = 'Completed',
  CompletedWithWarnings = 'CompletedWithWarnings',
}

/**
 * Defines values for LoginMigrationStage.
 * Possible values include: 'None', 'Initialize', 'LoginMigration',
 * 'EstablishUserMapping', 'AssignRoleMembership', 'AssignRoleOwnership',
 * 'EstablishServerPermissions', 'EstablishObjectPermissions', 'Completed'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: LoginMigrationStage =
 * <LoginMigrationStage>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum LoginMigrationStage {
  None = 'None',
  Initialize = 'Initialize',
  LoginMigration = 'LoginMigration',
  EstablishUserMapping = 'EstablishUserMapping',
  AssignRoleMembership = 'AssignRoleMembership',
  AssignRoleOwnership = 'AssignRoleOwnership',
  EstablishServerPermissions = 'EstablishServerPermissions',
  EstablishObjectPermissions = 'EstablishObjectPermissions',
  Completed = 'Completed',
}

/**
 * Defines values for LoginType.
 * Possible values include: 'WindowsUser', 'WindowsGroup', 'SqlLogin',
 * 'Certificate', 'AsymmetricKey', 'ExternalUser', 'ExternalGroup'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: LoginType = <LoginType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum LoginType {
  WindowsUser = 'WindowsUser',
  WindowsGroup = 'WindowsGroup',
  SqlLogin = 'SqlLogin',
  Certificate = 'Certificate',
  AsymmetricKey = 'AsymmetricKey',
  ExternalUser = 'ExternalUser',
  ExternalGroup = 'ExternalGroup',
}

/**
 * Defines values for DatabaseState.
 * Possible values include: 'Online', 'Restoring', 'Recovering',
 * 'RecoveryPending', 'Suspect', 'Emergency', 'Offline', 'Copying',
 * 'OfflineSecondary'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: DatabaseState =
 * <DatabaseState>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum DatabaseState {
  Online = 'Online',
  Restoring = 'Restoring',
  Recovering = 'Recovering',
  RecoveryPending = 'RecoveryPending',
  Suspect = 'Suspect',
  Emergency = 'Emergency',
  Offline = 'Offline',
  Copying = 'Copying',
  OfflineSecondary = 'OfflineSecondary',
}

/**
 * Defines values for DatabaseCompatLevel.
 * Possible values include: 'CompatLevel80', 'CompatLevel90', 'CompatLevel100',
 * 'CompatLevel110', 'CompatLevel120', 'CompatLevel130', 'CompatLevel140'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: DatabaseCompatLevel =
 * <DatabaseCompatLevel>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum DatabaseCompatLevel {
  CompatLevel80 = 'CompatLevel80',
  CompatLevel90 = 'CompatLevel90',
  CompatLevel100 = 'CompatLevel100',
  CompatLevel110 = 'CompatLevel110',
  CompatLevel120 = 'CompatLevel120',
  CompatLevel130 = 'CompatLevel130',
  CompatLevel140 = 'CompatLevel140',
}

/**
 * Defines values for DatabaseFileType.
 * Possible values include: 'Rows', 'Log', 'Filestream', 'NotSupported',
 * 'Fulltext'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: DatabaseFileType =
 * <DatabaseFileType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum DatabaseFileType {
  Rows = 'Rows',
  Log = 'Log',
  Filestream = 'Filestream',
  NotSupported = 'NotSupported',
  Fulltext = 'Fulltext',
}

/**
 * Defines values for ServerLevelPermissionsGroup.
 * Possible values include: 'Default', 'MigrationFromSqlServerToAzureDB',
 * 'MigrationFromSqlServerToAzureMI', 'MigrationFromMySQLToAzureDBForMySQL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ServerLevelPermissionsGroup =
 * <ServerLevelPermissionsGroup>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum ServerLevelPermissionsGroup {
  Default = 'Default',
  MigrationFromSqlServerToAzureDB = 'MigrationFromSqlServerToAzureDB',
  MigrationFromSqlServerToAzureMI = 'MigrationFromSqlServerToAzureMI',
  MigrationFromMySQLToAzureDBForMySQL = 'MigrationFromMySQLToAzureDBForMySQL',
}

/**
 * Defines values for TaskState.
 * Possible values include: 'Unknown', 'Queued', 'Running', 'Canceled',
 * 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: TaskState = <TaskState>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum TaskState {
  Unknown = 'Unknown',
  Queued = 'Queued',
  Running = 'Running',
  Canceled = 'Canceled',
  Succeeded = 'Succeeded',
  Failed = 'Failed',
  FailedInputValidation = 'FailedInputValidation',
  Faulted = 'Faulted',
}

/**
 * Defines values for ServiceProvisioningState.
 * Possible values include: 'Accepted', 'Deleting', 'Deploying', 'Stopped',
 * 'Stopping', 'Starting', 'FailedToStart', 'FailedToStop', 'Succeeded',
 * 'Failed'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ServiceProvisioningState =
 * <ServiceProvisioningState>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum ServiceProvisioningState {
  Accepted = 'Accepted',
  Deleting = 'Deleting',
  Deploying = 'Deploying',
  Stopped = 'Stopped',
  Stopping = 'Stopping',
  Starting = 'Starting',
  FailedToStart = 'FailedToStart',
  FailedToStop = 'FailedToStop',
  Succeeded = 'Succeeded',
  Failed = 'Failed',
}

/**
 * Defines values for ProjectTargetPlatform.
 * Possible values include: 'SQLDB', 'SQLMI', 'AzureDbForMySql',
 * 'AzureDbForPostgreSql', 'Unknown'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ProjectTargetPlatform =
 * <ProjectTargetPlatform>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum ProjectTargetPlatform {
  SQLDB = 'SQLDB',
  SQLMI = 'SQLMI',
  AzureDbForMySql = 'AzureDbForMySql',
  AzureDbForPostgreSql = 'AzureDbForPostgreSql',
  Unknown = 'Unknown',
}

/**
 * Defines values for ProjectSourcePlatform.
 * Possible values include: 'SQL', 'MySQL', 'PostgreSql', 'Unknown'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ProjectSourcePlatform =
 * <ProjectSourcePlatform>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum ProjectSourcePlatform {
  SQL = 'SQL',
  MySQL = 'MySQL',
  PostgreSql = 'PostgreSql',
  Unknown = 'Unknown',
}

/**
 * Defines values for ProjectProvisioningState.
 * Possible values include: 'Deleting', 'Succeeded'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ProjectProvisioningState =
 * <ProjectProvisioningState>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum ProjectProvisioningState {
  Deleting = 'Deleting',
  Succeeded = 'Succeeded',
}

/**
 * Defines values for NameCheckFailureReason.
 * Possible values include: 'AlreadyExists', 'Invalid'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: NameCheckFailureReason =
 * <NameCheckFailureReason>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum NameCheckFailureReason {
  AlreadyExists = 'AlreadyExists',
  Invalid = 'Invalid',
}

/**
 * Defines values for ServiceScalability.
 * Possible values include: 'none', 'manual', 'automatic'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ServiceScalability =
 * <ServiceScalability>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum ServiceScalability {
  None = 'none',
  Manual = 'manual',
  Automatic = 'automatic',
}

/**
 * Defines values for ResourceSkuRestrictionsType.
 * Possible values include: 'location'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ResourceSkuRestrictionsType =
 * <ResourceSkuRestrictionsType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum ResourceSkuRestrictionsType {
  Location = 'location',
}

/**
 * Defines values for ResourceSkuRestrictionsReasonCode.
 * Possible values include: 'QuotaId', 'NotAvailableForSubscription'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ResourceSkuRestrictionsReasonCode =
 * <ResourceSkuRestrictionsReasonCode>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum ResourceSkuRestrictionsReasonCode {
  QuotaId = 'QuotaId',
  NotAvailableForSubscription = 'NotAvailableForSubscription',
}

/**
 * Defines values for ResourceSkuCapacityScaleType.
 * Possible values include: 'Automatic', 'Manual', 'None'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ResourceSkuCapacityScaleType =
 * <ResourceSkuCapacityScaleType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum ResourceSkuCapacityScaleType {
  Automatic = 'Automatic',
  Manual = 'Manual',
  None = 'None',
}

/**
 * Defines values for MySqlTargetPlatformType.
 * Possible values include: 'AzureDbForMySQL'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: MySqlTargetPlatformType =
 * <MySqlTargetPlatformType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum MySqlTargetPlatformType {
  AzureDbForMySQL = 'AzureDbForMySQL',
}

/**
 * Defines values for SchemaMigrationOption.
 * Possible values include: 'None', 'ExtractFromSource', 'UseStorageFile'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SchemaMigrationOption =
 * <SchemaMigrationOption>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SchemaMigrationOption {
  None = 'None',
  ExtractFromSource = 'ExtractFromSource',
  UseStorageFile = 'UseStorageFile',
}

/**
 * Defines values for SchemaMigrationStage.
 * Possible values include: 'NotStarted', 'ValidatingInputs',
 * 'CollectingObjects', 'DownloadingScript', 'GeneratingScript',
 * 'UploadingScript', 'DeployingSchema', 'Completed', 'CompletedWithWarnings',
 * 'Failed'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SchemaMigrationStage =
 * <SchemaMigrationStage>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SchemaMigrationStage {
  NotStarted = 'NotStarted',
  ValidatingInputs = 'ValidatingInputs',
  CollectingObjects = 'CollectingObjects',
  DownloadingScript = 'DownloadingScript',
  GeneratingScript = 'GeneratingScript',
  UploadingScript = 'UploadingScript',
  DeployingSchema = 'DeployingSchema',
  Completed = 'Completed',
  CompletedWithWarnings = 'CompletedWithWarnings',
  Failed = 'Failed',
}

/**
 * Defines values for DataMigrationResultCode.
 * Possible values include: 'Initial', 'Completed', 'ObjectNotExistsInSource',
 * 'ObjectNotExistsInTarget', 'TargetObjectIsInaccessible', 'FatalError'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: DataMigrationResultCode =
 * <DataMigrationResultCode>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum DataMigrationResultCode {
  Initial = 'Initial',
  Completed = 'Completed',
  ObjectNotExistsInSource = 'ObjectNotExistsInSource',
  ObjectNotExistsInTarget = 'ObjectNotExistsInTarget',
  TargetObjectIsInaccessible = 'TargetObjectIsInaccessible',
  FatalError = 'FatalError',
}

/**
 * Defines values for ErrorType.
 * Possible values include: 'Default', 'Warning', 'Error'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ErrorType = <ErrorType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum ErrorType {
  Default = 'Default',
  Warning = 'Warning',
  Error = 'Error',
}

/**
 * Contains response data for the listSkus operation.
 */
export type ResourceSkusListSkusResponse = ResourceSkusResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ResourceSkusResult;
    };
};

/**
 * Contains response data for the listSkusNext operation.
 */
export type ResourceSkusListSkusNextResponse = ResourceSkusResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ResourceSkusResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ServicesCreateOrUpdateResponse = DataMigrationService & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataMigrationService;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ServicesGetResponse = DataMigrationService & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataMigrationService;
    };
};

/**
 * Contains response data for the update operation.
 */
export type ServicesUpdateResponse = DataMigrationService & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataMigrationService;
    };
};

/**
 * Contains response data for the checkStatus operation.
 */
export type ServicesCheckStatusResponse = DataMigrationServiceStatusResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataMigrationServiceStatusResponse;
    };
};

/**
 * Contains response data for the listSkus operation.
 */
export type ServicesListSkusResponse = ServiceSkuList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceSkuList;
    };
};

/**
 * Contains response data for the checkChildrenNameAvailability operation.
 */
export type ServicesCheckChildrenNameAvailabilityResponse = NameAvailabilityResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NameAvailabilityResponse;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type ServicesListByResourceGroupResponse = DataMigrationServiceList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataMigrationServiceList;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ServicesListResponse = DataMigrationServiceList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataMigrationServiceList;
    };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type ServicesCheckNameAvailabilityResponse = NameAvailabilityResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NameAvailabilityResponse;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ServicesBeginCreateOrUpdateResponse = DataMigrationService & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataMigrationService;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type ServicesBeginUpdateResponse = DataMigrationService & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataMigrationService;
    };
};

/**
 * Contains response data for the listSkusNext operation.
 */
export type ServicesListSkusNextResponse = ServiceSkuList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceSkuList;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type ServicesListByResourceGroupNextResponse = DataMigrationServiceList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataMigrationServiceList;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ServicesListNextResponse = DataMigrationServiceList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataMigrationServiceList;
    };
};

/**
 * Contains response data for the list operation.
 */
export type TasksListResponse = TaskList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TaskList;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type TasksCreateOrUpdateResponse = ProjectTask & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProjectTask;
    };
};

/**
 * Contains response data for the get operation.
 */
export type TasksGetResponse = ProjectTask & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProjectTask;
    };
};

/**
 * Contains response data for the update operation.
 */
export type TasksUpdateResponse = ProjectTask & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProjectTask;
    };
};

/**
 * Contains response data for the cancel operation.
 */
export type TasksCancelResponse = ProjectTask & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProjectTask;
    };
};

/**
 * Contains response data for the command operation.
 */
export type TasksCommandResponse = CommandPropertiesUnion & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CommandPropertiesUnion;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type TasksListNextResponse = TaskList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TaskList;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ProjectsListResponse = ProjectList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProjectList;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ProjectsCreateOrUpdateResponse = Project & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Project;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ProjectsGetResponse = Project & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Project;
    };
};

/**
 * Contains response data for the update operation.
 */
export type ProjectsUpdateResponse = Project & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Project;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ProjectsListNextResponse = ProjectList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProjectList;
    };
};

/**
 * Contains response data for the list operation.
 */
export type UsagesListResponse = QuotaList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: QuotaList;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type UsagesListNextResponse = QuotaList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: QuotaList;
    };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = ServiceOperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceOperationList;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = ServiceOperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceOperationList;
    };
};
