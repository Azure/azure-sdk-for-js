/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource, CloudError } from "ms-rest-azure-js";

export { BaseResource, CloudError };


/**
 * @interface
 * An interface representing StorageBlobCreatedEventData.
 * Schema of the Data property of an EventGridEvent for an
 * Microsoft.Storage.BlobCreated event.
 *
 */
export interface StorageBlobCreatedEventData {
  /**
   * @member {string} [api] The name of the API/operation that triggered this
   * event.
   */
  api?: string;
  /**
   * @member {string} [clientRequestId] A request id provided by the client of
   * the storage API operation that triggered this event.
   */
  clientRequestId?: string;
  /**
   * @member {string} [requestId] The request id generated by the Storage
   * service for the storage API operation that triggered this event.
   */
  requestId?: string;
  /**
   * @member {string} [eTag] The etag of the object at the time this event was
   * triggered.
   */
  eTag?: string;
  /**
   * @member {string} [contentType] The content type of the blob. This is the
   * same as what would be returned in the Content-Type header from the blob.
   */
  contentType?: string;
  /**
   * @member {number} [contentLength] The size of the blob in bytes. This is
   * the same as what would be returned in the Content-Length header from the
   * blob.
   */
  contentLength?: number;
  /**
   * @member {string} [blobType] The type of blob.
   */
  blobType?: string;
  /**
   * @member {string} [url] The path to the blob.
   */
  url?: string;
  /**
   * @member {string} [sequencer] An opaque string value representing the
   * logical sequence of events for any particular blob name. Users can use
   * standard string comparison to understand the relative sequence of two
   * events on the same blob name.
   */
  sequencer?: string;
  /**
   * @member {any} [storageDiagnostics] For service use only. Diagnostic data
   * occasionally included by the Azure Storage service. This property should
   * be ignored by event consumers.
   */
  storageDiagnostics?: any;
}

/**
 * @interface
 * An interface representing StorageBlobDeletedEventData.
 * Schema of the Data property of an EventGridEvent for an
 * Microsoft.Storage.BlobDeleted event.
 *
 */
export interface StorageBlobDeletedEventData {
  /**
   * @member {string} [api] The name of the API/operation that triggered this
   * event.
   */
  api?: string;
  /**
   * @member {string} [clientRequestId] A request id provided by the client of
   * the storage API operation that triggered this event.
   */
  clientRequestId?: string;
  /**
   * @member {string} [requestId] The request id generated by the Storage
   * service for the storage API operation that triggered this event.
   */
  requestId?: string;
  /**
   * @member {string} [contentType] The content type of the blob. This is the
   * same as what would be returned in the Content-Type header from the blob.
   */
  contentType?: string;
  /**
   * @member {string} [blobType] The type of blob.
   */
  blobType?: string;
  /**
   * @member {string} [url] The path to the blob.
   */
  url?: string;
  /**
   * @member {string} [sequencer] An opaque string value representing the
   * logical sequence of events for any particular blob name. Users can use
   * standard string comparison to understand the relative sequence of two
   * events on the same blob name.
   */
  sequencer?: string;
  /**
   * @member {any} [storageDiagnostics] For service use only. Diagnostic data
   * occasionally included by the Azure Storage service. This property should
   * be ignored by event consumers.
   */
  storageDiagnostics?: any;
}

/**
 * @interface
 * An interface representing EventHubCaptureFileCreatedEventData.
 * Schema of the Data property of an EventGridEvent for an
 * Microsoft.EventHub.CaptureFileCreated event.
 *
 */
export interface EventHubCaptureFileCreatedEventData {
  /**
   * @member {string} [fileurl] The path to the capture file.
   */
  fileurl?: string;
  /**
   * @member {string} [fileType] The file type of the capture file.
   */
  fileType?: string;
  /**
   * @member {string} [partitionId] The shard ID.
   */
  partitionId?: string;
  /**
   * @member {number} [sizeInBytes] The file size.
   */
  sizeInBytes?: number;
  /**
   * @member {number} [eventCount] The number of events in the file.
   */
  eventCount?: number;
  /**
   * @member {number} [firstSequenceNumber] The smallest sequence number from
   * the queue.
   */
  firstSequenceNumber?: number;
  /**
   * @member {number} [lastSequenceNumber] The last sequence number from the
   * queue.
   */
  lastSequenceNumber?: number;
  /**
   * @member {Date} [firstEnqueueTime] The first time from the queue.
   */
  firstEnqueueTime?: Date;
  /**
   * @member {Date} [lastEnqueueTime] The last time from the queue.
   */
  lastEnqueueTime?: Date;
}

/**
 * @interface
 * An interface representing ResourceWriteSuccessData.
 * Schema of the Data property of an EventGridEvent for a
 * Microsoft.Resources.ResourceWriteSuccess event. This is raised when a
 * resource create or update operation succeeds.
 *
 */
export interface ResourceWriteSuccessData {
  /**
   * @member {string} [tenantId] The tenant ID of the resource.
   */
  tenantId?: string;
  /**
   * @member {string} [subscriptionId] The subscription ID of the resource.
   */
  subscriptionId?: string;
  /**
   * @member {string} [resourceGroup] The resource group of the resource.
   */
  resourceGroup?: string;
  /**
   * @member {string} [resourceProvider] The resource provider performing the
   * operation.
   */
  resourceProvider?: string;
  /**
   * @member {string} [resourceUri] The URI of the resource in the operation.
   */
  resourceUri?: string;
  /**
   * @member {string} [operationName] The operation that was performed.
   */
  operationName?: string;
  /**
   * @member {string} [status] The status of the operation.
   */
  status?: string;
  /**
   * @member {string} [authorization] The requested authorization for the
   * operation.
   */
  authorization?: string;
  /**
   * @member {string} [claims] The properties of the claims.
   */
  claims?: string;
  /**
   * @member {string} [correlationId] An operation ID used for troubleshooting.
   */
  correlationId?: string;
  /**
   * @member {string} [httpRequest] The details of the operation.
   */
  httpRequest?: string;
}

/**
 * @interface
 * An interface representing ResourceWriteFailureData.
 * Schema of the Data property of an EventGridEvent for a
 * Microsoft.Resources.ResourceWriteFailure event. This is raised when a
 * resource create or update operation fails.
 *
 */
export interface ResourceWriteFailureData {
  /**
   * @member {string} [tenantId] The tenant ID of the resource.
   */
  tenantId?: string;
  /**
   * @member {string} [subscriptionId] The subscription ID of the resource.
   */
  subscriptionId?: string;
  /**
   * @member {string} [resourceGroup] The resource group of the resource.
   */
  resourceGroup?: string;
  /**
   * @member {string} [resourceProvider] The resource provider performing the
   * operation.
   */
  resourceProvider?: string;
  /**
   * @member {string} [resourceUri] The URI of the resource in the operation.
   */
  resourceUri?: string;
  /**
   * @member {string} [operationName] The operation that was performed.
   */
  operationName?: string;
  /**
   * @member {string} [status] The status of the operation.
   */
  status?: string;
  /**
   * @member {string} [authorization] The requested authorization for the
   * operation.
   */
  authorization?: string;
  /**
   * @member {string} [claims] The properties of the claims.
   */
  claims?: string;
  /**
   * @member {string} [correlationId] An operation ID used for troubleshooting.
   */
  correlationId?: string;
  /**
   * @member {string} [httpRequest] The details of the operation.
   */
  httpRequest?: string;
}

/**
 * @interface
 * An interface representing ResourceWriteCancelData.
 * Schema of the Data property of an EventGridEvent for a
 * Microsoft.Resources.ResourceWriteCancel event. This is raised when a
 * resource create or update operation is canceled.
 *
 */
export interface ResourceWriteCancelData {
  /**
   * @member {string} [tenantId] The tenant ID of the resource.
   */
  tenantId?: string;
  /**
   * @member {string} [subscriptionId] The subscription ID of the resource.
   */
  subscriptionId?: string;
  /**
   * @member {string} [resourceGroup] The resource group of the resource.
   */
  resourceGroup?: string;
  /**
   * @member {string} [resourceProvider] The resource provider performing the
   * operation.
   */
  resourceProvider?: string;
  /**
   * @member {string} [resourceUri] The URI of the resource in the operation.
   */
  resourceUri?: string;
  /**
   * @member {string} [operationName] The operation that was performed.
   */
  operationName?: string;
  /**
   * @member {string} [status] The status of the operation.
   */
  status?: string;
  /**
   * @member {string} [authorization] The requested authorization for the
   * operation.
   */
  authorization?: string;
  /**
   * @member {string} [claims] The properties of the claims.
   */
  claims?: string;
  /**
   * @member {string} [correlationId] An operation ID used for troubleshooting.
   */
  correlationId?: string;
  /**
   * @member {string} [httpRequest] The details of the operation.
   */
  httpRequest?: string;
}

/**
 * @interface
 * An interface representing ResourceDeleteSuccessData.
 * Schema of the Data property of an EventGridEvent for a
 * Microsoft.Resources.ResourceDeleteSuccess event. This is raised when a
 * resource delete operation succeeds.
 *
 */
export interface ResourceDeleteSuccessData {
  /**
   * @member {string} [tenantId] The tenant ID of the resource.
   */
  tenantId?: string;
  /**
   * @member {string} [subscriptionId] The subscription ID of the resource.
   */
  subscriptionId?: string;
  /**
   * @member {string} [resourceGroup] The resource group of the resource.
   */
  resourceGroup?: string;
  /**
   * @member {string} [resourceProvider] The resource provider performing the
   * operation.
   */
  resourceProvider?: string;
  /**
   * @member {string} [resourceUri] The URI of the resource in the operation.
   */
  resourceUri?: string;
  /**
   * @member {string} [operationName] The operation that was performed.
   */
  operationName?: string;
  /**
   * @member {string} [status] The status of the operation.
   */
  status?: string;
  /**
   * @member {string} [authorization] The requested authorization for the
   * operation.
   */
  authorization?: string;
  /**
   * @member {string} [claims] The properties of the claims.
   */
  claims?: string;
  /**
   * @member {string} [correlationId] An operation ID used for troubleshooting.
   */
  correlationId?: string;
  /**
   * @member {string} [httpRequest] The details of the operation.
   */
  httpRequest?: string;
}

/**
 * @interface
 * An interface representing ResourceDeleteFailureData.
 * Schema of the Data property of an EventGridEvent for a
 * Microsoft.Resources.ResourceDeleteFailure event. This is raised when a
 * resource delete operation fails.
 *
 */
export interface ResourceDeleteFailureData {
  /**
   * @member {string} [tenantId] The tenant ID of the resource.
   */
  tenantId?: string;
  /**
   * @member {string} [subscriptionId] The subscription ID of the resource.
   */
  subscriptionId?: string;
  /**
   * @member {string} [resourceGroup] The resource group of the resource.
   */
  resourceGroup?: string;
  /**
   * @member {string} [resourceProvider] The resource provider performing the
   * operation.
   */
  resourceProvider?: string;
  /**
   * @member {string} [resourceUri] The URI of the resource in the operation.
   */
  resourceUri?: string;
  /**
   * @member {string} [operationName] The operation that was performed.
   */
  operationName?: string;
  /**
   * @member {string} [status] The status of the operation.
   */
  status?: string;
  /**
   * @member {string} [authorization] The requested authorization for the
   * operation.
   */
  authorization?: string;
  /**
   * @member {string} [claims] The properties of the claims.
   */
  claims?: string;
  /**
   * @member {string} [correlationId] An operation ID used for troubleshooting.
   */
  correlationId?: string;
  /**
   * @member {string} [httpRequest] The details of the operation.
   */
  httpRequest?: string;
}

/**
 * @interface
 * An interface representing ResourceDeleteCancelData.
 * Schema of the Data property of an EventGridEvent for an
 * Microsoft.Resources.ResourceDeleteCancel event. This is raised when a
 * resource delete operation is canceled.
 *
 */
export interface ResourceDeleteCancelData {
  /**
   * @member {string} [tenantId] The tenant ID of the resource.
   */
  tenantId?: string;
  /**
   * @member {string} [subscriptionId] The subscription ID of the resource.
   */
  subscriptionId?: string;
  /**
   * @member {string} [resourceGroup] The resource group of the resource.
   */
  resourceGroup?: string;
  /**
   * @member {string} [resourceProvider] The resource provider performing the
   * operation.
   */
  resourceProvider?: string;
  /**
   * @member {string} [resourceUri] The URI of the resource in the operation.
   */
  resourceUri?: string;
  /**
   * @member {string} [operationName] The operation that was performed.
   */
  operationName?: string;
  /**
   * @member {string} [status] The status of the operation.
   */
  status?: string;
  /**
   * @member {string} [authorization] The requested authorization for the
   * operation.
   */
  authorization?: string;
  /**
   * @member {string} [claims] The properties of the claims.
   */
  claims?: string;
  /**
   * @member {string} [correlationId] An operation ID used for troubleshooting.
   */
  correlationId?: string;
  /**
   * @member {string} [httpRequest] The details of the operation.
   */
  httpRequest?: string;
}

/**
 * @interface
 * An interface representing ResourceActionSuccessData.
 * Schema of the Data property of an EventGridEvent for a
 * Microsoft.Resources.ResourceActionSuccess event. This is raised when a
 * resource action operation succeeds.
 *
 */
export interface ResourceActionSuccessData {
  /**
   * @member {string} [tenantId] The tenant ID of the resource.
   */
  tenantId?: string;
  /**
   * @member {string} [subscriptionId] The subscription ID of the resource.
   */
  subscriptionId?: string;
  /**
   * @member {string} [resourceGroup] The resource group of the resource.
   */
  resourceGroup?: string;
  /**
   * @member {string} [resourceProvider] The resource provider performing the
   * operation.
   */
  resourceProvider?: string;
  /**
   * @member {string} [resourceUri] The URI of the resource in the operation.
   */
  resourceUri?: string;
  /**
   * @member {string} [operationName] The operation that was performed.
   */
  operationName?: string;
  /**
   * @member {string} [status] The status of the operation.
   */
  status?: string;
  /**
   * @member {string} [authorization] The requested authorization for the
   * operation.
   */
  authorization?: string;
  /**
   * @member {string} [claims] The properties of the claims.
   */
  claims?: string;
  /**
   * @member {string} [correlationId] An operation ID used for troubleshooting.
   */
  correlationId?: string;
  /**
   * @member {string} [httpRequest] The details of the operation.
   */
  httpRequest?: string;
}

/**
 * @interface
 * An interface representing ResourceActionFailureData.
 * Schema of the Data property of an EventGridEvent for a
 * Microsoft.Resources.ResourceActionFailure event. This is raised when a
 * resource action operation fails.
 *
 */
export interface ResourceActionFailureData {
  /**
   * @member {string} [tenantId] The tenant ID of the resource.
   */
  tenantId?: string;
  /**
   * @member {string} [subscriptionId] The subscription ID of the resource.
   */
  subscriptionId?: string;
  /**
   * @member {string} [resourceGroup] The resource group of the resource.
   */
  resourceGroup?: string;
  /**
   * @member {string} [resourceProvider] The resource provider performing the
   * operation.
   */
  resourceProvider?: string;
  /**
   * @member {string} [resourceUri] The URI of the resource in the operation.
   */
  resourceUri?: string;
  /**
   * @member {string} [operationName] The operation that was performed.
   */
  operationName?: string;
  /**
   * @member {string} [status] The status of the operation.
   */
  status?: string;
  /**
   * @member {string} [authorization] The requested authorization for the
   * operation.
   */
  authorization?: string;
  /**
   * @member {string} [claims] The properties of the claims.
   */
  claims?: string;
  /**
   * @member {string} [correlationId] An operation ID used for troubleshooting.
   */
  correlationId?: string;
  /**
   * @member {string} [httpRequest] The details of the operation.
   */
  httpRequest?: string;
}

/**
 * @interface
 * An interface representing ResourceActionCancelData.
 * Schema of the Data property of an EventGridEvent for an
 * Microsoft.Resources.ResourceActionCancel event. This is raised when a
 * resource action operation is canceled.
 *
 */
export interface ResourceActionCancelData {
  /**
   * @member {string} [tenantId] The tenant ID of the resource.
   */
  tenantId?: string;
  /**
   * @member {string} [subscriptionId] The subscription ID of the resource.
   */
  subscriptionId?: string;
  /**
   * @member {string} [resourceGroup] The resource group of the resource.
   */
  resourceGroup?: string;
  /**
   * @member {string} [resourceProvider] The resource provider performing the
   * operation.
   */
  resourceProvider?: string;
  /**
   * @member {string} [resourceUri] The URI of the resource in the operation.
   */
  resourceUri?: string;
  /**
   * @member {string} [operationName] The operation that was performed.
   */
  operationName?: string;
  /**
   * @member {string} [status] The status of the operation.
   */
  status?: string;
  /**
   * @member {string} [authorization] The requested authorization for the
   * operation.
   */
  authorization?: string;
  /**
   * @member {string} [claims] The properties of the claims.
   */
  claims?: string;
  /**
   * @member {string} [correlationId] An operation ID used for troubleshooting.
   */
  correlationId?: string;
  /**
   * @member {string} [httpRequest] The details of the operation.
   */
  httpRequest?: string;
}

/**
 * @interface
 * An interface representing EventGridEvent.
 * Properties of an event published to an Event Grid topic.
 *
 */
export interface EventGridEvent {
  /**
   * @member {string} id An unique identifier for the event.
   */
  id: string;
  /**
   * @member {string} [topic] The resource path of the event source.
   */
  topic?: string;
  /**
   * @member {string} subject A resource path relative to the topic path.
   */
  subject: string;
  /**
   * @member {any} data Event data specific to the event type.
   */
  data: any;
  /**
   * @member {string} eventType The type of the event that occurred.
   */
  eventType: string;
  /**
   * @member {Date} eventTime The time (in UTC) the event was generated.
   */
  eventTime: Date;
  /**
   * @member {string} [metadataVersion] The schema version of the event
   * metadata.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly metadataVersion?: string;
  /**
   * @member {string} dataVersion The schema version of the data object.
   */
  dataVersion: string;
}

/**
 * @interface
 * An interface representing SubscriptionValidationEventData.
 * Schema of the Data property of an EventGridEvent for a
 * Microsoft.EventGrid.SubscriptionValidationEvent.
 *
 */
export interface SubscriptionValidationEventData {
  /**
   * @member {string} [validationCode] The validation code sent by Azure Event
   * Grid to validate an event subscription. To complete the validation
   * handshake, the subscriber must either respond with this validation code as
   * part of the validation response, or perform a GET request on the
   * validationUrl (available starting version 2018-05-01-preview).
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly validationCode?: string;
  /**
   * @member {string} [validationUrl] The validation URL sent by Azure Event
   * Grid (available starting version 2018-05-01-preview). To complete the
   * validation handshake, the subscriber must either respond with the
   * validationCode as part of the validation response, or perform a GET
   * request on the validationUrl (available starting version
   * 2018-05-01-preview).
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly validationUrl?: string;
}

/**
 * @interface
 * An interface representing SubscriptionValidationResponse.
 * To complete an event subscription validation handshake, a subscriber can use
 * either the validationCode or the validationUrl received in a
 * SubscriptionValidationEvent. When the validationCode is used, the
 * SubscriptionValidationResponse can be used to build the response.
 *
 */
export interface SubscriptionValidationResponse {
  /**
   * @member {string} [validationResponse] The validation response sent by the
   * subscriber to Azure Event Grid to complete the validation of an event
   * subscription.
   */
  validationResponse?: string;
}

/**
 * @interface
 * An interface representing SubscriptionDeletedEventData.
 * Schema of the Data property of an EventGridEvent for a
 * Microsoft.EventGrid.SubscriptionDeletedEvent.
 *
 */
export interface SubscriptionDeletedEventData {
  /**
   * @member {string} [eventSubscriptionId] The Azure resource ID of the
   * deleted event subscription.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly eventSubscriptionId?: string;
}

/**
 * @interface
 * An interface representing DeviceLifeCycleEventProperties.
 * Schema of the Data property of an EventGridEvent for a device life cycle
 * event (DeviceCreated, DeviceDeleted).
 *
 */
export interface DeviceLifeCycleEventProperties {
  /**
   * @member {string} [deviceId] The unique identifier of the device. This
   * case-sensitive string can be up to 128 characters long, and supports ASCII
   * 7-bit alphanumeric characters plus the following special characters: - : .
   * + % _ &#35; * ? ! ( ) , = @ ; $ '.
   */
  deviceId?: string;
  /**
   * @member {string} [hubName] Name of the IoT Hub where the device was
   * created or deleted.
   */
  hubName?: string;
  /**
   * @member {DeviceTwinInfo} [twin] Information about the device twin, which
   * is the cloud representation of application device metadata.
   */
  twin?: DeviceTwinInfo;
}

/**
 * @interface
 * An interface representing IotHubDeviceCreatedEventData.
 * Event data for Microsoft.Devices.DeviceCreated event.
 *
 * @extends DeviceLifeCycleEventProperties
 */
export interface IotHubDeviceCreatedEventData extends DeviceLifeCycleEventProperties {
}

/**
 * @interface
 * An interface representing IotHubDeviceDeletedEventData.
 * Event data for Microsoft.Devices.DeviceDeleted event.
 *
 * @extends DeviceLifeCycleEventProperties
 */
export interface IotHubDeviceDeletedEventData extends DeviceLifeCycleEventProperties {
}

/**
 * @interface
 * An interface representing DeviceConnectionStateEventProperties.
 * Schema of the Data property of an EventGridEvent for a device connection
 * state event (DeviceConnected, DeviceDisconnected).
 *
 */
export interface DeviceConnectionStateEventProperties {
  /**
   * @member {string} [deviceId] The unique identifier of the device. This
   * case-sensitive string can be up to 128 characters long, and supports ASCII
   * 7-bit alphanumeric characters plus the following special characters: - : .
   * + % _ &#35; * ? ! ( ) , = @ ; $ '.
   */
  deviceId?: string;
  /**
   * @member {string} [moduleId] The unique identifier of the module. This
   * case-sensitive string can be up to 128 characters long, and supports ASCII
   * 7-bit alphanumeric characters plus the following special characters: - : .
   * + % _ &#35; * ? ! ( ) , = @ ; $ '.
   */
  moduleId?: string;
  /**
   * @member {string} [hubName] Name of the IoT Hub where the device was
   * created or deleted.
   */
  hubName?: string;
  /**
   * @member {DeviceConnectionStateEventInfo} [deviceConnectionStateEventInfo]
   * Information about the device connection state event.
   */
  deviceConnectionStateEventInfo?: DeviceConnectionStateEventInfo;
}

/**
 * @interface
 * An interface representing IotHubDeviceConnectedEventData.
 * Event data for Microsoft.Devices.DeviceConnected event.
 *
 * @extends DeviceConnectionStateEventProperties
 */
export interface IotHubDeviceConnectedEventData extends DeviceConnectionStateEventProperties {
}

/**
 * @interface
 * An interface representing IotHubDeviceDisconnectedEventData.
 * Event data for Microsoft.Devices.DeviceDisconnected event.
 *
 * @extends DeviceConnectionStateEventProperties
 */
export interface IotHubDeviceDisconnectedEventData extends DeviceConnectionStateEventProperties {
}

/**
 * @interface
 * An interface representing DeviceTwinMetadata.
 * Metadata information for the properties JSON document.
 *
 */
export interface DeviceTwinMetadata {
  /**
   * @member {string} [lastUpdated] The ISO8601 timestamp of the last time the
   * properties were updated.
   */
  lastUpdated?: string;
}

/**
 * @interface
 * An interface representing DeviceTwinProperties.
 * A portion of the properties that can be written only by the application
 * back-end, and read by the device.
 *
 */
export interface DeviceTwinProperties {
  /**
   * @member {DeviceTwinMetadata} [metadata] Metadata information for the
   * properties JSON document.
   */
  metadata?: DeviceTwinMetadata;
  /**
   * @member {number} [version] Version of device twin properties.
   */
  version?: number;
}

/**
 * @interface
 * An interface representing DeviceTwinInfoProperties.
 * Properties JSON element.
 *
 */
export interface DeviceTwinInfoProperties {
  /**
   * @member {DeviceTwinProperties} [desired] A portion of the properties that
   * can be written only by the application back-end, and read by the device.
   */
  desired?: DeviceTwinProperties;
  /**
   * @member {DeviceTwinProperties} [reported] A portion of the properties that
   * can be written only by the device, and read by the application back-end.
   */
  reported?: DeviceTwinProperties;
}

/**
 * @interface
 * An interface representing DeviceTwinInfoX509Thumbprint.
 * The thumbprint is a unique value for the x509 certificate, commonly used to
 * find a particular certificate in a certificate store. The thumbprint is
 * dynamically generated using the SHA1 algorithm, and does not physically
 * exist in the certificate.
 *
 */
export interface DeviceTwinInfoX509Thumbprint {
  /**
   * @member {string} [primaryThumbprint] Primary thumbprint for the x509
   * certificate.
   */
  primaryThumbprint?: string;
  /**
   * @member {string} [secondaryThumbprint] Secondary thumbprint for the x509
   * certificate.
   */
  secondaryThumbprint?: string;
}

/**
 * @interface
 * An interface representing DeviceTwinInfo.
 * Information about the device twin, which is the cloud representation of
 * application device metadata.
 *
 */
export interface DeviceTwinInfo {
  /**
   * @member {string} [authenticationType] Authentication type used for this
   * device: either SAS, SelfSigned, or CertificateAuthority.
   */
  authenticationType?: string;
  /**
   * @member {number} [cloudToDeviceMessageCount] Count of cloud to device
   * messages sent to this device.
   */
  cloudToDeviceMessageCount?: number;
  /**
   * @member {string} [connectionState] Whether the device is connected or
   * disconnected.
   */
  connectionState?: string;
  /**
   * @member {string} [deviceId] The unique identifier of the device twin.
   */
  deviceId?: string;
  /**
   * @member {string} [etag] A piece of information that describes the content
   * of the device twin. Each etag is guaranteed to be unique per device twin.
   */
  etag?: string;
  /**
   * @member {string} [lastActivityTime] The ISO8601 timestamp of the last
   * activity.
   */
  lastActivityTime?: string;
  /**
   * @member {DeviceTwinInfoProperties} [properties] Properties JSON element.
   */
  properties?: DeviceTwinInfoProperties;
  /**
   * @member {string} [status] Whether the device twin is enabled or disabled.
   */
  status?: string;
  /**
   * @member {string} [statusUpdateTime] The ISO8601 timestamp of the last
   * device twin status update.
   */
  statusUpdateTime?: string;
  /**
   * @member {number} [version] An integer that is incremented by one each time
   * the device twin is updated.
   */
  version?: number;
  /**
   * @member {DeviceTwinInfoX509Thumbprint} [x509Thumbprint] The thumbprint is
   * a unique value for the x509 certificate, commonly used to find a
   * particular certificate in a certificate store. The thumbprint is
   * dynamically generated using the SHA1 algorithm, and does not physically
   * exist in the certificate.
   */
  x509Thumbprint?: DeviceTwinInfoX509Thumbprint;
}

/**
 * @interface
 * An interface representing DeviceConnectionStateEventInfo.
 * Information about the device connection state event.
 *
 */
export interface DeviceConnectionStateEventInfo {
  /**
   * @member {string} [sequenceNumber] Sequence number is string representation
   * of a hexadecimal number. string compare can be used to identify the larger
   * number because both in ASCII and HEX numbers come after alphabets. If you
   * are converting the string to hex, then the number is a 256 bit number.
   */
  sequenceNumber?: string;
}

/**
 * @interface
 * An interface representing ContainerRegistryEventData.
 * The content of the event request message.
 *
 */
export interface ContainerRegistryEventData {
  /**
   * @member {string} [id] The event ID.
   */
  id?: string;
  /**
   * @member {Date} [timestamp] The time at which the event occurred.
   */
  timestamp?: Date;
  /**
   * @member {string} [action] The action that encompasses the provided event.
   */
  action?: string;
  /**
   * @member {ContainerRegistryEventTarget} [target] The target of the event.
   */
  target?: ContainerRegistryEventTarget;
  /**
   * @member {ContainerRegistryEventRequest} [request] The request that
   * generated the event.
   */
  request?: ContainerRegistryEventRequest;
  /**
   * @member {ContainerRegistryEventActor} [actor] The agent that initiated the
   * event. For most situations, this could be from the authorization context
   * of the request.
   */
  actor?: ContainerRegistryEventActor;
  /**
   * @member {ContainerRegistryEventSource} [source] The registry node that
   * generated the event. Put differently, while the actor initiates the event,
   * the source generates it.
   */
  source?: ContainerRegistryEventSource;
}

/**
 * @interface
 * An interface representing ContainerRegistryImagePushedEventData.
 * Schema of the Data property of an EventGridEvent for a
 * Microsoft.ContainerRegistry.ImagePushed event.
 *
 * @extends ContainerRegistryEventData
 */
export interface ContainerRegistryImagePushedEventData extends ContainerRegistryEventData {
}

/**
 * @interface
 * An interface representing ContainerRegistryImageDeletedEventData.
 * Schema of the Data property of an EventGridEvent for a
 * Microsoft.ContainerRegistry.ImageDeleted event.
 *
 * @extends ContainerRegistryEventData
 */
export interface ContainerRegistryImageDeletedEventData extends ContainerRegistryEventData {
}

/**
 * @interface
 * An interface representing ContainerRegistryEventTarget.
 * The target of the event.
 *
 */
export interface ContainerRegistryEventTarget {
  /**
   * @member {string} [mediaType] The MIME type of the referenced object.
   */
  mediaType?: string;
  /**
   * @member {number} [size] The number of bytes of the content. Same as Length
   * field.
   */
  size?: number;
  /**
   * @member {string} [digest] The digest of the content, as defined by the
   * Registry V2 HTTP API Specification.
   */
  digest?: string;
  /**
   * @member {number} [length] The number of bytes of the content. Same as Size
   * field.
   */
  length?: number;
  /**
   * @member {string} [repository] The repository name.
   */
  repository?: string;
  /**
   * @member {string} [url] The direct URL to the content.
   */
  url?: string;
  /**
   * @member {string} [tag] The tag name.
   */
  tag?: string;
}

/**
 * @interface
 * An interface representing ContainerRegistryEventRequest.
 * The request that generated the event.
 *
 */
export interface ContainerRegistryEventRequest {
  /**
   * @member {string} [id] The ID of the request that initiated the event.
   */
  id?: string;
  /**
   * @member {string} [addr] The IP or hostname and possibly port of the client
   * connection that initiated the event. This is the RemoteAddr from the
   * standard http request.
   */
  addr?: string;
  /**
   * @member {string} [host] The externally accessible hostname of the registry
   * instance, as specified by the http host header on incoming requests.
   */
  host?: string;
  /**
   * @member {string} [method] The request method that generated the event.
   */
  method?: string;
  /**
   * @member {string} [useragent] The user agent header of the request.
   */
  useragent?: string;
}

/**
 * @interface
 * An interface representing ContainerRegistryEventActor.
 * The agent that initiated the event. For most situations, this could be from
 * the authorization context of the request.
 *
 */
export interface ContainerRegistryEventActor {
  /**
   * @member {string} [name] The subject or username associated with the
   * request context that generated the event.
   */
  name?: string;
}

/**
 * @interface
 * An interface representing ContainerRegistryEventSource.
 * The registry node that generated the event. Put differently, while the actor
 * initiates the event, the source generates it.
 *
 */
export interface ContainerRegistryEventSource {
  /**
   * @member {string} [addr] The IP or hostname and the port of the registry
   * node that generated the event. Generally, this will be resolved by
   * os.Hostname() along with the running port.
   */
  addr?: string;
  /**
   * @member {string} [instanceID] The running instance of an application.
   * Changes after each restart.
   */
  instanceID?: string;
}

/**
 * @interface
 * An interface representing ServiceBusActiveMessagesAvailableWithNoListenersEventData.
 * Schema of the Data property of an EventGridEvent for a
 * Microsoft.ServiceBus.ActiveMessagesAvailableWithNoListeners event.
 *
 */
export interface ServiceBusActiveMessagesAvailableWithNoListenersEventData {
  /**
   * @member {string} [namespaceName] The namespace name of the
   * Microsoft.ServiceBus resource.
   */
  namespaceName?: string;
  /**
   * @member {string} [requestUri] The endpoint of the Microsoft.ServiceBus
   * resource.
   */
  requestUri?: string;
  /**
   * @member {string} [entityType] The entity type of the Microsoft.ServiceBus
   * resource. Could be one of 'queue' or 'subscriber'.
   */
  entityType?: string;
  /**
   * @member {string} [queueName] The name of the Microsoft.ServiceBus queue.
   * If the entity type is of type 'subscriber', then this value will be null.
   */
  queueName?: string;
  /**
   * @member {string} [topicName] The name of the Microsoft.ServiceBus topic.
   * If the entity type is of type 'queue', then this value will be null.
   */
  topicName?: string;
  /**
   * @member {string} [subscriptionName] The name of the Microsoft.ServiceBus
   * topic's subscription. If the entity type is of type 'queue', then this
   * value will be null.
   */
  subscriptionName?: string;
}

/**
 * @interface
 * An interface representing ServiceBusDeadletterMessagesAvailableWithNoListenersEventData.
 * Schema of the Data property of an EventGridEvent for a
 * Microsoft.ServiceBus.DeadletterMessagesAvailableWithNoListenersEvent event.
 *
 */
export interface ServiceBusDeadletterMessagesAvailableWithNoListenersEventData {
  /**
   * @member {string} [namespaceName] The namespace name of the
   * Microsoft.ServiceBus resource.
   */
  namespaceName?: string;
  /**
   * @member {string} [requestUri] The endpoint of the Microsoft.ServiceBus
   * resource.
   */
  requestUri?: string;
  /**
   * @member {string} [entityType] The entity type of the Microsoft.ServiceBus
   * resource. Could be one of 'queue' or 'subscriber'.
   */
  entityType?: string;
  /**
   * @member {string} [queueName] The name of the Microsoft.ServiceBus queue.
   * If the entity type is of type 'subscriber', then this value will be null.
   */
  queueName?: string;
  /**
   * @member {string} [topicName] The name of the Microsoft.ServiceBus topic.
   * If the entity type is of type 'queue', then this value will be null.
   */
  topicName?: string;
  /**
   * @member {string} [subscriptionName] The name of the Microsoft.ServiceBus
   * topic's subscription. If the entity type is of type 'queue', then this
   * value will be null.
   */
  subscriptionName?: string;
}

/**
 * @interface
 * An interface representing MediaJobStateChangeEventData.
 * Schema of the Data property of an EventGridEvent for a
 * Microsoft.Media.JobStateChange event.
 *
 */
export interface MediaJobStateChangeEventData {
  /**
   * @member {MediaJobState} [previousState] The previous state of the Job.
   * Possible values include: 'Canceled', 'Canceling', 'Error', 'Finished',
   * 'Processing', 'Queued', 'Scheduled'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly previousState?: MediaJobState;
  /**
   * @member {MediaJobState} [state] The new state of the Job. Possible values
   * include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing',
   * 'Queued', 'Scheduled'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: MediaJobState;
  /**
   * @member {{ [propertyName: string]: string }} [correlationData] Gets the
   * Job correlation data.
   */
  correlationData?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing MediaJobErrorDetail.
 * Details of JobOutput errors.
 *
 */
export interface MediaJobErrorDetail {
  /**
   * @member {string} [code] Code describing the error detail.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly code?: string;
  /**
   * @member {string} [message] A human-readable representation of the error.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly message?: string;
}

/**
 * @interface
 * An interface representing MediaJobError.
 * Details of JobOutput errors.
 *
 */
export interface MediaJobError {
  /**
   * @member {MediaJobErrorCode} [code] Error code describing the error.
   * Possible values include: 'ServiceError', 'ServiceTransientError',
   * 'DownloadNotAccessible', 'DownloadTransientError', 'UploadNotAccessible',
   * 'UploadTransientError', 'ConfigurationUnsupported', 'ContentMalformed',
   * 'ContentUnsupported'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly code?: MediaJobErrorCode;
  /**
   * @member {string} [message] A human-readable language-dependent
   * representation of the error.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly message?: string;
  /**
   * @member {MediaJobErrorCategory} [category] Helps with categorization of
   * errors. Possible values include: 'Service', 'Download', 'Upload',
   * 'Configuration', 'Content'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly category?: MediaJobErrorCategory;
  /**
   * @member {MediaJobRetry} [retry] Indicates that it may be possible to retry
   * the Job. If retry is unsuccessful, please contact Azure support via Azure
   * Portal. Possible values include: 'DoNotRetry', 'MayRetry'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly retry?: MediaJobRetry;
  /**
   * @member {MediaJobErrorDetail[]} [details] An array of details about
   * specific errors that led to this reported error.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly details?: MediaJobErrorDetail[];
}

/**
 * Contains the possible cases for MediaJobOutput.
 */
export type MediaJobOutputUnion = MediaJobOutput | MediaJobOutputAsset;

/**
 * @interface
 * An interface representing MediaJobOutput.
 * The event data for a Job output.
 *
 */
export interface MediaJobOutput {
  /**
   * @member {string} odatatype Polymorphic Discriminator
   */
  odatatype: "MediaJobOutput";
  /**
   * @member {MediaJobError} [error] Gets the Job output error.
   */
  error?: MediaJobError;
  /**
   * @member {string} [label] Gets the Job output label.
   */
  label?: string;
  /**
   * @member {number} progress Gets the Job output progress.
   */
  progress: number;
  /**
   * @member {MediaJobState} state Gets the Job output state. Possible values
   * include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing',
   * 'Queued', 'Scheduled'
   */
  state: MediaJobState;
}

/**
 * @interface
 * An interface representing MediaJobOutputAsset.
 * The event data for a Job output asset.
 *
 */
export interface MediaJobOutputAsset {
  /**
   * @member {string} odatatype Polymorphic Discriminator
   */
  odatatype: "#Microsoft.Media.JobOutputAsset";
  /**
   * @member {MediaJobError} [error] Gets the Job output error.
   */
  error?: MediaJobError;
  /**
   * @member {string} [label] Gets the Job output label.
   */
  label?: string;
  /**
   * @member {number} progress Gets the Job output progress.
   */
  progress: number;
  /**
   * @member {MediaJobState} state Gets the Job output state. Possible values
   * include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing',
   * 'Queued', 'Scheduled'
   */
  state: MediaJobState;
  /**
   * @member {string} [assetName] Gets the Job output asset name.
   */
  assetName?: string;
}

/**
 * @interface
 * An interface representing MediaJobOutputStateChangeEventData.
 * Schema of the Data property of an EventGridEvent for a
 * Microsoft.Media.JobOutputStateChange event.
 *
 */
export interface MediaJobOutputStateChangeEventData {
  /**
   * @member {MediaJobState} [previousState] The previous state of the Job.
   * Possible values include: 'Canceled', 'Canceling', 'Error', 'Finished',
   * 'Processing', 'Queued', 'Scheduled'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly previousState?: MediaJobState;
  /**
   * @member {MediaJobOutputUnion} [output] Gets the output.
   */
  output?: MediaJobOutputUnion;
  /**
   * @member {{ [propertyName: string]: string }} [jobCorrelationData] Gets the
   * Job correlation data.
   */
  jobCorrelationData?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing MediaJobScheduledEventData.
 * Job scheduled event data
 *
 * @extends MediaJobStateChangeEventData
 */
export interface MediaJobScheduledEventData extends MediaJobStateChangeEventData {
}

/**
 * @interface
 * An interface representing MediaJobProcessingEventData.
 * Job processing event data
 *
 * @extends MediaJobStateChangeEventData
 */
export interface MediaJobProcessingEventData extends MediaJobStateChangeEventData {
}

/**
 * @interface
 * An interface representing MediaJobCancelingEventData.
 * Job canceling event data
 *
 * @extends MediaJobStateChangeEventData
 */
export interface MediaJobCancelingEventData extends MediaJobStateChangeEventData {
}

/**
 * @interface
 * An interface representing MediaJobFinishedEventData.
 * Job finished event data
 *
 * @extends MediaJobStateChangeEventData
 */
export interface MediaJobFinishedEventData extends MediaJobStateChangeEventData {
  /**
   * @member {MediaJobOutputUnion[]} [outputs] Gets the Job outputs.
   */
  outputs?: MediaJobOutputUnion[];
}

/**
 * @interface
 * An interface representing MediaJobCanceledEventData.
 * Job canceled event data
 *
 * @extends MediaJobStateChangeEventData
 */
export interface MediaJobCanceledEventData extends MediaJobStateChangeEventData {
  /**
   * @member {MediaJobOutputUnion[]} [outputs] Gets the Job outputs.
   */
  outputs?: MediaJobOutputUnion[];
}

/**
 * @interface
 * An interface representing MediaJobErroredEventData.
 * Job error state event data
 *
 * @extends MediaJobStateChangeEventData
 */
export interface MediaJobErroredEventData extends MediaJobStateChangeEventData {
  /**
   * @member {MediaJobOutputUnion[]} [outputs] Gets the Job outputs.
   */
  outputs?: MediaJobOutputUnion[];
}

/**
 * @interface
 * An interface representing MediaJobOutputCanceledEventData.
 * Job output canceled event data
 *
 * @extends MediaJobOutputStateChangeEventData
 */
export interface MediaJobOutputCanceledEventData extends MediaJobOutputStateChangeEventData {
}

/**
 * @interface
 * An interface representing MediaJobOutputCancelingEventData.
 * Job output canceling event data
 *
 * @extends MediaJobOutputStateChangeEventData
 */
export interface MediaJobOutputCancelingEventData extends MediaJobOutputStateChangeEventData {
}

/**
 * @interface
 * An interface representing MediaJobOutputErroredEventData.
 * Job output error event data
 *
 * @extends MediaJobOutputStateChangeEventData
 */
export interface MediaJobOutputErroredEventData extends MediaJobOutputStateChangeEventData {
}

/**
 * @interface
 * An interface representing MediaJobOutputFinishedEventData.
 * Job output finished event data
 *
 * @extends MediaJobOutputStateChangeEventData
 */
export interface MediaJobOutputFinishedEventData extends MediaJobOutputStateChangeEventData {
}

/**
 * @interface
 * An interface representing MediaJobOutputProcessingEventData.
 * Job output processing event data
 *
 * @extends MediaJobOutputStateChangeEventData
 */
export interface MediaJobOutputProcessingEventData extends MediaJobOutputStateChangeEventData {
}

/**
 * @interface
 * An interface representing MediaJobOutputScheduledEventData.
 * Job output scheduled event data
 *
 * @extends MediaJobOutputStateChangeEventData
 */
export interface MediaJobOutputScheduledEventData extends MediaJobOutputStateChangeEventData {
}

/**
 * @interface
 * An interface representing MediaLiveEventEncoderConnectedEventData.
 * Encoder connect event data.
 *
 */
export interface MediaLiveEventEncoderConnectedEventData {
  /**
   * @member {string} [ingestUrl] Gets the ingest URL provided by the live
   * event.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly ingestUrl?: string;
  /**
   * @member {string} [streamId] Gets the stream Id.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly streamId?: string;
  /**
   * @member {string} [encoderIp] Gets the remote IP.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly encoderIp?: string;
  /**
   * @member {string} [encoderPort] Gets the remote port.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly encoderPort?: string;
}

/**
 * @interface
 * An interface representing MediaLiveEventConnectionRejectedEventData.
 * Encoder connection rejected event data.
 *
 */
export interface MediaLiveEventConnectionRejectedEventData {
  /**
   * @member {string} [ingestUrl] Gets the ingest URL provided by the live
   * event.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly ingestUrl?: string;
  /**
   * @member {string} [streamId] Gets the stream Id.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly streamId?: string;
  /**
   * @member {string} [encoderIp] Gets the remote IP.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly encoderIp?: string;
  /**
   * @member {string} [encoderPort] Gets the remote port.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly encoderPort?: string;
  /**
   * @member {string} [resultCode] Gets the result code.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly resultCode?: string;
}

/**
 * @interface
 * An interface representing MediaLiveEventEncoderDisconnectedEventData.
 * Encoder disconnected event data.
 *
 */
export interface MediaLiveEventEncoderDisconnectedEventData {
  /**
   * @member {string} [ingestUrl] Gets the ingest URL provided by the live
   * event.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly ingestUrl?: string;
  /**
   * @member {string} [streamId] Gets the stream Id.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly streamId?: string;
  /**
   * @member {string} [encoderIp] Gets the remote IP.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly encoderIp?: string;
  /**
   * @member {string} [encoderPort] Gets the remote port.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly encoderPort?: string;
  /**
   * @member {string} [resultCode] Gets the result code.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly resultCode?: string;
}

/**
 * @interface
 * An interface representing MediaLiveEventIncomingStreamReceivedEventData.
 * Encoder connect event data.
 *
 */
export interface MediaLiveEventIncomingStreamReceivedEventData {
  /**
   * @member {string} [ingestUrl] Gets the ingest URL provided by the live
   * event.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly ingestUrl?: string;
  /**
   * @member {string} [trackType] Gets the type of the track (Audio / Video).
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly trackType?: string;
  /**
   * @member {string} [trackName] Gets the track name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly trackName?: string;
  /**
   * @member {number} [bitrate] Gets the bitrate of the track.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly bitrate?: number;
  /**
   * @member {string} [encoderIp] Gets the remote IP.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly encoderIp?: string;
  /**
   * @member {string} [encoderPort] Gets the remote port.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly encoderPort?: string;
  /**
   * @member {string} [timestamp] Gets the first timestamp of the data chunk
   * received.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly timestamp?: string;
  /**
   * @member {string} [duration] Gets the duration of the first data chunk.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly duration?: string;
  /**
   * @member {string} [timescale] Gets the timescale in which timestamp is
   * represented.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly timescale?: string;
}

/**
 * @interface
 * An interface representing MediaLiveEventIncomingStreamsOutOfSyncEventData.
 * Incoming streams out of sync event data.
 *
 */
export interface MediaLiveEventIncomingStreamsOutOfSyncEventData {
  /**
   * @member {string} [minLastTimestamp] Gets the minimum last timestamp
   * received.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly minLastTimestamp?: string;
  /**
   * @member {string} [typeOfStreamWithMinLastTimestamp] Gets the type of
   * stream with minimum last timestamp.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly typeOfStreamWithMinLastTimestamp?: string;
  /**
   * @member {string} [maxLastTimestamp] Gets the maximum timestamp among all
   * the tracks (audio or video).
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly maxLastTimestamp?: string;
  /**
   * @member {string} [typeOfStreamWithMaxLastTimestamp] Gets the type of
   * stream with maximum last timestamp.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly typeOfStreamWithMaxLastTimestamp?: string;
  /**
   * @member {string} [timescaleOfMinLastTimestamp] Gets the timescale in which
   * "MinLastTimestamp" is represented.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly timescaleOfMinLastTimestamp?: string;
  /**
   * @member {string} [timescaleOfMaxLastTimestamp] Gets the timescale in which
   * "MaxLastTimestamp" is represented.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly timescaleOfMaxLastTimestamp?: string;
}

/**
 * @interface
 * An interface representing MediaLiveEventIncomingVideoStreamsOutOfSyncEventData.
 * Incoming video stream out of synch event data.
 *
 */
export interface MediaLiveEventIncomingVideoStreamsOutOfSyncEventData {
  /**
   * @member {string} [firstTimestamp] Gets the first timestamp received for
   * one of the quality levels.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly firstTimestamp?: string;
  /**
   * @member {string} [firstDuration] Gets the duration of the data chunk with
   * first timestamp.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly firstDuration?: string;
  /**
   * @member {string} [secondTimestamp] Gets the timestamp received for some
   * other quality levels.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly secondTimestamp?: string;
  /**
   * @member {string} [secondDuration] Gets the duration of the data chunk with
   * second timestamp.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly secondDuration?: string;
  /**
   * @member {string} [timescale] Gets the timescale in which both the
   * timestamps and durations are represented.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly timescale?: string;
}

/**
 * @interface
 * An interface representing MediaLiveEventIncomingDataChunkDroppedEventData.
 * Ingest fragment dropped event event data.
 *
 */
export interface MediaLiveEventIncomingDataChunkDroppedEventData {
  /**
   * @member {string} [timestamp] Gets the timestamp of the data chunk dropped.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly timestamp?: string;
  /**
   * @member {string} [trackType] Gets the type of the track (Audio / Video).
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly trackType?: string;
  /**
   * @member {number} [bitrate] Gets the bitrate of the track.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly bitrate?: number;
  /**
   * @member {string} [timescale] Gets the timescale of the Timestamp.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly timescale?: string;
  /**
   * @member {string} [resultCode] Gets the result code for fragment drop
   * operation.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly resultCode?: string;
  /**
   * @member {string} [trackName] Gets the name of the track for which fragment
   * is dropped.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly trackName?: string;
}

/**
 * @interface
 * An interface representing MediaLiveEventIngestHeartbeatEventData.
 * Ingest fragment dropped event event data.
 *
 */
export interface MediaLiveEventIngestHeartbeatEventData {
  /**
   * @member {string} [trackType] Gets the type of the track (Audio / Video).
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly trackType?: string;
  /**
   * @member {string} [trackName] Gets the track name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly trackName?: string;
  /**
   * @member {number} [bitrate] Gets the bitrate of the track.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly bitrate?: number;
  /**
   * @member {number} [incomingBitrate] Gets the incoming bitrate.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly incomingBitrate?: number;
  /**
   * @member {string} [lastTimestamp] Gets the last timestamp.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly lastTimestamp?: string;
  /**
   * @member {string} [timescale] Gets the timescale of the last timestamp.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly timescale?: string;
  /**
   * @member {number} [overlapCount] Gets the fragment Overlap count.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly overlapCount?: number;
  /**
   * @member {number} [discontinuityCount] Gets the fragment Discontinuity
   * count.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly discontinuityCount?: number;
  /**
   * @member {number} [nonincreasingCount] Gets Non increasing count.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nonincreasingCount?: number;
  /**
   * @member {boolean} [unexpectedBitrate] Gets a value indicating whether
   * unexpected bitrate is present or not.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly unexpectedBitrate?: boolean;
  /**
   * @member {string} [state] Gets the state of the live event.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: string;
  /**
   * @member {boolean} [healthy] Gets a value indicating whether preview is
   * healthy or not.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly healthy?: boolean;
}

/**
 * @interface
 * An interface representing MediaLiveEventTrackDiscontinuityDetectedEventData.
 * Ingest track discontinuity detected event data.
 *
 */
export interface MediaLiveEventTrackDiscontinuityDetectedEventData {
  /**
   * @member {string} [trackType] Gets the type of the track (Audio / Video).
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly trackType?: string;
  /**
   * @member {string} [trackName] Gets the track name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly trackName?: string;
  /**
   * @member {number} [bitrate] Gets the bitrate.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly bitrate?: number;
  /**
   * @member {string} [previousTimestamp] Gets the timestamp of the previous
   * fragment.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly previousTimestamp?: string;
  /**
   * @member {string} [newTimestamp] Gets the timestamp of the current
   * fragment.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly newTimestamp?: string;
  /**
   * @member {string} [timescale] Gets the timescale in which both timestamps
   * and discontinuity gap are represented.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly timescale?: string;
  /**
   * @member {string} [discontinuityGap] Gets the discontinuity gap between
   * PreviousTimestamp and NewTimestamp.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly discontinuityGap?: string;
}


/**
 * Defines values for MediaJobState.
 * Possible values include: 'Canceled', 'Canceling', 'Error', 'Finished',
 * 'Processing', 'Queued', 'Scheduled'
 * @readonly
 * @enum {string}
 */
export enum MediaJobState {
  /**
   * The job was canceled. This is a final state for the job.
   */
  Canceled = 'Canceled',
  /**
   * The job is in the process of being canceled. This is a transient state for
   * the job.
   */
  Canceling = 'Canceling',
  /**
   * The job has encountered an error. This is a final state for the job.
   */
  Error = 'Error',
  /**
   * The job is finished. This is a final state for the job.
   */
  Finished = 'Finished',
  /**
   * The job is processing. This is a transient state for the job.
   */
  Processing = 'Processing',
  /**
   * The job is in a queued state, waiting for resources to become available.
   * This is a transient state.
   */
  Queued = 'Queued',
  /**
   * The job is being scheduled to run on an available resource. This is a
   * transient state, between queued and processing states.
   */
  Scheduled = 'Scheduled',
}

/**
 * Defines values for MediaJobErrorCode.
 * Possible values include: 'ServiceError', 'ServiceTransientError',
 * 'DownloadNotAccessible', 'DownloadTransientError', 'UploadNotAccessible',
 * 'UploadTransientError', 'ConfigurationUnsupported', 'ContentMalformed',
 * 'ContentUnsupported'
 * @readonly
 * @enum {string}
 */
export enum MediaJobErrorCode {
  /**
   * Fatal service error, please contact support.
   */
  ServiceError = 'ServiceError',
  /**
   * Transient error, please retry, if retry is unsuccessful, please contact
   * support.
   */
  ServiceTransientError = 'ServiceTransientError',
  /**
   * While trying to download the input files, the files were not accessible,
   * please check the availability of the source.
   */
  DownloadNotAccessible = 'DownloadNotAccessible',
  /**
   * While trying to download the input files, there was an issue during
   * transfer (storage service, network errors), see details and check your
   * source.
   */
  DownloadTransientError = 'DownloadTransientError',
  /**
   * While trying to upload the output files, the destination was not
   * reachable, please check the availability of the destination.
   */
  UploadNotAccessible = 'UploadNotAccessible',
  /**
   * While trying to upload the output files, there was an issue during
   * transfer (storage service, network errors), see details and check your
   * destination.
   */
  UploadTransientError = 'UploadTransientError',
  /**
   * There was a problem with the combination of input files and the
   * configuration settings applied, fix the configuration settings and retry
   * with the same input, or change input to match the configuration.
   */
  ConfigurationUnsupported = 'ConfigurationUnsupported',
  /**
   * There was a problem with the input content (for example: zero byte files,
   * or corrupt/non-decodable files), check the input files.
   */
  ContentMalformed = 'ContentMalformed',
  /**
   * There was a problem with the format of the input (not valid media file, or
   * an unsupported file/codec), check the validity of the input files.
   */
  ContentUnsupported = 'ContentUnsupported',
}

/**
 * Defines values for MediaJobErrorCategory.
 * Possible values include: 'Service', 'Download', 'Upload', 'Configuration',
 * 'Content'
 * @readonly
 * @enum {string}
 */
export enum MediaJobErrorCategory {
  /**
   * The error is service related.
   */
  Service = 'Service',
  /**
   * The error is download related.
   */
  Download = 'Download',
  /**
   * The error is upload related.
   */
  Upload = 'Upload',
  /**
   * The error is configuration related.
   */
  Configuration = 'Configuration',
  /**
   * The error is related to data in the input files.
   */
  Content = 'Content',
}

/**
 * Defines values for MediaJobRetry.
 * Possible values include: 'DoNotRetry', 'MayRetry'
 * @readonly
 * @enum {string}
 */
export enum MediaJobRetry {
  /**
   * Issue needs to be investigated and then the job resubmitted with
   * corrections or retried once the underlying issue has been corrected.
   */
  DoNotRetry = 'DoNotRetry',
  /**
   * Issue may be resolved after waiting for a period of time and resubmitting
   * the same Job.
   */
  MayRetry = 'MayRetry',
}
