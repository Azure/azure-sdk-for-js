/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.Eventgrid = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for JobState.
     * Possible values include: 'Canceled', 'Canceling', 'Error', 'Finished',
     * 'Processing', 'Queued', 'Scheduled'
     * @readonly
     * @enum {string}
     */
    var JobState;
    (function (JobState) {
        /**
         * The job was canceled. This is a final state for the job.
         */
        JobState["Canceled"] = "Canceled";
        /**
         * The job is in the process of being canceled. This is a transient state for
         * the job.
         */
        JobState["Canceling"] = "Canceling";
        /**
         * The job has encountered an error. This is a final state for the job.
         */
        JobState["Error"] = "Error";
        /**
         * The job is finished. This is a final state for the job.
         */
        JobState["Finished"] = "Finished";
        /**
         * The job is processing. This is a transient state for the job.
         */
        JobState["Processing"] = "Processing";
        /**
         * The job is in a queued state, waiting for resources to become available.
         * This is a transient state.
         */
        JobState["Queued"] = "Queued";
        /**
         * The job is being scheduled to run on an available resource. This is a
         * transient state, between queued and processing states.
         */
        JobState["Scheduled"] = "Scheduled";
    })(JobState || (JobState = {}));

    var index = /*#__PURE__*/Object.freeze({
        get JobState () { return JobState; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var StorageBlobCreatedEventData = {
        serializedName: "StorageBlobCreatedEventData",
        type: {
            name: "Composite",
            className: "StorageBlobCreatedEventData",
            modelProperties: {
                api: {
                    serializedName: "api",
                    type: {
                        name: "String"
                    }
                },
                clientRequestId: {
                    serializedName: "clientRequestId",
                    type: {
                        name: "String"
                    }
                },
                requestId: {
                    serializedName: "requestId",
                    type: {
                        name: "String"
                    }
                },
                eTag: {
                    serializedName: "eTag",
                    type: {
                        name: "String"
                    }
                },
                contentType: {
                    serializedName: "contentType",
                    type: {
                        name: "String"
                    }
                },
                contentLength: {
                    serializedName: "contentLength",
                    type: {
                        name: "Number"
                    }
                },
                blobType: {
                    serializedName: "blobType",
                    type: {
                        name: "String"
                    }
                },
                url: {
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                },
                sequencer: {
                    serializedName: "sequencer",
                    type: {
                        name: "String"
                    }
                },
                storageDiagnostics: {
                    serializedName: "storageDiagnostics",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var StorageBlobDeletedEventData = {
        serializedName: "StorageBlobDeletedEventData",
        type: {
            name: "Composite",
            className: "StorageBlobDeletedEventData",
            modelProperties: {
                api: {
                    serializedName: "api",
                    type: {
                        name: "String"
                    }
                },
                clientRequestId: {
                    serializedName: "clientRequestId",
                    type: {
                        name: "String"
                    }
                },
                requestId: {
                    serializedName: "requestId",
                    type: {
                        name: "String"
                    }
                },
                contentType: {
                    serializedName: "contentType",
                    type: {
                        name: "String"
                    }
                },
                blobType: {
                    serializedName: "blobType",
                    type: {
                        name: "String"
                    }
                },
                url: {
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                },
                sequencer: {
                    serializedName: "sequencer",
                    type: {
                        name: "String"
                    }
                },
                storageDiagnostics: {
                    serializedName: "storageDiagnostics",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var EventHubCaptureFileCreatedEventData = {
        serializedName: "EventHubCaptureFileCreatedEventData",
        type: {
            name: "Composite",
            className: "EventHubCaptureFileCreatedEventData",
            modelProperties: {
                fileurl: {
                    serializedName: "fileurl",
                    type: {
                        name: "String"
                    }
                },
                fileType: {
                    serializedName: "fileType",
                    type: {
                        name: "String"
                    }
                },
                partitionId: {
                    serializedName: "partitionId",
                    type: {
                        name: "String"
                    }
                },
                sizeInBytes: {
                    serializedName: "sizeInBytes",
                    type: {
                        name: "Number"
                    }
                },
                eventCount: {
                    serializedName: "eventCount",
                    type: {
                        name: "Number"
                    }
                },
                firstSequenceNumber: {
                    serializedName: "firstSequenceNumber",
                    type: {
                        name: "Number"
                    }
                },
                lastSequenceNumber: {
                    serializedName: "lastSequenceNumber",
                    type: {
                        name: "Number"
                    }
                },
                firstEnqueueTime: {
                    serializedName: "firstEnqueueTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastEnqueueTime: {
                    serializedName: "lastEnqueueTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var ResourceWriteSuccessData = {
        serializedName: "ResourceWriteSuccessData",
        type: {
            name: "Composite",
            className: "ResourceWriteSuccessData",
            modelProperties: {
                tenantId: {
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                subscriptionId: {
                    serializedName: "subscriptionId",
                    type: {
                        name: "String"
                    }
                },
                resourceGroup: {
                    serializedName: "resourceGroup",
                    type: {
                        name: "String"
                    }
                },
                resourceProvider: {
                    serializedName: "resourceProvider",
                    type: {
                        name: "String"
                    }
                },
                resourceUri: {
                    serializedName: "resourceUri",
                    type: {
                        name: "String"
                    }
                },
                operationName: {
                    serializedName: "operationName",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                authorization: {
                    serializedName: "authorization",
                    type: {
                        name: "String"
                    }
                },
                claims: {
                    serializedName: "claims",
                    type: {
                        name: "String"
                    }
                },
                correlationId: {
                    serializedName: "correlationId",
                    type: {
                        name: "String"
                    }
                },
                httpRequest: {
                    serializedName: "httpRequest",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceWriteFailureData = {
        serializedName: "ResourceWriteFailureData",
        type: {
            name: "Composite",
            className: "ResourceWriteFailureData",
            modelProperties: {
                tenantId: {
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                subscriptionId: {
                    serializedName: "subscriptionId",
                    type: {
                        name: "String"
                    }
                },
                resourceGroup: {
                    serializedName: "resourceGroup",
                    type: {
                        name: "String"
                    }
                },
                resourceProvider: {
                    serializedName: "resourceProvider",
                    type: {
                        name: "String"
                    }
                },
                resourceUri: {
                    serializedName: "resourceUri",
                    type: {
                        name: "String"
                    }
                },
                operationName: {
                    serializedName: "operationName",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                authorization: {
                    serializedName: "authorization",
                    type: {
                        name: "String"
                    }
                },
                claims: {
                    serializedName: "claims",
                    type: {
                        name: "String"
                    }
                },
                correlationId: {
                    serializedName: "correlationId",
                    type: {
                        name: "String"
                    }
                },
                httpRequest: {
                    serializedName: "httpRequest",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceWriteCancelData = {
        serializedName: "ResourceWriteCancelData",
        type: {
            name: "Composite",
            className: "ResourceWriteCancelData",
            modelProperties: {
                tenantId: {
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                subscriptionId: {
                    serializedName: "subscriptionId",
                    type: {
                        name: "String"
                    }
                },
                resourceGroup: {
                    serializedName: "resourceGroup",
                    type: {
                        name: "String"
                    }
                },
                resourceProvider: {
                    serializedName: "resourceProvider",
                    type: {
                        name: "String"
                    }
                },
                resourceUri: {
                    serializedName: "resourceUri",
                    type: {
                        name: "String"
                    }
                },
                operationName: {
                    serializedName: "operationName",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                authorization: {
                    serializedName: "authorization",
                    type: {
                        name: "String"
                    }
                },
                claims: {
                    serializedName: "claims",
                    type: {
                        name: "String"
                    }
                },
                correlationId: {
                    serializedName: "correlationId",
                    type: {
                        name: "String"
                    }
                },
                httpRequest: {
                    serializedName: "httpRequest",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceDeleteSuccessData = {
        serializedName: "ResourceDeleteSuccessData",
        type: {
            name: "Composite",
            className: "ResourceDeleteSuccessData",
            modelProperties: {
                tenantId: {
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                subscriptionId: {
                    serializedName: "subscriptionId",
                    type: {
                        name: "String"
                    }
                },
                resourceGroup: {
                    serializedName: "resourceGroup",
                    type: {
                        name: "String"
                    }
                },
                resourceProvider: {
                    serializedName: "resourceProvider",
                    type: {
                        name: "String"
                    }
                },
                resourceUri: {
                    serializedName: "resourceUri",
                    type: {
                        name: "String"
                    }
                },
                operationName: {
                    serializedName: "operationName",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                authorization: {
                    serializedName: "authorization",
                    type: {
                        name: "String"
                    }
                },
                claims: {
                    serializedName: "claims",
                    type: {
                        name: "String"
                    }
                },
                correlationId: {
                    serializedName: "correlationId",
                    type: {
                        name: "String"
                    }
                },
                httpRequest: {
                    serializedName: "httpRequest",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceDeleteFailureData = {
        serializedName: "ResourceDeleteFailureData",
        type: {
            name: "Composite",
            className: "ResourceDeleteFailureData",
            modelProperties: {
                tenantId: {
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                subscriptionId: {
                    serializedName: "subscriptionId",
                    type: {
                        name: "String"
                    }
                },
                resourceGroup: {
                    serializedName: "resourceGroup",
                    type: {
                        name: "String"
                    }
                },
                resourceProvider: {
                    serializedName: "resourceProvider",
                    type: {
                        name: "String"
                    }
                },
                resourceUri: {
                    serializedName: "resourceUri",
                    type: {
                        name: "String"
                    }
                },
                operationName: {
                    serializedName: "operationName",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                authorization: {
                    serializedName: "authorization",
                    type: {
                        name: "String"
                    }
                },
                claims: {
                    serializedName: "claims",
                    type: {
                        name: "String"
                    }
                },
                correlationId: {
                    serializedName: "correlationId",
                    type: {
                        name: "String"
                    }
                },
                httpRequest: {
                    serializedName: "httpRequest",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceDeleteCancelData = {
        serializedName: "ResourceDeleteCancelData",
        type: {
            name: "Composite",
            className: "ResourceDeleteCancelData",
            modelProperties: {
                tenantId: {
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                subscriptionId: {
                    serializedName: "subscriptionId",
                    type: {
                        name: "String"
                    }
                },
                resourceGroup: {
                    serializedName: "resourceGroup",
                    type: {
                        name: "String"
                    }
                },
                resourceProvider: {
                    serializedName: "resourceProvider",
                    type: {
                        name: "String"
                    }
                },
                resourceUri: {
                    serializedName: "resourceUri",
                    type: {
                        name: "String"
                    }
                },
                operationName: {
                    serializedName: "operationName",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                authorization: {
                    serializedName: "authorization",
                    type: {
                        name: "String"
                    }
                },
                claims: {
                    serializedName: "claims",
                    type: {
                        name: "String"
                    }
                },
                correlationId: {
                    serializedName: "correlationId",
                    type: {
                        name: "String"
                    }
                },
                httpRequest: {
                    serializedName: "httpRequest",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceActionSuccessData = {
        serializedName: "ResourceActionSuccessData",
        type: {
            name: "Composite",
            className: "ResourceActionSuccessData",
            modelProperties: {
                tenantId: {
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                subscriptionId: {
                    serializedName: "subscriptionId",
                    type: {
                        name: "String"
                    }
                },
                resourceGroup: {
                    serializedName: "resourceGroup",
                    type: {
                        name: "String"
                    }
                },
                resourceProvider: {
                    serializedName: "resourceProvider",
                    type: {
                        name: "String"
                    }
                },
                resourceUri: {
                    serializedName: "resourceUri",
                    type: {
                        name: "String"
                    }
                },
                operationName: {
                    serializedName: "operationName",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                authorization: {
                    serializedName: "authorization",
                    type: {
                        name: "String"
                    }
                },
                claims: {
                    serializedName: "claims",
                    type: {
                        name: "String"
                    }
                },
                correlationId: {
                    serializedName: "correlationId",
                    type: {
                        name: "String"
                    }
                },
                httpRequest: {
                    serializedName: "httpRequest",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceActionFailureData = {
        serializedName: "ResourceActionFailureData",
        type: {
            name: "Composite",
            className: "ResourceActionFailureData",
            modelProperties: {
                tenantId: {
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                subscriptionId: {
                    serializedName: "subscriptionId",
                    type: {
                        name: "String"
                    }
                },
                resourceGroup: {
                    serializedName: "resourceGroup",
                    type: {
                        name: "String"
                    }
                },
                resourceProvider: {
                    serializedName: "resourceProvider",
                    type: {
                        name: "String"
                    }
                },
                resourceUri: {
                    serializedName: "resourceUri",
                    type: {
                        name: "String"
                    }
                },
                operationName: {
                    serializedName: "operationName",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                authorization: {
                    serializedName: "authorization",
                    type: {
                        name: "String"
                    }
                },
                claims: {
                    serializedName: "claims",
                    type: {
                        name: "String"
                    }
                },
                correlationId: {
                    serializedName: "correlationId",
                    type: {
                        name: "String"
                    }
                },
                httpRequest: {
                    serializedName: "httpRequest",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceActionCancelData = {
        serializedName: "ResourceActionCancelData",
        type: {
            name: "Composite",
            className: "ResourceActionCancelData",
            modelProperties: {
                tenantId: {
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                subscriptionId: {
                    serializedName: "subscriptionId",
                    type: {
                        name: "String"
                    }
                },
                resourceGroup: {
                    serializedName: "resourceGroup",
                    type: {
                        name: "String"
                    }
                },
                resourceProvider: {
                    serializedName: "resourceProvider",
                    type: {
                        name: "String"
                    }
                },
                resourceUri: {
                    serializedName: "resourceUri",
                    type: {
                        name: "String"
                    }
                },
                operationName: {
                    serializedName: "operationName",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                authorization: {
                    serializedName: "authorization",
                    type: {
                        name: "String"
                    }
                },
                claims: {
                    serializedName: "claims",
                    type: {
                        name: "String"
                    }
                },
                correlationId: {
                    serializedName: "correlationId",
                    type: {
                        name: "String"
                    }
                },
                httpRequest: {
                    serializedName: "httpRequest",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventGridEvent = {
        serializedName: "EventGridEvent",
        type: {
            name: "Composite",
            className: "EventGridEvent",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                topic: {
                    serializedName: "topic",
                    type: {
                        name: "String"
                    }
                },
                subject: {
                    required: true,
                    serializedName: "subject",
                    type: {
                        name: "String"
                    }
                },
                data: {
                    required: true,
                    serializedName: "data",
                    type: {
                        name: "Object"
                    }
                },
                eventType: {
                    required: true,
                    serializedName: "eventType",
                    type: {
                        name: "String"
                    }
                },
                eventTime: {
                    required: true,
                    serializedName: "eventTime",
                    type: {
                        name: "DateTime"
                    }
                },
                metadataVersion: {
                    readOnly: true,
                    serializedName: "metadataVersion",
                    type: {
                        name: "String"
                    }
                },
                dataVersion: {
                    required: true,
                    serializedName: "dataVersion",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SubscriptionValidationEventData = {
        serializedName: "SubscriptionValidationEventData",
        type: {
            name: "Composite",
            className: "SubscriptionValidationEventData",
            modelProperties: {
                validationCode: {
                    readOnly: true,
                    serializedName: "validationCode",
                    type: {
                        name: "String"
                    }
                },
                validationUrl: {
                    readOnly: true,
                    serializedName: "validationUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SubscriptionValidationResponse = {
        serializedName: "SubscriptionValidationResponse",
        type: {
            name: "Composite",
            className: "SubscriptionValidationResponse",
            modelProperties: {
                validationResponse: {
                    serializedName: "validationResponse",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SubscriptionDeletedEventData = {
        serializedName: "SubscriptionDeletedEventData",
        type: {
            name: "Composite",
            className: "SubscriptionDeletedEventData",
            modelProperties: {
                eventSubscriptionId: {
                    readOnly: true,
                    serializedName: "eventSubscriptionId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DeviceLifeCycleEventProperties = {
        serializedName: "DeviceLifeCycleEventProperties",
        type: {
            name: "Composite",
            className: "DeviceLifeCycleEventProperties",
            modelProperties: {
                deviceId: {
                    serializedName: "deviceId",
                    type: {
                        name: "String"
                    }
                },
                hubName: {
                    serializedName: "hubName",
                    type: {
                        name: "String"
                    }
                },
                twin: {
                    serializedName: "twin",
                    type: {
                        name: "Composite",
                        className: "DeviceTwinInfo"
                    }
                }
            }
        }
    };
    var IotHubDeviceCreatedEventData = {
        serializedName: "IotHubDeviceCreatedEventData",
        type: {
            name: "Composite",
            className: "IotHubDeviceCreatedEventData",
            modelProperties: __assign({}, DeviceLifeCycleEventProperties.type.modelProperties)
        }
    };
    var IotHubDeviceDeletedEventData = {
        serializedName: "IotHubDeviceDeletedEventData",
        type: {
            name: "Composite",
            className: "IotHubDeviceDeletedEventData",
            modelProperties: __assign({}, DeviceLifeCycleEventProperties.type.modelProperties)
        }
    };
    var DeviceConnectionStateEventProperties = {
        serializedName: "DeviceConnectionStateEventProperties",
        type: {
            name: "Composite",
            className: "DeviceConnectionStateEventProperties",
            modelProperties: {
                deviceId: {
                    serializedName: "deviceId",
                    type: {
                        name: "String"
                    }
                },
                moduleId: {
                    serializedName: "moduleId",
                    type: {
                        name: "String"
                    }
                },
                hubName: {
                    serializedName: "hubName",
                    type: {
                        name: "String"
                    }
                },
                deviceConnectionStateEventInfo: {
                    serializedName: "deviceConnectionStateEventInfo",
                    type: {
                        name: "Composite",
                        className: "DeviceConnectionStateEventInfo"
                    }
                }
            }
        }
    };
    var IotHubDeviceConnectedEventData = {
        serializedName: "IotHubDeviceConnectedEventData",
        type: {
            name: "Composite",
            className: "IotHubDeviceConnectedEventData",
            modelProperties: __assign({}, DeviceConnectionStateEventProperties.type.modelProperties)
        }
    };
    var IotHubDeviceDisconnectedEventData = {
        serializedName: "IotHubDeviceDisconnectedEventData",
        type: {
            name: "Composite",
            className: "IotHubDeviceDisconnectedEventData",
            modelProperties: __assign({}, DeviceConnectionStateEventProperties.type.modelProperties)
        }
    };
    var DeviceTwinMetadata = {
        serializedName: "DeviceTwinMetadata",
        type: {
            name: "Composite",
            className: "DeviceTwinMetadata",
            modelProperties: {
                lastUpdated: {
                    serializedName: "lastUpdated",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DeviceTwinProperties = {
        serializedName: "DeviceTwinProperties",
        type: {
            name: "Composite",
            className: "DeviceTwinProperties",
            modelProperties: {
                metadata: {
                    serializedName: "metadata",
                    type: {
                        name: "Composite",
                        className: "DeviceTwinMetadata"
                    }
                },
                version: {
                    serializedName: "version",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var DeviceTwinInfoProperties = {
        serializedName: "DeviceTwinInfo_properties",
        type: {
            name: "Composite",
            className: "DeviceTwinInfoProperties",
            modelProperties: {
                desired: {
                    serializedName: "desired",
                    type: {
                        name: "Composite",
                        className: "DeviceTwinProperties"
                    }
                },
                reported: {
                    serializedName: "reported",
                    type: {
                        name: "Composite",
                        className: "DeviceTwinProperties"
                    }
                }
            }
        }
    };
    var DeviceTwinInfoX509Thumbprint = {
        serializedName: "DeviceTwinInfo_x509Thumbprint",
        type: {
            name: "Composite",
            className: "DeviceTwinInfoX509Thumbprint",
            modelProperties: {
                primaryThumbprint: {
                    serializedName: "primaryThumbprint",
                    type: {
                        name: "String"
                    }
                },
                secondaryThumbprint: {
                    serializedName: "secondaryThumbprint",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DeviceTwinInfo = {
        serializedName: "DeviceTwinInfo",
        type: {
            name: "Composite",
            className: "DeviceTwinInfo",
            modelProperties: {
                authenticationType: {
                    serializedName: "authenticationType",
                    type: {
                        name: "String"
                    }
                },
                cloudToDeviceMessageCount: {
                    serializedName: "cloudToDeviceMessageCount",
                    type: {
                        name: "Number"
                    }
                },
                connectionState: {
                    serializedName: "connectionState",
                    type: {
                        name: "String"
                    }
                },
                deviceId: {
                    serializedName: "deviceId",
                    type: {
                        name: "String"
                    }
                },
                etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastActivityTime: {
                    serializedName: "lastActivityTime",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "DeviceTwinInfoProperties"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                statusUpdateTime: {
                    serializedName: "statusUpdateTime",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    serializedName: "version",
                    type: {
                        name: "Number"
                    }
                },
                x509Thumbprint: {
                    serializedName: "x509Thumbprint",
                    type: {
                        name: "Composite",
                        className: "DeviceTwinInfoX509Thumbprint"
                    }
                }
            }
        }
    };
    var DeviceConnectionStateEventInfo = {
        serializedName: "DeviceConnectionStateEventInfo",
        type: {
            name: "Composite",
            className: "DeviceConnectionStateEventInfo",
            modelProperties: {
                sequenceNumber: {
                    serializedName: "sequenceNumber",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerRegistryEventData = {
        serializedName: "ContainerRegistryEventData",
        type: {
            name: "Composite",
            className: "ContainerRegistryEventData",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                timestamp: {
                    serializedName: "timestamp",
                    type: {
                        name: "DateTime"
                    }
                },
                action: {
                    serializedName: "action",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    serializedName: "target",
                    type: {
                        name: "Composite",
                        className: "ContainerRegistryEventTarget"
                    }
                },
                request: {
                    serializedName: "request",
                    type: {
                        name: "Composite",
                        className: "ContainerRegistryEventRequest"
                    }
                },
                actor: {
                    serializedName: "actor",
                    type: {
                        name: "Composite",
                        className: "ContainerRegistryEventActor"
                    }
                },
                source: {
                    serializedName: "source",
                    type: {
                        name: "Composite",
                        className: "ContainerRegistryEventSource"
                    }
                }
            }
        }
    };
    var ContainerRegistryImagePushedEventData = {
        serializedName: "ContainerRegistryImagePushedEventData",
        type: {
            name: "Composite",
            className: "ContainerRegistryImagePushedEventData",
            modelProperties: __assign({}, ContainerRegistryEventData.type.modelProperties)
        }
    };
    var ContainerRegistryImageDeletedEventData = {
        serializedName: "ContainerRegistryImageDeletedEventData",
        type: {
            name: "Composite",
            className: "ContainerRegistryImageDeletedEventData",
            modelProperties: __assign({}, ContainerRegistryEventData.type.modelProperties)
        }
    };
    var ContainerRegistryEventTarget = {
        serializedName: "ContainerRegistryEventTarget",
        type: {
            name: "Composite",
            className: "ContainerRegistryEventTarget",
            modelProperties: {
                mediaType: {
                    serializedName: "mediaType",
                    type: {
                        name: "String"
                    }
                },
                size: {
                    serializedName: "size",
                    type: {
                        name: "Number"
                    }
                },
                digest: {
                    serializedName: "digest",
                    type: {
                        name: "String"
                    }
                },
                length: {
                    serializedName: "length",
                    type: {
                        name: "Number"
                    }
                },
                repository: {
                    serializedName: "repository",
                    type: {
                        name: "String"
                    }
                },
                url: {
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                },
                tag: {
                    serializedName: "tag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerRegistryEventRequest = {
        serializedName: "ContainerRegistryEventRequest",
        type: {
            name: "Composite",
            className: "ContainerRegistryEventRequest",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                addr: {
                    serializedName: "addr",
                    type: {
                        name: "String"
                    }
                },
                host: {
                    serializedName: "host",
                    type: {
                        name: "String"
                    }
                },
                method: {
                    serializedName: "method",
                    type: {
                        name: "String"
                    }
                },
                useragent: {
                    serializedName: "useragent",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerRegistryEventActor = {
        serializedName: "ContainerRegistryEventActor",
        type: {
            name: "Composite",
            className: "ContainerRegistryEventActor",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerRegistryEventSource = {
        serializedName: "ContainerRegistryEventSource",
        type: {
            name: "Composite",
            className: "ContainerRegistryEventSource",
            modelProperties: {
                addr: {
                    serializedName: "addr",
                    type: {
                        name: "String"
                    }
                },
                instanceID: {
                    serializedName: "instanceID",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServiceBusActiveMessagesAvailableWithNoListenersEventData = {
        serializedName: "ServiceBusActiveMessagesAvailableWithNoListenersEventData",
        type: {
            name: "Composite",
            className: "ServiceBusActiveMessagesAvailableWithNoListenersEventData",
            modelProperties: {
                namespaceName: {
                    serializedName: "namespaceName",
                    type: {
                        name: "String"
                    }
                },
                requestUri: {
                    serializedName: "requestUri",
                    type: {
                        name: "String"
                    }
                },
                entityType: {
                    serializedName: "entityType",
                    type: {
                        name: "String"
                    }
                },
                queueName: {
                    serializedName: "queueName",
                    type: {
                        name: "String"
                    }
                },
                topicName: {
                    serializedName: "topicName",
                    type: {
                        name: "String"
                    }
                },
                subscriptionName: {
                    serializedName: "subscriptionName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServiceBusDeadletterMessagesAvailableWithNoListenersEventData = {
        serializedName: "ServiceBusDeadletterMessagesAvailableWithNoListenersEventData",
        type: {
            name: "Composite",
            className: "ServiceBusDeadletterMessagesAvailableWithNoListenersEventData",
            modelProperties: {
                namespaceName: {
                    serializedName: "namespaceName",
                    type: {
                        name: "String"
                    }
                },
                requestUri: {
                    serializedName: "requestUri",
                    type: {
                        name: "String"
                    }
                },
                entityType: {
                    serializedName: "entityType",
                    type: {
                        name: "String"
                    }
                },
                queueName: {
                    serializedName: "queueName",
                    type: {
                        name: "String"
                    }
                },
                topicName: {
                    serializedName: "topicName",
                    type: {
                        name: "String"
                    }
                },
                subscriptionName: {
                    serializedName: "subscriptionName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MediaJobStateChangeEventData = {
        serializedName: "MediaJobStateChangeEventData",
        type: {
            name: "Composite",
            className: "MediaJobStateChangeEventData",
            modelProperties: {
                previousState: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "previousState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Canceled",
                            "Canceling",
                            "Error",
                            "Finished",
                            "Processing",
                            "Queued",
                            "Scheduled"
                        ]
                    }
                },
                state: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Canceled",
                            "Canceling",
                            "Error",
                            "Finished",
                            "Processing",
                            "Queued",
                            "Scheduled"
                        ]
                    }
                }
            }
        }
    };

    var Mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        StorageBlobCreatedEventData: StorageBlobCreatedEventData,
        StorageBlobDeletedEventData: StorageBlobDeletedEventData,
        EventHubCaptureFileCreatedEventData: EventHubCaptureFileCreatedEventData,
        ResourceWriteSuccessData: ResourceWriteSuccessData,
        ResourceWriteFailureData: ResourceWriteFailureData,
        ResourceWriteCancelData: ResourceWriteCancelData,
        ResourceDeleteSuccessData: ResourceDeleteSuccessData,
        ResourceDeleteFailureData: ResourceDeleteFailureData,
        ResourceDeleteCancelData: ResourceDeleteCancelData,
        ResourceActionSuccessData: ResourceActionSuccessData,
        ResourceActionFailureData: ResourceActionFailureData,
        ResourceActionCancelData: ResourceActionCancelData,
        EventGridEvent: EventGridEvent,
        SubscriptionValidationEventData: SubscriptionValidationEventData,
        SubscriptionValidationResponse: SubscriptionValidationResponse,
        SubscriptionDeletedEventData: SubscriptionDeletedEventData,
        DeviceLifeCycleEventProperties: DeviceLifeCycleEventProperties,
        IotHubDeviceCreatedEventData: IotHubDeviceCreatedEventData,
        IotHubDeviceDeletedEventData: IotHubDeviceDeletedEventData,
        DeviceConnectionStateEventProperties: DeviceConnectionStateEventProperties,
        IotHubDeviceConnectedEventData: IotHubDeviceConnectedEventData,
        IotHubDeviceDisconnectedEventData: IotHubDeviceDisconnectedEventData,
        DeviceTwinMetadata: DeviceTwinMetadata,
        DeviceTwinProperties: DeviceTwinProperties,
        DeviceTwinInfoProperties: DeviceTwinInfoProperties,
        DeviceTwinInfoX509Thumbprint: DeviceTwinInfoX509Thumbprint,
        DeviceTwinInfo: DeviceTwinInfo,
        DeviceConnectionStateEventInfo: DeviceConnectionStateEventInfo,
        ContainerRegistryEventData: ContainerRegistryEventData,
        ContainerRegistryImagePushedEventData: ContainerRegistryImagePushedEventData,
        ContainerRegistryImageDeletedEventData: ContainerRegistryImageDeletedEventData,
        ContainerRegistryEventTarget: ContainerRegistryEventTarget,
        ContainerRegistryEventRequest: ContainerRegistryEventRequest,
        ContainerRegistryEventActor: ContainerRegistryEventActor,
        ContainerRegistryEventSource: ContainerRegistryEventSource,
        ServiceBusActiveMessagesAvailableWithNoListenersEventData: ServiceBusActiveMessagesAvailableWithNoListenersEventData,
        ServiceBusDeadletterMessagesAvailableWithNoListenersEventData: ServiceBusDeadletterMessagesAvailableWithNoListenersEventData,
        MediaJobStateChangeEventData: MediaJobStateChangeEventData
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var topicHostname = {
        parameterPath: "topicHostname",
        mapper: {
            required: true,
            serializedName: "topicHostname",
            defaultValue: '',
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/eventgrid";
    var packageVersion = "1.0.0";
    var EventGridClientContext = /** @class */ (function (_super) {
        __extends(EventGridClientContext, _super);
        /**
         * Initializes a new instance of the EventGridClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param [options] The parameter options
         */
        function EventGridClientContext(credentials, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2018-01-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = 'https://{topicHostname}';
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return EventGridClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var EventGridClient = /** @class */ (function (_super) {
        __extends(EventGridClient, _super);
        /**
         * Initializes a new instance of the EventGridClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param [options] The parameter options
         */
        function EventGridClient(credentials, options) {
            return _super.call(this, credentials, options) || this;
        }
        EventGridClient.prototype.publishEvents = function (topicHostname$$1, events, options, callback) {
            return this.sendOperationRequest({
                topicHostname: topicHostname$$1,
                events: events,
                options: options
            }, publishEventsOperationSpec, callback);
        };
        return EventGridClient;
    }(EventGridClientContext));
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var publishEventsOperationSpec = {
        httpMethod: "POST",
        path: "api/events",
        urlParameters: [
            topicHostname
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "events",
            mapper: {
                required: true,
                serializedName: "events",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EventGridEvent"
                        }
                    }
                }
            }
        },
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    exports.EventGridClient = EventGridClient;
    exports.EventGridClientContext = EventGridClientContext;
    exports.EventGridModels = index;
    exports.EventGridMappers = Mappers;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=eventgrid.js.map
