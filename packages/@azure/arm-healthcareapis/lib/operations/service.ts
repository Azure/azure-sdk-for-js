/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/serviceMappers";
import * as Parameters from "../models/parameters";
import { HealthcareApisManagementClientContext } from "../healthcareApisManagementClientContext";

/** Class representing a Service. */
export class Service {
  private readonly client: HealthcareApisManagementClientContext;

  /**
   * Create a Service.
   * @param {HealthcareApisManagementClientContext} client Reference to the service client.
   */
  constructor(client: HealthcareApisManagementClientContext) {
    this.client = client;
  }

  /**
   * Get the metadata of a service instance.
   * @param resourceGroupName The name of the resource group that contains the service instance.
   * @param resourceName The name of the service instance.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceGetResponse>
   */
  get(resourceGroupName: string, resourceName: string, options?: msRest.RequestOptionsBase): Promise<Models.ServiceGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the service instance.
   * @param resourceName The name of the service instance.
   * @param callback The callback
   */
  get(resourceGroupName: string, resourceName: string, callback: msRest.ServiceCallback<Models.ServicesDescription>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the service instance.
   * @param resourceName The name of the service instance.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, resourceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ServicesDescription>): void;
  get(resourceGroupName: string, resourceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ServicesDescription>, callback?: msRest.ServiceCallback<Models.ServicesDescription>): Promise<Models.ServiceGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ServiceGetResponse>;
  }

  /**
   * Create or update the metadata of a service instance.
   * @param resourceGroupName The name of the resource group that contains the service instance.
   * @param resourceName The name of the service instance.
   * @param serviceDescription The service instance metadata.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, resourceName: string, serviceDescription: Models.ServicesDescription, options?: msRest.RequestOptionsBase): Promise<Models.ServiceCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,resourceName,serviceDescription,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ServiceCreateOrUpdateResponse>;
  }

  /**
   * Update the metadata of a service instance.
   * @param resourceGroupName The name of the resource group that contains the service instance.
   * @param resourceName The name of the service instance.
   * @param servicePatchDescription The service instance metadata and security metadata.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceUpdateResponse>
   */
  update(resourceGroupName: string, resourceName: string, servicePatchDescription: Models.ServicesPatchDescription, options?: msRest.RequestOptionsBase): Promise<Models.ServiceUpdateResponse> {
    return this.beginUpdate(resourceGroupName,resourceName,servicePatchDescription,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ServiceUpdateResponse>;
  }

  /**
   * Delete a service instance.
   * @param resourceGroupName The name of the resource group that contains the service instance.
   * @param resourceName The name of the service instance.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, resourceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,resourceName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Check if a service instance name is available.
   * @param checkNameAvailabilityInputs Set the name parameter in the CheckNameAvailabilityParameters
   * structure to the name of the service instance to check.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceCheckNameAvailabilityResponse>
   */
  checkNameAvailability(checkNameAvailabilityInputs: Models.CheckNameAvailabilityParameters, options?: msRest.RequestOptionsBase): Promise<Models.ServiceCheckNameAvailabilityResponse>;
  /**
   * @param checkNameAvailabilityInputs Set the name parameter in the CheckNameAvailabilityParameters
   * structure to the name of the service instance to check.
   * @param callback The callback
   */
  checkNameAvailability(checkNameAvailabilityInputs: Models.CheckNameAvailabilityParameters, callback: msRest.ServiceCallback<Models.ServicesNameAvailabilityInfo>): void;
  /**
   * @param checkNameAvailabilityInputs Set the name parameter in the CheckNameAvailabilityParameters
   * structure to the name of the service instance to check.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkNameAvailability(checkNameAvailabilityInputs: Models.CheckNameAvailabilityParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ServicesNameAvailabilityInfo>): void;
  checkNameAvailability(checkNameAvailabilityInputs: Models.CheckNameAvailabilityParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ServicesNameAvailabilityInfo>, callback?: msRest.ServiceCallback<Models.ServicesNameAvailabilityInfo>): Promise<Models.ServiceCheckNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      {
        checkNameAvailabilityInputs,
        options
      },
      checkNameAvailabilityOperationSpec,
      callback) as Promise<Models.ServiceCheckNameAvailabilityResponse>;
  }

  /**
   * Moves resources to another subscription and/or resource group.
   * @param resourceGroupName The name of the resource group that contains the service instance.
   * @param moveResourcesInputs Set the move resource structure to the name of the service instance
   * to check.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  moveResources(resourceGroupName: string, moveResourcesInputs: Models.MoveResourcesParameters, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the service instance.
   * @param moveResourcesInputs Set the move resource structure to the name of the service instance
   * to check.
   * @param callback The callback
   */
  moveResources(resourceGroupName: string, moveResourcesInputs: Models.MoveResourcesParameters, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the service instance.
   * @param moveResourcesInputs Set the move resource structure to the name of the service instance
   * to check.
   * @param options The optional parameters
   * @param callback The callback
   */
  moveResources(resourceGroupName: string, moveResourcesInputs: Models.MoveResourcesParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  moveResources(resourceGroupName: string, moveResourcesInputs: Models.MoveResourcesParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        moveResourcesInputs,
        options
      },
      moveResourcesOperationSpec,
      callback);
  }

  /**
   * Create or update the metadata of a service instance.
   * @param resourceGroupName The name of the resource group that contains the service instance.
   * @param resourceName The name of the service instance.
   * @param serviceDescription The service instance metadata.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, resourceName: string, serviceDescription: Models.ServicesDescription, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        resourceName,
        serviceDescription,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Update the metadata of a service instance.
   * @param resourceGroupName The name of the resource group that contains the service instance.
   * @param resourceName The name of the service instance.
   * @param servicePatchDescription The service instance metadata and security metadata.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(resourceGroupName: string, resourceName: string, servicePatchDescription: Models.ServicesPatchDescription, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        resourceName,
        servicePatchDescription,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Delete a service instance.
   * @param resourceGroupName The name of the resource group that contains the service instance.
   * @param resourceName The name of the service instance.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, resourceName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        resourceName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HealthcareApis/services/{resourceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ServicesDescription
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const checkNameAvailabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.HealthcareApis/checkNameAvailability",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "checkNameAvailabilityInputs",
    mapper: {
      ...Mappers.CheckNameAvailabilityParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ServicesNameAvailabilityInfo
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const moveResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HealthcareApis/moveResources",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "moveResourcesInputs",
    mapper: {
      ...Mappers.MoveResourcesParameters,
      required: true
    }
  },
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HealthcareApis/services/{resourceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "serviceDescription",
    mapper: {
      ...Mappers.ServicesDescription,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ServicesDescription
    },
    201: {
      bodyMapper: Mappers.ServicesDescription
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HealthcareApis/services/{resourceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "servicePatchDescription",
    mapper: {
      ...Mappers.ServicesPatchDescription,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ServicesDescription
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HealthcareApis/services/{resourceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};
