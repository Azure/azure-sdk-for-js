/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmScheduler = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for SkuDefinition.
     * Possible values include: 'Standard', 'Free', 'P10Premium', 'P20Premium'
     * @readonly
     * @enum {string}
     */
    var SkuDefinition;
    (function (SkuDefinition) {
        SkuDefinition["Standard"] = "Standard";
        SkuDefinition["Free"] = "Free";
        SkuDefinition["P10Premium"] = "P10Premium";
        SkuDefinition["P20Premium"] = "P20Premium";
    })(SkuDefinition || (SkuDefinition = {}));
    /**
     * Defines values for JobCollectionState.
     * Possible values include: 'Enabled', 'Disabled', 'Suspended', 'Deleted'
     * @readonly
     * @enum {string}
     */
    var JobCollectionState;
    (function (JobCollectionState) {
        JobCollectionState["Enabled"] = "Enabled";
        JobCollectionState["Disabled"] = "Disabled";
        JobCollectionState["Suspended"] = "Suspended";
        JobCollectionState["Deleted"] = "Deleted";
    })(JobCollectionState || (JobCollectionState = {}));
    /**
     * Defines values for RecurrenceFrequency.
     * Possible values include: 'Minute', 'Hour', 'Day', 'Week', 'Month'
     * @readonly
     * @enum {string}
     */
    var RecurrenceFrequency;
    (function (RecurrenceFrequency) {
        RecurrenceFrequency["Minute"] = "Minute";
        RecurrenceFrequency["Hour"] = "Hour";
        RecurrenceFrequency["Day"] = "Day";
        RecurrenceFrequency["Week"] = "Week";
        RecurrenceFrequency["Month"] = "Month";
    })(RecurrenceFrequency || (RecurrenceFrequency = {}));
    /**
     * Defines values for JobActionType.
     * Possible values include: 'Http', 'Https', 'StorageQueue', 'ServiceBusQueue',
     * 'ServiceBusTopic'
     * @readonly
     * @enum {string}
     */
    var JobActionType;
    (function (JobActionType) {
        JobActionType["Http"] = "Http";
        JobActionType["Https"] = "Https";
        JobActionType["StorageQueue"] = "StorageQueue";
        JobActionType["ServiceBusQueue"] = "ServiceBusQueue";
        JobActionType["ServiceBusTopic"] = "ServiceBusTopic";
    })(JobActionType || (JobActionType = {}));
    /**
     * Defines values for RetryType.
     * Possible values include: 'None', 'Fixed'
     * @readonly
     * @enum {string}
     */
    var RetryType;
    (function (RetryType) {
        RetryType["None"] = "None";
        RetryType["Fixed"] = "Fixed";
    })(RetryType || (RetryType = {}));
    /**
     * Defines values for DayOfWeek.
     * Possible values include: 'Sunday', 'Monday', 'Tuesday', 'Wednesday',
     * 'Thursday', 'Friday', 'Saturday'
     * @readonly
     * @enum {string}
     */
    var DayOfWeek;
    (function (DayOfWeek) {
        DayOfWeek["Sunday"] = "Sunday";
        DayOfWeek["Monday"] = "Monday";
        DayOfWeek["Tuesday"] = "Tuesday";
        DayOfWeek["Wednesday"] = "Wednesday";
        DayOfWeek["Thursday"] = "Thursday";
        DayOfWeek["Friday"] = "Friday";
        DayOfWeek["Saturday"] = "Saturday";
    })(DayOfWeek || (DayOfWeek = {}));
    /**
     * Defines values for JobScheduleDay.
     * Possible values include: 'Monday', 'Tuesday', 'Wednesday', 'Thursday',
     * 'Friday', 'Saturday', 'Sunday'
     * @readonly
     * @enum {string}
     */
    var JobScheduleDay;
    (function (JobScheduleDay) {
        JobScheduleDay["Monday"] = "Monday";
        JobScheduleDay["Tuesday"] = "Tuesday";
        JobScheduleDay["Wednesday"] = "Wednesday";
        JobScheduleDay["Thursday"] = "Thursday";
        JobScheduleDay["Friday"] = "Friday";
        JobScheduleDay["Saturday"] = "Saturday";
        JobScheduleDay["Sunday"] = "Sunday";
    })(JobScheduleDay || (JobScheduleDay = {}));
    /**
     * Defines values for JobState.
     * Possible values include: 'Enabled', 'Disabled', 'Faulted', 'Completed'
     * @readonly
     * @enum {string}
     */
    var JobState;
    (function (JobState) {
        JobState["Enabled"] = "Enabled";
        JobState["Disabled"] = "Disabled";
        JobState["Faulted"] = "Faulted";
        JobState["Completed"] = "Completed";
    })(JobState || (JobState = {}));
    /**
     * Defines values for JobHistoryActionName.
     * Possible values include: 'MainAction', 'ErrorAction'
     * @readonly
     * @enum {string}
     */
    var JobHistoryActionName;
    (function (JobHistoryActionName) {
        JobHistoryActionName["MainAction"] = "MainAction";
        JobHistoryActionName["ErrorAction"] = "ErrorAction";
    })(JobHistoryActionName || (JobHistoryActionName = {}));
    /**
     * Defines values for JobExecutionStatus.
     * Possible values include: 'Completed', 'Failed', 'Postponed'
     * @readonly
     * @enum {string}
     */
    var JobExecutionStatus;
    (function (JobExecutionStatus) {
        JobExecutionStatus["Completed"] = "Completed";
        JobExecutionStatus["Failed"] = "Failed";
        JobExecutionStatus["Postponed"] = "Postponed";
    })(JobExecutionStatus || (JobExecutionStatus = {}));
    /**
     * Defines values for ServiceBusAuthenticationType.
     * Possible values include: 'NotSpecified', 'SharedAccessKey'
     * @readonly
     * @enum {string}
     */
    var ServiceBusAuthenticationType;
    (function (ServiceBusAuthenticationType) {
        ServiceBusAuthenticationType["NotSpecified"] = "NotSpecified";
        ServiceBusAuthenticationType["SharedAccessKey"] = "SharedAccessKey";
    })(ServiceBusAuthenticationType || (ServiceBusAuthenticationType = {}));
    /**
     * Defines values for ServiceBusTransportType.
     * Possible values include: 'NotSpecified', 'NetMessaging', 'AMQP'
     * @readonly
     * @enum {string}
     */
    var ServiceBusTransportType;
    (function (ServiceBusTransportType) {
        ServiceBusTransportType["NotSpecified"] = "NotSpecified";
        ServiceBusTransportType["NetMessaging"] = "NetMessaging";
        ServiceBusTransportType["AMQP"] = "AMQP";
    })(ServiceBusTransportType || (ServiceBusTransportType = {}));

    var index = /*#__PURE__*/Object.freeze({
        get SkuDefinition () { return SkuDefinition; },
        get JobCollectionState () { return JobCollectionState; },
        get RecurrenceFrequency () { return RecurrenceFrequency; },
        get JobActionType () { return JobActionType; },
        get RetryType () { return RetryType; },
        get DayOfWeek () { return DayOfWeek; },
        get JobScheduleDay () { return JobScheduleDay; },
        get JobState () { return JobState; },
        get JobHistoryActionName () { return JobHistoryActionName; },
        get JobExecutionStatus () { return JobExecutionStatus; },
        get ServiceBusAuthenticationType () { return ServiceBusAuthenticationType; },
        get ServiceBusTransportType () { return ServiceBusTransportType; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var Sku = {
        serializedName: "Sku",
        type: {
            name: "Composite",
            className: "Sku",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Standard",
                            "Free",
                            "P10Premium",
                            "P20Premium"
                        ]
                    }
                }
            }
        }
    };
    var JobMaxRecurrence = {
        serializedName: "JobMaxRecurrence",
        type: {
            name: "Composite",
            className: "JobMaxRecurrence",
            modelProperties: {
                frequency: {
                    serializedName: "frequency",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Minute",
                            "Hour",
                            "Day",
                            "Week",
                            "Month"
                        ]
                    }
                },
                interval: {
                    serializedName: "interval",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var JobCollectionQuota = {
        serializedName: "JobCollectionQuota",
        type: {
            name: "Composite",
            className: "JobCollectionQuota",
            modelProperties: {
                maxJobCount: {
                    serializedName: "maxJobCount",
                    type: {
                        name: "Number"
                    }
                },
                maxJobOccurrence: {
                    serializedName: "maxJobOccurrence",
                    type: {
                        name: "Number"
                    }
                },
                maxRecurrence: {
                    serializedName: "maxRecurrence",
                    type: {
                        name: "Composite",
                        className: "JobMaxRecurrence"
                    }
                }
            }
        }
    };
    var JobCollectionProperties = {
        serializedName: "JobCollectionProperties",
        type: {
            name: "Composite",
            className: "JobCollectionProperties",
            modelProperties: {
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                state: {
                    serializedName: "state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled",
                            "Suspended",
                            "Deleted"
                        ]
                    }
                },
                quota: {
                    serializedName: "quota",
                    type: {
                        name: "Composite",
                        className: "JobCollectionQuota"
                    }
                }
            }
        }
    };
    var JobCollectionDefinition = {
        serializedName: "JobCollectionDefinition",
        type: {
            name: "Composite",
            className: "JobCollectionDefinition",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "JobCollectionProperties"
                    }
                }
            }
        }
    };
    var HttpAuthentication = {
        serializedName: "HttpAuthentication",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "type",
                clientName: "type"
            },
            uberParent: "HttpAuthentication",
            className: "HttpAuthentication",
            modelProperties: {
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HttpRequest = {
        serializedName: "HttpRequest",
        type: {
            name: "Composite",
            className: "HttpRequest",
            modelProperties: {
                authentication: {
                    serializedName: "authentication",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "HttpAuthentication",
                        className: "HttpAuthentication"
                    }
                },
                uri: {
                    serializedName: "uri",
                    type: {
                        name: "String"
                    }
                },
                method: {
                    serializedName: "method",
                    type: {
                        name: "String"
                    }
                },
                body: {
                    serializedName: "body",
                    type: {
                        name: "String"
                    }
                },
                headers: {
                    serializedName: "headers",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var StorageQueueMessage = {
        serializedName: "StorageQueueMessage",
        type: {
            name: "Composite",
            className: "StorageQueueMessage",
            modelProperties: {
                storageAccount: {
                    serializedName: "storageAccount",
                    type: {
                        name: "String"
                    }
                },
                queueName: {
                    serializedName: "queueName",
                    type: {
                        name: "String"
                    }
                },
                sasToken: {
                    serializedName: "sasToken",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServiceBusMessage = {
        serializedName: "ServiceBusMessage",
        type: {
            name: "Composite",
            className: "ServiceBusMessage",
            modelProperties: {
                authentication: {
                    serializedName: "authentication",
                    type: {
                        name: "Composite",
                        className: "ServiceBusAuthentication"
                    }
                },
                brokeredMessageProperties: {
                    serializedName: "brokeredMessageProperties",
                    type: {
                        name: "Composite",
                        className: "ServiceBusBrokeredMessageProperties"
                    }
                },
                customMessageProperties: {
                    serializedName: "customMessageProperties",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                namespace: {
                    serializedName: "namespace",
                    type: {
                        name: "String"
                    }
                },
                transportType: {
                    serializedName: "transportType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "NotSpecified",
                            "NetMessaging",
                            "AMQP"
                        ]
                    }
                }
            }
        }
    };
    var ServiceBusQueueMessage = {
        serializedName: "ServiceBusQueueMessage",
        type: {
            name: "Composite",
            className: "ServiceBusQueueMessage",
            modelProperties: __assign({}, ServiceBusMessage.type.modelProperties, { queueName: {
                    serializedName: "queueName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ServiceBusTopicMessage = {
        serializedName: "ServiceBusTopicMessage",
        type: {
            name: "Composite",
            className: "ServiceBusTopicMessage",
            modelProperties: __assign({}, ServiceBusMessage.type.modelProperties, { topicPath: {
                    serializedName: "topicPath",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RetryPolicy = {
        serializedName: "RetryPolicy",
        type: {
            name: "Composite",
            className: "RetryPolicy",
            modelProperties: {
                retryType: {
                    serializedName: "retryType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "Fixed"
                        ]
                    }
                },
                retryInterval: {
                    serializedName: "retryInterval",
                    type: {
                        name: "TimeSpan"
                    }
                },
                retryCount: {
                    serializedName: "retryCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var JobErrorAction = {
        serializedName: "JobErrorAction",
        type: {
            name: "Composite",
            className: "JobErrorAction",
            modelProperties: {
                type: {
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Http",
                            "Https",
                            "StorageQueue",
                            "ServiceBusQueue",
                            "ServiceBusTopic"
                        ]
                    }
                },
                request: {
                    serializedName: "request",
                    type: {
                        name: "Composite",
                        className: "HttpRequest"
                    }
                },
                queueMessage: {
                    serializedName: "queueMessage",
                    type: {
                        name: "Composite",
                        className: "StorageQueueMessage"
                    }
                },
                serviceBusQueueMessage: {
                    serializedName: "serviceBusQueueMessage",
                    type: {
                        name: "Composite",
                        className: "ServiceBusQueueMessage"
                    }
                },
                serviceBusTopicMessage: {
                    serializedName: "serviceBusTopicMessage",
                    type: {
                        name: "Composite",
                        className: "ServiceBusTopicMessage"
                    }
                },
                retryPolicy: {
                    serializedName: "retryPolicy",
                    type: {
                        name: "Composite",
                        className: "RetryPolicy"
                    }
                }
            }
        }
    };
    var JobAction = {
        serializedName: "JobAction",
        type: {
            name: "Composite",
            className: "JobAction",
            modelProperties: {
                type: {
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Http",
                            "Https",
                            "StorageQueue",
                            "ServiceBusQueue",
                            "ServiceBusTopic"
                        ]
                    }
                },
                request: {
                    serializedName: "request",
                    type: {
                        name: "Composite",
                        className: "HttpRequest"
                    }
                },
                queueMessage: {
                    serializedName: "queueMessage",
                    type: {
                        name: "Composite",
                        className: "StorageQueueMessage"
                    }
                },
                serviceBusQueueMessage: {
                    serializedName: "serviceBusQueueMessage",
                    type: {
                        name: "Composite",
                        className: "ServiceBusQueueMessage"
                    }
                },
                serviceBusTopicMessage: {
                    serializedName: "serviceBusTopicMessage",
                    type: {
                        name: "Composite",
                        className: "ServiceBusTopicMessage"
                    }
                },
                retryPolicy: {
                    serializedName: "retryPolicy",
                    type: {
                        name: "Composite",
                        className: "RetryPolicy"
                    }
                },
                errorAction: {
                    serializedName: "errorAction",
                    type: {
                        name: "Composite",
                        className: "JobErrorAction"
                    }
                }
            }
        }
    };
    var JobRecurrenceScheduleMonthlyOccurrence = {
        serializedName: "JobRecurrenceScheduleMonthlyOccurrence",
        type: {
            name: "Composite",
            className: "JobRecurrenceScheduleMonthlyOccurrence",
            modelProperties: {
                day: {
                    serializedName: "day",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Monday",
                            "Tuesday",
                            "Wednesday",
                            "Thursday",
                            "Friday",
                            "Saturday",
                            "Sunday"
                        ]
                    }
                },
                occurrence: {
                    serializedName: "Occurrence",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var JobRecurrenceSchedule = {
        serializedName: "JobRecurrenceSchedule",
        type: {
            name: "Composite",
            className: "JobRecurrenceSchedule",
            modelProperties: {
                weekDays: {
                    serializedName: "weekDays",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Enum",
                                allowedValues: [
                                    "Sunday",
                                    "Monday",
                                    "Tuesday",
                                    "Wednesday",
                                    "Thursday",
                                    "Friday",
                                    "Saturday"
                                ]
                            }
                        }
                    }
                },
                hours: {
                    serializedName: "hours",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                },
                minutes: {
                    serializedName: "minutes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                },
                monthDays: {
                    serializedName: "monthDays",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                },
                monthlyOccurrences: {
                    serializedName: "monthlyOccurrences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobRecurrenceScheduleMonthlyOccurrence"
                            }
                        }
                    }
                }
            }
        }
    };
    var JobRecurrence = {
        serializedName: "JobRecurrence",
        type: {
            name: "Composite",
            className: "JobRecurrence",
            modelProperties: {
                frequency: {
                    serializedName: "frequency",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Minute",
                            "Hour",
                            "Day",
                            "Week",
                            "Month"
                        ]
                    }
                },
                interval: {
                    serializedName: "interval",
                    type: {
                        name: "Number"
                    }
                },
                count: {
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                },
                endTime: {
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                schedule: {
                    serializedName: "schedule",
                    type: {
                        name: "Composite",
                        className: "JobRecurrenceSchedule"
                    }
                }
            }
        }
    };
    var JobStatus = {
        serializedName: "JobStatus",
        type: {
            name: "Composite",
            className: "JobStatus",
            modelProperties: {
                executionCount: {
                    readOnly: true,
                    serializedName: "executionCount",
                    type: {
                        name: "Number"
                    }
                },
                failureCount: {
                    readOnly: true,
                    serializedName: "failureCount",
                    type: {
                        name: "Number"
                    }
                },
                faultedCount: {
                    readOnly: true,
                    serializedName: "faultedCount",
                    type: {
                        name: "Number"
                    }
                },
                lastExecutionTime: {
                    readOnly: true,
                    serializedName: "lastExecutionTime",
                    type: {
                        name: "DateTime"
                    }
                },
                nextExecutionTime: {
                    readOnly: true,
                    serializedName: "nextExecutionTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var JobProperties = {
        serializedName: "JobProperties",
        type: {
            name: "Composite",
            className: "JobProperties",
            modelProperties: {
                startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                action: {
                    serializedName: "action",
                    type: {
                        name: "Composite",
                        className: "JobAction"
                    }
                },
                recurrence: {
                    serializedName: "recurrence",
                    type: {
                        name: "Composite",
                        className: "JobRecurrence"
                    }
                },
                state: {
                    serializedName: "state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled",
                            "Faulted",
                            "Completed"
                        ]
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Composite",
                        className: "JobStatus"
                    }
                }
            }
        }
    };
    var JobDefinition = {
        serializedName: "JobDefinition",
        type: {
            name: "Composite",
            className: "JobDefinition",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "JobProperties"
                    }
                }
            }
        }
    };
    var JobHistoryDefinitionProperties = {
        serializedName: "JobHistoryDefinitionProperties",
        type: {
            name: "Composite",
            className: "JobHistoryDefinitionProperties",
            modelProperties: {
                startTime: {
                    readOnly: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    readOnly: true,
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                expectedExecutionTime: {
                    readOnly: true,
                    serializedName: "expectedExecutionTime",
                    type: {
                        name: "DateTime"
                    }
                },
                actionName: {
                    readOnly: true,
                    serializedName: "actionName",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "MainAction",
                            "ErrorAction"
                        ]
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Completed",
                            "Failed",
                            "Postponed"
                        ]
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                retryCount: {
                    readOnly: true,
                    serializedName: "retryCount",
                    type: {
                        name: "Number"
                    }
                },
                repeatCount: {
                    readOnly: true,
                    serializedName: "repeatCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var JobHistoryDefinition = {
        serializedName: "JobHistoryDefinition",
        type: {
            name: "Composite",
            className: "JobHistoryDefinition",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    readOnly: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "JobHistoryDefinitionProperties"
                    }
                }
            }
        }
    };
    var ClientCertAuthentication = {
        serializedName: "ClientCertificate",
        type: {
            name: "Composite",
            polymorphicDiscriminator: HttpAuthentication.type.polymorphicDiscriminator,
            uberParent: "HttpAuthentication",
            className: "ClientCertAuthentication",
            modelProperties: __assign({}, HttpAuthentication.type.modelProperties, { password: {
                    serializedName: "password",
                    type: {
                        name: "String"
                    }
                }, pfx: {
                    serializedName: "pfx",
                    type: {
                        name: "String"
                    }
                }, certificateThumbprint: {
                    serializedName: "certificateThumbprint",
                    type: {
                        name: "String"
                    }
                }, certificateExpirationDate: {
                    serializedName: "certificateExpirationDate",
                    type: {
                        name: "DateTime"
                    }
                }, certificateSubjectName: {
                    serializedName: "certificateSubjectName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var BasicAuthentication = {
        serializedName: "Basic",
        type: {
            name: "Composite",
            polymorphicDiscriminator: HttpAuthentication.type.polymorphicDiscriminator,
            uberParent: "HttpAuthentication",
            className: "BasicAuthentication",
            modelProperties: __assign({}, HttpAuthentication.type.modelProperties, { username: {
                    serializedName: "username",
                    type: {
                        name: "String"
                    }
                }, password: {
                    serializedName: "password",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var OAuthAuthentication = {
        serializedName: "ActiveDirectoryOAuth",
        type: {
            name: "Composite",
            polymorphicDiscriminator: HttpAuthentication.type.polymorphicDiscriminator,
            uberParent: "HttpAuthentication",
            className: "OAuthAuthentication",
            modelProperties: __assign({}, HttpAuthentication.type.modelProperties, { secret: {
                    serializedName: "secret",
                    type: {
                        name: "String"
                    }
                }, tenant: {
                    serializedName: "tenant",
                    type: {
                        name: "String"
                    }
                }, audience: {
                    serializedName: "audience",
                    type: {
                        name: "String"
                    }
                }, clientId: {
                    serializedName: "clientId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ServiceBusAuthentication = {
        serializedName: "ServiceBusAuthentication",
        type: {
            name: "Composite",
            className: "ServiceBusAuthentication",
            modelProperties: {
                sasKey: {
                    serializedName: "sasKey",
                    type: {
                        name: "String"
                    }
                },
                sasKeyName: {
                    serializedName: "sasKeyName",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "NotSpecified",
                            "SharedAccessKey"
                        ]
                    }
                }
            }
        }
    };
    var ServiceBusBrokeredMessageProperties = {
        serializedName: "ServiceBusBrokeredMessageProperties",
        type: {
            name: "Composite",
            className: "ServiceBusBrokeredMessageProperties",
            modelProperties: {
                contentType: {
                    serializedName: "contentType",
                    type: {
                        name: "String"
                    }
                },
                correlationId: {
                    serializedName: "correlationId",
                    type: {
                        name: "String"
                    }
                },
                forcePersistence: {
                    serializedName: "forcePersistence",
                    type: {
                        name: "Boolean"
                    }
                },
                label: {
                    serializedName: "label",
                    type: {
                        name: "String"
                    }
                },
                messageId: {
                    serializedName: "messageId",
                    type: {
                        name: "String"
                    }
                },
                partitionKey: {
                    serializedName: "partitionKey",
                    type: {
                        name: "String"
                    }
                },
                replyTo: {
                    serializedName: "replyTo",
                    type: {
                        name: "String"
                    }
                },
                replyToSessionId: {
                    serializedName: "replyToSessionId",
                    type: {
                        name: "String"
                    }
                },
                scheduledEnqueueTimeUtc: {
                    serializedName: "scheduledEnqueueTimeUtc",
                    type: {
                        name: "DateTime"
                    }
                },
                sessionId: {
                    serializedName: "sessionId",
                    type: {
                        name: "String"
                    }
                },
                timeToLive: {
                    serializedName: "timeToLive",
                    type: {
                        name: "TimeSpan"
                    }
                },
                to: {
                    serializedName: "to",
                    type: {
                        name: "String"
                    }
                },
                viaPartitionKey: {
                    serializedName: "viaPartitionKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobStateFilter = {
        serializedName: "JobStateFilter",
        type: {
            name: "Composite",
            className: "JobStateFilter",
            modelProperties: {
                state: {
                    serializedName: "state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled",
                            "Faulted",
                            "Completed"
                        ]
                    }
                }
            }
        }
    };
    var JobHistoryFilter = {
        serializedName: "JobHistoryFilter",
        type: {
            name: "Composite",
            className: "JobHistoryFilter",
            modelProperties: {
                status: {
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Completed",
                            "Failed",
                            "Postponed"
                        ]
                    }
                }
            }
        }
    };
    var JobCollectionListResult = {
        serializedName: "JobCollectionListResult",
        type: {
            name: "Composite",
            className: "JobCollectionListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobCollectionDefinition"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobListResult = {
        serializedName: "JobListResult",
        type: {
            name: "Composite",
            className: "JobListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobDefinition"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobHistoryListResult = {
        serializedName: "JobHistoryListResult",
        type: {
            name: "Composite",
            className: "JobHistoryListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobHistoryDefinition"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var discriminators = {
        'HttpAuthentication': HttpAuthentication,
        'HttpAuthentication.ClientCertificate': ClientCertAuthentication,
        'HttpAuthentication.Basic': BasicAuthentication,
        'HttpAuthentication.ActiveDirectoryOAuth': OAuthAuthentication
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        Sku: Sku,
        JobMaxRecurrence: JobMaxRecurrence,
        JobCollectionQuota: JobCollectionQuota,
        JobCollectionProperties: JobCollectionProperties,
        JobCollectionDefinition: JobCollectionDefinition,
        HttpAuthentication: HttpAuthentication,
        HttpRequest: HttpRequest,
        StorageQueueMessage: StorageQueueMessage,
        ServiceBusMessage: ServiceBusMessage,
        ServiceBusQueueMessage: ServiceBusQueueMessage,
        ServiceBusTopicMessage: ServiceBusTopicMessage,
        RetryPolicy: RetryPolicy,
        JobErrorAction: JobErrorAction,
        JobAction: JobAction,
        JobRecurrenceScheduleMonthlyOccurrence: JobRecurrenceScheduleMonthlyOccurrence,
        JobRecurrenceSchedule: JobRecurrenceSchedule,
        JobRecurrence: JobRecurrence,
        JobStatus: JobStatus,
        JobProperties: JobProperties,
        JobDefinition: JobDefinition,
        JobHistoryDefinitionProperties: JobHistoryDefinitionProperties,
        JobHistoryDefinition: JobHistoryDefinition,
        ClientCertAuthentication: ClientCertAuthentication,
        BasicAuthentication: BasicAuthentication,
        OAuthAuthentication: OAuthAuthentication,
        ServiceBusAuthentication: ServiceBusAuthentication,
        ServiceBusBrokeredMessageProperties: ServiceBusBrokeredMessageProperties,
        JobStateFilter: JobStateFilter,
        JobHistoryFilter: JobHistoryFilter,
        JobCollectionListResult: JobCollectionListResult,
        JobListResult: JobListResult,
        JobHistoryListResult: JobHistoryListResult,
        discriminators: discriminators
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        JobCollectionListResult: JobCollectionListResult,
        JobCollectionDefinition: JobCollectionDefinition,
        JobCollectionProperties: JobCollectionProperties,
        Sku: Sku,
        JobCollectionQuota: JobCollectionQuota,
        JobMaxRecurrence: JobMaxRecurrence,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var filter = {
        parameterPath: [
            "options",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var jobCollectionName = {
        parameterPath: "jobCollectionName",
        mapper: {
            required: true,
            serializedName: "jobCollectionName",
            type: {
                name: "String"
            }
        }
    };
    var jobName = {
        parameterPath: "jobName",
        mapper: {
            required: true,
            serializedName: "jobName",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var skip = {
        parameterPath: [
            "options",
            "skip"
        ],
        mapper: {
            serializedName: "$skip",
            type: {
                name: "Number"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var top = {
        parameterPath: [
            "options",
            "top"
        ],
        mapper: {
            serializedName: "$top",
            constraints: {
                InclusiveMaximum: 100,
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a JobCollections. */
    var JobCollections = /** @class */ (function () {
        /**
         * Create a JobCollections.
         * @param {SchedulerManagementClientContext} client Reference to the service client.
         */
        function JobCollections(client) {
            this.client = client;
        }
        JobCollections.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec, callback);
        };
        JobCollections.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        JobCollections.prototype.get = function (resourceGroupName$$1, jobCollectionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                jobCollectionName: jobCollectionName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        JobCollections.prototype.createOrUpdate = function (resourceGroupName$$1, jobCollectionName$$1, jobCollection, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                jobCollectionName: jobCollectionName$$1,
                jobCollection: jobCollection,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        JobCollections.prototype.patch = function (resourceGroupName$$1, jobCollectionName$$1, jobCollection, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                jobCollectionName: jobCollectionName$$1,
                jobCollection: jobCollection,
                options: options
            }, patchOperationSpec, callback);
        };
        /**
         * Deletes a job collection.
         * @param resourceGroupName The resource group name.
         * @param jobCollectionName The job collection name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        JobCollections.prototype.deleteMethod = function (resourceGroupName$$1, jobCollectionName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, jobCollectionName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Enables all of the jobs in the job collection.
         * @param resourceGroupName The resource group name.
         * @param jobCollectionName The job collection name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        JobCollections.prototype.enable = function (resourceGroupName$$1, jobCollectionName$$1, options) {
            return this.beginEnable(resourceGroupName$$1, jobCollectionName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Disables all of the jobs in the job collection.
         * @param resourceGroupName The resource group name.
         * @param jobCollectionName The job collection name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        JobCollections.prototype.disable = function (resourceGroupName$$1, jobCollectionName$$1, options) {
            return this.beginDisable(resourceGroupName$$1, jobCollectionName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a job collection.
         * @param resourceGroupName The resource group name.
         * @param jobCollectionName The job collection name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        JobCollections.prototype.beginDeleteMethod = function (resourceGroupName$$1, jobCollectionName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                jobCollectionName: jobCollectionName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        /**
         * Enables all of the jobs in the job collection.
         * @param resourceGroupName The resource group name.
         * @param jobCollectionName The job collection name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        JobCollections.prototype.beginEnable = function (resourceGroupName$$1, jobCollectionName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                jobCollectionName: jobCollectionName$$1,
                options: options
            }, beginEnableOperationSpec, options);
        };
        /**
         * Disables all of the jobs in the job collection.
         * @param resourceGroupName The resource group name.
         * @param jobCollectionName The job collection name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        JobCollections.prototype.beginDisable = function (resourceGroupName$$1, jobCollectionName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                jobCollectionName: jobCollectionName$$1,
                options: options
            }, beginDisableOperationSpec, options);
        };
        JobCollections.prototype.listBySubscriptionNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listBySubscriptionNextOperationSpec, callback);
        };
        JobCollections.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        return JobCollections;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listBySubscriptionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Scheduler/jobCollections",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobCollectionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobCollectionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobCollectionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobCollectionDefinition
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobCollectionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "jobCollection",
            mapper: __assign({}, JobCollectionDefinition, { required: true })
        },
        responses: {
            200: {
                bodyMapper: JobCollectionDefinition
            },
            201: {
                bodyMapper: JobCollectionDefinition
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var patchOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobCollectionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "jobCollection",
            mapper: __assign({}, JobCollectionDefinition, { required: true })
        },
        responses: {
            200: {
                bodyMapper: JobCollectionDefinition
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobCollectionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginEnableOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/enable",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobCollectionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginDisableOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/disable",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobCollectionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listBySubscriptionNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobCollectionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobCollectionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        JobDefinition: JobDefinition,
        JobProperties: JobProperties,
        JobAction: JobAction,
        HttpRequest: HttpRequest,
        HttpAuthentication: HttpAuthentication,
        StorageQueueMessage: StorageQueueMessage,
        ServiceBusQueueMessage: ServiceBusQueueMessage,
        ServiceBusMessage: ServiceBusMessage,
        ServiceBusAuthentication: ServiceBusAuthentication,
        ServiceBusBrokeredMessageProperties: ServiceBusBrokeredMessageProperties,
        ServiceBusTopicMessage: ServiceBusTopicMessage,
        RetryPolicy: RetryPolicy,
        JobErrorAction: JobErrorAction,
        JobRecurrence: JobRecurrence,
        JobRecurrenceSchedule: JobRecurrenceSchedule,
        JobRecurrenceScheduleMonthlyOccurrence: JobRecurrenceScheduleMonthlyOccurrence,
        JobStatus: JobStatus,
        CloudError: CloudError,
        JobListResult: JobListResult,
        JobHistoryListResult: JobHistoryListResult,
        JobHistoryDefinition: JobHistoryDefinition,
        JobHistoryDefinitionProperties: JobHistoryDefinitionProperties,
        ClientCertAuthentication: ClientCertAuthentication,
        BasicAuthentication: BasicAuthentication,
        OAuthAuthentication: OAuthAuthentication
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Jobs. */
    var Jobs = /** @class */ (function () {
        /**
         * Create a Jobs.
         * @param {SchedulerManagementClientContext} client Reference to the service client.
         */
        function Jobs(client) {
            this.client = client;
        }
        Jobs.prototype.get = function (resourceGroupName$$1, jobCollectionName$$1, jobName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                jobCollectionName: jobCollectionName$$1,
                jobName: jobName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        Jobs.prototype.createOrUpdate = function (resourceGroupName$$1, jobCollectionName$$1, jobName$$1, job, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                jobCollectionName: jobCollectionName$$1,
                jobName: jobName$$1,
                job: job,
                options: options
            }, createOrUpdateOperationSpec$1, callback);
        };
        Jobs.prototype.patch = function (resourceGroupName$$1, jobCollectionName$$1, jobName$$1, job, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                jobCollectionName: jobCollectionName$$1,
                jobName: jobName$$1,
                job: job,
                options: options
            }, patchOperationSpec$1, callback);
        };
        Jobs.prototype.deleteMethod = function (resourceGroupName$$1, jobCollectionName$$1, jobName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                jobCollectionName: jobCollectionName$$1,
                jobName: jobName$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        Jobs.prototype.run = function (resourceGroupName$$1, jobCollectionName$$1, jobName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                jobCollectionName: jobCollectionName$$1,
                jobName: jobName$$1,
                options: options
            }, runOperationSpec, callback);
        };
        Jobs.prototype.list = function (resourceGroupName$$1, jobCollectionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                jobCollectionName: jobCollectionName$$1,
                options: options
            }, listOperationSpec, callback);
        };
        Jobs.prototype.listJobHistory = function (resourceGroupName$$1, jobCollectionName$$1, jobName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                jobCollectionName: jobCollectionName$$1,
                jobName: jobName$$1,
                options: options
            }, listJobHistoryOperationSpec, callback);
        };
        Jobs.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        Jobs.prototype.listJobHistoryNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listJobHistoryNextOperationSpec, callback);
        };
        return Jobs;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobCollectionName,
            jobName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobDefinition
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var createOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobCollectionName,
            jobName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "job",
            mapper: __assign({}, JobDefinition, { required: true })
        },
        responses: {
            200: {
                bodyMapper: JobDefinition
            },
            201: {
                bodyMapper: JobDefinition
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var patchOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobCollectionName,
            jobName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "job",
            mapper: __assign({}, JobDefinition, { required: true })
        },
        responses: {
            200: {
                bodyMapper: JobDefinition
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobCollectionName,
            jobName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var runOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}/run",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobCollectionName,
            jobName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobCollectionName
        ],
        queryParameters: [
            apiVersion,
            top,
            skip,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listJobHistoryOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}/history",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            jobCollectionName,
            jobName
        ],
        queryParameters: [
            apiVersion,
            top,
            skip,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobHistoryListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listJobHistoryNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobHistoryListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-scheduler";
    var packageVersion = "1.0.0";
    var SchedulerManagementClientContext = /** @class */ (function (_super) {
        __extends(SchedulerManagementClientContext, _super);
        /**
         * Initializes a new instance of the SchedulerManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The subscription id.
         * @param [options] The parameter options
         */
        function SchedulerManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2016-03-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return SchedulerManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var SchedulerManagementClient = /** @class */ (function (_super) {
        __extends(SchedulerManagementClient, _super);
        /**
         * Initializes a new instance of the SchedulerManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The subscription id.
         * @param [options] The parameter options
         */
        function SchedulerManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.jobCollections = new JobCollections(_this);
            _this.jobs = new Jobs(_this);
            return _this;
        }
        return SchedulerManagementClient;
    }(SchedulerManagementClientContext));

    exports.SchedulerManagementClient = SchedulerManagementClient;
    exports.SchedulerManagementClientContext = SchedulerManagementClientContext;
    exports.SchedulerManagementModels = index;
    exports.SchedulerManagementMappers = mappers;
    exports.JobCollections = JobCollections;
    exports.Jobs = Jobs;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-scheduler.js.map
