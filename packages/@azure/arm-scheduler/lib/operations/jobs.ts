/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/jobsMappers";
import * as Parameters from "../models/parameters";
import { SchedulerManagementClientContext } from "../schedulerManagementClientContext";

/** Class representing a Jobs. */
export class Jobs {
  private readonly client: SchedulerManagementClientContext;

  /**
   * Create a Jobs.
   * @param {SchedulerManagementClientContext} client Reference to the service client.
   */
  constructor(client: SchedulerManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets a job.
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param jobName The job name.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsGetResponse>
   */
  get(resourceGroupName: string, jobCollectionName: string, jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsGetResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param jobName The job name.
   * @param callback The callback
   */
  get(resourceGroupName: string, jobCollectionName: string, jobName: string, callback: msRest.ServiceCallback<Models.JobDefinition>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param jobName The job name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, jobCollectionName: string, jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JobDefinition>): void;
  get(resourceGroupName: string, jobCollectionName: string, jobName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.JobDefinition>): Promise<Models.JobsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        jobCollectionName,
        jobName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.JobsGetResponse>;
  }

  /**
   * Provisions a new job or updates an existing job.
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param jobName The job name.
   * @param job The job definition.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, jobCollectionName: string, jobName: string, job: Models.JobDefinition, options?: msRest.RequestOptionsBase): Promise<Models.JobsCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param jobName The job name.
   * @param job The job definition.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, jobCollectionName: string, jobName: string, job: Models.JobDefinition, callback: msRest.ServiceCallback<Models.JobDefinition>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param jobName The job name.
   * @param job The job definition.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, jobCollectionName: string, jobName: string, job: Models.JobDefinition, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JobDefinition>): void;
  createOrUpdate(resourceGroupName: string, jobCollectionName: string, jobName: string, job: Models.JobDefinition, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.JobDefinition>): Promise<Models.JobsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        jobCollectionName,
        jobName,
        job,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.JobsCreateOrUpdateResponse>;
  }

  /**
   * Patches an existing job.
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param jobName The job name.
   * @param job The job definition.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsPatchResponse>
   */
  patch(resourceGroupName: string, jobCollectionName: string, jobName: string, job: Models.JobDefinition, options?: msRest.RequestOptionsBase): Promise<Models.JobsPatchResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param jobName The job name.
   * @param job The job definition.
   * @param callback The callback
   */
  patch(resourceGroupName: string, jobCollectionName: string, jobName: string, job: Models.JobDefinition, callback: msRest.ServiceCallback<Models.JobDefinition>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param jobName The job name.
   * @param job The job definition.
   * @param options The optional parameters
   * @param callback The callback
   */
  patch(resourceGroupName: string, jobCollectionName: string, jobName: string, job: Models.JobDefinition, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JobDefinition>): void;
  patch(resourceGroupName: string, jobCollectionName: string, jobName: string, job: Models.JobDefinition, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.JobDefinition>): Promise<Models.JobsPatchResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        jobCollectionName,
        jobName,
        job,
        options
      },
      patchOperationSpec,
      callback) as Promise<Models.JobsPatchResponse>;
  }

  /**
   * Deletes a job.
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param jobName The job name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, jobCollectionName: string, jobName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param jobName The job name.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, jobCollectionName: string, jobName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param jobName The job name.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, jobCollectionName: string, jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, jobCollectionName: string, jobName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        jobCollectionName,
        jobName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Runs a job.
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param jobName The job name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  run(resourceGroupName: string, jobCollectionName: string, jobName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param jobName The job name.
   * @param callback The callback
   */
  run(resourceGroupName: string, jobCollectionName: string, jobName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param jobName The job name.
   * @param options The optional parameters
   * @param callback The callback
   */
  run(resourceGroupName: string, jobCollectionName: string, jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  run(resourceGroupName: string, jobCollectionName: string, jobName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        jobCollectionName,
        jobName,
        options
      },
      runOperationSpec,
      callback);
  }

  /**
   * Lists all jobs under the specified job collection.
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsListResponse>
   */
  list(resourceGroupName: string, jobCollectionName: string, options?: Models.JobsListOptionalParams): Promise<Models.JobsListResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param callback The callback
   */
  list(resourceGroupName: string, jobCollectionName: string, callback: msRest.ServiceCallback<Models.JobListResult>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, jobCollectionName: string, options: Models.JobsListOptionalParams, callback: msRest.ServiceCallback<Models.JobListResult>): void;
  list(resourceGroupName: string, jobCollectionName: string, options?: Models.JobsListOptionalParams, callback?: msRest.ServiceCallback<Models.JobListResult>): Promise<Models.JobsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        jobCollectionName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.JobsListResponse>;
  }

  /**
   * Lists job history.
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param jobName The job name.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsListJobHistoryResponse>
   */
  listJobHistory(resourceGroupName: string, jobCollectionName: string, jobName: string, options?: Models.JobsListJobHistoryOptionalParams): Promise<Models.JobsListJobHistoryResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param jobName The job name.
   * @param callback The callback
   */
  listJobHistory(resourceGroupName: string, jobCollectionName: string, jobName: string, callback: msRest.ServiceCallback<Models.JobHistoryListResult>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param jobCollectionName The job collection name.
   * @param jobName The job name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listJobHistory(resourceGroupName: string, jobCollectionName: string, jobName: string, options: Models.JobsListJobHistoryOptionalParams, callback: msRest.ServiceCallback<Models.JobHistoryListResult>): void;
  listJobHistory(resourceGroupName: string, jobCollectionName: string, jobName: string, options?: Models.JobsListJobHistoryOptionalParams, callback?: msRest.ServiceCallback<Models.JobHistoryListResult>): Promise<Models.JobsListJobHistoryResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        jobCollectionName,
        jobName,
        options
      },
      listJobHistoryOperationSpec,
      callback) as Promise<Models.JobsListJobHistoryResponse>;
  }

  /**
   * Lists all jobs under the specified job collection.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.JobListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JobListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.JobListResult>): Promise<Models.JobsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.JobsListNextResponse>;
  }

  /**
   * Lists job history.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsListJobHistoryNextResponse>
   */
  listJobHistoryNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsListJobHistoryNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listJobHistoryNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.JobHistoryListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listJobHistoryNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JobHistoryListResult>): void;
  listJobHistoryNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.JobHistoryListResult>): Promise<Models.JobsListJobHistoryNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listJobHistoryNextOperationSpec,
      callback) as Promise<Models.JobsListJobHistoryNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobCollectionName,
    Parameters.jobName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.JobDefinition
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobCollectionName,
    Parameters.jobName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "job",
    mapper: {
      ...Mappers.JobDefinition,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.JobDefinition
    },
    201: {
      bodyMapper: Mappers.JobDefinition
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobCollectionName,
    Parameters.jobName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "job",
    mapper: {
      ...Mappers.JobDefinition,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.JobDefinition
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobCollectionName,
    Parameters.jobName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const runOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}/run",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobCollectionName,
    Parameters.jobName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobCollectionName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.JobListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listJobHistoryOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}/history",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobCollectionName,
    Parameters.jobName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.JobHistoryListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.JobListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listJobHistoryNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.JobHistoryListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
