/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "ms-rest-azure-js";
import * as msRest from "ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const Sku: msRest.CompositeMapper = {
  serializedName: "Sku",
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "Enum",
          allowedValues: [
            "Standard",
            "Free",
            "P10Premium",
            "P20Premium"
          ]
        }
      }
    }
  }
};

export const JobMaxRecurrence: msRest.CompositeMapper = {
  serializedName: "JobMaxRecurrence",
  type: {
    name: "Composite",
    className: "JobMaxRecurrence",
    modelProperties: {
      frequency: {
        serializedName: "frequency",
        type: {
          name: "Enum",
          allowedValues: [
            "Minute",
            "Hour",
            "Day",
            "Week",
            "Month"
          ]
        }
      },
      interval: {
        serializedName: "interval",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const JobCollectionQuota: msRest.CompositeMapper = {
  serializedName: "JobCollectionQuota",
  type: {
    name: "Composite",
    className: "JobCollectionQuota",
    modelProperties: {
      maxJobCount: {
        serializedName: "maxJobCount",
        type: {
          name: "Number"
        }
      },
      maxJobOccurrence: {
        serializedName: "maxJobOccurrence",
        type: {
          name: "Number"
        }
      },
      maxRecurrence: {
        serializedName: "maxRecurrence",
        type: {
          name: "Composite",
          className: "JobMaxRecurrence"
        }
      }
    }
  }
};

export const JobCollectionProperties: msRest.CompositeMapper = {
  serializedName: "JobCollectionProperties",
  type: {
    name: "Composite",
    className: "JobCollectionProperties",
    modelProperties: {
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled",
            "Suspended",
            "Deleted"
          ]
        }
      },
      quota: {
        serializedName: "quota",
        type: {
          name: "Composite",
          className: "JobCollectionQuota"
        }
      }
    }
  }
};

export const JobCollectionDefinition: msRest.CompositeMapper = {
  serializedName: "JobCollectionDefinition",
  type: {
    name: "Composite",
    className: "JobCollectionDefinition",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "JobCollectionProperties"
        }
      }
    }
  }
};

export const HttpAuthentication: msRest.CompositeMapper = {
  serializedName: "HttpAuthentication",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    uberParent: "HttpAuthentication",
    className: "HttpAuthentication",
    modelProperties: {
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HttpRequest: msRest.CompositeMapper = {
  serializedName: "HttpRequest",
  type: {
    name: "Composite",
    className: "HttpRequest",
    modelProperties: {
      authentication: {
        serializedName: "authentication",
        type: {
          name: "Composite",
          polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
          },
          uberParent: "HttpAuthentication",
          className: "HttpAuthentication"
        }
      },
      uri: {
        serializedName: "uri",
        type: {
          name: "String"
        }
      },
      method: {
        serializedName: "method",
        type: {
          name: "String"
        }
      },
      body: {
        serializedName: "body",
        type: {
          name: "String"
        }
      },
      headers: {
        serializedName: "headers",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const StorageQueueMessage: msRest.CompositeMapper = {
  serializedName: "StorageQueueMessage",
  type: {
    name: "Composite",
    className: "StorageQueueMessage",
    modelProperties: {
      storageAccount: {
        serializedName: "storageAccount",
        type: {
          name: "String"
        }
      },
      queueName: {
        serializedName: "queueName",
        type: {
          name: "String"
        }
      },
      sasToken: {
        serializedName: "sasToken",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceBusMessage: msRest.CompositeMapper = {
  serializedName: "ServiceBusMessage",
  type: {
    name: "Composite",
    className: "ServiceBusMessage",
    modelProperties: {
      authentication: {
        serializedName: "authentication",
        type: {
          name: "Composite",
          className: "ServiceBusAuthentication"
        }
      },
      brokeredMessageProperties: {
        serializedName: "brokeredMessageProperties",
        type: {
          name: "Composite",
          className: "ServiceBusBrokeredMessageProperties"
        }
      },
      customMessageProperties: {
        serializedName: "customMessageProperties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      namespace: {
        serializedName: "namespace",
        type: {
          name: "String"
        }
      },
      transportType: {
        serializedName: "transportType",
        type: {
          name: "Enum",
          allowedValues: [
            "NotSpecified",
            "NetMessaging",
            "AMQP"
          ]
        }
      }
    }
  }
};

export const ServiceBusQueueMessage: msRest.CompositeMapper = {
  serializedName: "ServiceBusQueueMessage",
  type: {
    name: "Composite",
    className: "ServiceBusQueueMessage",
    modelProperties: {
      ...ServiceBusMessage.type.modelProperties,
      queueName: {
        serializedName: "queueName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceBusTopicMessage: msRest.CompositeMapper = {
  serializedName: "ServiceBusTopicMessage",
  type: {
    name: "Composite",
    className: "ServiceBusTopicMessage",
    modelProperties: {
      ...ServiceBusMessage.type.modelProperties,
      topicPath: {
        serializedName: "topicPath",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RetryPolicy: msRest.CompositeMapper = {
  serializedName: "RetryPolicy",
  type: {
    name: "Composite",
    className: "RetryPolicy",
    modelProperties: {
      retryType: {
        serializedName: "retryType",
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "Fixed"
          ]
        }
      },
      retryInterval: {
        serializedName: "retryInterval",
        type: {
          name: "TimeSpan"
        }
      },
      retryCount: {
        serializedName: "retryCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const JobErrorAction: msRest.CompositeMapper = {
  serializedName: "JobErrorAction",
  type: {
    name: "Composite",
    className: "JobErrorAction",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "Http",
            "Https",
            "StorageQueue",
            "ServiceBusQueue",
            "ServiceBusTopic"
          ]
        }
      },
      request: {
        serializedName: "request",
        type: {
          name: "Composite",
          className: "HttpRequest"
        }
      },
      queueMessage: {
        serializedName: "queueMessage",
        type: {
          name: "Composite",
          className: "StorageQueueMessage"
        }
      },
      serviceBusQueueMessage: {
        serializedName: "serviceBusQueueMessage",
        type: {
          name: "Composite",
          className: "ServiceBusQueueMessage"
        }
      },
      serviceBusTopicMessage: {
        serializedName: "serviceBusTopicMessage",
        type: {
          name: "Composite",
          className: "ServiceBusTopicMessage"
        }
      },
      retryPolicy: {
        serializedName: "retryPolicy",
        type: {
          name: "Composite",
          className: "RetryPolicy"
        }
      }
    }
  }
};

export const JobAction: msRest.CompositeMapper = {
  serializedName: "JobAction",
  type: {
    name: "Composite",
    className: "JobAction",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "Http",
            "Https",
            "StorageQueue",
            "ServiceBusQueue",
            "ServiceBusTopic"
          ]
        }
      },
      request: {
        serializedName: "request",
        type: {
          name: "Composite",
          className: "HttpRequest"
        }
      },
      queueMessage: {
        serializedName: "queueMessage",
        type: {
          name: "Composite",
          className: "StorageQueueMessage"
        }
      },
      serviceBusQueueMessage: {
        serializedName: "serviceBusQueueMessage",
        type: {
          name: "Composite",
          className: "ServiceBusQueueMessage"
        }
      },
      serviceBusTopicMessage: {
        serializedName: "serviceBusTopicMessage",
        type: {
          name: "Composite",
          className: "ServiceBusTopicMessage"
        }
      },
      retryPolicy: {
        serializedName: "retryPolicy",
        type: {
          name: "Composite",
          className: "RetryPolicy"
        }
      },
      errorAction: {
        serializedName: "errorAction",
        type: {
          name: "Composite",
          className: "JobErrorAction"
        }
      }
    }
  }
};

export const JobRecurrenceScheduleMonthlyOccurrence: msRest.CompositeMapper = {
  serializedName: "JobRecurrenceScheduleMonthlyOccurrence",
  type: {
    name: "Composite",
    className: "JobRecurrenceScheduleMonthlyOccurrence",
    modelProperties: {
      day: {
        serializedName: "day",
        type: {
          name: "Enum",
          allowedValues: [
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday"
          ]
        }
      },
      occurrence: {
        serializedName: "Occurrence",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const JobRecurrenceSchedule: msRest.CompositeMapper = {
  serializedName: "JobRecurrenceSchedule",
  type: {
    name: "Composite",
    className: "JobRecurrenceSchedule",
    modelProperties: {
      weekDays: {
        serializedName: "weekDays",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday"
              ]
            }
          }
        }
      },
      hours: {
        serializedName: "hours",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      minutes: {
        serializedName: "minutes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      monthDays: {
        serializedName: "monthDays",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      monthlyOccurrences: {
        serializedName: "monthlyOccurrences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobRecurrenceScheduleMonthlyOccurrence"
            }
          }
        }
      }
    }
  }
};

export const JobRecurrence: msRest.CompositeMapper = {
  serializedName: "JobRecurrence",
  type: {
    name: "Composite",
    className: "JobRecurrence",
    modelProperties: {
      frequency: {
        serializedName: "frequency",
        type: {
          name: "Enum",
          allowedValues: [
            "Minute",
            "Hour",
            "Day",
            "Week",
            "Month"
          ]
        }
      },
      interval: {
        serializedName: "interval",
        type: {
          name: "Number"
        }
      },
      count: {
        serializedName: "count",
        type: {
          name: "Number"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      schedule: {
        serializedName: "schedule",
        type: {
          name: "Composite",
          className: "JobRecurrenceSchedule"
        }
      }
    }
  }
};

export const JobStatus: msRest.CompositeMapper = {
  serializedName: "JobStatus",
  type: {
    name: "Composite",
    className: "JobStatus",
    modelProperties: {
      executionCount: {
        readOnly: true,
        serializedName: "executionCount",
        type: {
          name: "Number"
        }
      },
      failureCount: {
        readOnly: true,
        serializedName: "failureCount",
        type: {
          name: "Number"
        }
      },
      faultedCount: {
        readOnly: true,
        serializedName: "faultedCount",
        type: {
          name: "Number"
        }
      },
      lastExecutionTime: {
        readOnly: true,
        serializedName: "lastExecutionTime",
        type: {
          name: "DateTime"
        }
      },
      nextExecutionTime: {
        readOnly: true,
        serializedName: "nextExecutionTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const JobProperties: msRest.CompositeMapper = {
  serializedName: "JobProperties",
  type: {
    name: "Composite",
    className: "JobProperties",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      action: {
        serializedName: "action",
        type: {
          name: "Composite",
          className: "JobAction"
        }
      },
      recurrence: {
        serializedName: "recurrence",
        type: {
          name: "Composite",
          className: "JobRecurrence"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled",
            "Faulted",
            "Completed"
          ]
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Composite",
          className: "JobStatus"
        }
      }
    }
  }
};

export const JobDefinition: msRest.CompositeMapper = {
  serializedName: "JobDefinition",
  type: {
    name: "Composite",
    className: "JobDefinition",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "JobProperties"
        }
      }
    }
  }
};

export const JobHistoryDefinitionProperties: msRest.CompositeMapper = {
  serializedName: "JobHistoryDefinitionProperties",
  type: {
    name: "Composite",
    className: "JobHistoryDefinitionProperties",
    modelProperties: {
      startTime: {
        readOnly: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        readOnly: true,
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      expectedExecutionTime: {
        readOnly: true,
        serializedName: "expectedExecutionTime",
        type: {
          name: "DateTime"
        }
      },
      actionName: {
        readOnly: true,
        serializedName: "actionName",
        type: {
          name: "Enum",
          allowedValues: [
            "MainAction",
            "ErrorAction"
          ]
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Completed",
            "Failed",
            "Postponed"
          ]
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      retryCount: {
        readOnly: true,
        serializedName: "retryCount",
        type: {
          name: "Number"
        }
      },
      repeatCount: {
        readOnly: true,
        serializedName: "repeatCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const JobHistoryDefinition: msRest.CompositeMapper = {
  serializedName: "JobHistoryDefinition",
  type: {
    name: "Composite",
    className: "JobHistoryDefinition",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      properties: {
        readOnly: true,
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "JobHistoryDefinitionProperties"
        }
      }
    }
  }
};

export const ClientCertAuthentication: msRest.CompositeMapper = {
  serializedName: "ClientCertificate",
  type: {
    name: "Composite",
    polymorphicDiscriminator: HttpAuthentication.type.polymorphicDiscriminator,
    uberParent: "HttpAuthentication",
    className: "ClientCertAuthentication",
    modelProperties: {
      ...HttpAuthentication.type.modelProperties,
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      },
      pfx: {
        serializedName: "pfx",
        type: {
          name: "String"
        }
      },
      certificateThumbprint: {
        serializedName: "certificateThumbprint",
        type: {
          name: "String"
        }
      },
      certificateExpirationDate: {
        serializedName: "certificateExpirationDate",
        type: {
          name: "DateTime"
        }
      },
      certificateSubjectName: {
        serializedName: "certificateSubjectName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BasicAuthentication: msRest.CompositeMapper = {
  serializedName: "Basic",
  type: {
    name: "Composite",
    polymorphicDiscriminator: HttpAuthentication.type.polymorphicDiscriminator,
    uberParent: "HttpAuthentication",
    className: "BasicAuthentication",
    modelProperties: {
      ...HttpAuthentication.type.modelProperties,
      username: {
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OAuthAuthentication: msRest.CompositeMapper = {
  serializedName: "ActiveDirectoryOAuth",
  type: {
    name: "Composite",
    polymorphicDiscriminator: HttpAuthentication.type.polymorphicDiscriminator,
    uberParent: "HttpAuthentication",
    className: "OAuthAuthentication",
    modelProperties: {
      ...HttpAuthentication.type.modelProperties,
      secret: {
        serializedName: "secret",
        type: {
          name: "String"
        }
      },
      tenant: {
        serializedName: "tenant",
        type: {
          name: "String"
        }
      },
      audience: {
        serializedName: "audience",
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceBusAuthentication: msRest.CompositeMapper = {
  serializedName: "ServiceBusAuthentication",
  type: {
    name: "Composite",
    className: "ServiceBusAuthentication",
    modelProperties: {
      sasKey: {
        serializedName: "sasKey",
        type: {
          name: "String"
        }
      },
      sasKeyName: {
        serializedName: "sasKeyName",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "NotSpecified",
            "SharedAccessKey"
          ]
        }
      }
    }
  }
};

export const ServiceBusBrokeredMessageProperties: msRest.CompositeMapper = {
  serializedName: "ServiceBusBrokeredMessageProperties",
  type: {
    name: "Composite",
    className: "ServiceBusBrokeredMessageProperties",
    modelProperties: {
      contentType: {
        serializedName: "contentType",
        type: {
          name: "String"
        }
      },
      correlationId: {
        serializedName: "correlationId",
        type: {
          name: "String"
        }
      },
      forcePersistence: {
        serializedName: "forcePersistence",
        type: {
          name: "Boolean"
        }
      },
      label: {
        serializedName: "label",
        type: {
          name: "String"
        }
      },
      messageId: {
        serializedName: "messageId",
        type: {
          name: "String"
        }
      },
      partitionKey: {
        serializedName: "partitionKey",
        type: {
          name: "String"
        }
      },
      replyTo: {
        serializedName: "replyTo",
        type: {
          name: "String"
        }
      },
      replyToSessionId: {
        serializedName: "replyToSessionId",
        type: {
          name: "String"
        }
      },
      scheduledEnqueueTimeUtc: {
        serializedName: "scheduledEnqueueTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      sessionId: {
        serializedName: "sessionId",
        type: {
          name: "String"
        }
      },
      timeToLive: {
        serializedName: "timeToLive",
        type: {
          name: "TimeSpan"
        }
      },
      to: {
        serializedName: "to",
        type: {
          name: "String"
        }
      },
      viaPartitionKey: {
        serializedName: "viaPartitionKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobStateFilter: msRest.CompositeMapper = {
  serializedName: "JobStateFilter",
  type: {
    name: "Composite",
    className: "JobStateFilter",
    modelProperties: {
      state: {
        serializedName: "state",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled",
            "Faulted",
            "Completed"
          ]
        }
      }
    }
  }
};

export const JobHistoryFilter: msRest.CompositeMapper = {
  serializedName: "JobHistoryFilter",
  type: {
    name: "Composite",
    className: "JobHistoryFilter",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Completed",
            "Failed",
            "Postponed"
          ]
        }
      }
    }
  }
};

export const JobCollectionListResult: msRest.CompositeMapper = {
  serializedName: "JobCollectionListResult",
  type: {
    name: "Composite",
    className: "JobCollectionListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobCollectionDefinition"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobListResult: msRest.CompositeMapper = {
  serializedName: "JobListResult",
  type: {
    name: "Composite",
    className: "JobListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobDefinition"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobHistoryListResult: msRest.CompositeMapper = {
  serializedName: "JobHistoryListResult",
  type: {
    name: "Composite",
    className: "JobHistoryListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobHistoryDefinition"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const discriminators = {
  'HttpAuthentication' : HttpAuthentication,
  'HttpAuthentication.ClientCertificate' : ClientCertAuthentication,
  'HttpAuthentication.Basic' : BasicAuthentication,
  'HttpAuthentication.ActiveDirectoryOAuth' : OAuthAuthentication
};
