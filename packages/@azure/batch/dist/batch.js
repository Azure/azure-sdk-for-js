/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.Batch = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for OSType.
     * Possible values include: 'linux', 'windows'
     * @readonly
     * @enum {string}
     */
    var OSType;
    (function (OSType) {
        /**
         * The Linux operating system.
         */
        OSType["Linux"] = "linux";
        /**
         * The Windows operating system.
         */
        OSType["Windows"] = "windows";
    })(OSType || (OSType = {}));
    /**
     * Defines values for AccessScope.
     * Possible values include: 'job'
     * @readonly
     * @enum {string}
     */
    var AccessScope;
    (function (AccessScope) {
        /**
         * Grants access to perform all operations on the job containing the task.
         */
        AccessScope["Job"] = "job";
    })(AccessScope || (AccessScope = {}));
    /**
     * Defines values for CertificateState.
     * Possible values include: 'active', 'deleting', 'deleteFailed'
     * @readonly
     * @enum {string}
     */
    var CertificateState;
    (function (CertificateState) {
        /**
         * The certificate is available for use in pools.
         */
        CertificateState["Active"] = "active";
        /**
         * The user has requested that the certificate be deleted, but the delete
         * operation has not yet completed. You may not reference the certificate
         * when creating or updating pools.
         */
        CertificateState["Deleting"] = "deleting";
        /**
         * The user requested that the certificate be deleted, but there are pools
         * that still have references to the certificate, or it is still installed on
         * one or more compute nodes. (The latter can occur if the certificate has
         * been removed from the pool, but the node has not yet restarted. Nodes
         * refresh their certificates only when they restart.) You may use the cancel
         * certificate delete operation to cancel the delete, or the delete
         * certificate operation to retry the delete.
         */
        CertificateState["DeleteFailed"] = "deletefailed";
    })(CertificateState || (CertificateState = {}));
    /**
     * Defines values for CertificateFormat.
     * Possible values include: 'pfx', 'cer'
     * @readonly
     * @enum {string}
     */
    var CertificateFormat;
    (function (CertificateFormat) {
        /**
         * The certificate is a PFX (PKCS#12) formatted certificate or certificate
         * chain.
         */
        CertificateFormat["Pfx"] = "pfx";
        /**
         * The certificate is a base64-encoded X.509 certificate.
         */
        CertificateFormat["Cer"] = "cer";
    })(CertificateFormat || (CertificateFormat = {}));
    /**
     * Defines values for JobAction.
     * Possible values include: 'none', 'disable', 'terminate'
     * @readonly
     * @enum {string}
     */
    var JobAction;
    (function (JobAction) {
        /**
         * Take no action.
         */
        JobAction["None"] = "none";
        /**
         * Disable the job. This is equivalent to calling the disable job API, with a
         * disableTasks value of requeue.
         */
        JobAction["Disable"] = "disable";
        /**
         * Terminate the job. The terminateReason in the job's executionInfo is set
         * to "TaskFailed".
         */
        JobAction["Terminate"] = "terminate";
    })(JobAction || (JobAction = {}));
    /**
     * Defines values for DependencyAction.
     * Possible values include: 'satisfy', 'block'
     * @readonly
     * @enum {string}
     */
    var DependencyAction;
    (function (DependencyAction) {
        /**
         * Satisfy the task's dependencies.
         */
        DependencyAction["Satisfy"] = "satisfy";
        /**
         * Block the task's dependencies.
         */
        DependencyAction["Block"] = "block";
    })(DependencyAction || (DependencyAction = {}));
    /**
     * Defines values for AutoUserScope.
     * Possible values include: 'task', 'pool'
     * @readonly
     * @enum {string}
     */
    var AutoUserScope;
    (function (AutoUserScope) {
        /**
         * Specifies that the service should create a new user for the task.
         */
        AutoUserScope["Task"] = "task";
        /**
         * Specifies that the task runs as the common auto user account which is
         * created on every node in a pool.
         */
        AutoUserScope["Pool"] = "pool";
    })(AutoUserScope || (AutoUserScope = {}));
    /**
     * Defines values for ElevationLevel.
     * Possible values include: 'nonAdmin', 'admin'
     * @readonly
     * @enum {string}
     */
    var ElevationLevel;
    (function (ElevationLevel) {
        /**
         * The user is a standard user without elevated access.
         */
        ElevationLevel["NonAdmin"] = "nonadmin";
        /**
         * The user is a user with elevated access and operates with full
         * Administrator permissions.
         */
        ElevationLevel["Admin"] = "admin";
    })(ElevationLevel || (ElevationLevel = {}));
    /**
     * Defines values for OutputFileUploadCondition.
     * Possible values include: 'taskSuccess', 'taskFailure', 'taskCompletion'
     * @readonly
     * @enum {string}
     */
    var OutputFileUploadCondition;
    (function (OutputFileUploadCondition) {
        /**
         * Upload the file(s) only after the task process exits with an exit code of
         * 0.
         */
        OutputFileUploadCondition["TaskSuccess"] = "tasksuccess";
        /**
         * Upload the file(s) only after the task process exits with a nonzero exit
         * code.
         */
        OutputFileUploadCondition["TaskFailure"] = "taskfailure";
        /**
         * Upload the file(s) after the task process exits, no matter what the exit
         * code was.
         */
        OutputFileUploadCondition["TaskCompletion"] = "taskcompletion";
    })(OutputFileUploadCondition || (OutputFileUploadCondition = {}));
    /**
     * Defines values for ComputeNodeFillType.
     * Possible values include: 'spread', 'pack'
     * @readonly
     * @enum {string}
     */
    var ComputeNodeFillType;
    (function (ComputeNodeFillType) {
        /**
         * Tasks should be assigned evenly across all nodes in the pool.
         */
        ComputeNodeFillType["Spread"] = "spread";
        /**
         * As many tasks as possible (maxTasksPerNode) should be assigned to each
         * node in the pool before any tasks are assigned to the next node in the
         * pool.
         */
        ComputeNodeFillType["Pack"] = "pack";
    })(ComputeNodeFillType || (ComputeNodeFillType = {}));
    /**
     * Defines values for CertificateStoreLocation.
     * Possible values include: 'currentUser', 'localMachine'
     * @readonly
     * @enum {string}
     */
    var CertificateStoreLocation;
    (function (CertificateStoreLocation) {
        /**
         * Certificates should be installed to the CurrentUser certificate store.
         */
        CertificateStoreLocation["CurrentUser"] = "currentuser";
        /**
         * Certificates should be installed to the LocalMachine certificate store.
         */
        CertificateStoreLocation["LocalMachine"] = "localmachine";
    })(CertificateStoreLocation || (CertificateStoreLocation = {}));
    /**
     * Defines values for CertificateVisibility.
     * Possible values include: 'startTask', 'task', 'remoteUser'
     * @readonly
     * @enum {string}
     */
    var CertificateVisibility;
    (function (CertificateVisibility) {
        /**
         * The certificate should be visible to the user account under which the
         * start task is run.
         */
        CertificateVisibility["StartTask"] = "starttask";
        /**
         * The certificate should be visibile to the user accounts under which job
         * tasks are run.
         */
        CertificateVisibility["Task"] = "task";
        /**
         * The certificate should be visibile to the user accounts under which users
         * remotely access the node.
         */
        CertificateVisibility["RemoteUser"] = "remoteuser";
    })(CertificateVisibility || (CertificateVisibility = {}));
    /**
     * Defines values for CachingType.
     * Possible values include: 'none', 'readOnly', 'readWrite'
     * @readonly
     * @enum {string}
     */
    var CachingType;
    (function (CachingType) {
        /**
         * The caching mode for the disk is not enabled.
         */
        CachingType["None"] = "none";
        /**
         * The caching mode for the disk is read only.
         */
        CachingType["ReadOnly"] = "readonly";
        /**
         * The caching mode for the disk is read and write.
         */
        CachingType["ReadWrite"] = "readwrite";
    })(CachingType || (CachingType = {}));
    /**
     * Defines values for StorageAccountType.
     * Possible values include: 'StandardLRS', 'PremiumLRS'
     * @readonly
     * @enum {string}
     */
    var StorageAccountType;
    (function (StorageAccountType) {
        /**
         * The data disk should use standard locally redundant storage.
         */
        StorageAccountType["StandardLRS"] = "standard_lrs";
        /**
         * The data disk should use premium locally redundant storage.
         */
        StorageAccountType["PremiumLRS"] = "premium_lrs";
    })(StorageAccountType || (StorageAccountType = {}));
    /**
     * Defines values for InboundEndpointProtocol.
     * Possible values include: 'tcp', 'udp'
     * @readonly
     * @enum {string}
     */
    var InboundEndpointProtocol;
    (function (InboundEndpointProtocol) {
        /**
         * Use TCP for the endpoint.
         */
        InboundEndpointProtocol["Tcp"] = "tcp";
        /**
         * Use UDP for the endpoint.
         */
        InboundEndpointProtocol["Udp"] = "udp";
    })(InboundEndpointProtocol || (InboundEndpointProtocol = {}));
    /**
     * Defines values for NetworkSecurityGroupRuleAccess.
     * Possible values include: 'allow', 'deny'
     * @readonly
     * @enum {string}
     */
    var NetworkSecurityGroupRuleAccess;
    (function (NetworkSecurityGroupRuleAccess) {
        /**
         * Allow access.
         */
        NetworkSecurityGroupRuleAccess["Allow"] = "allow";
        /**
         * Deny access.
         */
        NetworkSecurityGroupRuleAccess["Deny"] = "deny";
    })(NetworkSecurityGroupRuleAccess || (NetworkSecurityGroupRuleAccess = {}));
    /**
     * Defines values for PoolLifetimeOption.
     * Possible values include: 'jobSchedule', 'job'
     * @readonly
     * @enum {string}
     */
    var PoolLifetimeOption;
    (function (PoolLifetimeOption) {
        /**
         * The pool exists for the lifetime of the job schedule. The Batch Service
         * creates the pool when it creates the first job on the schedule. You may
         * apply this option only to job schedules, not to jobs.
         */
        PoolLifetimeOption["JobSchedule"] = "jobschedule";
        /**
         * The pool exists for the lifetime of the job to which it is dedicated. The
         * Batch service creates the pool when it creates the job. If the 'job'
         * option is applied to a job schedule, the Batch service creates a new auto
         * pool for every job created on the schedule.
         */
        PoolLifetimeOption["Job"] = "job";
    })(PoolLifetimeOption || (PoolLifetimeOption = {}));
    /**
     * Defines values for OnAllTasksComplete.
     * Possible values include: 'noAction', 'terminateJob'
     * @readonly
     * @enum {string}
     */
    var OnAllTasksComplete;
    (function (OnAllTasksComplete) {
        /**
         * Do nothing. The job remains active unless terminated or disabled by some
         * other means.
         */
        OnAllTasksComplete["NoAction"] = "noaction";
        /**
         * Terminate the job. The job's terminateReason is set to 'AllTasksComplete'.
         */
        OnAllTasksComplete["TerminateJob"] = "terminatejob";
    })(OnAllTasksComplete || (OnAllTasksComplete = {}));
    /**
     * Defines values for OnTaskFailure.
     * Possible values include: 'noAction', 'performExitOptionsJobAction'
     * @readonly
     * @enum {string}
     */
    var OnTaskFailure;
    (function (OnTaskFailure) {
        /**
         * Do nothing. The job remains active unless terminated or disabled by some
         * other means.
         */
        OnTaskFailure["NoAction"] = "noaction";
        /**
         * Take the action associated with the task exit condition in the task's
         * exitConditions collection. (This may still result in no action being
         * taken, if that is what the task specifies.)
         */
        OnTaskFailure["PerformExitOptionsJobAction"] = "performexitoptionsjobaction";
    })(OnTaskFailure || (OnTaskFailure = {}));
    /**
     * Defines values for JobScheduleState.
     * Possible values include: 'active', 'completed', 'disabled', 'terminating',
     * 'deleting'
     * @readonly
     * @enum {string}
     */
    var JobScheduleState;
    (function (JobScheduleState) {
        /**
         * The job schedule is active and will create jobs as per its schedule.
         */
        JobScheduleState["Active"] = "active";
        /**
         * The schedule has terminated, either by reaching its end time or by the
         * user terminating it explicitly.
         */
        JobScheduleState["Completed"] = "completed";
        /**
         * The user has disabled the schedule. The scheduler will not initiate any
         * new jobs will on this schedule, but any existing active job will continue
         * to run.
         */
        JobScheduleState["Disabled"] = "disabled";
        /**
         * The schedule has no more work to do, or has been explicitly terminated by
         * the user, but the termination operation is still in progress. The
         * scheduler will not initiate any new jobs for this schedule, nor is any
         * existing job active.
         */
        JobScheduleState["Terminating"] = "terminating";
        /**
         * The user has requested that the schedule be deleted, but the delete
         * operation is still in progress. The scheduler will not initiate any new
         * jobs for this schedule, and will delete any existing jobs and tasks under
         * the schedule, including any active job. The schedule will be deleted when
         * all jobs and tasks under the schedule have been deleted.
         */
        JobScheduleState["Deleting"] = "deleting";
    })(JobScheduleState || (JobScheduleState = {}));
    /**
     * Defines values for ErrorCategory.
     * Possible values include: 'userError', 'serverError'
     * @readonly
     * @enum {string}
     */
    var ErrorCategory;
    (function (ErrorCategory) {
        /**
         * The error is due to a user issue, such as misconfiguration.
         */
        ErrorCategory["UserError"] = "usererror";
        /**
         * The error is due to an internal server issue.
         */
        ErrorCategory["ServerError"] = "servererror";
    })(ErrorCategory || (ErrorCategory = {}));
    /**
     * Defines values for JobState.
     * Possible values include: 'active', 'disabling', 'disabled', 'enabling',
     * 'terminating', 'completed', 'deleting'
     * @readonly
     * @enum {string}
     */
    var JobState;
    (function (JobState) {
        /**
         * The job is available to have tasks scheduled.
         */
        JobState["Active"] = "active";
        /**
         * A user has requested that the job be disabled, but the disable operation
         * is still in progress (for example, waiting for tasks to terminate).
         */
        JobState["Disabling"] = "disabling";
        /**
         * A user has disabled the job. No tasks are running, and no new tasks will
         * be scheduled.
         */
        JobState["Disabled"] = "disabled";
        /**
         * A user has requested that the job be enabled, but the enable operation is
         * still in progress.
         */
        JobState["Enabling"] = "enabling";
        /**
         * The job is about to complete, either because a Job Manager task has
         * completed or because the user has terminated the job, but the terminate
         * operation is still in progress (for example, because Job Release tasks are
         * running).
         */
        JobState["Terminating"] = "terminating";
        /**
         * All tasks have terminated, and the system will not accept any more tasks
         * or any further changes to the job.
         */
        JobState["Completed"] = "completed";
        /**
         * A user has requested that the job be deleted, but the delete operation is
         * still in progress (for example, because the system is still terminating
         * running tasks).
         */
        JobState["Deleting"] = "deleting";
    })(JobState || (JobState = {}));
    /**
     * Defines values for JobPreparationTaskState.
     * Possible values include: 'running', 'completed'
     * @readonly
     * @enum {string}
     */
    var JobPreparationTaskState;
    (function (JobPreparationTaskState) {
        /**
         * The task is currently running (including retrying).
         */
        JobPreparationTaskState["Running"] = "running";
        /**
         * The task has exited with exit code 0, or the task has exhausted its retry
         * limit, or the Batch service was unable to start the task due to task
         * preparation errors (such as resource file download failures).
         */
        JobPreparationTaskState["Completed"] = "completed";
    })(JobPreparationTaskState || (JobPreparationTaskState = {}));
    /**
     * Defines values for TaskExecutionResult.
     * Possible values include: 'success', 'failure'
     * @readonly
     * @enum {string}
     */
    var TaskExecutionResult;
    (function (TaskExecutionResult) {
        /**
         * The task ran successfully.
         */
        TaskExecutionResult["Success"] = "success";
        /**
         * There was an error during processing of the task. The failure may have
         * occurred before the task process was launched, while the task process was
         * executing, or after the task process exited.
         */
        TaskExecutionResult["Failure"] = "failure";
    })(TaskExecutionResult || (TaskExecutionResult = {}));
    /**
     * Defines values for JobReleaseTaskState.
     * Possible values include: 'running', 'completed'
     * @readonly
     * @enum {string}
     */
    var JobReleaseTaskState;
    (function (JobReleaseTaskState) {
        /**
         * The task is currently running (including retrying).
         */
        JobReleaseTaskState["Running"] = "running";
        /**
         * The task has exited with exit code 0, or the task has exhausted its retry
         * limit, or the Batch service was unable to start the task due to task
         * preparation errors (such as resource file download failures).
         */
        JobReleaseTaskState["Completed"] = "completed";
    })(JobReleaseTaskState || (JobReleaseTaskState = {}));
    /**
     * Defines values for PoolState.
     * Possible values include: 'active', 'deleting', 'upgrading'
     * @readonly
     * @enum {string}
     */
    var PoolState;
    (function (PoolState) {
        /**
         * The pool is available to run tasks subject to the availability of compute
         * nodes.
         */
        PoolState["Active"] = "active";
        /**
         * The user has requested that the pool be deleted, but the delete operation
         * has not yet completed.
         */
        PoolState["Deleting"] = "deleting";
        /**
         * The user has requested that the operating system of the pool's nodes be
         * upgraded, but the upgrade operation has not yet completed (that is, some
         * nodes in the pool have not yet been upgraded). While upgrading, the pool
         * may be able to run tasks (with reduced capacity) but this is not
         * guaranteed.
         */
        PoolState["Upgrading"] = "upgrading";
    })(PoolState || (PoolState = {}));
    /**
     * Defines values for AllocationState.
     * Possible values include: 'steady', 'resizing', 'stopping'
     * @readonly
     * @enum {string}
     */
    var AllocationState;
    (function (AllocationState) {
        /**
         * The pool is not resizing. There are no changes to the number of nodes in
         * the pool in progress. A pool enters this state when it is created and when
         * no operations are being performed on the pool to change the number of
         * nodes.
         */
        AllocationState["Steady"] = "steady";
        /**
         * The pool is resizing; that is, compute nodes are being added to or removed
         * from the pool.
         */
        AllocationState["Resizing"] = "resizing";
        /**
         * The pool was resizing, but the user has requested that the resize be
         * stopped, but the stop request has not yet been completed.
         */
        AllocationState["Stopping"] = "stopping";
    })(AllocationState || (AllocationState = {}));
    /**
     * Defines values for TaskState.
     * Possible values include: 'active', 'preparing', 'running', 'completed'
     * @readonly
     * @enum {string}
     */
    var TaskState;
    (function (TaskState) {
        /**
         * The task is queued and able to run, but is not currently assigned to a
         * compute node. A task enters this state when it is created, when it is
         * enabled after being disabled, or when it is awaiting a retry after a
         * failed run.
         */
        TaskState["Active"] = "active";
        /**
         * The task has been assigned to a compute node, but is waiting for a
         * required Job Preparation task to complete on the node. If the Job
         * Preparation task succeeds, the task will move to running. If the Job
         * Preparation task fails, the task will return to active and will be
         * eligible to be assigned to a different node.
         */
        TaskState["Preparing"] = "preparing";
        /**
         * The task is running on a compute node. This includes task-level
         * preparation such as downloading resource files or deploying application
         * packages specified on the task - it does not necessarily mean that the
         * task command line has started executing.
         */
        TaskState["Running"] = "running";
        /**
         * The task is no longer eligible to run, usually because the task has
         * finished successfully, or the task has finished unsuccessfully and has
         * exhausted its retry limit. A task is also marked as completed if an error
         * occurred launching the task, or when the task has been terminated.
         */
        TaskState["Completed"] = "completed";
    })(TaskState || (TaskState = {}));
    /**
     * Defines values for TaskAddStatus.
     * Possible values include: 'success', 'clientError', 'serverError'
     * @readonly
     * @enum {string}
     */
    var TaskAddStatus;
    (function (TaskAddStatus) {
        /**
         * The task was added successfully.
         */
        TaskAddStatus["Success"] = "success";
        /**
         * The task failed to add due to a client error and should not be retried
         * without modifying the request as appropriate.
         */
        TaskAddStatus["ClientError"] = "clienterror";
        /**
         * Task failed to add due to a server error and can be retried without
         * modification.
         */
        TaskAddStatus["ServerError"] = "servererror";
    })(TaskAddStatus || (TaskAddStatus = {}));
    /**
     * Defines values for SubtaskState.
     * Possible values include: 'preparing', 'running', 'completed'
     * @readonly
     * @enum {string}
     */
    var SubtaskState;
    (function (SubtaskState) {
        /**
         * The task has been assigned to a compute node, but is waiting for a
         * required Job Preparation task to complete on the node. If the Job
         * Preparation task succeeds, the task will move to running. If the Job
         * Preparation task fails, the task will return to active and will be
         * eligible to be assigned to a different node.
         */
        SubtaskState["Preparing"] = "preparing";
        /**
         * The task is running on a compute node. This includes task-level
         * preparation such as downloading resource files or deploying application
         * packages specified on the task - it does not necessarily mean that the
         * task command line has started executing.
         */
        SubtaskState["Running"] = "running";
        /**
         * The task is no longer eligible to run, usually because the task has
         * finished successfully, or the task has finished unsuccessfully and has
         * exhausted its retry limit. A task is also marked as completed if an error
         * occurred launching the task, or when the task has been terminated.
         */
        SubtaskState["Completed"] = "completed";
    })(SubtaskState || (SubtaskState = {}));
    /**
     * Defines values for StartTaskState.
     * Possible values include: 'running', 'completed'
     * @readonly
     * @enum {string}
     */
    var StartTaskState;
    (function (StartTaskState) {
        /**
         * The start task is currently running.
         */
        StartTaskState["Running"] = "running";
        /**
         * The start task has exited with exit code 0, or the start task has failed
         * and the retry limit has reached, or the start task process did not run due
         * to task preparation errors (such as resource file download failures).
         */
        StartTaskState["Completed"] = "completed";
    })(StartTaskState || (StartTaskState = {}));
    /**
     * Defines values for ComputeNodeState.
     * Possible values include: 'idle', 'rebooting', 'reimaging', 'running',
     * 'unusable', 'creating', 'starting', 'waitingForStartTask',
     * 'startTaskFailed', 'unknown', 'leavingPool', 'offline', 'preempted'
     * @readonly
     * @enum {string}
     */
    var ComputeNodeState;
    (function (ComputeNodeState) {
        /**
         * The node is not currently running a task.
         */
        ComputeNodeState["Idle"] = "idle";
        /**
         * The node is rebooting.
         */
        ComputeNodeState["Rebooting"] = "rebooting";
        /**
         * The node is reimaging.
         */
        ComputeNodeState["Reimaging"] = "reimaging";
        /**
         * The node is running one or more tasks (other than a start task).
         */
        ComputeNodeState["Running"] = "running";
        /**
         * The node cannot be used for task execution due to errors.
         */
        ComputeNodeState["Unusable"] = "unusable";
        /**
         * The Batch service has obtained the underlying virtual machine from Azure
         * Compute, but it has not yet started to join the pool.
         */
        ComputeNodeState["Creating"] = "creating";
        /**
         * The Batch service is starting on the underlying virtual machine.
         */
        ComputeNodeState["Starting"] = "starting";
        /**
         * The start task has started running on the compute node, but waitForSuccess
         * is set and the start task has not yet completed.
         */
        ComputeNodeState["WaitingForStartTask"] = "waitingforstarttask";
        /**
         * The start task has failed on the compute node (and exhausted all retries),
         * and waitForSuccess is set. The node is not usable for running tasks.
         */
        ComputeNodeState["StartTaskFailed"] = "starttaskfailed";
        /**
         * The Batch service has lost contact with the node, and does not know its
         * true state.
         */
        ComputeNodeState["Unknown"] = "unknown";
        /**
         * The node is leaving the pool, either because the user explicitly removed
         * it or because the pool is resizing or autoscaling down.
         */
        ComputeNodeState["LeavingPool"] = "leavingpool";
        /**
         * The node is not currently running a task, and scheduling of new tasks to
         * the node is disabled.
         */
        ComputeNodeState["Offline"] = "offline";
        /**
         * The low-priority node has been preempted. Tasks which were running on the
         * node when it was pre-empted will be rescheduled when another node becomes
         * available.
         */
        ComputeNodeState["Preempted"] = "preempted";
    })(ComputeNodeState || (ComputeNodeState = {}));
    /**
     * Defines values for SchedulingState.
     * Possible values include: 'enabled', 'disabled'
     * @readonly
     * @enum {string}
     */
    var SchedulingState;
    (function (SchedulingState) {
        /**
         * Tasks can be scheduled on the node.
         */
        SchedulingState["Enabled"] = "enabled";
        /**
         * No new tasks will be scheduled on the node. Tasks already running on the
         * node may still run to completion. All nodes start with scheduling enabled.
         */
        SchedulingState["Disabled"] = "disabled";
    })(SchedulingState || (SchedulingState = {}));
    /**
     * Defines values for DisableJobOption.
     * Possible values include: 'requeue', 'terminate', 'wait'
     * @readonly
     * @enum {string}
     */
    var DisableJobOption;
    (function (DisableJobOption) {
        /**
         * Terminate running tasks and requeue them. The tasks will run again when
         * the job is enabled.
         */
        DisableJobOption["Requeue"] = "requeue";
        /**
         * Terminate running tasks. The tasks will be completed with failureInfo
         * indicating that they were terminated, and will not run again.
         */
        DisableJobOption["Terminate"] = "terminate";
        /**
         * Allow currently running tasks to complete.
         */
        DisableJobOption["Wait"] = "wait";
    })(DisableJobOption || (DisableJobOption = {}));
    /**
     * Defines values for ComputeNodeDeallocationOption.
     * Possible values include: 'requeue', 'terminate', 'taskCompletion',
     * 'retainedData'
     * @readonly
     * @enum {string}
     */
    var ComputeNodeDeallocationOption;
    (function (ComputeNodeDeallocationOption) {
        /**
         * Terminate running task processes and requeue the tasks. The tasks will run
         * again when a node is available. Remove nodes as soon as tasks have been
         * terminated.
         */
        ComputeNodeDeallocationOption["Requeue"] = "requeue";
        /**
         * Terminate running tasks. The tasks will be completed with failureInfo
         * indicating that they were terminated, and will not run again. Remove nodes
         * as soon as tasks have been terminated.
         */
        ComputeNodeDeallocationOption["Terminate"] = "terminate";
        /**
         * Allow currently running tasks to complete. Schedule no new tasks while
         * waiting. Remove nodes when all tasks have completed.
         */
        ComputeNodeDeallocationOption["TaskCompletion"] = "taskcompletion";
        /**
         * Allow currently running tasks to complete, then wait for all task data
         * retention periods to expire. Schedule no new tasks while waiting. Remove
         * nodes when all task retention periods have expired.
         */
        ComputeNodeDeallocationOption["RetainedData"] = "retaineddata";
    })(ComputeNodeDeallocationOption || (ComputeNodeDeallocationOption = {}));
    /**
     * Defines values for ComputeNodeRebootOption.
     * Possible values include: 'requeue', 'terminate', 'taskCompletion',
     * 'retainedData'
     * @readonly
     * @enum {string}
     */
    var ComputeNodeRebootOption;
    (function (ComputeNodeRebootOption) {
        /**
         * Terminate running task processes and requeue the tasks. The tasks will run
         * again when a node is available. Restart the node as soon as tasks have
         * been terminated.
         */
        ComputeNodeRebootOption["Requeue"] = "requeue";
        /**
         * Terminate running tasks. The tasks will be completed with failureInfo
         * indicating that they were terminated, and will not run again. Restart the
         * node as soon as tasks have been terminated.
         */
        ComputeNodeRebootOption["Terminate"] = "terminate";
        /**
         * Allow currently running tasks to complete. Schedule no new tasks while
         * waiting. Restart the node when all tasks have completed.
         */
        ComputeNodeRebootOption["TaskCompletion"] = "taskcompletion";
        /**
         * Allow currently running tasks to complete, then wait for all task data
         * retention periods to expire. Schedule no new tasks while waiting. Restart
         * the node when all task retention periods have expired.
         */
        ComputeNodeRebootOption["RetainedData"] = "retaineddata";
    })(ComputeNodeRebootOption || (ComputeNodeRebootOption = {}));
    /**
     * Defines values for ComputeNodeReimageOption.
     * Possible values include: 'requeue', 'terminate', 'taskCompletion',
     * 'retainedData'
     * @readonly
     * @enum {string}
     */
    var ComputeNodeReimageOption;
    (function (ComputeNodeReimageOption) {
        /**
         * Terminate running task processes and requeue the tasks. The tasks will run
         * again when a node is available. Reimage the node as soon as tasks have
         * been terminated.
         */
        ComputeNodeReimageOption["Requeue"] = "requeue";
        /**
         * Terminate running tasks. The tasks will be completed with failureInfo
         * indicating that they were terminated, and will not run again. Reimage the
         * node as soon as tasks have been terminated.
         */
        ComputeNodeReimageOption["Terminate"] = "terminate";
        /**
         * Allow currently running tasks to complete. Schedule no new tasks while
         * waiting. Reimage the node when all tasks have completed.
         */
        ComputeNodeReimageOption["TaskCompletion"] = "taskcompletion";
        /**
         * Allow currently running tasks to complete, then wait for all task data
         * retention periods to expire. Schedule no new tasks while waiting. Reimage
         * the node when all task retention periods have expired.
         */
        ComputeNodeReimageOption["RetainedData"] = "retaineddata";
    })(ComputeNodeReimageOption || (ComputeNodeReimageOption = {}));
    /**
     * Defines values for DisableComputeNodeSchedulingOption.
     * Possible values include: 'requeue', 'terminate', 'taskCompletion'
     * @readonly
     * @enum {string}
     */
    var DisableComputeNodeSchedulingOption;
    (function (DisableComputeNodeSchedulingOption) {
        /**
         * Terminate running task processes and requeue the tasks. The tasks may run
         * again on other compute nodes, or when task scheduling is re-enabled on
         * this node. Enter offline state as soon as tasks have been terminated.
         */
        DisableComputeNodeSchedulingOption["Requeue"] = "requeue";
        /**
         * Terminate running tasks. The tasks will be completed with failureInfo
         * indicating that they were terminated, and will not run again. Enter
         * offline state as soon as tasks have been terminated.
         */
        DisableComputeNodeSchedulingOption["Terminate"] = "terminate";
        /**
         * Allow currently running tasks to complete. Schedule no new tasks while
         * waiting. Enter offline state when all tasks have completed.
         */
        DisableComputeNodeSchedulingOption["TaskCompletion"] = "taskcompletion";
    })(DisableComputeNodeSchedulingOption || (DisableComputeNodeSchedulingOption = {}));

    var index = /*#__PURE__*/Object.freeze({
        get OSType () { return OSType; },
        get AccessScope () { return AccessScope; },
        get CertificateState () { return CertificateState; },
        get CertificateFormat () { return CertificateFormat; },
        get JobAction () { return JobAction; },
        get DependencyAction () { return DependencyAction; },
        get AutoUserScope () { return AutoUserScope; },
        get ElevationLevel () { return ElevationLevel; },
        get OutputFileUploadCondition () { return OutputFileUploadCondition; },
        get ComputeNodeFillType () { return ComputeNodeFillType; },
        get CertificateStoreLocation () { return CertificateStoreLocation; },
        get CertificateVisibility () { return CertificateVisibility; },
        get CachingType () { return CachingType; },
        get StorageAccountType () { return StorageAccountType; },
        get InboundEndpointProtocol () { return InboundEndpointProtocol; },
        get NetworkSecurityGroupRuleAccess () { return NetworkSecurityGroupRuleAccess; },
        get PoolLifetimeOption () { return PoolLifetimeOption; },
        get OnAllTasksComplete () { return OnAllTasksComplete; },
        get OnTaskFailure () { return OnTaskFailure; },
        get JobScheduleState () { return JobScheduleState; },
        get ErrorCategory () { return ErrorCategory; },
        get JobState () { return JobState; },
        get JobPreparationTaskState () { return JobPreparationTaskState; },
        get TaskExecutionResult () { return TaskExecutionResult; },
        get JobReleaseTaskState () { return JobReleaseTaskState; },
        get PoolState () { return PoolState; },
        get AllocationState () { return AllocationState; },
        get TaskState () { return TaskState; },
        get TaskAddStatus () { return TaskAddStatus; },
        get SubtaskState () { return SubtaskState; },
        get StartTaskState () { return StartTaskState; },
        get ComputeNodeState () { return ComputeNodeState; },
        get SchedulingState () { return SchedulingState; },
        get DisableJobOption () { return DisableJobOption; },
        get ComputeNodeDeallocationOption () { return ComputeNodeDeallocationOption; },
        get ComputeNodeRebootOption () { return ComputeNodeRebootOption; },
        get ComputeNodeReimageOption () { return ComputeNodeReimageOption; },
        get DisableComputeNodeSchedulingOption () { return DisableComputeNodeSchedulingOption; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var PoolUsageMetrics = {
        serializedName: "PoolUsageMetrics",
        type: {
            name: "Composite",
            className: "PoolUsageMetrics",
            modelProperties: {
                poolId: {
                    required: true,
                    serializedName: "poolId",
                    type: {
                        name: "String"
                    }
                },
                startTime: {
                    required: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    required: true,
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                vmSize: {
                    required: true,
                    serializedName: "vmSize",
                    type: {
                        name: "String"
                    }
                },
                totalCoreHours: {
                    required: true,
                    serializedName: "totalCoreHours",
                    type: {
                        name: "Number"
                    }
                },
                dataIngressGiB: {
                    required: true,
                    serializedName: "dataIngressGiB",
                    type: {
                        name: "Number"
                    }
                },
                dataEgressGiB: {
                    required: true,
                    serializedName: "dataEgressGiB",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ImageReference = {
        serializedName: "ImageReference",
        type: {
            name: "Composite",
            className: "ImageReference",
            modelProperties: {
                publisher: {
                    serializedName: "publisher",
                    type: {
                        name: "String"
                    }
                },
                offer: {
                    serializedName: "offer",
                    type: {
                        name: "String"
                    }
                },
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                },
                virtualMachineImageId: {
                    serializedName: "virtualMachineImageId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NodeAgentSku = {
        serializedName: "NodeAgentSku",
        type: {
            name: "Composite",
            className: "NodeAgentSku",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                verifiedImageReferences: {
                    serializedName: "verifiedImageReferences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImageReference"
                            }
                        }
                    }
                },
                osType: {
                    serializedName: "osType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "linux",
                            "windows"
                        ]
                    }
                }
            }
        }
    };
    var AuthenticationTokenSettings = {
        serializedName: "AuthenticationTokenSettings",
        type: {
            name: "Composite",
            className: "AuthenticationTokenSettings",
            modelProperties: {
                access: {
                    serializedName: "access",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Enum",
                                allowedValues: [
                                    "job"
                                ]
                            }
                        }
                    }
                }
            }
        }
    };
    var UsageStatistics = {
        serializedName: "UsageStatistics",
        type: {
            name: "Composite",
            className: "UsageStatistics",
            modelProperties: {
                startTime: {
                    required: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastUpdateTime: {
                    required: true,
                    serializedName: "lastUpdateTime",
                    type: {
                        name: "DateTime"
                    }
                },
                dedicatedCoreTime: {
                    required: true,
                    serializedName: "dedicatedCoreTime",
                    type: {
                        name: "TimeSpan"
                    }
                }
            }
        }
    };
    var ResourceStatistics = {
        serializedName: "ResourceStatistics",
        type: {
            name: "Composite",
            className: "ResourceStatistics",
            modelProperties: {
                startTime: {
                    required: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastUpdateTime: {
                    required: true,
                    serializedName: "lastUpdateTime",
                    type: {
                        name: "DateTime"
                    }
                },
                avgCPUPercentage: {
                    required: true,
                    serializedName: "avgCPUPercentage",
                    type: {
                        name: "Number"
                    }
                },
                avgMemoryGiB: {
                    required: true,
                    serializedName: "avgMemoryGiB",
                    type: {
                        name: "Number"
                    }
                },
                peakMemoryGiB: {
                    required: true,
                    serializedName: "peakMemoryGiB",
                    type: {
                        name: "Number"
                    }
                },
                avgDiskGiB: {
                    required: true,
                    serializedName: "avgDiskGiB",
                    type: {
                        name: "Number"
                    }
                },
                peakDiskGiB: {
                    required: true,
                    serializedName: "peakDiskGiB",
                    type: {
                        name: "Number"
                    }
                },
                diskReadIOps: {
                    required: true,
                    serializedName: "diskReadIOps",
                    type: {
                        name: "Number"
                    }
                },
                diskWriteIOps: {
                    required: true,
                    serializedName: "diskWriteIOps",
                    type: {
                        name: "Number"
                    }
                },
                diskReadGiB: {
                    required: true,
                    serializedName: "diskReadGiB",
                    type: {
                        name: "Number"
                    }
                },
                diskWriteGiB: {
                    required: true,
                    serializedName: "diskWriteGiB",
                    type: {
                        name: "Number"
                    }
                },
                networkReadGiB: {
                    required: true,
                    serializedName: "networkReadGiB",
                    type: {
                        name: "Number"
                    }
                },
                networkWriteGiB: {
                    required: true,
                    serializedName: "networkWriteGiB",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var PoolStatistics = {
        serializedName: "PoolStatistics",
        type: {
            name: "Composite",
            className: "PoolStatistics",
            modelProperties: {
                url: {
                    required: true,
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                },
                startTime: {
                    required: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastUpdateTime: {
                    required: true,
                    serializedName: "lastUpdateTime",
                    type: {
                        name: "DateTime"
                    }
                },
                usageStats: {
                    serializedName: "usageStats",
                    type: {
                        name: "Composite",
                        className: "UsageStatistics"
                    }
                },
                resourceStats: {
                    serializedName: "resourceStats",
                    type: {
                        name: "Composite",
                        className: "ResourceStatistics"
                    }
                }
            }
        }
    };
    var JobStatistics = {
        serializedName: "JobStatistics",
        type: {
            name: "Composite",
            className: "JobStatistics",
            modelProperties: {
                url: {
                    required: true,
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                },
                startTime: {
                    required: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastUpdateTime: {
                    required: true,
                    serializedName: "lastUpdateTime",
                    type: {
                        name: "DateTime"
                    }
                },
                userCPUTime: {
                    required: true,
                    serializedName: "userCPUTime",
                    type: {
                        name: "TimeSpan"
                    }
                },
                kernelCPUTime: {
                    required: true,
                    serializedName: "kernelCPUTime",
                    type: {
                        name: "TimeSpan"
                    }
                },
                wallClockTime: {
                    required: true,
                    serializedName: "wallClockTime",
                    type: {
                        name: "TimeSpan"
                    }
                },
                readIOps: {
                    required: true,
                    serializedName: "readIOps",
                    type: {
                        name: "Number"
                    }
                },
                writeIOps: {
                    required: true,
                    serializedName: "writeIOps",
                    type: {
                        name: "Number"
                    }
                },
                readIOGiB: {
                    required: true,
                    serializedName: "readIOGiB",
                    type: {
                        name: "Number"
                    }
                },
                writeIOGiB: {
                    required: true,
                    serializedName: "writeIOGiB",
                    type: {
                        name: "Number"
                    }
                },
                numSucceededTasks: {
                    required: true,
                    serializedName: "numSucceededTasks",
                    type: {
                        name: "Number"
                    }
                },
                numFailedTasks: {
                    required: true,
                    serializedName: "numFailedTasks",
                    type: {
                        name: "Number"
                    }
                },
                numTaskRetries: {
                    required: true,
                    serializedName: "numTaskRetries",
                    type: {
                        name: "Number"
                    }
                },
                waitTime: {
                    required: true,
                    serializedName: "waitTime",
                    type: {
                        name: "TimeSpan"
                    }
                }
            }
        }
    };
    var NameValuePair = {
        serializedName: "NameValuePair",
        type: {
            name: "Composite",
            className: "NameValuePair",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DeleteCertificateError = {
        serializedName: "DeleteCertificateError",
        type: {
            name: "Composite",
            className: "DeleteCertificateError",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                values: {
                    serializedName: "values",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NameValuePair"
                            }
                        }
                    }
                }
            }
        }
    };
    var Certificate = {
        serializedName: "Certificate",
        type: {
            name: "Composite",
            className: "Certificate",
            modelProperties: {
                thumbprint: {
                    serializedName: "thumbprint",
                    type: {
                        name: "String"
                    }
                },
                thumbprintAlgorithm: {
                    serializedName: "thumbprintAlgorithm",
                    type: {
                        name: "String"
                    }
                },
                url: {
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                },
                state: {
                    serializedName: "state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "active",
                            "deleting",
                            "deletefailed"
                        ]
                    }
                },
                stateTransitionTime: {
                    serializedName: "stateTransitionTime",
                    type: {
                        name: "DateTime"
                    }
                },
                previousState: {
                    serializedName: "previousState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "active",
                            "deleting",
                            "deletefailed"
                        ]
                    }
                },
                previousStateTransitionTime: {
                    serializedName: "previousStateTransitionTime",
                    type: {
                        name: "DateTime"
                    }
                },
                publicData: {
                    serializedName: "publicData",
                    type: {
                        name: "String"
                    }
                },
                deleteCertificateError: {
                    serializedName: "deleteCertificateError",
                    type: {
                        name: "Composite",
                        className: "DeleteCertificateError"
                    }
                }
            }
        }
    };
    var ApplicationPackageReference = {
        serializedName: "ApplicationPackageReference",
        type: {
            name: "Composite",
            className: "ApplicationPackageReference",
            modelProperties: {
                applicationId: {
                    required: true,
                    serializedName: "applicationId",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationSummary = {
        serializedName: "ApplicationSummary",
        type: {
            name: "Composite",
            className: "ApplicationSummary",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    required: true,
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                versions: {
                    required: true,
                    serializedName: "versions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var CertificateAddParameter = {
        serializedName: "CertificateAddParameter",
        type: {
            name: "Composite",
            className: "CertificateAddParameter",
            modelProperties: {
                thumbprint: {
                    required: true,
                    serializedName: "thumbprint",
                    type: {
                        name: "String"
                    }
                },
                thumbprintAlgorithm: {
                    required: true,
                    serializedName: "thumbprintAlgorithm",
                    type: {
                        name: "String"
                    }
                },
                data: {
                    required: true,
                    serializedName: "data",
                    type: {
                        name: "String"
                    }
                },
                certificateFormat: {
                    serializedName: "certificateFormat",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "pfx",
                            "cer"
                        ]
                    }
                },
                password: {
                    serializedName: "password",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FileProperties = {
        serializedName: "FileProperties",
        type: {
            name: "Composite",
            className: "FileProperties",
            modelProperties: {
                creationTime: {
                    serializedName: "creationTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastModified: {
                    required: true,
                    serializedName: "lastModified",
                    type: {
                        name: "DateTime"
                    }
                },
                contentLength: {
                    required: true,
                    serializedName: "contentLength",
                    type: {
                        name: "Number"
                    }
                },
                contentType: {
                    serializedName: "contentType",
                    type: {
                        name: "String"
                    }
                },
                fileMode: {
                    serializedName: "fileMode",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NodeFile = {
        serializedName: "NodeFile",
        type: {
            name: "Composite",
            className: "NodeFile",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                url: {
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                },
                isDirectory: {
                    serializedName: "isDirectory",
                    type: {
                        name: "Boolean"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "FileProperties"
                    }
                }
            }
        }
    };
    var Schedule = {
        serializedName: "Schedule",
        type: {
            name: "Composite",
            className: "Schedule",
            modelProperties: {
                doNotRunUntil: {
                    serializedName: "doNotRunUntil",
                    type: {
                        name: "DateTime"
                    }
                },
                doNotRunAfter: {
                    serializedName: "doNotRunAfter",
                    type: {
                        name: "DateTime"
                    }
                },
                startWindow: {
                    serializedName: "startWindow",
                    type: {
                        name: "TimeSpan"
                    }
                },
                recurrenceInterval: {
                    serializedName: "recurrenceInterval",
                    type: {
                        name: "TimeSpan"
                    }
                }
            }
        }
    };
    var JobConstraints = {
        serializedName: "JobConstraints",
        type: {
            name: "Composite",
            className: "JobConstraints",
            modelProperties: {
                maxWallClockTime: {
                    serializedName: "maxWallClockTime",
                    type: {
                        name: "TimeSpan"
                    }
                },
                maxTaskRetryCount: {
                    serializedName: "maxTaskRetryCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ContainerRegistry = {
        serializedName: "ContainerRegistry",
        type: {
            name: "Composite",
            className: "ContainerRegistry",
            modelProperties: {
                registryServer: {
                    serializedName: "registryServer",
                    type: {
                        name: "String"
                    }
                },
                userName: {
                    required: true,
                    serializedName: "username",
                    type: {
                        name: "String"
                    }
                },
                password: {
                    required: true,
                    serializedName: "password",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TaskContainerSettings = {
        serializedName: "TaskContainerSettings",
        type: {
            name: "Composite",
            className: "TaskContainerSettings",
            modelProperties: {
                containerRunOptions: {
                    serializedName: "containerRunOptions",
                    type: {
                        name: "String"
                    }
                },
                imageName: {
                    required: true,
                    serializedName: "imageName",
                    type: {
                        name: "String"
                    }
                },
                registry: {
                    serializedName: "registry",
                    type: {
                        name: "Composite",
                        className: "ContainerRegistry"
                    }
                }
            }
        }
    };
    var ResourceFile = {
        serializedName: "ResourceFile",
        type: {
            name: "Composite",
            className: "ResourceFile",
            modelProperties: {
                blobSource: {
                    required: true,
                    serializedName: "blobSource",
                    type: {
                        name: "String"
                    }
                },
                filePath: {
                    required: true,
                    serializedName: "filePath",
                    type: {
                        name: "String"
                    }
                },
                fileMode: {
                    serializedName: "fileMode",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EnvironmentSetting = {
        serializedName: "EnvironmentSetting",
        type: {
            name: "Composite",
            className: "EnvironmentSetting",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ExitOptions = {
        serializedName: "ExitOptions",
        type: {
            name: "Composite",
            className: "ExitOptions",
            modelProperties: {
                jobAction: {
                    serializedName: "jobAction",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "none",
                            "disable",
                            "terminate"
                        ]
                    }
                },
                dependencyAction: {
                    serializedName: "dependencyAction",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "satisfy",
                            "block"
                        ]
                    }
                }
            }
        }
    };
    var ExitCodeMapping = {
        serializedName: "ExitCodeMapping",
        type: {
            name: "Composite",
            className: "ExitCodeMapping",
            modelProperties: {
                code: {
                    required: true,
                    serializedName: "code",
                    type: {
                        name: "Number"
                    }
                },
                exitOptions: {
                    required: true,
                    serializedName: "exitOptions",
                    type: {
                        name: "Composite",
                        className: "ExitOptions"
                    }
                }
            }
        }
    };
    var ExitCodeRangeMapping = {
        serializedName: "ExitCodeRangeMapping",
        type: {
            name: "Composite",
            className: "ExitCodeRangeMapping",
            modelProperties: {
                start: {
                    required: true,
                    serializedName: "start",
                    type: {
                        name: "Number"
                    }
                },
                end: {
                    required: true,
                    serializedName: "end",
                    type: {
                        name: "Number"
                    }
                },
                exitOptions: {
                    required: true,
                    serializedName: "exitOptions",
                    type: {
                        name: "Composite",
                        className: "ExitOptions"
                    }
                }
            }
        }
    };
    var ExitConditions = {
        serializedName: "ExitConditions",
        type: {
            name: "Composite",
            className: "ExitConditions",
            modelProperties: {
                exitCodes: {
                    serializedName: "exitCodes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExitCodeMapping"
                            }
                        }
                    }
                },
                exitCodeRanges: {
                    serializedName: "exitCodeRanges",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExitCodeRangeMapping"
                            }
                        }
                    }
                },
                preProcessingError: {
                    serializedName: "preProcessingError",
                    type: {
                        name: "Composite",
                        className: "ExitOptions"
                    }
                },
                fileUploadError: {
                    serializedName: "fileUploadError",
                    type: {
                        name: "Composite",
                        className: "ExitOptions"
                    }
                },
                default: {
                    serializedName: "default",
                    type: {
                        name: "Composite",
                        className: "ExitOptions"
                    }
                }
            }
        }
    };
    var AutoUserSpecification = {
        serializedName: "AutoUserSpecification",
        type: {
            name: "Composite",
            className: "AutoUserSpecification",
            modelProperties: {
                scope: {
                    serializedName: "scope",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "task",
                            "pool"
                        ]
                    }
                },
                elevationLevel: {
                    serializedName: "elevationLevel",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "nonadmin",
                            "admin"
                        ]
                    }
                }
            }
        }
    };
    var UserIdentity = {
        serializedName: "UserIdentity",
        type: {
            name: "Composite",
            className: "UserIdentity",
            modelProperties: {
                userName: {
                    serializedName: "username",
                    type: {
                        name: "String"
                    }
                },
                autoUser: {
                    serializedName: "autoUser",
                    type: {
                        name: "Composite",
                        className: "AutoUserSpecification"
                    }
                }
            }
        }
    };
    var LinuxUserConfiguration = {
        serializedName: "LinuxUserConfiguration",
        type: {
            name: "Composite",
            className: "LinuxUserConfiguration",
            modelProperties: {
                uid: {
                    serializedName: "uid",
                    type: {
                        name: "Number"
                    }
                },
                gid: {
                    serializedName: "gid",
                    type: {
                        name: "Number"
                    }
                },
                sshPrivateKey: {
                    serializedName: "sshPrivateKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UserAccount = {
        serializedName: "UserAccount",
        type: {
            name: "Composite",
            className: "UserAccount",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                password: {
                    required: true,
                    serializedName: "password",
                    type: {
                        name: "String"
                    }
                },
                elevationLevel: {
                    serializedName: "elevationLevel",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "nonadmin",
                            "admin"
                        ]
                    }
                },
                linuxUserConfiguration: {
                    serializedName: "linuxUserConfiguration",
                    type: {
                        name: "Composite",
                        className: "LinuxUserConfiguration"
                    }
                }
            }
        }
    };
    var TaskConstraints = {
        serializedName: "TaskConstraints",
        type: {
            name: "Composite",
            className: "TaskConstraints",
            modelProperties: {
                maxWallClockTime: {
                    serializedName: "maxWallClockTime",
                    type: {
                        name: "TimeSpan"
                    }
                },
                retentionTime: {
                    serializedName: "retentionTime",
                    type: {
                        name: "TimeSpan"
                    }
                },
                maxTaskRetryCount: {
                    serializedName: "maxTaskRetryCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var OutputFileBlobContainerDestination = {
        serializedName: "OutputFileBlobContainerDestination",
        type: {
            name: "Composite",
            className: "OutputFileBlobContainerDestination",
            modelProperties: {
                path: {
                    serializedName: "path",
                    type: {
                        name: "String"
                    }
                },
                containerUrl: {
                    required: true,
                    serializedName: "containerUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OutputFileDestination = {
        serializedName: "OutputFileDestination",
        type: {
            name: "Composite",
            className: "OutputFileDestination",
            modelProperties: {
                container: {
                    serializedName: "container",
                    type: {
                        name: "Composite",
                        className: "OutputFileBlobContainerDestination"
                    }
                }
            }
        }
    };
    var OutputFileUploadOptions = {
        serializedName: "OutputFileUploadOptions",
        type: {
            name: "Composite",
            className: "OutputFileUploadOptions",
            modelProperties: {
                uploadCondition: {
                    required: true,
                    serializedName: "uploadCondition",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "tasksuccess",
                            "taskfailure",
                            "taskcompletion"
                        ]
                    }
                }
            }
        }
    };
    var OutputFile = {
        serializedName: "OutputFile",
        type: {
            name: "Composite",
            className: "OutputFile",
            modelProperties: {
                filePattern: {
                    required: true,
                    serializedName: "filePattern",
                    type: {
                        name: "String"
                    }
                },
                destination: {
                    required: true,
                    serializedName: "destination",
                    type: {
                        name: "Composite",
                        className: "OutputFileDestination"
                    }
                },
                uploadOptions: {
                    required: true,
                    serializedName: "uploadOptions",
                    type: {
                        name: "Composite",
                        className: "OutputFileUploadOptions"
                    }
                }
            }
        }
    };
    var JobManagerTask = {
        serializedName: "JobManagerTask",
        type: {
            name: "Composite",
            className: "JobManagerTask",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                commandLine: {
                    required: true,
                    serializedName: "commandLine",
                    type: {
                        name: "String"
                    }
                },
                containerSettings: {
                    serializedName: "containerSettings",
                    type: {
                        name: "Composite",
                        className: "TaskContainerSettings"
                    }
                },
                resourceFiles: {
                    serializedName: "resourceFiles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceFile"
                            }
                        }
                    }
                },
                outputFiles: {
                    serializedName: "outputFiles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OutputFile"
                            }
                        }
                    }
                },
                environmentSettings: {
                    serializedName: "environmentSettings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EnvironmentSetting"
                            }
                        }
                    }
                },
                constraints: {
                    serializedName: "constraints",
                    type: {
                        name: "Composite",
                        className: "TaskConstraints"
                    }
                },
                killJobOnCompletion: {
                    serializedName: "killJobOnCompletion",
                    type: {
                        name: "Boolean"
                    }
                },
                userIdentity: {
                    serializedName: "userIdentity",
                    type: {
                        name: "Composite",
                        className: "UserIdentity"
                    }
                },
                runExclusive: {
                    serializedName: "runExclusive",
                    type: {
                        name: "Boolean"
                    }
                },
                applicationPackageReferences: {
                    serializedName: "applicationPackageReferences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationPackageReference"
                            }
                        }
                    }
                },
                authenticationTokenSettings: {
                    serializedName: "authenticationTokenSettings",
                    type: {
                        name: "Composite",
                        className: "AuthenticationTokenSettings"
                    }
                },
                allowLowPriorityNode: {
                    serializedName: "allowLowPriorityNode",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var JobPreparationTask = {
        serializedName: "JobPreparationTask",
        type: {
            name: "Composite",
            className: "JobPreparationTask",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                commandLine: {
                    required: true,
                    serializedName: "commandLine",
                    type: {
                        name: "String"
                    }
                },
                containerSettings: {
                    serializedName: "containerSettings",
                    type: {
                        name: "Composite",
                        className: "TaskContainerSettings"
                    }
                },
                resourceFiles: {
                    serializedName: "resourceFiles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceFile"
                            }
                        }
                    }
                },
                environmentSettings: {
                    serializedName: "environmentSettings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EnvironmentSetting"
                            }
                        }
                    }
                },
                constraints: {
                    serializedName: "constraints",
                    type: {
                        name: "Composite",
                        className: "TaskConstraints"
                    }
                },
                waitForSuccess: {
                    serializedName: "waitForSuccess",
                    type: {
                        name: "Boolean"
                    }
                },
                userIdentity: {
                    serializedName: "userIdentity",
                    type: {
                        name: "Composite",
                        className: "UserIdentity"
                    }
                },
                rerunOnNodeRebootAfterSuccess: {
                    serializedName: "rerunOnNodeRebootAfterSuccess",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var JobReleaseTask = {
        serializedName: "JobReleaseTask",
        type: {
            name: "Composite",
            className: "JobReleaseTask",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                commandLine: {
                    required: true,
                    serializedName: "commandLine",
                    type: {
                        name: "String"
                    }
                },
                containerSettings: {
                    serializedName: "containerSettings",
                    type: {
                        name: "Composite",
                        className: "TaskContainerSettings"
                    }
                },
                resourceFiles: {
                    serializedName: "resourceFiles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceFile"
                            }
                        }
                    }
                },
                environmentSettings: {
                    serializedName: "environmentSettings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EnvironmentSetting"
                            }
                        }
                    }
                },
                maxWallClockTime: {
                    serializedName: "maxWallClockTime",
                    type: {
                        name: "TimeSpan"
                    }
                },
                retentionTime: {
                    serializedName: "retentionTime",
                    type: {
                        name: "TimeSpan"
                    }
                },
                userIdentity: {
                    serializedName: "userIdentity",
                    type: {
                        name: "Composite",
                        className: "UserIdentity"
                    }
                }
            }
        }
    };
    var TaskSchedulingPolicy = {
        serializedName: "TaskSchedulingPolicy",
        type: {
            name: "Composite",
            className: "TaskSchedulingPolicy",
            modelProperties: {
                nodeFillType: {
                    required: true,
                    serializedName: "nodeFillType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "spread",
                            "pack"
                        ]
                    }
                }
            }
        }
    };
    var StartTask = {
        serializedName: "StartTask",
        type: {
            name: "Composite",
            className: "StartTask",
            modelProperties: {
                commandLine: {
                    required: true,
                    serializedName: "commandLine",
                    type: {
                        name: "String"
                    }
                },
                containerSettings: {
                    serializedName: "containerSettings",
                    type: {
                        name: "Composite",
                        className: "TaskContainerSettings"
                    }
                },
                resourceFiles: {
                    serializedName: "resourceFiles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceFile"
                            }
                        }
                    }
                },
                environmentSettings: {
                    serializedName: "environmentSettings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EnvironmentSetting"
                            }
                        }
                    }
                },
                userIdentity: {
                    serializedName: "userIdentity",
                    type: {
                        name: "Composite",
                        className: "UserIdentity"
                    }
                },
                maxTaskRetryCount: {
                    serializedName: "maxTaskRetryCount",
                    type: {
                        name: "Number"
                    }
                },
                waitForSuccess: {
                    serializedName: "waitForSuccess",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var CertificateReference = {
        serializedName: "CertificateReference",
        type: {
            name: "Composite",
            className: "CertificateReference",
            modelProperties: {
                thumbprint: {
                    required: true,
                    serializedName: "thumbprint",
                    type: {
                        name: "String"
                    }
                },
                thumbprintAlgorithm: {
                    required: true,
                    serializedName: "thumbprintAlgorithm",
                    type: {
                        name: "String"
                    }
                },
                storeLocation: {
                    serializedName: "storeLocation",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "currentuser",
                            "localmachine"
                        ]
                    }
                },
                storeName: {
                    serializedName: "storeName",
                    type: {
                        name: "String"
                    }
                },
                visibility: {
                    serializedName: "visibility",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Enum",
                                allowedValues: [
                                    "starttask",
                                    "task",
                                    "remoteuser"
                                ]
                            }
                        }
                    }
                }
            }
        }
    };
    var MetadataItem = {
        serializedName: "MetadataItem",
        type: {
            name: "Composite",
            className: "MetadataItem",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CloudServiceConfiguration = {
        serializedName: "CloudServiceConfiguration",
        type: {
            name: "Composite",
            className: "CloudServiceConfiguration",
            modelProperties: {
                osFamily: {
                    required: true,
                    serializedName: "osFamily",
                    type: {
                        name: "String"
                    }
                },
                targetOSVersion: {
                    serializedName: "targetOSVersion",
                    type: {
                        name: "String"
                    }
                },
                currentOSVersion: {
                    readOnly: true,
                    serializedName: "currentOSVersion",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OSDisk = {
        serializedName: "OSDisk",
        type: {
            name: "Composite",
            className: "OSDisk",
            modelProperties: {
                caching: {
                    serializedName: "caching",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "none",
                            "readonly",
                            "readwrite"
                        ]
                    }
                }
            }
        }
    };
    var WindowsConfiguration = {
        serializedName: "WindowsConfiguration",
        type: {
            name: "Composite",
            className: "WindowsConfiguration",
            modelProperties: {
                enableAutomaticUpdates: {
                    serializedName: "enableAutomaticUpdates",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var DataDisk = {
        serializedName: "DataDisk",
        type: {
            name: "Composite",
            className: "DataDisk",
            modelProperties: {
                lun: {
                    required: true,
                    serializedName: "lun",
                    type: {
                        name: "Number"
                    }
                },
                caching: {
                    serializedName: "caching",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "none",
                            "readonly",
                            "readwrite"
                        ]
                    }
                },
                diskSizeGB: {
                    required: true,
                    serializedName: "diskSizeGB",
                    type: {
                        name: "Number"
                    }
                },
                storageAccountType: {
                    serializedName: "storageAccountType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "standard_lrs",
                            "premium_lrs"
                        ]
                    }
                }
            }
        }
    };
    var ContainerConfiguration = {
        serializedName: "ContainerConfiguration",
        type: {
            name: "Composite",
            className: "ContainerConfiguration",
            modelProperties: {
                type: {
                    required: true,
                    isConstant: true,
                    serializedName: "type",
                    defaultValue: 'dockerCompatible',
                    type: {
                        name: "String"
                    }
                },
                containerImageNames: {
                    serializedName: "containerImageNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                containerRegistries: {
                    serializedName: "containerRegistries",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ContainerRegistry"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualMachineConfiguration = {
        serializedName: "VirtualMachineConfiguration",
        type: {
            name: "Composite",
            className: "VirtualMachineConfiguration",
            modelProperties: {
                imageReference: {
                    required: true,
                    serializedName: "imageReference",
                    type: {
                        name: "Composite",
                        className: "ImageReference"
                    }
                },
                osDisk: {
                    serializedName: "osDisk",
                    type: {
                        name: "Composite",
                        className: "OSDisk"
                    }
                },
                nodeAgentSKUId: {
                    required: true,
                    serializedName: "nodeAgentSKUId",
                    type: {
                        name: "String"
                    }
                },
                windowsConfiguration: {
                    serializedName: "windowsConfiguration",
                    type: {
                        name: "Composite",
                        className: "WindowsConfiguration"
                    }
                },
                dataDisks: {
                    serializedName: "dataDisks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DataDisk"
                            }
                        }
                    }
                },
                licenseType: {
                    serializedName: "licenseType",
                    type: {
                        name: "String"
                    }
                },
                containerConfiguration: {
                    serializedName: "containerConfiguration",
                    type: {
                        name: "Composite",
                        className: "ContainerConfiguration"
                    }
                }
            }
        }
    };
    var NetworkSecurityGroupRule = {
        serializedName: "NetworkSecurityGroupRule",
        type: {
            name: "Composite",
            className: "NetworkSecurityGroupRule",
            modelProperties: {
                priority: {
                    required: true,
                    serializedName: "priority",
                    type: {
                        name: "Number"
                    }
                },
                access: {
                    required: true,
                    serializedName: "access",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "allow",
                            "deny"
                        ]
                    }
                },
                sourceAddressPrefix: {
                    required: true,
                    serializedName: "sourceAddressPrefix",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InboundNATPool = {
        serializedName: "InboundNATPool",
        type: {
            name: "Composite",
            className: "InboundNATPool",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                protocol: {
                    required: true,
                    serializedName: "protocol",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "tcp",
                            "udp"
                        ]
                    }
                },
                backendPort: {
                    required: true,
                    serializedName: "backendPort",
                    type: {
                        name: "Number"
                    }
                },
                frontendPortRangeStart: {
                    required: true,
                    serializedName: "frontendPortRangeStart",
                    type: {
                        name: "Number"
                    }
                },
                frontendPortRangeEnd: {
                    required: true,
                    serializedName: "frontendPortRangeEnd",
                    type: {
                        name: "Number"
                    }
                },
                networkSecurityGroupRules: {
                    serializedName: "networkSecurityGroupRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkSecurityGroupRule"
                            }
                        }
                    }
                }
            }
        }
    };
    var PoolEndpointConfiguration = {
        serializedName: "PoolEndpointConfiguration",
        type: {
            name: "Composite",
            className: "PoolEndpointConfiguration",
            modelProperties: {
                inboundNATPools: {
                    required: true,
                    serializedName: "inboundNATPools",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InboundNATPool"
                            }
                        }
                    }
                }
            }
        }
    };
    var NetworkConfiguration = {
        serializedName: "NetworkConfiguration",
        type: {
            name: "Composite",
            className: "NetworkConfiguration",
            modelProperties: {
                subnetId: {
                    serializedName: "subnetId",
                    type: {
                        name: "String"
                    }
                },
                endpointConfiguration: {
                    serializedName: "endpointConfiguration",
                    type: {
                        name: "Composite",
                        className: "PoolEndpointConfiguration"
                    }
                }
            }
        }
    };
    var PoolSpecification = {
        serializedName: "PoolSpecification",
        type: {
            name: "Composite",
            className: "PoolSpecification",
            modelProperties: {
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                vmSize: {
                    required: true,
                    serializedName: "vmSize",
                    type: {
                        name: "String"
                    }
                },
                cloudServiceConfiguration: {
                    serializedName: "cloudServiceConfiguration",
                    type: {
                        name: "Composite",
                        className: "CloudServiceConfiguration"
                    }
                },
                virtualMachineConfiguration: {
                    serializedName: "virtualMachineConfiguration",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineConfiguration"
                    }
                },
                maxTasksPerNode: {
                    serializedName: "maxTasksPerNode",
                    type: {
                        name: "Number"
                    }
                },
                taskSchedulingPolicy: {
                    serializedName: "taskSchedulingPolicy",
                    type: {
                        name: "Composite",
                        className: "TaskSchedulingPolicy"
                    }
                },
                resizeTimeout: {
                    serializedName: "resizeTimeout",
                    type: {
                        name: "TimeSpan"
                    }
                },
                targetDedicatedNodes: {
                    serializedName: "targetDedicatedNodes",
                    type: {
                        name: "Number"
                    }
                },
                targetLowPriorityNodes: {
                    serializedName: "targetLowPriorityNodes",
                    type: {
                        name: "Number"
                    }
                },
                enableAutoScale: {
                    serializedName: "enableAutoScale",
                    type: {
                        name: "Boolean"
                    }
                },
                autoScaleFormula: {
                    serializedName: "autoScaleFormula",
                    type: {
                        name: "String"
                    }
                },
                autoScaleEvaluationInterval: {
                    serializedName: "autoScaleEvaluationInterval",
                    type: {
                        name: "TimeSpan"
                    }
                },
                enableInterNodeCommunication: {
                    serializedName: "enableInterNodeCommunication",
                    type: {
                        name: "Boolean"
                    }
                },
                networkConfiguration: {
                    serializedName: "networkConfiguration",
                    type: {
                        name: "Composite",
                        className: "NetworkConfiguration"
                    }
                },
                startTask: {
                    serializedName: "startTask",
                    type: {
                        name: "Composite",
                        className: "StartTask"
                    }
                },
                certificateReferences: {
                    serializedName: "certificateReferences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CertificateReference"
                            }
                        }
                    }
                },
                applicationPackageReferences: {
                    serializedName: "applicationPackageReferences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationPackageReference"
                            }
                        }
                    }
                },
                applicationLicenses: {
                    serializedName: "applicationLicenses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                userAccounts: {
                    serializedName: "userAccounts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UserAccount"
                            }
                        }
                    }
                },
                metadata: {
                    serializedName: "metadata",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetadataItem"
                            }
                        }
                    }
                }
            }
        }
    };
    var AutoPoolSpecification = {
        serializedName: "AutoPoolSpecification",
        type: {
            name: "Composite",
            className: "AutoPoolSpecification",
            modelProperties: {
                autoPoolIdPrefix: {
                    serializedName: "autoPoolIdPrefix",
                    type: {
                        name: "String"
                    }
                },
                poolLifetimeOption: {
                    required: true,
                    serializedName: "poolLifetimeOption",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "jobschedule",
                            "job"
                        ]
                    }
                },
                keepAlive: {
                    serializedName: "keepAlive",
                    type: {
                        name: "Boolean"
                    }
                },
                pool: {
                    serializedName: "pool",
                    type: {
                        name: "Composite",
                        className: "PoolSpecification"
                    }
                }
            }
        }
    };
    var PoolInformation = {
        serializedName: "PoolInformation",
        type: {
            name: "Composite",
            className: "PoolInformation",
            modelProperties: {
                poolId: {
                    serializedName: "poolId",
                    type: {
                        name: "String"
                    }
                },
                autoPoolSpecification: {
                    serializedName: "autoPoolSpecification",
                    type: {
                        name: "Composite",
                        className: "AutoPoolSpecification"
                    }
                }
            }
        }
    };
    var JobSpecification = {
        serializedName: "JobSpecification",
        type: {
            name: "Composite",
            className: "JobSpecification",
            modelProperties: {
                priority: {
                    serializedName: "priority",
                    type: {
                        name: "Number"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                usesTaskDependencies: {
                    serializedName: "usesTaskDependencies",
                    type: {
                        name: "Boolean"
                    }
                },
                onAllTasksComplete: {
                    serializedName: "onAllTasksComplete",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "noaction",
                            "terminatejob"
                        ]
                    }
                },
                onTaskFailure: {
                    serializedName: "onTaskFailure",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "noaction",
                            "performexitoptionsjobaction"
                        ]
                    }
                },
                constraints: {
                    serializedName: "constraints",
                    type: {
                        name: "Composite",
                        className: "JobConstraints"
                    }
                },
                jobManagerTask: {
                    serializedName: "jobManagerTask",
                    type: {
                        name: "Composite",
                        className: "JobManagerTask"
                    }
                },
                jobPreparationTask: {
                    serializedName: "jobPreparationTask",
                    type: {
                        name: "Composite",
                        className: "JobPreparationTask"
                    }
                },
                jobReleaseTask: {
                    serializedName: "jobReleaseTask",
                    type: {
                        name: "Composite",
                        className: "JobReleaseTask"
                    }
                },
                commonEnvironmentSettings: {
                    serializedName: "commonEnvironmentSettings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EnvironmentSetting"
                            }
                        }
                    }
                },
                poolInfo: {
                    required: true,
                    serializedName: "poolInfo",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "PoolInformation"
                    }
                },
                metadata: {
                    serializedName: "metadata",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetadataItem"
                            }
                        }
                    }
                }
            }
        }
    };
    var RecentJob = {
        serializedName: "RecentJob",
        type: {
            name: "Composite",
            className: "RecentJob",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                url: {
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobScheduleExecutionInformation = {
        serializedName: "JobScheduleExecutionInformation",
        type: {
            name: "Composite",
            className: "JobScheduleExecutionInformation",
            modelProperties: {
                nextRunTime: {
                    serializedName: "nextRunTime",
                    type: {
                        name: "DateTime"
                    }
                },
                recentJob: {
                    serializedName: "recentJob",
                    type: {
                        name: "Composite",
                        className: "RecentJob"
                    }
                },
                endTime: {
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var JobScheduleStatistics = {
        serializedName: "JobScheduleStatistics",
        type: {
            name: "Composite",
            className: "JobScheduleStatistics",
            modelProperties: {
                url: {
                    required: true,
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                },
                startTime: {
                    required: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastUpdateTime: {
                    required: true,
                    serializedName: "lastUpdateTime",
                    type: {
                        name: "DateTime"
                    }
                },
                userCPUTime: {
                    required: true,
                    serializedName: "userCPUTime",
                    type: {
                        name: "TimeSpan"
                    }
                },
                kernelCPUTime: {
                    required: true,
                    serializedName: "kernelCPUTime",
                    type: {
                        name: "TimeSpan"
                    }
                },
                wallClockTime: {
                    required: true,
                    serializedName: "wallClockTime",
                    type: {
                        name: "TimeSpan"
                    }
                },
                readIOps: {
                    required: true,
                    serializedName: "readIOps",
                    type: {
                        name: "Number"
                    }
                },
                writeIOps: {
                    required: true,
                    serializedName: "writeIOps",
                    type: {
                        name: "Number"
                    }
                },
                readIOGiB: {
                    required: true,
                    serializedName: "readIOGiB",
                    type: {
                        name: "Number"
                    }
                },
                writeIOGiB: {
                    required: true,
                    serializedName: "writeIOGiB",
                    type: {
                        name: "Number"
                    }
                },
                numSucceededTasks: {
                    required: true,
                    serializedName: "numSucceededTasks",
                    type: {
                        name: "Number"
                    }
                },
                numFailedTasks: {
                    required: true,
                    serializedName: "numFailedTasks",
                    type: {
                        name: "Number"
                    }
                },
                numTaskRetries: {
                    required: true,
                    serializedName: "numTaskRetries",
                    type: {
                        name: "Number"
                    }
                },
                waitTime: {
                    required: true,
                    serializedName: "waitTime",
                    type: {
                        name: "TimeSpan"
                    }
                }
            }
        }
    };
    var CloudJobSchedule = {
        serializedName: "CloudJobSchedule",
        type: {
            name: "Composite",
            className: "CloudJobSchedule",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                url: {
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                },
                eTag: {
                    serializedName: "eTag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "lastModified",
                    type: {
                        name: "DateTime"
                    }
                },
                creationTime: {
                    serializedName: "creationTime",
                    type: {
                        name: "DateTime"
                    }
                },
                state: {
                    serializedName: "state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "active",
                            "completed",
                            "disabled",
                            "terminating",
                            "deleting"
                        ]
                    }
                },
                stateTransitionTime: {
                    serializedName: "stateTransitionTime",
                    type: {
                        name: "DateTime"
                    }
                },
                previousState: {
                    serializedName: "previousState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "active",
                            "completed",
                            "disabled",
                            "terminating",
                            "deleting"
                        ]
                    }
                },
                previousStateTransitionTime: {
                    serializedName: "previousStateTransitionTime",
                    type: {
                        name: "DateTime"
                    }
                },
                schedule: {
                    serializedName: "schedule",
                    type: {
                        name: "Composite",
                        className: "Schedule"
                    }
                },
                jobSpecification: {
                    serializedName: "jobSpecification",
                    type: {
                        name: "Composite",
                        className: "JobSpecification"
                    }
                },
                executionInfo: {
                    serializedName: "executionInfo",
                    type: {
                        name: "Composite",
                        className: "JobScheduleExecutionInformation"
                    }
                },
                metadata: {
                    serializedName: "metadata",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetadataItem"
                            }
                        }
                    }
                },
                stats: {
                    serializedName: "stats",
                    type: {
                        name: "Composite",
                        className: "JobScheduleStatistics"
                    }
                }
            }
        }
    };
    var JobScheduleAddParameter = {
        serializedName: "JobScheduleAddParameter",
        type: {
            name: "Composite",
            className: "JobScheduleAddParameter",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                schedule: {
                    required: true,
                    serializedName: "schedule",
                    type: {
                        name: "Composite",
                        className: "Schedule"
                    }
                },
                jobSpecification: {
                    required: true,
                    serializedName: "jobSpecification",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "JobSpecification"
                    }
                },
                metadata: {
                    serializedName: "metadata",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetadataItem"
                            }
                        }
                    }
                }
            }
        }
    };
    var JobSchedulingError = {
        serializedName: "JobSchedulingError",
        type: {
            name: "Composite",
            className: "JobSchedulingError",
            modelProperties: {
                category: {
                    required: true,
                    serializedName: "category",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "usererror",
                            "servererror"
                        ]
                    }
                },
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    serializedName: "details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NameValuePair"
                            }
                        }
                    }
                }
            }
        }
    };
    var JobExecutionInformation = {
        serializedName: "JobExecutionInformation",
        type: {
            name: "Composite",
            className: "JobExecutionInformation",
            modelProperties: {
                startTime: {
                    required: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                poolId: {
                    serializedName: "poolId",
                    type: {
                        name: "String"
                    }
                },
                schedulingError: {
                    serializedName: "schedulingError",
                    type: {
                        name: "Composite",
                        className: "JobSchedulingError"
                    }
                },
                terminateReason: {
                    serializedName: "terminateReason",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CloudJob = {
        serializedName: "CloudJob",
        type: {
            name: "Composite",
            className: "CloudJob",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                usesTaskDependencies: {
                    serializedName: "usesTaskDependencies",
                    type: {
                        name: "Boolean"
                    }
                },
                url: {
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                },
                eTag: {
                    serializedName: "eTag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "lastModified",
                    type: {
                        name: "DateTime"
                    }
                },
                creationTime: {
                    serializedName: "creationTime",
                    type: {
                        name: "DateTime"
                    }
                },
                state: {
                    serializedName: "state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "active",
                            "disabling",
                            "disabled",
                            "enabling",
                            "terminating",
                            "completed",
                            "deleting"
                        ]
                    }
                },
                stateTransitionTime: {
                    serializedName: "stateTransitionTime",
                    type: {
                        name: "DateTime"
                    }
                },
                previousState: {
                    serializedName: "previousState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "active",
                            "disabling",
                            "disabled",
                            "enabling",
                            "terminating",
                            "completed",
                            "deleting"
                        ]
                    }
                },
                previousStateTransitionTime: {
                    serializedName: "previousStateTransitionTime",
                    type: {
                        name: "DateTime"
                    }
                },
                priority: {
                    serializedName: "priority",
                    type: {
                        name: "Number"
                    }
                },
                constraints: {
                    serializedName: "constraints",
                    type: {
                        name: "Composite",
                        className: "JobConstraints"
                    }
                },
                jobManagerTask: {
                    serializedName: "jobManagerTask",
                    type: {
                        name: "Composite",
                        className: "JobManagerTask"
                    }
                },
                jobPreparationTask: {
                    serializedName: "jobPreparationTask",
                    type: {
                        name: "Composite",
                        className: "JobPreparationTask"
                    }
                },
                jobReleaseTask: {
                    serializedName: "jobReleaseTask",
                    type: {
                        name: "Composite",
                        className: "JobReleaseTask"
                    }
                },
                commonEnvironmentSettings: {
                    serializedName: "commonEnvironmentSettings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EnvironmentSetting"
                            }
                        }
                    }
                },
                poolInfo: {
                    serializedName: "poolInfo",
                    type: {
                        name: "Composite",
                        className: "PoolInformation"
                    }
                },
                onAllTasksComplete: {
                    serializedName: "onAllTasksComplete",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "noaction",
                            "terminatejob"
                        ]
                    }
                },
                onTaskFailure: {
                    serializedName: "onTaskFailure",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "noaction",
                            "performexitoptionsjobaction"
                        ]
                    }
                },
                metadata: {
                    serializedName: "metadata",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetadataItem"
                            }
                        }
                    }
                },
                executionInfo: {
                    serializedName: "executionInfo",
                    type: {
                        name: "Composite",
                        className: "JobExecutionInformation"
                    }
                },
                stats: {
                    serializedName: "stats",
                    type: {
                        name: "Composite",
                        className: "JobStatistics"
                    }
                }
            }
        }
    };
    var JobAddParameter = {
        serializedName: "JobAddParameter",
        type: {
            name: "Composite",
            className: "JobAddParameter",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                priority: {
                    serializedName: "priority",
                    type: {
                        name: "Number"
                    }
                },
                constraints: {
                    serializedName: "constraints",
                    type: {
                        name: "Composite",
                        className: "JobConstraints"
                    }
                },
                jobManagerTask: {
                    serializedName: "jobManagerTask",
                    type: {
                        name: "Composite",
                        className: "JobManagerTask"
                    }
                },
                jobPreparationTask: {
                    serializedName: "jobPreparationTask",
                    type: {
                        name: "Composite",
                        className: "JobPreparationTask"
                    }
                },
                jobReleaseTask: {
                    serializedName: "jobReleaseTask",
                    type: {
                        name: "Composite",
                        className: "JobReleaseTask"
                    }
                },
                commonEnvironmentSettings: {
                    serializedName: "commonEnvironmentSettings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EnvironmentSetting"
                            }
                        }
                    }
                },
                poolInfo: {
                    required: true,
                    serializedName: "poolInfo",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "PoolInformation"
                    }
                },
                onAllTasksComplete: {
                    serializedName: "onAllTasksComplete",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "noaction",
                            "terminatejob"
                        ]
                    }
                },
                onTaskFailure: {
                    serializedName: "onTaskFailure",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "noaction",
                            "performexitoptionsjobaction"
                        ]
                    }
                },
                metadata: {
                    serializedName: "metadata",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetadataItem"
                            }
                        }
                    }
                },
                usesTaskDependencies: {
                    serializedName: "usesTaskDependencies",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var TaskContainerExecutionInformation = {
        serializedName: "TaskContainerExecutionInformation",
        type: {
            name: "Composite",
            className: "TaskContainerExecutionInformation",
            modelProperties: {
                containerId: {
                    serializedName: "containerId",
                    type: {
                        name: "String"
                    }
                },
                state: {
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                },
                error: {
                    serializedName: "error",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TaskFailureInformation = {
        serializedName: "TaskFailureInformation",
        type: {
            name: "Composite",
            className: "TaskFailureInformation",
            modelProperties: {
                category: {
                    required: true,
                    serializedName: "category",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "usererror",
                            "servererror"
                        ]
                    }
                },
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    serializedName: "details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NameValuePair"
                            }
                        }
                    }
                }
            }
        }
    };
    var JobPreparationTaskExecutionInformation = {
        serializedName: "JobPreparationTaskExecutionInformation",
        type: {
            name: "Composite",
            className: "JobPreparationTaskExecutionInformation",
            modelProperties: {
                startTime: {
                    required: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                state: {
                    required: true,
                    serializedName: "state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "running",
                            "completed"
                        ]
                    }
                },
                taskRootDirectory: {
                    serializedName: "taskRootDirectory",
                    type: {
                        name: "String"
                    }
                },
                taskRootDirectoryUrl: {
                    serializedName: "taskRootDirectoryUrl",
                    type: {
                        name: "String"
                    }
                },
                exitCode: {
                    serializedName: "exitCode",
                    type: {
                        name: "Number"
                    }
                },
                containerInfo: {
                    serializedName: "containerInfo",
                    type: {
                        name: "Composite",
                        className: "TaskContainerExecutionInformation"
                    }
                },
                failureInfo: {
                    serializedName: "failureInfo",
                    type: {
                        name: "Composite",
                        className: "TaskFailureInformation"
                    }
                },
                retryCount: {
                    required: true,
                    serializedName: "retryCount",
                    type: {
                        name: "Number"
                    }
                },
                lastRetryTime: {
                    serializedName: "lastRetryTime",
                    type: {
                        name: "DateTime"
                    }
                },
                result: {
                    serializedName: "result",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "success",
                            "failure"
                        ]
                    }
                }
            }
        }
    };
    var JobReleaseTaskExecutionInformation = {
        serializedName: "JobReleaseTaskExecutionInformation",
        type: {
            name: "Composite",
            className: "JobReleaseTaskExecutionInformation",
            modelProperties: {
                startTime: {
                    required: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                state: {
                    required: true,
                    serializedName: "state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "running",
                            "completed"
                        ]
                    }
                },
                taskRootDirectory: {
                    serializedName: "taskRootDirectory",
                    type: {
                        name: "String"
                    }
                },
                taskRootDirectoryUrl: {
                    serializedName: "taskRootDirectoryUrl",
                    type: {
                        name: "String"
                    }
                },
                exitCode: {
                    serializedName: "exitCode",
                    type: {
                        name: "Number"
                    }
                },
                containerInfo: {
                    serializedName: "containerInfo",
                    type: {
                        name: "Composite",
                        className: "TaskContainerExecutionInformation"
                    }
                },
                failureInfo: {
                    serializedName: "failureInfo",
                    type: {
                        name: "Composite",
                        className: "TaskFailureInformation"
                    }
                },
                result: {
                    serializedName: "result",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "success",
                            "failure"
                        ]
                    }
                }
            }
        }
    };
    var JobPreparationAndReleaseTaskExecutionInformation = {
        serializedName: "JobPreparationAndReleaseTaskExecutionInformation",
        type: {
            name: "Composite",
            className: "JobPreparationAndReleaseTaskExecutionInformation",
            modelProperties: {
                poolId: {
                    serializedName: "poolId",
                    type: {
                        name: "String"
                    }
                },
                nodeId: {
                    serializedName: "nodeId",
                    type: {
                        name: "String"
                    }
                },
                nodeUrl: {
                    serializedName: "nodeUrl",
                    type: {
                        name: "String"
                    }
                },
                jobPreparationTaskExecutionInfo: {
                    serializedName: "jobPreparationTaskExecutionInfo",
                    type: {
                        name: "Composite",
                        className: "JobPreparationTaskExecutionInformation"
                    }
                },
                jobReleaseTaskExecutionInfo: {
                    serializedName: "jobReleaseTaskExecutionInfo",
                    type: {
                        name: "Composite",
                        className: "JobReleaseTaskExecutionInformation"
                    }
                }
            }
        }
    };
    var TaskCounts = {
        serializedName: "TaskCounts",
        type: {
            name: "Composite",
            className: "TaskCounts",
            modelProperties: {
                active: {
                    required: true,
                    serializedName: "active",
                    type: {
                        name: "Number"
                    }
                },
                running: {
                    required: true,
                    serializedName: "running",
                    type: {
                        name: "Number"
                    }
                },
                completed: {
                    required: true,
                    serializedName: "completed",
                    type: {
                        name: "Number"
                    }
                },
                succeeded: {
                    required: true,
                    serializedName: "succeeded",
                    type: {
                        name: "Number"
                    }
                },
                failed: {
                    required: true,
                    serializedName: "failed",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var AutoScaleRunError = {
        serializedName: "AutoScaleRunError",
        type: {
            name: "Composite",
            className: "AutoScaleRunError",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                values: {
                    serializedName: "values",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NameValuePair"
                            }
                        }
                    }
                }
            }
        }
    };
    var AutoScaleRun = {
        serializedName: "AutoScaleRun",
        type: {
            name: "Composite",
            className: "AutoScaleRun",
            modelProperties: {
                timestamp: {
                    required: true,
                    serializedName: "timestamp",
                    type: {
                        name: "DateTime"
                    }
                },
                results: {
                    serializedName: "results",
                    type: {
                        name: "String"
                    }
                },
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "AutoScaleRunError"
                    }
                }
            }
        }
    };
    var ResizeError = {
        serializedName: "ResizeError",
        type: {
            name: "Composite",
            className: "ResizeError",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                values: {
                    serializedName: "values",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NameValuePair"
                            }
                        }
                    }
                }
            }
        }
    };
    var CloudPool = {
        serializedName: "CloudPool",
        type: {
            name: "Composite",
            className: "CloudPool",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                url: {
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                },
                eTag: {
                    serializedName: "eTag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "lastModified",
                    type: {
                        name: "DateTime"
                    }
                },
                creationTime: {
                    serializedName: "creationTime",
                    type: {
                        name: "DateTime"
                    }
                },
                state: {
                    serializedName: "state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "active",
                            "deleting",
                            "upgrading"
                        ]
                    }
                },
                stateTransitionTime: {
                    serializedName: "stateTransitionTime",
                    type: {
                        name: "DateTime"
                    }
                },
                allocationState: {
                    serializedName: "allocationState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "steady",
                            "resizing",
                            "stopping"
                        ]
                    }
                },
                allocationStateTransitionTime: {
                    serializedName: "allocationStateTransitionTime",
                    type: {
                        name: "DateTime"
                    }
                },
                vmSize: {
                    serializedName: "vmSize",
                    type: {
                        name: "String"
                    }
                },
                cloudServiceConfiguration: {
                    serializedName: "cloudServiceConfiguration",
                    type: {
                        name: "Composite",
                        className: "CloudServiceConfiguration"
                    }
                },
                virtualMachineConfiguration: {
                    serializedName: "virtualMachineConfiguration",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineConfiguration"
                    }
                },
                resizeTimeout: {
                    serializedName: "resizeTimeout",
                    type: {
                        name: "TimeSpan"
                    }
                },
                resizeErrors: {
                    serializedName: "resizeErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResizeError"
                            }
                        }
                    }
                },
                currentDedicatedNodes: {
                    serializedName: "currentDedicatedNodes",
                    type: {
                        name: "Number"
                    }
                },
                currentLowPriorityNodes: {
                    serializedName: "currentLowPriorityNodes",
                    type: {
                        name: "Number"
                    }
                },
                targetDedicatedNodes: {
                    serializedName: "targetDedicatedNodes",
                    type: {
                        name: "Number"
                    }
                },
                targetLowPriorityNodes: {
                    serializedName: "targetLowPriorityNodes",
                    type: {
                        name: "Number"
                    }
                },
                enableAutoScale: {
                    serializedName: "enableAutoScale",
                    type: {
                        name: "Boolean"
                    }
                },
                autoScaleFormula: {
                    serializedName: "autoScaleFormula",
                    type: {
                        name: "String"
                    }
                },
                autoScaleEvaluationInterval: {
                    serializedName: "autoScaleEvaluationInterval",
                    type: {
                        name: "TimeSpan"
                    }
                },
                autoScaleRun: {
                    serializedName: "autoScaleRun",
                    type: {
                        name: "Composite",
                        className: "AutoScaleRun"
                    }
                },
                enableInterNodeCommunication: {
                    serializedName: "enableInterNodeCommunication",
                    type: {
                        name: "Boolean"
                    }
                },
                networkConfiguration: {
                    serializedName: "networkConfiguration",
                    type: {
                        name: "Composite",
                        className: "NetworkConfiguration"
                    }
                },
                startTask: {
                    serializedName: "startTask",
                    type: {
                        name: "Composite",
                        className: "StartTask"
                    }
                },
                certificateReferences: {
                    serializedName: "certificateReferences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CertificateReference"
                            }
                        }
                    }
                },
                applicationPackageReferences: {
                    serializedName: "applicationPackageReferences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationPackageReference"
                            }
                        }
                    }
                },
                applicationLicenses: {
                    serializedName: "applicationLicenses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                maxTasksPerNode: {
                    serializedName: "maxTasksPerNode",
                    type: {
                        name: "Number"
                    }
                },
                taskSchedulingPolicy: {
                    serializedName: "taskSchedulingPolicy",
                    type: {
                        name: "Composite",
                        className: "TaskSchedulingPolicy"
                    }
                },
                userAccounts: {
                    serializedName: "userAccounts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UserAccount"
                            }
                        }
                    }
                },
                metadata: {
                    serializedName: "metadata",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetadataItem"
                            }
                        }
                    }
                },
                stats: {
                    serializedName: "stats",
                    type: {
                        name: "Composite",
                        className: "PoolStatistics"
                    }
                }
            }
        }
    };
    var PoolAddParameter = {
        serializedName: "PoolAddParameter",
        type: {
            name: "Composite",
            className: "PoolAddParameter",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                vmSize: {
                    required: true,
                    serializedName: "vmSize",
                    type: {
                        name: "String"
                    }
                },
                cloudServiceConfiguration: {
                    serializedName: "cloudServiceConfiguration",
                    type: {
                        name: "Composite",
                        className: "CloudServiceConfiguration"
                    }
                },
                virtualMachineConfiguration: {
                    serializedName: "virtualMachineConfiguration",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineConfiguration"
                    }
                },
                resizeTimeout: {
                    serializedName: "resizeTimeout",
                    type: {
                        name: "TimeSpan"
                    }
                },
                targetDedicatedNodes: {
                    serializedName: "targetDedicatedNodes",
                    type: {
                        name: "Number"
                    }
                },
                targetLowPriorityNodes: {
                    serializedName: "targetLowPriorityNodes",
                    type: {
                        name: "Number"
                    }
                },
                enableAutoScale: {
                    serializedName: "enableAutoScale",
                    type: {
                        name: "Boolean"
                    }
                },
                autoScaleFormula: {
                    serializedName: "autoScaleFormula",
                    type: {
                        name: "String"
                    }
                },
                autoScaleEvaluationInterval: {
                    serializedName: "autoScaleEvaluationInterval",
                    type: {
                        name: "TimeSpan"
                    }
                },
                enableInterNodeCommunication: {
                    serializedName: "enableInterNodeCommunication",
                    type: {
                        name: "Boolean"
                    }
                },
                networkConfiguration: {
                    serializedName: "networkConfiguration",
                    type: {
                        name: "Composite",
                        className: "NetworkConfiguration"
                    }
                },
                startTask: {
                    serializedName: "startTask",
                    type: {
                        name: "Composite",
                        className: "StartTask"
                    }
                },
                certificateReferences: {
                    serializedName: "certificateReferences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CertificateReference"
                            }
                        }
                    }
                },
                applicationPackageReferences: {
                    serializedName: "applicationPackageReferences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationPackageReference"
                            }
                        }
                    }
                },
                applicationLicenses: {
                    serializedName: "applicationLicenses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                maxTasksPerNode: {
                    serializedName: "maxTasksPerNode",
                    type: {
                        name: "Number"
                    }
                },
                taskSchedulingPolicy: {
                    serializedName: "taskSchedulingPolicy",
                    type: {
                        name: "Composite",
                        className: "TaskSchedulingPolicy"
                    }
                },
                userAccounts: {
                    serializedName: "userAccounts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UserAccount"
                            }
                        }
                    }
                },
                metadata: {
                    serializedName: "metadata",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetadataItem"
                            }
                        }
                    }
                }
            }
        }
    };
    var AffinityInformation = {
        serializedName: "AffinityInformation",
        type: {
            name: "Composite",
            className: "AffinityInformation",
            modelProperties: {
                affinityId: {
                    required: true,
                    serializedName: "affinityId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TaskExecutionInformation = {
        serializedName: "TaskExecutionInformation",
        type: {
            name: "Composite",
            className: "TaskExecutionInformation",
            modelProperties: {
                startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                exitCode: {
                    serializedName: "exitCode",
                    type: {
                        name: "Number"
                    }
                },
                containerInfo: {
                    serializedName: "containerInfo",
                    type: {
                        name: "Composite",
                        className: "TaskContainerExecutionInformation"
                    }
                },
                failureInfo: {
                    serializedName: "failureInfo",
                    type: {
                        name: "Composite",
                        className: "TaskFailureInformation"
                    }
                },
                retryCount: {
                    required: true,
                    serializedName: "retryCount",
                    type: {
                        name: "Number"
                    }
                },
                lastRetryTime: {
                    serializedName: "lastRetryTime",
                    type: {
                        name: "DateTime"
                    }
                },
                requeueCount: {
                    required: true,
                    serializedName: "requeueCount",
                    type: {
                        name: "Number"
                    }
                },
                lastRequeueTime: {
                    serializedName: "lastRequeueTime",
                    type: {
                        name: "DateTime"
                    }
                },
                result: {
                    serializedName: "result",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "success",
                            "failure"
                        ]
                    }
                }
            }
        }
    };
    var ComputeNodeInformation = {
        serializedName: "ComputeNodeInformation",
        type: {
            name: "Composite",
            className: "ComputeNodeInformation",
            modelProperties: {
                affinityId: {
                    serializedName: "affinityId",
                    type: {
                        name: "String"
                    }
                },
                nodeUrl: {
                    serializedName: "nodeUrl",
                    type: {
                        name: "String"
                    }
                },
                poolId: {
                    serializedName: "poolId",
                    type: {
                        name: "String"
                    }
                },
                nodeId: {
                    serializedName: "nodeId",
                    type: {
                        name: "String"
                    }
                },
                taskRootDirectory: {
                    serializedName: "taskRootDirectory",
                    type: {
                        name: "String"
                    }
                },
                taskRootDirectoryUrl: {
                    serializedName: "taskRootDirectoryUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NodeAgentInformation = {
        serializedName: "NodeAgentInformation",
        type: {
            name: "Composite",
            className: "NodeAgentInformation",
            modelProperties: {
                version: {
                    required: true,
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                },
                lastUpdateTime: {
                    required: true,
                    serializedName: "lastUpdateTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var MultiInstanceSettings = {
        serializedName: "MultiInstanceSettings",
        type: {
            name: "Composite",
            className: "MultiInstanceSettings",
            modelProperties: {
                numberOfInstances: {
                    serializedName: "numberOfInstances",
                    type: {
                        name: "Number"
                    }
                },
                coordinationCommandLine: {
                    required: true,
                    serializedName: "coordinationCommandLine",
                    type: {
                        name: "String"
                    }
                },
                commonResourceFiles: {
                    serializedName: "commonResourceFiles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceFile"
                            }
                        }
                    }
                }
            }
        }
    };
    var TaskStatistics = {
        serializedName: "TaskStatistics",
        type: {
            name: "Composite",
            className: "TaskStatistics",
            modelProperties: {
                url: {
                    required: true,
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                },
                startTime: {
                    required: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastUpdateTime: {
                    required: true,
                    serializedName: "lastUpdateTime",
                    type: {
                        name: "DateTime"
                    }
                },
                userCPUTime: {
                    required: true,
                    serializedName: "userCPUTime",
                    type: {
                        name: "TimeSpan"
                    }
                },
                kernelCPUTime: {
                    required: true,
                    serializedName: "kernelCPUTime",
                    type: {
                        name: "TimeSpan"
                    }
                },
                wallClockTime: {
                    required: true,
                    serializedName: "wallClockTime",
                    type: {
                        name: "TimeSpan"
                    }
                },
                readIOps: {
                    required: true,
                    serializedName: "readIOps",
                    type: {
                        name: "Number"
                    }
                },
                writeIOps: {
                    required: true,
                    serializedName: "writeIOps",
                    type: {
                        name: "Number"
                    }
                },
                readIOGiB: {
                    required: true,
                    serializedName: "readIOGiB",
                    type: {
                        name: "Number"
                    }
                },
                writeIOGiB: {
                    required: true,
                    serializedName: "writeIOGiB",
                    type: {
                        name: "Number"
                    }
                },
                waitTime: {
                    required: true,
                    serializedName: "waitTime",
                    type: {
                        name: "TimeSpan"
                    }
                }
            }
        }
    };
    var TaskIdRange = {
        serializedName: "TaskIdRange",
        type: {
            name: "Composite",
            className: "TaskIdRange",
            modelProperties: {
                start: {
                    required: true,
                    serializedName: "start",
                    type: {
                        name: "Number"
                    }
                },
                end: {
                    required: true,
                    serializedName: "end",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var TaskDependencies = {
        serializedName: "TaskDependencies",
        type: {
            name: "Composite",
            className: "TaskDependencies",
            modelProperties: {
                taskIds: {
                    serializedName: "taskIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                taskIdRanges: {
                    serializedName: "taskIdRanges",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TaskIdRange"
                            }
                        }
                    }
                }
            }
        }
    };
    var CloudTask = {
        serializedName: "CloudTask",
        type: {
            name: "Composite",
            className: "CloudTask",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                url: {
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                },
                eTag: {
                    serializedName: "eTag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "lastModified",
                    type: {
                        name: "DateTime"
                    }
                },
                creationTime: {
                    serializedName: "creationTime",
                    type: {
                        name: "DateTime"
                    }
                },
                exitConditions: {
                    serializedName: "exitConditions",
                    type: {
                        name: "Composite",
                        className: "ExitConditions"
                    }
                },
                state: {
                    serializedName: "state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "active",
                            "preparing",
                            "running",
                            "completed"
                        ]
                    }
                },
                stateTransitionTime: {
                    serializedName: "stateTransitionTime",
                    type: {
                        name: "DateTime"
                    }
                },
                previousState: {
                    serializedName: "previousState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "active",
                            "preparing",
                            "running",
                            "completed"
                        ]
                    }
                },
                previousStateTransitionTime: {
                    serializedName: "previousStateTransitionTime",
                    type: {
                        name: "DateTime"
                    }
                },
                commandLine: {
                    serializedName: "commandLine",
                    type: {
                        name: "String"
                    }
                },
                containerSettings: {
                    serializedName: "containerSettings",
                    type: {
                        name: "Composite",
                        className: "TaskContainerSettings"
                    }
                },
                resourceFiles: {
                    serializedName: "resourceFiles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceFile"
                            }
                        }
                    }
                },
                outputFiles: {
                    serializedName: "outputFiles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OutputFile"
                            }
                        }
                    }
                },
                environmentSettings: {
                    serializedName: "environmentSettings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EnvironmentSetting"
                            }
                        }
                    }
                },
                affinityInfo: {
                    serializedName: "affinityInfo",
                    type: {
                        name: "Composite",
                        className: "AffinityInformation"
                    }
                },
                constraints: {
                    serializedName: "constraints",
                    type: {
                        name: "Composite",
                        className: "TaskConstraints"
                    }
                },
                userIdentity: {
                    serializedName: "userIdentity",
                    type: {
                        name: "Composite",
                        className: "UserIdentity"
                    }
                },
                executionInfo: {
                    serializedName: "executionInfo",
                    type: {
                        name: "Composite",
                        className: "TaskExecutionInformation"
                    }
                },
                nodeInfo: {
                    serializedName: "nodeInfo",
                    type: {
                        name: "Composite",
                        className: "ComputeNodeInformation"
                    }
                },
                multiInstanceSettings: {
                    serializedName: "multiInstanceSettings",
                    type: {
                        name: "Composite",
                        className: "MultiInstanceSettings"
                    }
                },
                stats: {
                    serializedName: "stats",
                    type: {
                        name: "Composite",
                        className: "TaskStatistics"
                    }
                },
                dependsOn: {
                    serializedName: "dependsOn",
                    type: {
                        name: "Composite",
                        className: "TaskDependencies"
                    }
                },
                applicationPackageReferences: {
                    serializedName: "applicationPackageReferences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationPackageReference"
                            }
                        }
                    }
                },
                authenticationTokenSettings: {
                    serializedName: "authenticationTokenSettings",
                    type: {
                        name: "Composite",
                        className: "AuthenticationTokenSettings"
                    }
                }
            }
        }
    };
    var TaskAddParameter = {
        serializedName: "TaskAddParameter",
        type: {
            name: "Composite",
            className: "TaskAddParameter",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                commandLine: {
                    required: true,
                    serializedName: "commandLine",
                    type: {
                        name: "String"
                    }
                },
                containerSettings: {
                    serializedName: "containerSettings",
                    type: {
                        name: "Composite",
                        className: "TaskContainerSettings"
                    }
                },
                exitConditions: {
                    serializedName: "exitConditions",
                    type: {
                        name: "Composite",
                        className: "ExitConditions"
                    }
                },
                resourceFiles: {
                    serializedName: "resourceFiles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceFile"
                            }
                        }
                    }
                },
                outputFiles: {
                    serializedName: "outputFiles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OutputFile"
                            }
                        }
                    }
                },
                environmentSettings: {
                    serializedName: "environmentSettings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EnvironmentSetting"
                            }
                        }
                    }
                },
                affinityInfo: {
                    serializedName: "affinityInfo",
                    type: {
                        name: "Composite",
                        className: "AffinityInformation"
                    }
                },
                constraints: {
                    serializedName: "constraints",
                    type: {
                        name: "Composite",
                        className: "TaskConstraints"
                    }
                },
                userIdentity: {
                    serializedName: "userIdentity",
                    type: {
                        name: "Composite",
                        className: "UserIdentity"
                    }
                },
                multiInstanceSettings: {
                    serializedName: "multiInstanceSettings",
                    type: {
                        name: "Composite",
                        className: "MultiInstanceSettings"
                    }
                },
                dependsOn: {
                    serializedName: "dependsOn",
                    type: {
                        name: "Composite",
                        className: "TaskDependencies"
                    }
                },
                applicationPackageReferences: {
                    serializedName: "applicationPackageReferences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationPackageReference"
                            }
                        }
                    }
                },
                authenticationTokenSettings: {
                    serializedName: "authenticationTokenSettings",
                    type: {
                        name: "Composite",
                        className: "AuthenticationTokenSettings"
                    }
                }
            }
        }
    };
    var TaskAddCollectionParameter = {
        serializedName: "TaskAddCollectionParameter",
        type: {
            name: "Composite",
            className: "TaskAddCollectionParameter",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "value",
                    constraints: {
                        MaxItems: 100
                    },
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TaskAddParameter"
                            }
                        }
                    }
                }
            }
        }
    };
    var ErrorMessage = {
        serializedName: "ErrorMessage",
        type: {
            name: "Composite",
            className: "ErrorMessage",
            modelProperties: {
                lang: {
                    serializedName: "lang",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BatchErrorDetail = {
        serializedName: "BatchErrorDetail",
        type: {
            name: "Composite",
            className: "BatchErrorDetail",
            modelProperties: {
                key: {
                    serializedName: "key",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BatchError = {
        serializedName: "BatchError",
        type: {
            name: "Composite",
            className: "BatchError",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "Composite",
                        className: "ErrorMessage"
                    }
                },
                values: {
                    serializedName: "values",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BatchErrorDetail"
                            }
                        }
                    }
                }
            }
        }
    };
    var TaskAddResult = {
        serializedName: "TaskAddResult",
        type: {
            name: "Composite",
            className: "TaskAddResult",
            modelProperties: {
                status: {
                    required: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "success",
                            "clienterror",
                            "servererror"
                        ]
                    }
                },
                taskId: {
                    required: true,
                    serializedName: "taskId",
                    type: {
                        name: "String"
                    }
                },
                eTag: {
                    serializedName: "eTag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "lastModified",
                    type: {
                        name: "DateTime"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "BatchError"
                    }
                }
            }
        }
    };
    var TaskAddCollectionResult = {
        serializedName: "TaskAddCollectionResult",
        type: {
            name: "Composite",
            className: "TaskAddCollectionResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TaskAddResult"
                            }
                        }
                    }
                }
            }
        }
    };
    var SubtaskInformation = {
        serializedName: "SubtaskInformation",
        type: {
            name: "Composite",
            className: "SubtaskInformation",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "Number"
                    }
                },
                nodeInfo: {
                    serializedName: "nodeInfo",
                    type: {
                        name: "Composite",
                        className: "ComputeNodeInformation"
                    }
                },
                startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                exitCode: {
                    serializedName: "exitCode",
                    type: {
                        name: "Number"
                    }
                },
                containerInfo: {
                    serializedName: "containerInfo",
                    type: {
                        name: "Composite",
                        className: "TaskContainerExecutionInformation"
                    }
                },
                failureInfo: {
                    serializedName: "failureInfo",
                    type: {
                        name: "Composite",
                        className: "TaskFailureInformation"
                    }
                },
                state: {
                    serializedName: "state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "preparing",
                            "running",
                            "completed"
                        ]
                    }
                },
                stateTransitionTime: {
                    serializedName: "stateTransitionTime",
                    type: {
                        name: "DateTime"
                    }
                },
                previousState: {
                    serializedName: "previousState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "preparing",
                            "running",
                            "completed"
                        ]
                    }
                },
                previousStateTransitionTime: {
                    serializedName: "previousStateTransitionTime",
                    type: {
                        name: "DateTime"
                    }
                },
                result: {
                    serializedName: "result",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "success",
                            "failure"
                        ]
                    }
                }
            }
        }
    };
    var CloudTaskListSubtasksResult = {
        serializedName: "CloudTaskListSubtasksResult",
        type: {
            name: "Composite",
            className: "CloudTaskListSubtasksResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubtaskInformation"
                            }
                        }
                    }
                }
            }
        }
    };
    var TaskInformation = {
        serializedName: "TaskInformation",
        type: {
            name: "Composite",
            className: "TaskInformation",
            modelProperties: {
                taskUrl: {
                    serializedName: "taskUrl",
                    type: {
                        name: "String"
                    }
                },
                jobId: {
                    serializedName: "jobId",
                    type: {
                        name: "String"
                    }
                },
                taskId: {
                    serializedName: "taskId",
                    type: {
                        name: "String"
                    }
                },
                subtaskId: {
                    serializedName: "subtaskId",
                    type: {
                        name: "Number"
                    }
                },
                taskState: {
                    required: true,
                    serializedName: "taskState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "active",
                            "preparing",
                            "running",
                            "completed"
                        ]
                    }
                },
                executionInfo: {
                    serializedName: "executionInfo",
                    type: {
                        name: "Composite",
                        className: "TaskExecutionInformation"
                    }
                }
            }
        }
    };
    var StartTaskInformation = {
        serializedName: "StartTaskInformation",
        type: {
            name: "Composite",
            className: "StartTaskInformation",
            modelProperties: {
                state: {
                    required: true,
                    serializedName: "state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "running",
                            "completed"
                        ]
                    }
                },
                startTime: {
                    required: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                exitCode: {
                    serializedName: "exitCode",
                    type: {
                        name: "Number"
                    }
                },
                containerInfo: {
                    serializedName: "containerInfo",
                    type: {
                        name: "Composite",
                        className: "TaskContainerExecutionInformation"
                    }
                },
                failureInfo: {
                    serializedName: "failureInfo",
                    type: {
                        name: "Composite",
                        className: "TaskFailureInformation"
                    }
                },
                retryCount: {
                    required: true,
                    serializedName: "retryCount",
                    type: {
                        name: "Number"
                    }
                },
                lastRetryTime: {
                    serializedName: "lastRetryTime",
                    type: {
                        name: "DateTime"
                    }
                },
                result: {
                    serializedName: "result",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "success",
                            "failure"
                        ]
                    }
                }
            }
        }
    };
    var ComputeNodeError = {
        serializedName: "ComputeNodeError",
        type: {
            name: "Composite",
            className: "ComputeNodeError",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                errorDetails: {
                    serializedName: "errorDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NameValuePair"
                            }
                        }
                    }
                }
            }
        }
    };
    var InboundEndpoint = {
        serializedName: "InboundEndpoint",
        type: {
            name: "Composite",
            className: "InboundEndpoint",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                protocol: {
                    required: true,
                    serializedName: "protocol",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "tcp",
                            "udp"
                        ]
                    }
                },
                publicIPAddress: {
                    required: true,
                    serializedName: "publicIPAddress",
                    type: {
                        name: "String"
                    }
                },
                publicFQDN: {
                    required: true,
                    serializedName: "publicFQDN",
                    type: {
                        name: "String"
                    }
                },
                frontendPort: {
                    required: true,
                    serializedName: "frontendPort",
                    type: {
                        name: "Number"
                    }
                },
                backendPort: {
                    required: true,
                    serializedName: "backendPort",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ComputeNodeEndpointConfiguration = {
        serializedName: "ComputeNodeEndpointConfiguration",
        type: {
            name: "Composite",
            className: "ComputeNodeEndpointConfiguration",
            modelProperties: {
                inboundEndpoints: {
                    required: true,
                    serializedName: "inboundEndpoints",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InboundEndpoint"
                            }
                        }
                    }
                }
            }
        }
    };
    var ComputeNode = {
        serializedName: "ComputeNode",
        type: {
            name: "Composite",
            className: "ComputeNode",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                url: {
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                },
                state: {
                    serializedName: "state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "idle",
                            "rebooting",
                            "reimaging",
                            "running",
                            "unusable",
                            "creating",
                            "starting",
                            "waitingforstarttask",
                            "starttaskfailed",
                            "unknown",
                            "leavingpool",
                            "offline",
                            "preempted"
                        ]
                    }
                },
                schedulingState: {
                    serializedName: "schedulingState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "enabled",
                            "disabled"
                        ]
                    }
                },
                stateTransitionTime: {
                    serializedName: "stateTransitionTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastBootTime: {
                    serializedName: "lastBootTime",
                    type: {
                        name: "DateTime"
                    }
                },
                allocationTime: {
                    serializedName: "allocationTime",
                    type: {
                        name: "DateTime"
                    }
                },
                ipAddress: {
                    serializedName: "ipAddress",
                    type: {
                        name: "String"
                    }
                },
                affinityId: {
                    serializedName: "affinityId",
                    type: {
                        name: "String"
                    }
                },
                vmSize: {
                    serializedName: "vmSize",
                    type: {
                        name: "String"
                    }
                },
                totalTasksRun: {
                    serializedName: "totalTasksRun",
                    type: {
                        name: "Number"
                    }
                },
                runningTasksCount: {
                    serializedName: "runningTasksCount",
                    type: {
                        name: "Number"
                    }
                },
                totalTasksSucceeded: {
                    serializedName: "totalTasksSucceeded",
                    type: {
                        name: "Number"
                    }
                },
                recentTasks: {
                    serializedName: "recentTasks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TaskInformation"
                            }
                        }
                    }
                },
                startTask: {
                    serializedName: "startTask",
                    type: {
                        name: "Composite",
                        className: "StartTask"
                    }
                },
                startTaskInfo: {
                    serializedName: "startTaskInfo",
                    type: {
                        name: "Composite",
                        className: "StartTaskInformation"
                    }
                },
                certificateReferences: {
                    serializedName: "certificateReferences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CertificateReference"
                            }
                        }
                    }
                },
                errors: {
                    serializedName: "errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ComputeNodeError"
                            }
                        }
                    }
                },
                isDedicated: {
                    serializedName: "isDedicated",
                    type: {
                        name: "Boolean"
                    }
                },
                endpointConfiguration: {
                    serializedName: "endpointConfiguration",
                    type: {
                        name: "Composite",
                        className: "ComputeNodeEndpointConfiguration"
                    }
                },
                nodeAgentInfo: {
                    serializedName: "nodeAgentInfo",
                    type: {
                        name: "Composite",
                        className: "NodeAgentInformation"
                    }
                }
            }
        }
    };
    var ComputeNodeUser = {
        serializedName: "ComputeNodeUser",
        type: {
            name: "Composite",
            className: "ComputeNodeUser",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                isAdmin: {
                    serializedName: "isAdmin",
                    type: {
                        name: "Boolean"
                    }
                },
                expiryTime: {
                    serializedName: "expiryTime",
                    type: {
                        name: "DateTime"
                    }
                },
                password: {
                    serializedName: "password",
                    type: {
                        name: "String"
                    }
                },
                sshPublicKey: {
                    serializedName: "sshPublicKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ComputeNodeGetRemoteLoginSettingsResult = {
        serializedName: "ComputeNodeGetRemoteLoginSettingsResult",
        type: {
            name: "Composite",
            className: "ComputeNodeGetRemoteLoginSettingsResult",
            modelProperties: {
                remoteLoginIPAddress: {
                    required: true,
                    serializedName: "remoteLoginIPAddress",
                    type: {
                        name: "String"
                    }
                },
                remoteLoginPort: {
                    required: true,
                    serializedName: "remoteLoginPort",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var JobSchedulePatchParameter = {
        serializedName: "JobSchedulePatchParameter",
        type: {
            name: "Composite",
            className: "JobSchedulePatchParameter",
            modelProperties: {
                schedule: {
                    serializedName: "schedule",
                    type: {
                        name: "Composite",
                        className: "Schedule"
                    }
                },
                jobSpecification: {
                    serializedName: "jobSpecification",
                    type: {
                        name: "Composite",
                        className: "JobSpecification"
                    }
                },
                metadata: {
                    serializedName: "metadata",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetadataItem"
                            }
                        }
                    }
                }
            }
        }
    };
    var JobScheduleUpdateParameter = {
        serializedName: "JobScheduleUpdateParameter",
        type: {
            name: "Composite",
            className: "JobScheduleUpdateParameter",
            modelProperties: {
                schedule: {
                    required: true,
                    serializedName: "schedule",
                    type: {
                        name: "Composite",
                        className: "Schedule"
                    }
                },
                jobSpecification: {
                    required: true,
                    serializedName: "jobSpecification",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "JobSpecification"
                    }
                },
                metadata: {
                    serializedName: "metadata",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetadataItem"
                            }
                        }
                    }
                }
            }
        }
    };
    var JobDisableParameter = {
        serializedName: "JobDisableParameter",
        type: {
            name: "Composite",
            className: "JobDisableParameter",
            modelProperties: {
                disableTasks: {
                    required: true,
                    serializedName: "disableTasks",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "requeue",
                            "terminate",
                            "wait"
                        ]
                    }
                }
            }
        }
    };
    var JobTerminateParameter = {
        serializedName: "JobTerminateParameter",
        type: {
            name: "Composite",
            className: "JobTerminateParameter",
            modelProperties: {
                terminateReason: {
                    serializedName: "terminateReason",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobPatchParameter = {
        serializedName: "JobPatchParameter",
        type: {
            name: "Composite",
            className: "JobPatchParameter",
            modelProperties: {
                priority: {
                    serializedName: "priority",
                    type: {
                        name: "Number"
                    }
                },
                onAllTasksComplete: {
                    serializedName: "onAllTasksComplete",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "noaction",
                            "terminatejob"
                        ]
                    }
                },
                constraints: {
                    serializedName: "constraints",
                    type: {
                        name: "Composite",
                        className: "JobConstraints"
                    }
                },
                poolInfo: {
                    serializedName: "poolInfo",
                    type: {
                        name: "Composite",
                        className: "PoolInformation"
                    }
                },
                metadata: {
                    serializedName: "metadata",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetadataItem"
                            }
                        }
                    }
                }
            }
        }
    };
    var JobUpdateParameter = {
        serializedName: "JobUpdateParameter",
        type: {
            name: "Composite",
            className: "JobUpdateParameter",
            modelProperties: {
                priority: {
                    serializedName: "priority",
                    type: {
                        name: "Number"
                    }
                },
                constraints: {
                    serializedName: "constraints",
                    type: {
                        name: "Composite",
                        className: "JobConstraints"
                    }
                },
                poolInfo: {
                    required: true,
                    serializedName: "poolInfo",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "PoolInformation"
                    }
                },
                metadata: {
                    serializedName: "metadata",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetadataItem"
                            }
                        }
                    }
                },
                onAllTasksComplete: {
                    serializedName: "onAllTasksComplete",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "noaction",
                            "terminatejob"
                        ]
                    }
                }
            }
        }
    };
    var PoolEnableAutoScaleParameter = {
        serializedName: "PoolEnableAutoScaleParameter",
        type: {
            name: "Composite",
            className: "PoolEnableAutoScaleParameter",
            modelProperties: {
                autoScaleFormula: {
                    serializedName: "autoScaleFormula",
                    type: {
                        name: "String"
                    }
                },
                autoScaleEvaluationInterval: {
                    serializedName: "autoScaleEvaluationInterval",
                    type: {
                        name: "TimeSpan"
                    }
                }
            }
        }
    };
    var PoolEvaluateAutoScaleParameter = {
        serializedName: "PoolEvaluateAutoScaleParameter",
        type: {
            name: "Composite",
            className: "PoolEvaluateAutoScaleParameter",
            modelProperties: {
                autoScaleFormula: {
                    required: true,
                    serializedName: "autoScaleFormula",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PoolResizeParameter = {
        serializedName: "PoolResizeParameter",
        type: {
            name: "Composite",
            className: "PoolResizeParameter",
            modelProperties: {
                targetDedicatedNodes: {
                    serializedName: "targetDedicatedNodes",
                    type: {
                        name: "Number"
                    }
                },
                targetLowPriorityNodes: {
                    serializedName: "targetLowPriorityNodes",
                    type: {
                        name: "Number"
                    }
                },
                resizeTimeout: {
                    serializedName: "resizeTimeout",
                    type: {
                        name: "TimeSpan"
                    }
                },
                nodeDeallocationOption: {
                    serializedName: "nodeDeallocationOption",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "requeue",
                            "terminate",
                            "taskcompletion",
                            "retaineddata"
                        ]
                    }
                }
            }
        }
    };
    var PoolUpdatePropertiesParameter = {
        serializedName: "PoolUpdatePropertiesParameter",
        type: {
            name: "Composite",
            className: "PoolUpdatePropertiesParameter",
            modelProperties: {
                startTask: {
                    serializedName: "startTask",
                    type: {
                        name: "Composite",
                        className: "StartTask"
                    }
                },
                certificateReferences: {
                    required: true,
                    serializedName: "certificateReferences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CertificateReference"
                            }
                        }
                    }
                },
                applicationPackageReferences: {
                    required: true,
                    serializedName: "applicationPackageReferences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationPackageReference"
                            }
                        }
                    }
                },
                metadata: {
                    required: true,
                    serializedName: "metadata",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetadataItem"
                            }
                        }
                    }
                }
            }
        }
    };
    var PoolUpgradeOSParameter = {
        serializedName: "PoolUpgradeOSParameter",
        type: {
            name: "Composite",
            className: "PoolUpgradeOSParameter",
            modelProperties: {
                targetOSVersion: {
                    required: true,
                    serializedName: "targetOSVersion",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PoolPatchParameter = {
        serializedName: "PoolPatchParameter",
        type: {
            name: "Composite",
            className: "PoolPatchParameter",
            modelProperties: {
                startTask: {
                    serializedName: "startTask",
                    type: {
                        name: "Composite",
                        className: "StartTask"
                    }
                },
                certificateReferences: {
                    serializedName: "certificateReferences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CertificateReference"
                            }
                        }
                    }
                },
                applicationPackageReferences: {
                    serializedName: "applicationPackageReferences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationPackageReference"
                            }
                        }
                    }
                },
                metadata: {
                    serializedName: "metadata",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetadataItem"
                            }
                        }
                    }
                }
            }
        }
    };
    var TaskUpdateParameter = {
        serializedName: "TaskUpdateParameter",
        type: {
            name: "Composite",
            className: "TaskUpdateParameter",
            modelProperties: {
                constraints: {
                    serializedName: "constraints",
                    type: {
                        name: "Composite",
                        className: "TaskConstraints"
                    }
                }
            }
        }
    };
    var NodeUpdateUserParameter = {
        serializedName: "NodeUpdateUserParameter",
        type: {
            name: "Composite",
            className: "NodeUpdateUserParameter",
            modelProperties: {
                password: {
                    serializedName: "password",
                    type: {
                        name: "String"
                    }
                },
                expiryTime: {
                    serializedName: "expiryTime",
                    type: {
                        name: "DateTime"
                    }
                },
                sshPublicKey: {
                    serializedName: "sshPublicKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NodeRebootParameter = {
        serializedName: "NodeRebootParameter",
        type: {
            name: "Composite",
            className: "NodeRebootParameter",
            modelProperties: {
                nodeRebootOption: {
                    serializedName: "nodeRebootOption",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "requeue",
                            "terminate",
                            "taskcompletion",
                            "retaineddata"
                        ]
                    }
                }
            }
        }
    };
    var NodeReimageParameter = {
        serializedName: "NodeReimageParameter",
        type: {
            name: "Composite",
            className: "NodeReimageParameter",
            modelProperties: {
                nodeReimageOption: {
                    serializedName: "nodeReimageOption",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "requeue",
                            "terminate",
                            "taskcompletion",
                            "retaineddata"
                        ]
                    }
                }
            }
        }
    };
    var NodeDisableSchedulingParameter = {
        serializedName: "NodeDisableSchedulingParameter",
        type: {
            name: "Composite",
            className: "NodeDisableSchedulingParameter",
            modelProperties: {
                nodeDisableSchedulingOption: {
                    serializedName: "nodeDisableSchedulingOption",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "requeue",
                            "terminate",
                            "taskcompletion"
                        ]
                    }
                }
            }
        }
    };
    var NodeRemoveParameter = {
        serializedName: "NodeRemoveParameter",
        type: {
            name: "Composite",
            className: "NodeRemoveParameter",
            modelProperties: {
                nodeList: {
                    required: true,
                    serializedName: "nodeList",
                    constraints: {
                        MaxItems: 100
                    },
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                resizeTimeout: {
                    serializedName: "resizeTimeout",
                    type: {
                        name: "TimeSpan"
                    }
                },
                nodeDeallocationOption: {
                    serializedName: "nodeDeallocationOption",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "requeue",
                            "terminate",
                            "taskcompletion",
                            "retaineddata"
                        ]
                    }
                }
            }
        }
    };
    var UploadBatchServiceLogsConfiguration = {
        serializedName: "UploadBatchServiceLogsConfiguration",
        type: {
            name: "Composite",
            className: "UploadBatchServiceLogsConfiguration",
            modelProperties: {
                containerUrl: {
                    required: true,
                    serializedName: "containerUrl",
                    type: {
                        name: "String"
                    }
                },
                startTime: {
                    required: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var UploadBatchServiceLogsResult = {
        serializedName: "UploadBatchServiceLogsResult",
        type: {
            name: "Composite",
            className: "UploadBatchServiceLogsResult",
            modelProperties: {
                virtualDirectoryName: {
                    required: true,
                    serializedName: "virtualDirectoryName",
                    type: {
                        name: "String"
                    }
                },
                numberOfFilesUploaded: {
                    required: true,
                    serializedName: "numberOfFilesUploaded",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var NodeCounts = {
        serializedName: "NodeCounts",
        type: {
            name: "Composite",
            className: "NodeCounts",
            modelProperties: {
                creating: {
                    required: true,
                    serializedName: "creating",
                    type: {
                        name: "Number"
                    }
                },
                idle: {
                    required: true,
                    serializedName: "idle",
                    type: {
                        name: "Number"
                    }
                },
                offline: {
                    required: true,
                    serializedName: "offline",
                    type: {
                        name: "Number"
                    }
                },
                preempted: {
                    required: true,
                    serializedName: "preempted",
                    type: {
                        name: "Number"
                    }
                },
                rebooting: {
                    required: true,
                    serializedName: "rebooting",
                    type: {
                        name: "Number"
                    }
                },
                reimaging: {
                    required: true,
                    serializedName: "reimaging",
                    type: {
                        name: "Number"
                    }
                },
                running: {
                    required: true,
                    serializedName: "running",
                    type: {
                        name: "Number"
                    }
                },
                starting: {
                    required: true,
                    serializedName: "starting",
                    type: {
                        name: "Number"
                    }
                },
                startTaskFailed: {
                    required: true,
                    serializedName: "startTaskFailed",
                    type: {
                        name: "Number"
                    }
                },
                leavingPool: {
                    required: true,
                    serializedName: "leavingPool",
                    type: {
                        name: "Number"
                    }
                },
                unknown: {
                    required: true,
                    serializedName: "unknown",
                    type: {
                        name: "Number"
                    }
                },
                unusable: {
                    required: true,
                    serializedName: "unusable",
                    type: {
                        name: "Number"
                    }
                },
                waitingForStartTask: {
                    required: true,
                    serializedName: "waitingForStartTask",
                    type: {
                        name: "Number"
                    }
                },
                total: {
                    required: true,
                    serializedName: "total",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var PoolNodeCounts = {
        serializedName: "PoolNodeCounts",
        type: {
            name: "Composite",
            className: "PoolNodeCounts",
            modelProperties: {
                poolId: {
                    required: true,
                    serializedName: "poolId",
                    type: {
                        name: "String"
                    }
                },
                dedicated: {
                    serializedName: "dedicated",
                    type: {
                        name: "Composite",
                        className: "NodeCounts"
                    }
                },
                lowPriority: {
                    serializedName: "lowPriority",
                    type: {
                        name: "Composite",
                        className: "NodeCounts"
                    }
                }
            }
        }
    };
    var ApplicationListOptions = {
        type: {
            name: "Composite",
            className: "ApplicationListOptions",
            modelProperties: {
                maxResults: {
                    defaultValue: 1000,
                    type: {
                        name: "Number"
                    }
                },
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var ApplicationGetOptions = {
        type: {
            name: "Composite",
            className: "ApplicationGetOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var PoolListUsageMetricsOptions = {
        type: {
            name: "Composite",
            className: "PoolListUsageMetricsOptions",
            modelProperties: {
                startTime: {
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    type: {
                        name: "DateTime"
                    }
                },
                filter: {
                    type: {
                        name: "String"
                    }
                },
                maxResults: {
                    defaultValue: 1000,
                    type: {
                        name: "Number"
                    }
                },
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var PoolGetAllLifetimeStatisticsOptions = {
        type: {
            name: "Composite",
            className: "PoolGetAllLifetimeStatisticsOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var PoolAddOptions = {
        type: {
            name: "Composite",
            className: "PoolAddOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var PoolListOptions = {
        type: {
            name: "Composite",
            className: "PoolListOptions",
            modelProperties: {
                filter: {
                    type: {
                        name: "String"
                    }
                },
                select: {
                    type: {
                        name: "String"
                    }
                },
                expand: {
                    type: {
                        name: "String"
                    }
                },
                maxResults: {
                    defaultValue: 1000,
                    type: {
                        name: "Number"
                    }
                },
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var PoolDeleteMethodOptions = {
        type: {
            name: "Composite",
            className: "PoolDeleteMethodOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifNoneMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifModifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifUnmodifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var PoolExistsOptions = {
        type: {
            name: "Composite",
            className: "PoolExistsOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifNoneMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifModifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifUnmodifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var PoolGetOptions = {
        type: {
            name: "Composite",
            className: "PoolGetOptions",
            modelProperties: {
                select: {
                    type: {
                        name: "String"
                    }
                },
                expand: {
                    type: {
                        name: "String"
                    }
                },
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifNoneMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifModifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifUnmodifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var PoolPatchOptions = {
        type: {
            name: "Composite",
            className: "PoolPatchOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifNoneMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifModifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifUnmodifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var PoolDisableAutoScaleOptions = {
        type: {
            name: "Composite",
            className: "PoolDisableAutoScaleOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var PoolEnableAutoScaleOptions = {
        type: {
            name: "Composite",
            className: "PoolEnableAutoScaleOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifNoneMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifModifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifUnmodifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var PoolEvaluateAutoScaleOptions = {
        type: {
            name: "Composite",
            className: "PoolEvaluateAutoScaleOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var PoolResizeOptions = {
        type: {
            name: "Composite",
            className: "PoolResizeOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifNoneMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifModifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifUnmodifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var PoolStopResizeOptions = {
        type: {
            name: "Composite",
            className: "PoolStopResizeOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifNoneMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifModifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifUnmodifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var PoolUpdatePropertiesOptions = {
        type: {
            name: "Composite",
            className: "PoolUpdatePropertiesOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var PoolUpgradeOSOptions = {
        type: {
            name: "Composite",
            className: "PoolUpgradeOSOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifNoneMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifModifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifUnmodifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var PoolRemoveNodesOptions = {
        type: {
            name: "Composite",
            className: "PoolRemoveNodesOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifNoneMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifModifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifUnmodifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var AccountListNodeAgentSkusOptions = {
        type: {
            name: "Composite",
            className: "AccountListNodeAgentSkusOptions",
            modelProperties: {
                filter: {
                    type: {
                        name: "String"
                    }
                },
                maxResults: {
                    defaultValue: 1000,
                    type: {
                        name: "Number"
                    }
                },
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var AccountListPoolNodeCountsOptions = {
        type: {
            name: "Composite",
            className: "AccountListPoolNodeCountsOptions",
            modelProperties: {
                filter: {
                    type: {
                        name: "String"
                    }
                },
                maxResults: {
                    defaultValue: 10,
                    type: {
                        name: "Number"
                    }
                },
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobGetAllLifetimeStatisticsOptions = {
        type: {
            name: "Composite",
            className: "JobGetAllLifetimeStatisticsOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobDeleteMethodOptions = {
        type: {
            name: "Composite",
            className: "JobDeleteMethodOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifNoneMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifModifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifUnmodifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobGetOptions = {
        type: {
            name: "Composite",
            className: "JobGetOptions",
            modelProperties: {
                select: {
                    type: {
                        name: "String"
                    }
                },
                expand: {
                    type: {
                        name: "String"
                    }
                },
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifNoneMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifModifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifUnmodifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobPatchOptions = {
        type: {
            name: "Composite",
            className: "JobPatchOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifNoneMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifModifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifUnmodifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobUpdateOptions = {
        type: {
            name: "Composite",
            className: "JobUpdateOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifNoneMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifModifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifUnmodifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobDisableOptions = {
        type: {
            name: "Composite",
            className: "JobDisableOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifNoneMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifModifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifUnmodifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobEnableOptions = {
        type: {
            name: "Composite",
            className: "JobEnableOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifNoneMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifModifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifUnmodifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobTerminateOptions = {
        type: {
            name: "Composite",
            className: "JobTerminateOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifNoneMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifModifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifUnmodifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobAddOptions = {
        type: {
            name: "Composite",
            className: "JobAddOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobListOptions = {
        type: {
            name: "Composite",
            className: "JobListOptions",
            modelProperties: {
                filter: {
                    type: {
                        name: "String"
                    }
                },
                select: {
                    type: {
                        name: "String"
                    }
                },
                expand: {
                    type: {
                        name: "String"
                    }
                },
                maxResults: {
                    defaultValue: 1000,
                    type: {
                        name: "Number"
                    }
                },
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobListFromJobScheduleOptions = {
        type: {
            name: "Composite",
            className: "JobListFromJobScheduleOptions",
            modelProperties: {
                filter: {
                    type: {
                        name: "String"
                    }
                },
                select: {
                    type: {
                        name: "String"
                    }
                },
                expand: {
                    type: {
                        name: "String"
                    }
                },
                maxResults: {
                    defaultValue: 1000,
                    type: {
                        name: "Number"
                    }
                },
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobListPreparationAndReleaseTaskStatusOptions = {
        type: {
            name: "Composite",
            className: "JobListPreparationAndReleaseTaskStatusOptions",
            modelProperties: {
                filter: {
                    type: {
                        name: "String"
                    }
                },
                select: {
                    type: {
                        name: "String"
                    }
                },
                maxResults: {
                    defaultValue: 1000,
                    type: {
                        name: "Number"
                    }
                },
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobGetTaskCountsOptions = {
        type: {
            name: "Composite",
            className: "JobGetTaskCountsOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var CertificateAddOptions = {
        type: {
            name: "Composite",
            className: "CertificateAddOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var CertificateListOptions = {
        type: {
            name: "Composite",
            className: "CertificateListOptions",
            modelProperties: {
                filter: {
                    type: {
                        name: "String"
                    }
                },
                select: {
                    type: {
                        name: "String"
                    }
                },
                maxResults: {
                    defaultValue: 1000,
                    type: {
                        name: "Number"
                    }
                },
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var CertificateCancelDeletionOptions = {
        type: {
            name: "Composite",
            className: "CertificateCancelDeletionOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var CertificateDeleteMethodOptions = {
        type: {
            name: "Composite",
            className: "CertificateDeleteMethodOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var CertificateGetOptions = {
        type: {
            name: "Composite",
            className: "CertificateGetOptions",
            modelProperties: {
                select: {
                    type: {
                        name: "String"
                    }
                },
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var FileDeleteFromTaskOptions = {
        type: {
            name: "Composite",
            className: "FileDeleteFromTaskOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var FileGetFromTaskOptions = {
        type: {
            name: "Composite",
            className: "FileGetFromTaskOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ocpRange: {
                    type: {
                        name: "String"
                    }
                },
                ifModifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifUnmodifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var FileGetPropertiesFromTaskOptions = {
        type: {
            name: "Composite",
            className: "FileGetPropertiesFromTaskOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifModifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifUnmodifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var FileDeleteFromComputeNodeOptions = {
        type: {
            name: "Composite",
            className: "FileDeleteFromComputeNodeOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var FileGetFromComputeNodeOptions = {
        type: {
            name: "Composite",
            className: "FileGetFromComputeNodeOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ocpRange: {
                    type: {
                        name: "String"
                    }
                },
                ifModifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifUnmodifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var FileGetPropertiesFromComputeNodeOptions = {
        type: {
            name: "Composite",
            className: "FileGetPropertiesFromComputeNodeOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifModifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifUnmodifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var FileListFromTaskOptions = {
        type: {
            name: "Composite",
            className: "FileListFromTaskOptions",
            modelProperties: {
                filter: {
                    type: {
                        name: "String"
                    }
                },
                maxResults: {
                    defaultValue: 1000,
                    type: {
                        name: "Number"
                    }
                },
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var FileListFromComputeNodeOptions = {
        type: {
            name: "Composite",
            className: "FileListFromComputeNodeOptions",
            modelProperties: {
                filter: {
                    type: {
                        name: "String"
                    }
                },
                maxResults: {
                    defaultValue: 1000,
                    type: {
                        name: "Number"
                    }
                },
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobScheduleExistsOptions = {
        type: {
            name: "Composite",
            className: "JobScheduleExistsOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifNoneMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifModifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifUnmodifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobScheduleDeleteMethodOptions = {
        type: {
            name: "Composite",
            className: "JobScheduleDeleteMethodOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifNoneMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifModifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifUnmodifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobScheduleGetOptions = {
        type: {
            name: "Composite",
            className: "JobScheduleGetOptions",
            modelProperties: {
                select: {
                    type: {
                        name: "String"
                    }
                },
                expand: {
                    type: {
                        name: "String"
                    }
                },
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifNoneMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifModifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifUnmodifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobSchedulePatchOptions = {
        type: {
            name: "Composite",
            className: "JobSchedulePatchOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifNoneMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifModifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifUnmodifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobScheduleUpdateOptions = {
        type: {
            name: "Composite",
            className: "JobScheduleUpdateOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifNoneMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifModifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifUnmodifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobScheduleDisableOptions = {
        type: {
            name: "Composite",
            className: "JobScheduleDisableOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifNoneMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifModifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifUnmodifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobScheduleEnableOptions = {
        type: {
            name: "Composite",
            className: "JobScheduleEnableOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifNoneMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifModifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifUnmodifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobScheduleTerminateOptions = {
        type: {
            name: "Composite",
            className: "JobScheduleTerminateOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifNoneMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifModifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifUnmodifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobScheduleAddOptions = {
        type: {
            name: "Composite",
            className: "JobScheduleAddOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobScheduleListOptions = {
        type: {
            name: "Composite",
            className: "JobScheduleListOptions",
            modelProperties: {
                filter: {
                    type: {
                        name: "String"
                    }
                },
                select: {
                    type: {
                        name: "String"
                    }
                },
                expand: {
                    type: {
                        name: "String"
                    }
                },
                maxResults: {
                    defaultValue: 1000,
                    type: {
                        name: "Number"
                    }
                },
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var TaskAddOptions = {
        type: {
            name: "Composite",
            className: "TaskAddOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var TaskListOptions = {
        type: {
            name: "Composite",
            className: "TaskListOptions",
            modelProperties: {
                filter: {
                    type: {
                        name: "String"
                    }
                },
                select: {
                    type: {
                        name: "String"
                    }
                },
                expand: {
                    type: {
                        name: "String"
                    }
                },
                maxResults: {
                    defaultValue: 1000,
                    type: {
                        name: "Number"
                    }
                },
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var TaskAddCollectionOptions = {
        type: {
            name: "Composite",
            className: "TaskAddCollectionOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var TaskDeleteMethodOptions = {
        type: {
            name: "Composite",
            className: "TaskDeleteMethodOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifNoneMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifModifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifUnmodifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var TaskGetOptions = {
        type: {
            name: "Composite",
            className: "TaskGetOptions",
            modelProperties: {
                select: {
                    type: {
                        name: "String"
                    }
                },
                expand: {
                    type: {
                        name: "String"
                    }
                },
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifNoneMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifModifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifUnmodifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var TaskUpdateOptions = {
        type: {
            name: "Composite",
            className: "TaskUpdateOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifNoneMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifModifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifUnmodifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var TaskListSubtasksOptions = {
        type: {
            name: "Composite",
            className: "TaskListSubtasksOptions",
            modelProperties: {
                select: {
                    type: {
                        name: "String"
                    }
                },
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var TaskTerminateOptions = {
        type: {
            name: "Composite",
            className: "TaskTerminateOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifNoneMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifModifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifUnmodifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var TaskReactivateOptions = {
        type: {
            name: "Composite",
            className: "TaskReactivateOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifNoneMatch: {
                    type: {
                        name: "String"
                    }
                },
                ifModifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ifUnmodifiedSince: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var ComputeNodeAddUserOptions = {
        type: {
            name: "Composite",
            className: "ComputeNodeAddUserOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var ComputeNodeDeleteUserOptions = {
        type: {
            name: "Composite",
            className: "ComputeNodeDeleteUserOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var ComputeNodeUpdateUserOptions = {
        type: {
            name: "Composite",
            className: "ComputeNodeUpdateUserOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var ComputeNodeGetOptions = {
        type: {
            name: "Composite",
            className: "ComputeNodeGetOptions",
            modelProperties: {
                select: {
                    type: {
                        name: "String"
                    }
                },
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var ComputeNodeRebootOptions = {
        type: {
            name: "Composite",
            className: "ComputeNodeRebootOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var ComputeNodeReimageOptions = {
        type: {
            name: "Composite",
            className: "ComputeNodeReimageOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var ComputeNodeDisableSchedulingOptions = {
        type: {
            name: "Composite",
            className: "ComputeNodeDisableSchedulingOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var ComputeNodeEnableSchedulingOptions = {
        type: {
            name: "Composite",
            className: "ComputeNodeEnableSchedulingOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var ComputeNodeGetRemoteLoginSettingsOptions = {
        type: {
            name: "Composite",
            className: "ComputeNodeGetRemoteLoginSettingsOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var ComputeNodeGetRemoteDesktopOptions = {
        type: {
            name: "Composite",
            className: "ComputeNodeGetRemoteDesktopOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var ComputeNodeUploadBatchServiceLogsOptions = {
        type: {
            name: "Composite",
            className: "ComputeNodeUploadBatchServiceLogsOptions",
            modelProperties: {
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var ComputeNodeListOptions = {
        type: {
            name: "Composite",
            className: "ComputeNodeListOptions",
            modelProperties: {
                filter: {
                    type: {
                        name: "String"
                    }
                },
                select: {
                    type: {
                        name: "String"
                    }
                },
                maxResults: {
                    defaultValue: 1000,
                    type: {
                        name: "Number"
                    }
                },
                timeout: {
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var ApplicationListNextOptions = {
        type: {
            name: "Composite",
            className: "ApplicationListNextOptions",
            modelProperties: {
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var PoolListUsageMetricsNextOptions = {
        type: {
            name: "Composite",
            className: "PoolListUsageMetricsNextOptions",
            modelProperties: {
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var PoolListNextOptions = {
        type: {
            name: "Composite",
            className: "PoolListNextOptions",
            modelProperties: {
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var AccountListNodeAgentSkusNextOptions = {
        type: {
            name: "Composite",
            className: "AccountListNodeAgentSkusNextOptions",
            modelProperties: {
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var AccountListPoolNodeCountsNextOptions = {
        type: {
            name: "Composite",
            className: "AccountListPoolNodeCountsNextOptions",
            modelProperties: {
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobListNextOptions = {
        type: {
            name: "Composite",
            className: "JobListNextOptions",
            modelProperties: {
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobListFromJobScheduleNextOptions = {
        type: {
            name: "Composite",
            className: "JobListFromJobScheduleNextOptions",
            modelProperties: {
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobListPreparationAndReleaseTaskStatusNextOptions = {
        type: {
            name: "Composite",
            className: "JobListPreparationAndReleaseTaskStatusNextOptions",
            modelProperties: {
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var CertificateListNextOptions = {
        type: {
            name: "Composite",
            className: "CertificateListNextOptions",
            modelProperties: {
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var FileListFromTaskNextOptions = {
        type: {
            name: "Composite",
            className: "FileListFromTaskNextOptions",
            modelProperties: {
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var FileListFromComputeNodeNextOptions = {
        type: {
            name: "Composite",
            className: "FileListFromComputeNodeNextOptions",
            modelProperties: {
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobScheduleListNextOptions = {
        type: {
            name: "Composite",
            className: "JobScheduleListNextOptions",
            modelProperties: {
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var TaskListNextOptions = {
        type: {
            name: "Composite",
            className: "TaskListNextOptions",
            modelProperties: {
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var ComputeNodeListNextOptions = {
        type: {
            name: "Composite",
            className: "ComputeNodeListNextOptions",
            modelProperties: {
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                },
                returnClientRequestId: {
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                ocpDate: {
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var ApplicationListHeaders = {
        serializedName: "application-list-headers",
        type: {
            name: "Composite",
            className: "ApplicationListHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var ApplicationGetHeaders = {
        serializedName: "application-get-headers",
        type: {
            name: "Composite",
            className: "ApplicationGetHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var PoolListUsageMetricsHeaders = {
        serializedName: "pool-listusagemetrics-headers",
        type: {
            name: "Composite",
            className: "PoolListUsageMetricsHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var AccountListNodeAgentSkusHeaders = {
        serializedName: "account-listnodeagentskus-headers",
        type: {
            name: "Composite",
            className: "AccountListNodeAgentSkusHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var AccountListPoolNodeCountsHeaders = {
        serializedName: "account-listpoolnodecounts-headers",
        type: {
            name: "Composite",
            className: "AccountListPoolNodeCountsHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                }
            }
        }
    };
    var PoolGetAllLifetimeStatisticsHeaders = {
        serializedName: "pool-getalllifetimestatistics-headers",
        type: {
            name: "Composite",
            className: "PoolGetAllLifetimeStatisticsHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobGetAllLifetimeStatisticsHeaders = {
        serializedName: "job-getalllifetimestatistics-headers",
        type: {
            name: "Composite",
            className: "JobGetAllLifetimeStatisticsHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var CertificateAddHeaders = {
        serializedName: "certificate-add-headers",
        type: {
            name: "Composite",
            className: "CertificateAddHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                dataServiceId: {
                    serializedName: "dataserviceid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CertificateListHeaders = {
        serializedName: "certificate-list-headers",
        type: {
            name: "Composite",
            className: "CertificateListHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var CertificateCancelDeletionHeaders = {
        serializedName: "certificate-canceldeletion-headers",
        type: {
            name: "Composite",
            className: "CertificateCancelDeletionHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                dataServiceId: {
                    serializedName: "dataserviceid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CertificateDeleteHeaders = {
        serializedName: "certificate-delete-headers",
        type: {
            name: "Composite",
            className: "CertificateDeleteHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var CertificateGetHeaders = {
        serializedName: "certificate-get-headers",
        type: {
            name: "Composite",
            className: "CertificateGetHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var FileDeleteFromTaskHeaders = {
        serializedName: "file-deletefromtask-headers",
        type: {
            name: "Composite",
            className: "FileDeleteFromTaskHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "String"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FileGetFromTaskHeaders = {
        serializedName: "file-getfromtask-headers",
        type: {
            name: "Composite",
            className: "FileGetFromTaskHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ocpCreationTime: {
                    serializedName: "ocp-creation-time",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ocpBatchFileIsdirectory: {
                    serializedName: "ocp-batch-file-isdirectory",
                    type: {
                        name: "Boolean"
                    }
                },
                ocpBatchFileUrl: {
                    serializedName: "ocp-batch-file-url",
                    type: {
                        name: "String"
                    }
                },
                ocpBatchFileMode: {
                    serializedName: "ocp-batch-file-mode",
                    type: {
                        name: "String"
                    }
                },
                contentType: {
                    serializedName: "content-type",
                    type: {
                        name: "String"
                    }
                },
                contentLength: {
                    serializedName: "content-length",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var FileGetPropertiesFromTaskHeaders = {
        serializedName: "file-getpropertiesfromtask-headers",
        type: {
            name: "Composite",
            className: "FileGetPropertiesFromTaskHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ocpCreationTime: {
                    serializedName: "ocp-creation-time",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ocpBatchFileIsdirectory: {
                    serializedName: "ocp-batch-file-isdirectory",
                    type: {
                        name: "Boolean"
                    }
                },
                ocpBatchFileUrl: {
                    serializedName: "ocp-batch-file-url",
                    type: {
                        name: "String"
                    }
                },
                ocpBatchFileMode: {
                    serializedName: "ocp-batch-file-mode",
                    type: {
                        name: "String"
                    }
                },
                contentType: {
                    serializedName: "content-type",
                    type: {
                        name: "String"
                    }
                },
                contentLength: {
                    serializedName: "content-length",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var FileDeleteFromComputeNodeHeaders = {
        serializedName: "file-deletefromcomputenode-headers",
        type: {
            name: "Composite",
            className: "FileDeleteFromComputeNodeHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "String"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FileGetFromComputeNodeHeaders = {
        serializedName: "file-getfromcomputenode-headers",
        type: {
            name: "Composite",
            className: "FileGetFromComputeNodeHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ocpCreationTime: {
                    serializedName: "ocp-creation-time",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ocpBatchFileIsdirectory: {
                    serializedName: "ocp-batch-file-isdirectory",
                    type: {
                        name: "Boolean"
                    }
                },
                ocpBatchFileUrl: {
                    serializedName: "ocp-batch-file-url",
                    type: {
                        name: "String"
                    }
                },
                ocpBatchFileMode: {
                    serializedName: "ocp-batch-file-mode",
                    type: {
                        name: "String"
                    }
                },
                contentType: {
                    serializedName: "content-type",
                    type: {
                        name: "String"
                    }
                },
                contentLength: {
                    serializedName: "content-length",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var FileGetPropertiesFromComputeNodeHeaders = {
        serializedName: "file-getpropertiesfromcomputenode-headers",
        type: {
            name: "Composite",
            className: "FileGetPropertiesFromComputeNodeHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ocpCreationTime: {
                    serializedName: "ocp-creation-time",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                ocpBatchFileIsdirectory: {
                    serializedName: "ocp-batch-file-isdirectory",
                    type: {
                        name: "Boolean"
                    }
                },
                ocpBatchFileUrl: {
                    serializedName: "ocp-batch-file-url",
                    type: {
                        name: "String"
                    }
                },
                ocpBatchFileMode: {
                    serializedName: "ocp-batch-file-mode",
                    type: {
                        name: "String"
                    }
                },
                contentType: {
                    serializedName: "content-type",
                    type: {
                        name: "String"
                    }
                },
                contentLength: {
                    serializedName: "content-length",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var FileListFromTaskHeaders = {
        serializedName: "file-listfromtask-headers",
        type: {
            name: "Composite",
            className: "FileListFromTaskHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var FileListFromComputeNodeHeaders = {
        serializedName: "file-listfromcomputenode-headers",
        type: {
            name: "Composite",
            className: "FileListFromComputeNodeHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobScheduleExistsHeaders = {
        serializedName: "jobschedule-exists-headers",
        type: {
            name: "Composite",
            className: "JobScheduleExistsHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobScheduleDeleteHeaders = {
        serializedName: "jobschedule-delete-headers",
        type: {
            name: "Composite",
            className: "JobScheduleDeleteHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "String"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobScheduleGetHeaders = {
        serializedName: "jobschedule-get-headers",
        type: {
            name: "Composite",
            className: "JobScheduleGetHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTagHeader: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModifiedHeader: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobSchedulePatchHeaders = {
        serializedName: "jobschedule-patch-headers",
        type: {
            name: "Composite",
            className: "JobSchedulePatchHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                dataServiceId: {
                    serializedName: "dataserviceid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobScheduleUpdateHeaders = {
        serializedName: "jobschedule-update-headers",
        type: {
            name: "Composite",
            className: "JobScheduleUpdateHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                dataServiceId: {
                    serializedName: "dataserviceid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobScheduleDisableHeaders = {
        serializedName: "jobschedule-disable-headers",
        type: {
            name: "Composite",
            className: "JobScheduleDisableHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                dataServiceId: {
                    serializedName: "dataserviceid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobScheduleEnableHeaders = {
        serializedName: "jobschedule-enable-headers",
        type: {
            name: "Composite",
            className: "JobScheduleEnableHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                dataServiceId: {
                    serializedName: "dataserviceid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobScheduleTerminateHeaders = {
        serializedName: "jobschedule-terminate-headers",
        type: {
            name: "Composite",
            className: "JobScheduleTerminateHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                dataServiceId: {
                    serializedName: "dataserviceid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobScheduleAddHeaders = {
        serializedName: "jobschedule-add-headers",
        type: {
            name: "Composite",
            className: "JobScheduleAddHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                dataServiceId: {
                    serializedName: "dataserviceid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobScheduleListHeaders = {
        serializedName: "jobschedule-list-headers",
        type: {
            name: "Composite",
            className: "JobScheduleListHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobDeleteHeaders = {
        serializedName: "job-delete-headers",
        type: {
            name: "Composite",
            className: "JobDeleteHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "String"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobGetHeaders = {
        serializedName: "job-get-headers",
        type: {
            name: "Composite",
            className: "JobGetHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTagHeader: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModifiedHeader: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobPatchHeaders = {
        serializedName: "job-patch-headers",
        type: {
            name: "Composite",
            className: "JobPatchHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                dataServiceId: {
                    serializedName: "dataserviceid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobUpdateHeaders = {
        serializedName: "job-update-headers",
        type: {
            name: "Composite",
            className: "JobUpdateHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                dataServiceId: {
                    serializedName: "dataserviceid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobDisableHeaders = {
        serializedName: "job-disable-headers",
        type: {
            name: "Composite",
            className: "JobDisableHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                dataServiceId: {
                    serializedName: "dataserviceid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobEnableHeaders = {
        serializedName: "job-enable-headers",
        type: {
            name: "Composite",
            className: "JobEnableHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                dataServiceId: {
                    serializedName: "dataserviceid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobTerminateHeaders = {
        serializedName: "job-terminate-headers",
        type: {
            name: "Composite",
            className: "JobTerminateHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                dataServiceId: {
                    serializedName: "dataserviceid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobAddHeaders = {
        serializedName: "job-add-headers",
        type: {
            name: "Composite",
            className: "JobAddHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                dataServiceId: {
                    serializedName: "dataserviceid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobListHeaders = {
        serializedName: "job-list-headers",
        type: {
            name: "Composite",
            className: "JobListHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobListFromJobScheduleHeaders = {
        serializedName: "job-listfromjobschedule-headers",
        type: {
            name: "Composite",
            className: "JobListFromJobScheduleHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobListPreparationAndReleaseTaskStatusHeaders = {
        serializedName: "job-listpreparationandreleasetaskstatus-headers",
        type: {
            name: "Composite",
            className: "JobListPreparationAndReleaseTaskStatusHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var JobGetTaskCountsHeaders = {
        serializedName: "job-gettaskcounts-headers",
        type: {
            name: "Composite",
            className: "JobGetTaskCountsHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                }
            }
        }
    };
    var PoolAddHeaders = {
        serializedName: "pool-add-headers",
        type: {
            name: "Composite",
            className: "PoolAddHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                dataServiceId: {
                    serializedName: "dataserviceid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PoolListHeaders = {
        serializedName: "pool-list-headers",
        type: {
            name: "Composite",
            className: "PoolListHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var PoolDeleteHeaders = {
        serializedName: "pool-delete-headers",
        type: {
            name: "Composite",
            className: "PoolDeleteHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "String"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PoolExistsHeaders = {
        serializedName: "pool-exists-headers",
        type: {
            name: "Composite",
            className: "PoolExistsHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var PoolGetHeaders = {
        serializedName: "pool-get-headers",
        type: {
            name: "Composite",
            className: "PoolGetHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTagHeader: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModifiedHeader: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var PoolPatchHeaders = {
        serializedName: "pool-patch-headers",
        type: {
            name: "Composite",
            className: "PoolPatchHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                dataServiceId: {
                    serializedName: "dataserviceid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PoolDisableAutoScaleHeaders = {
        serializedName: "pool-disableautoscale-headers",
        type: {
            name: "Composite",
            className: "PoolDisableAutoScaleHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                dataServiceId: {
                    serializedName: "dataserviceid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PoolEnableAutoScaleHeaders = {
        serializedName: "pool-enableautoscale-headers",
        type: {
            name: "Composite",
            className: "PoolEnableAutoScaleHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                dataServiceId: {
                    serializedName: "dataserviceid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PoolEvaluateAutoScaleHeaders = {
        serializedName: "pool-evaluateautoscale-headers",
        type: {
            name: "Composite",
            className: "PoolEvaluateAutoScaleHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                dataServiceId: {
                    serializedName: "dataserviceid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PoolResizeHeaders = {
        serializedName: "pool-resize-headers",
        type: {
            name: "Composite",
            className: "PoolResizeHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                dataServiceId: {
                    serializedName: "dataserviceid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PoolStopResizeHeaders = {
        serializedName: "pool-stopresize-headers",
        type: {
            name: "Composite",
            className: "PoolStopResizeHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                dataServiceId: {
                    serializedName: "dataserviceid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PoolUpdatePropertiesHeaders = {
        serializedName: "pool-updateproperties-headers",
        type: {
            name: "Composite",
            className: "PoolUpdatePropertiesHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                dataServiceId: {
                    serializedName: "dataserviceid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PoolUpgradeOSHeaders = {
        serializedName: "pool-upgradeos-headers",
        type: {
            name: "Composite",
            className: "PoolUpgradeOSHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                dataServiceId: {
                    serializedName: "dataserviceid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PoolRemoveNodesHeaders = {
        serializedName: "pool-removenodes-headers",
        type: {
            name: "Composite",
            className: "PoolRemoveNodesHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                dataServiceId: {
                    serializedName: "dataserviceid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TaskAddHeaders = {
        serializedName: "task-add-headers",
        type: {
            name: "Composite",
            className: "TaskAddHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                dataServiceId: {
                    serializedName: "dataserviceid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TaskListHeaders = {
        serializedName: "task-list-headers",
        type: {
            name: "Composite",
            className: "TaskListHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var TaskAddCollectionHeaders = {
        serializedName: "task-addcollection-headers",
        type: {
            name: "Composite",
            className: "TaskAddCollectionHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "String"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TaskDeleteHeaders = {
        serializedName: "task-delete-headers",
        type: {
            name: "Composite",
            className: "TaskDeleteHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "String"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TaskGetHeaders = {
        serializedName: "task-get-headers",
        type: {
            name: "Composite",
            className: "TaskGetHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTagHeader: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModifiedHeader: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                dataServiceId: {
                    serializedName: "dataserviceid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TaskUpdateHeaders = {
        serializedName: "task-update-headers",
        type: {
            name: "Composite",
            className: "TaskUpdateHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                dataServiceId: {
                    serializedName: "dataserviceid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TaskListSubtasksHeaders = {
        serializedName: "task-listsubtasks-headers",
        type: {
            name: "Composite",
            className: "TaskListSubtasksHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var TaskTerminateHeaders = {
        serializedName: "task-terminate-headers",
        type: {
            name: "Composite",
            className: "TaskTerminateHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                dataServiceId: {
                    serializedName: "dataserviceid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TaskReactivateHeaders = {
        serializedName: "task-reactivate-headers",
        type: {
            name: "Composite",
            className: "TaskReactivateHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                dataServiceId: {
                    serializedName: "dataserviceid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ComputeNodeAddUserHeaders = {
        serializedName: "computenode-adduser-headers",
        type: {
            name: "Composite",
            className: "ComputeNodeAddUserHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                dataServiceId: {
                    serializedName: "dataserviceid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ComputeNodeDeleteUserHeaders = {
        serializedName: "computenode-deleteuser-headers",
        type: {
            name: "Composite",
            className: "ComputeNodeDeleteUserHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "String"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ComputeNodeUpdateUserHeaders = {
        serializedName: "computenode-updateuser-headers",
        type: {
            name: "Composite",
            className: "ComputeNodeUpdateUserHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                dataServiceId: {
                    serializedName: "dataserviceid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ComputeNodeGetHeaders = {
        serializedName: "computenode-get-headers",
        type: {
            name: "Composite",
            className: "ComputeNodeGetHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var ComputeNodeRebootHeaders = {
        serializedName: "computenode-reboot-headers",
        type: {
            name: "Composite",
            className: "ComputeNodeRebootHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                dataServiceId: {
                    serializedName: "dataserviceid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ComputeNodeReimageHeaders = {
        serializedName: "computenode-reimage-headers",
        type: {
            name: "Composite",
            className: "ComputeNodeReimageHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                dataServiceId: {
                    serializedName: "dataserviceid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ComputeNodeDisableSchedulingHeaders = {
        serializedName: "computenode-disablescheduling-headers",
        type: {
            name: "Composite",
            className: "ComputeNodeDisableSchedulingHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                dataServiceId: {
                    serializedName: "dataserviceid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ComputeNodeEnableSchedulingHeaders = {
        serializedName: "computenode-enablescheduling-headers",
        type: {
            name: "Composite",
            className: "ComputeNodeEnableSchedulingHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                dataServiceId: {
                    serializedName: "dataserviceid",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ComputeNodeGetRemoteLoginSettingsHeaders = {
        serializedName: "computenode-getremoteloginsettings-headers",
        type: {
            name: "Composite",
            className: "ComputeNodeGetRemoteLoginSettingsHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var ComputeNodeGetRemoteDesktopHeaders = {
        serializedName: "computenode-getremotedesktop-headers",
        type: {
            name: "Composite",
            className: "ComputeNodeGetRemoteDesktopHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var ComputeNodeUploadBatchServiceLogsHeaders = {
        serializedName: "computenode-uploadbatchservicelogs-headers",
        type: {
            name: "Composite",
            className: "ComputeNodeUploadBatchServiceLogsHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                }
            }
        }
    };
    var ComputeNodeListHeaders = {
        serializedName: "computenode-list-headers",
        type: {
            name: "Composite",
            className: "ComputeNodeListHeaders",
            modelProperties: {
                clientRequestId: {
                    serializedName: "client-request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                requestId: {
                    serializedName: "request-id",
                    type: {
                        name: "Uuid"
                    }
                },
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    serializedName: "last-modified",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var ApplicationListResult = {
        serializedName: "ApplicationListResult",
        type: {
            name: "Composite",
            className: "ApplicationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationSummary"
                            }
                        }
                    }
                },
                odatanextLink: {
                    serializedName: "odata\\.nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PoolListUsageMetricsResult = {
        serializedName: "PoolListUsageMetricsResult",
        type: {
            name: "Composite",
            className: "PoolListUsageMetricsResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PoolUsageMetrics"
                            }
                        }
                    }
                },
                odatanextLink: {
                    serializedName: "odata\\.nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CloudPoolListResult = {
        serializedName: "CloudPoolListResult",
        type: {
            name: "Composite",
            className: "CloudPoolListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CloudPool"
                            }
                        }
                    }
                },
                odatanextLink: {
                    serializedName: "odata\\.nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AccountListNodeAgentSkusResult = {
        serializedName: "AccountListNodeAgentSkusResult",
        type: {
            name: "Composite",
            className: "AccountListNodeAgentSkusResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NodeAgentSku"
                            }
                        }
                    }
                },
                odatanextLink: {
                    serializedName: "odata\\.nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PoolNodeCountsListResult = {
        serializedName: "PoolNodeCountsListResult",
        type: {
            name: "Composite",
            className: "PoolNodeCountsListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PoolNodeCounts"
                            }
                        }
                    }
                },
                odatanextLink: {
                    serializedName: "odata\\.nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CloudJobListResult = {
        serializedName: "CloudJobListResult",
        type: {
            name: "Composite",
            className: "CloudJobListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CloudJob"
                            }
                        }
                    }
                },
                odatanextLink: {
                    serializedName: "odata\\.nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CloudJobListPreparationAndReleaseTaskStatusResult = {
        serializedName: "CloudJobListPreparationAndReleaseTaskStatusResult",
        type: {
            name: "Composite",
            className: "CloudJobListPreparationAndReleaseTaskStatusResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobPreparationAndReleaseTaskExecutionInformation"
                            }
                        }
                    }
                },
                odatanextLink: {
                    serializedName: "odata\\.nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CertificateListResult = {
        serializedName: "CertificateListResult",
        type: {
            name: "Composite",
            className: "CertificateListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Certificate"
                            }
                        }
                    }
                },
                odatanextLink: {
                    serializedName: "odata\\.nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NodeFileListResult = {
        serializedName: "NodeFileListResult",
        type: {
            name: "Composite",
            className: "NodeFileListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NodeFile"
                            }
                        }
                    }
                },
                odatanextLink: {
                    serializedName: "odata\\.nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CloudJobScheduleListResult = {
        serializedName: "CloudJobScheduleListResult",
        type: {
            name: "Composite",
            className: "CloudJobScheduleListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CloudJobSchedule"
                            }
                        }
                    }
                },
                odatanextLink: {
                    serializedName: "odata\\.nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CloudTaskListResult = {
        serializedName: "CloudTaskListResult",
        type: {
            name: "Composite",
            className: "CloudTaskListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CloudTask"
                            }
                        }
                    }
                },
                odatanextLink: {
                    serializedName: "odata\\.nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ComputeNodeListResult = {
        serializedName: "ComputeNodeListResult",
        type: {
            name: "Composite",
            className: "ComputeNodeListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ComputeNode"
                            }
                        }
                    }
                },
                odatanextLink: {
                    serializedName: "odata\\.nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        PoolUsageMetrics: PoolUsageMetrics,
        ImageReference: ImageReference,
        NodeAgentSku: NodeAgentSku,
        AuthenticationTokenSettings: AuthenticationTokenSettings,
        UsageStatistics: UsageStatistics,
        ResourceStatistics: ResourceStatistics,
        PoolStatistics: PoolStatistics,
        JobStatistics: JobStatistics,
        NameValuePair: NameValuePair,
        DeleteCertificateError: DeleteCertificateError,
        Certificate: Certificate,
        ApplicationPackageReference: ApplicationPackageReference,
        ApplicationSummary: ApplicationSummary,
        CertificateAddParameter: CertificateAddParameter,
        FileProperties: FileProperties,
        NodeFile: NodeFile,
        Schedule: Schedule,
        JobConstraints: JobConstraints,
        ContainerRegistry: ContainerRegistry,
        TaskContainerSettings: TaskContainerSettings,
        ResourceFile: ResourceFile,
        EnvironmentSetting: EnvironmentSetting,
        ExitOptions: ExitOptions,
        ExitCodeMapping: ExitCodeMapping,
        ExitCodeRangeMapping: ExitCodeRangeMapping,
        ExitConditions: ExitConditions,
        AutoUserSpecification: AutoUserSpecification,
        UserIdentity: UserIdentity,
        LinuxUserConfiguration: LinuxUserConfiguration,
        UserAccount: UserAccount,
        TaskConstraints: TaskConstraints,
        OutputFileBlobContainerDestination: OutputFileBlobContainerDestination,
        OutputFileDestination: OutputFileDestination,
        OutputFileUploadOptions: OutputFileUploadOptions,
        OutputFile: OutputFile,
        JobManagerTask: JobManagerTask,
        JobPreparationTask: JobPreparationTask,
        JobReleaseTask: JobReleaseTask,
        TaskSchedulingPolicy: TaskSchedulingPolicy,
        StartTask: StartTask,
        CertificateReference: CertificateReference,
        MetadataItem: MetadataItem,
        CloudServiceConfiguration: CloudServiceConfiguration,
        OSDisk: OSDisk,
        WindowsConfiguration: WindowsConfiguration,
        DataDisk: DataDisk,
        ContainerConfiguration: ContainerConfiguration,
        VirtualMachineConfiguration: VirtualMachineConfiguration,
        NetworkSecurityGroupRule: NetworkSecurityGroupRule,
        InboundNATPool: InboundNATPool,
        PoolEndpointConfiguration: PoolEndpointConfiguration,
        NetworkConfiguration: NetworkConfiguration,
        PoolSpecification: PoolSpecification,
        AutoPoolSpecification: AutoPoolSpecification,
        PoolInformation: PoolInformation,
        JobSpecification: JobSpecification,
        RecentJob: RecentJob,
        JobScheduleExecutionInformation: JobScheduleExecutionInformation,
        JobScheduleStatistics: JobScheduleStatistics,
        CloudJobSchedule: CloudJobSchedule,
        JobScheduleAddParameter: JobScheduleAddParameter,
        JobSchedulingError: JobSchedulingError,
        JobExecutionInformation: JobExecutionInformation,
        CloudJob: CloudJob,
        JobAddParameter: JobAddParameter,
        TaskContainerExecutionInformation: TaskContainerExecutionInformation,
        TaskFailureInformation: TaskFailureInformation,
        JobPreparationTaskExecutionInformation: JobPreparationTaskExecutionInformation,
        JobReleaseTaskExecutionInformation: JobReleaseTaskExecutionInformation,
        JobPreparationAndReleaseTaskExecutionInformation: JobPreparationAndReleaseTaskExecutionInformation,
        TaskCounts: TaskCounts,
        AutoScaleRunError: AutoScaleRunError,
        AutoScaleRun: AutoScaleRun,
        ResizeError: ResizeError,
        CloudPool: CloudPool,
        PoolAddParameter: PoolAddParameter,
        AffinityInformation: AffinityInformation,
        TaskExecutionInformation: TaskExecutionInformation,
        ComputeNodeInformation: ComputeNodeInformation,
        NodeAgentInformation: NodeAgentInformation,
        MultiInstanceSettings: MultiInstanceSettings,
        TaskStatistics: TaskStatistics,
        TaskIdRange: TaskIdRange,
        TaskDependencies: TaskDependencies,
        CloudTask: CloudTask,
        TaskAddParameter: TaskAddParameter,
        TaskAddCollectionParameter: TaskAddCollectionParameter,
        ErrorMessage: ErrorMessage,
        BatchErrorDetail: BatchErrorDetail,
        BatchError: BatchError,
        TaskAddResult: TaskAddResult,
        TaskAddCollectionResult: TaskAddCollectionResult,
        SubtaskInformation: SubtaskInformation,
        CloudTaskListSubtasksResult: CloudTaskListSubtasksResult,
        TaskInformation: TaskInformation,
        StartTaskInformation: StartTaskInformation,
        ComputeNodeError: ComputeNodeError,
        InboundEndpoint: InboundEndpoint,
        ComputeNodeEndpointConfiguration: ComputeNodeEndpointConfiguration,
        ComputeNode: ComputeNode,
        ComputeNodeUser: ComputeNodeUser,
        ComputeNodeGetRemoteLoginSettingsResult: ComputeNodeGetRemoteLoginSettingsResult,
        JobSchedulePatchParameter: JobSchedulePatchParameter,
        JobScheduleUpdateParameter: JobScheduleUpdateParameter,
        JobDisableParameter: JobDisableParameter,
        JobTerminateParameter: JobTerminateParameter,
        JobPatchParameter: JobPatchParameter,
        JobUpdateParameter: JobUpdateParameter,
        PoolEnableAutoScaleParameter: PoolEnableAutoScaleParameter,
        PoolEvaluateAutoScaleParameter: PoolEvaluateAutoScaleParameter,
        PoolResizeParameter: PoolResizeParameter,
        PoolUpdatePropertiesParameter: PoolUpdatePropertiesParameter,
        PoolUpgradeOSParameter: PoolUpgradeOSParameter,
        PoolPatchParameter: PoolPatchParameter,
        TaskUpdateParameter: TaskUpdateParameter,
        NodeUpdateUserParameter: NodeUpdateUserParameter,
        NodeRebootParameter: NodeRebootParameter,
        NodeReimageParameter: NodeReimageParameter,
        NodeDisableSchedulingParameter: NodeDisableSchedulingParameter,
        NodeRemoveParameter: NodeRemoveParameter,
        UploadBatchServiceLogsConfiguration: UploadBatchServiceLogsConfiguration,
        UploadBatchServiceLogsResult: UploadBatchServiceLogsResult,
        NodeCounts: NodeCounts,
        PoolNodeCounts: PoolNodeCounts,
        ApplicationListOptions: ApplicationListOptions,
        ApplicationGetOptions: ApplicationGetOptions,
        PoolListUsageMetricsOptions: PoolListUsageMetricsOptions,
        PoolGetAllLifetimeStatisticsOptions: PoolGetAllLifetimeStatisticsOptions,
        PoolAddOptions: PoolAddOptions,
        PoolListOptions: PoolListOptions,
        PoolDeleteMethodOptions: PoolDeleteMethodOptions,
        PoolExistsOptions: PoolExistsOptions,
        PoolGetOptions: PoolGetOptions,
        PoolPatchOptions: PoolPatchOptions,
        PoolDisableAutoScaleOptions: PoolDisableAutoScaleOptions,
        PoolEnableAutoScaleOptions: PoolEnableAutoScaleOptions,
        PoolEvaluateAutoScaleOptions: PoolEvaluateAutoScaleOptions,
        PoolResizeOptions: PoolResizeOptions,
        PoolStopResizeOptions: PoolStopResizeOptions,
        PoolUpdatePropertiesOptions: PoolUpdatePropertiesOptions,
        PoolUpgradeOSOptions: PoolUpgradeOSOptions,
        PoolRemoveNodesOptions: PoolRemoveNodesOptions,
        AccountListNodeAgentSkusOptions: AccountListNodeAgentSkusOptions,
        AccountListPoolNodeCountsOptions: AccountListPoolNodeCountsOptions,
        JobGetAllLifetimeStatisticsOptions: JobGetAllLifetimeStatisticsOptions,
        JobDeleteMethodOptions: JobDeleteMethodOptions,
        JobGetOptions: JobGetOptions,
        JobPatchOptions: JobPatchOptions,
        JobUpdateOptions: JobUpdateOptions,
        JobDisableOptions: JobDisableOptions,
        JobEnableOptions: JobEnableOptions,
        JobTerminateOptions: JobTerminateOptions,
        JobAddOptions: JobAddOptions,
        JobListOptions: JobListOptions,
        JobListFromJobScheduleOptions: JobListFromJobScheduleOptions,
        JobListPreparationAndReleaseTaskStatusOptions: JobListPreparationAndReleaseTaskStatusOptions,
        JobGetTaskCountsOptions: JobGetTaskCountsOptions,
        CertificateAddOptions: CertificateAddOptions,
        CertificateListOptions: CertificateListOptions,
        CertificateCancelDeletionOptions: CertificateCancelDeletionOptions,
        CertificateDeleteMethodOptions: CertificateDeleteMethodOptions,
        CertificateGetOptions: CertificateGetOptions,
        FileDeleteFromTaskOptions: FileDeleteFromTaskOptions,
        FileGetFromTaskOptions: FileGetFromTaskOptions,
        FileGetPropertiesFromTaskOptions: FileGetPropertiesFromTaskOptions,
        FileDeleteFromComputeNodeOptions: FileDeleteFromComputeNodeOptions,
        FileGetFromComputeNodeOptions: FileGetFromComputeNodeOptions,
        FileGetPropertiesFromComputeNodeOptions: FileGetPropertiesFromComputeNodeOptions,
        FileListFromTaskOptions: FileListFromTaskOptions,
        FileListFromComputeNodeOptions: FileListFromComputeNodeOptions,
        JobScheduleExistsOptions: JobScheduleExistsOptions,
        JobScheduleDeleteMethodOptions: JobScheduleDeleteMethodOptions,
        JobScheduleGetOptions: JobScheduleGetOptions,
        JobSchedulePatchOptions: JobSchedulePatchOptions,
        JobScheduleUpdateOptions: JobScheduleUpdateOptions,
        JobScheduleDisableOptions: JobScheduleDisableOptions,
        JobScheduleEnableOptions: JobScheduleEnableOptions,
        JobScheduleTerminateOptions: JobScheduleTerminateOptions,
        JobScheduleAddOptions: JobScheduleAddOptions,
        JobScheduleListOptions: JobScheduleListOptions,
        TaskAddOptions: TaskAddOptions,
        TaskListOptions: TaskListOptions,
        TaskAddCollectionOptions: TaskAddCollectionOptions,
        TaskDeleteMethodOptions: TaskDeleteMethodOptions,
        TaskGetOptions: TaskGetOptions,
        TaskUpdateOptions: TaskUpdateOptions,
        TaskListSubtasksOptions: TaskListSubtasksOptions,
        TaskTerminateOptions: TaskTerminateOptions,
        TaskReactivateOptions: TaskReactivateOptions,
        ComputeNodeAddUserOptions: ComputeNodeAddUserOptions,
        ComputeNodeDeleteUserOptions: ComputeNodeDeleteUserOptions,
        ComputeNodeUpdateUserOptions: ComputeNodeUpdateUserOptions,
        ComputeNodeGetOptions: ComputeNodeGetOptions,
        ComputeNodeRebootOptions: ComputeNodeRebootOptions,
        ComputeNodeReimageOptions: ComputeNodeReimageOptions,
        ComputeNodeDisableSchedulingOptions: ComputeNodeDisableSchedulingOptions,
        ComputeNodeEnableSchedulingOptions: ComputeNodeEnableSchedulingOptions,
        ComputeNodeGetRemoteLoginSettingsOptions: ComputeNodeGetRemoteLoginSettingsOptions,
        ComputeNodeGetRemoteDesktopOptions: ComputeNodeGetRemoteDesktopOptions,
        ComputeNodeUploadBatchServiceLogsOptions: ComputeNodeUploadBatchServiceLogsOptions,
        ComputeNodeListOptions: ComputeNodeListOptions,
        ApplicationListNextOptions: ApplicationListNextOptions,
        PoolListUsageMetricsNextOptions: PoolListUsageMetricsNextOptions,
        PoolListNextOptions: PoolListNextOptions,
        AccountListNodeAgentSkusNextOptions: AccountListNodeAgentSkusNextOptions,
        AccountListPoolNodeCountsNextOptions: AccountListPoolNodeCountsNextOptions,
        JobListNextOptions: JobListNextOptions,
        JobListFromJobScheduleNextOptions: JobListFromJobScheduleNextOptions,
        JobListPreparationAndReleaseTaskStatusNextOptions: JobListPreparationAndReleaseTaskStatusNextOptions,
        CertificateListNextOptions: CertificateListNextOptions,
        FileListFromTaskNextOptions: FileListFromTaskNextOptions,
        FileListFromComputeNodeNextOptions: FileListFromComputeNodeNextOptions,
        JobScheduleListNextOptions: JobScheduleListNextOptions,
        TaskListNextOptions: TaskListNextOptions,
        ComputeNodeListNextOptions: ComputeNodeListNextOptions,
        ApplicationListHeaders: ApplicationListHeaders,
        ApplicationGetHeaders: ApplicationGetHeaders,
        PoolListUsageMetricsHeaders: PoolListUsageMetricsHeaders,
        AccountListNodeAgentSkusHeaders: AccountListNodeAgentSkusHeaders,
        AccountListPoolNodeCountsHeaders: AccountListPoolNodeCountsHeaders,
        PoolGetAllLifetimeStatisticsHeaders: PoolGetAllLifetimeStatisticsHeaders,
        JobGetAllLifetimeStatisticsHeaders: JobGetAllLifetimeStatisticsHeaders,
        CertificateAddHeaders: CertificateAddHeaders,
        CertificateListHeaders: CertificateListHeaders,
        CertificateCancelDeletionHeaders: CertificateCancelDeletionHeaders,
        CertificateDeleteHeaders: CertificateDeleteHeaders,
        CertificateGetHeaders: CertificateGetHeaders,
        FileDeleteFromTaskHeaders: FileDeleteFromTaskHeaders,
        FileGetFromTaskHeaders: FileGetFromTaskHeaders,
        FileGetPropertiesFromTaskHeaders: FileGetPropertiesFromTaskHeaders,
        FileDeleteFromComputeNodeHeaders: FileDeleteFromComputeNodeHeaders,
        FileGetFromComputeNodeHeaders: FileGetFromComputeNodeHeaders,
        FileGetPropertiesFromComputeNodeHeaders: FileGetPropertiesFromComputeNodeHeaders,
        FileListFromTaskHeaders: FileListFromTaskHeaders,
        FileListFromComputeNodeHeaders: FileListFromComputeNodeHeaders,
        JobScheduleExistsHeaders: JobScheduleExistsHeaders,
        JobScheduleDeleteHeaders: JobScheduleDeleteHeaders,
        JobScheduleGetHeaders: JobScheduleGetHeaders,
        JobSchedulePatchHeaders: JobSchedulePatchHeaders,
        JobScheduleUpdateHeaders: JobScheduleUpdateHeaders,
        JobScheduleDisableHeaders: JobScheduleDisableHeaders,
        JobScheduleEnableHeaders: JobScheduleEnableHeaders,
        JobScheduleTerminateHeaders: JobScheduleTerminateHeaders,
        JobScheduleAddHeaders: JobScheduleAddHeaders,
        JobScheduleListHeaders: JobScheduleListHeaders,
        JobDeleteHeaders: JobDeleteHeaders,
        JobGetHeaders: JobGetHeaders,
        JobPatchHeaders: JobPatchHeaders,
        JobUpdateHeaders: JobUpdateHeaders,
        JobDisableHeaders: JobDisableHeaders,
        JobEnableHeaders: JobEnableHeaders,
        JobTerminateHeaders: JobTerminateHeaders,
        JobAddHeaders: JobAddHeaders,
        JobListHeaders: JobListHeaders,
        JobListFromJobScheduleHeaders: JobListFromJobScheduleHeaders,
        JobListPreparationAndReleaseTaskStatusHeaders: JobListPreparationAndReleaseTaskStatusHeaders,
        JobGetTaskCountsHeaders: JobGetTaskCountsHeaders,
        PoolAddHeaders: PoolAddHeaders,
        PoolListHeaders: PoolListHeaders,
        PoolDeleteHeaders: PoolDeleteHeaders,
        PoolExistsHeaders: PoolExistsHeaders,
        PoolGetHeaders: PoolGetHeaders,
        PoolPatchHeaders: PoolPatchHeaders,
        PoolDisableAutoScaleHeaders: PoolDisableAutoScaleHeaders,
        PoolEnableAutoScaleHeaders: PoolEnableAutoScaleHeaders,
        PoolEvaluateAutoScaleHeaders: PoolEvaluateAutoScaleHeaders,
        PoolResizeHeaders: PoolResizeHeaders,
        PoolStopResizeHeaders: PoolStopResizeHeaders,
        PoolUpdatePropertiesHeaders: PoolUpdatePropertiesHeaders,
        PoolUpgradeOSHeaders: PoolUpgradeOSHeaders,
        PoolRemoveNodesHeaders: PoolRemoveNodesHeaders,
        TaskAddHeaders: TaskAddHeaders,
        TaskListHeaders: TaskListHeaders,
        TaskAddCollectionHeaders: TaskAddCollectionHeaders,
        TaskDeleteHeaders: TaskDeleteHeaders,
        TaskGetHeaders: TaskGetHeaders,
        TaskUpdateHeaders: TaskUpdateHeaders,
        TaskListSubtasksHeaders: TaskListSubtasksHeaders,
        TaskTerminateHeaders: TaskTerminateHeaders,
        TaskReactivateHeaders: TaskReactivateHeaders,
        ComputeNodeAddUserHeaders: ComputeNodeAddUserHeaders,
        ComputeNodeDeleteUserHeaders: ComputeNodeDeleteUserHeaders,
        ComputeNodeUpdateUserHeaders: ComputeNodeUpdateUserHeaders,
        ComputeNodeGetHeaders: ComputeNodeGetHeaders,
        ComputeNodeRebootHeaders: ComputeNodeRebootHeaders,
        ComputeNodeReimageHeaders: ComputeNodeReimageHeaders,
        ComputeNodeDisableSchedulingHeaders: ComputeNodeDisableSchedulingHeaders,
        ComputeNodeEnableSchedulingHeaders: ComputeNodeEnableSchedulingHeaders,
        ComputeNodeGetRemoteLoginSettingsHeaders: ComputeNodeGetRemoteLoginSettingsHeaders,
        ComputeNodeGetRemoteDesktopHeaders: ComputeNodeGetRemoteDesktopHeaders,
        ComputeNodeUploadBatchServiceLogsHeaders: ComputeNodeUploadBatchServiceLogsHeaders,
        ComputeNodeListHeaders: ComputeNodeListHeaders,
        ApplicationListResult: ApplicationListResult,
        PoolListUsageMetricsResult: PoolListUsageMetricsResult,
        CloudPoolListResult: CloudPoolListResult,
        AccountListNodeAgentSkusResult: AccountListNodeAgentSkusResult,
        PoolNodeCountsListResult: PoolNodeCountsListResult,
        CloudJobListResult: CloudJobListResult,
        CloudJobListPreparationAndReleaseTaskStatusResult: CloudJobListPreparationAndReleaseTaskStatusResult,
        CertificateListResult: CertificateListResult,
        NodeFileListResult: NodeFileListResult,
        CloudJobScheduleListResult: CloudJobScheduleListResult,
        CloudTaskListResult: CloudTaskListResult,
        ComputeNodeListResult: ComputeNodeListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        ApplicationListResult: ApplicationListResult,
        ApplicationSummary: ApplicationSummary,
        ApplicationListHeaders: ApplicationListHeaders,
        BatchError: BatchError,
        ErrorMessage: ErrorMessage,
        BatchErrorDetail: BatchErrorDetail,
        ApplicationGetHeaders: ApplicationGetHeaders
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var applicationId = {
        parameterPath: "applicationId",
        mapper: {
            required: true,
            serializedName: "applicationId",
            type: {
                name: "String"
            }
        }
    };
    var clientRequestId0 = {
        parameterPath: [
            "options",
            "applicationListOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId1 = {
        parameterPath: [
            "options",
            "applicationGetOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId10 = {
        parameterPath: [
            "options",
            "poolPatchOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId11 = {
        parameterPath: [
            "options",
            "poolDisableAutoScaleOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId12 = {
        parameterPath: [
            "options",
            "poolEnableAutoScaleOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId13 = {
        parameterPath: [
            "options",
            "poolEvaluateAutoScaleOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId14 = {
        parameterPath: [
            "options",
            "poolResizeOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId15 = {
        parameterPath: [
            "options",
            "poolStopResizeOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId16 = {
        parameterPath: [
            "options",
            "poolUpdatePropertiesOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId17 = {
        parameterPath: [
            "options",
            "poolUpgradeOSOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId18 = {
        parameterPath: [
            "options",
            "poolRemoveNodesOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId19 = {
        parameterPath: [
            "options",
            "poolListUsageMetricsNextOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId2 = {
        parameterPath: [
            "options",
            "applicationListNextOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId20 = {
        parameterPath: [
            "options",
            "poolListNextOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId21 = {
        parameterPath: [
            "options",
            "accountListNodeAgentSkusOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId22 = {
        parameterPath: [
            "options",
            "accountListPoolNodeCountsOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId23 = {
        parameterPath: [
            "options",
            "accountListNodeAgentSkusNextOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId24 = {
        parameterPath: [
            "options",
            "accountListPoolNodeCountsNextOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId25 = {
        parameterPath: [
            "options",
            "jobGetAllLifetimeStatisticsOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId26 = {
        parameterPath: [
            "options",
            "jobDeleteMethodOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId27 = {
        parameterPath: [
            "options",
            "jobGetOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId28 = {
        parameterPath: [
            "options",
            "jobPatchOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId29 = {
        parameterPath: [
            "options",
            "jobUpdateOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId3 = {
        parameterPath: [
            "options",
            "poolListUsageMetricsOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId30 = {
        parameterPath: [
            "options",
            "jobDisableOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId31 = {
        parameterPath: [
            "options",
            "jobEnableOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId32 = {
        parameterPath: [
            "options",
            "jobTerminateOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId33 = {
        parameterPath: [
            "options",
            "jobAddOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId34 = {
        parameterPath: [
            "options",
            "jobListOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId35 = {
        parameterPath: [
            "options",
            "jobListFromJobScheduleOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId36 = {
        parameterPath: [
            "options",
            "jobListPreparationAndReleaseTaskStatusOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId37 = {
        parameterPath: [
            "options",
            "jobGetTaskCountsOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId38 = {
        parameterPath: [
            "options",
            "jobListNextOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId39 = {
        parameterPath: [
            "options",
            "jobListFromJobScheduleNextOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId4 = {
        parameterPath: [
            "options",
            "poolGetAllLifetimeStatisticsOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId40 = {
        parameterPath: [
            "options",
            "jobListPreparationAndReleaseTaskStatusNextOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId41 = {
        parameterPath: [
            "options",
            "certificateAddOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId42 = {
        parameterPath: [
            "options",
            "certificateListOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId43 = {
        parameterPath: [
            "options",
            "certificateCancelDeletionOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId44 = {
        parameterPath: [
            "options",
            "certificateDeleteMethodOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId45 = {
        parameterPath: [
            "options",
            "certificateGetOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId46 = {
        parameterPath: [
            "options",
            "certificateListNextOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId47 = {
        parameterPath: [
            "options",
            "fileDeleteFromTaskOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId48 = {
        parameterPath: [
            "options",
            "fileGetFromTaskOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId49 = {
        parameterPath: [
            "options",
            "fileGetPropertiesFromTaskOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId5 = {
        parameterPath: [
            "options",
            "poolAddOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId50 = {
        parameterPath: [
            "options",
            "fileDeleteFromComputeNodeOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId51 = {
        parameterPath: [
            "options",
            "fileGetFromComputeNodeOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId52 = {
        parameterPath: [
            "options",
            "fileGetPropertiesFromComputeNodeOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId53 = {
        parameterPath: [
            "options",
            "fileListFromTaskOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId54 = {
        parameterPath: [
            "options",
            "fileListFromComputeNodeOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId55 = {
        parameterPath: [
            "options",
            "fileListFromTaskNextOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId56 = {
        parameterPath: [
            "options",
            "fileListFromComputeNodeNextOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId57 = {
        parameterPath: [
            "options",
            "jobScheduleExistsOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId58 = {
        parameterPath: [
            "options",
            "jobScheduleDeleteMethodOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId59 = {
        parameterPath: [
            "options",
            "jobScheduleGetOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId6 = {
        parameterPath: [
            "options",
            "poolListOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId60 = {
        parameterPath: [
            "options",
            "jobSchedulePatchOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId61 = {
        parameterPath: [
            "options",
            "jobScheduleUpdateOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId62 = {
        parameterPath: [
            "options",
            "jobScheduleDisableOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId63 = {
        parameterPath: [
            "options",
            "jobScheduleEnableOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId64 = {
        parameterPath: [
            "options",
            "jobScheduleTerminateOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId65 = {
        parameterPath: [
            "options",
            "jobScheduleAddOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId66 = {
        parameterPath: [
            "options",
            "jobScheduleListOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId67 = {
        parameterPath: [
            "options",
            "jobScheduleListNextOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId68 = {
        parameterPath: [
            "options",
            "taskAddOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId69 = {
        parameterPath: [
            "options",
            "taskListOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId7 = {
        parameterPath: [
            "options",
            "poolDeleteMethodOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId70 = {
        parameterPath: [
            "options",
            "taskAddCollectionOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId71 = {
        parameterPath: [
            "options",
            "taskDeleteMethodOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId72 = {
        parameterPath: [
            "options",
            "taskGetOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId73 = {
        parameterPath: [
            "options",
            "taskUpdateOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId74 = {
        parameterPath: [
            "options",
            "taskListSubtasksOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId75 = {
        parameterPath: [
            "options",
            "taskTerminateOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId76 = {
        parameterPath: [
            "options",
            "taskReactivateOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId77 = {
        parameterPath: [
            "options",
            "taskListNextOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId78 = {
        parameterPath: [
            "options",
            "computeNodeAddUserOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId79 = {
        parameterPath: [
            "options",
            "computeNodeDeleteUserOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId8 = {
        parameterPath: [
            "options",
            "poolExistsOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId80 = {
        parameterPath: [
            "options",
            "computeNodeUpdateUserOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId81 = {
        parameterPath: [
            "options",
            "computeNodeGetOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId82 = {
        parameterPath: [
            "options",
            "computeNodeRebootOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId83 = {
        parameterPath: [
            "options",
            "computeNodeReimageOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId84 = {
        parameterPath: [
            "options",
            "computeNodeDisableSchedulingOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId85 = {
        parameterPath: [
            "options",
            "computeNodeEnableSchedulingOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId86 = {
        parameterPath: [
            "options",
            "computeNodeGetRemoteLoginSettingsOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId87 = {
        parameterPath: [
            "options",
            "computeNodeGetRemoteDesktopOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId88 = {
        parameterPath: [
            "options",
            "computeNodeUploadBatchServiceLogsOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId89 = {
        parameterPath: [
            "options",
            "computeNodeListOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId9 = {
        parameterPath: [
            "options",
            "poolGetOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var clientRequestId90 = {
        parameterPath: [
            "options",
            "computeNodeListNextOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var endTime = {
        parameterPath: [
            "options",
            "poolListUsageMetricsOptions",
            "endTime"
        ],
        mapper: {
            serializedName: "endtime",
            type: {
                name: "DateTime"
            }
        }
    };
    var expand0 = {
        parameterPath: [
            "options",
            "poolListOptions",
            "expand"
        ],
        mapper: {
            serializedName: "$expand",
            type: {
                name: "String"
            }
        }
    };
    var expand1 = {
        parameterPath: [
            "options",
            "poolGetOptions",
            "expand"
        ],
        mapper: {
            serializedName: "$expand",
            type: {
                name: "String"
            }
        }
    };
    var expand2 = {
        parameterPath: [
            "options",
            "jobGetOptions",
            "expand"
        ],
        mapper: {
            serializedName: "$expand",
            type: {
                name: "String"
            }
        }
    };
    var expand3 = {
        parameterPath: [
            "options",
            "jobListOptions",
            "expand"
        ],
        mapper: {
            serializedName: "$expand",
            type: {
                name: "String"
            }
        }
    };
    var expand4 = {
        parameterPath: [
            "options",
            "jobListFromJobScheduleOptions",
            "expand"
        ],
        mapper: {
            serializedName: "$expand",
            type: {
                name: "String"
            }
        }
    };
    var expand5 = {
        parameterPath: [
            "options",
            "jobScheduleGetOptions",
            "expand"
        ],
        mapper: {
            serializedName: "$expand",
            type: {
                name: "String"
            }
        }
    };
    var expand6 = {
        parameterPath: [
            "options",
            "jobScheduleListOptions",
            "expand"
        ],
        mapper: {
            serializedName: "$expand",
            type: {
                name: "String"
            }
        }
    };
    var expand7 = {
        parameterPath: [
            "options",
            "taskListOptions",
            "expand"
        ],
        mapper: {
            serializedName: "$expand",
            type: {
                name: "String"
            }
        }
    };
    var expand8 = {
        parameterPath: [
            "options",
            "taskGetOptions",
            "expand"
        ],
        mapper: {
            serializedName: "$expand",
            type: {
                name: "String"
            }
        }
    };
    var filePath = {
        parameterPath: "filePath",
        mapper: {
            required: true,
            serializedName: "filePath",
            type: {
                name: "String"
            }
        }
    };
    var filter0 = {
        parameterPath: [
            "options",
            "poolListUsageMetricsOptions",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var filter1 = {
        parameterPath: [
            "options",
            "poolListOptions",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var filter10 = {
        parameterPath: [
            "options",
            "jobScheduleListOptions",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var filter11 = {
        parameterPath: [
            "options",
            "taskListOptions",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var filter12 = {
        parameterPath: [
            "options",
            "computeNodeListOptions",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var filter2 = {
        parameterPath: [
            "options",
            "accountListNodeAgentSkusOptions",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var filter3 = {
        parameterPath: [
            "options",
            "accountListPoolNodeCountsOptions",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var filter4 = {
        parameterPath: [
            "options",
            "jobListOptions",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var filter5 = {
        parameterPath: [
            "options",
            "jobListFromJobScheduleOptions",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var filter6 = {
        parameterPath: [
            "options",
            "jobListPreparationAndReleaseTaskStatusOptions",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var filter7 = {
        parameterPath: [
            "options",
            "certificateListOptions",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var filter8 = {
        parameterPath: [
            "options",
            "fileListFromTaskOptions",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var filter9 = {
        parameterPath: [
            "options",
            "fileListFromComputeNodeOptions",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch0 = {
        parameterPath: [
            "options",
            "poolDeleteMethodOptions",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch1 = {
        parameterPath: [
            "options",
            "poolExistsOptions",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch10 = {
        parameterPath: [
            "options",
            "jobGetOptions",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch11 = {
        parameterPath: [
            "options",
            "jobPatchOptions",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch12 = {
        parameterPath: [
            "options",
            "jobUpdateOptions",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch13 = {
        parameterPath: [
            "options",
            "jobDisableOptions",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch14 = {
        parameterPath: [
            "options",
            "jobEnableOptions",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch15 = {
        parameterPath: [
            "options",
            "jobTerminateOptions",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch16 = {
        parameterPath: [
            "options",
            "jobScheduleExistsOptions",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch17 = {
        parameterPath: [
            "options",
            "jobScheduleDeleteMethodOptions",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch18 = {
        parameterPath: [
            "options",
            "jobScheduleGetOptions",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch19 = {
        parameterPath: [
            "options",
            "jobSchedulePatchOptions",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch2 = {
        parameterPath: [
            "options",
            "poolGetOptions",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch20 = {
        parameterPath: [
            "options",
            "jobScheduleUpdateOptions",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch21 = {
        parameterPath: [
            "options",
            "jobScheduleDisableOptions",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch22 = {
        parameterPath: [
            "options",
            "jobScheduleEnableOptions",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch23 = {
        parameterPath: [
            "options",
            "jobScheduleTerminateOptions",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch24 = {
        parameterPath: [
            "options",
            "taskDeleteMethodOptions",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch25 = {
        parameterPath: [
            "options",
            "taskGetOptions",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch26 = {
        parameterPath: [
            "options",
            "taskUpdateOptions",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch27 = {
        parameterPath: [
            "options",
            "taskTerminateOptions",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch28 = {
        parameterPath: [
            "options",
            "taskReactivateOptions",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch3 = {
        parameterPath: [
            "options",
            "poolPatchOptions",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch4 = {
        parameterPath: [
            "options",
            "poolEnableAutoScaleOptions",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch5 = {
        parameterPath: [
            "options",
            "poolResizeOptions",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch6 = {
        parameterPath: [
            "options",
            "poolStopResizeOptions",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch7 = {
        parameterPath: [
            "options",
            "poolUpgradeOSOptions",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch8 = {
        parameterPath: [
            "options",
            "poolRemoveNodesOptions",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch9 = {
        parameterPath: [
            "options",
            "jobDeleteMethodOptions",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifModifiedSince0 = {
        parameterPath: [
            "options",
            "poolDeleteMethodOptions",
            "ifModifiedSince"
        ],
        mapper: {
            serializedName: "If-Modified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifModifiedSince1 = {
        parameterPath: [
            "options",
            "poolExistsOptions",
            "ifModifiedSince"
        ],
        mapper: {
            serializedName: "If-Modified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifModifiedSince10 = {
        parameterPath: [
            "options",
            "jobGetOptions",
            "ifModifiedSince"
        ],
        mapper: {
            serializedName: "If-Modified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifModifiedSince11 = {
        parameterPath: [
            "options",
            "jobPatchOptions",
            "ifModifiedSince"
        ],
        mapper: {
            serializedName: "If-Modified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifModifiedSince12 = {
        parameterPath: [
            "options",
            "jobUpdateOptions",
            "ifModifiedSince"
        ],
        mapper: {
            serializedName: "If-Modified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifModifiedSince13 = {
        parameterPath: [
            "options",
            "jobDisableOptions",
            "ifModifiedSince"
        ],
        mapper: {
            serializedName: "If-Modified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifModifiedSince14 = {
        parameterPath: [
            "options",
            "jobEnableOptions",
            "ifModifiedSince"
        ],
        mapper: {
            serializedName: "If-Modified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifModifiedSince15 = {
        parameterPath: [
            "options",
            "jobTerminateOptions",
            "ifModifiedSince"
        ],
        mapper: {
            serializedName: "If-Modified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifModifiedSince16 = {
        parameterPath: [
            "options",
            "fileGetFromTaskOptions",
            "ifModifiedSince"
        ],
        mapper: {
            serializedName: "If-Modified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifModifiedSince17 = {
        parameterPath: [
            "options",
            "fileGetPropertiesFromTaskOptions",
            "ifModifiedSince"
        ],
        mapper: {
            serializedName: "If-Modified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifModifiedSince18 = {
        parameterPath: [
            "options",
            "fileGetFromComputeNodeOptions",
            "ifModifiedSince"
        ],
        mapper: {
            serializedName: "If-Modified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifModifiedSince19 = {
        parameterPath: [
            "options",
            "fileGetPropertiesFromComputeNodeOptions",
            "ifModifiedSince"
        ],
        mapper: {
            serializedName: "If-Modified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifModifiedSince2 = {
        parameterPath: [
            "options",
            "poolGetOptions",
            "ifModifiedSince"
        ],
        mapper: {
            serializedName: "If-Modified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifModifiedSince20 = {
        parameterPath: [
            "options",
            "jobScheduleExistsOptions",
            "ifModifiedSince"
        ],
        mapper: {
            serializedName: "If-Modified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifModifiedSince21 = {
        parameterPath: [
            "options",
            "jobScheduleDeleteMethodOptions",
            "ifModifiedSince"
        ],
        mapper: {
            serializedName: "If-Modified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifModifiedSince22 = {
        parameterPath: [
            "options",
            "jobScheduleGetOptions",
            "ifModifiedSince"
        ],
        mapper: {
            serializedName: "If-Modified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifModifiedSince23 = {
        parameterPath: [
            "options",
            "jobSchedulePatchOptions",
            "ifModifiedSince"
        ],
        mapper: {
            serializedName: "If-Modified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifModifiedSince24 = {
        parameterPath: [
            "options",
            "jobScheduleUpdateOptions",
            "ifModifiedSince"
        ],
        mapper: {
            serializedName: "If-Modified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifModifiedSince25 = {
        parameterPath: [
            "options",
            "jobScheduleDisableOptions",
            "ifModifiedSince"
        ],
        mapper: {
            serializedName: "If-Modified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifModifiedSince26 = {
        parameterPath: [
            "options",
            "jobScheduleEnableOptions",
            "ifModifiedSince"
        ],
        mapper: {
            serializedName: "If-Modified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifModifiedSince27 = {
        parameterPath: [
            "options",
            "jobScheduleTerminateOptions",
            "ifModifiedSince"
        ],
        mapper: {
            serializedName: "If-Modified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifModifiedSince28 = {
        parameterPath: [
            "options",
            "taskDeleteMethodOptions",
            "ifModifiedSince"
        ],
        mapper: {
            serializedName: "If-Modified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifModifiedSince29 = {
        parameterPath: [
            "options",
            "taskGetOptions",
            "ifModifiedSince"
        ],
        mapper: {
            serializedName: "If-Modified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifModifiedSince3 = {
        parameterPath: [
            "options",
            "poolPatchOptions",
            "ifModifiedSince"
        ],
        mapper: {
            serializedName: "If-Modified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifModifiedSince30 = {
        parameterPath: [
            "options",
            "taskUpdateOptions",
            "ifModifiedSince"
        ],
        mapper: {
            serializedName: "If-Modified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifModifiedSince31 = {
        parameterPath: [
            "options",
            "taskTerminateOptions",
            "ifModifiedSince"
        ],
        mapper: {
            serializedName: "If-Modified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifModifiedSince32 = {
        parameterPath: [
            "options",
            "taskReactivateOptions",
            "ifModifiedSince"
        ],
        mapper: {
            serializedName: "If-Modified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifModifiedSince4 = {
        parameterPath: [
            "options",
            "poolEnableAutoScaleOptions",
            "ifModifiedSince"
        ],
        mapper: {
            serializedName: "If-Modified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifModifiedSince5 = {
        parameterPath: [
            "options",
            "poolResizeOptions",
            "ifModifiedSince"
        ],
        mapper: {
            serializedName: "If-Modified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifModifiedSince6 = {
        parameterPath: [
            "options",
            "poolStopResizeOptions",
            "ifModifiedSince"
        ],
        mapper: {
            serializedName: "If-Modified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifModifiedSince7 = {
        parameterPath: [
            "options",
            "poolUpgradeOSOptions",
            "ifModifiedSince"
        ],
        mapper: {
            serializedName: "If-Modified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifModifiedSince8 = {
        parameterPath: [
            "options",
            "poolRemoveNodesOptions",
            "ifModifiedSince"
        ],
        mapper: {
            serializedName: "If-Modified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifModifiedSince9 = {
        parameterPath: [
            "options",
            "jobDeleteMethodOptions",
            "ifModifiedSince"
        ],
        mapper: {
            serializedName: "If-Modified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifNoneMatch0 = {
        parameterPath: [
            "options",
            "poolDeleteMethodOptions",
            "ifNoneMatch"
        ],
        mapper: {
            serializedName: "If-None-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifNoneMatch1 = {
        parameterPath: [
            "options",
            "poolExistsOptions",
            "ifNoneMatch"
        ],
        mapper: {
            serializedName: "If-None-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifNoneMatch10 = {
        parameterPath: [
            "options",
            "jobGetOptions",
            "ifNoneMatch"
        ],
        mapper: {
            serializedName: "If-None-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifNoneMatch11 = {
        parameterPath: [
            "options",
            "jobPatchOptions",
            "ifNoneMatch"
        ],
        mapper: {
            serializedName: "If-None-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifNoneMatch12 = {
        parameterPath: [
            "options",
            "jobUpdateOptions",
            "ifNoneMatch"
        ],
        mapper: {
            serializedName: "If-None-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifNoneMatch13 = {
        parameterPath: [
            "options",
            "jobDisableOptions",
            "ifNoneMatch"
        ],
        mapper: {
            serializedName: "If-None-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifNoneMatch14 = {
        parameterPath: [
            "options",
            "jobEnableOptions",
            "ifNoneMatch"
        ],
        mapper: {
            serializedName: "If-None-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifNoneMatch15 = {
        parameterPath: [
            "options",
            "jobTerminateOptions",
            "ifNoneMatch"
        ],
        mapper: {
            serializedName: "If-None-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifNoneMatch16 = {
        parameterPath: [
            "options",
            "jobScheduleExistsOptions",
            "ifNoneMatch"
        ],
        mapper: {
            serializedName: "If-None-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifNoneMatch17 = {
        parameterPath: [
            "options",
            "jobScheduleDeleteMethodOptions",
            "ifNoneMatch"
        ],
        mapper: {
            serializedName: "If-None-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifNoneMatch18 = {
        parameterPath: [
            "options",
            "jobScheduleGetOptions",
            "ifNoneMatch"
        ],
        mapper: {
            serializedName: "If-None-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifNoneMatch19 = {
        parameterPath: [
            "options",
            "jobSchedulePatchOptions",
            "ifNoneMatch"
        ],
        mapper: {
            serializedName: "If-None-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifNoneMatch2 = {
        parameterPath: [
            "options",
            "poolGetOptions",
            "ifNoneMatch"
        ],
        mapper: {
            serializedName: "If-None-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifNoneMatch20 = {
        parameterPath: [
            "options",
            "jobScheduleUpdateOptions",
            "ifNoneMatch"
        ],
        mapper: {
            serializedName: "If-None-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifNoneMatch21 = {
        parameterPath: [
            "options",
            "jobScheduleDisableOptions",
            "ifNoneMatch"
        ],
        mapper: {
            serializedName: "If-None-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifNoneMatch22 = {
        parameterPath: [
            "options",
            "jobScheduleEnableOptions",
            "ifNoneMatch"
        ],
        mapper: {
            serializedName: "If-None-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifNoneMatch23 = {
        parameterPath: [
            "options",
            "jobScheduleTerminateOptions",
            "ifNoneMatch"
        ],
        mapper: {
            serializedName: "If-None-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifNoneMatch24 = {
        parameterPath: [
            "options",
            "taskDeleteMethodOptions",
            "ifNoneMatch"
        ],
        mapper: {
            serializedName: "If-None-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifNoneMatch25 = {
        parameterPath: [
            "options",
            "taskGetOptions",
            "ifNoneMatch"
        ],
        mapper: {
            serializedName: "If-None-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifNoneMatch26 = {
        parameterPath: [
            "options",
            "taskUpdateOptions",
            "ifNoneMatch"
        ],
        mapper: {
            serializedName: "If-None-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifNoneMatch27 = {
        parameterPath: [
            "options",
            "taskTerminateOptions",
            "ifNoneMatch"
        ],
        mapper: {
            serializedName: "If-None-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifNoneMatch28 = {
        parameterPath: [
            "options",
            "taskReactivateOptions",
            "ifNoneMatch"
        ],
        mapper: {
            serializedName: "If-None-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifNoneMatch3 = {
        parameterPath: [
            "options",
            "poolPatchOptions",
            "ifNoneMatch"
        ],
        mapper: {
            serializedName: "If-None-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifNoneMatch4 = {
        parameterPath: [
            "options",
            "poolEnableAutoScaleOptions",
            "ifNoneMatch"
        ],
        mapper: {
            serializedName: "If-None-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifNoneMatch5 = {
        parameterPath: [
            "options",
            "poolResizeOptions",
            "ifNoneMatch"
        ],
        mapper: {
            serializedName: "If-None-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifNoneMatch6 = {
        parameterPath: [
            "options",
            "poolStopResizeOptions",
            "ifNoneMatch"
        ],
        mapper: {
            serializedName: "If-None-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifNoneMatch7 = {
        parameterPath: [
            "options",
            "poolUpgradeOSOptions",
            "ifNoneMatch"
        ],
        mapper: {
            serializedName: "If-None-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifNoneMatch8 = {
        parameterPath: [
            "options",
            "poolRemoveNodesOptions",
            "ifNoneMatch"
        ],
        mapper: {
            serializedName: "If-None-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifNoneMatch9 = {
        parameterPath: [
            "options",
            "jobDeleteMethodOptions",
            "ifNoneMatch"
        ],
        mapper: {
            serializedName: "If-None-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifUnmodifiedSince0 = {
        parameterPath: [
            "options",
            "poolDeleteMethodOptions",
            "ifUnmodifiedSince"
        ],
        mapper: {
            serializedName: "If-Unmodified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifUnmodifiedSince1 = {
        parameterPath: [
            "options",
            "poolExistsOptions",
            "ifUnmodifiedSince"
        ],
        mapper: {
            serializedName: "If-Unmodified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifUnmodifiedSince10 = {
        parameterPath: [
            "options",
            "jobGetOptions",
            "ifUnmodifiedSince"
        ],
        mapper: {
            serializedName: "If-Unmodified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifUnmodifiedSince11 = {
        parameterPath: [
            "options",
            "jobPatchOptions",
            "ifUnmodifiedSince"
        ],
        mapper: {
            serializedName: "If-Unmodified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifUnmodifiedSince12 = {
        parameterPath: [
            "options",
            "jobUpdateOptions",
            "ifUnmodifiedSince"
        ],
        mapper: {
            serializedName: "If-Unmodified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifUnmodifiedSince13 = {
        parameterPath: [
            "options",
            "jobDisableOptions",
            "ifUnmodifiedSince"
        ],
        mapper: {
            serializedName: "If-Unmodified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifUnmodifiedSince14 = {
        parameterPath: [
            "options",
            "jobEnableOptions",
            "ifUnmodifiedSince"
        ],
        mapper: {
            serializedName: "If-Unmodified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifUnmodifiedSince15 = {
        parameterPath: [
            "options",
            "jobTerminateOptions",
            "ifUnmodifiedSince"
        ],
        mapper: {
            serializedName: "If-Unmodified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifUnmodifiedSince16 = {
        parameterPath: [
            "options",
            "fileGetFromTaskOptions",
            "ifUnmodifiedSince"
        ],
        mapper: {
            serializedName: "If-Unmodified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifUnmodifiedSince17 = {
        parameterPath: [
            "options",
            "fileGetPropertiesFromTaskOptions",
            "ifUnmodifiedSince"
        ],
        mapper: {
            serializedName: "If-Unmodified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifUnmodifiedSince18 = {
        parameterPath: [
            "options",
            "fileGetFromComputeNodeOptions",
            "ifUnmodifiedSince"
        ],
        mapper: {
            serializedName: "If-Unmodified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifUnmodifiedSince19 = {
        parameterPath: [
            "options",
            "fileGetPropertiesFromComputeNodeOptions",
            "ifUnmodifiedSince"
        ],
        mapper: {
            serializedName: "If-Unmodified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifUnmodifiedSince2 = {
        parameterPath: [
            "options",
            "poolGetOptions",
            "ifUnmodifiedSince"
        ],
        mapper: {
            serializedName: "If-Unmodified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifUnmodifiedSince20 = {
        parameterPath: [
            "options",
            "jobScheduleExistsOptions",
            "ifUnmodifiedSince"
        ],
        mapper: {
            serializedName: "If-Unmodified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifUnmodifiedSince21 = {
        parameterPath: [
            "options",
            "jobScheduleDeleteMethodOptions",
            "ifUnmodifiedSince"
        ],
        mapper: {
            serializedName: "If-Unmodified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifUnmodifiedSince22 = {
        parameterPath: [
            "options",
            "jobScheduleGetOptions",
            "ifUnmodifiedSince"
        ],
        mapper: {
            serializedName: "If-Unmodified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifUnmodifiedSince23 = {
        parameterPath: [
            "options",
            "jobSchedulePatchOptions",
            "ifUnmodifiedSince"
        ],
        mapper: {
            serializedName: "If-Unmodified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifUnmodifiedSince24 = {
        parameterPath: [
            "options",
            "jobScheduleUpdateOptions",
            "ifUnmodifiedSince"
        ],
        mapper: {
            serializedName: "If-Unmodified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifUnmodifiedSince25 = {
        parameterPath: [
            "options",
            "jobScheduleDisableOptions",
            "ifUnmodifiedSince"
        ],
        mapper: {
            serializedName: "If-Unmodified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifUnmodifiedSince26 = {
        parameterPath: [
            "options",
            "jobScheduleEnableOptions",
            "ifUnmodifiedSince"
        ],
        mapper: {
            serializedName: "If-Unmodified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifUnmodifiedSince27 = {
        parameterPath: [
            "options",
            "jobScheduleTerminateOptions",
            "ifUnmodifiedSince"
        ],
        mapper: {
            serializedName: "If-Unmodified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifUnmodifiedSince28 = {
        parameterPath: [
            "options",
            "taskDeleteMethodOptions",
            "ifUnmodifiedSince"
        ],
        mapper: {
            serializedName: "If-Unmodified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifUnmodifiedSince29 = {
        parameterPath: [
            "options",
            "taskGetOptions",
            "ifUnmodifiedSince"
        ],
        mapper: {
            serializedName: "If-Unmodified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifUnmodifiedSince3 = {
        parameterPath: [
            "options",
            "poolPatchOptions",
            "ifUnmodifiedSince"
        ],
        mapper: {
            serializedName: "If-Unmodified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifUnmodifiedSince30 = {
        parameterPath: [
            "options",
            "taskUpdateOptions",
            "ifUnmodifiedSince"
        ],
        mapper: {
            serializedName: "If-Unmodified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifUnmodifiedSince31 = {
        parameterPath: [
            "options",
            "taskTerminateOptions",
            "ifUnmodifiedSince"
        ],
        mapper: {
            serializedName: "If-Unmodified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifUnmodifiedSince32 = {
        parameterPath: [
            "options",
            "taskReactivateOptions",
            "ifUnmodifiedSince"
        ],
        mapper: {
            serializedName: "If-Unmodified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifUnmodifiedSince4 = {
        parameterPath: [
            "options",
            "poolEnableAutoScaleOptions",
            "ifUnmodifiedSince"
        ],
        mapper: {
            serializedName: "If-Unmodified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifUnmodifiedSince5 = {
        parameterPath: [
            "options",
            "poolResizeOptions",
            "ifUnmodifiedSince"
        ],
        mapper: {
            serializedName: "If-Unmodified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifUnmodifiedSince6 = {
        parameterPath: [
            "options",
            "poolStopResizeOptions",
            "ifUnmodifiedSince"
        ],
        mapper: {
            serializedName: "If-Unmodified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifUnmodifiedSince7 = {
        parameterPath: [
            "options",
            "poolUpgradeOSOptions",
            "ifUnmodifiedSince"
        ],
        mapper: {
            serializedName: "If-Unmodified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifUnmodifiedSince8 = {
        parameterPath: [
            "options",
            "poolRemoveNodesOptions",
            "ifUnmodifiedSince"
        ],
        mapper: {
            serializedName: "If-Unmodified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ifUnmodifiedSince9 = {
        parameterPath: [
            "options",
            "jobDeleteMethodOptions",
            "ifUnmodifiedSince"
        ],
        mapper: {
            serializedName: "If-Unmodified-Since",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var jobId = {
        parameterPath: "jobId",
        mapper: {
            required: true,
            serializedName: "jobId",
            type: {
                name: "String"
            }
        }
    };
    var jobScheduleId = {
        parameterPath: "jobScheduleId",
        mapper: {
            required: true,
            serializedName: "jobScheduleId",
            type: {
                name: "String"
            }
        }
    };
    var maxResults0 = {
        parameterPath: [
            "options",
            "applicationListOptions",
            "maxResults"
        ],
        mapper: {
            serializedName: "maxresults",
            defaultValue: 1000,
            constraints: {
                InclusiveMaximum: 1000,
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };
    var maxResults1 = {
        parameterPath: [
            "options",
            "poolListUsageMetricsOptions",
            "maxResults"
        ],
        mapper: {
            serializedName: "maxresults",
            defaultValue: 1000,
            constraints: {
                InclusiveMaximum: 1000,
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };
    var maxResults10 = {
        parameterPath: [
            "options",
            "fileListFromComputeNodeOptions",
            "maxResults"
        ],
        mapper: {
            serializedName: "maxresults",
            defaultValue: 1000,
            constraints: {
                InclusiveMaximum: 1000,
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };
    var maxResults11 = {
        parameterPath: [
            "options",
            "jobScheduleListOptions",
            "maxResults"
        ],
        mapper: {
            serializedName: "maxresults",
            defaultValue: 1000,
            constraints: {
                InclusiveMaximum: 1000,
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };
    var maxResults12 = {
        parameterPath: [
            "options",
            "taskListOptions",
            "maxResults"
        ],
        mapper: {
            serializedName: "maxresults",
            defaultValue: 1000,
            constraints: {
                InclusiveMaximum: 1000,
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };
    var maxResults13 = {
        parameterPath: [
            "options",
            "computeNodeListOptions",
            "maxResults"
        ],
        mapper: {
            serializedName: "maxresults",
            defaultValue: 1000,
            constraints: {
                InclusiveMaximum: 1000,
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };
    var maxResults2 = {
        parameterPath: [
            "options",
            "poolListOptions",
            "maxResults"
        ],
        mapper: {
            serializedName: "maxresults",
            defaultValue: 1000,
            constraints: {
                InclusiveMaximum: 1000,
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };
    var maxResults3 = {
        parameterPath: [
            "options",
            "accountListNodeAgentSkusOptions",
            "maxResults"
        ],
        mapper: {
            serializedName: "maxresults",
            defaultValue: 1000,
            constraints: {
                InclusiveMaximum: 1000,
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };
    var maxResults4 = {
        parameterPath: [
            "options",
            "accountListPoolNodeCountsOptions",
            "maxResults"
        ],
        mapper: {
            serializedName: "maxresults",
            defaultValue: 10,
            constraints: {
                InclusiveMaximum: 10,
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };
    var maxResults5 = {
        parameterPath: [
            "options",
            "jobListOptions",
            "maxResults"
        ],
        mapper: {
            serializedName: "maxresults",
            defaultValue: 1000,
            constraints: {
                InclusiveMaximum: 1000,
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };
    var maxResults6 = {
        parameterPath: [
            "options",
            "jobListFromJobScheduleOptions",
            "maxResults"
        ],
        mapper: {
            serializedName: "maxresults",
            defaultValue: 1000,
            constraints: {
                InclusiveMaximum: 1000,
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };
    var maxResults7 = {
        parameterPath: [
            "options",
            "jobListPreparationAndReleaseTaskStatusOptions",
            "maxResults"
        ],
        mapper: {
            serializedName: "maxresults",
            defaultValue: 1000,
            constraints: {
                InclusiveMaximum: 1000,
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };
    var maxResults8 = {
        parameterPath: [
            "options",
            "certificateListOptions",
            "maxResults"
        ],
        mapper: {
            serializedName: "maxresults",
            defaultValue: 1000,
            constraints: {
                InclusiveMaximum: 1000,
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };
    var maxResults9 = {
        parameterPath: [
            "options",
            "fileListFromTaskOptions",
            "maxResults"
        ],
        mapper: {
            serializedName: "maxresults",
            defaultValue: 1000,
            constraints: {
                InclusiveMaximum: 1000,
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var nodeId = {
        parameterPath: "nodeId",
        mapper: {
            required: true,
            serializedName: "nodeId",
            type: {
                name: "String"
            }
        }
    };
    var ocpDate0 = {
        parameterPath: [
            "options",
            "applicationListOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate1 = {
        parameterPath: [
            "options",
            "applicationGetOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate10 = {
        parameterPath: [
            "options",
            "poolPatchOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate11 = {
        parameterPath: [
            "options",
            "poolDisableAutoScaleOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate12 = {
        parameterPath: [
            "options",
            "poolEnableAutoScaleOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate13 = {
        parameterPath: [
            "options",
            "poolEvaluateAutoScaleOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate14 = {
        parameterPath: [
            "options",
            "poolResizeOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate15 = {
        parameterPath: [
            "options",
            "poolStopResizeOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate16 = {
        parameterPath: [
            "options",
            "poolUpdatePropertiesOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate17 = {
        parameterPath: [
            "options",
            "poolUpgradeOSOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate18 = {
        parameterPath: [
            "options",
            "poolRemoveNodesOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate19 = {
        parameterPath: [
            "options",
            "poolListUsageMetricsNextOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate2 = {
        parameterPath: [
            "options",
            "applicationListNextOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate20 = {
        parameterPath: [
            "options",
            "poolListNextOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate21 = {
        parameterPath: [
            "options",
            "accountListNodeAgentSkusOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate22 = {
        parameterPath: [
            "options",
            "accountListPoolNodeCountsOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate23 = {
        parameterPath: [
            "options",
            "accountListNodeAgentSkusNextOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate24 = {
        parameterPath: [
            "options",
            "accountListPoolNodeCountsNextOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate25 = {
        parameterPath: [
            "options",
            "jobGetAllLifetimeStatisticsOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate26 = {
        parameterPath: [
            "options",
            "jobDeleteMethodOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate27 = {
        parameterPath: [
            "options",
            "jobGetOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate28 = {
        parameterPath: [
            "options",
            "jobPatchOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate29 = {
        parameterPath: [
            "options",
            "jobUpdateOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate3 = {
        parameterPath: [
            "options",
            "poolListUsageMetricsOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate30 = {
        parameterPath: [
            "options",
            "jobDisableOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate31 = {
        parameterPath: [
            "options",
            "jobEnableOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate32 = {
        parameterPath: [
            "options",
            "jobTerminateOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate33 = {
        parameterPath: [
            "options",
            "jobAddOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate34 = {
        parameterPath: [
            "options",
            "jobListOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate35 = {
        parameterPath: [
            "options",
            "jobListFromJobScheduleOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate36 = {
        parameterPath: [
            "options",
            "jobListPreparationAndReleaseTaskStatusOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate37 = {
        parameterPath: [
            "options",
            "jobGetTaskCountsOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate38 = {
        parameterPath: [
            "options",
            "jobListNextOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate39 = {
        parameterPath: [
            "options",
            "jobListFromJobScheduleNextOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate4 = {
        parameterPath: [
            "options",
            "poolGetAllLifetimeStatisticsOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate40 = {
        parameterPath: [
            "options",
            "jobListPreparationAndReleaseTaskStatusNextOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate41 = {
        parameterPath: [
            "options",
            "certificateAddOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate42 = {
        parameterPath: [
            "options",
            "certificateListOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate43 = {
        parameterPath: [
            "options",
            "certificateCancelDeletionOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate44 = {
        parameterPath: [
            "options",
            "certificateDeleteMethodOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate45 = {
        parameterPath: [
            "options",
            "certificateGetOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate46 = {
        parameterPath: [
            "options",
            "certificateListNextOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate47 = {
        parameterPath: [
            "options",
            "fileDeleteFromTaskOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate48 = {
        parameterPath: [
            "options",
            "fileGetFromTaskOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate49 = {
        parameterPath: [
            "options",
            "fileGetPropertiesFromTaskOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate5 = {
        parameterPath: [
            "options",
            "poolAddOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate50 = {
        parameterPath: [
            "options",
            "fileDeleteFromComputeNodeOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate51 = {
        parameterPath: [
            "options",
            "fileGetFromComputeNodeOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate52 = {
        parameterPath: [
            "options",
            "fileGetPropertiesFromComputeNodeOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate53 = {
        parameterPath: [
            "options",
            "fileListFromTaskOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate54 = {
        parameterPath: [
            "options",
            "fileListFromComputeNodeOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate55 = {
        parameterPath: [
            "options",
            "fileListFromTaskNextOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate56 = {
        parameterPath: [
            "options",
            "fileListFromComputeNodeNextOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate57 = {
        parameterPath: [
            "options",
            "jobScheduleExistsOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate58 = {
        parameterPath: [
            "options",
            "jobScheduleDeleteMethodOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate59 = {
        parameterPath: [
            "options",
            "jobScheduleGetOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate6 = {
        parameterPath: [
            "options",
            "poolListOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate60 = {
        parameterPath: [
            "options",
            "jobSchedulePatchOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate61 = {
        parameterPath: [
            "options",
            "jobScheduleUpdateOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate62 = {
        parameterPath: [
            "options",
            "jobScheduleDisableOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate63 = {
        parameterPath: [
            "options",
            "jobScheduleEnableOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate64 = {
        parameterPath: [
            "options",
            "jobScheduleTerminateOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate65 = {
        parameterPath: [
            "options",
            "jobScheduleAddOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate66 = {
        parameterPath: [
            "options",
            "jobScheduleListOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate67 = {
        parameterPath: [
            "options",
            "jobScheduleListNextOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate68 = {
        parameterPath: [
            "options",
            "taskAddOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate69 = {
        parameterPath: [
            "options",
            "taskListOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate7 = {
        parameterPath: [
            "options",
            "poolDeleteMethodOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate70 = {
        parameterPath: [
            "options",
            "taskAddCollectionOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate71 = {
        parameterPath: [
            "options",
            "taskDeleteMethodOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate72 = {
        parameterPath: [
            "options",
            "taskGetOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate73 = {
        parameterPath: [
            "options",
            "taskUpdateOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate74 = {
        parameterPath: [
            "options",
            "taskListSubtasksOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate75 = {
        parameterPath: [
            "options",
            "taskTerminateOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate76 = {
        parameterPath: [
            "options",
            "taskReactivateOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate77 = {
        parameterPath: [
            "options",
            "taskListNextOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate78 = {
        parameterPath: [
            "options",
            "computeNodeAddUserOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate79 = {
        parameterPath: [
            "options",
            "computeNodeDeleteUserOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate8 = {
        parameterPath: [
            "options",
            "poolExistsOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate80 = {
        parameterPath: [
            "options",
            "computeNodeUpdateUserOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate81 = {
        parameterPath: [
            "options",
            "computeNodeGetOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate82 = {
        parameterPath: [
            "options",
            "computeNodeRebootOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate83 = {
        parameterPath: [
            "options",
            "computeNodeReimageOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate84 = {
        parameterPath: [
            "options",
            "computeNodeDisableSchedulingOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate85 = {
        parameterPath: [
            "options",
            "computeNodeEnableSchedulingOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate86 = {
        parameterPath: [
            "options",
            "computeNodeGetRemoteLoginSettingsOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate87 = {
        parameterPath: [
            "options",
            "computeNodeGetRemoteDesktopOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate88 = {
        parameterPath: [
            "options",
            "computeNodeUploadBatchServiceLogsOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate89 = {
        parameterPath: [
            "options",
            "computeNodeListOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate9 = {
        parameterPath: [
            "options",
            "poolGetOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpDate90 = {
        parameterPath: [
            "options",
            "computeNodeListNextOptions",
            "ocpDate"
        ],
        mapper: {
            serializedName: "ocp-date",
            type: {
                name: "DateTimeRfc1123"
            }
        }
    };
    var ocpRange0 = {
        parameterPath: [
            "options",
            "fileGetFromTaskOptions",
            "ocpRange"
        ],
        mapper: {
            serializedName: "ocp-range",
            type: {
                name: "String"
            }
        }
    };
    var ocpRange1 = {
        parameterPath: [
            "options",
            "fileGetFromComputeNodeOptions",
            "ocpRange"
        ],
        mapper: {
            serializedName: "ocp-range",
            type: {
                name: "String"
            }
        }
    };
    var poolId = {
        parameterPath: "poolId",
        mapper: {
            required: true,
            serializedName: "poolId",
            type: {
                name: "String"
            }
        }
    };
    var recursive = {
        parameterPath: [
            "options",
            "recursive"
        ],
        mapper: {
            serializedName: "recursive",
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId0 = {
        parameterPath: [
            "options",
            "applicationListOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId1 = {
        parameterPath: [
            "options",
            "applicationGetOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId10 = {
        parameterPath: [
            "options",
            "poolPatchOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId11 = {
        parameterPath: [
            "options",
            "poolDisableAutoScaleOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId12 = {
        parameterPath: [
            "options",
            "poolEnableAutoScaleOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId13 = {
        parameterPath: [
            "options",
            "poolEvaluateAutoScaleOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId14 = {
        parameterPath: [
            "options",
            "poolResizeOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId15 = {
        parameterPath: [
            "options",
            "poolStopResizeOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId16 = {
        parameterPath: [
            "options",
            "poolUpdatePropertiesOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId17 = {
        parameterPath: [
            "options",
            "poolUpgradeOSOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId18 = {
        parameterPath: [
            "options",
            "poolRemoveNodesOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId19 = {
        parameterPath: [
            "options",
            "poolListUsageMetricsNextOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId2 = {
        parameterPath: [
            "options",
            "applicationListNextOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId20 = {
        parameterPath: [
            "options",
            "poolListNextOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId21 = {
        parameterPath: [
            "options",
            "accountListNodeAgentSkusOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId22 = {
        parameterPath: [
            "options",
            "accountListPoolNodeCountsOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId23 = {
        parameterPath: [
            "options",
            "accountListNodeAgentSkusNextOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId24 = {
        parameterPath: [
            "options",
            "accountListPoolNodeCountsNextOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId25 = {
        parameterPath: [
            "options",
            "jobGetAllLifetimeStatisticsOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId26 = {
        parameterPath: [
            "options",
            "jobDeleteMethodOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId27 = {
        parameterPath: [
            "options",
            "jobGetOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId28 = {
        parameterPath: [
            "options",
            "jobPatchOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId29 = {
        parameterPath: [
            "options",
            "jobUpdateOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId3 = {
        parameterPath: [
            "options",
            "poolListUsageMetricsOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId30 = {
        parameterPath: [
            "options",
            "jobDisableOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId31 = {
        parameterPath: [
            "options",
            "jobEnableOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId32 = {
        parameterPath: [
            "options",
            "jobTerminateOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId33 = {
        parameterPath: [
            "options",
            "jobAddOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId34 = {
        parameterPath: [
            "options",
            "jobListOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId35 = {
        parameterPath: [
            "options",
            "jobListFromJobScheduleOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId36 = {
        parameterPath: [
            "options",
            "jobListPreparationAndReleaseTaskStatusOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId37 = {
        parameterPath: [
            "options",
            "jobGetTaskCountsOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId38 = {
        parameterPath: [
            "options",
            "jobListNextOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId39 = {
        parameterPath: [
            "options",
            "jobListFromJobScheduleNextOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId4 = {
        parameterPath: [
            "options",
            "poolGetAllLifetimeStatisticsOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId40 = {
        parameterPath: [
            "options",
            "jobListPreparationAndReleaseTaskStatusNextOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId41 = {
        parameterPath: [
            "options",
            "certificateAddOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId42 = {
        parameterPath: [
            "options",
            "certificateListOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId43 = {
        parameterPath: [
            "options",
            "certificateCancelDeletionOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId44 = {
        parameterPath: [
            "options",
            "certificateDeleteMethodOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId45 = {
        parameterPath: [
            "options",
            "certificateGetOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId46 = {
        parameterPath: [
            "options",
            "certificateListNextOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId47 = {
        parameterPath: [
            "options",
            "fileDeleteFromTaskOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId48 = {
        parameterPath: [
            "options",
            "fileGetFromTaskOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId49 = {
        parameterPath: [
            "options",
            "fileGetPropertiesFromTaskOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId5 = {
        parameterPath: [
            "options",
            "poolAddOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId50 = {
        parameterPath: [
            "options",
            "fileDeleteFromComputeNodeOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId51 = {
        parameterPath: [
            "options",
            "fileGetFromComputeNodeOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId52 = {
        parameterPath: [
            "options",
            "fileGetPropertiesFromComputeNodeOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId53 = {
        parameterPath: [
            "options",
            "fileListFromTaskOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId54 = {
        parameterPath: [
            "options",
            "fileListFromComputeNodeOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId55 = {
        parameterPath: [
            "options",
            "fileListFromTaskNextOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId56 = {
        parameterPath: [
            "options",
            "fileListFromComputeNodeNextOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId57 = {
        parameterPath: [
            "options",
            "jobScheduleExistsOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId58 = {
        parameterPath: [
            "options",
            "jobScheduleDeleteMethodOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId59 = {
        parameterPath: [
            "options",
            "jobScheduleGetOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId6 = {
        parameterPath: [
            "options",
            "poolListOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId60 = {
        parameterPath: [
            "options",
            "jobSchedulePatchOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId61 = {
        parameterPath: [
            "options",
            "jobScheduleUpdateOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId62 = {
        parameterPath: [
            "options",
            "jobScheduleDisableOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId63 = {
        parameterPath: [
            "options",
            "jobScheduleEnableOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId64 = {
        parameterPath: [
            "options",
            "jobScheduleTerminateOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId65 = {
        parameterPath: [
            "options",
            "jobScheduleAddOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId66 = {
        parameterPath: [
            "options",
            "jobScheduleListOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId67 = {
        parameterPath: [
            "options",
            "jobScheduleListNextOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId68 = {
        parameterPath: [
            "options",
            "taskAddOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId69 = {
        parameterPath: [
            "options",
            "taskListOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId7 = {
        parameterPath: [
            "options",
            "poolDeleteMethodOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId70 = {
        parameterPath: [
            "options",
            "taskAddCollectionOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId71 = {
        parameterPath: [
            "options",
            "taskDeleteMethodOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId72 = {
        parameterPath: [
            "options",
            "taskGetOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId73 = {
        parameterPath: [
            "options",
            "taskUpdateOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId74 = {
        parameterPath: [
            "options",
            "taskListSubtasksOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId75 = {
        parameterPath: [
            "options",
            "taskTerminateOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId76 = {
        parameterPath: [
            "options",
            "taskReactivateOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId77 = {
        parameterPath: [
            "options",
            "taskListNextOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId78 = {
        parameterPath: [
            "options",
            "computeNodeAddUserOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId79 = {
        parameterPath: [
            "options",
            "computeNodeDeleteUserOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId8 = {
        parameterPath: [
            "options",
            "poolExistsOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId80 = {
        parameterPath: [
            "options",
            "computeNodeUpdateUserOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId81 = {
        parameterPath: [
            "options",
            "computeNodeGetOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId82 = {
        parameterPath: [
            "options",
            "computeNodeRebootOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId83 = {
        parameterPath: [
            "options",
            "computeNodeReimageOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId84 = {
        parameterPath: [
            "options",
            "computeNodeDisableSchedulingOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId85 = {
        parameterPath: [
            "options",
            "computeNodeEnableSchedulingOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId86 = {
        parameterPath: [
            "options",
            "computeNodeGetRemoteLoginSettingsOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId87 = {
        parameterPath: [
            "options",
            "computeNodeGetRemoteDesktopOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId88 = {
        parameterPath: [
            "options",
            "computeNodeUploadBatchServiceLogsOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId89 = {
        parameterPath: [
            "options",
            "computeNodeListOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId9 = {
        parameterPath: [
            "options",
            "poolGetOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnClientRequestId90 = {
        parameterPath: [
            "options",
            "computeNodeListNextOptions",
            "returnClientRequestId"
        ],
        mapper: {
            serializedName: "return-client-request-id",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var select0 = {
        parameterPath: [
            "options",
            "poolListOptions",
            "select"
        ],
        mapper: {
            serializedName: "$select",
            type: {
                name: "String"
            }
        }
    };
    var select1 = {
        parameterPath: [
            "options",
            "poolGetOptions",
            "select"
        ],
        mapper: {
            serializedName: "$select",
            type: {
                name: "String"
            }
        }
    };
    var select10 = {
        parameterPath: [
            "options",
            "taskListOptions",
            "select"
        ],
        mapper: {
            serializedName: "$select",
            type: {
                name: "String"
            }
        }
    };
    var select11 = {
        parameterPath: [
            "options",
            "taskGetOptions",
            "select"
        ],
        mapper: {
            serializedName: "$select",
            type: {
                name: "String"
            }
        }
    };
    var select12 = {
        parameterPath: [
            "options",
            "taskListSubtasksOptions",
            "select"
        ],
        mapper: {
            serializedName: "$select",
            type: {
                name: "String"
            }
        }
    };
    var select13 = {
        parameterPath: [
            "options",
            "computeNodeGetOptions",
            "select"
        ],
        mapper: {
            serializedName: "$select",
            type: {
                name: "String"
            }
        }
    };
    var select14 = {
        parameterPath: [
            "options",
            "computeNodeListOptions",
            "select"
        ],
        mapper: {
            serializedName: "$select",
            type: {
                name: "String"
            }
        }
    };
    var select2 = {
        parameterPath: [
            "options",
            "jobGetOptions",
            "select"
        ],
        mapper: {
            serializedName: "$select",
            type: {
                name: "String"
            }
        }
    };
    var select3 = {
        parameterPath: [
            "options",
            "jobListOptions",
            "select"
        ],
        mapper: {
            serializedName: "$select",
            type: {
                name: "String"
            }
        }
    };
    var select4 = {
        parameterPath: [
            "options",
            "jobListFromJobScheduleOptions",
            "select"
        ],
        mapper: {
            serializedName: "$select",
            type: {
                name: "String"
            }
        }
    };
    var select5 = {
        parameterPath: [
            "options",
            "jobListPreparationAndReleaseTaskStatusOptions",
            "select"
        ],
        mapper: {
            serializedName: "$select",
            type: {
                name: "String"
            }
        }
    };
    var select6 = {
        parameterPath: [
            "options",
            "certificateListOptions",
            "select"
        ],
        mapper: {
            serializedName: "$select",
            type: {
                name: "String"
            }
        }
    };
    var select7 = {
        parameterPath: [
            "options",
            "certificateGetOptions",
            "select"
        ],
        mapper: {
            serializedName: "$select",
            type: {
                name: "String"
            }
        }
    };
    var select8 = {
        parameterPath: [
            "options",
            "jobScheduleGetOptions",
            "select"
        ],
        mapper: {
            serializedName: "$select",
            type: {
                name: "String"
            }
        }
    };
    var select9 = {
        parameterPath: [
            "options",
            "jobScheduleListOptions",
            "select"
        ],
        mapper: {
            serializedName: "$select",
            type: {
                name: "String"
            }
        }
    };
    var startTime = {
        parameterPath: [
            "options",
            "poolListUsageMetricsOptions",
            "startTime"
        ],
        mapper: {
            serializedName: "starttime",
            type: {
                name: "DateTime"
            }
        }
    };
    var taskId = {
        parameterPath: "taskId",
        mapper: {
            required: true,
            serializedName: "taskId",
            type: {
                name: "String"
            }
        }
    };
    var thumbprint = {
        parameterPath: "thumbprint",
        mapper: {
            required: true,
            serializedName: "thumbprint",
            type: {
                name: "String"
            }
        }
    };
    var thumbprintAlgorithm = {
        parameterPath: "thumbprintAlgorithm",
        mapper: {
            required: true,
            serializedName: "thumbprintAlgorithm",
            type: {
                name: "String"
            }
        }
    };
    var timeout0 = {
        parameterPath: [
            "options",
            "applicationListOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout1 = {
        parameterPath: [
            "options",
            "applicationGetOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout10 = {
        parameterPath: [
            "options",
            "poolDisableAutoScaleOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout11 = {
        parameterPath: [
            "options",
            "poolEnableAutoScaleOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout12 = {
        parameterPath: [
            "options",
            "poolEvaluateAutoScaleOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout13 = {
        parameterPath: [
            "options",
            "poolResizeOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout14 = {
        parameterPath: [
            "options",
            "poolStopResizeOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout15 = {
        parameterPath: [
            "options",
            "poolUpdatePropertiesOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout16 = {
        parameterPath: [
            "options",
            "poolUpgradeOSOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout17 = {
        parameterPath: [
            "options",
            "poolRemoveNodesOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout18 = {
        parameterPath: [
            "options",
            "accountListNodeAgentSkusOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout19 = {
        parameterPath: [
            "options",
            "accountListPoolNodeCountsOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout2 = {
        parameterPath: [
            "options",
            "poolListUsageMetricsOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout20 = {
        parameterPath: [
            "options",
            "jobGetAllLifetimeStatisticsOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout21 = {
        parameterPath: [
            "options",
            "jobDeleteMethodOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout22 = {
        parameterPath: [
            "options",
            "jobGetOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout23 = {
        parameterPath: [
            "options",
            "jobPatchOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout24 = {
        parameterPath: [
            "options",
            "jobUpdateOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout25 = {
        parameterPath: [
            "options",
            "jobDisableOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout26 = {
        parameterPath: [
            "options",
            "jobEnableOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout27 = {
        parameterPath: [
            "options",
            "jobTerminateOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout28 = {
        parameterPath: [
            "options",
            "jobAddOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout29 = {
        parameterPath: [
            "options",
            "jobListOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout3 = {
        parameterPath: [
            "options",
            "poolGetAllLifetimeStatisticsOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout30 = {
        parameterPath: [
            "options",
            "jobListFromJobScheduleOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout31 = {
        parameterPath: [
            "options",
            "jobListPreparationAndReleaseTaskStatusOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout32 = {
        parameterPath: [
            "options",
            "jobGetTaskCountsOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout33 = {
        parameterPath: [
            "options",
            "certificateAddOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout34 = {
        parameterPath: [
            "options",
            "certificateListOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout35 = {
        parameterPath: [
            "options",
            "certificateCancelDeletionOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout36 = {
        parameterPath: [
            "options",
            "certificateDeleteMethodOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout37 = {
        parameterPath: [
            "options",
            "certificateGetOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout38 = {
        parameterPath: [
            "options",
            "fileDeleteFromTaskOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout39 = {
        parameterPath: [
            "options",
            "fileGetFromTaskOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout4 = {
        parameterPath: [
            "options",
            "poolAddOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout40 = {
        parameterPath: [
            "options",
            "fileGetPropertiesFromTaskOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout41 = {
        parameterPath: [
            "options",
            "fileDeleteFromComputeNodeOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout42 = {
        parameterPath: [
            "options",
            "fileGetFromComputeNodeOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout43 = {
        parameterPath: [
            "options",
            "fileGetPropertiesFromComputeNodeOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout44 = {
        parameterPath: [
            "options",
            "fileListFromTaskOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout45 = {
        parameterPath: [
            "options",
            "fileListFromComputeNodeOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout46 = {
        parameterPath: [
            "options",
            "jobScheduleExistsOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout47 = {
        parameterPath: [
            "options",
            "jobScheduleDeleteMethodOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout48 = {
        parameterPath: [
            "options",
            "jobScheduleGetOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout49 = {
        parameterPath: [
            "options",
            "jobSchedulePatchOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout5 = {
        parameterPath: [
            "options",
            "poolListOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout50 = {
        parameterPath: [
            "options",
            "jobScheduleUpdateOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout51 = {
        parameterPath: [
            "options",
            "jobScheduleDisableOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout52 = {
        parameterPath: [
            "options",
            "jobScheduleEnableOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout53 = {
        parameterPath: [
            "options",
            "jobScheduleTerminateOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout54 = {
        parameterPath: [
            "options",
            "jobScheduleAddOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout55 = {
        parameterPath: [
            "options",
            "jobScheduleListOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout56 = {
        parameterPath: [
            "options",
            "taskAddOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout57 = {
        parameterPath: [
            "options",
            "taskListOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout58 = {
        parameterPath: [
            "options",
            "taskAddCollectionOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout59 = {
        parameterPath: [
            "options",
            "taskDeleteMethodOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout6 = {
        parameterPath: [
            "options",
            "poolDeleteMethodOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout60 = {
        parameterPath: [
            "options",
            "taskGetOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout61 = {
        parameterPath: [
            "options",
            "taskUpdateOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout62 = {
        parameterPath: [
            "options",
            "taskListSubtasksOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout63 = {
        parameterPath: [
            "options",
            "taskTerminateOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout64 = {
        parameterPath: [
            "options",
            "taskReactivateOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout65 = {
        parameterPath: [
            "options",
            "computeNodeAddUserOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout66 = {
        parameterPath: [
            "options",
            "computeNodeDeleteUserOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout67 = {
        parameterPath: [
            "options",
            "computeNodeUpdateUserOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout68 = {
        parameterPath: [
            "options",
            "computeNodeGetOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout69 = {
        parameterPath: [
            "options",
            "computeNodeRebootOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout7 = {
        parameterPath: [
            "options",
            "poolExistsOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout70 = {
        parameterPath: [
            "options",
            "computeNodeReimageOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout71 = {
        parameterPath: [
            "options",
            "computeNodeDisableSchedulingOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout72 = {
        parameterPath: [
            "options",
            "computeNodeEnableSchedulingOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout73 = {
        parameterPath: [
            "options",
            "computeNodeGetRemoteLoginSettingsOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout74 = {
        parameterPath: [
            "options",
            "computeNodeGetRemoteDesktopOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout75 = {
        parameterPath: [
            "options",
            "computeNodeUploadBatchServiceLogsOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout76 = {
        parameterPath: [
            "options",
            "computeNodeListOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout8 = {
        parameterPath: [
            "options",
            "poolGetOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var timeout9 = {
        parameterPath: [
            "options",
            "poolPatchOptions",
            "timeout"
        ],
        mapper: {
            serializedName: "timeout",
            defaultValue: 30,
            type: {
                name: "Number"
            }
        }
    };
    var userName = {
        parameterPath: "userName",
        mapper: {
            required: true,
            serializedName: "userName",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Application. */
    var Application = /** @class */ (function () {
        /**
         * Create a Application.
         * @param {BatchServiceClientContext} client Reference to the service client.
         */
        function Application(client) {
            this.client = client;
        }
        Application.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Application.prototype.get = function (applicationId$$1, options, callback) {
            return this.client.sendOperationRequest({
                applicationId: applicationId$$1,
                options: options
            }, getOperationSpec, callback);
        };
        Application.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Application;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "applications",
        queryParameters: [
            apiVersion,
            maxResults0,
            timeout0
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId0,
            returnClientRequestId0,
            ocpDate0
        ],
        responses: {
            200: {
                bodyMapper: ApplicationListResult,
                headersMapper: ApplicationListHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "applications/{applicationId}",
        urlParameters: [
            applicationId
        ],
        queryParameters: [
            apiVersion,
            timeout1
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId1,
            returnClientRequestId1,
            ocpDate1
        ],
        responses: {
            200: {
                bodyMapper: ApplicationSummary,
                headersMapper: ApplicationGetHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://batch.core.windows.net",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId2,
            returnClientRequestId2,
            ocpDate2
        ],
        responses: {
            200: {
                bodyMapper: ApplicationListResult,
                headersMapper: ApplicationListHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        PoolListUsageMetricsResult: PoolListUsageMetricsResult,
        PoolUsageMetrics: PoolUsageMetrics,
        PoolListUsageMetricsHeaders: PoolListUsageMetricsHeaders,
        BatchError: BatchError,
        ErrorMessage: ErrorMessage,
        BatchErrorDetail: BatchErrorDetail,
        PoolStatistics: PoolStatistics,
        UsageStatistics: UsageStatistics,
        ResourceStatistics: ResourceStatistics,
        PoolGetAllLifetimeStatisticsHeaders: PoolGetAllLifetimeStatisticsHeaders,
        PoolAddParameter: PoolAddParameter,
        CloudServiceConfiguration: CloudServiceConfiguration,
        VirtualMachineConfiguration: VirtualMachineConfiguration,
        ImageReference: ImageReference,
        OSDisk: OSDisk,
        WindowsConfiguration: WindowsConfiguration,
        DataDisk: DataDisk,
        ContainerConfiguration: ContainerConfiguration,
        ContainerRegistry: ContainerRegistry,
        NetworkConfiguration: NetworkConfiguration,
        PoolEndpointConfiguration: PoolEndpointConfiguration,
        InboundNATPool: InboundNATPool,
        NetworkSecurityGroupRule: NetworkSecurityGroupRule,
        StartTask: StartTask,
        TaskContainerSettings: TaskContainerSettings,
        ResourceFile: ResourceFile,
        EnvironmentSetting: EnvironmentSetting,
        UserIdentity: UserIdentity,
        AutoUserSpecification: AutoUserSpecification,
        CertificateReference: CertificateReference,
        ApplicationPackageReference: ApplicationPackageReference,
        TaskSchedulingPolicy: TaskSchedulingPolicy,
        UserAccount: UserAccount,
        LinuxUserConfiguration: LinuxUserConfiguration,
        MetadataItem: MetadataItem,
        PoolAddHeaders: PoolAddHeaders,
        CloudPoolListResult: CloudPoolListResult,
        CloudPool: CloudPool,
        ResizeError: ResizeError,
        NameValuePair: NameValuePair,
        AutoScaleRun: AutoScaleRun,
        AutoScaleRunError: AutoScaleRunError,
        PoolListHeaders: PoolListHeaders,
        PoolDeleteHeaders: PoolDeleteHeaders,
        PoolExistsHeaders: PoolExistsHeaders,
        PoolGetHeaders: PoolGetHeaders,
        PoolPatchParameter: PoolPatchParameter,
        PoolPatchHeaders: PoolPatchHeaders,
        PoolDisableAutoScaleHeaders: PoolDisableAutoScaleHeaders,
        PoolEnableAutoScaleParameter: PoolEnableAutoScaleParameter,
        PoolEnableAutoScaleHeaders: PoolEnableAutoScaleHeaders,
        PoolEvaluateAutoScaleParameter: PoolEvaluateAutoScaleParameter,
        PoolEvaluateAutoScaleHeaders: PoolEvaluateAutoScaleHeaders,
        PoolResizeParameter: PoolResizeParameter,
        PoolResizeHeaders: PoolResizeHeaders,
        PoolStopResizeHeaders: PoolStopResizeHeaders,
        PoolUpdatePropertiesParameter: PoolUpdatePropertiesParameter,
        PoolUpdatePropertiesHeaders: PoolUpdatePropertiesHeaders,
        PoolUpgradeOSParameter: PoolUpgradeOSParameter,
        PoolUpgradeOSHeaders: PoolUpgradeOSHeaders,
        NodeRemoveParameter: NodeRemoveParameter,
        PoolRemoveNodesHeaders: PoolRemoveNodesHeaders
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Pool. */
    var Pool = /** @class */ (function () {
        /**
         * Create a Pool.
         * @param {BatchServiceClientContext} client Reference to the service client.
         */
        function Pool(client) {
            this.client = client;
        }
        Pool.prototype.listUsageMetrics = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listUsageMetricsOperationSpec, callback);
        };
        Pool.prototype.getAllLifetimeStatistics = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, getAllLifetimeStatisticsOperationSpec, callback);
        };
        Pool.prototype.add = function (pool, options, callback) {
            return this.client.sendOperationRequest({
                pool: pool,
                options: options
            }, addOperationSpec, callback);
        };
        Pool.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        Pool.prototype.deleteMethod = function (poolId$$1, options, callback) {
            return this.client.sendOperationRequest({
                poolId: poolId$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        Pool.prototype.exists = function (poolId$$1, options, callback) {
            return this.client.sendOperationRequest({
                poolId: poolId$$1,
                options: options
            }, existsOperationSpec, callback);
        };
        Pool.prototype.get = function (poolId$$1, options, callback) {
            return this.client.sendOperationRequest({
                poolId: poolId$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        Pool.prototype.patch = function (poolId$$1, poolPatchParameter, options, callback) {
            return this.client.sendOperationRequest({
                poolId: poolId$$1,
                poolPatchParameter: poolPatchParameter,
                options: options
            }, patchOperationSpec, callback);
        };
        Pool.prototype.disableAutoScale = function (poolId$$1, options, callback) {
            return this.client.sendOperationRequest({
                poolId: poolId$$1,
                options: options
            }, disableAutoScaleOperationSpec, callback);
        };
        Pool.prototype.enableAutoScale = function (poolId$$1, poolEnableAutoScaleParameter, options, callback) {
            return this.client.sendOperationRequest({
                poolId: poolId$$1,
                poolEnableAutoScaleParameter: poolEnableAutoScaleParameter,
                options: options
            }, enableAutoScaleOperationSpec, callback);
        };
        Pool.prototype.evaluateAutoScale = function (poolId$$1, autoScaleFormula, options, callback) {
            return this.client.sendOperationRequest({
                poolId: poolId$$1,
                autoScaleFormula: autoScaleFormula,
                options: options
            }, evaluateAutoScaleOperationSpec, callback);
        };
        Pool.prototype.resize = function (poolId$$1, poolResizeParameter, options, callback) {
            return this.client.sendOperationRequest({
                poolId: poolId$$1,
                poolResizeParameter: poolResizeParameter,
                options: options
            }, resizeOperationSpec, callback);
        };
        Pool.prototype.stopResize = function (poolId$$1, options, callback) {
            return this.client.sendOperationRequest({
                poolId: poolId$$1,
                options: options
            }, stopResizeOperationSpec, callback);
        };
        Pool.prototype.updateProperties = function (poolId$$1, poolUpdatePropertiesParameter, options, callback) {
            return this.client.sendOperationRequest({
                poolId: poolId$$1,
                poolUpdatePropertiesParameter: poolUpdatePropertiesParameter,
                options: options
            }, updatePropertiesOperationSpec, callback);
        };
        Pool.prototype.upgradeOS = function (poolId$$1, targetOSVersion, options, callback) {
            return this.client.sendOperationRequest({
                poolId: poolId$$1,
                targetOSVersion: targetOSVersion,
                options: options
            }, upgradeOSOperationSpec, callback);
        };
        Pool.prototype.removeNodes = function (poolId$$1, nodeRemoveParameter, options, callback) {
            return this.client.sendOperationRequest({
                poolId: poolId$$1,
                nodeRemoveParameter: nodeRemoveParameter,
                options: options
            }, removeNodesOperationSpec, callback);
        };
        Pool.prototype.listUsageMetricsNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listUsageMetricsNextOperationSpec, callback);
        };
        Pool.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return Pool;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listUsageMetricsOperationSpec = {
        httpMethod: "GET",
        path: "poolusagemetrics",
        queryParameters: [
            apiVersion,
            startTime,
            endTime,
            filter0,
            maxResults1,
            timeout2
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId3,
            returnClientRequestId3,
            ocpDate3
        ],
        responses: {
            200: {
                bodyMapper: PoolListUsageMetricsResult,
                headersMapper: PoolListUsageMetricsHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$1
    };
    var getAllLifetimeStatisticsOperationSpec = {
        httpMethod: "GET",
        path: "lifetimepoolstats",
        queryParameters: [
            apiVersion,
            timeout3
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId4,
            returnClientRequestId4,
            ocpDate4
        ],
        responses: {
            200: {
                bodyMapper: PoolStatistics,
                headersMapper: PoolGetAllLifetimeStatisticsHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$1
    };
    var addOperationSpec = {
        httpMethod: "POST",
        path: "pools",
        queryParameters: [
            apiVersion,
            timeout4
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId5,
            returnClientRequestId5,
            ocpDate5
        ],
        requestBody: {
            parameterPath: "pool",
            mapper: __assign({}, PoolAddParameter, { required: true })
        },
        contentType: "application/json; odata=minimalmetadata; charset=utf-8",
        responses: {
            201: {
                headersMapper: PoolAddHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$1
    };
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "pools",
        queryParameters: [
            apiVersion,
            filter1,
            select0,
            expand0,
            maxResults2,
            timeout5
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId6,
            returnClientRequestId6,
            ocpDate6
        ],
        responses: {
            200: {
                bodyMapper: CloudPoolListResult,
                headersMapper: PoolListHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$1
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "pools/{poolId}",
        urlParameters: [
            poolId
        ],
        queryParameters: [
            apiVersion,
            timeout6
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId7,
            returnClientRequestId7,
            ocpDate7,
            ifMatch0,
            ifNoneMatch0,
            ifModifiedSince0,
            ifUnmodifiedSince0
        ],
        responses: {
            202: {
                headersMapper: PoolDeleteHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$1
    };
    var existsOperationSpec = {
        httpMethod: "HEAD",
        path: "pools/{poolId}",
        urlParameters: [
            poolId
        ],
        queryParameters: [
            apiVersion,
            timeout7
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId8,
            returnClientRequestId8,
            ocpDate8,
            ifMatch1,
            ifNoneMatch1,
            ifModifiedSince1,
            ifUnmodifiedSince1
        ],
        responses: {
            200: {
                headersMapper: PoolExistsHeaders
            },
            404: {
                headersMapper: PoolExistsHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "pools/{poolId}",
        urlParameters: [
            poolId
        ],
        queryParameters: [
            apiVersion,
            select1,
            expand1,
            timeout8
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId9,
            returnClientRequestId9,
            ocpDate9,
            ifMatch2,
            ifNoneMatch2,
            ifModifiedSince2,
            ifUnmodifiedSince2
        ],
        responses: {
            200: {
                bodyMapper: CloudPool,
                headersMapper: PoolGetHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$1
    };
    var patchOperationSpec = {
        httpMethod: "PATCH",
        path: "pools/{poolId}",
        urlParameters: [
            poolId
        ],
        queryParameters: [
            apiVersion,
            timeout9
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId10,
            returnClientRequestId10,
            ocpDate10,
            ifMatch3,
            ifNoneMatch3,
            ifModifiedSince3,
            ifUnmodifiedSince3
        ],
        requestBody: {
            parameterPath: "poolPatchParameter",
            mapper: __assign({}, PoolPatchParameter, { required: true })
        },
        contentType: "application/json; odata=minimalmetadata; charset=utf-8",
        responses: {
            200: {
                headersMapper: PoolPatchHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$1
    };
    var disableAutoScaleOperationSpec = {
        httpMethod: "POST",
        path: "pools/{poolId}/disableautoscale",
        urlParameters: [
            poolId
        ],
        queryParameters: [
            apiVersion,
            timeout10
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId11,
            returnClientRequestId11,
            ocpDate11
        ],
        responses: {
            200: {
                headersMapper: PoolDisableAutoScaleHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$1
    };
    var enableAutoScaleOperationSpec = {
        httpMethod: "POST",
        path: "pools/{poolId}/enableautoscale",
        urlParameters: [
            poolId
        ],
        queryParameters: [
            apiVersion,
            timeout11
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId12,
            returnClientRequestId12,
            ocpDate12,
            ifMatch4,
            ifNoneMatch4,
            ifModifiedSince4,
            ifUnmodifiedSince4
        ],
        requestBody: {
            parameterPath: "poolEnableAutoScaleParameter",
            mapper: __assign({}, PoolEnableAutoScaleParameter, { required: true })
        },
        contentType: "application/json; odata=minimalmetadata; charset=utf-8",
        responses: {
            200: {
                headersMapper: PoolEnableAutoScaleHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$1
    };
    var evaluateAutoScaleOperationSpec = {
        httpMethod: "POST",
        path: "pools/{poolId}/evaluateautoscale",
        urlParameters: [
            poolId
        ],
        queryParameters: [
            apiVersion,
            timeout12
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId13,
            returnClientRequestId13,
            ocpDate13
        ],
        requestBody: {
            parameterPath: {
                autoScaleFormula: "autoScaleFormula"
            },
            mapper: __assign({}, PoolEvaluateAutoScaleParameter, { required: true })
        },
        contentType: "application/json; odata=minimalmetadata; charset=utf-8",
        responses: {
            200: {
                bodyMapper: AutoScaleRun,
                headersMapper: PoolEvaluateAutoScaleHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$1
    };
    var resizeOperationSpec = {
        httpMethod: "POST",
        path: "pools/{poolId}/resize",
        urlParameters: [
            poolId
        ],
        queryParameters: [
            apiVersion,
            timeout13
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId14,
            returnClientRequestId14,
            ocpDate14,
            ifMatch5,
            ifNoneMatch5,
            ifModifiedSince5,
            ifUnmodifiedSince5
        ],
        requestBody: {
            parameterPath: "poolResizeParameter",
            mapper: __assign({}, PoolResizeParameter, { required: true })
        },
        contentType: "application/json; odata=minimalmetadata; charset=utf-8",
        responses: {
            202: {
                headersMapper: PoolResizeHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$1
    };
    var stopResizeOperationSpec = {
        httpMethod: "POST",
        path: "pools/{poolId}/stopresize",
        urlParameters: [
            poolId
        ],
        queryParameters: [
            apiVersion,
            timeout14
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId15,
            returnClientRequestId15,
            ocpDate15,
            ifMatch6,
            ifNoneMatch6,
            ifModifiedSince6,
            ifUnmodifiedSince6
        ],
        responses: {
            202: {
                headersMapper: PoolStopResizeHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$1
    };
    var updatePropertiesOperationSpec = {
        httpMethod: "POST",
        path: "pools/{poolId}/updateproperties",
        urlParameters: [
            poolId
        ],
        queryParameters: [
            apiVersion,
            timeout15
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId16,
            returnClientRequestId16,
            ocpDate16
        ],
        requestBody: {
            parameterPath: "poolUpdatePropertiesParameter",
            mapper: __assign({}, PoolUpdatePropertiesParameter, { required: true })
        },
        contentType: "application/json; odata=minimalmetadata; charset=utf-8",
        responses: {
            204: {
                headersMapper: PoolUpdatePropertiesHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$1
    };
    var upgradeOSOperationSpec = {
        httpMethod: "POST",
        path: "pools/{poolId}/upgradeos",
        urlParameters: [
            poolId
        ],
        queryParameters: [
            apiVersion,
            timeout16
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId17,
            returnClientRequestId17,
            ocpDate17,
            ifMatch7,
            ifNoneMatch7,
            ifModifiedSince7,
            ifUnmodifiedSince7
        ],
        requestBody: {
            parameterPath: {
                targetOSVersion: "targetOSVersion"
            },
            mapper: __assign({}, PoolUpgradeOSParameter, { required: true })
        },
        contentType: "application/json; odata=minimalmetadata; charset=utf-8",
        responses: {
            202: {
                headersMapper: PoolUpgradeOSHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$1
    };
    var removeNodesOperationSpec = {
        httpMethod: "POST",
        path: "pools/{poolId}/removenodes",
        urlParameters: [
            poolId
        ],
        queryParameters: [
            apiVersion,
            timeout17
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId18,
            returnClientRequestId18,
            ocpDate18,
            ifMatch8,
            ifNoneMatch8,
            ifModifiedSince8,
            ifUnmodifiedSince8
        ],
        requestBody: {
            parameterPath: "nodeRemoveParameter",
            mapper: __assign({}, NodeRemoveParameter, { required: true })
        },
        contentType: "application/json; odata=minimalmetadata; charset=utf-8",
        responses: {
            202: {
                headersMapper: PoolRemoveNodesHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$1
    };
    var listUsageMetricsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://batch.core.windows.net",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId19,
            returnClientRequestId19,
            ocpDate19
        ],
        responses: {
            200: {
                bodyMapper: PoolListUsageMetricsResult,
                headersMapper: PoolListUsageMetricsHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://batch.core.windows.net",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId20,
            returnClientRequestId20,
            ocpDate20
        ],
        responses: {
            200: {
                bodyMapper: CloudPoolListResult,
                headersMapper: PoolListHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        AccountListNodeAgentSkusResult: AccountListNodeAgentSkusResult,
        NodeAgentSku: NodeAgentSku,
        ImageReference: ImageReference,
        AccountListNodeAgentSkusHeaders: AccountListNodeAgentSkusHeaders,
        BatchError: BatchError,
        ErrorMessage: ErrorMessage,
        BatchErrorDetail: BatchErrorDetail,
        PoolNodeCountsListResult: PoolNodeCountsListResult,
        PoolNodeCounts: PoolNodeCounts,
        NodeCounts: NodeCounts,
        AccountListPoolNodeCountsHeaders: AccountListPoolNodeCountsHeaders
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Account. */
    var Account = /** @class */ (function () {
        /**
         * Create a Account.
         * @param {BatchServiceClientContext} client Reference to the service client.
         */
        function Account(client) {
            this.client = client;
        }
        Account.prototype.listNodeAgentSkus = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listNodeAgentSkusOperationSpec, callback);
        };
        Account.prototype.listPoolNodeCounts = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listPoolNodeCountsOperationSpec, callback);
        };
        Account.prototype.listNodeAgentSkusNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNodeAgentSkusNextOperationSpec, callback);
        };
        Account.prototype.listPoolNodeCountsNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listPoolNodeCountsNextOperationSpec, callback);
        };
        return Account;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listNodeAgentSkusOperationSpec = {
        httpMethod: "GET",
        path: "nodeagentskus",
        queryParameters: [
            apiVersion,
            filter2,
            maxResults3,
            timeout18
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId21,
            returnClientRequestId21,
            ocpDate21
        ],
        responses: {
            200: {
                bodyMapper: AccountListNodeAgentSkusResult,
                headersMapper: AccountListNodeAgentSkusHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$2
    };
    var listPoolNodeCountsOperationSpec = {
        httpMethod: "GET",
        path: "nodecounts",
        queryParameters: [
            apiVersion,
            filter3,
            maxResults4,
            timeout19
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId22,
            returnClientRequestId22,
            ocpDate22
        ],
        responses: {
            200: {
                bodyMapper: PoolNodeCountsListResult,
                headersMapper: AccountListPoolNodeCountsHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$2
    };
    var listNodeAgentSkusNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://batch.core.windows.net",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId23,
            returnClientRequestId23,
            ocpDate23
        ],
        responses: {
            200: {
                bodyMapper: AccountListNodeAgentSkusResult,
                headersMapper: AccountListNodeAgentSkusHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$2
    };
    var listPoolNodeCountsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://batch.core.windows.net",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId24,
            returnClientRequestId24,
            ocpDate24
        ],
        responses: {
            200: {
                bodyMapper: PoolNodeCountsListResult,
                headersMapper: AccountListPoolNodeCountsHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        JobStatistics: JobStatistics,
        JobGetAllLifetimeStatisticsHeaders: JobGetAllLifetimeStatisticsHeaders,
        BatchError: BatchError,
        ErrorMessage: ErrorMessage,
        BatchErrorDetail: BatchErrorDetail,
        JobDeleteHeaders: JobDeleteHeaders,
        CloudJob: CloudJob,
        JobConstraints: JobConstraints,
        JobManagerTask: JobManagerTask,
        TaskContainerSettings: TaskContainerSettings,
        ContainerRegistry: ContainerRegistry,
        ResourceFile: ResourceFile,
        OutputFile: OutputFile,
        OutputFileDestination: OutputFileDestination,
        OutputFileBlobContainerDestination: OutputFileBlobContainerDestination,
        OutputFileUploadOptions: OutputFileUploadOptions,
        EnvironmentSetting: EnvironmentSetting,
        TaskConstraints: TaskConstraints,
        UserIdentity: UserIdentity,
        AutoUserSpecification: AutoUserSpecification,
        ApplicationPackageReference: ApplicationPackageReference,
        AuthenticationTokenSettings: AuthenticationTokenSettings,
        JobPreparationTask: JobPreparationTask,
        JobReleaseTask: JobReleaseTask,
        PoolInformation: PoolInformation,
        AutoPoolSpecification: AutoPoolSpecification,
        PoolSpecification: PoolSpecification,
        CloudServiceConfiguration: CloudServiceConfiguration,
        VirtualMachineConfiguration: VirtualMachineConfiguration,
        ImageReference: ImageReference,
        OSDisk: OSDisk,
        WindowsConfiguration: WindowsConfiguration,
        DataDisk: DataDisk,
        ContainerConfiguration: ContainerConfiguration,
        TaskSchedulingPolicy: TaskSchedulingPolicy,
        NetworkConfiguration: NetworkConfiguration,
        PoolEndpointConfiguration: PoolEndpointConfiguration,
        InboundNATPool: InboundNATPool,
        NetworkSecurityGroupRule: NetworkSecurityGroupRule,
        StartTask: StartTask,
        CertificateReference: CertificateReference,
        UserAccount: UserAccount,
        LinuxUserConfiguration: LinuxUserConfiguration,
        MetadataItem: MetadataItem,
        JobExecutionInformation: JobExecutionInformation,
        JobSchedulingError: JobSchedulingError,
        NameValuePair: NameValuePair,
        JobGetHeaders: JobGetHeaders,
        JobPatchParameter: JobPatchParameter,
        JobPatchHeaders: JobPatchHeaders,
        JobUpdateParameter: JobUpdateParameter,
        JobUpdateHeaders: JobUpdateHeaders,
        JobDisableParameter: JobDisableParameter,
        JobDisableHeaders: JobDisableHeaders,
        JobEnableHeaders: JobEnableHeaders,
        JobTerminateParameter: JobTerminateParameter,
        JobTerminateHeaders: JobTerminateHeaders,
        JobAddParameter: JobAddParameter,
        JobAddHeaders: JobAddHeaders,
        CloudJobListResult: CloudJobListResult,
        JobListHeaders: JobListHeaders,
        JobListFromJobScheduleHeaders: JobListFromJobScheduleHeaders,
        CloudJobListPreparationAndReleaseTaskStatusResult: CloudJobListPreparationAndReleaseTaskStatusResult,
        JobPreparationAndReleaseTaskExecutionInformation: JobPreparationAndReleaseTaskExecutionInformation,
        JobPreparationTaskExecutionInformation: JobPreparationTaskExecutionInformation,
        TaskContainerExecutionInformation: TaskContainerExecutionInformation,
        TaskFailureInformation: TaskFailureInformation,
        JobReleaseTaskExecutionInformation: JobReleaseTaskExecutionInformation,
        JobListPreparationAndReleaseTaskStatusHeaders: JobListPreparationAndReleaseTaskStatusHeaders,
        TaskCounts: TaskCounts,
        JobGetTaskCountsHeaders: JobGetTaskCountsHeaders
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Job. */
    var Job = /** @class */ (function () {
        /**
         * Create a Job.
         * @param {BatchServiceClientContext} client Reference to the service client.
         */
        function Job(client) {
            this.client = client;
        }
        Job.prototype.getAllLifetimeStatistics = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, getAllLifetimeStatisticsOperationSpec$1, callback);
        };
        Job.prototype.deleteMethod = function (jobId$$1, options, callback) {
            return this.client.sendOperationRequest({
                jobId: jobId$$1,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        Job.prototype.get = function (jobId$$1, options, callback) {
            return this.client.sendOperationRequest({
                jobId: jobId$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        Job.prototype.patch = function (jobId$$1, jobPatchParameter, options, callback) {
            return this.client.sendOperationRequest({
                jobId: jobId$$1,
                jobPatchParameter: jobPatchParameter,
                options: options
            }, patchOperationSpec$1, callback);
        };
        Job.prototype.update = function (jobId$$1, jobUpdateParameter, options, callback) {
            return this.client.sendOperationRequest({
                jobId: jobId$$1,
                jobUpdateParameter: jobUpdateParameter,
                options: options
            }, updateOperationSpec, callback);
        };
        Job.prototype.disable = function (jobId$$1, disableTasks, options, callback) {
            return this.client.sendOperationRequest({
                jobId: jobId$$1,
                disableTasks: disableTasks,
                options: options
            }, disableOperationSpec, callback);
        };
        Job.prototype.enable = function (jobId$$1, options, callback) {
            return this.client.sendOperationRequest({
                jobId: jobId$$1,
                options: options
            }, enableOperationSpec, callback);
        };
        Job.prototype.terminate = function (jobId$$1, options, callback) {
            return this.client.sendOperationRequest({
                jobId: jobId$$1,
                options: options
            }, terminateOperationSpec, callback);
        };
        Job.prototype.add = function (job, options, callback) {
            return this.client.sendOperationRequest({
                job: job,
                options: options
            }, addOperationSpec$1, callback);
        };
        Job.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$2, callback);
        };
        Job.prototype.listFromJobSchedule = function (jobScheduleId$$1, options, callback) {
            return this.client.sendOperationRequest({
                jobScheduleId: jobScheduleId$$1,
                options: options
            }, listFromJobScheduleOperationSpec, callback);
        };
        Job.prototype.listPreparationAndReleaseTaskStatus = function (jobId$$1, options, callback) {
            return this.client.sendOperationRequest({
                jobId: jobId$$1,
                options: options
            }, listPreparationAndReleaseTaskStatusOperationSpec, callback);
        };
        Job.prototype.getTaskCounts = function (jobId$$1, options, callback) {
            return this.client.sendOperationRequest({
                jobId: jobId$$1,
                options: options
            }, getTaskCountsOperationSpec, callback);
        };
        Job.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        Job.prototype.listFromJobScheduleNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listFromJobScheduleNextOperationSpec, callback);
        };
        Job.prototype.listPreparationAndReleaseTaskStatusNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listPreparationAndReleaseTaskStatusNextOperationSpec, callback);
        };
        return Job;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var getAllLifetimeStatisticsOperationSpec$1 = {
        httpMethod: "GET",
        path: "lifetimejobstats",
        queryParameters: [
            apiVersion,
            timeout20
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId25,
            returnClientRequestId25,
            ocpDate25
        ],
        responses: {
            200: {
                bodyMapper: JobStatistics,
                headersMapper: JobGetAllLifetimeStatisticsHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$3
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "jobs/{jobId}",
        urlParameters: [
            jobId
        ],
        queryParameters: [
            apiVersion,
            timeout21
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId26,
            returnClientRequestId26,
            ocpDate26,
            ifMatch9,
            ifNoneMatch9,
            ifModifiedSince9,
            ifUnmodifiedSince9
        ],
        responses: {
            202: {
                headersMapper: JobDeleteHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "jobs/{jobId}",
        urlParameters: [
            jobId
        ],
        queryParameters: [
            apiVersion,
            select2,
            expand2,
            timeout22
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId27,
            returnClientRequestId27,
            ocpDate27,
            ifMatch10,
            ifNoneMatch10,
            ifModifiedSince10,
            ifUnmodifiedSince10
        ],
        responses: {
            200: {
                bodyMapper: CloudJob,
                headersMapper: JobGetHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$3
    };
    var patchOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "jobs/{jobId}",
        urlParameters: [
            jobId
        ],
        queryParameters: [
            apiVersion,
            timeout23
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId28,
            returnClientRequestId28,
            ocpDate28,
            ifMatch11,
            ifNoneMatch11,
            ifModifiedSince11,
            ifUnmodifiedSince11
        ],
        requestBody: {
            parameterPath: "jobPatchParameter",
            mapper: __assign({}, JobPatchParameter, { required: true })
        },
        contentType: "application/json; odata=minimalmetadata; charset=utf-8",
        responses: {
            200: {
                headersMapper: JobPatchHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$3
    };
    var updateOperationSpec = {
        httpMethod: "PUT",
        path: "jobs/{jobId}",
        urlParameters: [
            jobId
        ],
        queryParameters: [
            apiVersion,
            timeout24
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId29,
            returnClientRequestId29,
            ocpDate29,
            ifMatch12,
            ifNoneMatch12,
            ifModifiedSince12,
            ifUnmodifiedSince12
        ],
        requestBody: {
            parameterPath: "jobUpdateParameter",
            mapper: __assign({}, JobUpdateParameter, { required: true })
        },
        contentType: "application/json; odata=minimalmetadata; charset=utf-8",
        responses: {
            200: {
                headersMapper: JobUpdateHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$3
    };
    var disableOperationSpec = {
        httpMethod: "POST",
        path: "jobs/{jobId}/disable",
        urlParameters: [
            jobId
        ],
        queryParameters: [
            apiVersion,
            timeout25
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId30,
            returnClientRequestId30,
            ocpDate30,
            ifMatch13,
            ifNoneMatch13,
            ifModifiedSince13,
            ifUnmodifiedSince13
        ],
        requestBody: {
            parameterPath: {
                disableTasks: "disableTasks"
            },
            mapper: __assign({}, JobDisableParameter, { required: true })
        },
        contentType: "application/json; odata=minimalmetadata; charset=utf-8",
        responses: {
            202: {
                headersMapper: JobDisableHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$3
    };
    var enableOperationSpec = {
        httpMethod: "POST",
        path: "jobs/{jobId}/enable",
        urlParameters: [
            jobId
        ],
        queryParameters: [
            apiVersion,
            timeout26
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId31,
            returnClientRequestId31,
            ocpDate31,
            ifMatch14,
            ifNoneMatch14,
            ifModifiedSince14,
            ifUnmodifiedSince14
        ],
        responses: {
            202: {
                headersMapper: JobEnableHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$3
    };
    var terminateOperationSpec = {
        httpMethod: "POST",
        path: "jobs/{jobId}/terminate",
        urlParameters: [
            jobId
        ],
        queryParameters: [
            apiVersion,
            timeout27
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId32,
            returnClientRequestId32,
            ocpDate32,
            ifMatch15,
            ifNoneMatch15,
            ifModifiedSince15,
            ifUnmodifiedSince15
        ],
        requestBody: {
            parameterPath: {
                terminateReason: [
                    "options",
                    "terminateReason"
                ]
            },
            mapper: JobTerminateParameter
        },
        contentType: "application/json; odata=minimalmetadata; charset=utf-8",
        responses: {
            202: {
                headersMapper: JobTerminateHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$3
    };
    var addOperationSpec$1 = {
        httpMethod: "POST",
        path: "jobs",
        queryParameters: [
            apiVersion,
            timeout28
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId33,
            returnClientRequestId33,
            ocpDate33
        ],
        requestBody: {
            parameterPath: "job",
            mapper: __assign({}, JobAddParameter, { required: true })
        },
        contentType: "application/json; odata=minimalmetadata; charset=utf-8",
        responses: {
            201: {
                headersMapper: JobAddHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$3
    };
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "jobs",
        queryParameters: [
            apiVersion,
            filter4,
            select3,
            expand3,
            maxResults5,
            timeout29
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId34,
            returnClientRequestId34,
            ocpDate34
        ],
        responses: {
            200: {
                bodyMapper: CloudJobListResult,
                headersMapper: JobListHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$3
    };
    var listFromJobScheduleOperationSpec = {
        httpMethod: "GET",
        path: "jobschedules/{jobScheduleId}/jobs",
        urlParameters: [
            jobScheduleId
        ],
        queryParameters: [
            apiVersion,
            filter5,
            select4,
            expand4,
            maxResults6,
            timeout30
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId35,
            returnClientRequestId35,
            ocpDate35
        ],
        responses: {
            200: {
                bodyMapper: CloudJobListResult,
                headersMapper: JobListFromJobScheduleHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$3
    };
    var listPreparationAndReleaseTaskStatusOperationSpec = {
        httpMethod: "GET",
        path: "jobs/{jobId}/jobpreparationandreleasetaskstatus",
        urlParameters: [
            jobId
        ],
        queryParameters: [
            apiVersion,
            filter6,
            select5,
            maxResults7,
            timeout31
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId36,
            returnClientRequestId36,
            ocpDate36
        ],
        responses: {
            200: {
                bodyMapper: CloudJobListPreparationAndReleaseTaskStatusResult,
                headersMapper: JobListPreparationAndReleaseTaskStatusHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$3
    };
    var getTaskCountsOperationSpec = {
        httpMethod: "GET",
        path: "jobs/{jobId}/taskcounts",
        urlParameters: [
            jobId
        ],
        queryParameters: [
            apiVersion,
            timeout32
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId37,
            returnClientRequestId37,
            ocpDate37
        ],
        responses: {
            200: {
                bodyMapper: TaskCounts,
                headersMapper: JobGetTaskCountsHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$3
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://batch.core.windows.net",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId38,
            returnClientRequestId38,
            ocpDate38
        ],
        responses: {
            200: {
                bodyMapper: CloudJobListResult,
                headersMapper: JobListHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$3
    };
    var listFromJobScheduleNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://batch.core.windows.net",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId39,
            returnClientRequestId39,
            ocpDate39
        ],
        responses: {
            200: {
                bodyMapper: CloudJobListResult,
                headersMapper: JobListFromJobScheduleHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$3
    };
    var listPreparationAndReleaseTaskStatusNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://batch.core.windows.net",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId40,
            returnClientRequestId40,
            ocpDate40
        ],
        responses: {
            200: {
                bodyMapper: CloudJobListPreparationAndReleaseTaskStatusResult,
                headersMapper: JobListPreparationAndReleaseTaskStatusHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        CertificateAddParameter: CertificateAddParameter,
        CertificateAddHeaders: CertificateAddHeaders,
        BatchError: BatchError,
        ErrorMessage: ErrorMessage,
        BatchErrorDetail: BatchErrorDetail,
        CertificateListResult: CertificateListResult,
        Certificate: Certificate,
        DeleteCertificateError: DeleteCertificateError,
        NameValuePair: NameValuePair,
        CertificateListHeaders: CertificateListHeaders,
        CertificateCancelDeletionHeaders: CertificateCancelDeletionHeaders,
        CertificateDeleteHeaders: CertificateDeleteHeaders,
        CertificateGetHeaders: CertificateGetHeaders
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a CertificateOperations. */
    var CertificateOperations = /** @class */ (function () {
        /**
         * Create a CertificateOperations.
         * @param {BatchServiceClientContext} client Reference to the service client.
         */
        function CertificateOperations(client) {
            this.client = client;
        }
        CertificateOperations.prototype.add = function (certificate, options, callback) {
            return this.client.sendOperationRequest({
                certificate: certificate,
                options: options
            }, addOperationSpec$2, callback);
        };
        CertificateOperations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$3, callback);
        };
        CertificateOperations.prototype.cancelDeletion = function (thumbprintAlgorithm$$1, thumbprint$$1, options, callback) {
            return this.client.sendOperationRequest({
                thumbprintAlgorithm: thumbprintAlgorithm$$1,
                thumbprint: thumbprint$$1,
                options: options
            }, cancelDeletionOperationSpec, callback);
        };
        CertificateOperations.prototype.deleteMethod = function (thumbprintAlgorithm$$1, thumbprint$$1, options, callback) {
            return this.client.sendOperationRequest({
                thumbprintAlgorithm: thumbprintAlgorithm$$1,
                thumbprint: thumbprint$$1,
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        CertificateOperations.prototype.get = function (thumbprintAlgorithm$$1, thumbprint$$1, options, callback) {
            return this.client.sendOperationRequest({
                thumbprintAlgorithm: thumbprintAlgorithm$$1,
                thumbprint: thumbprint$$1,
                options: options
            }, getOperationSpec$3, callback);
        };
        CertificateOperations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$3, callback);
        };
        return CertificateOperations;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var addOperationSpec$2 = {
        httpMethod: "POST",
        path: "certificates",
        queryParameters: [
            apiVersion,
            timeout33
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId41,
            returnClientRequestId41,
            ocpDate41
        ],
        requestBody: {
            parameterPath: "certificate",
            mapper: __assign({}, CertificateAddParameter, { required: true })
        },
        contentType: "application/json; odata=minimalmetadata; charset=utf-8",
        responses: {
            201: {
                headersMapper: CertificateAddHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$4
    };
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "certificates",
        queryParameters: [
            apiVersion,
            filter7,
            select6,
            maxResults8,
            timeout34
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId42,
            returnClientRequestId42,
            ocpDate42
        ],
        responses: {
            200: {
                bodyMapper: CertificateListResult,
                headersMapper: CertificateListHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$4
    };
    var cancelDeletionOperationSpec = {
        httpMethod: "POST",
        path: "certificates(thumbprintAlgorithm={thumbprintAlgorithm},thumbprint={thumbprint})/canceldelete",
        urlParameters: [
            thumbprintAlgorithm,
            thumbprint
        ],
        queryParameters: [
            apiVersion,
            timeout35
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId43,
            returnClientRequestId43,
            ocpDate43
        ],
        responses: {
            204: {
                headersMapper: CertificateCancelDeletionHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$4
    };
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "certificates(thumbprintAlgorithm={thumbprintAlgorithm},thumbprint={thumbprint})",
        urlParameters: [
            thumbprintAlgorithm,
            thumbprint
        ],
        queryParameters: [
            apiVersion,
            timeout36
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId44,
            returnClientRequestId44,
            ocpDate44
        ],
        responses: {
            202: {
                headersMapper: CertificateDeleteHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$4
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "certificates(thumbprintAlgorithm={thumbprintAlgorithm},thumbprint={thumbprint})",
        urlParameters: [
            thumbprintAlgorithm,
            thumbprint
        ],
        queryParameters: [
            apiVersion,
            select7,
            timeout37
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId45,
            returnClientRequestId45,
            ocpDate45
        ],
        responses: {
            200: {
                bodyMapper: Certificate,
                headersMapper: CertificateGetHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$4
    };
    var listNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://batch.core.windows.net",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId46,
            returnClientRequestId46,
            ocpDate46
        ],
        responses: {
            200: {
                bodyMapper: CertificateListResult,
                headersMapper: CertificateListHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        FileDeleteFromTaskHeaders: FileDeleteFromTaskHeaders,
        BatchError: BatchError,
        ErrorMessage: ErrorMessage,
        BatchErrorDetail: BatchErrorDetail,
        FileGetFromTaskHeaders: FileGetFromTaskHeaders,
        FileGetPropertiesFromTaskHeaders: FileGetPropertiesFromTaskHeaders,
        FileDeleteFromComputeNodeHeaders: FileDeleteFromComputeNodeHeaders,
        FileGetFromComputeNodeHeaders: FileGetFromComputeNodeHeaders,
        FileGetPropertiesFromComputeNodeHeaders: FileGetPropertiesFromComputeNodeHeaders,
        NodeFileListResult: NodeFileListResult,
        NodeFile: NodeFile,
        FileProperties: FileProperties,
        FileListFromTaskHeaders: FileListFromTaskHeaders,
        FileListFromComputeNodeHeaders: FileListFromComputeNodeHeaders
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a File. */
    var File = /** @class */ (function () {
        /**
         * Create a File.
         * @param {BatchServiceClientContext} client Reference to the service client.
         */
        function File(client) {
            this.client = client;
        }
        File.prototype.deleteFromTask = function (jobId$$1, taskId$$1, filePath$$1, options, callback) {
            return this.client.sendOperationRequest({
                jobId: jobId$$1,
                taskId: taskId$$1,
                filePath: filePath$$1,
                options: options
            }, deleteFromTaskOperationSpec, callback);
        };
        File.prototype.getFromTask = function (jobId$$1, taskId$$1, filePath$$1, options, callback) {
            return this.client.sendOperationRequest({
                jobId: jobId$$1,
                taskId: taskId$$1,
                filePath: filePath$$1,
                options: options
            }, getFromTaskOperationSpec, callback);
        };
        File.prototype.getPropertiesFromTask = function (jobId$$1, taskId$$1, filePath$$1, options, callback) {
            return this.client.sendOperationRequest({
                jobId: jobId$$1,
                taskId: taskId$$1,
                filePath: filePath$$1,
                options: options
            }, getPropertiesFromTaskOperationSpec, callback);
        };
        File.prototype.deleteFromComputeNode = function (poolId$$1, nodeId$$1, filePath$$1, options, callback) {
            return this.client.sendOperationRequest({
                poolId: poolId$$1,
                nodeId: nodeId$$1,
                filePath: filePath$$1,
                options: options
            }, deleteFromComputeNodeOperationSpec, callback);
        };
        File.prototype.getFromComputeNode = function (poolId$$1, nodeId$$1, filePath$$1, options, callback) {
            return this.client.sendOperationRequest({
                poolId: poolId$$1,
                nodeId: nodeId$$1,
                filePath: filePath$$1,
                options: options
            }, getFromComputeNodeOperationSpec, callback);
        };
        File.prototype.getPropertiesFromComputeNode = function (poolId$$1, nodeId$$1, filePath$$1, options, callback) {
            return this.client.sendOperationRequest({
                poolId: poolId$$1,
                nodeId: nodeId$$1,
                filePath: filePath$$1,
                options: options
            }, getPropertiesFromComputeNodeOperationSpec, callback);
        };
        File.prototype.listFromTask = function (jobId$$1, taskId$$1, options, callback) {
            return this.client.sendOperationRequest({
                jobId: jobId$$1,
                taskId: taskId$$1,
                options: options
            }, listFromTaskOperationSpec, callback);
        };
        File.prototype.listFromComputeNode = function (poolId$$1, nodeId$$1, options, callback) {
            return this.client.sendOperationRequest({
                poolId: poolId$$1,
                nodeId: nodeId$$1,
                options: options
            }, listFromComputeNodeOperationSpec, callback);
        };
        File.prototype.listFromTaskNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listFromTaskNextOperationSpec, callback);
        };
        File.prototype.listFromComputeNodeNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listFromComputeNodeNextOperationSpec, callback);
        };
        return File;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var deleteFromTaskOperationSpec = {
        httpMethod: "DELETE",
        path: "jobs/{jobId}/tasks/{taskId}/files/{filePath}",
        urlParameters: [
            jobId,
            taskId,
            filePath
        ],
        queryParameters: [
            recursive,
            apiVersion,
            timeout38
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId47,
            returnClientRequestId47,
            ocpDate47
        ],
        responses: {
            200: {
                headersMapper: FileDeleteFromTaskHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$5
    };
    var getFromTaskOperationSpec = {
        httpMethod: "GET",
        path: "jobs/{jobId}/tasks/{taskId}/files/{filePath}",
        urlParameters: [
            jobId,
            taskId,
            filePath
        ],
        queryParameters: [
            apiVersion,
            timeout39
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId48,
            returnClientRequestId48,
            ocpDate48,
            ocpRange0,
            ifModifiedSince16,
            ifUnmodifiedSince16
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Stream"
                    }
                },
                headersMapper: FileGetFromTaskHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$5
    };
    var getPropertiesFromTaskOperationSpec = {
        httpMethod: "HEAD",
        path: "jobs/{jobId}/tasks/{taskId}/files/{filePath}",
        urlParameters: [
            jobId,
            taskId,
            filePath
        ],
        queryParameters: [
            apiVersion,
            timeout40
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId49,
            returnClientRequestId49,
            ocpDate49,
            ifModifiedSince17,
            ifUnmodifiedSince17
        ],
        responses: {
            200: {
                headersMapper: FileGetPropertiesFromTaskHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$5
    };
    var deleteFromComputeNodeOperationSpec = {
        httpMethod: "DELETE",
        path: "pools/{poolId}/nodes/{nodeId}/files/{filePath}",
        urlParameters: [
            poolId,
            nodeId,
            filePath
        ],
        queryParameters: [
            recursive,
            apiVersion,
            timeout41
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId50,
            returnClientRequestId50,
            ocpDate50
        ],
        responses: {
            200: {
                headersMapper: FileDeleteFromComputeNodeHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$5
    };
    var getFromComputeNodeOperationSpec = {
        httpMethod: "GET",
        path: "pools/{poolId}/nodes/{nodeId}/files/{filePath}",
        urlParameters: [
            poolId,
            nodeId,
            filePath
        ],
        queryParameters: [
            apiVersion,
            timeout42
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId51,
            returnClientRequestId51,
            ocpDate51,
            ocpRange1,
            ifModifiedSince18,
            ifUnmodifiedSince18
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Stream"
                    }
                },
                headersMapper: FileGetFromComputeNodeHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$5
    };
    var getPropertiesFromComputeNodeOperationSpec = {
        httpMethod: "HEAD",
        path: "pools/{poolId}/nodes/{nodeId}/files/{filePath}",
        urlParameters: [
            poolId,
            nodeId,
            filePath
        ],
        queryParameters: [
            apiVersion,
            timeout43
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId52,
            returnClientRequestId52,
            ocpDate52,
            ifModifiedSince19,
            ifUnmodifiedSince19
        ],
        responses: {
            200: {
                headersMapper: FileGetPropertiesFromComputeNodeHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$5
    };
    var listFromTaskOperationSpec = {
        httpMethod: "GET",
        path: "jobs/{jobId}/tasks/{taskId}/files",
        urlParameters: [
            jobId,
            taskId
        ],
        queryParameters: [
            recursive,
            apiVersion,
            filter8,
            maxResults9,
            timeout44
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId53,
            returnClientRequestId53,
            ocpDate53
        ],
        responses: {
            200: {
                bodyMapper: NodeFileListResult,
                headersMapper: FileListFromTaskHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$5
    };
    var listFromComputeNodeOperationSpec = {
        httpMethod: "GET",
        path: "pools/{poolId}/nodes/{nodeId}/files",
        urlParameters: [
            poolId,
            nodeId
        ],
        queryParameters: [
            recursive,
            apiVersion,
            filter9,
            maxResults10,
            timeout45
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId54,
            returnClientRequestId54,
            ocpDate54
        ],
        responses: {
            200: {
                bodyMapper: NodeFileListResult,
                headersMapper: FileListFromComputeNodeHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$5
    };
    var listFromTaskNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://batch.core.windows.net",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId55,
            returnClientRequestId55,
            ocpDate55
        ],
        responses: {
            200: {
                bodyMapper: NodeFileListResult,
                headersMapper: FileListFromTaskHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$5
    };
    var listFromComputeNodeNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://batch.core.windows.net",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId56,
            returnClientRequestId56,
            ocpDate56
        ],
        responses: {
            200: {
                bodyMapper: NodeFileListResult,
                headersMapper: FileListFromComputeNodeHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        JobScheduleExistsHeaders: JobScheduleExistsHeaders,
        BatchError: BatchError,
        ErrorMessage: ErrorMessage,
        BatchErrorDetail: BatchErrorDetail,
        JobScheduleDeleteHeaders: JobScheduleDeleteHeaders,
        CloudJobSchedule: CloudJobSchedule,
        Schedule: Schedule,
        JobSpecification: JobSpecification,
        JobConstraints: JobConstraints,
        JobManagerTask: JobManagerTask,
        TaskContainerSettings: TaskContainerSettings,
        ContainerRegistry: ContainerRegistry,
        ResourceFile: ResourceFile,
        OutputFile: OutputFile,
        OutputFileDestination: OutputFileDestination,
        OutputFileBlobContainerDestination: OutputFileBlobContainerDestination,
        OutputFileUploadOptions: OutputFileUploadOptions,
        EnvironmentSetting: EnvironmentSetting,
        TaskConstraints: TaskConstraints,
        UserIdentity: UserIdentity,
        AutoUserSpecification: AutoUserSpecification,
        ApplicationPackageReference: ApplicationPackageReference,
        AuthenticationTokenSettings: AuthenticationTokenSettings,
        JobPreparationTask: JobPreparationTask,
        JobReleaseTask: JobReleaseTask,
        PoolInformation: PoolInformation,
        AutoPoolSpecification: AutoPoolSpecification,
        PoolSpecification: PoolSpecification,
        CloudServiceConfiguration: CloudServiceConfiguration,
        VirtualMachineConfiguration: VirtualMachineConfiguration,
        ImageReference: ImageReference,
        OSDisk: OSDisk,
        WindowsConfiguration: WindowsConfiguration,
        DataDisk: DataDisk,
        ContainerConfiguration: ContainerConfiguration,
        TaskSchedulingPolicy: TaskSchedulingPolicy,
        NetworkConfiguration: NetworkConfiguration,
        PoolEndpointConfiguration: PoolEndpointConfiguration,
        InboundNATPool: InboundNATPool,
        NetworkSecurityGroupRule: NetworkSecurityGroupRule,
        StartTask: StartTask,
        CertificateReference: CertificateReference,
        UserAccount: UserAccount,
        LinuxUserConfiguration: LinuxUserConfiguration,
        MetadataItem: MetadataItem,
        JobScheduleExecutionInformation: JobScheduleExecutionInformation,
        RecentJob: RecentJob,
        JobScheduleStatistics: JobScheduleStatistics,
        JobScheduleGetHeaders: JobScheduleGetHeaders,
        JobSchedulePatchParameter: JobSchedulePatchParameter,
        JobSchedulePatchHeaders: JobSchedulePatchHeaders,
        JobScheduleUpdateParameter: JobScheduleUpdateParameter,
        JobScheduleUpdateHeaders: JobScheduleUpdateHeaders,
        JobScheduleDisableHeaders: JobScheduleDisableHeaders,
        JobScheduleEnableHeaders: JobScheduleEnableHeaders,
        JobScheduleTerminateHeaders: JobScheduleTerminateHeaders,
        JobScheduleAddParameter: JobScheduleAddParameter,
        JobScheduleAddHeaders: JobScheduleAddHeaders,
        CloudJobScheduleListResult: CloudJobScheduleListResult,
        JobScheduleListHeaders: JobScheduleListHeaders
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a JobSchedule. */
    var JobSchedule = /** @class */ (function () {
        /**
         * Create a JobSchedule.
         * @param {BatchServiceClientContext} client Reference to the service client.
         */
        function JobSchedule(client) {
            this.client = client;
        }
        JobSchedule.prototype.exists = function (jobScheduleId$$1, options, callback) {
            return this.client.sendOperationRequest({
                jobScheduleId: jobScheduleId$$1,
                options: options
            }, existsOperationSpec$1, callback);
        };
        JobSchedule.prototype.deleteMethod = function (jobScheduleId$$1, options, callback) {
            return this.client.sendOperationRequest({
                jobScheduleId: jobScheduleId$$1,
                options: options
            }, deleteMethodOperationSpec$3, callback);
        };
        JobSchedule.prototype.get = function (jobScheduleId$$1, options, callback) {
            return this.client.sendOperationRequest({
                jobScheduleId: jobScheduleId$$1,
                options: options
            }, getOperationSpec$4, callback);
        };
        JobSchedule.prototype.patch = function (jobScheduleId$$1, jobSchedulePatchParameter, options, callback) {
            return this.client.sendOperationRequest({
                jobScheduleId: jobScheduleId$$1,
                jobSchedulePatchParameter: jobSchedulePatchParameter,
                options: options
            }, patchOperationSpec$2, callback);
        };
        JobSchedule.prototype.update = function (jobScheduleId$$1, jobScheduleUpdateParameter, options, callback) {
            return this.client.sendOperationRequest({
                jobScheduleId: jobScheduleId$$1,
                jobScheduleUpdateParameter: jobScheduleUpdateParameter,
                options: options
            }, updateOperationSpec$1, callback);
        };
        JobSchedule.prototype.disable = function (jobScheduleId$$1, options, callback) {
            return this.client.sendOperationRequest({
                jobScheduleId: jobScheduleId$$1,
                options: options
            }, disableOperationSpec$1, callback);
        };
        JobSchedule.prototype.enable = function (jobScheduleId$$1, options, callback) {
            return this.client.sendOperationRequest({
                jobScheduleId: jobScheduleId$$1,
                options: options
            }, enableOperationSpec$1, callback);
        };
        JobSchedule.prototype.terminate = function (jobScheduleId$$1, options, callback) {
            return this.client.sendOperationRequest({
                jobScheduleId: jobScheduleId$$1,
                options: options
            }, terminateOperationSpec$1, callback);
        };
        JobSchedule.prototype.add = function (cloudJobSchedule, options, callback) {
            return this.client.sendOperationRequest({
                cloudJobSchedule: cloudJobSchedule,
                options: options
            }, addOperationSpec$3, callback);
        };
        JobSchedule.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$4, callback);
        };
        JobSchedule.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$4, callback);
        };
        return JobSchedule;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var existsOperationSpec$1 = {
        httpMethod: "HEAD",
        path: "jobschedules/{jobScheduleId}",
        urlParameters: [
            jobScheduleId
        ],
        queryParameters: [
            apiVersion,
            timeout46
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId57,
            returnClientRequestId57,
            ocpDate57,
            ifMatch16,
            ifNoneMatch16,
            ifModifiedSince20,
            ifUnmodifiedSince20
        ],
        responses: {
            200: {
                headersMapper: JobScheduleExistsHeaders
            },
            404: {
                headersMapper: JobScheduleExistsHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$6
    };
    var deleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "jobschedules/{jobScheduleId}",
        urlParameters: [
            jobScheduleId
        ],
        queryParameters: [
            apiVersion,
            timeout47
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId58,
            returnClientRequestId58,
            ocpDate58,
            ifMatch17,
            ifNoneMatch17,
            ifModifiedSince21,
            ifUnmodifiedSince21
        ],
        responses: {
            202: {
                headersMapper: JobScheduleDeleteHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$6
    };
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "jobschedules/{jobScheduleId}",
        urlParameters: [
            jobScheduleId
        ],
        queryParameters: [
            apiVersion,
            select8,
            expand5,
            timeout48
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId59,
            returnClientRequestId59,
            ocpDate59,
            ifMatch18,
            ifNoneMatch18,
            ifModifiedSince22,
            ifUnmodifiedSince22
        ],
        responses: {
            200: {
                bodyMapper: CloudJobSchedule,
                headersMapper: JobScheduleGetHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$6
    };
    var patchOperationSpec$2 = {
        httpMethod: "PATCH",
        path: "jobschedules/{jobScheduleId}",
        urlParameters: [
            jobScheduleId
        ],
        queryParameters: [
            apiVersion,
            timeout49
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId60,
            returnClientRequestId60,
            ocpDate60,
            ifMatch19,
            ifNoneMatch19,
            ifModifiedSince23,
            ifUnmodifiedSince23
        ],
        requestBody: {
            parameterPath: "jobSchedulePatchParameter",
            mapper: __assign({}, JobSchedulePatchParameter, { required: true })
        },
        contentType: "application/json; odata=minimalmetadata; charset=utf-8",
        responses: {
            200: {
                headersMapper: JobSchedulePatchHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$6
    };
    var updateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "jobschedules/{jobScheduleId}",
        urlParameters: [
            jobScheduleId
        ],
        queryParameters: [
            apiVersion,
            timeout50
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId61,
            returnClientRequestId61,
            ocpDate61,
            ifMatch20,
            ifNoneMatch20,
            ifModifiedSince24,
            ifUnmodifiedSince24
        ],
        requestBody: {
            parameterPath: "jobScheduleUpdateParameter",
            mapper: __assign({}, JobScheduleUpdateParameter, { required: true })
        },
        contentType: "application/json; odata=minimalmetadata; charset=utf-8",
        responses: {
            200: {
                headersMapper: JobScheduleUpdateHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$6
    };
    var disableOperationSpec$1 = {
        httpMethod: "POST",
        path: "jobschedules/{jobScheduleId}/disable",
        urlParameters: [
            jobScheduleId
        ],
        queryParameters: [
            apiVersion,
            timeout51
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId62,
            returnClientRequestId62,
            ocpDate62,
            ifMatch21,
            ifNoneMatch21,
            ifModifiedSince25,
            ifUnmodifiedSince25
        ],
        responses: {
            204: {
                headersMapper: JobScheduleDisableHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$6
    };
    var enableOperationSpec$1 = {
        httpMethod: "POST",
        path: "jobschedules/{jobScheduleId}/enable",
        urlParameters: [
            jobScheduleId
        ],
        queryParameters: [
            apiVersion,
            timeout52
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId63,
            returnClientRequestId63,
            ocpDate63,
            ifMatch22,
            ifNoneMatch22,
            ifModifiedSince26,
            ifUnmodifiedSince26
        ],
        responses: {
            204: {
                headersMapper: JobScheduleEnableHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$6
    };
    var terminateOperationSpec$1 = {
        httpMethod: "POST",
        path: "jobschedules/{jobScheduleId}/terminate",
        urlParameters: [
            jobScheduleId
        ],
        queryParameters: [
            apiVersion,
            timeout53
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId64,
            returnClientRequestId64,
            ocpDate64,
            ifMatch23,
            ifNoneMatch23,
            ifModifiedSince27,
            ifUnmodifiedSince27
        ],
        responses: {
            202: {
                headersMapper: JobScheduleTerminateHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$6
    };
    var addOperationSpec$3 = {
        httpMethod: "POST",
        path: "jobschedules",
        queryParameters: [
            apiVersion,
            timeout54
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId65,
            returnClientRequestId65,
            ocpDate65
        ],
        requestBody: {
            parameterPath: "cloudJobSchedule",
            mapper: __assign({}, JobScheduleAddParameter, { required: true })
        },
        contentType: "application/json; odata=minimalmetadata; charset=utf-8",
        responses: {
            201: {
                headersMapper: JobScheduleAddHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$6
    };
    var listOperationSpec$4 = {
        httpMethod: "GET",
        path: "jobschedules",
        queryParameters: [
            apiVersion,
            filter10,
            select9,
            expand6,
            maxResults11,
            timeout55
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId66,
            returnClientRequestId66,
            ocpDate66
        ],
        responses: {
            200: {
                bodyMapper: CloudJobScheduleListResult,
                headersMapper: JobScheduleListHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$6
    };
    var listNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://batch.core.windows.net",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId67,
            returnClientRequestId67,
            ocpDate67
        ],
        responses: {
            200: {
                bodyMapper: CloudJobScheduleListResult,
                headersMapper: JobScheduleListHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        TaskAddParameter: TaskAddParameter,
        TaskContainerSettings: TaskContainerSettings,
        ContainerRegistry: ContainerRegistry,
        ExitConditions: ExitConditions,
        ExitCodeMapping: ExitCodeMapping,
        ExitOptions: ExitOptions,
        ExitCodeRangeMapping: ExitCodeRangeMapping,
        ResourceFile: ResourceFile,
        OutputFile: OutputFile,
        OutputFileDestination: OutputFileDestination,
        OutputFileBlobContainerDestination: OutputFileBlobContainerDestination,
        OutputFileUploadOptions: OutputFileUploadOptions,
        EnvironmentSetting: EnvironmentSetting,
        AffinityInformation: AffinityInformation,
        TaskConstraints: TaskConstraints,
        UserIdentity: UserIdentity,
        AutoUserSpecification: AutoUserSpecification,
        MultiInstanceSettings: MultiInstanceSettings,
        TaskDependencies: TaskDependencies,
        TaskIdRange: TaskIdRange,
        ApplicationPackageReference: ApplicationPackageReference,
        AuthenticationTokenSettings: AuthenticationTokenSettings,
        TaskAddHeaders: TaskAddHeaders,
        BatchError: BatchError,
        ErrorMessage: ErrorMessage,
        BatchErrorDetail: BatchErrorDetail,
        CloudTaskListResult: CloudTaskListResult,
        CloudTask: CloudTask,
        TaskExecutionInformation: TaskExecutionInformation,
        TaskContainerExecutionInformation: TaskContainerExecutionInformation,
        TaskFailureInformation: TaskFailureInformation,
        NameValuePair: NameValuePair,
        ComputeNodeInformation: ComputeNodeInformation,
        TaskStatistics: TaskStatistics,
        TaskListHeaders: TaskListHeaders,
        TaskAddCollectionParameter: TaskAddCollectionParameter,
        TaskAddCollectionResult: TaskAddCollectionResult,
        TaskAddResult: TaskAddResult,
        TaskAddCollectionHeaders: TaskAddCollectionHeaders,
        TaskDeleteHeaders: TaskDeleteHeaders,
        TaskGetHeaders: TaskGetHeaders,
        TaskUpdateParameter: TaskUpdateParameter,
        TaskUpdateHeaders: TaskUpdateHeaders,
        CloudTaskListSubtasksResult: CloudTaskListSubtasksResult,
        SubtaskInformation: SubtaskInformation,
        TaskListSubtasksHeaders: TaskListSubtasksHeaders,
        TaskTerminateHeaders: TaskTerminateHeaders,
        TaskReactivateHeaders: TaskReactivateHeaders
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Task. */
    var Task = /** @class */ (function () {
        /**
         * Create a Task.
         * @param {BatchServiceClientContext} client Reference to the service client.
         */
        function Task(client) {
            this.client = client;
        }
        Task.prototype.add = function (jobId$$1, task, options, callback) {
            return this.client.sendOperationRequest({
                jobId: jobId$$1,
                task: task,
                options: options
            }, addOperationSpec$4, callback);
        };
        Task.prototype.list = function (jobId$$1, options, callback) {
            return this.client.sendOperationRequest({
                jobId: jobId$$1,
                options: options
            }, listOperationSpec$5, callback);
        };
        Task.prototype.addCollection = function (jobId$$1, value, options, callback) {
            return this.client.sendOperationRequest({
                jobId: jobId$$1,
                value: value,
                options: options
            }, addCollectionOperationSpec, callback);
        };
        Task.prototype.deleteMethod = function (jobId$$1, taskId$$1, options, callback) {
            return this.client.sendOperationRequest({
                jobId: jobId$$1,
                taskId: taskId$$1,
                options: options
            }, deleteMethodOperationSpec$4, callback);
        };
        Task.prototype.get = function (jobId$$1, taskId$$1, options, callback) {
            return this.client.sendOperationRequest({
                jobId: jobId$$1,
                taskId: taskId$$1,
                options: options
            }, getOperationSpec$5, callback);
        };
        Task.prototype.update = function (jobId$$1, taskId$$1, options, callback) {
            return this.client.sendOperationRequest({
                jobId: jobId$$1,
                taskId: taskId$$1,
                options: options
            }, updateOperationSpec$2, callback);
        };
        Task.prototype.listSubtasks = function (jobId$$1, taskId$$1, options, callback) {
            return this.client.sendOperationRequest({
                jobId: jobId$$1,
                taskId: taskId$$1,
                options: options
            }, listSubtasksOperationSpec, callback);
        };
        Task.prototype.terminate = function (jobId$$1, taskId$$1, options, callback) {
            return this.client.sendOperationRequest({
                jobId: jobId$$1,
                taskId: taskId$$1,
                options: options
            }, terminateOperationSpec$2, callback);
        };
        Task.prototype.reactivate = function (jobId$$1, taskId$$1, options, callback) {
            return this.client.sendOperationRequest({
                jobId: jobId$$1,
                taskId: taskId$$1,
                options: options
            }, reactivateOperationSpec, callback);
        };
        Task.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$5, callback);
        };
        return Task;
    }());
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers$7);
    var addOperationSpec$4 = {
        httpMethod: "POST",
        path: "jobs/{jobId}/tasks",
        urlParameters: [
            jobId
        ],
        queryParameters: [
            apiVersion,
            timeout56
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId68,
            returnClientRequestId68,
            ocpDate68
        ],
        requestBody: {
            parameterPath: "task",
            mapper: __assign({}, TaskAddParameter, { required: true })
        },
        contentType: "application/json; odata=minimalmetadata; charset=utf-8",
        responses: {
            201: {
                headersMapper: TaskAddHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$7
    };
    var listOperationSpec$5 = {
        httpMethod: "GET",
        path: "jobs/{jobId}/tasks",
        urlParameters: [
            jobId
        ],
        queryParameters: [
            apiVersion,
            filter11,
            select10,
            expand7,
            maxResults12,
            timeout57
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId69,
            returnClientRequestId69,
            ocpDate69
        ],
        responses: {
            200: {
                bodyMapper: CloudTaskListResult,
                headersMapper: TaskListHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$7
    };
    var addCollectionOperationSpec = {
        httpMethod: "POST",
        path: "jobs/{jobId}/addtaskcollection",
        urlParameters: [
            jobId
        ],
        queryParameters: [
            apiVersion,
            timeout58
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId70,
            returnClientRequestId70,
            ocpDate70
        ],
        requestBody: {
            parameterPath: {
                value: "value"
            },
            mapper: __assign({}, TaskAddCollectionParameter, { required: true })
        },
        contentType: "application/json; odata=minimalmetadata; charset=utf-8",
        responses: {
            200: {
                bodyMapper: TaskAddCollectionResult,
                headersMapper: TaskAddCollectionHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$7
    };
    var deleteMethodOperationSpec$4 = {
        httpMethod: "DELETE",
        path: "jobs/{jobId}/tasks/{taskId}",
        urlParameters: [
            jobId,
            taskId
        ],
        queryParameters: [
            apiVersion,
            timeout59
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId71,
            returnClientRequestId71,
            ocpDate71,
            ifMatch24,
            ifNoneMatch24,
            ifModifiedSince28,
            ifUnmodifiedSince28
        ],
        responses: {
            200: {
                headersMapper: TaskDeleteHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$7
    };
    var getOperationSpec$5 = {
        httpMethod: "GET",
        path: "jobs/{jobId}/tasks/{taskId}",
        urlParameters: [
            jobId,
            taskId
        ],
        queryParameters: [
            apiVersion,
            select11,
            expand8,
            timeout60
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId72,
            returnClientRequestId72,
            ocpDate72,
            ifMatch25,
            ifNoneMatch25,
            ifModifiedSince29,
            ifUnmodifiedSince29
        ],
        responses: {
            200: {
                bodyMapper: CloudTask,
                headersMapper: TaskGetHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$7
    };
    var updateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "jobs/{jobId}/tasks/{taskId}",
        urlParameters: [
            jobId,
            taskId
        ],
        queryParameters: [
            apiVersion,
            timeout61
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId73,
            returnClientRequestId73,
            ocpDate73,
            ifMatch26,
            ifNoneMatch26,
            ifModifiedSince30,
            ifUnmodifiedSince30
        ],
        requestBody: {
            parameterPath: {
                constraints: [
                    "options",
                    "constraints"
                ]
            },
            mapper: __assign({}, TaskUpdateParameter, { required: true })
        },
        contentType: "application/json; odata=minimalmetadata; charset=utf-8",
        responses: {
            200: {
                headersMapper: TaskUpdateHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$7
    };
    var listSubtasksOperationSpec = {
        httpMethod: "GET",
        path: "jobs/{jobId}/tasks/{taskId}/subtasksinfo",
        urlParameters: [
            jobId,
            taskId
        ],
        queryParameters: [
            apiVersion,
            select12,
            timeout62
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId74,
            returnClientRequestId74,
            ocpDate74
        ],
        responses: {
            200: {
                bodyMapper: CloudTaskListSubtasksResult,
                headersMapper: TaskListSubtasksHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$7
    };
    var terminateOperationSpec$2 = {
        httpMethod: "POST",
        path: "jobs/{jobId}/tasks/{taskId}/terminate",
        urlParameters: [
            jobId,
            taskId
        ],
        queryParameters: [
            apiVersion,
            timeout63
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId75,
            returnClientRequestId75,
            ocpDate75,
            ifMatch27,
            ifNoneMatch27,
            ifModifiedSince31,
            ifUnmodifiedSince31
        ],
        responses: {
            204: {
                headersMapper: TaskTerminateHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$7
    };
    var reactivateOperationSpec = {
        httpMethod: "POST",
        path: "jobs/{jobId}/tasks/{taskId}/reactivate",
        urlParameters: [
            jobId,
            taskId
        ],
        queryParameters: [
            apiVersion,
            timeout64
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId76,
            returnClientRequestId76,
            ocpDate76,
            ifMatch28,
            ifNoneMatch28,
            ifModifiedSince32,
            ifUnmodifiedSince32
        ],
        responses: {
            204: {
                headersMapper: TaskReactivateHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$7
    };
    var listNextOperationSpec$5 = {
        httpMethod: "GET",
        baseUrl: "https://batch.core.windows.net",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId77,
            returnClientRequestId77,
            ocpDate77
        ],
        responses: {
            200: {
                bodyMapper: CloudTaskListResult,
                headersMapper: TaskListHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$7
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$8 = /*#__PURE__*/Object.freeze({
        ComputeNodeUser: ComputeNodeUser,
        ComputeNodeAddUserHeaders: ComputeNodeAddUserHeaders,
        BatchError: BatchError,
        ErrorMessage: ErrorMessage,
        BatchErrorDetail: BatchErrorDetail,
        ComputeNodeDeleteUserHeaders: ComputeNodeDeleteUserHeaders,
        NodeUpdateUserParameter: NodeUpdateUserParameter,
        ComputeNodeUpdateUserHeaders: ComputeNodeUpdateUserHeaders,
        ComputeNode: ComputeNode,
        TaskInformation: TaskInformation,
        TaskExecutionInformation: TaskExecutionInformation,
        TaskContainerExecutionInformation: TaskContainerExecutionInformation,
        TaskFailureInformation: TaskFailureInformation,
        NameValuePair: NameValuePair,
        StartTask: StartTask,
        TaskContainerSettings: TaskContainerSettings,
        ContainerRegistry: ContainerRegistry,
        ResourceFile: ResourceFile,
        EnvironmentSetting: EnvironmentSetting,
        UserIdentity: UserIdentity,
        AutoUserSpecification: AutoUserSpecification,
        StartTaskInformation: StartTaskInformation,
        CertificateReference: CertificateReference,
        ComputeNodeError: ComputeNodeError,
        ComputeNodeEndpointConfiguration: ComputeNodeEndpointConfiguration,
        InboundEndpoint: InboundEndpoint,
        NodeAgentInformation: NodeAgentInformation,
        ComputeNodeGetHeaders: ComputeNodeGetHeaders,
        NodeRebootParameter: NodeRebootParameter,
        ComputeNodeRebootHeaders: ComputeNodeRebootHeaders,
        NodeReimageParameter: NodeReimageParameter,
        ComputeNodeReimageHeaders: ComputeNodeReimageHeaders,
        NodeDisableSchedulingParameter: NodeDisableSchedulingParameter,
        ComputeNodeDisableSchedulingHeaders: ComputeNodeDisableSchedulingHeaders,
        ComputeNodeEnableSchedulingHeaders: ComputeNodeEnableSchedulingHeaders,
        ComputeNodeGetRemoteLoginSettingsResult: ComputeNodeGetRemoteLoginSettingsResult,
        ComputeNodeGetRemoteLoginSettingsHeaders: ComputeNodeGetRemoteLoginSettingsHeaders,
        ComputeNodeGetRemoteDesktopHeaders: ComputeNodeGetRemoteDesktopHeaders,
        UploadBatchServiceLogsConfiguration: UploadBatchServiceLogsConfiguration,
        UploadBatchServiceLogsResult: UploadBatchServiceLogsResult,
        ComputeNodeUploadBatchServiceLogsHeaders: ComputeNodeUploadBatchServiceLogsHeaders,
        ComputeNodeListResult: ComputeNodeListResult,
        ComputeNodeListHeaders: ComputeNodeListHeaders
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ComputeNodeOperations. */
    var ComputeNodeOperations = /** @class */ (function () {
        /**
         * Create a ComputeNodeOperations.
         * @param {BatchServiceClientContext} client Reference to the service client.
         */
        function ComputeNodeOperations(client) {
            this.client = client;
        }
        ComputeNodeOperations.prototype.addUser = function (poolId$$1, nodeId$$1, user, options, callback) {
            return this.client.sendOperationRequest({
                poolId: poolId$$1,
                nodeId: nodeId$$1,
                user: user,
                options: options
            }, addUserOperationSpec, callback);
        };
        ComputeNodeOperations.prototype.deleteUser = function (poolId$$1, nodeId$$1, userName$$1, options, callback) {
            return this.client.sendOperationRequest({
                poolId: poolId$$1,
                nodeId: nodeId$$1,
                userName: userName$$1,
                options: options
            }, deleteUserOperationSpec, callback);
        };
        ComputeNodeOperations.prototype.updateUser = function (poolId$$1, nodeId$$1, userName$$1, nodeUpdateUserParameter, options, callback) {
            return this.client.sendOperationRequest({
                poolId: poolId$$1,
                nodeId: nodeId$$1,
                userName: userName$$1,
                nodeUpdateUserParameter: nodeUpdateUserParameter,
                options: options
            }, updateUserOperationSpec, callback);
        };
        ComputeNodeOperations.prototype.get = function (poolId$$1, nodeId$$1, options, callback) {
            return this.client.sendOperationRequest({
                poolId: poolId$$1,
                nodeId: nodeId$$1,
                options: options
            }, getOperationSpec$6, callback);
        };
        ComputeNodeOperations.prototype.reboot = function (poolId$$1, nodeId$$1, options, callback) {
            return this.client.sendOperationRequest({
                poolId: poolId$$1,
                nodeId: nodeId$$1,
                options: options
            }, rebootOperationSpec, callback);
        };
        ComputeNodeOperations.prototype.reimage = function (poolId$$1, nodeId$$1, options, callback) {
            return this.client.sendOperationRequest({
                poolId: poolId$$1,
                nodeId: nodeId$$1,
                options: options
            }, reimageOperationSpec, callback);
        };
        ComputeNodeOperations.prototype.disableScheduling = function (poolId$$1, nodeId$$1, options, callback) {
            return this.client.sendOperationRequest({
                poolId: poolId$$1,
                nodeId: nodeId$$1,
                options: options
            }, disableSchedulingOperationSpec, callback);
        };
        ComputeNodeOperations.prototype.enableScheduling = function (poolId$$1, nodeId$$1, options, callback) {
            return this.client.sendOperationRequest({
                poolId: poolId$$1,
                nodeId: nodeId$$1,
                options: options
            }, enableSchedulingOperationSpec, callback);
        };
        ComputeNodeOperations.prototype.getRemoteLoginSettings = function (poolId$$1, nodeId$$1, options, callback) {
            return this.client.sendOperationRequest({
                poolId: poolId$$1,
                nodeId: nodeId$$1,
                options: options
            }, getRemoteLoginSettingsOperationSpec, callback);
        };
        ComputeNodeOperations.prototype.getRemoteDesktop = function (poolId$$1, nodeId$$1, options, callback) {
            return this.client.sendOperationRequest({
                poolId: poolId$$1,
                nodeId: nodeId$$1,
                options: options
            }, getRemoteDesktopOperationSpec, callback);
        };
        ComputeNodeOperations.prototype.uploadBatchServiceLogs = function (poolId$$1, nodeId$$1, uploadBatchServiceLogsConfiguration, options, callback) {
            return this.client.sendOperationRequest({
                poolId: poolId$$1,
                nodeId: nodeId$$1,
                uploadBatchServiceLogsConfiguration: uploadBatchServiceLogsConfiguration,
                options: options
            }, uploadBatchServiceLogsOperationSpec, callback);
        };
        ComputeNodeOperations.prototype.list = function (poolId$$1, options, callback) {
            return this.client.sendOperationRequest({
                poolId: poolId$$1,
                options: options
            }, listOperationSpec$6, callback);
        };
        ComputeNodeOperations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$6, callback);
        };
        return ComputeNodeOperations;
    }());
    // Operation Specifications
    var serializer$8 = new msRest.Serializer(Mappers$8);
    var addUserOperationSpec = {
        httpMethod: "POST",
        path: "pools/{poolId}/nodes/{nodeId}/users",
        urlParameters: [
            poolId,
            nodeId
        ],
        queryParameters: [
            apiVersion,
            timeout65
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId78,
            returnClientRequestId78,
            ocpDate78
        ],
        requestBody: {
            parameterPath: "user",
            mapper: __assign({}, ComputeNodeUser, { required: true })
        },
        contentType: "application/json; odata=minimalmetadata; charset=utf-8",
        responses: {
            201: {
                headersMapper: ComputeNodeAddUserHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$8
    };
    var deleteUserOperationSpec = {
        httpMethod: "DELETE",
        path: "pools/{poolId}/nodes/{nodeId}/users/{userName}",
        urlParameters: [
            poolId,
            nodeId,
            userName
        ],
        queryParameters: [
            apiVersion,
            timeout66
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId79,
            returnClientRequestId79,
            ocpDate79
        ],
        responses: {
            200: {
                headersMapper: ComputeNodeDeleteUserHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$8
    };
    var updateUserOperationSpec = {
        httpMethod: "PUT",
        path: "pools/{poolId}/nodes/{nodeId}/users/{userName}",
        urlParameters: [
            poolId,
            nodeId,
            userName
        ],
        queryParameters: [
            apiVersion,
            timeout67
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId80,
            returnClientRequestId80,
            ocpDate80
        ],
        requestBody: {
            parameterPath: "nodeUpdateUserParameter",
            mapper: __assign({}, NodeUpdateUserParameter, { required: true })
        },
        contentType: "application/json; odata=minimalmetadata; charset=utf-8",
        responses: {
            200: {
                headersMapper: ComputeNodeUpdateUserHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$8
    };
    var getOperationSpec$6 = {
        httpMethod: "GET",
        path: "pools/{poolId}/nodes/{nodeId}",
        urlParameters: [
            poolId,
            nodeId
        ],
        queryParameters: [
            apiVersion,
            select13,
            timeout68
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId81,
            returnClientRequestId81,
            ocpDate81
        ],
        responses: {
            200: {
                bodyMapper: ComputeNode,
                headersMapper: ComputeNodeGetHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$8
    };
    var rebootOperationSpec = {
        httpMethod: "POST",
        path: "pools/{poolId}/nodes/{nodeId}/reboot",
        urlParameters: [
            poolId,
            nodeId
        ],
        queryParameters: [
            apiVersion,
            timeout69
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId82,
            returnClientRequestId82,
            ocpDate82
        ],
        requestBody: {
            parameterPath: {
                nodeRebootOption: [
                    "options",
                    "nodeRebootOption"
                ]
            },
            mapper: NodeRebootParameter
        },
        contentType: "application/json; odata=minimalmetadata; charset=utf-8",
        responses: {
            202: {
                headersMapper: ComputeNodeRebootHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$8
    };
    var reimageOperationSpec = {
        httpMethod: "POST",
        path: "pools/{poolId}/nodes/{nodeId}/reimage",
        urlParameters: [
            poolId,
            nodeId
        ],
        queryParameters: [
            apiVersion,
            timeout70
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId83,
            returnClientRequestId83,
            ocpDate83
        ],
        requestBody: {
            parameterPath: {
                nodeReimageOption: [
                    "options",
                    "nodeReimageOption"
                ]
            },
            mapper: NodeReimageParameter
        },
        contentType: "application/json; odata=minimalmetadata; charset=utf-8",
        responses: {
            202: {
                headersMapper: ComputeNodeReimageHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$8
    };
    var disableSchedulingOperationSpec = {
        httpMethod: "POST",
        path: "pools/{poolId}/nodes/{nodeId}/disablescheduling",
        urlParameters: [
            poolId,
            nodeId
        ],
        queryParameters: [
            apiVersion,
            timeout71
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId84,
            returnClientRequestId84,
            ocpDate84
        ],
        requestBody: {
            parameterPath: {
                nodeDisableSchedulingOption: [
                    "options",
                    "nodeDisableSchedulingOption"
                ]
            },
            mapper: NodeDisableSchedulingParameter
        },
        contentType: "application/json; odata=minimalmetadata; charset=utf-8",
        responses: {
            200: {
                headersMapper: ComputeNodeDisableSchedulingHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$8
    };
    var enableSchedulingOperationSpec = {
        httpMethod: "POST",
        path: "pools/{poolId}/nodes/{nodeId}/enablescheduling",
        urlParameters: [
            poolId,
            nodeId
        ],
        queryParameters: [
            apiVersion,
            timeout72
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId85,
            returnClientRequestId85,
            ocpDate85
        ],
        responses: {
            200: {
                headersMapper: ComputeNodeEnableSchedulingHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$8
    };
    var getRemoteLoginSettingsOperationSpec = {
        httpMethod: "GET",
        path: "pools/{poolId}/nodes/{nodeId}/remoteloginsettings",
        urlParameters: [
            poolId,
            nodeId
        ],
        queryParameters: [
            apiVersion,
            timeout73
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId86,
            returnClientRequestId86,
            ocpDate86
        ],
        responses: {
            200: {
                bodyMapper: ComputeNodeGetRemoteLoginSettingsResult,
                headersMapper: ComputeNodeGetRemoteLoginSettingsHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$8
    };
    var getRemoteDesktopOperationSpec = {
        httpMethod: "GET",
        path: "pools/{poolId}/nodes/{nodeId}/rdp",
        urlParameters: [
            poolId,
            nodeId
        ],
        queryParameters: [
            apiVersion,
            timeout74
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId87,
            returnClientRequestId87,
            ocpDate87
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Stream"
                    }
                },
                headersMapper: ComputeNodeGetRemoteDesktopHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$8
    };
    var uploadBatchServiceLogsOperationSpec = {
        httpMethod: "POST",
        path: "pools/{poolId}/nodes/{nodeId}/uploadbatchservicelogs",
        urlParameters: [
            poolId,
            nodeId
        ],
        queryParameters: [
            apiVersion,
            timeout75
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId88,
            returnClientRequestId88,
            ocpDate88
        ],
        requestBody: {
            parameterPath: "uploadBatchServiceLogsConfiguration",
            mapper: __assign({}, UploadBatchServiceLogsConfiguration, { required: true })
        },
        contentType: "application/json; odata=minimalmetadata; charset=utf-8",
        responses: {
            200: {
                bodyMapper: UploadBatchServiceLogsResult,
                headersMapper: ComputeNodeUploadBatchServiceLogsHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$8
    };
    var listOperationSpec$6 = {
        httpMethod: "GET",
        path: "pools/{poolId}/nodes",
        urlParameters: [
            poolId
        ],
        queryParameters: [
            apiVersion,
            filter12,
            select14,
            maxResults13,
            timeout76
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId89,
            returnClientRequestId89,
            ocpDate89
        ],
        responses: {
            200: {
                bodyMapper: ComputeNodeListResult,
                headersMapper: ComputeNodeListHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$8
    };
    var listNextOperationSpec$6 = {
        httpMethod: "GET",
        baseUrl: "https://batch.core.windows.net",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId90,
            returnClientRequestId90,
            ocpDate90
        ],
        responses: {
            200: {
                bodyMapper: ComputeNodeListResult,
                headersMapper: ComputeNodeListHeaders
            },
            default: {
                bodyMapper: BatchError
            }
        },
        serializer: serializer$8
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/batch";
    var packageVersion = "1.0.0";
    var BatchServiceClientContext = /** @class */ (function (_super) {
        __extends(BatchServiceClientContext, _super);
        /**
         * Initializes a new instance of the BatchServiceClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param [options] The parameter options
         */
        function BatchServiceClientContext(credentials, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2018-08-01.7.0';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://batch.core.windows.net";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return BatchServiceClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var BatchServiceClient = /** @class */ (function (_super) {
        __extends(BatchServiceClient, _super);
        /**
         * Initializes a new instance of the BatchServiceClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param [options] The parameter options
         */
        function BatchServiceClient(credentials, options) {
            var _this = _super.call(this, credentials, options) || this;
            _this.application = new Application(_this);
            _this.pool = new Pool(_this);
            _this.account = new Account(_this);
            _this.job = new Job(_this);
            _this.certificate = new CertificateOperations(_this);
            _this.file = new File(_this);
            _this.jobSchedule = new JobSchedule(_this);
            _this.task = new Task(_this);
            _this.computeNode = new ComputeNodeOperations(_this);
            return _this;
        }
        return BatchServiceClient;
    }(BatchServiceClientContext));

    exports.BatchServiceClient = BatchServiceClient;
    exports.BatchServiceClientContext = BatchServiceClientContext;
    exports.BatchServiceModels = index;
    exports.BatchServiceMappers = mappers;
    exports.Application = Application;
    exports.Pool = Pool;
    exports.Account = Account;
    exports.Job = Job;
    exports.CertificateOperations = CertificateOperations;
    exports.File = File;
    exports.JobSchedule = JobSchedule;
    exports.Task = Task;
    exports.ComputeNodeOperations = ComputeNodeOperations;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=batch.js.map
