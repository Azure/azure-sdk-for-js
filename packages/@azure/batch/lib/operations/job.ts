/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/jobMappers";
import * as Parameters from "../models/parameters";
import { BatchServiceClientContext } from "../batchServiceClientContext";

/** Class representing a Job. */
export class Job {
  private readonly client: BatchServiceClientContext;

  /**
   * Create a Job.
   * @param {BatchServiceClientContext} client Reference to the service client.
   */
  constructor(client: BatchServiceClientContext) {
    this.client = client;
  }

  /**
   * Statistics are aggregated across all jobs that have ever existed in the account, from account
   * creation to the last update time of the statistics. The statistics may not be immediately
   * available. The Batch service performs periodic roll-up of statistics. The typical delay is about
   * 30 minutes.
   * @summary Gets lifetime summary statistics for all of the jobs in the specified account.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobGetAllLifetimeStatisticsResponse>
   */
  getAllLifetimeStatistics(options?: Models.JobGetAllLifetimeStatisticsOptionalParams): Promise<Models.JobGetAllLifetimeStatisticsResponse>;
  /**
   * @param callback The callback
   */
  getAllLifetimeStatistics(callback: msRest.ServiceCallback<Models.JobStatistics>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllLifetimeStatistics(options: Models.JobGetAllLifetimeStatisticsOptionalParams, callback: msRest.ServiceCallback<Models.JobStatistics>): void;
  getAllLifetimeStatistics(options?: Models.JobGetAllLifetimeStatisticsOptionalParams, callback?: msRest.ServiceCallback<Models.JobStatistics>): Promise<Models.JobGetAllLifetimeStatisticsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getAllLifetimeStatisticsOperationSpec,
      callback) as Promise<Models.JobGetAllLifetimeStatisticsResponse>;
  }

  /**
   * Deleting a job also deletes all tasks that are part of that job, and all job statistics. This
   * also overrides the retention period for task data; that is, if the job contains tasks which are
   * still retained on compute nodes, the Batch services deletes those tasks' working directories and
   * all their contents.  When a Delete Job request is received, the Batch service sets the job to
   * the deleting state. All update operations on a job that is in deleting state will fail with
   * status code 409 (Conflict), with additional information indicating that the job is being
   * deleted.
   * @summary Deletes a job.
   * @param jobId The ID of the job to delete.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobDeleteResponse>
   */
  deleteMethod(jobId: string, options?: Models.JobDeleteMethodOptionalParams): Promise<Models.JobDeleteResponse>;
  /**
   * @param jobId The ID of the job to delete.
   * @param callback The callback
   */
  deleteMethod(jobId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param jobId The ID of the job to delete.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(jobId: string, options: Models.JobDeleteMethodOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(jobId: string, options?: Models.JobDeleteMethodOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<Models.JobDeleteResponse> {
    return this.client.sendOperationRequest(
      {
        jobId,
        options
      },
      deleteMethodOperationSpec,
      callback) as Promise<Models.JobDeleteResponse>;
  }

  /**
   * @summary Gets information about the specified job.
   * @param jobId The ID of the job.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobGetResponse>
   */
  get(jobId: string, options?: Models.JobGetOptionalParams): Promise<Models.JobGetResponse>;
  /**
   * @param jobId The ID of the job.
   * @param callback The callback
   */
  get(jobId: string, callback: msRest.ServiceCallback<Models.CloudJob>): void;
  /**
   * @param jobId The ID of the job.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(jobId: string, options: Models.JobGetOptionalParams, callback: msRest.ServiceCallback<Models.CloudJob>): void;
  get(jobId: string, options?: Models.JobGetOptionalParams, callback?: msRest.ServiceCallback<Models.CloudJob>): Promise<Models.JobGetResponse> {
    return this.client.sendOperationRequest(
      {
        jobId,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.JobGetResponse>;
  }

  /**
   * This replaces only the job properties specified in the request. For example, if the job has
   * constraints, and a request does not specify the constraints element, then the job keeps the
   * existing constraints.
   * @summary Updates the properties of the specified job.
   * @param jobId The ID of the job whose properties you want to update.
   * @param jobPatchParameter The parameters for the request.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobPatchResponse>
   */
  patch(jobId: string, jobPatchParameter: Models.JobPatchParameter, options?: Models.JobPatchOptionalParams): Promise<Models.JobPatchResponse>;
  /**
   * @param jobId The ID of the job whose properties you want to update.
   * @param jobPatchParameter The parameters for the request.
   * @param callback The callback
   */
  patch(jobId: string, jobPatchParameter: Models.JobPatchParameter, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param jobId The ID of the job whose properties you want to update.
   * @param jobPatchParameter The parameters for the request.
   * @param options The optional parameters
   * @param callback The callback
   */
  patch(jobId: string, jobPatchParameter: Models.JobPatchParameter, options: Models.JobPatchOptionalParams, callback: msRest.ServiceCallback<void>): void;
  patch(jobId: string, jobPatchParameter: Models.JobPatchParameter, options?: Models.JobPatchOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<Models.JobPatchResponse> {
    return this.client.sendOperationRequest(
      {
        jobId,
        jobPatchParameter,
        options
      },
      patchOperationSpec,
      callback) as Promise<Models.JobPatchResponse>;
  }

  /**
   * This fully replaces all the updateable properties of the job. For example, if the job has
   * constraints associated with it and if constraints is not specified with this request, then the
   * Batch service will remove the existing constraints.
   * @summary Updates the properties of the specified job.
   * @param jobId The ID of the job whose properties you want to update.
   * @param jobUpdateParameter The parameters for the request.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobUpdateResponse>
   */
  update(jobId: string, jobUpdateParameter: Models.JobUpdateParameter, options?: Models.JobUpdateOptionalParams): Promise<Models.JobUpdateResponse>;
  /**
   * @param jobId The ID of the job whose properties you want to update.
   * @param jobUpdateParameter The parameters for the request.
   * @param callback The callback
   */
  update(jobId: string, jobUpdateParameter: Models.JobUpdateParameter, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param jobId The ID of the job whose properties you want to update.
   * @param jobUpdateParameter The parameters for the request.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(jobId: string, jobUpdateParameter: Models.JobUpdateParameter, options: Models.JobUpdateOptionalParams, callback: msRest.ServiceCallback<void>): void;
  update(jobId: string, jobUpdateParameter: Models.JobUpdateParameter, options?: Models.JobUpdateOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<Models.JobUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        jobId,
        jobUpdateParameter,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.JobUpdateResponse>;
  }

  /**
   * The Batch Service immediately moves the job to the disabling state. Batch then uses the
   * disableTasks parameter to determine what to do with the currently running tasks of the job. The
   * job remains in the disabling state until the disable operation is completed and all tasks have
   * been dealt with according to the disableTasks option; the job then moves to the disabled state.
   * No new tasks are started under the job until it moves back to active state. If you try to
   * disable a job that is in any state other than active, disabling, or disabled, the request fails
   * with status code 409.
   * @summary Disables the specified job, preventing new tasks from running.
   * @param jobId The ID of the job to disable.
   * @param disableTasks What to do with active tasks associated with the job. Possible values
   * include: 'requeue', 'terminate', 'wait'
   * @param [options] The optional parameters
   * @returns Promise<Models.JobDisableResponse>
   */
  disable(jobId: string, disableTasks: Models.DisableJobOption, options?: Models.JobDisableOptionalParams): Promise<Models.JobDisableResponse>;
  /**
   * @param jobId The ID of the job to disable.
   * @param disableTasks What to do with active tasks associated with the job. Possible values
   * include: 'requeue', 'terminate', 'wait'
   * @param callback The callback
   */
  disable(jobId: string, disableTasks: Models.DisableJobOption, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param jobId The ID of the job to disable.
   * @param disableTasks What to do with active tasks associated with the job. Possible values
   * include: 'requeue', 'terminate', 'wait'
   * @param options The optional parameters
   * @param callback The callback
   */
  disable(jobId: string, disableTasks: Models.DisableJobOption, options: Models.JobDisableOptionalParams, callback: msRest.ServiceCallback<void>): void;
  disable(jobId: string, disableTasks: Models.DisableJobOption, options?: Models.JobDisableOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<Models.JobDisableResponse> {
    return this.client.sendOperationRequest(
      {
        jobId,
        disableTasks,
        options
      },
      disableOperationSpec,
      callback) as Promise<Models.JobDisableResponse>;
  }

  /**
   * When you call this API, the Batch service sets a disabled job to the enabling state. After the
   * this operation is completed, the job moves to the active state, and scheduling of new tasks
   * under the job resumes. The Batch service does not allow a task to remain in the active state for
   * more than 7 days. Therefore, if you enable a job containing active tasks which were added more
   * than 7 days ago, those tasks will not run.
   * @summary Enables the specified job, allowing new tasks to run.
   * @param jobId The ID of the job to enable.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobEnableResponse>
   */
  enable(jobId: string, options?: Models.JobEnableOptionalParams): Promise<Models.JobEnableResponse>;
  /**
   * @param jobId The ID of the job to enable.
   * @param callback The callback
   */
  enable(jobId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param jobId The ID of the job to enable.
   * @param options The optional parameters
   * @param callback The callback
   */
  enable(jobId: string, options: Models.JobEnableOptionalParams, callback: msRest.ServiceCallback<void>): void;
  enable(jobId: string, options?: Models.JobEnableOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<Models.JobEnableResponse> {
    return this.client.sendOperationRequest(
      {
        jobId,
        options
      },
      enableOperationSpec,
      callback) as Promise<Models.JobEnableResponse>;
  }

  /**
   * When a Terminate Job request is received, the Batch service sets the job to the terminating
   * state. The Batch service then terminates any running tasks associated with the job and runs any
   * required job release tasks. Then the job moves into the completed state. If there are any tasks
   * in the job in the active state, they will remain in the active state. Once a job is terminated,
   * new tasks cannot be added and any remaining active tasks will not be scheduled.
   * @summary Terminates the specified job, marking it as completed.
   * @param jobId The ID of the job to terminate.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobTerminateResponse>
   */
  terminate(jobId: string, options?: Models.JobTerminateOptionalParams): Promise<Models.JobTerminateResponse>;
  /**
   * @param jobId The ID of the job to terminate.
   * @param callback The callback
   */
  terminate(jobId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param jobId The ID of the job to terminate.
   * @param options The optional parameters
   * @param callback The callback
   */
  terminate(jobId: string, options: Models.JobTerminateOptionalParams, callback: msRest.ServiceCallback<void>): void;
  terminate(jobId: string, options?: Models.JobTerminateOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<Models.JobTerminateResponse> {
    return this.client.sendOperationRequest(
      {
        jobId,
        options
      },
      terminateOperationSpec,
      callback) as Promise<Models.JobTerminateResponse>;
  }

  /**
   * The Batch service supports two ways to control the work done as part of a job. In the first
   * approach, the user specifies a Job Manager task. The Batch service launches this task when it is
   * ready to start the job. The Job Manager task controls all other tasks that run under this job,
   * by using the Task APIs. In the second approach, the user directly controls the execution of
   * tasks under an active job, by using the Task APIs. Also note: when naming jobs, avoid including
   * sensitive information such as user names or secret project names. This information may appear in
   * telemetry logs accessible to Microsoft Support engineers.
   * @summary Adds a job to the specified account.
   * @param job The job to be added.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobAddResponse>
   */
  add(job: Models.JobAddParameter, options?: Models.JobAddOptionalParams): Promise<Models.JobAddResponse>;
  /**
   * @param job The job to be added.
   * @param callback The callback
   */
  add(job: Models.JobAddParameter, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param job The job to be added.
   * @param options The optional parameters
   * @param callback The callback
   */
  add(job: Models.JobAddParameter, options: Models.JobAddOptionalParams, callback: msRest.ServiceCallback<void>): void;
  add(job: Models.JobAddParameter, options?: Models.JobAddOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<Models.JobAddResponse> {
    return this.client.sendOperationRequest(
      {
        job,
        options
      },
      addOperationSpec,
      callback) as Promise<Models.JobAddResponse>;
  }

  /**
   * @summary Lists all of the jobs in the specified account.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobListResponse>
   */
  list(options?: Models.JobListOptionalParams): Promise<Models.JobListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.CloudJobListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: Models.JobListOptionalParams, callback: msRest.ServiceCallback<Models.CloudJobListResult>): void;
  list(options?: Models.JobListOptionalParams, callback?: msRest.ServiceCallback<Models.CloudJobListResult>): Promise<Models.JobListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.JobListResponse>;
  }

  /**
   * @summary Lists the jobs that have been created under the specified job schedule.
   * @param jobScheduleId The ID of the job schedule from which you want to get a list of jobs.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobListFromJobScheduleResponse>
   */
  listFromJobSchedule(jobScheduleId: string, options?: Models.JobListFromJobScheduleOptionalParams): Promise<Models.JobListFromJobScheduleResponse>;
  /**
   * @param jobScheduleId The ID of the job schedule from which you want to get a list of jobs.
   * @param callback The callback
   */
  listFromJobSchedule(jobScheduleId: string, callback: msRest.ServiceCallback<Models.CloudJobListResult>): void;
  /**
   * @param jobScheduleId The ID of the job schedule from which you want to get a list of jobs.
   * @param options The optional parameters
   * @param callback The callback
   */
  listFromJobSchedule(jobScheduleId: string, options: Models.JobListFromJobScheduleOptionalParams, callback: msRest.ServiceCallback<Models.CloudJobListResult>): void;
  listFromJobSchedule(jobScheduleId: string, options?: Models.JobListFromJobScheduleOptionalParams, callback?: msRest.ServiceCallback<Models.CloudJobListResult>): Promise<Models.JobListFromJobScheduleResponse> {
    return this.client.sendOperationRequest(
      {
        jobScheduleId,
        options
      },
      listFromJobScheduleOperationSpec,
      callback) as Promise<Models.JobListFromJobScheduleResponse>;
  }

  /**
   * This API returns the Job Preparation and Job Release task status on all compute nodes that have
   * run the Job Preparation or Job Release task. This includes nodes which have since been removed
   * from the pool. If this API is invoked on a job which has no Job Preparation or Job Release task,
   * the Batch service returns HTTP status code 409 (Conflict) with an error code of
   * JobPreparationTaskNotSpecified.
   * @summary Lists the execution status of the Job Preparation and Job Release task for the
   * specified job across the compute nodes where the job has run.
   * @param jobId The ID of the job.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobListPreparationAndReleaseTaskStatusResponse>
   */
  listPreparationAndReleaseTaskStatus(jobId: string, options?: Models.JobListPreparationAndReleaseTaskStatusOptionalParams): Promise<Models.JobListPreparationAndReleaseTaskStatusResponse>;
  /**
   * @param jobId The ID of the job.
   * @param callback The callback
   */
  listPreparationAndReleaseTaskStatus(jobId: string, callback: msRest.ServiceCallback<Models.CloudJobListPreparationAndReleaseTaskStatusResult>): void;
  /**
   * @param jobId The ID of the job.
   * @param options The optional parameters
   * @param callback The callback
   */
  listPreparationAndReleaseTaskStatus(jobId: string, options: Models.JobListPreparationAndReleaseTaskStatusOptionalParams, callback: msRest.ServiceCallback<Models.CloudJobListPreparationAndReleaseTaskStatusResult>): void;
  listPreparationAndReleaseTaskStatus(jobId: string, options?: Models.JobListPreparationAndReleaseTaskStatusOptionalParams, callback?: msRest.ServiceCallback<Models.CloudJobListPreparationAndReleaseTaskStatusResult>): Promise<Models.JobListPreparationAndReleaseTaskStatusResponse> {
    return this.client.sendOperationRequest(
      {
        jobId,
        options
      },
      listPreparationAndReleaseTaskStatusOperationSpec,
      callback) as Promise<Models.JobListPreparationAndReleaseTaskStatusResponse>;
  }

  /**
   * Task counts provide a count of the tasks by active, running or completed task state, and a count
   * of tasks which succeeded or failed. Tasks in the preparing state are counted as running.
   * @summary Gets the task counts for the specified job.
   * @param jobId The ID of the job.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobGetTaskCountsResponse>
   */
  getTaskCounts(jobId: string, options?: Models.JobGetTaskCountsOptionalParams): Promise<Models.JobGetTaskCountsResponse>;
  /**
   * @param jobId The ID of the job.
   * @param callback The callback
   */
  getTaskCounts(jobId: string, callback: msRest.ServiceCallback<Models.TaskCounts>): void;
  /**
   * @param jobId The ID of the job.
   * @param options The optional parameters
   * @param callback The callback
   */
  getTaskCounts(jobId: string, options: Models.JobGetTaskCountsOptionalParams, callback: msRest.ServiceCallback<Models.TaskCounts>): void;
  getTaskCounts(jobId: string, options?: Models.JobGetTaskCountsOptionalParams, callback?: msRest.ServiceCallback<Models.TaskCounts>): Promise<Models.JobGetTaskCountsResponse> {
    return this.client.sendOperationRequest(
      {
        jobId,
        options
      },
      getTaskCountsOperationSpec,
      callback) as Promise<Models.JobGetTaskCountsResponse>;
  }

  /**
   * @summary Lists all of the jobs in the specified account.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobListResponse>
   */
  listNext(nextPageLink: string, options?: Models.JobListNextOptionalParams): Promise<Models.JobListResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CloudJobListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: Models.JobListNextOptionalParams, callback: msRest.ServiceCallback<Models.CloudJobListResult>): void;
  listNext(nextPageLink: string, options?: Models.JobListNextOptionalParams, callback?: msRest.ServiceCallback<Models.CloudJobListResult>): Promise<Models.JobListResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.JobListResponse>;
  }

  /**
   * @summary Lists the jobs that have been created under the specified job schedule.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobListFromJobScheduleResponse>
   */
  listFromJobScheduleNext(nextPageLink: string, options?: Models.JobListFromJobScheduleNextOptionalParams): Promise<Models.JobListFromJobScheduleResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listFromJobScheduleNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CloudJobListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listFromJobScheduleNext(nextPageLink: string, options: Models.JobListFromJobScheduleNextOptionalParams, callback: msRest.ServiceCallback<Models.CloudJobListResult>): void;
  listFromJobScheduleNext(nextPageLink: string, options?: Models.JobListFromJobScheduleNextOptionalParams, callback?: msRest.ServiceCallback<Models.CloudJobListResult>): Promise<Models.JobListFromJobScheduleResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listFromJobScheduleNextOperationSpec,
      callback) as Promise<Models.JobListFromJobScheduleResponse>;
  }

  /**
   * This API returns the Job Preparation and Job Release task status on all compute nodes that have
   * run the Job Preparation or Job Release task. This includes nodes which have since been removed
   * from the pool. If this API is invoked on a job which has no Job Preparation or Job Release task,
   * the Batch service returns HTTP status code 409 (Conflict) with an error code of
   * JobPreparationTaskNotSpecified.
   * @summary Lists the execution status of the Job Preparation and Job Release task for the
   * specified job across the compute nodes where the job has run.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobListPreparationAndReleaseTaskStatusResponse>
   */
  listPreparationAndReleaseTaskStatusNext(nextPageLink: string, options?: Models.JobListPreparationAndReleaseTaskStatusNextOptionalParams): Promise<Models.JobListPreparationAndReleaseTaskStatusResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listPreparationAndReleaseTaskStatusNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CloudJobListPreparationAndReleaseTaskStatusResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listPreparationAndReleaseTaskStatusNext(nextPageLink: string, options: Models.JobListPreparationAndReleaseTaskStatusNextOptionalParams, callback: msRest.ServiceCallback<Models.CloudJobListPreparationAndReleaseTaskStatusResult>): void;
  listPreparationAndReleaseTaskStatusNext(nextPageLink: string, options?: Models.JobListPreparationAndReleaseTaskStatusNextOptionalParams, callback?: msRest.ServiceCallback<Models.CloudJobListPreparationAndReleaseTaskStatusResult>): Promise<Models.JobListPreparationAndReleaseTaskStatusResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listPreparationAndReleaseTaskStatusNextOperationSpec,
      callback) as Promise<Models.JobListPreparationAndReleaseTaskStatusResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getAllLifetimeStatisticsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "lifetimejobstats",
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout20
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId25,
    Parameters.returnClientRequestId25,
    Parameters.ocpDate25
  ],
  responses: {
    200: {
      bodyMapper: Mappers.JobStatistics,
      headersMapper: Mappers.JobGetAllLifetimeStatisticsHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "jobs/{jobId}",
  urlParameters: [
    Parameters.jobId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout21
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId26,
    Parameters.returnClientRequestId26,
    Parameters.ocpDate26,
    Parameters.ifMatch9,
    Parameters.ifNoneMatch9,
    Parameters.ifModifiedSince9,
    Parameters.ifUnmodifiedSince9
  ],
  responses: {
    202: {
      headersMapper: Mappers.JobDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "jobs/{jobId}",
  urlParameters: [
    Parameters.jobId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.select2,
    Parameters.expand2,
    Parameters.timeout22
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId27,
    Parameters.returnClientRequestId27,
    Parameters.ocpDate27,
    Parameters.ifMatch10,
    Parameters.ifNoneMatch10,
    Parameters.ifModifiedSince10,
    Parameters.ifUnmodifiedSince10
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CloudJob,
      headersMapper: Mappers.JobGetHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const patchOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "jobs/{jobId}",
  urlParameters: [
    Parameters.jobId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout23
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId28,
    Parameters.returnClientRequestId28,
    Parameters.ocpDate28,
    Parameters.ifMatch11,
    Parameters.ifNoneMatch11,
    Parameters.ifModifiedSince11,
    Parameters.ifUnmodifiedSince11
  ],
  requestBody: {
    parameterPath: "jobPatchParameter",
    mapper: {
      ...Mappers.JobPatchParameter,
      required: true
    }
  },
  contentType: "application/json; odata=minimalmetadata; charset=utf-8",
  responses: {
    200: {
      headersMapper: Mappers.JobPatchHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "jobs/{jobId}",
  urlParameters: [
    Parameters.jobId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout24
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId29,
    Parameters.returnClientRequestId29,
    Parameters.ocpDate29,
    Parameters.ifMatch12,
    Parameters.ifNoneMatch12,
    Parameters.ifModifiedSince12,
    Parameters.ifUnmodifiedSince12
  ],
  requestBody: {
    parameterPath: "jobUpdateParameter",
    mapper: {
      ...Mappers.JobUpdateParameter,
      required: true
    }
  },
  contentType: "application/json; odata=minimalmetadata; charset=utf-8",
  responses: {
    200: {
      headersMapper: Mappers.JobUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const disableOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "jobs/{jobId}/disable",
  urlParameters: [
    Parameters.jobId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout25
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId30,
    Parameters.returnClientRequestId30,
    Parameters.ocpDate30,
    Parameters.ifMatch13,
    Parameters.ifNoneMatch13,
    Parameters.ifModifiedSince13,
    Parameters.ifUnmodifiedSince13
  ],
  requestBody: {
    parameterPath: {
      disableTasks: "disableTasks"
    },
    mapper: {
      ...Mappers.JobDisableParameter,
      required: true
    }
  },
  contentType: "application/json; odata=minimalmetadata; charset=utf-8",
  responses: {
    202: {
      headersMapper: Mappers.JobDisableHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const enableOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "jobs/{jobId}/enable",
  urlParameters: [
    Parameters.jobId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout26
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId31,
    Parameters.returnClientRequestId31,
    Parameters.ocpDate31,
    Parameters.ifMatch14,
    Parameters.ifNoneMatch14,
    Parameters.ifModifiedSince14,
    Parameters.ifUnmodifiedSince14
  ],
  responses: {
    202: {
      headersMapper: Mappers.JobEnableHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const terminateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "jobs/{jobId}/terminate",
  urlParameters: [
    Parameters.jobId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout27
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId32,
    Parameters.returnClientRequestId32,
    Parameters.ocpDate32,
    Parameters.ifMatch15,
    Parameters.ifNoneMatch15,
    Parameters.ifModifiedSince15,
    Parameters.ifUnmodifiedSince15
  ],
  requestBody: {
    parameterPath: {
      terminateReason: [
        "options",
        "terminateReason"
      ]
    },
    mapper: Mappers.JobTerminateParameter
  },
  contentType: "application/json; odata=minimalmetadata; charset=utf-8",
  responses: {
    202: {
      headersMapper: Mappers.JobTerminateHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const addOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "jobs",
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout28
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId33,
    Parameters.returnClientRequestId33,
    Parameters.ocpDate33
  ],
  requestBody: {
    parameterPath: "job",
    mapper: {
      ...Mappers.JobAddParameter,
      required: true
    }
  },
  contentType: "application/json; odata=minimalmetadata; charset=utf-8",
  responses: {
    201: {
      headersMapper: Mappers.JobAddHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "jobs",
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter4,
    Parameters.select3,
    Parameters.expand3,
    Parameters.maxResults5,
    Parameters.timeout29
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId34,
    Parameters.returnClientRequestId34,
    Parameters.ocpDate34
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CloudJobListResult,
      headersMapper: Mappers.JobListHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const listFromJobScheduleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "jobschedules/{jobScheduleId}/jobs",
  urlParameters: [
    Parameters.jobScheduleId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter5,
    Parameters.select4,
    Parameters.expand4,
    Parameters.maxResults6,
    Parameters.timeout30
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId35,
    Parameters.returnClientRequestId35,
    Parameters.ocpDate35
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CloudJobListResult,
      headersMapper: Mappers.JobListFromJobScheduleHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const listPreparationAndReleaseTaskStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "jobs/{jobId}/jobpreparationandreleasetaskstatus",
  urlParameters: [
    Parameters.jobId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter6,
    Parameters.select5,
    Parameters.maxResults7,
    Parameters.timeout31
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId36,
    Parameters.returnClientRequestId36,
    Parameters.ocpDate36
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CloudJobListPreparationAndReleaseTaskStatusResult,
      headersMapper: Mappers.JobListPreparationAndReleaseTaskStatusHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const getTaskCountsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "jobs/{jobId}/taskcounts",
  urlParameters: [
    Parameters.jobId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout32
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId37,
    Parameters.returnClientRequestId37,
    Parameters.ocpDate37
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TaskCounts,
      headersMapper: Mappers.JobGetTaskCountsHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://batch.core.windows.net",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId38,
    Parameters.returnClientRequestId38,
    Parameters.ocpDate38
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CloudJobListResult,
      headersMapper: Mappers.JobListHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const listFromJobScheduleNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://batch.core.windows.net",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId39,
    Parameters.returnClientRequestId39,
    Parameters.ocpDate39
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CloudJobListResult,
      headersMapper: Mappers.JobListFromJobScheduleHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const listPreparationAndReleaseTaskStatusNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://batch.core.windows.net",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId40,
    Parameters.returnClientRequestId40,
    Parameters.ocpDate40
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CloudJobListPreparationAndReleaseTaskStatusResult,
      headersMapper: Mappers.JobListPreparationAndReleaseTaskStatusHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};
