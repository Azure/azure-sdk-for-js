/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/certificateOperationsMappers";
import * as Parameters from "../models/parameters";
import { BatchServiceClientContext } from "../batchServiceClientContext";

/** Class representing a CertificateOperations. */
export class CertificateOperations {
  private readonly client: BatchServiceClientContext;

  /**
   * Create a CertificateOperations.
   * @param {BatchServiceClientContext} client Reference to the service client.
   */
  constructor(client: BatchServiceClientContext) {
    this.client = client;
  }

  /**
   * @summary Adds a certificate to the specified account.
   * @param certificate The certificate to be added.
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificateAddResponse>
   */
  add(certificate: Models.CertificateAddParameter, options?: Models.CertificateAddOptionalParams): Promise<Models.CertificateAddResponse>;
  /**
   * @param certificate The certificate to be added.
   * @param callback The callback
   */
  add(certificate: Models.CertificateAddParameter, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param certificate The certificate to be added.
   * @param options The optional parameters
   * @param callback The callback
   */
  add(certificate: Models.CertificateAddParameter, options: Models.CertificateAddOptionalParams, callback: msRest.ServiceCallback<void>): void;
  add(certificate: Models.CertificateAddParameter, options?: Models.CertificateAddOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<Models.CertificateAddResponse> {
    return this.client.sendOperationRequest(
      {
        certificate,
        options
      },
      addOperationSpec,
      callback) as Promise<Models.CertificateAddResponse>;
  }

  /**
   * @summary Lists all of the certificates that have been added to the specified account.
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificateListResponse>
   */
  list(options?: Models.CertificateListOptionalParams): Promise<Models.CertificateListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.CertificateListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: Models.CertificateListOptionalParams, callback: msRest.ServiceCallback<Models.CertificateListResult>): void;
  list(options?: Models.CertificateListOptionalParams, callback?: msRest.ServiceCallback<Models.CertificateListResult>): Promise<Models.CertificateListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.CertificateListResponse>;
  }

  /**
   * If you try to delete a certificate that is being used by a pool or compute node, the status of
   * the certificate changes to deleteFailed. If you decide that you want to continue using the
   * certificate, you can use this operation to set the status of the certificate back to active. If
   * you intend to delete the certificate, you do not need to run this operation after the deletion
   * failed. You must make sure that the certificate is not being used by any resources, and then you
   * can try again to delete the certificate.
   * @summary Cancels a failed deletion of a certificate from the specified account.
   * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be
   * sha1.
   * @param thumbprint The thumbprint of the certificate being deleted.
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificateCancelDeletionResponse>
   */
  cancelDeletion(thumbprintAlgorithm: string, thumbprint: string, options?: Models.CertificateCancelDeletionOptionalParams): Promise<Models.CertificateCancelDeletionResponse>;
  /**
   * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be
   * sha1.
   * @param thumbprint The thumbprint of the certificate being deleted.
   * @param callback The callback
   */
  cancelDeletion(thumbprintAlgorithm: string, thumbprint: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be
   * sha1.
   * @param thumbprint The thumbprint of the certificate being deleted.
   * @param options The optional parameters
   * @param callback The callback
   */
  cancelDeletion(thumbprintAlgorithm: string, thumbprint: string, options: Models.CertificateCancelDeletionOptionalParams, callback: msRest.ServiceCallback<void>): void;
  cancelDeletion(thumbprintAlgorithm: string, thumbprint: string, options?: Models.CertificateCancelDeletionOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<Models.CertificateCancelDeletionResponse> {
    return this.client.sendOperationRequest(
      {
        thumbprintAlgorithm,
        thumbprint,
        options
      },
      cancelDeletionOperationSpec,
      callback) as Promise<Models.CertificateCancelDeletionResponse>;
  }

  /**
   * You cannot delete a certificate if a resource (pool or compute node) is using it. Before you can
   * delete a certificate, you must therefore make sure that the certificate is not associated with
   * any existing pools, the certificate is not installed on any compute nodes (even if you remove a
   * certificate from a pool, it is not removed from existing compute nodes in that pool until they
   * restart), and no running tasks depend on the certificate. If you try to delete a certificate
   * that is in use, the deletion fails. The certificate status changes to deleteFailed. You can use
   * Cancel Delete Certificate to set the status back to active if you decide that you want to
   * continue using the certificate.
   * @summary Deletes a certificate from the specified account.
   * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be
   * sha1.
   * @param thumbprint The thumbprint of the certificate to be deleted.
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificateDeleteResponse>
   */
  deleteMethod(thumbprintAlgorithm: string, thumbprint: string, options?: Models.CertificateDeleteMethodOptionalParams): Promise<Models.CertificateDeleteResponse>;
  /**
   * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be
   * sha1.
   * @param thumbprint The thumbprint of the certificate to be deleted.
   * @param callback The callback
   */
  deleteMethod(thumbprintAlgorithm: string, thumbprint: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be
   * sha1.
   * @param thumbprint The thumbprint of the certificate to be deleted.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(thumbprintAlgorithm: string, thumbprint: string, options: Models.CertificateDeleteMethodOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(thumbprintAlgorithm: string, thumbprint: string, options?: Models.CertificateDeleteMethodOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<Models.CertificateDeleteResponse> {
    return this.client.sendOperationRequest(
      {
        thumbprintAlgorithm,
        thumbprint,
        options
      },
      deleteMethodOperationSpec,
      callback) as Promise<Models.CertificateDeleteResponse>;
  }

  /**
   * Gets information about the specified certificate.
   * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be
   * sha1.
   * @param thumbprint The thumbprint of the certificate to get.
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificateGetResponse>
   */
  get(thumbprintAlgorithm: string, thumbprint: string, options?: Models.CertificateGetOptionalParams): Promise<Models.CertificateGetResponse>;
  /**
   * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be
   * sha1.
   * @param thumbprint The thumbprint of the certificate to get.
   * @param callback The callback
   */
  get(thumbprintAlgorithm: string, thumbprint: string, callback: msRest.ServiceCallback<Models.Certificate>): void;
  /**
   * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be
   * sha1.
   * @param thumbprint The thumbprint of the certificate to get.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(thumbprintAlgorithm: string, thumbprint: string, options: Models.CertificateGetOptionalParams, callback: msRest.ServiceCallback<Models.Certificate>): void;
  get(thumbprintAlgorithm: string, thumbprint: string, options?: Models.CertificateGetOptionalParams, callback?: msRest.ServiceCallback<Models.Certificate>): Promise<Models.CertificateGetResponse> {
    return this.client.sendOperationRequest(
      {
        thumbprintAlgorithm,
        thumbprint,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.CertificateGetResponse>;
  }

  /**
   * @summary Lists all of the certificates that have been added to the specified account.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificateListResponse>
   */
  listNext(nextPageLink: string, options?: Models.CertificateListNextOptionalParams): Promise<Models.CertificateListResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CertificateListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: Models.CertificateListNextOptionalParams, callback: msRest.ServiceCallback<Models.CertificateListResult>): void;
  listNext(nextPageLink: string, options?: Models.CertificateListNextOptionalParams, callback?: msRest.ServiceCallback<Models.CertificateListResult>): Promise<Models.CertificateListResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.CertificateListResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const addOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "certificates",
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout33
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId41,
    Parameters.returnClientRequestId41,
    Parameters.ocpDate41
  ],
  requestBody: {
    parameterPath: "certificate",
    mapper: {
      ...Mappers.CertificateAddParameter,
      required: true
    }
  },
  contentType: "application/json; odata=minimalmetadata; charset=utf-8",
  responses: {
    201: {
      headersMapper: Mappers.CertificateAddHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "certificates",
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter7,
    Parameters.select6,
    Parameters.maxResults8,
    Parameters.timeout34
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId42,
    Parameters.returnClientRequestId42,
    Parameters.ocpDate42
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CertificateListResult,
      headersMapper: Mappers.CertificateListHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const cancelDeletionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "certificates(thumbprintAlgorithm={thumbprintAlgorithm},thumbprint={thumbprint})/canceldelete",
  urlParameters: [
    Parameters.thumbprintAlgorithm,
    Parameters.thumbprint
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout35
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId43,
    Parameters.returnClientRequestId43,
    Parameters.ocpDate43
  ],
  responses: {
    204: {
      headersMapper: Mappers.CertificateCancelDeletionHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "certificates(thumbprintAlgorithm={thumbprintAlgorithm},thumbprint={thumbprint})",
  urlParameters: [
    Parameters.thumbprintAlgorithm,
    Parameters.thumbprint
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout36
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId44,
    Parameters.returnClientRequestId44,
    Parameters.ocpDate44
  ],
  responses: {
    202: {
      headersMapper: Mappers.CertificateDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "certificates(thumbprintAlgorithm={thumbprintAlgorithm},thumbprint={thumbprint})",
  urlParameters: [
    Parameters.thumbprintAlgorithm,
    Parameters.thumbprint
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.select7,
    Parameters.timeout37
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId45,
    Parameters.returnClientRequestId45,
    Parameters.ocpDate45
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Certificate,
      headersMapper: Mappers.CertificateGetHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://batch.core.windows.net",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId46,
    Parameters.returnClientRequestId46,
    Parameters.ocpDate46
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CertificateListResult,
      headersMapper: Mappers.CertificateListHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};
