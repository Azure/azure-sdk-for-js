/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/jobScheduleMappers";
import * as Parameters from "../models/parameters";
import { BatchServiceClientContext } from "../batchServiceClientContext";

/** Class representing a JobSchedule. */
export class JobSchedule {
  private readonly client: BatchServiceClientContext;

  /**
   * Create a JobSchedule.
   * @param {BatchServiceClientContext} client Reference to the service client.
   */
  constructor(client: BatchServiceClientContext) {
    this.client = client;
  }

  /**
   * @summary Checks the specified job schedule exists.
   * @param jobScheduleId The ID of the job schedule which you want to check.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobScheduleExistsResponse>
   */
  exists(jobScheduleId: string, options?: Models.JobScheduleExistsOptionalParams): Promise<Models.JobScheduleExistsResponse>;
  /**
   * @param jobScheduleId The ID of the job schedule which you want to check.
   * @param callback The callback
   */
  exists(jobScheduleId: string, callback: msRest.ServiceCallback<boolean>): void;
  /**
   * @param jobScheduleId The ID of the job schedule which you want to check.
   * @param options The optional parameters
   * @param callback The callback
   */
  exists(jobScheduleId: string, options: Models.JobScheduleExistsOptionalParams, callback: msRest.ServiceCallback<boolean>): void;
  exists(jobScheduleId: string, options?: Models.JobScheduleExistsOptionalParams, callback?: msRest.ServiceCallback<boolean>): Promise<Models.JobScheduleExistsResponse> {
    return this.client.sendOperationRequest(
      {
        jobScheduleId,
        options
      },
      existsOperationSpec,
      callback) as Promise<Models.JobScheduleExistsResponse>;
  }

  /**
   * When you delete a job schedule, this also deletes all jobs and tasks under that schedule. When
   * tasks are deleted, all the files in their working directories on the compute nodes are also
   * deleted (the retention period is ignored). The job schedule statistics are no longer accessible
   * once the job schedule is deleted, though they are still counted towards account lifetime
   * statistics.
   * @summary Deletes a job schedule from the specified account.
   * @param jobScheduleId The ID of the job schedule to delete.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobScheduleDeleteResponse>
   */
  deleteMethod(jobScheduleId: string, options?: Models.JobScheduleDeleteMethodOptionalParams): Promise<Models.JobScheduleDeleteResponse>;
  /**
   * @param jobScheduleId The ID of the job schedule to delete.
   * @param callback The callback
   */
  deleteMethod(jobScheduleId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param jobScheduleId The ID of the job schedule to delete.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(jobScheduleId: string, options: Models.JobScheduleDeleteMethodOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(jobScheduleId: string, options?: Models.JobScheduleDeleteMethodOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<Models.JobScheduleDeleteResponse> {
    return this.client.sendOperationRequest(
      {
        jobScheduleId,
        options
      },
      deleteMethodOperationSpec,
      callback) as Promise<Models.JobScheduleDeleteResponse>;
  }

  /**
   * Gets information about the specified job schedule.
   * @param jobScheduleId The ID of the job schedule to get.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobScheduleGetResponse>
   */
  get(jobScheduleId: string, options?: Models.JobScheduleGetOptionalParams): Promise<Models.JobScheduleGetResponse>;
  /**
   * @param jobScheduleId The ID of the job schedule to get.
   * @param callback The callback
   */
  get(jobScheduleId: string, callback: msRest.ServiceCallback<Models.CloudJobSchedule>): void;
  /**
   * @param jobScheduleId The ID of the job schedule to get.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(jobScheduleId: string, options: Models.JobScheduleGetOptionalParams, callback: msRest.ServiceCallback<Models.CloudJobSchedule>): void;
  get(jobScheduleId: string, options?: Models.JobScheduleGetOptionalParams, callback?: msRest.ServiceCallback<Models.CloudJobSchedule>): Promise<Models.JobScheduleGetResponse> {
    return this.client.sendOperationRequest(
      {
        jobScheduleId,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.JobScheduleGetResponse>;
  }

  /**
   * This replaces only the job schedule properties specified in the request. For example, if the
   * schedule property is not specified with this request, then the Batch service will keep the
   * existing schedule. Changes to a job schedule only impact jobs created by the schedule after the
   * update has taken place; currently running jobs are unaffected.
   * @summary Updates the properties of the specified job schedule.
   * @param jobScheduleId The ID of the job schedule to update.
   * @param jobSchedulePatchParameter The parameters for the request.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobSchedulePatchResponse>
   */
  patch(jobScheduleId: string, jobSchedulePatchParameter: Models.JobSchedulePatchParameter, options?: Models.JobSchedulePatchOptionalParams): Promise<Models.JobSchedulePatchResponse>;
  /**
   * @param jobScheduleId The ID of the job schedule to update.
   * @param jobSchedulePatchParameter The parameters for the request.
   * @param callback The callback
   */
  patch(jobScheduleId: string, jobSchedulePatchParameter: Models.JobSchedulePatchParameter, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param jobScheduleId The ID of the job schedule to update.
   * @param jobSchedulePatchParameter The parameters for the request.
   * @param options The optional parameters
   * @param callback The callback
   */
  patch(jobScheduleId: string, jobSchedulePatchParameter: Models.JobSchedulePatchParameter, options: Models.JobSchedulePatchOptionalParams, callback: msRest.ServiceCallback<void>): void;
  patch(jobScheduleId: string, jobSchedulePatchParameter: Models.JobSchedulePatchParameter, options?: Models.JobSchedulePatchOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<Models.JobSchedulePatchResponse> {
    return this.client.sendOperationRequest(
      {
        jobScheduleId,
        jobSchedulePatchParameter,
        options
      },
      patchOperationSpec,
      callback) as Promise<Models.JobSchedulePatchResponse>;
  }

  /**
   * This fully replaces all the updateable properties of the job schedule. For example, if the
   * schedule property is not specified with this request, then the Batch service will remove the
   * existing schedule. Changes to a job schedule only impact jobs created by the schedule after the
   * update has taken place; currently running jobs are unaffected.
   * @summary Updates the properties of the specified job schedule.
   * @param jobScheduleId The ID of the job schedule to update.
   * @param jobScheduleUpdateParameter The parameters for the request.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobScheduleUpdateResponse>
   */
  update(jobScheduleId: string, jobScheduleUpdateParameter: Models.JobScheduleUpdateParameter, options?: Models.JobScheduleUpdateOptionalParams): Promise<Models.JobScheduleUpdateResponse>;
  /**
   * @param jobScheduleId The ID of the job schedule to update.
   * @param jobScheduleUpdateParameter The parameters for the request.
   * @param callback The callback
   */
  update(jobScheduleId: string, jobScheduleUpdateParameter: Models.JobScheduleUpdateParameter, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param jobScheduleId The ID of the job schedule to update.
   * @param jobScheduleUpdateParameter The parameters for the request.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(jobScheduleId: string, jobScheduleUpdateParameter: Models.JobScheduleUpdateParameter, options: Models.JobScheduleUpdateOptionalParams, callback: msRest.ServiceCallback<void>): void;
  update(jobScheduleId: string, jobScheduleUpdateParameter: Models.JobScheduleUpdateParameter, options?: Models.JobScheduleUpdateOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<Models.JobScheduleUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        jobScheduleId,
        jobScheduleUpdateParameter,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.JobScheduleUpdateResponse>;
  }

  /**
   * No new jobs will be created until the job schedule is enabled again.
   * @summary Disables a job schedule.
   * @param jobScheduleId The ID of the job schedule to disable.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobScheduleDisableResponse>
   */
  disable(jobScheduleId: string, options?: Models.JobScheduleDisableOptionalParams): Promise<Models.JobScheduleDisableResponse>;
  /**
   * @param jobScheduleId The ID of the job schedule to disable.
   * @param callback The callback
   */
  disable(jobScheduleId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param jobScheduleId The ID of the job schedule to disable.
   * @param options The optional parameters
   * @param callback The callback
   */
  disable(jobScheduleId: string, options: Models.JobScheduleDisableOptionalParams, callback: msRest.ServiceCallback<void>): void;
  disable(jobScheduleId: string, options?: Models.JobScheduleDisableOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<Models.JobScheduleDisableResponse> {
    return this.client.sendOperationRequest(
      {
        jobScheduleId,
        options
      },
      disableOperationSpec,
      callback) as Promise<Models.JobScheduleDisableResponse>;
  }

  /**
   * @summary Enables a job schedule.
   * @param jobScheduleId The ID of the job schedule to enable.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobScheduleEnableResponse>
   */
  enable(jobScheduleId: string, options?: Models.JobScheduleEnableOptionalParams): Promise<Models.JobScheduleEnableResponse>;
  /**
   * @param jobScheduleId The ID of the job schedule to enable.
   * @param callback The callback
   */
  enable(jobScheduleId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param jobScheduleId The ID of the job schedule to enable.
   * @param options The optional parameters
   * @param callback The callback
   */
  enable(jobScheduleId: string, options: Models.JobScheduleEnableOptionalParams, callback: msRest.ServiceCallback<void>): void;
  enable(jobScheduleId: string, options?: Models.JobScheduleEnableOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<Models.JobScheduleEnableResponse> {
    return this.client.sendOperationRequest(
      {
        jobScheduleId,
        options
      },
      enableOperationSpec,
      callback) as Promise<Models.JobScheduleEnableResponse>;
  }

  /**
   * @summary Terminates a job schedule.
   * @param jobScheduleId The ID of the job schedule to terminates.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobScheduleTerminateResponse>
   */
  terminate(jobScheduleId: string, options?: Models.JobScheduleTerminateOptionalParams): Promise<Models.JobScheduleTerminateResponse>;
  /**
   * @param jobScheduleId The ID of the job schedule to terminates.
   * @param callback The callback
   */
  terminate(jobScheduleId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param jobScheduleId The ID of the job schedule to terminates.
   * @param options The optional parameters
   * @param callback The callback
   */
  terminate(jobScheduleId: string, options: Models.JobScheduleTerminateOptionalParams, callback: msRest.ServiceCallback<void>): void;
  terminate(jobScheduleId: string, options?: Models.JobScheduleTerminateOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<Models.JobScheduleTerminateResponse> {
    return this.client.sendOperationRequest(
      {
        jobScheduleId,
        options
      },
      terminateOperationSpec,
      callback) as Promise<Models.JobScheduleTerminateResponse>;
  }

  /**
   * @summary Adds a job schedule to the specified account.
   * @param cloudJobSchedule The job schedule to be added.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobScheduleAddResponse>
   */
  add(cloudJobSchedule: Models.JobScheduleAddParameter, options?: Models.JobScheduleAddOptionalParams): Promise<Models.JobScheduleAddResponse>;
  /**
   * @param cloudJobSchedule The job schedule to be added.
   * @param callback The callback
   */
  add(cloudJobSchedule: Models.JobScheduleAddParameter, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param cloudJobSchedule The job schedule to be added.
   * @param options The optional parameters
   * @param callback The callback
   */
  add(cloudJobSchedule: Models.JobScheduleAddParameter, options: Models.JobScheduleAddOptionalParams, callback: msRest.ServiceCallback<void>): void;
  add(cloudJobSchedule: Models.JobScheduleAddParameter, options?: Models.JobScheduleAddOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<Models.JobScheduleAddResponse> {
    return this.client.sendOperationRequest(
      {
        cloudJobSchedule,
        options
      },
      addOperationSpec,
      callback) as Promise<Models.JobScheduleAddResponse>;
  }

  /**
   * @summary Lists all of the job schedules in the specified account.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobScheduleListResponse>
   */
  list(options?: Models.JobScheduleListOptionalParams): Promise<Models.JobScheduleListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.CloudJobScheduleListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: Models.JobScheduleListOptionalParams, callback: msRest.ServiceCallback<Models.CloudJobScheduleListResult>): void;
  list(options?: Models.JobScheduleListOptionalParams, callback?: msRest.ServiceCallback<Models.CloudJobScheduleListResult>): Promise<Models.JobScheduleListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.JobScheduleListResponse>;
  }

  /**
   * @summary Lists all of the job schedules in the specified account.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobScheduleListResponse>
   */
  listNext(nextPageLink: string, options?: Models.JobScheduleListNextOptionalParams): Promise<Models.JobScheduleListResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CloudJobScheduleListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: Models.JobScheduleListNextOptionalParams, callback: msRest.ServiceCallback<Models.CloudJobScheduleListResult>): void;
  listNext(nextPageLink: string, options?: Models.JobScheduleListNextOptionalParams, callback?: msRest.ServiceCallback<Models.CloudJobScheduleListResult>): Promise<Models.JobScheduleListResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.JobScheduleListResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const existsOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "jobschedules/{jobScheduleId}",
  urlParameters: [
    Parameters.jobScheduleId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout46
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId57,
    Parameters.returnClientRequestId57,
    Parameters.ocpDate57,
    Parameters.ifMatch16,
    Parameters.ifNoneMatch16,
    Parameters.ifModifiedSince20,
    Parameters.ifUnmodifiedSince20
  ],
  responses: {
    200: {
      headersMapper: Mappers.JobScheduleExistsHeaders
    },
    404: {
      headersMapper: Mappers.JobScheduleExistsHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "jobschedules/{jobScheduleId}",
  urlParameters: [
    Parameters.jobScheduleId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout47
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId58,
    Parameters.returnClientRequestId58,
    Parameters.ocpDate58,
    Parameters.ifMatch17,
    Parameters.ifNoneMatch17,
    Parameters.ifModifiedSince21,
    Parameters.ifUnmodifiedSince21
  ],
  responses: {
    202: {
      headersMapper: Mappers.JobScheduleDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "jobschedules/{jobScheduleId}",
  urlParameters: [
    Parameters.jobScheduleId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.select8,
    Parameters.expand5,
    Parameters.timeout48
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId59,
    Parameters.returnClientRequestId59,
    Parameters.ocpDate59,
    Parameters.ifMatch18,
    Parameters.ifNoneMatch18,
    Parameters.ifModifiedSince22,
    Parameters.ifUnmodifiedSince22
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CloudJobSchedule,
      headersMapper: Mappers.JobScheduleGetHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const patchOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "jobschedules/{jobScheduleId}",
  urlParameters: [
    Parameters.jobScheduleId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout49
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId60,
    Parameters.returnClientRequestId60,
    Parameters.ocpDate60,
    Parameters.ifMatch19,
    Parameters.ifNoneMatch19,
    Parameters.ifModifiedSince23,
    Parameters.ifUnmodifiedSince23
  ],
  requestBody: {
    parameterPath: "jobSchedulePatchParameter",
    mapper: {
      ...Mappers.JobSchedulePatchParameter,
      required: true
    }
  },
  contentType: "application/json; odata=minimalmetadata; charset=utf-8",
  responses: {
    200: {
      headersMapper: Mappers.JobSchedulePatchHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "jobschedules/{jobScheduleId}",
  urlParameters: [
    Parameters.jobScheduleId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout50
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId61,
    Parameters.returnClientRequestId61,
    Parameters.ocpDate61,
    Parameters.ifMatch20,
    Parameters.ifNoneMatch20,
    Parameters.ifModifiedSince24,
    Parameters.ifUnmodifiedSince24
  ],
  requestBody: {
    parameterPath: "jobScheduleUpdateParameter",
    mapper: {
      ...Mappers.JobScheduleUpdateParameter,
      required: true
    }
  },
  contentType: "application/json; odata=minimalmetadata; charset=utf-8",
  responses: {
    200: {
      headersMapper: Mappers.JobScheduleUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const disableOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "jobschedules/{jobScheduleId}/disable",
  urlParameters: [
    Parameters.jobScheduleId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout51
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId62,
    Parameters.returnClientRequestId62,
    Parameters.ocpDate62,
    Parameters.ifMatch21,
    Parameters.ifNoneMatch21,
    Parameters.ifModifiedSince25,
    Parameters.ifUnmodifiedSince25
  ],
  responses: {
    204: {
      headersMapper: Mappers.JobScheduleDisableHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const enableOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "jobschedules/{jobScheduleId}/enable",
  urlParameters: [
    Parameters.jobScheduleId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout52
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId63,
    Parameters.returnClientRequestId63,
    Parameters.ocpDate63,
    Parameters.ifMatch22,
    Parameters.ifNoneMatch22,
    Parameters.ifModifiedSince26,
    Parameters.ifUnmodifiedSince26
  ],
  responses: {
    204: {
      headersMapper: Mappers.JobScheduleEnableHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const terminateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "jobschedules/{jobScheduleId}/terminate",
  urlParameters: [
    Parameters.jobScheduleId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout53
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId64,
    Parameters.returnClientRequestId64,
    Parameters.ocpDate64,
    Parameters.ifMatch23,
    Parameters.ifNoneMatch23,
    Parameters.ifModifiedSince27,
    Parameters.ifUnmodifiedSince27
  ],
  responses: {
    202: {
      headersMapper: Mappers.JobScheduleTerminateHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const addOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "jobschedules",
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout54
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId65,
    Parameters.returnClientRequestId65,
    Parameters.ocpDate65
  ],
  requestBody: {
    parameterPath: "cloudJobSchedule",
    mapper: {
      ...Mappers.JobScheduleAddParameter,
      required: true
    }
  },
  contentType: "application/json; odata=minimalmetadata; charset=utf-8",
  responses: {
    201: {
      headersMapper: Mappers.JobScheduleAddHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "jobschedules",
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter10,
    Parameters.select9,
    Parameters.expand6,
    Parameters.maxResults11,
    Parameters.timeout55
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId66,
    Parameters.returnClientRequestId66,
    Parameters.ocpDate66
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CloudJobScheduleListResult,
      headersMapper: Mappers.JobScheduleListHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://batch.core.windows.net",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId67,
    Parameters.returnClientRequestId67,
    Parameters.ocpDate67
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CloudJobScheduleListResult,
      headersMapper: Mappers.JobScheduleListHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};
