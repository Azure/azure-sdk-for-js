/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.CognitiveservicesTextanalytics = {}),global.msRest));
}(this, (function (exports,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({

    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var MultiLanguageInput = {
        serializedName: "MultiLanguageInput",
        type: {
            name: "Composite",
            className: "MultiLanguageInput",
            modelProperties: {
                language: {
                    serializedName: "language",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                text: {
                    serializedName: "text",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MultiLanguageBatchInput = {
        serializedName: "MultiLanguageBatchInput",
        type: {
            name: "Composite",
            className: "MultiLanguageBatchInput",
            modelProperties: {
                documents: {
                    serializedName: "documents",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MultiLanguageInput"
                            }
                        }
                    }
                }
            }
        }
    };
    var KeyPhraseBatchResultItem = {
        serializedName: "KeyPhraseBatchResultItem",
        type: {
            name: "Composite",
            className: "KeyPhraseBatchResultItem",
            modelProperties: {
                keyPhrases: {
                    readOnly: true,
                    serializedName: "keyPhrases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorRecord = {
        serializedName: "ErrorRecord",
        type: {
            name: "Composite",
            className: "ErrorRecord",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var KeyPhraseBatchResult = {
        serializedName: "KeyPhraseBatchResult",
        type: {
            name: "Composite",
            className: "KeyPhraseBatchResult",
            modelProperties: {
                documents: {
                    readOnly: true,
                    serializedName: "documents",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "KeyPhraseBatchResultItem"
                            }
                        }
                    }
                },
                errors: {
                    readOnly: true,
                    serializedName: "errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorRecord"
                            }
                        }
                    }
                }
            }
        }
    };
    var InternalError = {
        serializedName: "InternalError",
        type: {
            name: "Composite",
            className: "InternalError",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                innerError: {
                    serializedName: "innerError",
                    type: {
                        name: "Composite",
                        className: "InternalError"
                    }
                }
            }
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    serializedName: "target",
                    type: {
                        name: "String"
                    }
                },
                innerError: {
                    serializedName: "innerError",
                    type: {
                        name: "Composite",
                        className: "InternalError"
                    }
                }
            }
        }
    };
    var Input = {
        serializedName: "Input",
        type: {
            name: "Composite",
            className: "Input",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                text: {
                    serializedName: "text",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BatchInput = {
        serializedName: "BatchInput",
        type: {
            name: "Composite",
            className: "BatchInput",
            modelProperties: {
                documents: {
                    serializedName: "documents",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Input"
                            }
                        }
                    }
                }
            }
        }
    };
    var DetectedLanguage = {
        serializedName: "DetectedLanguage",
        type: {
            name: "Composite",
            className: "DetectedLanguage",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                iso6391Name: {
                    serializedName: "iso6391Name",
                    type: {
                        name: "String"
                    }
                },
                score: {
                    serializedName: "score",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var LanguageBatchResultItem = {
        serializedName: "LanguageBatchResultItem",
        type: {
            name: "Composite",
            className: "LanguageBatchResultItem",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                detectedLanguages: {
                    readOnly: true,
                    serializedName: "detectedLanguages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DetectedLanguage"
                            }
                        }
                    }
                }
            }
        }
    };
    var LanguageBatchResult = {
        serializedName: "LanguageBatchResult",
        type: {
            name: "Composite",
            className: "LanguageBatchResult",
            modelProperties: {
                documents: {
                    readOnly: true,
                    serializedName: "documents",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LanguageBatchResultItem"
                            }
                        }
                    }
                },
                errors: {
                    readOnly: true,
                    serializedName: "errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorRecord"
                            }
                        }
                    }
                }
            }
        }
    };
    var SentimentBatchResultItem = {
        serializedName: "SentimentBatchResultItem",
        type: {
            name: "Composite",
            className: "SentimentBatchResultItem",
            modelProperties: {
                score: {
                    readOnly: true,
                    serializedName: "score",
                    type: {
                        name: "Number"
                    }
                },
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SentimentBatchResult = {
        serializedName: "SentimentBatchResult",
        type: {
            name: "Composite",
            className: "SentimentBatchResult",
            modelProperties: {
                documents: {
                    readOnly: true,
                    serializedName: "documents",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SentimentBatchResultItem"
                            }
                        }
                    }
                },
                errors: {
                    readOnly: true,
                    serializedName: "errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorRecord"
                            }
                        }
                    }
                }
            }
        }
    };
    var MatchRecord = {
        serializedName: "MatchRecord",
        type: {
            name: "Composite",
            className: "MatchRecord",
            modelProperties: {
                text: {
                    serializedName: "text",
                    type: {
                        name: "String"
                    }
                },
                offset: {
                    serializedName: "offset",
                    type: {
                        name: "Number"
                    }
                },
                length: {
                    serializedName: "length",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var EntityRecord = {
        serializedName: "EntityRecord",
        type: {
            name: "Composite",
            className: "EntityRecord",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                matches: {
                    readOnly: true,
                    serializedName: "matches",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MatchRecord"
                            }
                        }
                    }
                },
                wikipediaLanguage: {
                    serializedName: "wikipediaLanguage",
                    type: {
                        name: "String"
                    }
                },
                wikipediaId: {
                    serializedName: "wikipediaId",
                    type: {
                        name: "String"
                    }
                },
                wikipediaUrl: {
                    readOnly: true,
                    serializedName: "wikipediaUrl",
                    type: {
                        name: "String"
                    }
                },
                bingId: {
                    serializedName: "bingId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EntitiesBatchResultItem = {
        serializedName: "EntitiesBatchResultItem",
        type: {
            name: "Composite",
            className: "EntitiesBatchResultItem",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                entities: {
                    readOnly: true,
                    serializedName: "entities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EntityRecord"
                            }
                        }
                    }
                }
            }
        }
    };
    var EntitiesBatchResult = {
        serializedName: "EntitiesBatchResult",
        type: {
            name: "Composite",
            className: "EntitiesBatchResult",
            modelProperties: {
                documents: {
                    readOnly: true,
                    serializedName: "documents",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EntitiesBatchResultItem"
                            }
                        }
                    }
                },
                errors: {
                    readOnly: true,
                    serializedName: "errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorRecord"
                            }
                        }
                    }
                }
            }
        }
    };

    var Mappers = /*#__PURE__*/Object.freeze({
        MultiLanguageInput: MultiLanguageInput,
        MultiLanguageBatchInput: MultiLanguageBatchInput,
        KeyPhraseBatchResultItem: KeyPhraseBatchResultItem,
        ErrorRecord: ErrorRecord,
        KeyPhraseBatchResult: KeyPhraseBatchResult,
        InternalError: InternalError,
        ErrorResponse: ErrorResponse,
        Input: Input,
        BatchInput: BatchInput,
        DetectedLanguage: DetectedLanguage,
        LanguageBatchResultItem: LanguageBatchResultItem,
        LanguageBatchResult: LanguageBatchResult,
        SentimentBatchResultItem: SentimentBatchResultItem,
        SentimentBatchResult: SentimentBatchResult,
        MatchRecord: MatchRecord,
        EntityRecord: EntityRecord,
        EntitiesBatchResultItem: EntitiesBatchResultItem,
        EntitiesBatchResult: EntitiesBatchResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var endpoint = {
        parameterPath: "endpoint",
        mapper: {
            required: true,
            serializedName: "Endpoint",
            defaultValue: '',
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/cognitiveservices-textanalytics";
    var packageVersion = "1.0.0";
    var TextAnalyticsClientContext = /** @class */ (function (_super) {
        __extends(TextAnalyticsClientContext, _super);
        /**
         * Initializes a new instance of the TextAnalyticsClientContext class.
         * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
         * https://westus.api.cognitive.microsoft.com).
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param [options] The parameter options
         */
        function TextAnalyticsClientContext(endpoint, credentials, options) {
            var _this = this;
            if (endpoint === null || endpoint === undefined) {
                throw new Error('\'endpoint\' cannot be null.');
            }
            if (credentials === null || credentials === undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.baseUri = "{Endpoint}";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.endpoint = endpoint;
            _this.credentials = credentials;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            return _this;
        }
        return TextAnalyticsClientContext;
    }(msRest.ServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var TextAnalyticsClient = /** @class */ (function (_super) {
        __extends(TextAnalyticsClient, _super);
        /**
         * Initializes a new instance of the TextAnalyticsClient class.
         * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
         * https://westus.api.cognitive.microsoft.com).
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param [options] The parameter options
         */
        function TextAnalyticsClient(endpoint$$1, credentials, options) {
            return _super.call(this, endpoint$$1, credentials, options) || this;
        }
        TextAnalyticsClient.prototype.keyPhrases = function (input, options, callback) {
            return this.sendOperationRequest({
                input: input,
                options: options
            }, keyPhrasesOperationSpec, callback);
        };
        TextAnalyticsClient.prototype.detectLanguage = function (input, options, callback) {
            return this.sendOperationRequest({
                input: input,
                options: options
            }, detectLanguageOperationSpec, callback);
        };
        TextAnalyticsClient.prototype.sentiment = function (input, options, callback) {
            return this.sendOperationRequest({
                input: input,
                options: options
            }, sentimentOperationSpec, callback);
        };
        TextAnalyticsClient.prototype.entities = function (input, options, callback) {
            return this.sendOperationRequest({
                input: input,
                options: options
            }, entitiesOperationSpec, callback);
        };
        return TextAnalyticsClient;
    }(TextAnalyticsClientContext));
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var keyPhrasesOperationSpec = {
        httpMethod: "POST",
        path: "keyPhrases",
        urlParameters: [
            endpoint
        ],
        requestBody: {
            parameterPath: "input",
            mapper: __assign({}, MultiLanguageBatchInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: KeyPhraseBatchResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var detectLanguageOperationSpec = {
        httpMethod: "POST",
        path: "languages",
        urlParameters: [
            endpoint
        ],
        requestBody: {
            parameterPath: "input",
            mapper: __assign({}, BatchInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: LanguageBatchResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var sentimentOperationSpec = {
        httpMethod: "POST",
        path: "sentiment",
        urlParameters: [
            endpoint
        ],
        requestBody: {
            parameterPath: "input",
            mapper: __assign({}, MultiLanguageBatchInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: SentimentBatchResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var entitiesOperationSpec = {
        httpMethod: "POST",
        path: "entities",
        urlParameters: [
            endpoint
        ],
        requestBody: {
            parameterPath: "input",
            mapper: __assign({}, MultiLanguageBatchInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: EntitiesBatchResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };

    exports.TextAnalyticsClient = TextAnalyticsClient;
    exports.TextAnalyticsClientContext = TextAnalyticsClientContext;
    exports.TextAnalyticsModels = index;
    exports.TextAnalyticsMappers = Mappers;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=cognitiveservices-textanalytics.js.map
