/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";


/**
 * @interface
 * An interface representing MultiLanguageInput.
 */
export interface MultiLanguageInput {
  /**
   * @member {string} [language] This is the 2 letter ISO 639-1 representation
   * of a language. For example, use "en" for English; "es" for Spanish etc.,
   */
  language?: string;
  /**
   * @member {string} [id] Unique, non-empty document identifier.
   */
  id?: string;
  /**
   * @member {string} [text]
   */
  text?: string;
}

/**
 * @interface
 * An interface representing MultiLanguageBatchInput.
 */
export interface MultiLanguageBatchInput {
  /**
   * @member {MultiLanguageInput[]} [documents]
   */
  documents?: MultiLanguageInput[];
}

/**
 * @interface
 * An interface representing KeyPhraseBatchResultItem.
 */
export interface KeyPhraseBatchResultItem {
  /**
   * @member {string[]} [keyPhrases] A list of representative words or phrases.
   * The number of key phrases returned is proportional to the number of words
   * in the input document.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly keyPhrases?: string[];
  /**
   * @member {string} [id] Unique document identifier.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
}

/**
 * @interface
 * An interface representing ErrorRecord.
 */
export interface ErrorRecord {
  /**
   * @member {string} [id] Input document unique identifier the error refers
   * to.
   */
  id?: string;
  /**
   * @member {string} [message] Error message.
   */
  message?: string;
}

/**
 * @interface
 * An interface representing KeyPhraseBatchResult.
 */
export interface KeyPhraseBatchResult {
  /**
   * @member {KeyPhraseBatchResultItem[]} [documents] **NOTE: This property
   * will not be serialized. It can only be populated by the server.**
   */
  readonly documents?: KeyPhraseBatchResultItem[];
  /**
   * @member {ErrorRecord[]} [errors] **NOTE: This property will not be
   * serialized. It can only be populated by the server.**
   */
  readonly errors?: ErrorRecord[];
}

/**
 * @interface
 * An interface representing InternalError.
 */
export interface InternalError {
  /**
   * @member {string} [code]
   */
  code?: string;
  /**
   * @member {string} [message]
   */
  message?: string;
  /**
   * @member {InternalError} [innerError]
   */
  innerError?: InternalError;
}

/**
 * @interface
 * An interface representing ErrorResponse.
 */
export interface ErrorResponse {
  /**
   * @member {string} [code]
   */
  code?: string;
  /**
   * @member {string} [message]
   */
  message?: string;
  /**
   * @member {string} [target]
   */
  target?: string;
  /**
   * @member {InternalError} [innerError]
   */
  innerError?: InternalError;
}

/**
 * @interface
 * An interface representing Input.
 */
export interface Input {
  /**
   * @member {string} [id] Unique, non-empty document identifier.
   */
  id?: string;
  /**
   * @member {string} [text]
   */
  text?: string;
}

/**
 * @interface
 * An interface representing BatchInput.
 */
export interface BatchInput {
  /**
   * @member {Input[]} [documents]
   */
  documents?: Input[];
}

/**
 * @interface
 * An interface representing DetectedLanguage.
 */
export interface DetectedLanguage {
  /**
   * @member {string} [name] Long name of a detected language (e.g. English,
   * French).
   */
  name?: string;
  /**
   * @member {string} [iso6391Name] A two letter representation of the detected
   * language according to the ISO 639-1 standard (e.g. en, fr).
   */
  iso6391Name?: string;
  /**
   * @member {number} [score] A confidence score between 0 and 1. Scores close
   * to 1 indicate 100% certainty that the identified language is true.
   */
  score?: number;
}

/**
 * @interface
 * An interface representing LanguageBatchResultItem.
 */
export interface LanguageBatchResultItem {
  /**
   * @member {string} [id] Unique document identifier.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {DetectedLanguage[]} [detectedLanguages] A list of extracted
   * languages.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly detectedLanguages?: DetectedLanguage[];
}

/**
 * @interface
 * An interface representing LanguageBatchResult.
 */
export interface LanguageBatchResult {
  /**
   * @member {LanguageBatchResultItem[]} [documents] **NOTE: This property will
   * not be serialized. It can only be populated by the server.**
   */
  readonly documents?: LanguageBatchResultItem[];
  /**
   * @member {ErrorRecord[]} [errors] **NOTE: This property will not be
   * serialized. It can only be populated by the server.**
   */
  readonly errors?: ErrorRecord[];
}

/**
 * @interface
 * An interface representing SentimentBatchResultItem.
 */
export interface SentimentBatchResultItem {
  /**
   * @member {number} [score] A decimal number between 0 and 1 denoting the
   * sentiment of the document. A score above 0.7 usually refers to a positive
   * document while a score below 0.3 normally has a negative connotation. Mid
   * values refer to neutral text.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly score?: number;
  /**
   * @member {string} [id] Unique document identifier.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
}

/**
 * @interface
 * An interface representing SentimentBatchResult.
 */
export interface SentimentBatchResult {
  /**
   * @member {SentimentBatchResultItem[]} [documents] **NOTE: This property
   * will not be serialized. It can only be populated by the server.**
   */
  readonly documents?: SentimentBatchResultItem[];
  /**
   * @member {ErrorRecord[]} [errors] **NOTE: This property will not be
   * serialized. It can only be populated by the server.**
   */
  readonly errors?: ErrorRecord[];
}

/**
 * @interface
 * An interface representing MatchRecord.
 */
export interface MatchRecord {
  /**
   * @member {string} [text] Entity text as appears in the request.
   */
  text?: string;
  /**
   * @member {number} [offset] Start position (in Unicode characters) for the
   * entity match text.
   */
  offset?: number;
  /**
   * @member {number} [length] Length (in Unicode characters) for the entity
   * match text.
   */
  length?: number;
}

/**
 * @interface
 * An interface representing EntityRecord.
 */
export interface EntityRecord {
  /**
   * @member {string} [name] Entity formal name.
   */
  name?: string;
  /**
   * @member {MatchRecord[]} [matches] List of instances this entity appears in
   * the text.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly matches?: MatchRecord[];
  /**
   * @member {string} [wikipediaLanguage] Wikipedia language for which the
   * WikipediaId and WikipediaUrl refers to.
   */
  wikipediaLanguage?: string;
  /**
   * @member {string} [wikipediaId] Wikipedia unique identifier of the
   * recognized entity.
   */
  wikipediaId?: string;
  /**
   * @member {string} [wikipediaUrl] URL for the entity's English Wikipedia
   * page.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly wikipediaUrl?: string;
  /**
   * @member {string} [bingId] Bing unique identifier of the recognized entity.
   * Use in conjunction with the Bing Entity Search API to fetch additional
   * relevant information.
   */
  bingId?: string;
}

/**
 * @interface
 * An interface representing EntitiesBatchResultItem.
 */
export interface EntitiesBatchResultItem {
  /**
   * @member {string} [id] Unique document identifier.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {EntityRecord[]} [entities] Recognized entities in the document.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly entities?: EntityRecord[];
}

/**
 * @interface
 * An interface representing EntitiesBatchResult.
 */
export interface EntitiesBatchResult {
  /**
   * @member {EntitiesBatchResultItem[]} [documents] **NOTE: This property will
   * not be serialized. It can only be populated by the server.**
   */
  readonly documents?: EntitiesBatchResultItem[];
  /**
   * @member {ErrorRecord[]} [errors] **NOTE: This property will not be
   * serialized. It can only be populated by the server.**
   */
  readonly errors?: ErrorRecord[];
}

/**
 * Contains response data for the keyPhrases operation.
 */
export type KeyPhrasesResponse = KeyPhraseBatchResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: KeyPhraseBatchResult;
    };
};

/**
 * Contains response data for the detectLanguage operation.
 */
export type DetectLanguageResponse = LanguageBatchResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LanguageBatchResult;
    };
};

/**
 * Contains response data for the sentiment operation.
 */
export type SentimentResponse = SentimentBatchResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SentimentBatchResult;
    };
};

/**
 * Contains response data for the entities operation.
 */
export type EntitiesResponse = EntitiesBatchResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EntitiesBatchResult;
    };
};
