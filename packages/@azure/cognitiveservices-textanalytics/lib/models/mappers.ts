/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as msRest from "@azure/ms-rest-js";


export const MultiLanguageInput: msRest.CompositeMapper = {
  serializedName: "MultiLanguageInput",
  type: {
    name: "Composite",
    className: "MultiLanguageInput",
    modelProperties: {
      language: {
        serializedName: "language",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      text: {
        serializedName: "text",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MultiLanguageBatchInput: msRest.CompositeMapper = {
  serializedName: "MultiLanguageBatchInput",
  type: {
    name: "Composite",
    className: "MultiLanguageBatchInput",
    modelProperties: {
      documents: {
        serializedName: "documents",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MultiLanguageInput"
            }
          }
        }
      }
    }
  }
};

export const MatchRecord: msRest.CompositeMapper = {
  serializedName: "MatchRecord",
  type: {
    name: "Composite",
    className: "MatchRecord",
    modelProperties: {
      wikipediaScore: {
        serializedName: "wikipediaScore",
        type: {
          name: "Number"
        }
      },
      entityTypeScore: {
        serializedName: "entityTypeScore",
        type: {
          name: "Number"
        }
      },
      text: {
        serializedName: "text",
        type: {
          name: "String"
        }
      },
      offset: {
        serializedName: "offset",
        type: {
          name: "Number"
        }
      },
      length: {
        serializedName: "length",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const EntityRecord: msRest.CompositeMapper = {
  serializedName: "EntityRecord",
  type: {
    name: "Composite",
    className: "EntityRecord",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      matches: {
        serializedName: "matches",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MatchRecord"
            }
          }
        }
      },
      wikipediaLanguage: {
        serializedName: "wikipediaLanguage",
        type: {
          name: "String"
        }
      },
      wikipediaId: {
        serializedName: "wikipediaId",
        type: {
          name: "String"
        }
      },
      wikipediaUrl: {
        readOnly: true,
        serializedName: "wikipediaUrl",
        type: {
          name: "String"
        }
      },
      bingId: {
        serializedName: "bingId",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      subType: {
        serializedName: "subType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DocumentStatistics: msRest.CompositeMapper = {
  serializedName: "DocumentStatistics",
  type: {
    name: "Composite",
    className: "DocumentStatistics",
    modelProperties: {
      charactersCount: {
        serializedName: "charactersCount",
        type: {
          name: "Number"
        }
      },
      transactionsCount: {
        serializedName: "transactionsCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const EntitiesBatchResultItem: msRest.CompositeMapper = {
  serializedName: "EntitiesBatchResultItem",
  type: {
    name: "Composite",
    className: "EntitiesBatchResultItem",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      entities: {
        readOnly: true,
        serializedName: "entities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EntityRecord"
            }
          }
        }
      },
      statistics: {
        serializedName: "statistics",
        type: {
          name: "Composite",
          className: "DocumentStatistics"
        }
      }
    }
  }
};

export const ErrorRecord: msRest.CompositeMapper = {
  serializedName: "ErrorRecord",
  type: {
    name: "Composite",
    className: "ErrorRecord",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RequestStatistics: msRest.CompositeMapper = {
  serializedName: "RequestStatistics",
  type: {
    name: "Composite",
    className: "RequestStatistics",
    modelProperties: {
      documentsCount: {
        serializedName: "documentsCount",
        type: {
          name: "Number"
        }
      },
      validDocumentsCount: {
        serializedName: "validDocumentsCount",
        type: {
          name: "Number"
        }
      },
      erroneousDocumentsCount: {
        serializedName: "erroneousDocumentsCount",
        type: {
          name: "Number"
        }
      },
      transactionsCount: {
        serializedName: "transactionsCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const EntitiesBatchResult: msRest.CompositeMapper = {
  serializedName: "EntitiesBatchResult",
  type: {
    name: "Composite",
    className: "EntitiesBatchResult",
    modelProperties: {
      documents: {
        readOnly: true,
        serializedName: "documents",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EntitiesBatchResultItem"
            }
          }
        }
      },
      errors: {
        readOnly: true,
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorRecord"
            }
          }
        }
      },
      statistics: {
        readOnly: true,
        serializedName: "statistics",
        type: {
          name: "Composite",
          className: "RequestStatistics"
        }
      }
    }
  }
};

export const InternalError: msRest.CompositeMapper = {
  serializedName: "InternalError",
  type: {
    name: "Composite",
    className: "InternalError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      innerError: {
        serializedName: "innerError",
        type: {
          name: "Composite",
          className: "InternalError"
        }
      }
    }
  }
};

export const ErrorResponse: msRest.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      innerError: {
        serializedName: "innerError",
        type: {
          name: "Composite",
          className: "InternalError"
        }
      }
    }
  }
};

export const KeyPhraseBatchResultItem: msRest.CompositeMapper = {
  serializedName: "KeyPhraseBatchResultItem",
  type: {
    name: "Composite",
    className: "KeyPhraseBatchResultItem",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      keyPhrases: {
        readOnly: true,
        serializedName: "keyPhrases",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      statistics: {
        serializedName: "statistics",
        type: {
          name: "Composite",
          className: "DocumentStatistics"
        }
      }
    }
  }
};

export const KeyPhraseBatchResult: msRest.CompositeMapper = {
  serializedName: "KeyPhraseBatchResult",
  type: {
    name: "Composite",
    className: "KeyPhraseBatchResult",
    modelProperties: {
      documents: {
        readOnly: true,
        serializedName: "documents",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "KeyPhraseBatchResultItem"
            }
          }
        }
      },
      errors: {
        readOnly: true,
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorRecord"
            }
          }
        }
      },
      statistics: {
        readOnly: true,
        serializedName: "statistics",
        type: {
          name: "Composite",
          className: "RequestStatistics"
        }
      }
    }
  }
};

export const LanguageInput: msRest.CompositeMapper = {
  serializedName: "LanguageInput",
  type: {
    name: "Composite",
    className: "LanguageInput",
    modelProperties: {
      countryHint: {
        serializedName: "countryHint",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      text: {
        serializedName: "text",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LanguageBatchInput: msRest.CompositeMapper = {
  serializedName: "LanguageBatchInput",
  type: {
    name: "Composite",
    className: "LanguageBatchInput",
    modelProperties: {
      documents: {
        serializedName: "documents",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LanguageInput"
            }
          }
        }
      }
    }
  }
};

export const DetectedLanguage: msRest.CompositeMapper = {
  serializedName: "DetectedLanguage",
  type: {
    name: "Composite",
    className: "DetectedLanguage",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      iso6391Name: {
        serializedName: "iso6391Name",
        type: {
          name: "String"
        }
      },
      score: {
        serializedName: "score",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const LanguageBatchResultItem: msRest.CompositeMapper = {
  serializedName: "LanguageBatchResultItem",
  type: {
    name: "Composite",
    className: "LanguageBatchResultItem",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      detectedLanguages: {
        serializedName: "detectedLanguages",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DetectedLanguage"
            }
          }
        }
      },
      statistics: {
        serializedName: "statistics",
        type: {
          name: "Composite",
          className: "DocumentStatistics"
        }
      }
    }
  }
};

export const LanguageBatchResult: msRest.CompositeMapper = {
  serializedName: "LanguageBatchResult",
  type: {
    name: "Composite",
    className: "LanguageBatchResult",
    modelProperties: {
      documents: {
        readOnly: true,
        serializedName: "documents",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LanguageBatchResultItem"
            }
          }
        }
      },
      errors: {
        readOnly: true,
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorRecord"
            }
          }
        }
      },
      statistics: {
        readOnly: true,
        serializedName: "statistics",
        type: {
          name: "Composite",
          className: "RequestStatistics"
        }
      }
    }
  }
};

export const SentimentBatchResultItem: msRest.CompositeMapper = {
  serializedName: "SentimentBatchResultItem",
  type: {
    name: "Composite",
    className: "SentimentBatchResultItem",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      score: {
        serializedName: "score",
        type: {
          name: "Number"
        }
      },
      statistics: {
        serializedName: "statistics",
        type: {
          name: "Composite",
          className: "DocumentStatistics"
        }
      }
    }
  }
};

export const SentimentBatchResult: msRest.CompositeMapper = {
  serializedName: "SentimentBatchResult",
  type: {
    name: "Composite",
    className: "SentimentBatchResult",
    modelProperties: {
      documents: {
        readOnly: true,
        serializedName: "documents",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SentimentBatchResultItem"
            }
          }
        }
      },
      errors: {
        readOnly: true,
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorRecord"
            }
          }
        }
      },
      statistics: {
        readOnly: true,
        serializedName: "statistics",
        type: {
          name: "Composite",
          className: "RequestStatistics"
        }
      }
    }
  }
};
