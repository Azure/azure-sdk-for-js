/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmTimeseriesinsights = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for ProvisioningState.
     * Possible values include: 'Accepted', 'Creating', 'Updating', 'Succeeded',
     * 'Failed', 'Deleting'
     * @readonly
     * @enum {string}
     */
    var ProvisioningState;
    (function (ProvisioningState) {
        ProvisioningState["Accepted"] = "Accepted";
        ProvisioningState["Creating"] = "Creating";
        ProvisioningState["Updating"] = "Updating";
        ProvisioningState["Succeeded"] = "Succeeded";
        ProvisioningState["Failed"] = "Failed";
        ProvisioningState["Deleting"] = "Deleting";
    })(ProvisioningState || (ProvisioningState = {}));
    /**
     * Defines values for SkuName.
     * Possible values include: 'S1', 'S2'
     * @readonly
     * @enum {string}
     */
    var SkuName;
    (function (SkuName) {
        SkuName["S1"] = "S1";
        SkuName["S2"] = "S2";
    })(SkuName || (SkuName = {}));
    /**
     * Defines values for StorageLimitExceededBehavior.
     * Possible values include: 'PurgeOldData', 'PauseIngress'
     * @readonly
     * @enum {string}
     */
    var StorageLimitExceededBehavior;
    (function (StorageLimitExceededBehavior) {
        StorageLimitExceededBehavior["PurgeOldData"] = "PurgeOldData";
        StorageLimitExceededBehavior["PauseIngress"] = "PauseIngress";
    })(StorageLimitExceededBehavior || (StorageLimitExceededBehavior = {}));
    /**
     * Defines values for PropertyType.
     * Possible values include: 'String'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: PropertyType =
     * <PropertyType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var PropertyType;
    (function (PropertyType) {
        PropertyType["String"] = "String";
    })(PropertyType || (PropertyType = {}));
    /**
     * Defines values for IngressState.
     * Possible values include: 'Disabled', 'Ready', 'Running', 'Paused', 'Unknown'
     * @readonly
     * @enum {string}
     */
    var IngressState;
    (function (IngressState) {
        IngressState["Disabled"] = "Disabled";
        IngressState["Ready"] = "Ready";
        IngressState["Running"] = "Running";
        IngressState["Paused"] = "Paused";
        IngressState["Unknown"] = "Unknown";
    })(IngressState || (IngressState = {}));
    /**
     * Defines values for LocalTimestampFormat.
     * Possible values include: 'Embedded', 'Iana', 'TimeSpan'
     * @readonly
     * @enum {string}
     */
    var LocalTimestampFormat;
    (function (LocalTimestampFormat) {
        LocalTimestampFormat["Embedded"] = "Embedded";
        LocalTimestampFormat["Iana"] = "Iana";
        LocalTimestampFormat["TimeSpan"] = "TimeSpan";
    })(LocalTimestampFormat || (LocalTimestampFormat = {}));
    /**
     * Defines values for ReferenceDataKeyPropertyType.
     * Possible values include: 'String', 'Double', 'Bool', 'DateTime'
     * @readonly
     * @enum {string}
     */
    var ReferenceDataKeyPropertyType;
    (function (ReferenceDataKeyPropertyType) {
        ReferenceDataKeyPropertyType["String"] = "String";
        ReferenceDataKeyPropertyType["Double"] = "Double";
        ReferenceDataKeyPropertyType["Bool"] = "Bool";
        ReferenceDataKeyPropertyType["DateTime"] = "DateTime";
    })(ReferenceDataKeyPropertyType || (ReferenceDataKeyPropertyType = {}));
    /**
     * Defines values for DataStringComparisonBehavior.
     * Possible values include: 'Ordinal', 'OrdinalIgnoreCase'
     * @readonly
     * @enum {string}
     */
    var DataStringComparisonBehavior;
    (function (DataStringComparisonBehavior) {
        DataStringComparisonBehavior["Ordinal"] = "Ordinal";
        DataStringComparisonBehavior["OrdinalIgnoreCase"] = "OrdinalIgnoreCase";
    })(DataStringComparisonBehavior || (DataStringComparisonBehavior = {}));
    /**
     * Defines values for AccessPolicyRole.
     * Possible values include: 'Reader', 'Contributor'
     * @readonly
     * @enum {string}
     */
    var AccessPolicyRole;
    (function (AccessPolicyRole) {
        AccessPolicyRole["Reader"] = "Reader";
        AccessPolicyRole["Contributor"] = "Contributor";
    })(AccessPolicyRole || (AccessPolicyRole = {}));

    var index = /*#__PURE__*/Object.freeze({
        get ProvisioningState () { return ProvisioningState; },
        get SkuName () { return SkuName; },
        get StorageLimitExceededBehavior () { return StorageLimitExceededBehavior; },
        get PropertyType () { return PropertyType; },
        get IngressState () { return IngressState; },
        get LocalTimestampFormat () { return LocalTimestampFormat; },
        get ReferenceDataKeyPropertyType () { return ReferenceDataKeyPropertyType; },
        get DataStringComparisonBehavior () { return DataStringComparisonBehavior; },
        get AccessPolicyRole () { return AccessPolicyRole; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    readOnly: true,
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    readOnly: true,
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    readOnly: true,
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    readOnly: true,
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    readOnly: true,
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TrackedResource = {
        serializedName: "TrackedResource",
        type: {
            name: "Composite",
            className: "TrackedResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var ResourceProperties = {
        serializedName: "ResourceProperties",
        type: {
            name: "Composite",
            className: "ResourceProperties",
            modelProperties: {
                provisioningState: {
                    serializedName: "provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Accepted",
                            "Creating",
                            "Updating",
                            "Succeeded",
                            "Failed",
                            "Deleting"
                        ]
                    }
                },
                creationTime: {
                    readOnly: true,
                    serializedName: "creationTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var Sku = {
        serializedName: "Sku",
        type: {
            name: "Composite",
            className: "Sku",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "S1",
                            "S2"
                        ]
                    }
                },
                capacity: {
                    required: true,
                    serializedName: "capacity",
                    constraints: {
                        InclusiveMaximum: 10,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var CreateOrUpdateTrackedResourceProperties = {
        serializedName: "CreateOrUpdateTrackedResourceProperties",
        type: {
            name: "Composite",
            className: "CreateOrUpdateTrackedResourceProperties",
            modelProperties: {
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var PartitionKeyProperty = {
        serializedName: "PartitionKeyProperty",
        type: {
            name: "Composite",
            className: "PartitionKeyProperty",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EnvironmentCreateOrUpdateParameters = {
        serializedName: "EnvironmentCreateOrUpdateParameters",
        type: {
            name: "Composite",
            className: "EnvironmentCreateOrUpdateParameters",
            modelProperties: __assign({}, CreateOrUpdateTrackedResourceProperties.type.modelProperties, { sku: {
                    required: true,
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }, dataRetentionTime: {
                    required: true,
                    serializedName: "properties.dataRetentionTime",
                    type: {
                        name: "TimeSpan"
                    }
                }, storageLimitExceededBehavior: {
                    serializedName: "properties.storageLimitExceededBehavior",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "PurgeOldData",
                            "PauseIngress"
                        ]
                    }
                }, partitionKeyProperties: {
                    serializedName: "properties.partitionKeyProperties",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PartitionKeyProperty"
                            }
                        }
                    }
                } })
        }
    };
    var EnvironmentUpdateParameters = {
        serializedName: "EnvironmentUpdateParameters",
        type: {
            name: "Composite",
            className: "EnvironmentUpdateParameters",
            modelProperties: {
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                dataRetentionTime: {
                    serializedName: "properties.dataRetentionTime",
                    type: {
                        name: "TimeSpan"
                    }
                },
                storageLimitExceededBehavior: {
                    serializedName: "properties.storageLimitExceededBehavior",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "PurgeOldData",
                            "PauseIngress"
                        ]
                    }
                },
                partitionKeyProperties: {
                    serializedName: "properties.partitionKeyProperties",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PartitionKeyProperty"
                            }
                        }
                    }
                }
            }
        }
    };
    var EnvironmentStateDetails = {
        serializedName: "EnvironmentStateDetails",
        type: {
            name: "Composite",
            className: "EnvironmentStateDetails",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IngressEnvironmentStatus = {
        serializedName: "IngressEnvironmentStatus",
        type: {
            name: "Composite",
            className: "IngressEnvironmentStatus",
            modelProperties: {
                state: {
                    serializedName: "state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Disabled",
                            "Ready",
                            "Running",
                            "Paused",
                            "Unknown"
                        ]
                    }
                },
                stateDetails: {
                    serializedName: "stateDetails",
                    type: {
                        name: "Composite",
                        className: "EnvironmentStateDetails"
                    }
                }
            }
        }
    };
    var EnvironmentStatus = {
        serializedName: "EnvironmentStatus",
        type: {
            name: "Composite",
            className: "EnvironmentStatus",
            modelProperties: {
                ingress: {
                    serializedName: "ingress",
                    type: {
                        name: "Composite",
                        className: "IngressEnvironmentStatus"
                    }
                }
            }
        }
    };
    var EnvironmentResource = {
        serializedName: "EnvironmentResource",
        type: {
            name: "Composite",
            className: "EnvironmentResource",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }, dataRetentionTime: {
                    required: true,
                    serializedName: "properties.dataRetentionTime",
                    type: {
                        name: "TimeSpan"
                    }
                }, storageLimitExceededBehavior: {
                    serializedName: "properties.storageLimitExceededBehavior",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "PurgeOldData",
                            "PauseIngress"
                        ]
                    }
                }, partitionKeyProperties: {
                    serializedName: "properties.partitionKeyProperties",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PartitionKeyProperty"
                            }
                        }
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Accepted",
                            "Creating",
                            "Updating",
                            "Succeeded",
                            "Failed",
                            "Deleting"
                        ]
                    }
                }, creationTime: {
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, dataAccessId: {
                    readOnly: true,
                    serializedName: "properties.dataAccessId",
                    type: {
                        name: "Uuid"
                    }
                }, dataAccessFqdn: {
                    readOnly: true,
                    serializedName: "properties.dataAccessFqdn",
                    type: {
                        name: "String"
                    }
                }, status: {
                    serializedName: "properties.status",
                    type: {
                        name: "Composite",
                        className: "EnvironmentStatus"
                    }
                } })
        }
    };
    var EnvironmentListResponse = {
        serializedName: "EnvironmentListResponse",
        type: {
            name: "Composite",
            className: "EnvironmentListResponse",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EnvironmentResource"
                            }
                        }
                    }
                }
            }
        }
    };
    var EventSourceCreateOrUpdateParameters = {
        serializedName: "EventSourceCreateOrUpdateParameters",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "kind",
                clientName: "kind"
            },
            uberParent: "EventSourceCreateOrUpdateParameters",
            className: "EventSourceCreateOrUpdateParameters",
            modelProperties: __assign({}, CreateOrUpdateTrackedResourceProperties.type.modelProperties, { kind: {
                    required: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var EventHubEventSourceCreateOrUpdateParameters = {
        serializedName: "Microsoft.EventHub",
        type: {
            name: "Composite",
            className: "EventHubEventSourceCreateOrUpdateParameters",
            modelProperties: __assign({}, EventSourceCreateOrUpdateParameters.type.modelProperties, { provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Accepted",
                            "Creating",
                            "Updating",
                            "Succeeded",
                            "Failed",
                            "Deleting"
                        ]
                    }
                }, creationTime: {
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, timestampPropertyName: {
                    serializedName: "properties.timestampPropertyName",
                    type: {
                        name: "String"
                    }
                }, eventSourceResourceId: {
                    required: true,
                    serializedName: "properties.eventSourceResourceId",
                    type: {
                        name: "String"
                    }
                }, serviceBusNamespace: {
                    required: true,
                    serializedName: "properties.serviceBusNamespace",
                    type: {
                        name: "String"
                    }
                }, eventHubName: {
                    required: true,
                    serializedName: "properties.eventHubName",
                    type: {
                        name: "String"
                    }
                }, consumerGroupName: {
                    required: true,
                    serializedName: "properties.consumerGroupName",
                    type: {
                        name: "String"
                    }
                }, keyName: {
                    required: true,
                    serializedName: "properties.keyName",
                    type: {
                        name: "String"
                    }
                }, sharedAccessKey: {
                    required: true,
                    serializedName: "properties.sharedAccessKey",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var IoTHubEventSourceCreateOrUpdateParameters = {
        serializedName: "Microsoft.IoTHub",
        type: {
            name: "Composite",
            className: "IoTHubEventSourceCreateOrUpdateParameters",
            modelProperties: __assign({}, EventSourceCreateOrUpdateParameters.type.modelProperties, { provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Accepted",
                            "Creating",
                            "Updating",
                            "Succeeded",
                            "Failed",
                            "Deleting"
                        ]
                    }
                }, creationTime: {
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, timestampPropertyName: {
                    serializedName: "properties.timestampPropertyName",
                    type: {
                        name: "String"
                    }
                }, eventSourceResourceId: {
                    required: true,
                    serializedName: "properties.eventSourceResourceId",
                    type: {
                        name: "String"
                    }
                }, iotHubName: {
                    required: true,
                    serializedName: "properties.iotHubName",
                    type: {
                        name: "String"
                    }
                }, consumerGroupName: {
                    required: true,
                    serializedName: "properties.consumerGroupName",
                    type: {
                        name: "String"
                    }
                }, keyName: {
                    required: true,
                    serializedName: "properties.keyName",
                    type: {
                        name: "String"
                    }
                }, sharedAccessKey: {
                    required: true,
                    serializedName: "properties.sharedAccessKey",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var EventSourceUpdateParameters = {
        serializedName: "EventSourceUpdateParameters",
        type: {
            name: "Composite",
            className: "EventSourceUpdateParameters",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var EventHubEventSourceUpdateParameters = {
        serializedName: "EventHubEventSourceUpdateParameters",
        type: {
            name: "Composite",
            className: "EventHubEventSourceUpdateParameters",
            modelProperties: __assign({}, EventSourceUpdateParameters.type.modelProperties, { timestampPropertyName: {
                    serializedName: "properties.timestampPropertyName",
                    type: {
                        name: "String"
                    }
                }, localTimestamp: {
                    serializedName: "properties.localTimestamp",
                    type: {
                        name: "Composite",
                        className: "LocalTimestamp"
                    }
                }, sharedAccessKey: {
                    serializedName: "properties.sharedAccessKey",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var IoTHubEventSourceUpdateParameters = {
        serializedName: "IoTHubEventSourceUpdateParameters",
        type: {
            name: "Composite",
            className: "IoTHubEventSourceUpdateParameters",
            modelProperties: __assign({}, EventSourceUpdateParameters.type.modelProperties, { timestampPropertyName: {
                    serializedName: "properties.timestampPropertyName",
                    type: {
                        name: "String"
                    }
                }, localTimestamp: {
                    serializedName: "properties.localTimestamp",
                    type: {
                        name: "Composite",
                        className: "LocalTimestamp"
                    }
                }, sharedAccessKey: {
                    serializedName: "properties.sharedAccessKey",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var EventSourceResource = {
        serializedName: "EventSourceResource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "kind",
                clientName: "kind"
            },
            uberParent: "EventSourceResource",
            className: "EventSourceResource",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { kind: {
                    required: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var EventSourceListResponse = {
        serializedName: "EventSourceListResponse",
        type: {
            name: "Composite",
            className: "EventSourceListResponse",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: {
                                    serializedName: "kind",
                                    clientName: "kind"
                                },
                                uberParent: "EventSourceResource",
                                className: "EventSourceResource"
                            }
                        }
                    }
                }
            }
        }
    };
    var EventHubEventSourceResource = {
        serializedName: "Microsoft.EventHub",
        type: {
            name: "Composite",
            className: "EventHubEventSourceResource",
            modelProperties: __assign({}, EventSourceResource.type.modelProperties, { provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Accepted",
                            "Creating",
                            "Updating",
                            "Succeeded",
                            "Failed",
                            "Deleting"
                        ]
                    }
                }, creationTime: {
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, timestampPropertyName: {
                    serializedName: "properties.timestampPropertyName",
                    type: {
                        name: "String"
                    }
                }, eventSourceResourceId: {
                    required: true,
                    serializedName: "properties.eventSourceResourceId",
                    type: {
                        name: "String"
                    }
                }, serviceBusNamespace: {
                    required: true,
                    serializedName: "properties.serviceBusNamespace",
                    type: {
                        name: "String"
                    }
                }, eventHubName: {
                    required: true,
                    serializedName: "properties.eventHubName",
                    type: {
                        name: "String"
                    }
                }, consumerGroupName: {
                    required: true,
                    serializedName: "properties.consumerGroupName",
                    type: {
                        name: "String"
                    }
                }, keyName: {
                    required: true,
                    serializedName: "properties.keyName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var IoTHubEventSourceResource = {
        serializedName: "Microsoft.IotHub",
        type: {
            name: "Composite",
            className: "IoTHubEventSourceResource",
            modelProperties: __assign({}, EventSourceResource.type.modelProperties, { provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Accepted",
                            "Creating",
                            "Updating",
                            "Succeeded",
                            "Failed",
                            "Deleting"
                        ]
                    }
                }, creationTime: {
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, timestampPropertyName: {
                    serializedName: "properties.timestampPropertyName",
                    type: {
                        name: "String"
                    }
                }, eventSourceResourceId: {
                    required: true,
                    serializedName: "properties.eventSourceResourceId",
                    type: {
                        name: "String"
                    }
                }, iotHubName: {
                    required: true,
                    serializedName: "properties.iotHubName",
                    type: {
                        name: "String"
                    }
                }, consumerGroupName: {
                    required: true,
                    serializedName: "properties.consumerGroupName",
                    type: {
                        name: "String"
                    }
                }, keyName: {
                    required: true,
                    serializedName: "properties.keyName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var EventSourceCommonProperties = {
        serializedName: "EventSourceCommonProperties",
        type: {
            name: "Composite",
            className: "EventSourceCommonProperties",
            modelProperties: __assign({}, ResourceProperties.type.modelProperties, { timestampPropertyName: {
                    serializedName: "timestampPropertyName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var AzureEventSourceProperties = {
        serializedName: "AzureEventSourceProperties",
        type: {
            name: "Composite",
            className: "AzureEventSourceProperties",
            modelProperties: __assign({}, EventSourceCommonProperties.type.modelProperties, { eventSourceResourceId: {
                    required: true,
                    serializedName: "eventSourceResourceId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var EventHubEventSourceCommonProperties = {
        serializedName: "EventHubEventSourceCommonProperties",
        type: {
            name: "Composite",
            className: "EventHubEventSourceCommonProperties",
            modelProperties: __assign({}, AzureEventSourceProperties.type.modelProperties, { serviceBusNamespace: {
                    required: true,
                    serializedName: "serviceBusNamespace",
                    type: {
                        name: "String"
                    }
                }, eventHubName: {
                    required: true,
                    serializedName: "eventHubName",
                    type: {
                        name: "String"
                    }
                }, consumerGroupName: {
                    required: true,
                    serializedName: "consumerGroupName",
                    type: {
                        name: "String"
                    }
                }, keyName: {
                    required: true,
                    serializedName: "keyName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var IoTHubEventSourceCommonProperties = {
        serializedName: "IoTHubEventSourceCommonProperties",
        type: {
            name: "Composite",
            className: "IoTHubEventSourceCommonProperties",
            modelProperties: __assign({}, AzureEventSourceProperties.type.modelProperties, { iotHubName: {
                    required: true,
                    serializedName: "iotHubName",
                    type: {
                        name: "String"
                    }
                }, consumerGroupName: {
                    required: true,
                    serializedName: "consumerGroupName",
                    type: {
                        name: "String"
                    }
                }, keyName: {
                    required: true,
                    serializedName: "keyName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var LocalTimestampTimeZoneOffset = {
        serializedName: "LocalTimestamp_timeZoneOffset",
        type: {
            name: "Composite",
            className: "LocalTimestampTimeZoneOffset",
            modelProperties: {
                propertyName: {
                    serializedName: "propertyName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LocalTimestamp = {
        serializedName: "LocalTimestamp",
        type: {
            name: "Composite",
            className: "LocalTimestamp",
            modelProperties: {
                format: {
                    serializedName: "format",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Embedded",
                            "Iana",
                            "TimeSpan"
                        ]
                    }
                },
                timeZoneOffset: {
                    serializedName: "timeZoneOffset",
                    type: {
                        name: "Composite",
                        className: "LocalTimestampTimeZoneOffset"
                    }
                }
            }
        }
    };
    var EventSourceMutableProperties = {
        serializedName: "EventSourceMutableProperties",
        type: {
            name: "Composite",
            className: "EventSourceMutableProperties",
            modelProperties: {
                timestampPropertyName: {
                    serializedName: "timestampPropertyName",
                    type: {
                        name: "String"
                    }
                },
                localTimestamp: {
                    serializedName: "localTimestamp",
                    type: {
                        name: "Composite",
                        className: "LocalTimestamp"
                    }
                }
            }
        }
    };
    var ReferenceDataSetKeyProperty = {
        serializedName: "ReferenceDataSetKeyProperty",
        type: {
            name: "Composite",
            className: "ReferenceDataSetKeyProperty",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "String",
                            "Double",
                            "Bool",
                            "DateTime"
                        ]
                    }
                }
            }
        }
    };
    var ReferenceDataSetCreateOrUpdateParameters = {
        serializedName: "ReferenceDataSetCreateOrUpdateParameters",
        type: {
            name: "Composite",
            className: "ReferenceDataSetCreateOrUpdateParameters",
            modelProperties: __assign({}, CreateOrUpdateTrackedResourceProperties.type.modelProperties, { keyProperties: {
                    required: true,
                    serializedName: "properties.keyProperties",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReferenceDataSetKeyProperty"
                            }
                        }
                    }
                }, dataStringComparisonBehavior: {
                    serializedName: "properties.dataStringComparisonBehavior",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Ordinal",
                            "OrdinalIgnoreCase"
                        ]
                    }
                } })
        }
    };
    var ReferenceDataSetUpdateParameters = {
        serializedName: "ReferenceDataSetUpdateParameters",
        type: {
            name: "Composite",
            className: "ReferenceDataSetUpdateParameters",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ReferenceDataSetResource = {
        serializedName: "ReferenceDataSetResource",
        type: {
            name: "Composite",
            className: "ReferenceDataSetResource",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { keyProperties: {
                    required: true,
                    serializedName: "properties.keyProperties",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReferenceDataSetKeyProperty"
                            }
                        }
                    }
                }, dataStringComparisonBehavior: {
                    serializedName: "properties.dataStringComparisonBehavior",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Ordinal",
                            "OrdinalIgnoreCase"
                        ]
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Accepted",
                            "Creating",
                            "Updating",
                            "Succeeded",
                            "Failed",
                            "Deleting"
                        ]
                    }
                }, creationTime: {
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var ReferenceDataSetListResponse = {
        serializedName: "ReferenceDataSetListResponse",
        type: {
            name: "Composite",
            className: "ReferenceDataSetListResponse",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReferenceDataSetResource"
                            }
                        }
                    }
                }
            }
        }
    };
    var AccessPolicyCreateOrUpdateParameters = {
        serializedName: "AccessPolicyCreateOrUpdateParameters",
        type: {
            name: "Composite",
            className: "AccessPolicyCreateOrUpdateParameters",
            modelProperties: {
                principalObjectId: {
                    serializedName: "properties.principalObjectId",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                },
                roles: {
                    serializedName: "properties.roles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Enum",
                                allowedValues: [
                                    "Reader",
                                    "Contributor"
                                ]
                            }
                        }
                    }
                }
            }
        }
    };
    var AccessPolicyUpdateParameters = {
        serializedName: "AccessPolicyUpdateParameters",
        type: {
            name: "Composite",
            className: "AccessPolicyUpdateParameters",
            modelProperties: {
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                },
                roles: {
                    serializedName: "properties.roles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Enum",
                                allowedValues: [
                                    "Reader",
                                    "Contributor"
                                ]
                            }
                        }
                    }
                }
            }
        }
    };
    var AccessPolicyResource = {
        serializedName: "AccessPolicyResource",
        type: {
            name: "Composite",
            className: "AccessPolicyResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { principalObjectId: {
                    serializedName: "properties.principalObjectId",
                    type: {
                        name: "String"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, roles: {
                    serializedName: "properties.roles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Enum",
                                allowedValues: [
                                    "Reader",
                                    "Contributor"
                                ]
                            }
                        }
                    }
                } })
        }
    };
    var AccessPolicyListResponse = {
        serializedName: "AccessPolicyListResponse",
        type: {
            name: "Composite",
            className: "AccessPolicyListResponse",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AccessPolicyResource"
                            }
                        }
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var discriminators = {
        'CreateOrUpdateTrackedResourceProperties.EventSourceCreateOrUpdateParameters': EventSourceCreateOrUpdateParameters,
        'CreateOrUpdateTrackedResourceProperties.Microsoft.EventHub': EventHubEventSourceCreateOrUpdateParameters,
        'CreateOrUpdateTrackedResourceProperties.Microsoft.IoTHub': IoTHubEventSourceCreateOrUpdateParameters,
        'BaseResource.EventSourceResource': EventSourceResource,
        'BaseResource.Microsoft.EventHub': EventHubEventSourceResource,
        'BaseResource.Microsoft.IotHub': IoTHubEventSourceResource
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        Resource: Resource,
        TrackedResource: TrackedResource,
        ResourceProperties: ResourceProperties,
        Sku: Sku,
        CreateOrUpdateTrackedResourceProperties: CreateOrUpdateTrackedResourceProperties,
        PartitionKeyProperty: PartitionKeyProperty,
        EnvironmentCreateOrUpdateParameters: EnvironmentCreateOrUpdateParameters,
        EnvironmentUpdateParameters: EnvironmentUpdateParameters,
        EnvironmentStateDetails: EnvironmentStateDetails,
        IngressEnvironmentStatus: IngressEnvironmentStatus,
        EnvironmentStatus: EnvironmentStatus,
        EnvironmentResource: EnvironmentResource,
        EnvironmentListResponse: EnvironmentListResponse,
        EventSourceCreateOrUpdateParameters: EventSourceCreateOrUpdateParameters,
        EventHubEventSourceCreateOrUpdateParameters: EventHubEventSourceCreateOrUpdateParameters,
        IoTHubEventSourceCreateOrUpdateParameters: IoTHubEventSourceCreateOrUpdateParameters,
        EventSourceUpdateParameters: EventSourceUpdateParameters,
        EventHubEventSourceUpdateParameters: EventHubEventSourceUpdateParameters,
        IoTHubEventSourceUpdateParameters: IoTHubEventSourceUpdateParameters,
        EventSourceResource: EventSourceResource,
        EventSourceListResponse: EventSourceListResponse,
        EventHubEventSourceResource: EventHubEventSourceResource,
        IoTHubEventSourceResource: IoTHubEventSourceResource,
        EventSourceCommonProperties: EventSourceCommonProperties,
        AzureEventSourceProperties: AzureEventSourceProperties,
        EventHubEventSourceCommonProperties: EventHubEventSourceCommonProperties,
        IoTHubEventSourceCommonProperties: IoTHubEventSourceCommonProperties,
        LocalTimestampTimeZoneOffset: LocalTimestampTimeZoneOffset,
        LocalTimestamp: LocalTimestamp,
        EventSourceMutableProperties: EventSourceMutableProperties,
        ReferenceDataSetKeyProperty: ReferenceDataSetKeyProperty,
        ReferenceDataSetCreateOrUpdateParameters: ReferenceDataSetCreateOrUpdateParameters,
        ReferenceDataSetUpdateParameters: ReferenceDataSetUpdateParameters,
        ReferenceDataSetResource: ReferenceDataSetResource,
        ReferenceDataSetListResponse: ReferenceDataSetListResponse,
        AccessPolicyCreateOrUpdateParameters: AccessPolicyCreateOrUpdateParameters,
        AccessPolicyUpdateParameters: AccessPolicyUpdateParameters,
        AccessPolicyResource: AccessPolicyResource,
        AccessPolicyListResponse: AccessPolicyListResponse,
        OperationListResult: OperationListResult,
        discriminators: discriminators
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        OperationListResult: OperationListResult,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var accessPolicyName0 = {
        parameterPath: "accessPolicyName",
        mapper: {
            required: true,
            serializedName: "accessPolicyName",
            constraints: {
                MaxLength: 90,
                MinLength: 1,
                Pattern: /^[-\w\._\(\)]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var accessPolicyName1 = {
        parameterPath: "accessPolicyName",
        mapper: {
            required: true,
            serializedName: "accessPolicyName",
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var environmentName0 = {
        parameterPath: "environmentName",
        mapper: {
            required: true,
            serializedName: "environmentName",
            constraints: {
                MaxLength: 90,
                MinLength: 1,
                Pattern: /^[-\w\._\(\)]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var environmentName1 = {
        parameterPath: "environmentName",
        mapper: {
            required: true,
            serializedName: "environmentName",
            type: {
                name: "String"
            }
        }
    };
    var eventSourceName0 = {
        parameterPath: "eventSourceName",
        mapper: {
            required: true,
            serializedName: "eventSourceName",
            constraints: {
                MaxLength: 90,
                MinLength: 1,
                Pattern: /^[-\w\._\(\)]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var eventSourceName1 = {
        parameterPath: "eventSourceName",
        mapper: {
            required: true,
            serializedName: "eventSourceName",
            type: {
                name: "String"
            }
        }
    };
    var expand = {
        parameterPath: [
            "options",
            "expand"
        ],
        mapper: {
            serializedName: "$expand",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var referenceDataSetName0 = {
        parameterPath: "referenceDataSetName",
        mapper: {
            required: true,
            serializedName: "referenceDataSetName",
            constraints: {
                MaxLength: 63,
                MinLength: 3,
                Pattern: /^[A-Za-z0-9]/
            },
            type: {
                name: "String"
            }
        }
    };
    var referenceDataSetName1 = {
        parameterPath: "referenceDataSetName",
        mapper: {
            required: true,
            serializedName: "referenceDataSetName",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {TimeSeriesInsightsClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.TimeSeriesInsights/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        EnvironmentCreateOrUpdateParameters: EnvironmentCreateOrUpdateParameters,
        CreateOrUpdateTrackedResourceProperties: CreateOrUpdateTrackedResourceProperties,
        Sku: Sku,
        PartitionKeyProperty: PartitionKeyProperty,
        EnvironmentResource: EnvironmentResource,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        EnvironmentStatus: EnvironmentStatus,
        IngressEnvironmentStatus: IngressEnvironmentStatus,
        EnvironmentStateDetails: EnvironmentStateDetails,
        CloudError: CloudError,
        EnvironmentUpdateParameters: EnvironmentUpdateParameters,
        EnvironmentListResponse: EnvironmentListResponse,
        EventSourceCreateOrUpdateParameters: EventSourceCreateOrUpdateParameters,
        EventHubEventSourceCreateOrUpdateParameters: EventHubEventSourceCreateOrUpdateParameters,
        IoTHubEventSourceCreateOrUpdateParameters: IoTHubEventSourceCreateOrUpdateParameters,
        EventSourceResource: EventSourceResource,
        EventHubEventSourceResource: EventHubEventSourceResource,
        IoTHubEventSourceResource: IoTHubEventSourceResource,
        ReferenceDataSetCreateOrUpdateParameters: ReferenceDataSetCreateOrUpdateParameters,
        ReferenceDataSetKeyProperty: ReferenceDataSetKeyProperty,
        ReferenceDataSetResource: ReferenceDataSetResource,
        AccessPolicyResource: AccessPolicyResource
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Environments. */
    var Environments = /** @class */ (function () {
        /**
         * Create a Environments.
         * @param {TimeSeriesInsightsClientContext} client Reference to the service client.
         */
        function Environments(client) {
            this.client = client;
        }
        /**
         * Create or update an environment in the specified subscription and resource group.
         * @param resourceGroupName Name of an Azure Resource group.
         * @param environmentName Name of the environment
         * @param parameters Parameters for creating an environment resource.
         * @param [options] The optional parameters
         * @returns Promise<Models.EnvironmentsCreateOrUpdateResponse>
         */
        Environments.prototype.createOrUpdate = function (resourceGroupName$$1, environmentName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, environmentName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Environments.prototype.get = function (resourceGroupName$$1, environmentName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                environmentName: environmentName,
                options: options
            }, getOperationSpec, callback);
        };
        /**
         * Updates the environment with the specified name in the specified subscription and resource
         * group.
         * @param resourceGroupName Name of an Azure Resource group.
         * @param environmentName The name of the Time Series Insights environment associated with the
         * specified resource group.
         * @param environmentUpdateParameters Request object that contains the updated information for the
         * environment.
         * @param [options] The optional parameters
         * @returns Promise<Models.EnvironmentsUpdateResponse>
         */
        Environments.prototype.update = function (resourceGroupName$$1, environmentName, environmentUpdateParameters, options) {
            return this.beginUpdate(resourceGroupName$$1, environmentName, environmentUpdateParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Environments.prototype.deleteMethod = function (resourceGroupName$$1, environmentName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                environmentName: environmentName,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        Environments.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Environments.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec, callback);
        };
        /**
         * Create or update an environment in the specified subscription and resource group.
         * @param resourceGroupName Name of an Azure Resource group.
         * @param environmentName Name of the environment
         * @param parameters Parameters for creating an environment resource.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Environments.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, environmentName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                environmentName: environmentName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * Updates the environment with the specified name in the specified subscription and resource
         * group.
         * @param resourceGroupName Name of an Azure Resource group.
         * @param environmentName The name of the Time Series Insights environment associated with the
         * specified resource group.
         * @param environmentUpdateParameters Request object that contains the updated information for the
         * environment.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Environments.prototype.beginUpdate = function (resourceGroupName$$1, environmentName, environmentUpdateParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                environmentName: environmentName,
                environmentUpdateParameters: environmentUpdateParameters,
                options: options
            }, beginUpdateOperationSpec, options);
        };
        return Environments;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            environmentName1
        ],
        queryParameters: [
            expand,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EnvironmentResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            environmentName1
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EnvironmentListResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listBySubscriptionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.TimeSeriesInsights/environments",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EnvironmentListResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            environmentName0
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, EnvironmentCreateOrUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: EnvironmentResource
            },
            201: {
                bodyMapper: EnvironmentResource
            },
            404: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginUpdateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            environmentName1
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "environmentUpdateParameters",
            mapper: __assign({}, EnvironmentUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: EnvironmentResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        EventSourceCreateOrUpdateParameters: EventSourceCreateOrUpdateParameters,
        CreateOrUpdateTrackedResourceProperties: CreateOrUpdateTrackedResourceProperties,
        EventSourceResource: EventSourceResource,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        EventSourceUpdateParameters: EventSourceUpdateParameters,
        EventSourceListResponse: EventSourceListResponse,
        EnvironmentCreateOrUpdateParameters: EnvironmentCreateOrUpdateParameters,
        Sku: Sku,
        PartitionKeyProperty: PartitionKeyProperty,
        EnvironmentResource: EnvironmentResource,
        EnvironmentStatus: EnvironmentStatus,
        IngressEnvironmentStatus: IngressEnvironmentStatus,
        EnvironmentStateDetails: EnvironmentStateDetails,
        EventHubEventSourceCreateOrUpdateParameters: EventHubEventSourceCreateOrUpdateParameters,
        IoTHubEventSourceCreateOrUpdateParameters: IoTHubEventSourceCreateOrUpdateParameters,
        EventHubEventSourceUpdateParameters: EventHubEventSourceUpdateParameters,
        LocalTimestamp: LocalTimestamp,
        LocalTimestampTimeZoneOffset: LocalTimestampTimeZoneOffset,
        IoTHubEventSourceUpdateParameters: IoTHubEventSourceUpdateParameters,
        EventHubEventSourceResource: EventHubEventSourceResource,
        IoTHubEventSourceResource: IoTHubEventSourceResource,
        ReferenceDataSetCreateOrUpdateParameters: ReferenceDataSetCreateOrUpdateParameters,
        ReferenceDataSetKeyProperty: ReferenceDataSetKeyProperty,
        ReferenceDataSetResource: ReferenceDataSetResource,
        AccessPolicyResource: AccessPolicyResource
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a EventSources. */
    var EventSources = /** @class */ (function () {
        /**
         * Create a EventSources.
         * @param {TimeSeriesInsightsClientContext} client Reference to the service client.
         */
        function EventSources(client) {
            this.client = client;
        }
        EventSources.prototype.createOrUpdate = function (resourceGroupName$$1, environmentName, eventSourceName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                environmentName: environmentName,
                eventSourceName: eventSourceName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        EventSources.prototype.get = function (resourceGroupName$$1, environmentName, eventSourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                environmentName: environmentName,
                eventSourceName: eventSourceName,
                options: options
            }, getOperationSpec$1, callback);
        };
        EventSources.prototype.update = function (resourceGroupName$$1, environmentName, eventSourceName, eventSourceUpdateParameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                environmentName: environmentName,
                eventSourceName: eventSourceName,
                eventSourceUpdateParameters: eventSourceUpdateParameters,
                options: options
            }, updateOperationSpec, callback);
        };
        EventSources.prototype.deleteMethod = function (resourceGroupName$$1, environmentName, eventSourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                environmentName: environmentName,
                eventSourceName: eventSourceName,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        EventSources.prototype.listByEnvironment = function (resourceGroupName$$1, environmentName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                environmentName: environmentName,
                options: options
            }, listByEnvironmentOperationSpec, callback);
        };
        return EventSources;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/eventSources/{eventSourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            environmentName1,
            eventSourceName0
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, EventSourceCreateOrUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: EventSourceResource
            },
            201: {
                bodyMapper: EventSourceResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/eventSources/{eventSourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            environmentName1,
            eventSourceName1
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EventSourceResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/eventSources/{eventSourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            environmentName1,
            eventSourceName1
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "eventSourceUpdateParameters",
            mapper: __assign({}, EventSourceUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: EventSourceResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/eventSources/{eventSourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            environmentName1,
            eventSourceName1
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listByEnvironmentOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/eventSources",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            environmentName1
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EventSourceListResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        ReferenceDataSetCreateOrUpdateParameters: ReferenceDataSetCreateOrUpdateParameters,
        CreateOrUpdateTrackedResourceProperties: CreateOrUpdateTrackedResourceProperties,
        ReferenceDataSetKeyProperty: ReferenceDataSetKeyProperty,
        ReferenceDataSetResource: ReferenceDataSetResource,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        ReferenceDataSetUpdateParameters: ReferenceDataSetUpdateParameters,
        ReferenceDataSetListResponse: ReferenceDataSetListResponse,
        EnvironmentCreateOrUpdateParameters: EnvironmentCreateOrUpdateParameters,
        Sku: Sku,
        PartitionKeyProperty: PartitionKeyProperty,
        EnvironmentResource: EnvironmentResource,
        EnvironmentStatus: EnvironmentStatus,
        IngressEnvironmentStatus: IngressEnvironmentStatus,
        EnvironmentStateDetails: EnvironmentStateDetails,
        EventSourceCreateOrUpdateParameters: EventSourceCreateOrUpdateParameters,
        EventHubEventSourceCreateOrUpdateParameters: EventHubEventSourceCreateOrUpdateParameters,
        IoTHubEventSourceCreateOrUpdateParameters: IoTHubEventSourceCreateOrUpdateParameters,
        EventSourceResource: EventSourceResource,
        EventHubEventSourceResource: EventHubEventSourceResource,
        IoTHubEventSourceResource: IoTHubEventSourceResource,
        AccessPolicyResource: AccessPolicyResource
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ReferenceDataSets. */
    var ReferenceDataSets = /** @class */ (function () {
        /**
         * Create a ReferenceDataSets.
         * @param {TimeSeriesInsightsClientContext} client Reference to the service client.
         */
        function ReferenceDataSets(client) {
            this.client = client;
        }
        ReferenceDataSets.prototype.createOrUpdate = function (resourceGroupName$$1, environmentName, referenceDataSetName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                environmentName: environmentName,
                referenceDataSetName: referenceDataSetName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$1, callback);
        };
        ReferenceDataSets.prototype.get = function (resourceGroupName$$1, environmentName, referenceDataSetName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                environmentName: environmentName,
                referenceDataSetName: referenceDataSetName,
                options: options
            }, getOperationSpec$2, callback);
        };
        ReferenceDataSets.prototype.update = function (resourceGroupName$$1, environmentName, referenceDataSetName, referenceDataSetUpdateParameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                environmentName: environmentName,
                referenceDataSetName: referenceDataSetName,
                referenceDataSetUpdateParameters: referenceDataSetUpdateParameters,
                options: options
            }, updateOperationSpec$1, callback);
        };
        ReferenceDataSets.prototype.deleteMethod = function (resourceGroupName$$1, environmentName, referenceDataSetName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                environmentName: environmentName,
                referenceDataSetName: referenceDataSetName,
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        ReferenceDataSets.prototype.listByEnvironment = function (resourceGroupName$$1, environmentName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                environmentName: environmentName,
                options: options
            }, listByEnvironmentOperationSpec$1, callback);
        };
        return ReferenceDataSets;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var createOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/referenceDataSets/{referenceDataSetName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            environmentName1,
            referenceDataSetName0
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ReferenceDataSetCreateOrUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ReferenceDataSetResource
            },
            201: {
                bodyMapper: ReferenceDataSetResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/referenceDataSets/{referenceDataSetName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            environmentName1,
            referenceDataSetName1
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReferenceDataSetResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var updateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/referenceDataSets/{referenceDataSetName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            environmentName1,
            referenceDataSetName1
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "referenceDataSetUpdateParameters",
            mapper: __assign({}, ReferenceDataSetUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ReferenceDataSetResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/referenceDataSets/{referenceDataSetName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            environmentName1,
            referenceDataSetName1
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listByEnvironmentOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/referenceDataSets",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            environmentName1
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReferenceDataSetListResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        AccessPolicyCreateOrUpdateParameters: AccessPolicyCreateOrUpdateParameters,
        AccessPolicyResource: AccessPolicyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        AccessPolicyUpdateParameters: AccessPolicyUpdateParameters,
        AccessPolicyListResponse: AccessPolicyListResponse,
        TrackedResource: TrackedResource,
        EnvironmentResource: EnvironmentResource,
        Sku: Sku,
        PartitionKeyProperty: PartitionKeyProperty,
        EnvironmentStatus: EnvironmentStatus,
        IngressEnvironmentStatus: IngressEnvironmentStatus,
        EnvironmentStateDetails: EnvironmentStateDetails,
        EventSourceResource: EventSourceResource,
        EventHubEventSourceResource: EventHubEventSourceResource,
        IoTHubEventSourceResource: IoTHubEventSourceResource,
        ReferenceDataSetResource: ReferenceDataSetResource,
        ReferenceDataSetKeyProperty: ReferenceDataSetKeyProperty
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a AccessPolicies. */
    var AccessPolicies = /** @class */ (function () {
        /**
         * Create a AccessPolicies.
         * @param {TimeSeriesInsightsClientContext} client Reference to the service client.
         */
        function AccessPolicies(client) {
            this.client = client;
        }
        AccessPolicies.prototype.createOrUpdate = function (resourceGroupName$$1, environmentName, accessPolicyName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                environmentName: environmentName,
                accessPolicyName: accessPolicyName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$2, callback);
        };
        AccessPolicies.prototype.get = function (resourceGroupName$$1, environmentName, accessPolicyName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                environmentName: environmentName,
                accessPolicyName: accessPolicyName,
                options: options
            }, getOperationSpec$3, callback);
        };
        AccessPolicies.prototype.update = function (resourceGroupName$$1, environmentName, accessPolicyName, accessPolicyUpdateParameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                environmentName: environmentName,
                accessPolicyName: accessPolicyName,
                accessPolicyUpdateParameters: accessPolicyUpdateParameters,
                options: options
            }, updateOperationSpec$2, callback);
        };
        AccessPolicies.prototype.deleteMethod = function (resourceGroupName$$1, environmentName, accessPolicyName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                environmentName: environmentName,
                accessPolicyName: accessPolicyName,
                options: options
            }, deleteMethodOperationSpec$3, callback);
        };
        AccessPolicies.prototype.listByEnvironment = function (resourceGroupName$$1, environmentName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                environmentName: environmentName,
                options: options
            }, listByEnvironmentOperationSpec$2, callback);
        };
        return AccessPolicies;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var createOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/accessPolicies/{accessPolicyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            environmentName1,
            accessPolicyName0
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, AccessPolicyCreateOrUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AccessPolicyResource
            },
            201: {
                bodyMapper: AccessPolicyResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/accessPolicies/{accessPolicyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            environmentName1,
            accessPolicyName1
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AccessPolicyResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var updateOperationSpec$2 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/accessPolicies/{accessPolicyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            environmentName1,
            accessPolicyName1
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "accessPolicyUpdateParameters",
            mapper: __assign({}, AccessPolicyUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AccessPolicyResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var deleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/accessPolicies/{accessPolicyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            environmentName1,
            accessPolicyName1
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listByEnvironmentOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/accessPolicies",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            environmentName1
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AccessPolicyListResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-timeseriesinsights";
    var packageVersion = "1.0.0";
    var TimeSeriesInsightsClientContext = /** @class */ (function (_super) {
        __extends(TimeSeriesInsightsClientContext, _super);
        /**
         * Initializes a new instance of the TimeSeriesInsightsClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Azure Subscription ID.
         * @param [options] The parameter options
         */
        function TimeSeriesInsightsClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2017-11-15';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return TimeSeriesInsightsClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var TimeSeriesInsightsClient = /** @class */ (function (_super) {
        __extends(TimeSeriesInsightsClient, _super);
        /**
         * Initializes a new instance of the TimeSeriesInsightsClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Azure Subscription ID.
         * @param [options] The parameter options
         */
        function TimeSeriesInsightsClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.operations = new Operations(_this);
            _this.environments = new Environments(_this);
            _this.eventSources = new EventSources(_this);
            _this.referenceDataSets = new ReferenceDataSets(_this);
            _this.accessPolicies = new AccessPolicies(_this);
            return _this;
        }
        return TimeSeriesInsightsClient;
    }(TimeSeriesInsightsClientContext));

    exports.TimeSeriesInsightsClient = TimeSeriesInsightsClient;
    exports.TimeSeriesInsightsClientContext = TimeSeriesInsightsClientContext;
    exports.TimeSeriesInsightsModels = index;
    exports.TimeSeriesInsightsMappers = mappers;
    exports.Operations = Operations;
    exports.Environments = Environments;
    exports.EventSources = EventSources;
    exports.ReferenceDataSets = ReferenceDataSets;
    exports.AccessPolicies = AccessPolicies;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-timeseriesinsights.js.map
