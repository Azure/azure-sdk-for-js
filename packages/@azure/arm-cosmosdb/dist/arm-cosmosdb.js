/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmCosmosdb = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for DatabaseAccountKind.
     * Possible values include: 'GlobalDocumentDB', 'MongoDB', 'Parse'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: DatabaseAccountKind =
     * <DatabaseAccountKind>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var DatabaseAccountKind;
    (function (DatabaseAccountKind) {
        DatabaseAccountKind["GlobalDocumentDB"] = "GlobalDocumentDB";
        DatabaseAccountKind["MongoDB"] = "MongoDB";
        DatabaseAccountKind["Parse"] = "Parse";
    })(DatabaseAccountKind || (DatabaseAccountKind = {}));
    /**
     * Defines values for DatabaseAccountOfferType.
     * Possible values include: 'Standard'
     * @readonly
     * @enum {string}
     */
    var DatabaseAccountOfferType;
    (function (DatabaseAccountOfferType) {
        DatabaseAccountOfferType["Standard"] = "Standard";
    })(DatabaseAccountOfferType || (DatabaseAccountOfferType = {}));
    /**
     * Defines values for DefaultConsistencyLevel.
     * Possible values include: 'Eventual', 'Session', 'BoundedStaleness',
     * 'Strong', 'ConsistentPrefix'
     * @readonly
     * @enum {string}
     */
    var DefaultConsistencyLevel;
    (function (DefaultConsistencyLevel) {
        DefaultConsistencyLevel["Eventual"] = "Eventual";
        DefaultConsistencyLevel["Session"] = "Session";
        DefaultConsistencyLevel["BoundedStaleness"] = "BoundedStaleness";
        DefaultConsistencyLevel["Strong"] = "Strong";
        DefaultConsistencyLevel["ConsistentPrefix"] = "ConsistentPrefix";
    })(DefaultConsistencyLevel || (DefaultConsistencyLevel = {}));
    /**
     * Defines values for KeyKind.
     * Possible values include: 'primary', 'secondary', 'primaryReadonly',
     * 'secondaryReadonly'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: KeyKind = <KeyKind>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var KeyKind;
    (function (KeyKind) {
        KeyKind["Primary"] = "primary";
        KeyKind["Secondary"] = "secondary";
        KeyKind["PrimaryReadonly"] = "primaryReadonly";
        KeyKind["SecondaryReadonly"] = "secondaryReadonly";
    })(KeyKind || (KeyKind = {}));
    /**
     * Defines values for UnitType.
     * Possible values include: 'Count', 'Bytes', 'Seconds', 'Percent',
     * 'CountPerSecond', 'BytesPerSecond', 'Milliseconds'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: UnitType = <UnitType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var UnitType;
    (function (UnitType) {
        UnitType["Count"] = "Count";
        UnitType["Bytes"] = "Bytes";
        UnitType["Seconds"] = "Seconds";
        UnitType["Percent"] = "Percent";
        UnitType["CountPerSecond"] = "CountPerSecond";
        UnitType["BytesPerSecond"] = "BytesPerSecond";
        UnitType["Milliseconds"] = "Milliseconds";
    })(UnitType || (UnitType = {}));
    /**
     * Defines values for PrimaryAggregationType.
     * Possible values include: 'None', 'Average', 'Total', 'Minimimum', 'Maximum',
     * 'Last'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: PrimaryAggregationType =
     * <PrimaryAggregationType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var PrimaryAggregationType;
    (function (PrimaryAggregationType) {
        PrimaryAggregationType["None"] = "None";
        PrimaryAggregationType["Average"] = "Average";
        PrimaryAggregationType["Total"] = "Total";
        PrimaryAggregationType["Minimimum"] = "Minimimum";
        PrimaryAggregationType["Maximum"] = "Maximum";
        PrimaryAggregationType["Last"] = "Last";
    })(PrimaryAggregationType || (PrimaryAggregationType = {}));

    var index = /*#__PURE__*/Object.freeze({
        get DatabaseAccountKind () { return DatabaseAccountKind; },
        get DatabaseAccountOfferType () { return DatabaseAccountOfferType; },
        get DefaultConsistencyLevel () { return DefaultConsistencyLevel; },
        get KeyKind () { return KeyKind; },
        get UnitType () { return UnitType; },
        get PrimaryAggregationType () { return PrimaryAggregationType; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var ConsistencyPolicy = {
        serializedName: "ConsistencyPolicy",
        type: {
            name: "Composite",
            className: "ConsistencyPolicy",
            modelProperties: {
                defaultConsistencyLevel: {
                    required: true,
                    serializedName: "defaultConsistencyLevel",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Eventual",
                            "Session",
                            "BoundedStaleness",
                            "Strong",
                            "ConsistentPrefix"
                        ]
                    }
                },
                maxStalenessPrefix: {
                    serializedName: "maxStalenessPrefix",
                    constraints: {
                        InclusiveMaximum: 2147483647,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                maxIntervalInSeconds: {
                    serializedName: "maxIntervalInSeconds",
                    constraints: {
                        InclusiveMaximum: 86400,
                        InclusiveMinimum: 5
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Capability = {
        serializedName: "Capability",
        type: {
            name: "Composite",
            className: "Capability",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Location = {
        serializedName: "Location",
        type: {
            name: "Composite",
            className: "Location",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                locationName: {
                    serializedName: "locationName",
                    type: {
                        name: "String"
                    }
                },
                documentEndpoint: {
                    readOnly: true,
                    serializedName: "documentEndpoint",
                    type: {
                        name: "String"
                    }
                },
                provisioningState: {
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                failoverPriority: {
                    serializedName: "failoverPriority",
                    constraints: {
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var FailoverPolicy = {
        serializedName: "FailoverPolicy",
        type: {
            name: "Composite",
            className: "FailoverPolicy",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                locationName: {
                    serializedName: "locationName",
                    type: {
                        name: "String"
                    }
                },
                failoverPriority: {
                    serializedName: "failoverPriority",
                    constraints: {
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var VirtualNetworkRule = {
        serializedName: "VirtualNetworkRule",
        type: {
            name: "Composite",
            className: "VirtualNetworkRule",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var DatabaseAccount = {
        serializedName: "DatabaseAccount",
        type: {
            name: "Composite",
            className: "DatabaseAccount",
            modelProperties: __assign({}, Resource.type.modelProperties, { kind: {
                    serializedName: "kind",
                    defaultValue: 'GlobalDocumentDB',
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, documentEndpoint: {
                    readOnly: true,
                    serializedName: "properties.documentEndpoint",
                    type: {
                        name: "String"
                    }
                }, databaseAccountOfferType: {
                    readOnly: true,
                    serializedName: "properties.databaseAccountOfferType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Standard"
                        ]
                    }
                }, ipRangeFilter: {
                    serializedName: "properties.ipRangeFilter",
                    type: {
                        name: "String"
                    }
                }, isVirtualNetworkFilterEnabled: {
                    serializedName: "properties.isVirtualNetworkFilterEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, enableAutomaticFailover: {
                    serializedName: "properties.enableAutomaticFailover",
                    type: {
                        name: "Boolean"
                    }
                }, consistencyPolicy: {
                    serializedName: "properties.consistencyPolicy",
                    type: {
                        name: "Composite",
                        className: "ConsistencyPolicy"
                    }
                }, capabilities: {
                    serializedName: "properties.capabilities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Capability"
                            }
                        }
                    }
                }, writeLocations: {
                    readOnly: true,
                    serializedName: "properties.writeLocations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Location"
                            }
                        }
                    }
                }, readLocations: {
                    readOnly: true,
                    serializedName: "properties.readLocations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Location"
                            }
                        }
                    }
                }, failoverPolicies: {
                    readOnly: true,
                    serializedName: "properties.failoverPolicies",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FailoverPolicy"
                            }
                        }
                    }
                }, virtualNetworkRules: {
                    serializedName: "properties.virtualNetworkRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualNetworkRule"
                            }
                        }
                    }
                }, enableMultipleWriteLocations: {
                    serializedName: "properties.enableMultipleWriteLocations",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FailoverPolicies = {
        serializedName: "FailoverPolicies",
        type: {
            name: "Composite",
            className: "FailoverPolicies",
            modelProperties: {
                failoverPolicies: {
                    required: true,
                    serializedName: "failoverPolicies",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FailoverPolicy"
                            }
                        }
                    }
                }
            }
        }
    };
    var RegionForOnlineOffline = {
        serializedName: "RegionForOnlineOffline",
        type: {
            name: "Composite",
            className: "RegionForOnlineOffline",
            modelProperties: {
                region: {
                    required: true,
                    serializedName: "region",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DatabaseAccountCreateUpdateParameters = {
        serializedName: "DatabaseAccountCreateUpdateParameters",
        type: {
            name: "Composite",
            className: "DatabaseAccountCreateUpdateParameters",
            modelProperties: __assign({}, Resource.type.modelProperties, { kind: {
                    serializedName: "kind",
                    defaultValue: 'GlobalDocumentDB',
                    type: {
                        name: "String"
                    }
                }, consistencyPolicy: {
                    serializedName: "properties.consistencyPolicy",
                    type: {
                        name: "Composite",
                        className: "ConsistencyPolicy"
                    }
                }, locations: {
                    required: true,
                    serializedName: "properties.locations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Location"
                            }
                        }
                    }
                }, databaseAccountOfferType: {
                    required: true,
                    isConstant: true,
                    serializedName: "properties.databaseAccountOfferType",
                    defaultValue: 'Standard',
                    type: {
                        name: "String"
                    }
                }, ipRangeFilter: {
                    serializedName: "properties.ipRangeFilter",
                    type: {
                        name: "String"
                    }
                }, isVirtualNetworkFilterEnabled: {
                    serializedName: "properties.isVirtualNetworkFilterEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, enableAutomaticFailover: {
                    serializedName: "properties.enableAutomaticFailover",
                    type: {
                        name: "Boolean"
                    }
                }, capabilities: {
                    serializedName: "properties.capabilities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Capability"
                            }
                        }
                    }
                }, virtualNetworkRules: {
                    serializedName: "properties.virtualNetworkRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualNetworkRule"
                            }
                        }
                    }
                }, enableMultipleWriteLocations: {
                    serializedName: "properties.enableMultipleWriteLocations",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var DatabaseAccountPatchParameters = {
        serializedName: "DatabaseAccountPatchParameters",
        type: {
            name: "Composite",
            className: "DatabaseAccountPatchParameters",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                capabilities: {
                    serializedName: "properties.capabilities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Capability"
                            }
                        }
                    }
                }
            }
        }
    };
    var DatabaseAccountListReadOnlyKeysResult = {
        serializedName: "DatabaseAccountListReadOnlyKeysResult",
        type: {
            name: "Composite",
            className: "DatabaseAccountListReadOnlyKeysResult",
            modelProperties: {
                primaryReadonlyMasterKey: {
                    readOnly: true,
                    serializedName: "primaryReadonlyMasterKey",
                    type: {
                        name: "String"
                    }
                },
                secondaryReadonlyMasterKey: {
                    readOnly: true,
                    serializedName: "secondaryReadonlyMasterKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DatabaseAccountListKeysResult = {
        serializedName: "DatabaseAccountListKeysResult",
        type: {
            name: "Composite",
            className: "DatabaseAccountListKeysResult",
            modelProperties: {
                primaryMasterKey: {
                    readOnly: true,
                    serializedName: "primaryMasterKey",
                    type: {
                        name: "String"
                    }
                },
                secondaryMasterKey: {
                    readOnly: true,
                    serializedName: "secondaryMasterKey",
                    type: {
                        name: "String"
                    }
                },
                primaryReadonlyMasterKey: {
                    readOnly: true,
                    serializedName: "properties.primaryReadonlyMasterKey",
                    type: {
                        name: "String"
                    }
                },
                secondaryReadonlyMasterKey: {
                    readOnly: true,
                    serializedName: "properties.secondaryReadonlyMasterKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DatabaseAccountConnectionString = {
        serializedName: "DatabaseAccountConnectionString",
        type: {
            name: "Composite",
            className: "DatabaseAccountConnectionString",
            modelProperties: {
                connectionString: {
                    readOnly: true,
                    serializedName: "connectionString",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    readOnly: true,
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DatabaseAccountListConnectionStringsResult = {
        serializedName: "DatabaseAccountListConnectionStringsResult",
        type: {
            name: "Composite",
            className: "DatabaseAccountListConnectionStringsResult",
            modelProperties: {
                connectionStrings: {
                    serializedName: "connectionStrings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DatabaseAccountConnectionString"
                            }
                        }
                    }
                }
            }
        }
    };
    var DatabaseAccountRegenerateKeyParameters = {
        serializedName: "DatabaseAccountRegenerateKeyParameters",
        type: {
            name: "Composite",
            className: "DatabaseAccountRegenerateKeyParameters",
            modelProperties: {
                keyKind: {
                    required: true,
                    serializedName: "keyKind",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "Provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "Resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "Operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "Description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                }
            }
        }
    };
    var MetricName = {
        serializedName: "MetricName",
        type: {
            name: "Composite",
            className: "MetricName",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                localizedValue: {
                    readOnly: true,
                    serializedName: "localizedValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Usage = {
        serializedName: "Usage",
        type: {
            name: "Composite",
            className: "Usage",
            modelProperties: {
                unit: {
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "MetricName"
                    }
                },
                quotaPeriod: {
                    readOnly: true,
                    serializedName: "quotaPeriod",
                    type: {
                        name: "String"
                    }
                },
                limit: {
                    readOnly: true,
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                },
                currentValue: {
                    readOnly: true,
                    serializedName: "currentValue",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var PartitionUsage = {
        serializedName: "PartitionUsage",
        type: {
            name: "Composite",
            className: "PartitionUsage",
            modelProperties: __assign({}, Usage.type.modelProperties, { partitionId: {
                    readOnly: true,
                    serializedName: "partitionId",
                    type: {
                        name: "String"
                    }
                }, partitionKeyRangeId: {
                    readOnly: true,
                    serializedName: "partitionKeyRangeId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var MetricAvailability = {
        serializedName: "MetricAvailability",
        type: {
            name: "Composite",
            className: "MetricAvailability",
            modelProperties: {
                timeGrain: {
                    readOnly: true,
                    serializedName: "timeGrain",
                    type: {
                        name: "String"
                    }
                },
                retention: {
                    readOnly: true,
                    serializedName: "retention",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MetricDefinition = {
        serializedName: "MetricDefinition",
        type: {
            name: "Composite",
            className: "MetricDefinition",
            modelProperties: {
                metricAvailabilities: {
                    readOnly: true,
                    serializedName: "metricAvailabilities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricAvailability"
                            }
                        }
                    }
                },
                primaryAggregationType: {
                    readOnly: true,
                    serializedName: "primaryAggregationType",
                    type: {
                        name: "String"
                    }
                },
                unit: {
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                resourceUri: {
                    readOnly: true,
                    serializedName: "resourceUri",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "MetricName"
                    }
                }
            }
        }
    };
    var MetricValue = {
        serializedName: "MetricValue",
        type: {
            name: "Composite",
            className: "MetricValue",
            modelProperties: {
                _count: {
                    readOnly: true,
                    serializedName: "_count",
                    type: {
                        name: "Number"
                    }
                },
                average: {
                    readOnly: true,
                    serializedName: "average",
                    type: {
                        name: "Number"
                    }
                },
                maximum: {
                    readOnly: true,
                    serializedName: "maximum",
                    type: {
                        name: "Number"
                    }
                },
                minimum: {
                    readOnly: true,
                    serializedName: "minimum",
                    type: {
                        name: "Number"
                    }
                },
                timestamp: {
                    readOnly: true,
                    serializedName: "timestamp",
                    type: {
                        name: "DateTime"
                    }
                },
                total: {
                    readOnly: true,
                    serializedName: "total",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Metric = {
        serializedName: "Metric",
        type: {
            name: "Composite",
            className: "Metric",
            modelProperties: {
                startTime: {
                    readOnly: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    readOnly: true,
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                timeGrain: {
                    readOnly: true,
                    serializedName: "timeGrain",
                    type: {
                        name: "String"
                    }
                },
                unit: {
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "MetricName"
                    }
                },
                metricValues: {
                    readOnly: true,
                    serializedName: "metricValues",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricValue"
                            }
                        }
                    }
                }
            }
        }
    };
    var PercentileMetricValue = {
        serializedName: "PercentileMetricValue",
        type: {
            name: "Composite",
            className: "PercentileMetricValue",
            modelProperties: __assign({}, MetricValue.type.modelProperties, { p10: {
                    readOnly: true,
                    serializedName: "P10",
                    type: {
                        name: "Number"
                    }
                }, p25: {
                    readOnly: true,
                    serializedName: "P25",
                    type: {
                        name: "Number"
                    }
                }, p50: {
                    readOnly: true,
                    serializedName: "P50",
                    type: {
                        name: "Number"
                    }
                }, p75: {
                    readOnly: true,
                    serializedName: "P75",
                    type: {
                        name: "Number"
                    }
                }, p90: {
                    readOnly: true,
                    serializedName: "P90",
                    type: {
                        name: "Number"
                    }
                }, p95: {
                    readOnly: true,
                    serializedName: "P95",
                    type: {
                        name: "Number"
                    }
                }, p99: {
                    readOnly: true,
                    serializedName: "P99",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var PercentileMetric = {
        serializedName: "PercentileMetric",
        type: {
            name: "Composite",
            className: "PercentileMetric",
            modelProperties: {
                startTime: {
                    readOnly: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    readOnly: true,
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                timeGrain: {
                    readOnly: true,
                    serializedName: "timeGrain",
                    type: {
                        name: "String"
                    }
                },
                unit: {
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "MetricName"
                    }
                },
                metricValues: {
                    readOnly: true,
                    serializedName: "metricValues",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PercentileMetricValue"
                            }
                        }
                    }
                }
            }
        }
    };
    var PartitionMetric = {
        serializedName: "PartitionMetric",
        type: {
            name: "Composite",
            className: "PartitionMetric",
            modelProperties: __assign({}, Metric.type.modelProperties, { partitionId: {
                    readOnly: true,
                    serializedName: "partitionId",
                    type: {
                        name: "String"
                    }
                }, partitionKeyRangeId: {
                    readOnly: true,
                    serializedName: "partitionKeyRangeId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var DatabaseAccountsListResult = {
        serializedName: "DatabaseAccountsListResult",
        type: {
            name: "Composite",
            className: "DatabaseAccountsListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DatabaseAccount"
                            }
                        }
                    }
                }
            }
        }
    };
    var MetricListResult = {
        serializedName: "MetricListResult",
        type: {
            name: "Composite",
            className: "MetricListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Metric"
                            }
                        }
                    }
                }
            }
        }
    };
    var UsagesResult = {
        serializedName: "UsagesResult",
        type: {
            name: "Composite",
            className: "UsagesResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Usage"
                            }
                        }
                    }
                }
            }
        }
    };
    var MetricDefinitionsListResult = {
        serializedName: "MetricDefinitionsListResult",
        type: {
            name: "Composite",
            className: "MetricDefinitionsListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricDefinition"
                            }
                        }
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PercentileMetricListResult = {
        serializedName: "PercentileMetricListResult",
        type: {
            name: "Composite",
            className: "PercentileMetricListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PercentileMetric"
                            }
                        }
                    }
                }
            }
        }
    };
    var PartitionMetricListResult = {
        serializedName: "PartitionMetricListResult",
        type: {
            name: "Composite",
            className: "PartitionMetricListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PartitionMetric"
                            }
                        }
                    }
                }
            }
        }
    };
    var PartitionUsagesResult = {
        serializedName: "PartitionUsagesResult",
        type: {
            name: "Composite",
            className: "PartitionUsagesResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PartitionUsage"
                            }
                        }
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        ConsistencyPolicy: ConsistencyPolicy,
        Capability: Capability,
        Location: Location,
        FailoverPolicy: FailoverPolicy,
        VirtualNetworkRule: VirtualNetworkRule,
        Resource: Resource,
        DatabaseAccount: DatabaseAccount,
        ErrorResponse: ErrorResponse,
        FailoverPolicies: FailoverPolicies,
        RegionForOnlineOffline: RegionForOnlineOffline,
        DatabaseAccountCreateUpdateParameters: DatabaseAccountCreateUpdateParameters,
        DatabaseAccountPatchParameters: DatabaseAccountPatchParameters,
        DatabaseAccountListReadOnlyKeysResult: DatabaseAccountListReadOnlyKeysResult,
        DatabaseAccountListKeysResult: DatabaseAccountListKeysResult,
        DatabaseAccountConnectionString: DatabaseAccountConnectionString,
        DatabaseAccountListConnectionStringsResult: DatabaseAccountListConnectionStringsResult,
        DatabaseAccountRegenerateKeyParameters: DatabaseAccountRegenerateKeyParameters,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        MetricName: MetricName,
        Usage: Usage,
        PartitionUsage: PartitionUsage,
        MetricAvailability: MetricAvailability,
        MetricDefinition: MetricDefinition,
        MetricValue: MetricValue,
        Metric: Metric,
        PercentileMetricValue: PercentileMetricValue,
        PercentileMetric: PercentileMetric,
        PartitionMetric: PartitionMetric,
        DatabaseAccountsListResult: DatabaseAccountsListResult,
        MetricListResult: MetricListResult,
        UsagesResult: UsagesResult,
        MetricDefinitionsListResult: MetricDefinitionsListResult,
        OperationListResult: OperationListResult,
        PercentileMetricListResult: PercentileMetricListResult,
        PartitionMetricListResult: PartitionMetricListResult,
        PartitionUsagesResult: PartitionUsagesResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        DatabaseAccount: DatabaseAccount,
        Resource: Resource,
        BaseResource: BaseResource,
        ConsistencyPolicy: ConsistencyPolicy,
        Capability: Capability,
        Location: Location,
        FailoverPolicy: FailoverPolicy,
        VirtualNetworkRule: VirtualNetworkRule,
        CloudError: CloudError,
        DatabaseAccountPatchParameters: DatabaseAccountPatchParameters,
        DatabaseAccountCreateUpdateParameters: DatabaseAccountCreateUpdateParameters,
        FailoverPolicies: FailoverPolicies,
        DatabaseAccountsListResult: DatabaseAccountsListResult,
        DatabaseAccountListKeysResult: DatabaseAccountListKeysResult,
        DatabaseAccountListConnectionStringsResult: DatabaseAccountListConnectionStringsResult,
        DatabaseAccountConnectionString: DatabaseAccountConnectionString,
        RegionForOnlineOffline: RegionForOnlineOffline,
        ErrorResponse: ErrorResponse,
        DatabaseAccountListReadOnlyKeysResult: DatabaseAccountListReadOnlyKeysResult,
        DatabaseAccountRegenerateKeyParameters: DatabaseAccountRegenerateKeyParameters,
        MetricListResult: MetricListResult,
        Metric: Metric,
        MetricName: MetricName,
        MetricValue: MetricValue,
        UsagesResult: UsagesResult,
        Usage: Usage,
        MetricDefinitionsListResult: MetricDefinitionsListResult,
        MetricDefinition: MetricDefinition,
        MetricAvailability: MetricAvailability,
        PartitionUsage: PartitionUsage,
        PercentileMetricValue: PercentileMetricValue,
        PartitionMetric: PartitionMetric
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var accountName = {
        parameterPath: "accountName",
        mapper: {
            required: true,
            serializedName: "accountName",
            constraints: {
                MaxLength: 50,
                MinLength: 3
            },
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var collectionRid = {
        parameterPath: "collectionRid",
        mapper: {
            required: true,
            serializedName: "collectionRid",
            type: {
                name: "String"
            }
        }
    };
    var databaseRid = {
        parameterPath: "databaseRid",
        mapper: {
            required: true,
            serializedName: "databaseRid",
            type: {
                name: "String"
            }
        }
    };
    var filter0 = {
        parameterPath: "filter",
        mapper: {
            required: true,
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var filter1 = {
        parameterPath: [
            "options",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var partitionKeyRangeId = {
        parameterPath: "partitionKeyRangeId",
        mapper: {
            required: true,
            serializedName: "partitionKeyRangeId",
            type: {
                name: "String"
            }
        }
    };
    var region = {
        parameterPath: "region",
        mapper: {
            required: true,
            serializedName: "region",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            constraints: {
                MaxLength: 90,
                MinLength: 1,
                Pattern: /^[-\w\._\(\)]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var sourceRegion = {
        parameterPath: "sourceRegion",
        mapper: {
            required: true,
            serializedName: "sourceRegion",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var targetRegion = {
        parameterPath: "targetRegion",
        mapper: {
            required: true,
            serializedName: "targetRegion",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DatabaseAccounts. */
    var DatabaseAccounts = /** @class */ (function () {
        /**
         * Create a DatabaseAccounts.
         * @param {CosmosDBManagementClientContext} client Reference to the service client.
         */
        function DatabaseAccounts(client) {
            this.client = client;
        }
        DatabaseAccounts.prototype.get = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        /**
         * Patches the properties of an existing Azure Cosmos DB database account.
         * @param resourceGroupName Name of an Azure resource group.
         * @param accountName Cosmos DB database account name.
         * @param updateParameters The tags parameter to patch for the current database account.
         * @param [options] The optional parameters
         * @returns Promise<Models.DatabaseAccountsPatchResponse>
         */
        DatabaseAccounts.prototype.patch = function (resourceGroupName$$1, accountName$$1, updateParameters, options) {
            return this.beginPatch(resourceGroupName$$1, accountName$$1, updateParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates an Azure Cosmos DB database account.
         * @param resourceGroupName Name of an Azure resource group.
         * @param accountName Cosmos DB database account name.
         * @param createUpdateParameters The parameters to provide for the current database account.
         * @param [options] The optional parameters
         * @returns Promise<Models.DatabaseAccountsCreateOrUpdateResponse>
         */
        DatabaseAccounts.prototype.createOrUpdate = function (resourceGroupName$$1, accountName$$1, createUpdateParameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, accountName$$1, createUpdateParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes an existing Azure Cosmos DB database account.
         * @param resourceGroupName Name of an Azure resource group.
         * @param accountName Cosmos DB database account name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        DatabaseAccounts.prototype.deleteMethod = function (resourceGroupName$$1, accountName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, accountName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Changes the failover priority for the Azure Cosmos DB database account. A failover priority of 0
         * indicates a write region. The maximum value for a failover priority = (total number of regions -
         * 1). Failover priority values must be unique for each of the regions in which the database
         * account exists.
         * @param resourceGroupName Name of an Azure resource group.
         * @param accountName Cosmos DB database account name.
         * @param failoverParameters The new failover policies for the database account.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        DatabaseAccounts.prototype.failoverPriorityChange = function (resourceGroupName$$1, accountName$$1, failoverParameters, options) {
            return this.beginFailoverPriorityChange(resourceGroupName$$1, accountName$$1, failoverParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        DatabaseAccounts.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        DatabaseAccounts.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        DatabaseAccounts.prototype.listKeys = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, listKeysOperationSpec, callback);
        };
        DatabaseAccounts.prototype.listConnectionStrings = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, listConnectionStringsOperationSpec, callback);
        };
        /**
         * Offline the specified region for the specified Azure Cosmos DB database account.
         * @param resourceGroupName Name of an Azure resource group.
         * @param accountName Cosmos DB database account name.
         * @param regionParameterForOffline Cosmos DB region to offline for the database account.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        DatabaseAccounts.prototype.offlineRegion = function (resourceGroupName$$1, accountName$$1, regionParameterForOffline, options) {
            return this.beginOfflineRegion(resourceGroupName$$1, accountName$$1, regionParameterForOffline, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Online the specified region for the specified Azure Cosmos DB database account.
         * @param resourceGroupName Name of an Azure resource group.
         * @param accountName Cosmos DB database account name.
         * @param regionParameterForOnline Cosmos DB region to online for the database account.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        DatabaseAccounts.prototype.onlineRegion = function (resourceGroupName$$1, accountName$$1, regionParameterForOnline, options) {
            return this.beginOnlineRegion(resourceGroupName$$1, accountName$$1, regionParameterForOnline, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        DatabaseAccounts.prototype.getReadOnlyKeys = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, getReadOnlyKeysOperationSpec, callback);
        };
        DatabaseAccounts.prototype.listReadOnlyKeys = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, listReadOnlyKeysOperationSpec, callback);
        };
        /**
         * Regenerates an access key for the specified Azure Cosmos DB database account.
         * @param resourceGroupName Name of an Azure resource group.
         * @param accountName Cosmos DB database account name.
         * @param keyToRegenerate The name of the key to regenerate.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        DatabaseAccounts.prototype.regenerateKey = function (resourceGroupName$$1, accountName$$1, keyToRegenerate, options) {
            return this.beginRegenerateKey(resourceGroupName$$1, accountName$$1, keyToRegenerate, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        DatabaseAccounts.prototype.checkNameExists = function (accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                accountName: accountName$$1,
                options: options
            }, checkNameExistsOperationSpec, callback);
        };
        DatabaseAccounts.prototype.listMetrics = function (resourceGroupName$$1, accountName$$1, filter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                filter: filter,
                options: options
            }, listMetricsOperationSpec, callback);
        };
        DatabaseAccounts.prototype.listUsages = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, listUsagesOperationSpec, callback);
        };
        DatabaseAccounts.prototype.listMetricDefinitions = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, listMetricDefinitionsOperationSpec, callback);
        };
        /**
         * Patches the properties of an existing Azure Cosmos DB database account.
         * @param resourceGroupName Name of an Azure resource group.
         * @param accountName Cosmos DB database account name.
         * @param updateParameters The tags parameter to patch for the current database account.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        DatabaseAccounts.prototype.beginPatch = function (resourceGroupName$$1, accountName$$1, updateParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                updateParameters: updateParameters,
                options: options
            }, beginPatchOperationSpec, options);
        };
        /**
         * Creates or updates an Azure Cosmos DB database account.
         * @param resourceGroupName Name of an Azure resource group.
         * @param accountName Cosmos DB database account name.
         * @param createUpdateParameters The parameters to provide for the current database account.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        DatabaseAccounts.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, accountName$$1, createUpdateParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                createUpdateParameters: createUpdateParameters,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * Deletes an existing Azure Cosmos DB database account.
         * @param resourceGroupName Name of an Azure resource group.
         * @param accountName Cosmos DB database account name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        DatabaseAccounts.prototype.beginDeleteMethod = function (resourceGroupName$$1, accountName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        /**
         * Changes the failover priority for the Azure Cosmos DB database account. A failover priority of 0
         * indicates a write region. The maximum value for a failover priority = (total number of regions -
         * 1). Failover priority values must be unique for each of the regions in which the database
         * account exists.
         * @param resourceGroupName Name of an Azure resource group.
         * @param accountName Cosmos DB database account name.
         * @param failoverParameters The new failover policies for the database account.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        DatabaseAccounts.prototype.beginFailoverPriorityChange = function (resourceGroupName$$1, accountName$$1, failoverParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                failoverParameters: failoverParameters,
                options: options
            }, beginFailoverPriorityChangeOperationSpec, options);
        };
        /**
         * Offline the specified region for the specified Azure Cosmos DB database account.
         * @param resourceGroupName Name of an Azure resource group.
         * @param accountName Cosmos DB database account name.
         * @param regionParameterForOffline Cosmos DB region to offline for the database account.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        DatabaseAccounts.prototype.beginOfflineRegion = function (resourceGroupName$$1, accountName$$1, regionParameterForOffline, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                regionParameterForOffline: regionParameterForOffline,
                options: options
            }, beginOfflineRegionOperationSpec, options);
        };
        /**
         * Online the specified region for the specified Azure Cosmos DB database account.
         * @param resourceGroupName Name of an Azure resource group.
         * @param accountName Cosmos DB database account name.
         * @param regionParameterForOnline Cosmos DB region to online for the database account.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        DatabaseAccounts.prototype.beginOnlineRegion = function (resourceGroupName$$1, accountName$$1, regionParameterForOnline, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                regionParameterForOnline: regionParameterForOnline,
                options: options
            }, beginOnlineRegionOperationSpec, options);
        };
        /**
         * Regenerates an access key for the specified Azure Cosmos DB database account.
         * @param resourceGroupName Name of an Azure resource group.
         * @param accountName Cosmos DB database account name.
         * @param keyToRegenerate The name of the key to regenerate.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        DatabaseAccounts.prototype.beginRegenerateKey = function (resourceGroupName$$1, accountName$$1, keyToRegenerate, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                keyToRegenerate: keyToRegenerate,
                options: options
            }, beginRegenerateKeyOperationSpec, options);
        };
        return DatabaseAccounts;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseAccount
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/databaseAccounts",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseAccountsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseAccountsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/listKeys",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseAccountListKeysResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listConnectionStringsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/listConnectionStrings",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseAccountListConnectionStringsResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var getReadOnlyKeysOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/readonlykeys",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseAccountListReadOnlyKeysResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listReadOnlyKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/readonlykeys",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseAccountListReadOnlyKeysResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var checkNameExistsOperationSpec = {
        httpMethod: "HEAD",
        path: "providers/Microsoft.DocumentDB/databaseAccountNames/{accountName}",
        urlParameters: [
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            404: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listMetricsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/metrics",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion,
            filter0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listUsagesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/usages",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion,
            filter1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsagesResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listMetricDefinitionsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/metricDefinitions",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricDefinitionsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginPatchOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "updateParameters",
            mapper: __assign({}, DatabaseAccountPatchParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: DatabaseAccount
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "createUpdateParameters",
            mapper: __assign({}, DatabaseAccountCreateUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: DatabaseAccount
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginFailoverPriorityChangeOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/failoverPriorityChange",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "failoverParameters",
            mapper: __assign({}, FailoverPolicies, { required: true })
        },
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginOfflineRegionOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/offlineRegion",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "regionParameterForOffline",
            mapper: __assign({}, RegionForOnlineOffline, { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var beginOnlineRegionOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/onlineRegion",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "regionParameterForOnline",
            mapper: __assign({}, RegionForOnlineOffline, { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var beginRegenerateKeyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/regenerateKey",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "keyToRegenerate",
            mapper: __assign({}, DatabaseAccountRegenerateKeyParameters, { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        OperationListResult: OperationListResult,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {CosmosDBManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.DocumentDB/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        MetricListResult: MetricListResult,
        Metric: Metric,
        MetricName: MetricName,
        MetricValue: MetricValue,
        CloudError: CloudError,
        UsagesResult: UsagesResult,
        Usage: Usage,
        MetricDefinitionsListResult: MetricDefinitionsListResult,
        MetricDefinition: MetricDefinition,
        MetricAvailability: MetricAvailability,
        PartitionUsage: PartitionUsage,
        PercentileMetricValue: PercentileMetricValue,
        PartitionMetric: PartitionMetric
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Database. */
    var Database = /** @class */ (function () {
        /**
         * Create a Database.
         * @param {CosmosDBManagementClientContext} client Reference to the service client.
         */
        function Database(client) {
            this.client = client;
        }
        Database.prototype.listMetrics = function (resourceGroupName$$1, accountName$$1, databaseRid$$1, filter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                databaseRid: databaseRid$$1,
                filter: filter,
                options: options
            }, listMetricsOperationSpec$1, callback);
        };
        Database.prototype.listUsages = function (resourceGroupName$$1, accountName$$1, databaseRid$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                databaseRid: databaseRid$$1,
                options: options
            }, listUsagesOperationSpec$1, callback);
        };
        Database.prototype.listMetricDefinitions = function (resourceGroupName$$1, accountName$$1, databaseRid$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                databaseRid: databaseRid$$1,
                options: options
            }, listMetricDefinitionsOperationSpec$1, callback);
        };
        return Database;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listMetricsOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/metrics",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            databaseRid
        ],
        queryParameters: [
            apiVersion,
            filter0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listUsagesOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/usages",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            databaseRid
        ],
        queryParameters: [
            apiVersion,
            filter1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsagesResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listMetricDefinitionsOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/metricDefinitions",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            databaseRid
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricDefinitionsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        MetricListResult: MetricListResult,
        Metric: Metric,
        MetricName: MetricName,
        MetricValue: MetricValue,
        CloudError: CloudError,
        UsagesResult: UsagesResult,
        Usage: Usage,
        MetricDefinitionsListResult: MetricDefinitionsListResult,
        MetricDefinition: MetricDefinition,
        MetricAvailability: MetricAvailability,
        PartitionUsage: PartitionUsage,
        PercentileMetricValue: PercentileMetricValue,
        PartitionMetric: PartitionMetric
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Collection. */
    var Collection = /** @class */ (function () {
        /**
         * Create a Collection.
         * @param {CosmosDBManagementClientContext} client Reference to the service client.
         */
        function Collection(client) {
            this.client = client;
        }
        Collection.prototype.listMetrics = function (resourceGroupName$$1, accountName$$1, databaseRid$$1, collectionRid$$1, filter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                databaseRid: databaseRid$$1,
                collectionRid: collectionRid$$1,
                filter: filter,
                options: options
            }, listMetricsOperationSpec$2, callback);
        };
        Collection.prototype.listUsages = function (resourceGroupName$$1, accountName$$1, databaseRid$$1, collectionRid$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                databaseRid: databaseRid$$1,
                collectionRid: collectionRid$$1,
                options: options
            }, listUsagesOperationSpec$2, callback);
        };
        Collection.prototype.listMetricDefinitions = function (resourceGroupName$$1, accountName$$1, databaseRid$$1, collectionRid$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                databaseRid: databaseRid$$1,
                collectionRid: collectionRid$$1,
                options: options
            }, listMetricDefinitionsOperationSpec$2, callback);
        };
        return Collection;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listMetricsOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/metrics",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            databaseRid,
            collectionRid
        ],
        queryParameters: [
            apiVersion,
            filter0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listUsagesOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/usages",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            databaseRid,
            collectionRid
        ],
        queryParameters: [
            apiVersion,
            filter1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsagesResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listMetricDefinitionsOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/metricDefinitions",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            databaseRid,
            collectionRid
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricDefinitionsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        MetricListResult: MetricListResult,
        Metric: Metric,
        MetricName: MetricName,
        MetricValue: MetricValue,
        CloudError: CloudError,
        PercentileMetricValue: PercentileMetricValue,
        PartitionMetric: PartitionMetric
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a CollectionRegion. */
    var CollectionRegion = /** @class */ (function () {
        /**
         * Create a CollectionRegion.
         * @param {CosmosDBManagementClientContext} client Reference to the service client.
         */
        function CollectionRegion(client) {
            this.client = client;
        }
        CollectionRegion.prototype.listMetrics = function (resourceGroupName$$1, accountName$$1, region$$1, databaseRid$$1, collectionRid$$1, filter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                region: region$$1,
                databaseRid: databaseRid$$1,
                collectionRid: collectionRid$$1,
                filter: filter,
                options: options
            }, listMetricsOperationSpec$3, callback);
        };
        return CollectionRegion;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var listMetricsOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/metrics",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            region,
            databaseRid,
            collectionRid
        ],
        queryParameters: [
            apiVersion,
            filter0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        MetricListResult: MetricListResult,
        Metric: Metric,
        MetricName: MetricName,
        MetricValue: MetricValue,
        CloudError: CloudError,
        PercentileMetricValue: PercentileMetricValue,
        PartitionMetric: PartitionMetric
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DatabaseAccountRegion. */
    var DatabaseAccountRegion = /** @class */ (function () {
        /**
         * Create a DatabaseAccountRegion.
         * @param {CosmosDBManagementClientContext} client Reference to the service client.
         */
        function DatabaseAccountRegion(client) {
            this.client = client;
        }
        DatabaseAccountRegion.prototype.listMetrics = function (resourceGroupName$$1, accountName$$1, region$$1, filter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                region: region$$1,
                filter: filter,
                options: options
            }, listMetricsOperationSpec$4, callback);
        };
        return DatabaseAccountRegion;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var listMetricsOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/metrics",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            region
        ],
        queryParameters: [
            apiVersion,
            filter0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        PercentileMetricListResult: PercentileMetricListResult,
        PercentileMetric: PercentileMetric,
        MetricName: MetricName,
        PercentileMetricValue: PercentileMetricValue,
        MetricValue: MetricValue,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a PercentileSourceTarget. */
    var PercentileSourceTarget = /** @class */ (function () {
        /**
         * Create a PercentileSourceTarget.
         * @param {CosmosDBManagementClientContext} client Reference to the service client.
         */
        function PercentileSourceTarget(client) {
            this.client = client;
        }
        PercentileSourceTarget.prototype.listMetrics = function (resourceGroupName$$1, accountName$$1, sourceRegion$$1, targetRegion$$1, filter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                sourceRegion: sourceRegion$$1,
                targetRegion: targetRegion$$1,
                filter: filter,
                options: options
            }, listMetricsOperationSpec$5, callback);
        };
        return PercentileSourceTarget;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var listMetricsOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sourceRegion/{sourceRegion}/targetRegion/{targetRegion}/percentile/metrics",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            sourceRegion,
            targetRegion
        ],
        queryParameters: [
            apiVersion,
            filter0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PercentileMetricListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        PercentileMetricListResult: PercentileMetricListResult,
        PercentileMetric: PercentileMetric,
        MetricName: MetricName,
        PercentileMetricValue: PercentileMetricValue,
        MetricValue: MetricValue,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a PercentileTarget. */
    var PercentileTarget = /** @class */ (function () {
        /**
         * Create a PercentileTarget.
         * @param {CosmosDBManagementClientContext} client Reference to the service client.
         */
        function PercentileTarget(client) {
            this.client = client;
        }
        PercentileTarget.prototype.listMetrics = function (resourceGroupName$$1, accountName$$1, targetRegion$$1, filter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                targetRegion: targetRegion$$1,
                filter: filter,
                options: options
            }, listMetricsOperationSpec$6, callback);
        };
        return PercentileTarget;
    }());
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers$7);
    var listMetricsOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/targetRegion/{targetRegion}/percentile/metrics",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            targetRegion
        ],
        queryParameters: [
            apiVersion,
            filter0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PercentileMetricListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$8 = /*#__PURE__*/Object.freeze({
        PercentileMetricListResult: PercentileMetricListResult,
        PercentileMetric: PercentileMetric,
        MetricName: MetricName,
        PercentileMetricValue: PercentileMetricValue,
        MetricValue: MetricValue,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Percentile. */
    var Percentile = /** @class */ (function () {
        /**
         * Create a Percentile.
         * @param {CosmosDBManagementClientContext} client Reference to the service client.
         */
        function Percentile(client) {
            this.client = client;
        }
        Percentile.prototype.listMetrics = function (resourceGroupName$$1, accountName$$1, filter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                filter: filter,
                options: options
            }, listMetricsOperationSpec$7, callback);
        };
        return Percentile;
    }());
    // Operation Specifications
    var serializer$8 = new msRest.Serializer(Mappers$8);
    var listMetricsOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/percentile/metrics",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion,
            filter0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PercentileMetricListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$9 = /*#__PURE__*/Object.freeze({
        PartitionMetricListResult: PartitionMetricListResult,
        PartitionMetric: PartitionMetric,
        Metric: Metric,
        MetricName: MetricName,
        MetricValue: MetricValue,
        CloudError: CloudError,
        PercentileMetricValue: PercentileMetricValue
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a CollectionPartitionRegion. */
    var CollectionPartitionRegion = /** @class */ (function () {
        /**
         * Create a CollectionPartitionRegion.
         * @param {CosmosDBManagementClientContext} client Reference to the service client.
         */
        function CollectionPartitionRegion(client) {
            this.client = client;
        }
        CollectionPartitionRegion.prototype.listMetrics = function (resourceGroupName$$1, accountName$$1, region$$1, databaseRid$$1, collectionRid$$1, filter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                region: region$$1,
                databaseRid: databaseRid$$1,
                collectionRid: collectionRid$$1,
                filter: filter,
                options: options
            }, listMetricsOperationSpec$8, callback);
        };
        return CollectionPartitionRegion;
    }());
    // Operation Specifications
    var serializer$9 = new msRest.Serializer(Mappers$9);
    var listMetricsOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/partitions/metrics",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            region,
            databaseRid,
            collectionRid
        ],
        queryParameters: [
            apiVersion,
            filter0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PartitionMetricListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$a = /*#__PURE__*/Object.freeze({
        PartitionMetricListResult: PartitionMetricListResult,
        PartitionMetric: PartitionMetric,
        Metric: Metric,
        MetricName: MetricName,
        MetricValue: MetricValue,
        CloudError: CloudError,
        PartitionUsagesResult: PartitionUsagesResult,
        PartitionUsage: PartitionUsage,
        Usage: Usage,
        PercentileMetricValue: PercentileMetricValue
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a CollectionPartition. */
    var CollectionPartition = /** @class */ (function () {
        /**
         * Create a CollectionPartition.
         * @param {CosmosDBManagementClientContext} client Reference to the service client.
         */
        function CollectionPartition(client) {
            this.client = client;
        }
        CollectionPartition.prototype.listMetrics = function (resourceGroupName$$1, accountName$$1, databaseRid$$1, collectionRid$$1, filter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                databaseRid: databaseRid$$1,
                collectionRid: collectionRid$$1,
                filter: filter,
                options: options
            }, listMetricsOperationSpec$9, callback);
        };
        CollectionPartition.prototype.listUsages = function (resourceGroupName$$1, accountName$$1, databaseRid$$1, collectionRid$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                databaseRid: databaseRid$$1,
                collectionRid: collectionRid$$1,
                options: options
            }, listUsagesOperationSpec$3, callback);
        };
        return CollectionPartition;
    }());
    // Operation Specifications
    var serializer$a = new msRest.Serializer(Mappers$a);
    var listMetricsOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitions/metrics",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            databaseRid,
            collectionRid
        ],
        queryParameters: [
            apiVersion,
            filter0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PartitionMetricListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var listUsagesOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitions/usages",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            databaseRid,
            collectionRid
        ],
        queryParameters: [
            apiVersion,
            filter1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PartitionUsagesResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$b = /*#__PURE__*/Object.freeze({
        PartitionMetricListResult: PartitionMetricListResult,
        PartitionMetric: PartitionMetric,
        Metric: Metric,
        MetricName: MetricName,
        MetricValue: MetricValue,
        CloudError: CloudError,
        PercentileMetricValue: PercentileMetricValue
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a PartitionKeyRangeId. */
    var PartitionKeyRangeId = /** @class */ (function () {
        /**
         * Create a PartitionKeyRangeId.
         * @param {CosmosDBManagementClientContext} client Reference to the service client.
         */
        function PartitionKeyRangeId(client) {
            this.client = client;
        }
        PartitionKeyRangeId.prototype.listMetrics = function (resourceGroupName$$1, accountName$$1, databaseRid$$1, collectionRid$$1, partitionKeyRangeId$$1, filter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                databaseRid: databaseRid$$1,
                collectionRid: collectionRid$$1,
                partitionKeyRangeId: partitionKeyRangeId$$1,
                filter: filter,
                options: options
            }, listMetricsOperationSpec$a, callback);
        };
        return PartitionKeyRangeId;
    }());
    // Operation Specifications
    var serializer$b = new msRest.Serializer(Mappers$b);
    var listMetricsOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitionKeyRangeId/{partitionKeyRangeId}/metrics",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            databaseRid,
            collectionRid,
            partitionKeyRangeId
        ],
        queryParameters: [
            apiVersion,
            filter0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PartitionMetricListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$c = /*#__PURE__*/Object.freeze({
        PartitionMetricListResult: PartitionMetricListResult,
        PartitionMetric: PartitionMetric,
        Metric: Metric,
        MetricName: MetricName,
        MetricValue: MetricValue,
        CloudError: CloudError,
        PercentileMetricValue: PercentileMetricValue
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a PartitionKeyRangeIdRegion. */
    var PartitionKeyRangeIdRegion = /** @class */ (function () {
        /**
         * Create a PartitionKeyRangeIdRegion.
         * @param {CosmosDBManagementClientContext} client Reference to the service client.
         */
        function PartitionKeyRangeIdRegion(client) {
            this.client = client;
        }
        PartitionKeyRangeIdRegion.prototype.listMetrics = function (resourceGroupName$$1, accountName$$1, region$$1, databaseRid$$1, collectionRid$$1, partitionKeyRangeId$$1, filter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                region: region$$1,
                databaseRid: databaseRid$$1,
                collectionRid: collectionRid$$1,
                partitionKeyRangeId: partitionKeyRangeId$$1,
                filter: filter,
                options: options
            }, listMetricsOperationSpec$b, callback);
        };
        return PartitionKeyRangeIdRegion;
    }());
    // Operation Specifications
    var serializer$c = new msRest.Serializer(Mappers$c);
    var listMetricsOperationSpec$b = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/partitionKeyRangeId/{partitionKeyRangeId}/metrics",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            region,
            databaseRid,
            collectionRid,
            partitionKeyRangeId
        ],
        queryParameters: [
            apiVersion,
            filter0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PartitionMetricListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-cosmosdb";
    var packageVersion = "1.0.0";
    var CosmosDBManagementClientContext = /** @class */ (function (_super) {
        __extends(CosmosDBManagementClientContext, _super);
        /**
         * Initializes a new instance of the CosmosDBManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Azure subscription ID.
         * @param [options] The parameter options
         */
        function CosmosDBManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2015-04-08';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return CosmosDBManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CosmosDBManagementClient = /** @class */ (function (_super) {
        __extends(CosmosDBManagementClient, _super);
        /**
         * Initializes a new instance of the CosmosDBManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Azure subscription ID.
         * @param [options] The parameter options
         */
        function CosmosDBManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.databaseAccounts = new DatabaseAccounts(_this);
            _this.operations = new Operations(_this);
            _this.database = new Database(_this);
            _this.collection = new Collection(_this);
            _this.collectionRegion = new CollectionRegion(_this);
            _this.databaseAccountRegion = new DatabaseAccountRegion(_this);
            _this.percentileSourceTarget = new PercentileSourceTarget(_this);
            _this.percentileTarget = new PercentileTarget(_this);
            _this.percentile = new Percentile(_this);
            _this.collectionPartitionRegion = new CollectionPartitionRegion(_this);
            _this.collectionPartition = new CollectionPartition(_this);
            _this.partitionKeyRangeId = new PartitionKeyRangeId(_this);
            _this.partitionKeyRangeIdRegion = new PartitionKeyRangeIdRegion(_this);
            return _this;
        }
        return CosmosDBManagementClient;
    }(CosmosDBManagementClientContext));

    exports.CosmosDBManagementClient = CosmosDBManagementClient;
    exports.CosmosDBManagementClientContext = CosmosDBManagementClientContext;
    exports.CosmosDBManagementModels = index;
    exports.CosmosDBManagementMappers = mappers;
    exports.DatabaseAccounts = DatabaseAccounts;
    exports.Operations = Operations;
    exports.Database = Database;
    exports.Collection = Collection;
    exports.CollectionRegion = CollectionRegion;
    exports.DatabaseAccountRegion = DatabaseAccountRegion;
    exports.PercentileSourceTarget = PercentileSourceTarget;
    exports.PercentileTarget = PercentileTarget;
    exports.Percentile = Percentile;
    exports.CollectionPartitionRegion = CollectionPartitionRegion;
    exports.CollectionPartition = CollectionPartition;
    exports.PartitionKeyRangeId = PartitionKeyRangeId;
    exports.PartitionKeyRangeIdRegion = PartitionKeyRangeIdRegion;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-cosmosdb.js.map
