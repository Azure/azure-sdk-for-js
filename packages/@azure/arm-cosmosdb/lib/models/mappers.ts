/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "ms-rest-azure-js";
import * as msRest from "ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const ConsistencyPolicy: msRest.CompositeMapper = {
  serializedName: "ConsistencyPolicy",
  type: {
    name: "Composite",
    className: "ConsistencyPolicy",
    modelProperties: {
      defaultConsistencyLevel: {
        required: true,
        serializedName: "defaultConsistencyLevel",
        type: {
          name: "Enum",
          allowedValues: [
            "Eventual",
            "Session",
            "BoundedStaleness",
            "Strong",
            "ConsistentPrefix"
          ]
        }
      },
      maxStalenessPrefix: {
        serializedName: "maxStalenessPrefix",
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      maxIntervalInSeconds: {
        serializedName: "maxIntervalInSeconds",
        constraints: {
          InclusiveMaximum: 86400,
          InclusiveMinimum: 5
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Capability: msRest.CompositeMapper = {
  serializedName: "Capability",
  type: {
    name: "Composite",
    className: "Capability",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Location: msRest.CompositeMapper = {
  serializedName: "Location",
  type: {
    name: "Composite",
    className: "Location",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      locationName: {
        serializedName: "locationName",
        type: {
          name: "String"
        }
      },
      documentEndpoint: {
        readOnly: true,
        serializedName: "documentEndpoint",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "String"
        }
      },
      failoverPriority: {
        serializedName: "failoverPriority",
        constraints: {
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const FailoverPolicy: msRest.CompositeMapper = {
  serializedName: "FailoverPolicy",
  type: {
    name: "Composite",
    className: "FailoverPolicy",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      locationName: {
        serializedName: "locationName",
        type: {
          name: "String"
        }
      },
      failoverPriority: {
        serializedName: "failoverPriority",
        constraints: {
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VirtualNetworkRule: msRest.CompositeMapper = {
  serializedName: "VirtualNetworkRule",
  type: {
    name: "Composite",
    className: "VirtualNetworkRule",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DatabaseAccount: msRest.CompositeMapper = {
  serializedName: "DatabaseAccount",
  type: {
    name: "Composite",
    className: "DatabaseAccount",
    modelProperties: {
      ...Resource.type.modelProperties,
      kind: {
        serializedName: "kind",
        defaultValue: 'GlobalDocumentDB',
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      documentEndpoint: {
        readOnly: true,
        serializedName: "properties.documentEndpoint",
        type: {
          name: "String"
        }
      },
      databaseAccountOfferType: {
        readOnly: true,
        serializedName: "properties.databaseAccountOfferType",
        type: {
          name: "Enum",
          allowedValues: [
            "Standard"
          ]
        }
      },
      ipRangeFilter: {
        serializedName: "properties.ipRangeFilter",
        type: {
          name: "String"
        }
      },
      isVirtualNetworkFilterEnabled: {
        serializedName: "properties.isVirtualNetworkFilterEnabled",
        type: {
          name: "Boolean"
        }
      },
      enableAutomaticFailover: {
        serializedName: "properties.enableAutomaticFailover",
        type: {
          name: "Boolean"
        }
      },
      consistencyPolicy: {
        serializedName: "properties.consistencyPolicy",
        type: {
          name: "Composite",
          className: "ConsistencyPolicy"
        }
      },
      capabilities: {
        serializedName: "properties.capabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Capability"
            }
          }
        }
      },
      writeLocations: {
        readOnly: true,
        serializedName: "properties.writeLocations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Location"
            }
          }
        }
      },
      readLocations: {
        readOnly: true,
        serializedName: "properties.readLocations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Location"
            }
          }
        }
      },
      failoverPolicies: {
        readOnly: true,
        serializedName: "properties.failoverPolicies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FailoverPolicy"
            }
          }
        }
      },
      virtualNetworkRules: {
        serializedName: "properties.virtualNetworkRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkRule"
            }
          }
        }
      },
      enableMultipleWriteLocations: {
        serializedName: "properties.enableMultipleWriteLocations",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ErrorResponse: msRest.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FailoverPolicies: msRest.CompositeMapper = {
  serializedName: "FailoverPolicies",
  type: {
    name: "Composite",
    className: "FailoverPolicies",
    modelProperties: {
      failoverPolicies: {
        required: true,
        serializedName: "failoverPolicies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FailoverPolicy"
            }
          }
        }
      }
    }
  }
};

export const RegionForOnlineOffline: msRest.CompositeMapper = {
  serializedName: "RegionForOnlineOffline",
  type: {
    name: "Composite",
    className: "RegionForOnlineOffline",
    modelProperties: {
      region: {
        required: true,
        serializedName: "region",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseAccountCreateUpdateParameters: msRest.CompositeMapper = {
  serializedName: "DatabaseAccountCreateUpdateParameters",
  type: {
    name: "Composite",
    className: "DatabaseAccountCreateUpdateParameters",
    modelProperties: {
      ...Resource.type.modelProperties,
      kind: {
        serializedName: "kind",
        defaultValue: 'GlobalDocumentDB',
        type: {
          name: "String"
        }
      },
      consistencyPolicy: {
        serializedName: "properties.consistencyPolicy",
        type: {
          name: "Composite",
          className: "ConsistencyPolicy"
        }
      },
      locations: {
        required: true,
        serializedName: "properties.locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Location"
            }
          }
        }
      },
      databaseAccountOfferType: {
        required: true,
        isConstant: true,
        serializedName: "properties.databaseAccountOfferType",
        defaultValue: 'Standard',
        type: {
          name: "String"
        }
      },
      ipRangeFilter: {
        serializedName: "properties.ipRangeFilter",
        type: {
          name: "String"
        }
      },
      isVirtualNetworkFilterEnabled: {
        serializedName: "properties.isVirtualNetworkFilterEnabled",
        type: {
          name: "Boolean"
        }
      },
      enableAutomaticFailover: {
        serializedName: "properties.enableAutomaticFailover",
        type: {
          name: "Boolean"
        }
      },
      capabilities: {
        serializedName: "properties.capabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Capability"
            }
          }
        }
      },
      virtualNetworkRules: {
        serializedName: "properties.virtualNetworkRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkRule"
            }
          }
        }
      },
      enableMultipleWriteLocations: {
        serializedName: "properties.enableMultipleWriteLocations",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DatabaseAccountPatchParameters: msRest.CompositeMapper = {
  serializedName: "DatabaseAccountPatchParameters",
  type: {
    name: "Composite",
    className: "DatabaseAccountPatchParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      capabilities: {
        serializedName: "properties.capabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Capability"
            }
          }
        }
      }
    }
  }
};

export const DatabaseAccountListReadOnlyKeysResult: msRest.CompositeMapper = {
  serializedName: "DatabaseAccountListReadOnlyKeysResult",
  type: {
    name: "Composite",
    className: "DatabaseAccountListReadOnlyKeysResult",
    modelProperties: {
      primaryReadonlyMasterKey: {
        readOnly: true,
        serializedName: "primaryReadonlyMasterKey",
        type: {
          name: "String"
        }
      },
      secondaryReadonlyMasterKey: {
        readOnly: true,
        serializedName: "secondaryReadonlyMasterKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseAccountListKeysResult: msRest.CompositeMapper = {
  serializedName: "DatabaseAccountListKeysResult",
  type: {
    name: "Composite",
    className: "DatabaseAccountListKeysResult",
    modelProperties: {
      primaryMasterKey: {
        readOnly: true,
        serializedName: "primaryMasterKey",
        type: {
          name: "String"
        }
      },
      secondaryMasterKey: {
        readOnly: true,
        serializedName: "secondaryMasterKey",
        type: {
          name: "String"
        }
      },
      primaryReadonlyMasterKey: {
        readOnly: true,
        serializedName: "properties.primaryReadonlyMasterKey",
        type: {
          name: "String"
        }
      },
      secondaryReadonlyMasterKey: {
        readOnly: true,
        serializedName: "properties.secondaryReadonlyMasterKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseAccountConnectionString: msRest.CompositeMapper = {
  serializedName: "DatabaseAccountConnectionString",
  type: {
    name: "Composite",
    className: "DatabaseAccountConnectionString",
    modelProperties: {
      connectionString: {
        readOnly: true,
        serializedName: "connectionString",
        type: {
          name: "String"
        }
      },
      description: {
        readOnly: true,
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseAccountListConnectionStringsResult: msRest.CompositeMapper = {
  serializedName: "DatabaseAccountListConnectionStringsResult",
  type: {
    name: "Composite",
    className: "DatabaseAccountListConnectionStringsResult",
    modelProperties: {
      connectionStrings: {
        serializedName: "connectionStrings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseAccountConnectionString"
            }
          }
        }
      }
    }
  }
};

export const DatabaseAccountRegenerateKeyParameters: msRest.CompositeMapper = {
  serializedName: "DatabaseAccountRegenerateKeyParameters",
  type: {
    name: "Composite",
    className: "DatabaseAccountRegenerateKeyParameters",
    modelProperties: {
      keyKind: {
        required: true,
        serializedName: "keyKind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: msRest.CompositeMapper = {
  serializedName: "Operation_display",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "Provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "Resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "Operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "Description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: msRest.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      }
    }
  }
};

export const MetricName: msRest.CompositeMapper = {
  serializedName: "MetricName",
  type: {
    name: "Composite",
    className: "MetricName",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      localizedValue: {
        readOnly: true,
        serializedName: "localizedValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Usage: msRest.CompositeMapper = {
  serializedName: "Usage",
  type: {
    name: "Composite",
    className: "Usage",
    modelProperties: {
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "Composite",
          className: "MetricName"
        }
      },
      quotaPeriod: {
        readOnly: true,
        serializedName: "quotaPeriod",
        type: {
          name: "String"
        }
      },
      limit: {
        readOnly: true,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      currentValue: {
        readOnly: true,
        serializedName: "currentValue",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PartitionUsage: msRest.CompositeMapper = {
  serializedName: "PartitionUsage",
  type: {
    name: "Composite",
    className: "PartitionUsage",
    modelProperties: {
      ...Usage.type.modelProperties,
      partitionId: {
        readOnly: true,
        serializedName: "partitionId",
        type: {
          name: "String"
        }
      },
      partitionKeyRangeId: {
        readOnly: true,
        serializedName: "partitionKeyRangeId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricAvailability: msRest.CompositeMapper = {
  serializedName: "MetricAvailability",
  type: {
    name: "Composite",
    className: "MetricAvailability",
    modelProperties: {
      timeGrain: {
        readOnly: true,
        serializedName: "timeGrain",
        type: {
          name: "String"
        }
      },
      retention: {
        readOnly: true,
        serializedName: "retention",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricDefinition: msRest.CompositeMapper = {
  serializedName: "MetricDefinition",
  type: {
    name: "Composite",
    className: "MetricDefinition",
    modelProperties: {
      metricAvailabilities: {
        readOnly: true,
        serializedName: "metricAvailabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricAvailability"
            }
          }
        }
      },
      primaryAggregationType: {
        readOnly: true,
        serializedName: "primaryAggregationType",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      resourceUri: {
        readOnly: true,
        serializedName: "resourceUri",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "Composite",
          className: "MetricName"
        }
      }
    }
  }
};

export const MetricValue: msRest.CompositeMapper = {
  serializedName: "MetricValue",
  type: {
    name: "Composite",
    className: "MetricValue",
    modelProperties: {
      _count: {
        readOnly: true,
        serializedName: "_count",
        type: {
          name: "Number"
        }
      },
      average: {
        readOnly: true,
        serializedName: "average",
        type: {
          name: "Number"
        }
      },
      maximum: {
        readOnly: true,
        serializedName: "maximum",
        type: {
          name: "Number"
        }
      },
      minimum: {
        readOnly: true,
        serializedName: "minimum",
        type: {
          name: "Number"
        }
      },
      timestamp: {
        readOnly: true,
        serializedName: "timestamp",
        type: {
          name: "DateTime"
        }
      },
      total: {
        readOnly: true,
        serializedName: "total",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Metric: msRest.CompositeMapper = {
  serializedName: "Metric",
  type: {
    name: "Composite",
    className: "Metric",
    modelProperties: {
      startTime: {
        readOnly: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        readOnly: true,
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      timeGrain: {
        readOnly: true,
        serializedName: "timeGrain",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "Composite",
          className: "MetricName"
        }
      },
      metricValues: {
        readOnly: true,
        serializedName: "metricValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricValue"
            }
          }
        }
      }
    }
  }
};

export const PercentileMetricValue: msRest.CompositeMapper = {
  serializedName: "PercentileMetricValue",
  type: {
    name: "Composite",
    className: "PercentileMetricValue",
    modelProperties: {
      ...MetricValue.type.modelProperties,
      p10: {
        readOnly: true,
        serializedName: "P10",
        type: {
          name: "Number"
        }
      },
      p25: {
        readOnly: true,
        serializedName: "P25",
        type: {
          name: "Number"
        }
      },
      p50: {
        readOnly: true,
        serializedName: "P50",
        type: {
          name: "Number"
        }
      },
      p75: {
        readOnly: true,
        serializedName: "P75",
        type: {
          name: "Number"
        }
      },
      p90: {
        readOnly: true,
        serializedName: "P90",
        type: {
          name: "Number"
        }
      },
      p95: {
        readOnly: true,
        serializedName: "P95",
        type: {
          name: "Number"
        }
      },
      p99: {
        readOnly: true,
        serializedName: "P99",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PercentileMetric: msRest.CompositeMapper = {
  serializedName: "PercentileMetric",
  type: {
    name: "Composite",
    className: "PercentileMetric",
    modelProperties: {
      startTime: {
        readOnly: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        readOnly: true,
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      timeGrain: {
        readOnly: true,
        serializedName: "timeGrain",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "Composite",
          className: "MetricName"
        }
      },
      metricValues: {
        readOnly: true,
        serializedName: "metricValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PercentileMetricValue"
            }
          }
        }
      }
    }
  }
};

export const PartitionMetric: msRest.CompositeMapper = {
  serializedName: "PartitionMetric",
  type: {
    name: "Composite",
    className: "PartitionMetric",
    modelProperties: {
      ...Metric.type.modelProperties,
      partitionId: {
        readOnly: true,
        serializedName: "partitionId",
        type: {
          name: "String"
        }
      },
      partitionKeyRangeId: {
        readOnly: true,
        serializedName: "partitionKeyRangeId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseAccountsListResult: msRest.CompositeMapper = {
  serializedName: "DatabaseAccountsListResult",
  type: {
    name: "Composite",
    className: "DatabaseAccountsListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseAccount"
            }
          }
        }
      }
    }
  }
};

export const MetricListResult: msRest.CompositeMapper = {
  serializedName: "MetricListResult",
  type: {
    name: "Composite",
    className: "MetricListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Metric"
            }
          }
        }
      }
    }
  }
};

export const UsagesResult: msRest.CompositeMapper = {
  serializedName: "UsagesResult",
  type: {
    name: "Composite",
    className: "UsagesResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Usage"
            }
          }
        }
      }
    }
  }
};

export const MetricDefinitionsListResult: msRest.CompositeMapper = {
  serializedName: "MetricDefinitionsListResult",
  type: {
    name: "Composite",
    className: "MetricDefinitionsListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricDefinition"
            }
          }
        }
      }
    }
  }
};

export const OperationListResult: msRest.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PercentileMetricListResult: msRest.CompositeMapper = {
  serializedName: "PercentileMetricListResult",
  type: {
    name: "Composite",
    className: "PercentileMetricListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PercentileMetric"
            }
          }
        }
      }
    }
  }
};

export const PartitionMetricListResult: msRest.CompositeMapper = {
  serializedName: "PartitionMetricListResult",
  type: {
    name: "Composite",
    className: "PartitionMetricListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PartitionMetric"
            }
          }
        }
      }
    }
  }
};

export const PartitionUsagesResult: msRest.CompositeMapper = {
  serializedName: "PartitionUsagesResult",
  type: {
    name: "Composite",
    className: "PartitionUsagesResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PartitionUsage"
            }
          }
        }
      }
    }
  }
};
