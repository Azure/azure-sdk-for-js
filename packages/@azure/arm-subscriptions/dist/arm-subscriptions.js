/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmSubscriptions = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for OfferType.
     * Possible values include: 'MS-AZR-0017P', 'MS-AZR-0148P'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: OfferType = <OfferType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var OfferType;
    (function (OfferType) {
        OfferType["MSAZR0017P"] = "MS-AZR-0017P";
        OfferType["MSAZR0148P"] = "MS-AZR-0148P";
    })(OfferType || (OfferType = {}));
    /**
     * Defines values for SubscriptionState.
     * Possible values include: 'Enabled', 'Warned', 'PastDue', 'Disabled',
     * 'Deleted'
     * @readonly
     * @enum {string}
     */
    var SubscriptionState;
    (function (SubscriptionState) {
        SubscriptionState["Enabled"] = "Enabled";
        SubscriptionState["Warned"] = "Warned";
        SubscriptionState["PastDue"] = "PastDue";
        SubscriptionState["Disabled"] = "Disabled";
        SubscriptionState["Deleted"] = "Deleted";
    })(SubscriptionState || (SubscriptionState = {}));
    /**
     * Defines values for SpendingLimit.
     * Possible values include: 'On', 'Off', 'CurrentPeriodOff'
     * @readonly
     * @enum {string}
     */
    var SpendingLimit;
    (function (SpendingLimit) {
        SpendingLimit["On"] = "On";
        SpendingLimit["Off"] = "Off";
        SpendingLimit["CurrentPeriodOff"] = "CurrentPeriodOff";
    })(SpendingLimit || (SpendingLimit = {}));

    var index = /*#__PURE__*/Object.freeze({
        get OfferType () { return OfferType; },
        get SubscriptionState () { return SubscriptionState; },
        get SpendingLimit () { return SpendingLimit; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var SubscriptionCreationResult = {
        serializedName: "SubscriptionCreationResult",
        type: {
            name: "Composite",
            className: "SubscriptionCreationResult",
            modelProperties: {
                subscriptionLink: {
                    serializedName: "subscriptionLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AdPrincipal = {
        serializedName: "AdPrincipal",
        type: {
            name: "Composite",
            className: "AdPrincipal",
            modelProperties: {
                objectId: {
                    required: true,
                    serializedName: "objectId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SubscriptionCreationParameters = {
        serializedName: "SubscriptionCreationParameters",
        type: {
            name: "Composite",
            className: "SubscriptionCreationParameters",
            modelProperties: {
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                owners: {
                    serializedName: "owners",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AdPrincipal"
                            }
                        }
                    }
                },
                offerType: {
                    serializedName: "offerType",
                    type: {
                        name: "String"
                    }
                },
                additionalParameters: {
                    serializedName: "additionalParameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }
            }
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SubscriptionOperation = {
        serializedName: "SubscriptionOperation",
        type: {
            name: "Composite",
            className: "SubscriptionOperation",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                statusDetail: {
                    serializedName: "statusDetail",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SubscriptionOperationListResult = {
        serializedName: "SubscriptionOperationListResult",
        type: {
            name: "Composite",
            className: "SubscriptionOperationListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubscriptionOperation"
                            }
                        }
                    }
                }
            }
        }
    };
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Location = {
        serializedName: "Location",
        type: {
            name: "Composite",
            className: "Location",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                subscriptionId: {
                    readOnly: true,
                    serializedName: "subscriptionId",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    readOnly: true,
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                latitude: {
                    readOnly: true,
                    serializedName: "latitude",
                    type: {
                        name: "String"
                    }
                },
                longitude: {
                    readOnly: true,
                    serializedName: "longitude",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SubscriptionPolicies = {
        serializedName: "SubscriptionPolicies",
        type: {
            name: "Composite",
            className: "SubscriptionPolicies",
            modelProperties: {
                locationPlacementId: {
                    readOnly: true,
                    serializedName: "locationPlacementId",
                    type: {
                        name: "String"
                    }
                },
                quotaId: {
                    readOnly: true,
                    serializedName: "quotaId",
                    type: {
                        name: "String"
                    }
                },
                spendingLimit: {
                    readOnly: true,
                    serializedName: "spendingLimit",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "On",
                            "Off",
                            "CurrentPeriodOff"
                        ]
                    }
                }
            }
        }
    };
    var Subscription = {
        serializedName: "Subscription",
        type: {
            name: "Composite",
            className: "Subscription",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                subscriptionId: {
                    readOnly: true,
                    serializedName: "subscriptionId",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    readOnly: true,
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Warned",
                            "PastDue",
                            "Disabled",
                            "Deleted"
                        ]
                    }
                },
                subscriptionPolicies: {
                    serializedName: "subscriptionPolicies",
                    type: {
                        name: "Composite",
                        className: "SubscriptionPolicies"
                    }
                },
                authorizationSource: {
                    serializedName: "authorizationSource",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TenantIdDescription = {
        serializedName: "TenantIdDescription",
        type: {
            name: "Composite",
            className: "TenantIdDescription",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SubscriptionFactoryCreateSubscriptionInEnrollmentAccountHeaders = {
        serializedName: "subscriptionfactory-createsubscriptioninenrollmentaccount-headers",
        type: {
            name: "Composite",
            className: "SubscriptionFactoryCreateSubscriptionInEnrollmentAccountHeaders",
            modelProperties: {
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                retryAfter: {
                    serializedName: "retry-after",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LocationListResult = {
        serializedName: "LocationListResult",
        type: {
            name: "Composite",
            className: "LocationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Location"
                            }
                        }
                    }
                }
            }
        }
    };
    var SubscriptionListResult = {
        serializedName: "SubscriptionListResult",
        type: {
            name: "Composite",
            className: "SubscriptionListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Subscription"
                            }
                        }
                    }
                },
                nextLink: {
                    required: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TenantListResult = {
        serializedName: "TenantListResult",
        type: {
            name: "Composite",
            className: "TenantListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TenantIdDescription"
                            }
                        }
                    }
                },
                nextLink: {
                    required: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        SubscriptionCreationResult: SubscriptionCreationResult,
        AdPrincipal: AdPrincipal,
        SubscriptionCreationParameters: SubscriptionCreationParameters,
        ErrorResponse: ErrorResponse,
        SubscriptionOperation: SubscriptionOperation,
        SubscriptionOperationListResult: SubscriptionOperationListResult,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        OperationListResult: OperationListResult,
        Location: Location,
        SubscriptionPolicies: SubscriptionPolicies,
        Subscription: Subscription,
        TenantIdDescription: TenantIdDescription,
        SubscriptionFactoryCreateSubscriptionInEnrollmentAccountHeaders: SubscriptionFactoryCreateSubscriptionInEnrollmentAccountHeaders,
        LocationListResult: LocationListResult,
        SubscriptionListResult: SubscriptionListResult,
        TenantListResult: TenantListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        OperationListResult: OperationListResult,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion0 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2018-03-01-preview',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion1 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2016-06-01',
            type: {
                name: "String"
            }
        }
    };
    var enrollmentAccountName = {
        parameterPath: "enrollmentAccountName",
        mapper: {
            required: true,
            serializedName: "enrollmentAccountName",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {SubscriptionClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Subscription/operations",
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        SubscriptionOperationListResult: SubscriptionOperationListResult,
        SubscriptionOperation: SubscriptionOperation,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a SubscriptionOperations. */
    var SubscriptionOperations = /** @class */ (function () {
        /**
         * Create a SubscriptionOperations.
         * @param {SubscriptionClientContext} client Reference to the service client.
         */
        function SubscriptionOperations(client) {
            this.client = client;
        }
        SubscriptionOperations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        return SubscriptionOperations;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.Subscription/subscriptionOperations",
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SubscriptionOperationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        SubscriptionCreationParameters: SubscriptionCreationParameters,
        AdPrincipal: AdPrincipal,
        SubscriptionCreationResult: SubscriptionCreationResult,
        SubscriptionFactoryCreateSubscriptionInEnrollmentAccountHeaders: SubscriptionFactoryCreateSubscriptionInEnrollmentAccountHeaders,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a SubscriptionFactory. */
    var SubscriptionFactory = /** @class */ (function () {
        /**
         * Create a SubscriptionFactory.
         * @param {SubscriptionClientContext} client Reference to the service client.
         */
        function SubscriptionFactory(client) {
            this.client = client;
        }
        /**
         * Creates an Azure subscription
         * @param enrollmentAccountName The name of the enrollment account to which the subscription will
         * be billed.
         * @param body The subscription creation parameters.
         * @param [options] The optional parameters
         * @returns Promise<Models.SubscriptionFactoryCreateSubscriptionInEnrollmentAccountResponse>
         */
        SubscriptionFactory.prototype.createSubscriptionInEnrollmentAccount = function (enrollmentAccountName$$1, body, options) {
            return this.beginCreateSubscriptionInEnrollmentAccount(enrollmentAccountName$$1, body, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates an Azure subscription
         * @param enrollmentAccountName The name of the enrollment account to which the subscription will
         * be billed.
         * @param body The subscription creation parameters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        SubscriptionFactory.prototype.beginCreateSubscriptionInEnrollmentAccount = function (enrollmentAccountName$$1, body, options) {
            return this.client.sendLRORequest({
                enrollmentAccountName: enrollmentAccountName$$1,
                body: body,
                options: options
            }, beginCreateSubscriptionInEnrollmentAccountOperationSpec, options);
        };
        return SubscriptionFactory;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var beginCreateSubscriptionInEnrollmentAccountOperationSpec = {
        httpMethod: "POST",
        path: "providers/Microsoft.Billing/enrollmentAccounts/{enrollmentAccountName}/providers/Microsoft.Subscription/createSubscription",
        urlParameters: [
            enrollmentAccountName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "body",
            mapper: __assign({}, SubscriptionCreationParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: SubscriptionCreationResult,
                headersMapper: SubscriptionFactoryCreateSubscriptionInEnrollmentAccountHeaders
            },
            202: {
                headersMapper: SubscriptionFactoryCreateSubscriptionInEnrollmentAccountHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        LocationListResult: LocationListResult,
        Location: Location,
        CloudError: CloudError,
        Subscription: Subscription,
        SubscriptionPolicies: SubscriptionPolicies,
        SubscriptionListResult: SubscriptionListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Subscriptions. */
    var Subscriptions = /** @class */ (function () {
        /**
         * Create a Subscriptions.
         * @param {SubscriptionClientContext} client Reference to the service client.
         */
        function Subscriptions(client) {
            this.client = client;
        }
        Subscriptions.prototype.listLocations = function (subscriptionId$$1, options, callback) {
            return this.client.sendOperationRequest({
                subscriptionId: subscriptionId$$1,
                options: options
            }, listLocationsOperationSpec, callback);
        };
        Subscriptions.prototype.get = function (subscriptionId$$1, options, callback) {
            return this.client.sendOperationRequest({
                subscriptionId: subscriptionId$$1,
                options: options
            }, getOperationSpec, callback);
        };
        Subscriptions.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$2, callback);
        };
        Subscriptions.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Subscriptions;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listLocationsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/locations",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LocationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Subscription
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions",
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SubscriptionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SubscriptionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        TenantListResult: TenantListResult,
        TenantIdDescription: TenantIdDescription,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Tenants. */
    var Tenants = /** @class */ (function () {
        /**
         * Create a Tenants.
         * @param {SubscriptionClientContext} client Reference to the service client.
         */
        function Tenants(client) {
            this.client = client;
        }
        Tenants.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$3, callback);
        };
        Tenants.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return Tenants;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "tenants",
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TenantListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TenantListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-subscriptions";
    var packageVersion = "1.0.0-preview";
    var SubscriptionClientContext = /** @class */ (function (_super) {
        __extends(SubscriptionClientContext, _super);
        /**
         * Initializes a new instance of the SubscriptionClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param [options] The parameter options
         */
        function SubscriptionClientContext(credentials, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return SubscriptionClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var SubscriptionClient = /** @class */ (function (_super) {
        __extends(SubscriptionClient, _super);
        /**
         * Initializes a new instance of the SubscriptionClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param [options] The parameter options
         */
        function SubscriptionClient(credentials, options) {
            var _this = _super.call(this, credentials, options) || this;
            _this.operations = new Operations(_this);
            _this.subscriptionOperations = new SubscriptionOperations(_this);
            _this.subscriptionFactory = new SubscriptionFactory(_this);
            _this.subscriptions = new Subscriptions(_this);
            _this.tenants = new Tenants(_this);
            return _this;
        }
        return SubscriptionClient;
    }(SubscriptionClientContext));

    exports.SubscriptionClient = SubscriptionClient;
    exports.SubscriptionClientContext = SubscriptionClientContext;
    exports.SubscriptionModels = index;
    exports.SubscriptionMappers = mappers;
    exports.Operations = Operations;
    exports.SubscriptionOperations = SubscriptionOperations;
    exports.SubscriptionFactory = SubscriptionFactory;
    exports.Subscriptions = Subscriptions;
    exports.Tenants = Tenants;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-subscriptions.js.map
