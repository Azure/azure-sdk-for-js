/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmStoragesync = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for Reason.
     * Possible values include: 'Registered', 'Unregistered', 'Warned',
     * 'Suspended', 'Deleted'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Reason = <Reason>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Reason;
    (function (Reason) {
        Reason["Registered"] = "Registered";
        Reason["Unregistered"] = "Unregistered";
        Reason["Warned"] = "Warned";
        Reason["Suspended"] = "Suspended";
        Reason["Deleted"] = "Deleted";
    })(Reason || (Reason = {}));
    /**
     * Defines values for NameAvailabilityReason.
     * Possible values include: 'Invalid', 'AlreadyExists'
     * @readonly
     * @enum {string}
     */
    var NameAvailabilityReason;
    (function (NameAvailabilityReason) {
        NameAvailabilityReason["Invalid"] = "Invalid";
        NameAvailabilityReason["AlreadyExists"] = "AlreadyExists";
    })(NameAvailabilityReason || (NameAvailabilityReason = {}));
    /**
     * Defines values for CloudTiering.
     * Possible values include: 'on', 'off'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: CloudTiering =
     * <CloudTiering>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var CloudTiering;
    (function (CloudTiering) {
        CloudTiering["On"] = "on";
        CloudTiering["Off"] = "off";
    })(CloudTiering || (CloudTiering = {}));
    /**
     * Defines values for CloudTiering1.
     * Possible values include: 'on', 'off'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: CloudTiering1 =
     * <CloudTiering1>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var CloudTiering1;
    (function (CloudTiering1) {
        CloudTiering1["On"] = "on";
        CloudTiering1["Off"] = "off";
    })(CloudTiering1 || (CloudTiering1 = {}));
    /**
     * Defines values for CloudTiering2.
     * Possible values include: 'on', 'off'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: CloudTiering2 =
     * <CloudTiering2>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var CloudTiering2;
    (function (CloudTiering2) {
        CloudTiering2["On"] = "on";
        CloudTiering2["Off"] = "off";
    })(CloudTiering2 || (CloudTiering2 = {}));
    /**
     * Defines values for Status.
     * Possible values include: 'active', 'expired', 'succeeded', 'aborted',
     * 'failed'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Status = <Status>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Status;
    (function (Status) {
        Status["Active"] = "active";
        Status["Expired"] = "expired";
        Status["Succeeded"] = "succeeded";
        Status["Aborted"] = "aborted";
        Status["Failed"] = "failed";
    })(Status || (Status = {}));
    /**
     * Defines values for Operation.
     * Possible values include: 'do', 'undo', 'cancel'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Operation = <Operation>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Operation;
    (function (Operation) {
        Operation["Do"] = "do";
        Operation["Undo"] = "undo";
        Operation["Cancel"] = "cancel";
    })(Operation || (Operation = {}));

    var index = /*#__PURE__*/Object.freeze({
        get Reason () { return Reason; },
        get NameAvailabilityReason () { return NameAvailabilityReason; },
        get CloudTiering () { return CloudTiering; },
        get CloudTiering1 () { return CloudTiering1; },
        get CloudTiering2 () { return CloudTiering2; },
        get Status () { return Status; },
        get Operation () { return Operation; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var StorageSyncErrorDetails = {
        serializedName: "StorageSyncErrorDetails",
        type: {
            name: "Composite",
            className: "StorageSyncErrorDetails",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    serializedName: "target",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StorageSyncApiError = {
        serializedName: "StorageSyncApiError",
        type: {
            name: "Composite",
            className: "StorageSyncApiError",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    serializedName: "target",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    serializedName: "details",
                    type: {
                        name: "Composite",
                        className: "StorageSyncErrorDetails"
                    }
                }
            }
        }
    };
    var StorageSyncError = {
        serializedName: "StorageSyncError",
        type: {
            name: "Composite",
            className: "StorageSyncError",
            modelProperties: {
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "StorageSyncApiError"
                    }
                },
                innererror: {
                    serializedName: "innererror",
                    type: {
                        name: "Composite",
                        className: "StorageSyncApiError"
                    }
                }
            }
        }
    };
    var SubscriptionState = {
        serializedName: "SubscriptionState",
        type: {
            name: "Composite",
            className: "SubscriptionState",
            modelProperties: {
                state: {
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                },
                istransitioning: {
                    readOnly: true,
                    serializedName: "istransitioning",
                    type: {
                        name: "Boolean"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TrackedResource = {
        serializedName: "TrackedResource",
        type: {
            name: "Composite",
            className: "TrackedResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var StorageSyncService = {
        serializedName: "StorageSyncService",
        type: {
            name: "Composite",
            className: "StorageSyncService",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { storageSyncServiceStatus: {
                    readOnly: true,
                    serializedName: "properties.storageSyncServiceStatus",
                    type: {
                        name: "Number"
                    }
                }, storageSyncServiceUid: {
                    readOnly: true,
                    serializedName: "properties.storageSyncServiceUid",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ProxyResource = {
        serializedName: "ProxyResource",
        type: {
            name: "Composite",
            className: "ProxyResource",
            modelProperties: __assign({}, Resource.type.modelProperties)
        }
    };
    var SyncGroup = {
        serializedName: "SyncGroup",
        type: {
            name: "Composite",
            className: "SyncGroup",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { uniqueId: {
                    serializedName: "properties.uniqueId",
                    type: {
                        name: "String"
                    }
                }, syncGroupStatus: {
                    readOnly: true,
                    serializedName: "properties.syncGroupStatus",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var CloudEndpoint = {
        serializedName: "CloudEndpoint",
        type: {
            name: "Composite",
            className: "CloudEndpoint",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { storageAccountResourceId: {
                    serializedName: "properties.storageAccountResourceId",
                    type: {
                        name: "String"
                    }
                }, storageAccountShareName: {
                    serializedName: "properties.storageAccountShareName",
                    type: {
                        name: "String"
                    }
                }, storageAccountTenantId: {
                    serializedName: "properties.storageAccountTenantId",
                    type: {
                        name: "String"
                    }
                }, partnershipId: {
                    serializedName: "properties.partnershipId",
                    type: {
                        name: "String"
                    }
                }, friendlyName: {
                    serializedName: "properties.friendlyName",
                    type: {
                        name: "String"
                    }
                }, backupEnabled: {
                    readOnly: true,
                    serializedName: "properties.backupEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, lastWorkflowId: {
                    serializedName: "properties.lastWorkflowId",
                    type: {
                        name: "String"
                    }
                }, lastOperationName: {
                    serializedName: "properties.lastOperationName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RecallActionParameters = {
        serializedName: "RecallActionParameters",
        type: {
            name: "Composite",
            className: "RecallActionParameters",
            modelProperties: {
                pattern: {
                    serializedName: "pattern",
                    type: {
                        name: "String"
                    }
                },
                recallPath: {
                    serializedName: "recallPath",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StorageSyncServiceCreateParameters = {
        serializedName: "StorageSyncServiceCreateParameters",
        type: {
            name: "Composite",
            className: "StorageSyncServiceCreateParameters",
            modelProperties: {
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var SyncGroupCreateParameters = {
        serializedName: "SyncGroupCreateParameters",
        type: {
            name: "Composite",
            className: "SyncGroupCreateParameters",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Object"
                    }
                } })
        }
    };
    var CloudEndpointCreateParameters = {
        serializedName: "CloudEndpointCreateParameters",
        type: {
            name: "Composite",
            className: "CloudEndpointCreateParameters",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { storageAccountResourceId: {
                    serializedName: "properties.storageAccountResourceId",
                    type: {
                        name: "String"
                    }
                }, storageAccountShareName: {
                    serializedName: "properties.storageAccountShareName",
                    type: {
                        name: "String"
                    }
                }, storageAccountTenantId: {
                    serializedName: "properties.storageAccountTenantId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ServerEndpointCreateParameters = {
        serializedName: "ServerEndpointCreateParameters",
        type: {
            name: "Composite",
            className: "ServerEndpointCreateParameters",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { serverLocalPath: {
                    serializedName: "properties.serverLocalPath",
                    type: {
                        name: "String"
                    }
                }, cloudTiering: {
                    serializedName: "properties.cloudTiering",
                    type: {
                        name: "String"
                    }
                }, volumeFreeSpacePercent: {
                    serializedName: "properties.volumeFreeSpacePercent",
                    constraints: {
                        InclusiveMaximum: 100,
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                }, tierFilesOlderThanDays: {
                    serializedName: "properties.tierFilesOlderThanDays",
                    constraints: {
                        InclusiveMaximum: 2147483647,
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                }, friendlyName: {
                    serializedName: "properties.friendlyName",
                    type: {
                        name: "String"
                    }
                }, serverResourceId: {
                    serializedName: "properties.serverResourceId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var TriggerRolloverRequest = {
        serializedName: "TriggerRolloverRequest",
        type: {
            name: "Composite",
            className: "TriggerRolloverRequest",
            modelProperties: {
                certificateData: {
                    serializedName: "certificateData",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RegisteredServerCreateParameters = {
        serializedName: "RegisteredServerCreateParameters",
        type: {
            name: "Composite",
            className: "RegisteredServerCreateParameters",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { serverCertificate: {
                    serializedName: "properties.serverCertificate",
                    type: {
                        name: "String"
                    }
                }, agentVersion: {
                    serializedName: "properties.agentVersion",
                    type: {
                        name: "String"
                    }
                }, serverOSVersion: {
                    serializedName: "properties.serverOSVersion",
                    type: {
                        name: "String"
                    }
                }, lastHeartBeat: {
                    serializedName: "properties.lastHeartBeat",
                    type: {
                        name: "String"
                    }
                }, serverRole: {
                    serializedName: "properties.serverRole",
                    type: {
                        name: "String"
                    }
                }, clusterId: {
                    serializedName: "properties.clusterId",
                    type: {
                        name: "String"
                    }
                }, clusterName: {
                    serializedName: "properties.clusterName",
                    type: {
                        name: "String"
                    }
                }, serverId: {
                    serializedName: "properties.serverId",
                    type: {
                        name: "String"
                    }
                }, friendlyName: {
                    serializedName: "properties.friendlyName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ServerEndpointUpdateParameters = {
        serializedName: "ServerEndpointUpdateParameters",
        type: {
            name: "Composite",
            className: "ServerEndpointUpdateParameters",
            modelProperties: {
                cloudTiering: {
                    serializedName: "properties.cloudTiering",
                    type: {
                        name: "String"
                    }
                },
                volumeFreeSpacePercent: {
                    serializedName: "properties.volumeFreeSpacePercent",
                    constraints: {
                        InclusiveMaximum: 100,
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                },
                tierFilesOlderThanDays: {
                    serializedName: "properties.tierFilesOlderThanDays",
                    constraints: {
                        InclusiveMaximum: 2147483647,
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ServerEndpoint = {
        serializedName: "ServerEndpoint",
        type: {
            name: "Composite",
            className: "ServerEndpoint",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { serverLocalPath: {
                    serializedName: "properties.serverLocalPath",
                    type: {
                        name: "String"
                    }
                }, cloudTiering: {
                    serializedName: "properties.cloudTiering",
                    type: {
                        name: "String"
                    }
                }, volumeFreeSpacePercent: {
                    serializedName: "properties.volumeFreeSpacePercent",
                    constraints: {
                        InclusiveMaximum: 100,
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                }, tierFilesOlderThanDays: {
                    serializedName: "properties.tierFilesOlderThanDays",
                    constraints: {
                        InclusiveMaximum: 2147483647,
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                }, friendlyName: {
                    serializedName: "properties.friendlyName",
                    type: {
                        name: "String"
                    }
                }, serverResourceId: {
                    serializedName: "properties.serverResourceId",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, lastWorkflowId: {
                    serializedName: "properties.lastWorkflowId",
                    type: {
                        name: "String"
                    }
                }, lastOperationName: {
                    serializedName: "properties.lastOperationName",
                    type: {
                        name: "String"
                    }
                }, syncStatus: {
                    serializedName: "properties.syncStatus",
                    type: {
                        name: "Object"
                    }
                } })
        }
    };
    var RegisteredServer = {
        serializedName: "RegisteredServer",
        type: {
            name: "Composite",
            className: "RegisteredServer",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { serverCertificate: {
                    serializedName: "properties.serverCertificate",
                    type: {
                        name: "String"
                    }
                }, agentVersion: {
                    serializedName: "properties.agentVersion",
                    type: {
                        name: "String"
                    }
                }, serverOSVersion: {
                    serializedName: "properties.serverOSVersion",
                    type: {
                        name: "String"
                    }
                }, serverManagementtErrorCode: {
                    serializedName: "properties.serverManagementtErrorCode",
                    type: {
                        name: "Number"
                    }
                }, lastHeartBeat: {
                    serializedName: "properties.lastHeartBeat",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, serverRole: {
                    serializedName: "properties.serverRole",
                    type: {
                        name: "String"
                    }
                }, clusterId: {
                    serializedName: "properties.clusterId",
                    type: {
                        name: "String"
                    }
                }, clusterName: {
                    serializedName: "properties.clusterName",
                    type: {
                        name: "String"
                    }
                }, serverId: {
                    serializedName: "properties.serverId",
                    type: {
                        name: "String"
                    }
                }, storageSyncServiceUid: {
                    serializedName: "properties.storageSyncServiceUid",
                    type: {
                        name: "String"
                    }
                }, lastWorkflowId: {
                    serializedName: "properties.lastWorkflowId",
                    type: {
                        name: "String"
                    }
                }, lastOperationName: {
                    serializedName: "properties.lastOperationName",
                    type: {
                        name: "String"
                    }
                }, discoveryEndpointUri: {
                    serializedName: "properties.discoveryEndpointUri",
                    type: {
                        name: "String"
                    }
                }, resourceLocation: {
                    serializedName: "properties.resourceLocation",
                    type: {
                        name: "String"
                    }
                }, serviceLocation: {
                    serializedName: "properties.serviceLocation",
                    type: {
                        name: "String"
                    }
                }, friendlyName: {
                    serializedName: "properties.friendlyName",
                    type: {
                        name: "String"
                    }
                }, managementEndpointUri: {
                    serializedName: "properties.managementEndpointUri",
                    type: {
                        name: "String"
                    }
                }, monitoringConfiguration: {
                    serializedName: "properties.monitoringConfiguration",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ResourcesMoveInfo = {
        serializedName: "ResourcesMoveInfo",
        type: {
            name: "Composite",
            className: "ResourcesMoveInfo",
            modelProperties: {
                targetResourceGroup: {
                    serializedName: "targetResourceGroup",
                    type: {
                        name: "String"
                    }
                },
                resources: {
                    serializedName: "resources",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var Workflow = {
        serializedName: "Workflow",
        type: {
            name: "Composite",
            className: "Workflow",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { lastStepName: {
                    serializedName: "properties.lastStepName",
                    type: {
                        name: "String"
                    }
                }, status: {
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, operation: {
                    serializedName: "properties.operation",
                    type: {
                        name: "String"
                    }
                }, steps: {
                    serializedName: "properties.steps",
                    type: {
                        name: "String"
                    }
                }, lastOperationId: {
                    serializedName: "properties.lastOperationId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var OperationDisplayInfo = {
        serializedName: "OperationDisplayInfo",
        type: {
            name: "Composite",
            className: "OperationDisplayInfo",
            modelProperties: {
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationEntity = {
        serializedName: "OperationEntity",
        type: {
            name: "Composite",
            className: "OperationEntity",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplayInfo"
                    }
                },
                origin: {
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationDisplayResource = {
        serializedName: "OperationDisplayResource",
        type: {
            name: "Composite",
            className: "OperationDisplayResource",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CheckNameAvailabilityParameters = {
        serializedName: "CheckNameAvailabilityParameters",
        type: {
            name: "Composite",
            className: "CheckNameAvailabilityParameters",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    isConstant: true,
                    serializedName: "type",
                    defaultValue: 'Microsoft.StorageSync/storageSyncServices',
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CheckNameAvailabilityResult = {
        serializedName: "CheckNameAvailabilityResult",
        type: {
            name: "Composite",
            className: "CheckNameAvailabilityResult",
            modelProperties: {
                nameAvailable: {
                    readOnly: true,
                    serializedName: "nameAvailable",
                    type: {
                        name: "Boolean"
                    }
                },
                reason: {
                    readOnly: true,
                    serializedName: "reason",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Invalid",
                            "AlreadyExists"
                        ]
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RestoreFileSpec = {
        serializedName: "RestoreFileSpec",
        type: {
            name: "Composite",
            className: "RestoreFileSpec",
            modelProperties: {
                path: {
                    serializedName: "path",
                    type: {
                        name: "String"
                    }
                },
                isdir: {
                    readOnly: true,
                    serializedName: "isdir",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var PostRestoreRequest = {
        serializedName: "PostRestoreRequest",
        type: {
            name: "Composite",
            className: "PostRestoreRequest",
            modelProperties: {
                partition: {
                    serializedName: "partition",
                    type: {
                        name: "String"
                    }
                },
                replicaGroup: {
                    serializedName: "replicaGroup",
                    type: {
                        name: "String"
                    }
                },
                requestId: {
                    serializedName: "requestId",
                    type: {
                        name: "String"
                    }
                },
                azureFileShareUri: {
                    serializedName: "azureFileShareUri",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                sourceAzureFileShareUri: {
                    serializedName: "sourceAzureFileShareUri",
                    type: {
                        name: "String"
                    }
                },
                failedFileList: {
                    serializedName: "failedFileList",
                    type: {
                        name: "String"
                    }
                },
                restoreFileSpec: {
                    serializedName: "restoreFileSpec",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RestoreFileSpec"
                            }
                        }
                    }
                }
            }
        }
    };
    var PreRestoreRequest = {
        serializedName: "PreRestoreRequest",
        type: {
            name: "Composite",
            className: "PreRestoreRequest",
            modelProperties: {
                partition: {
                    serializedName: "partition",
                    type: {
                        name: "String"
                    }
                },
                replicaGroup: {
                    serializedName: "replicaGroup",
                    type: {
                        name: "String"
                    }
                },
                requestId: {
                    serializedName: "requestId",
                    type: {
                        name: "String"
                    }
                },
                azureFileShareUri: {
                    serializedName: "azureFileShareUri",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                sourceAzureFileShareUri: {
                    serializedName: "sourceAzureFileShareUri",
                    type: {
                        name: "String"
                    }
                },
                backupMetadataPropertyBag: {
                    serializedName: "backupMetadataPropertyBag",
                    type: {
                        name: "String"
                    }
                },
                restoreFileSpec: {
                    serializedName: "restoreFileSpec",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RestoreFileSpec"
                            }
                        }
                    }
                },
                pauseWaitForSyncDrainTimePeriodInSeconds: {
                    serializedName: "pauseWaitForSyncDrainTimePeriodInSeconds",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var BackupRequest = {
        serializedName: "BackupRequest",
        type: {
            name: "Composite",
            className: "BackupRequest",
            modelProperties: {
                azureFileShare: {
                    serializedName: "azureFileShare",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PostBackupResponse = {
        serializedName: "PostBackupResponse",
        type: {
            name: "Composite",
            className: "PostBackupResponse",
            modelProperties: {
                cloudEndpointName: {
                    readOnly: true,
                    serializedName: "backupMetadata.cloudEndpointName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StorageSyncServiceUpdateParameters = {
        serializedName: "StorageSyncServiceUpdateParameters",
        type: {
            name: "Composite",
            className: "StorageSyncServiceUpdateParameters",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var AzureEntityResource = {
        serializedName: "AzureEntityResource",
        type: {
            name: "Composite",
            className: "AzureEntityResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var OperationsListHeaders = {
        serializedName: "operations-list-headers",
        type: {
            name: "Composite",
            className: "OperationsListHeaders",
            modelProperties: {
                xMsRequestId: {
                    serializedName: "x-ms-request-id",
                    type: {
                        name: "String"
                    }
                },
                xMsCorrelationRequestId: {
                    serializedName: "x-ms-correlation-request-id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StorageSyncServicesGetHeaders = {
        serializedName: "storagesyncservices-get-headers",
        type: {
            name: "Composite",
            className: "StorageSyncServicesGetHeaders",
            modelProperties: {
                xMsRequestId: {
                    serializedName: "x-ms-request-id",
                    type: {
                        name: "String"
                    }
                },
                xMsCorrelationRequestId: {
                    serializedName: "x-ms-correlation-request-id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StorageSyncServicesUpdateHeaders = {
        serializedName: "storagesyncservices-update-headers",
        type: {
            name: "Composite",
            className: "StorageSyncServicesUpdateHeaders",
            modelProperties: {
                xMsRequestId: {
                    serializedName: "x-ms-request-id",
                    type: {
                        name: "String"
                    }
                },
                xMsCorrelationRequestId: {
                    serializedName: "x-ms-correlation-request-id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StorageSyncServicesDeleteHeaders = {
        serializedName: "storagesyncservices-delete-headers",
        type: {
            name: "Composite",
            className: "StorageSyncServicesDeleteHeaders",
            modelProperties: {
                xMsRequestId: {
                    serializedName: "x-ms-request-id",
                    type: {
                        name: "String"
                    }
                },
                xMsCorrelationRequestId: {
                    serializedName: "x-ms-correlation-request-id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StorageSyncServicesListByResourceGroupHeaders = {
        serializedName: "storagesyncservices-listbyresourcegroup-headers",
        type: {
            name: "Composite",
            className: "StorageSyncServicesListByResourceGroupHeaders",
            modelProperties: {
                xMsRequestId: {
                    serializedName: "x-ms-request-id",
                    type: {
                        name: "String"
                    }
                },
                xMsCorrelationRequestId: {
                    serializedName: "x-ms-correlation-request-id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StorageSyncServicesListBySubscriptionHeaders = {
        serializedName: "storagesyncservices-listbysubscription-headers",
        type: {
            name: "Composite",
            className: "StorageSyncServicesListBySubscriptionHeaders",
            modelProperties: {
                xMsRequestId: {
                    serializedName: "x-ms-request-id",
                    type: {
                        name: "String"
                    }
                },
                xMsCorrelationRequestId: {
                    serializedName: "x-ms-correlation-request-id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SyncGroupsListByStorageSyncServiceHeaders = {
        serializedName: "syncgroups-listbystoragesyncservice-headers",
        type: {
            name: "Composite",
            className: "SyncGroupsListByStorageSyncServiceHeaders",
            modelProperties: {
                xMsRequestId: {
                    serializedName: "x-ms-request-id",
                    type: {
                        name: "String"
                    }
                },
                xMsCorrelationRequestId: {
                    serializedName: "x-ms-correlation-request-id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SyncGroupsCreateHeaders = {
        serializedName: "syncgroups-create-headers",
        type: {
            name: "Composite",
            className: "SyncGroupsCreateHeaders",
            modelProperties: {
                xMsRequestId: {
                    serializedName: "x-ms-request-id",
                    type: {
                        name: "String"
                    }
                },
                xMsCorrelationRequestId: {
                    serializedName: "x-ms-correlation-request-id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SyncGroupsGetHeaders = {
        serializedName: "syncgroups-get-headers",
        type: {
            name: "Composite",
            className: "SyncGroupsGetHeaders",
            modelProperties: {
                xMsRequestId: {
                    serializedName: "x-ms-request-id",
                    type: {
                        name: "String"
                    }
                },
                xMsCorrelationRequestId: {
                    serializedName: "x-ms-correlation-request-id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SyncGroupsDeleteHeaders = {
        serializedName: "syncgroups-delete-headers",
        type: {
            name: "Composite",
            className: "SyncGroupsDeleteHeaders",
            modelProperties: {
                xMsRequestId: {
                    serializedName: "x-ms-request-id",
                    type: {
                        name: "String"
                    }
                },
                xMsCorrelationRequestId: {
                    serializedName: "x-ms-correlation-request-id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CloudEndpointsCreateHeaders = {
        serializedName: "cloudendpoints-create-headers",
        type: {
            name: "Composite",
            className: "CloudEndpointsCreateHeaders",
            modelProperties: {
                xMsRequestId: {
                    serializedName: "x-ms-request-id",
                    type: {
                        name: "String"
                    }
                },
                xMsCorrelationRequestId: {
                    serializedName: "x-ms-correlation-request-id",
                    type: {
                        name: "String"
                    }
                },
                azureAsyncOperation: {
                    serializedName: "azure-asyncoperation",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                retryAfter: {
                    serializedName: "retry-after",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CloudEndpointsGetHeaders = {
        serializedName: "cloudendpoints-get-headers",
        type: {
            name: "Composite",
            className: "CloudEndpointsGetHeaders",
            modelProperties: {
                xMsRequestId: {
                    serializedName: "x-ms-request-id",
                    type: {
                        name: "String"
                    }
                },
                xMsCorrelationRequestId: {
                    serializedName: "x-ms-correlation-request-id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CloudEndpointsDeleteHeaders = {
        serializedName: "cloudendpoints-delete-headers",
        type: {
            name: "Composite",
            className: "CloudEndpointsDeleteHeaders",
            modelProperties: {
                xMsRequestId: {
                    serializedName: "x-ms-request-id",
                    type: {
                        name: "String"
                    }
                },
                xMsCorrelationRequestId: {
                    serializedName: "x-ms-correlation-request-id",
                    type: {
                        name: "String"
                    }
                },
                azureAsyncOperation: {
                    serializedName: "azure-asyncoperation",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                retryAfter: {
                    serializedName: "retry-after",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CloudEndpointsListBySyncGroupHeaders = {
        serializedName: "cloudendpoints-listbysyncgroup-headers",
        type: {
            name: "Composite",
            className: "CloudEndpointsListBySyncGroupHeaders",
            modelProperties: {
                xMsRequestId: {
                    serializedName: "x-ms-request-id",
                    type: {
                        name: "String"
                    }
                },
                xMsCorrelationRequestId: {
                    serializedName: "x-ms-correlation-request-id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CloudEndpointsPreBackupHeaders = {
        serializedName: "cloudendpoints-prebackup-headers",
        type: {
            name: "Composite",
            className: "CloudEndpointsPreBackupHeaders",
            modelProperties: {
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                xMsRequestId: {
                    serializedName: "x-ms-request-id",
                    type: {
                        name: "String"
                    }
                },
                xMsCorrelationRequestId: {
                    serializedName: "x-ms-correlation-request-id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CloudEndpointsPostBackupHeaders = {
        serializedName: "cloudendpoints-postbackup-headers",
        type: {
            name: "Composite",
            className: "CloudEndpointsPostBackupHeaders",
            modelProperties: {
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                xMsRequestId: {
                    serializedName: "x-ms-request-id",
                    type: {
                        name: "String"
                    }
                },
                xMsCorrelationRequestId: {
                    serializedName: "x-ms-correlation-request-id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CloudEndpointsPreRestoreHeaders = {
        serializedName: "cloudendpoints-prerestore-headers",
        type: {
            name: "Composite",
            className: "CloudEndpointsPreRestoreHeaders",
            modelProperties: {
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                xMsRequestId: {
                    serializedName: "x-ms-request-id",
                    type: {
                        name: "String"
                    }
                },
                xMsCorrelationRequestId: {
                    serializedName: "x-ms-correlation-request-id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CloudEndpointsRestoreheartbeatHeaders = {
        serializedName: "cloudendpoints-restoreheartbeat-headers",
        type: {
            name: "Composite",
            className: "CloudEndpointsRestoreheartbeatHeaders",
            modelProperties: {
                xMsRequestId: {
                    serializedName: "x-ms-request-id",
                    type: {
                        name: "String"
                    }
                },
                xMsCorrelationRequestId: {
                    serializedName: "x-ms-correlation-request-id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CloudEndpointsPostRestoreHeaders = {
        serializedName: "cloudendpoints-postrestore-headers",
        type: {
            name: "Composite",
            className: "CloudEndpointsPostRestoreHeaders",
            modelProperties: {
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                xMsRequestId: {
                    serializedName: "x-ms-request-id",
                    type: {
                        name: "String"
                    }
                },
                xMsCorrelationRequestId: {
                    serializedName: "x-ms-correlation-request-id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServerEndpointsCreateHeaders = {
        serializedName: "serverendpoints-create-headers",
        type: {
            name: "Composite",
            className: "ServerEndpointsCreateHeaders",
            modelProperties: {
                xMsRequestId: {
                    serializedName: "x-ms-request-id",
                    type: {
                        name: "String"
                    }
                },
                xMsCorrelationRequestId: {
                    serializedName: "x-ms-correlation-request-id",
                    type: {
                        name: "String"
                    }
                },
                azureAsyncOperation: {
                    serializedName: "azure-asyncoperation",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServerEndpointsUpdateHeaders = {
        serializedName: "serverendpoints-update-headers",
        type: {
            name: "Composite",
            className: "ServerEndpointsUpdateHeaders",
            modelProperties: {
                xMsRequestId: {
                    serializedName: "x-ms-request-id",
                    type: {
                        name: "String"
                    }
                },
                xMsCorrelationRequestId: {
                    serializedName: "x-ms-correlation-request-id",
                    type: {
                        name: "String"
                    }
                },
                azureAsyncOperation: {
                    serializedName: "azure-asyncoperation",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServerEndpointsGetHeaders = {
        serializedName: "serverendpoints-get-headers",
        type: {
            name: "Composite",
            className: "ServerEndpointsGetHeaders",
            modelProperties: {
                xMsRequestId: {
                    serializedName: "x-ms-request-id",
                    type: {
                        name: "String"
                    }
                },
                xMsCorrelationRequestId: {
                    serializedName: "x-ms-correlation-request-id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServerEndpointsDeleteHeaders = {
        serializedName: "serverendpoints-delete-headers",
        type: {
            name: "Composite",
            className: "ServerEndpointsDeleteHeaders",
            modelProperties: {
                xMsRequestId: {
                    serializedName: "x-ms-request-id",
                    type: {
                        name: "String"
                    }
                },
                xMsCorrelationRequestId: {
                    serializedName: "x-ms-correlation-request-id",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServerEndpointsListBySyncGroupHeaders = {
        serializedName: "serverendpoints-listbysyncgroup-headers",
        type: {
            name: "Composite",
            className: "ServerEndpointsListBySyncGroupHeaders",
            modelProperties: {
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                xMsRequestId: {
                    serializedName: "x-ms-request-id",
                    type: {
                        name: "String"
                    }
                },
                xMsCorrelationRequestId: {
                    serializedName: "x-ms-correlation-request-id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServerEndpointsRecallActionHeaders = {
        serializedName: "serverendpoints-recallaction-headers",
        type: {
            name: "Composite",
            className: "ServerEndpointsRecallActionHeaders",
            modelProperties: {
                xMsRequestId: {
                    serializedName: "x-ms-request-id",
                    type: {
                        name: "String"
                    }
                },
                xMsCorrelationRequestId: {
                    serializedName: "x-ms-correlation-request-id",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RegisteredServersListByStorageSyncServiceHeaders = {
        serializedName: "registeredservers-listbystoragesyncservice-headers",
        type: {
            name: "Composite",
            className: "RegisteredServersListByStorageSyncServiceHeaders",
            modelProperties: {
                xMsRequestId: {
                    serializedName: "x-ms-request-id",
                    type: {
                        name: "String"
                    }
                },
                xMsCorrelationRequestId: {
                    serializedName: "x-ms-correlation-request-id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RegisteredServersGetHeaders = {
        serializedName: "registeredservers-get-headers",
        type: {
            name: "Composite",
            className: "RegisteredServersGetHeaders",
            modelProperties: {
                xMsRequestId: {
                    serializedName: "x-ms-request-id",
                    type: {
                        name: "String"
                    }
                },
                xMsCorrelationRequestId: {
                    serializedName: "x-ms-correlation-request-id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RegisteredServersCreateHeaders = {
        serializedName: "registeredservers-create-headers",
        type: {
            name: "Composite",
            className: "RegisteredServersCreateHeaders",
            modelProperties: {
                xMsRequestId: {
                    serializedName: "x-ms-request-id",
                    type: {
                        name: "String"
                    }
                },
                xMsCorrelationRequestId: {
                    serializedName: "x-ms-correlation-request-id",
                    type: {
                        name: "String"
                    }
                },
                azureAsyncOperation: {
                    serializedName: "azure-asyncoperation",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RegisteredServersDeleteHeaders = {
        serializedName: "registeredservers-delete-headers",
        type: {
            name: "Composite",
            className: "RegisteredServersDeleteHeaders",
            modelProperties: {
                xMsRequestId: {
                    serializedName: "x-ms-request-id",
                    type: {
                        name: "String"
                    }
                },
                xMsCorrelationRequestId: {
                    serializedName: "x-ms-correlation-request-id",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RegisteredServersTriggerRolloverHeaders = {
        serializedName: "registeredservers-triggerrollover-headers",
        type: {
            name: "Composite",
            className: "RegisteredServersTriggerRolloverHeaders",
            modelProperties: {
                xMsRequestId: {
                    serializedName: "x-ms-request-id",
                    type: {
                        name: "String"
                    }
                },
                xMsCorrelationRequestId: {
                    serializedName: "x-ms-correlation-request-id",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WorkflowsListByStorageSyncServiceHeaders = {
        serializedName: "workflows-listbystoragesyncservice-headers",
        type: {
            name: "Composite",
            className: "WorkflowsListByStorageSyncServiceHeaders",
            modelProperties: {
                xMsRequestId: {
                    serializedName: "x-ms-request-id",
                    type: {
                        name: "String"
                    }
                },
                xMsCorrelationRequestId: {
                    serializedName: "x-ms-correlation-request-id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WorkflowsGetHeaders = {
        serializedName: "workflows-get-headers",
        type: {
            name: "Composite",
            className: "WorkflowsGetHeaders",
            modelProperties: {
                xMsRequestId: {
                    serializedName: "x-ms-request-id",
                    type: {
                        name: "String"
                    }
                },
                xMsCorrelationRequestId: {
                    serializedName: "x-ms-correlation-request-id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WorkflowsAbortHeaders = {
        serializedName: "workflows-abort-headers",
        type: {
            name: "Composite",
            className: "WorkflowsAbortHeaders",
            modelProperties: {
                xMsRequestId: {
                    serializedName: "x-ms-request-id",
                    type: {
                        name: "String"
                    }
                },
                xMsCorrelationRequestId: {
                    serializedName: "x-ms-correlation-request-id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationEntityListResult = {
        serializedName: "OperationEntityListResult",
        type: {
            name: "Composite",
            className: "OperationEntityListResult",
            modelProperties: {
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OperationEntity"
                            }
                        }
                    }
                }
            }
        }
    };
    var StorageSyncServiceArray = {
        serializedName: "StorageSyncServiceArray",
        type: {
            name: "Composite",
            className: "StorageSyncServiceArray",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StorageSyncService"
                            }
                        }
                    }
                }
            }
        }
    };
    var SyncGroupArray = {
        serializedName: "SyncGroupArray",
        type: {
            name: "Composite",
            className: "SyncGroupArray",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SyncGroup"
                            }
                        }
                    }
                }
            }
        }
    };
    var CloudEndpointArray = {
        serializedName: "CloudEndpointArray",
        type: {
            name: "Composite",
            className: "CloudEndpointArray",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CloudEndpoint"
                            }
                        }
                    }
                }
            }
        }
    };
    var ServerEndpointArray = {
        serializedName: "ServerEndpointArray",
        type: {
            name: "Composite",
            className: "ServerEndpointArray",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServerEndpoint"
                            }
                        }
                    }
                }
            }
        }
    };
    var RegisteredServerArray = {
        serializedName: "RegisteredServerArray",
        type: {
            name: "Composite",
            className: "RegisteredServerArray",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RegisteredServer"
                            }
                        }
                    }
                }
            }
        }
    };
    var WorkflowArray = {
        serializedName: "WorkflowArray",
        type: {
            name: "Composite",
            className: "WorkflowArray",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Workflow"
                            }
                        }
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        StorageSyncErrorDetails: StorageSyncErrorDetails,
        StorageSyncApiError: StorageSyncApiError,
        StorageSyncError: StorageSyncError,
        SubscriptionState: SubscriptionState,
        Resource: Resource,
        TrackedResource: TrackedResource,
        StorageSyncService: StorageSyncService,
        ProxyResource: ProxyResource,
        SyncGroup: SyncGroup,
        CloudEndpoint: CloudEndpoint,
        RecallActionParameters: RecallActionParameters,
        StorageSyncServiceCreateParameters: StorageSyncServiceCreateParameters,
        SyncGroupCreateParameters: SyncGroupCreateParameters,
        CloudEndpointCreateParameters: CloudEndpointCreateParameters,
        ServerEndpointCreateParameters: ServerEndpointCreateParameters,
        TriggerRolloverRequest: TriggerRolloverRequest,
        RegisteredServerCreateParameters: RegisteredServerCreateParameters,
        ServerEndpointUpdateParameters: ServerEndpointUpdateParameters,
        ServerEndpoint: ServerEndpoint,
        RegisteredServer: RegisteredServer,
        ResourcesMoveInfo: ResourcesMoveInfo,
        Workflow: Workflow,
        OperationDisplayInfo: OperationDisplayInfo,
        OperationEntity: OperationEntity,
        OperationDisplayResource: OperationDisplayResource,
        CheckNameAvailabilityParameters: CheckNameAvailabilityParameters,
        CheckNameAvailabilityResult: CheckNameAvailabilityResult,
        RestoreFileSpec: RestoreFileSpec,
        PostRestoreRequest: PostRestoreRequest,
        PreRestoreRequest: PreRestoreRequest,
        BackupRequest: BackupRequest,
        PostBackupResponse: PostBackupResponse,
        StorageSyncServiceUpdateParameters: StorageSyncServiceUpdateParameters,
        AzureEntityResource: AzureEntityResource,
        OperationsListHeaders: OperationsListHeaders,
        StorageSyncServicesGetHeaders: StorageSyncServicesGetHeaders,
        StorageSyncServicesUpdateHeaders: StorageSyncServicesUpdateHeaders,
        StorageSyncServicesDeleteHeaders: StorageSyncServicesDeleteHeaders,
        StorageSyncServicesListByResourceGroupHeaders: StorageSyncServicesListByResourceGroupHeaders,
        StorageSyncServicesListBySubscriptionHeaders: StorageSyncServicesListBySubscriptionHeaders,
        SyncGroupsListByStorageSyncServiceHeaders: SyncGroupsListByStorageSyncServiceHeaders,
        SyncGroupsCreateHeaders: SyncGroupsCreateHeaders,
        SyncGroupsGetHeaders: SyncGroupsGetHeaders,
        SyncGroupsDeleteHeaders: SyncGroupsDeleteHeaders,
        CloudEndpointsCreateHeaders: CloudEndpointsCreateHeaders,
        CloudEndpointsGetHeaders: CloudEndpointsGetHeaders,
        CloudEndpointsDeleteHeaders: CloudEndpointsDeleteHeaders,
        CloudEndpointsListBySyncGroupHeaders: CloudEndpointsListBySyncGroupHeaders,
        CloudEndpointsPreBackupHeaders: CloudEndpointsPreBackupHeaders,
        CloudEndpointsPostBackupHeaders: CloudEndpointsPostBackupHeaders,
        CloudEndpointsPreRestoreHeaders: CloudEndpointsPreRestoreHeaders,
        CloudEndpointsRestoreheartbeatHeaders: CloudEndpointsRestoreheartbeatHeaders,
        CloudEndpointsPostRestoreHeaders: CloudEndpointsPostRestoreHeaders,
        ServerEndpointsCreateHeaders: ServerEndpointsCreateHeaders,
        ServerEndpointsUpdateHeaders: ServerEndpointsUpdateHeaders,
        ServerEndpointsGetHeaders: ServerEndpointsGetHeaders,
        ServerEndpointsDeleteHeaders: ServerEndpointsDeleteHeaders,
        ServerEndpointsListBySyncGroupHeaders: ServerEndpointsListBySyncGroupHeaders,
        ServerEndpointsRecallActionHeaders: ServerEndpointsRecallActionHeaders,
        RegisteredServersListByStorageSyncServiceHeaders: RegisteredServersListByStorageSyncServiceHeaders,
        RegisteredServersGetHeaders: RegisteredServersGetHeaders,
        RegisteredServersCreateHeaders: RegisteredServersCreateHeaders,
        RegisteredServersDeleteHeaders: RegisteredServersDeleteHeaders,
        RegisteredServersTriggerRolloverHeaders: RegisteredServersTriggerRolloverHeaders,
        WorkflowsListByStorageSyncServiceHeaders: WorkflowsListByStorageSyncServiceHeaders,
        WorkflowsGetHeaders: WorkflowsGetHeaders,
        WorkflowsAbortHeaders: WorkflowsAbortHeaders,
        OperationEntityListResult: OperationEntityListResult,
        StorageSyncServiceArray: StorageSyncServiceArray,
        SyncGroupArray: SyncGroupArray,
        CloudEndpointArray: CloudEndpointArray,
        ServerEndpointArray: ServerEndpointArray,
        RegisteredServerArray: RegisteredServerArray,
        WorkflowArray: WorkflowArray
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        OperationEntityListResult: OperationEntityListResult,
        OperationEntity: OperationEntity,
        OperationDisplayInfo: OperationDisplayInfo,
        OperationsListHeaders: OperationsListHeaders,
        StorageSyncError: StorageSyncError,
        StorageSyncApiError: StorageSyncApiError,
        StorageSyncErrorDetails: StorageSyncErrorDetails
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            constraints: {
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var cloudEndpointName = {
        parameterPath: "cloudEndpointName",
        mapper: {
            required: true,
            serializedName: "cloudEndpointName",
            type: {
                name: "String"
            }
        }
    };
    var locationName = {
        parameterPath: "locationName",
        mapper: {
            required: true,
            serializedName: "locationName",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            constraints: {
                MaxLength: 90,
                MinLength: 1,
                Pattern: /^[-\w\._\(\)]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var serverEndpointName = {
        parameterPath: "serverEndpointName",
        mapper: {
            required: true,
            serializedName: "serverEndpointName",
            type: {
                name: "String"
            }
        }
    };
    var serverId = {
        parameterPath: "serverId",
        mapper: {
            required: true,
            serializedName: "serverId",
            type: {
                name: "String"
            }
        }
    };
    var storageSyncServiceName = {
        parameterPath: "storageSyncServiceName",
        mapper: {
            required: true,
            serializedName: "storageSyncServiceName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            constraints: {
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var syncGroupName = {
        parameterPath: "syncGroupName",
        mapper: {
            required: true,
            serializedName: "syncGroupName",
            type: {
                name: "String"
            }
        }
    };
    var workflowId = {
        parameterPath: "workflowId",
        mapper: {
            required: true,
            serializedName: "workflowId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {StorageSyncManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.StorageSync/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationEntityListResult,
                headersMapper: OperationsListHeaders
            },
            default: {
                bodyMapper: StorageSyncError
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://azure.microsoft.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationEntityListResult,
                headersMapper: OperationsListHeaders
            },
            default: {
                bodyMapper: StorageSyncError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        CheckNameAvailabilityParameters: CheckNameAvailabilityParameters,
        CheckNameAvailabilityResult: CheckNameAvailabilityResult,
        CloudError: CloudError,
        StorageSyncServiceCreateParameters: StorageSyncServiceCreateParameters,
        StorageSyncService: StorageSyncService,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        StorageSyncError: StorageSyncError,
        StorageSyncApiError: StorageSyncApiError,
        StorageSyncErrorDetails: StorageSyncErrorDetails,
        StorageSyncServicesGetHeaders: StorageSyncServicesGetHeaders,
        StorageSyncServiceUpdateParameters: StorageSyncServiceUpdateParameters,
        StorageSyncServicesUpdateHeaders: StorageSyncServicesUpdateHeaders,
        StorageSyncServicesDeleteHeaders: StorageSyncServicesDeleteHeaders,
        StorageSyncServiceArray: StorageSyncServiceArray,
        StorageSyncServicesListByResourceGroupHeaders: StorageSyncServicesListByResourceGroupHeaders,
        StorageSyncServicesListBySubscriptionHeaders: StorageSyncServicesListBySubscriptionHeaders,
        AzureEntityResource: AzureEntityResource,
        ProxyResource: ProxyResource,
        SyncGroup: SyncGroup,
        CloudEndpoint: CloudEndpoint,
        SyncGroupCreateParameters: SyncGroupCreateParameters,
        CloudEndpointCreateParameters: CloudEndpointCreateParameters,
        ServerEndpointCreateParameters: ServerEndpointCreateParameters,
        RegisteredServerCreateParameters: RegisteredServerCreateParameters,
        ServerEndpoint: ServerEndpoint,
        RegisteredServer: RegisteredServer,
        Workflow: Workflow
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a StorageSyncServices. */
    var StorageSyncServices = /** @class */ (function () {
        /**
         * Create a StorageSyncServices.
         * @param {StorageSyncManagementClientContext} client Reference to the service client.
         */
        function StorageSyncServices(client) {
            this.client = client;
        }
        StorageSyncServices.prototype.checkNameAvailability = function (locationName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                locationName: locationName$$1,
                parameters: parameters,
                options: options
            }, checkNameAvailabilityOperationSpec, callback);
        };
        StorageSyncServices.prototype.create = function (resourceGroupName$$1, storageSyncServiceName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                storageSyncServiceName: storageSyncServiceName$$1,
                parameters: parameters,
                options: options
            }, createOperationSpec, callback);
        };
        StorageSyncServices.prototype.get = function (resourceGroupName$$1, storageSyncServiceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                storageSyncServiceName: storageSyncServiceName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        StorageSyncServices.prototype.update = function (resourceGroupName$$1, storageSyncServiceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                storageSyncServiceName: storageSyncServiceName$$1,
                options: options
            }, updateOperationSpec, callback);
        };
        StorageSyncServices.prototype.deleteMethod = function (resourceGroupName$$1, storageSyncServiceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                storageSyncServiceName: storageSyncServiceName$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        StorageSyncServices.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        StorageSyncServices.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec, callback);
        };
        return StorageSyncServices;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var checkNameAvailabilityOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.StorageSync/locations/{locationName}/checkNameAvailability",
        urlParameters: [
            locationName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, CheckNameAvailabilityParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: CheckNameAvailabilityResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var createOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            storageSyncServiceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, StorageSyncServiceCreateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: StorageSyncService
            },
            default: {
                bodyMapper: StorageSyncError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            storageSyncServiceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageSyncService,
                headersMapper: StorageSyncServicesGetHeaders
            },
            default: {
                bodyMapper: StorageSyncError
            }
        },
        serializer: serializer$1
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            storageSyncServiceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "parameters"
            ],
            mapper: StorageSyncServiceUpdateParameters
        },
        responses: {
            200: {
                bodyMapper: StorageSyncService,
                headersMapper: StorageSyncServicesUpdateHeaders
            },
            default: {
                bodyMapper: StorageSyncError
            }
        },
        serializer: serializer$1
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            storageSyncServiceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: StorageSyncServicesDeleteHeaders
            },
            204: {
                headersMapper: StorageSyncServicesDeleteHeaders
            },
            default: {
                bodyMapper: StorageSyncError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageSyncServiceArray,
                headersMapper: StorageSyncServicesListByResourceGroupHeaders
            },
            default: {
                bodyMapper: StorageSyncError
            }
        },
        serializer: serializer$1
    };
    var listBySubscriptionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.StorageSync/storageSyncServices",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageSyncServiceArray,
                headersMapper: StorageSyncServicesListBySubscriptionHeaders
            },
            default: {
                bodyMapper: StorageSyncError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        SyncGroupArray: SyncGroupArray,
        SyncGroup: SyncGroup,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        SyncGroupsListByStorageSyncServiceHeaders: SyncGroupsListByStorageSyncServiceHeaders,
        StorageSyncError: StorageSyncError,
        StorageSyncApiError: StorageSyncApiError,
        StorageSyncErrorDetails: StorageSyncErrorDetails,
        SyncGroupCreateParameters: SyncGroupCreateParameters,
        SyncGroupsCreateHeaders: SyncGroupsCreateHeaders,
        SyncGroupsGetHeaders: SyncGroupsGetHeaders,
        SyncGroupsDeleteHeaders: SyncGroupsDeleteHeaders,
        CloudEndpoint: CloudEndpoint,
        CloudEndpointCreateParameters: CloudEndpointCreateParameters,
        ServerEndpointCreateParameters: ServerEndpointCreateParameters,
        RegisteredServerCreateParameters: RegisteredServerCreateParameters,
        ServerEndpoint: ServerEndpoint,
        RegisteredServer: RegisteredServer,
        Workflow: Workflow,
        TrackedResource: TrackedResource,
        AzureEntityResource: AzureEntityResource,
        StorageSyncService: StorageSyncService
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a SyncGroups. */
    var SyncGroups = /** @class */ (function () {
        /**
         * Create a SyncGroups.
         * @param {StorageSyncManagementClientContext} client Reference to the service client.
         */
        function SyncGroups(client) {
            this.client = client;
        }
        SyncGroups.prototype.listByStorageSyncService = function (resourceGroupName$$1, storageSyncServiceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                storageSyncServiceName: storageSyncServiceName$$1,
                options: options
            }, listByStorageSyncServiceOperationSpec, callback);
        };
        SyncGroups.prototype.create = function (resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                storageSyncServiceName: storageSyncServiceName$$1,
                syncGroupName: syncGroupName$$1,
                parameters: parameters,
                options: options
            }, createOperationSpec$1, callback);
        };
        SyncGroups.prototype.get = function (resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                storageSyncServiceName: storageSyncServiceName$$1,
                syncGroupName: syncGroupName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        SyncGroups.prototype.deleteMethod = function (resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                storageSyncServiceName: storageSyncServiceName$$1,
                syncGroupName: syncGroupName$$1,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        return SyncGroups;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listByStorageSyncServiceOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            storageSyncServiceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncGroupArray,
                headersMapper: SyncGroupsListByStorageSyncServiceHeaders
            },
            default: {
                bodyMapper: StorageSyncError
            }
        },
        serializer: serializer$2
    };
    var createOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            storageSyncServiceName,
            syncGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, SyncGroupCreateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: SyncGroup,
                headersMapper: SyncGroupsCreateHeaders
            },
            default: {
                bodyMapper: StorageSyncError
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            storageSyncServiceName,
            syncGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncGroup,
                headersMapper: SyncGroupsGetHeaders
            },
            default: {
                bodyMapper: StorageSyncError
            }
        },
        serializer: serializer$2
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            storageSyncServiceName,
            syncGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: SyncGroupsDeleteHeaders
            },
            204: {
                headersMapper: SyncGroupsDeleteHeaders
            },
            default: {
                bodyMapper: StorageSyncError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        CloudEndpointCreateParameters: CloudEndpointCreateParameters,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudEndpoint: CloudEndpoint,
        CloudEndpointsCreateHeaders: CloudEndpointsCreateHeaders,
        StorageSyncError: StorageSyncError,
        StorageSyncApiError: StorageSyncApiError,
        StorageSyncErrorDetails: StorageSyncErrorDetails,
        CloudEndpointsGetHeaders: CloudEndpointsGetHeaders,
        CloudEndpointsDeleteHeaders: CloudEndpointsDeleteHeaders,
        CloudEndpointArray: CloudEndpointArray,
        CloudEndpointsListBySyncGroupHeaders: CloudEndpointsListBySyncGroupHeaders,
        BackupRequest: BackupRequest,
        CloudEndpointsPreBackupHeaders: CloudEndpointsPreBackupHeaders,
        PostBackupResponse: PostBackupResponse,
        CloudEndpointsPostBackupHeaders: CloudEndpointsPostBackupHeaders,
        PreRestoreRequest: PreRestoreRequest,
        RestoreFileSpec: RestoreFileSpec,
        CloudEndpointsPreRestoreHeaders: CloudEndpointsPreRestoreHeaders,
        CloudEndpointsRestoreheartbeatHeaders: CloudEndpointsRestoreheartbeatHeaders,
        PostRestoreRequest: PostRestoreRequest,
        CloudEndpointsPostRestoreHeaders: CloudEndpointsPostRestoreHeaders,
        SyncGroup: SyncGroup,
        SyncGroupCreateParameters: SyncGroupCreateParameters,
        ServerEndpointCreateParameters: ServerEndpointCreateParameters,
        RegisteredServerCreateParameters: RegisteredServerCreateParameters,
        ServerEndpoint: ServerEndpoint,
        RegisteredServer: RegisteredServer,
        Workflow: Workflow,
        TrackedResource: TrackedResource,
        AzureEntityResource: AzureEntityResource,
        StorageSyncService: StorageSyncService
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a CloudEndpoints. */
    var CloudEndpoints = /** @class */ (function () {
        /**
         * Create a CloudEndpoints.
         * @param {StorageSyncManagementClientContext} client Reference to the service client.
         */
        function CloudEndpoints(client) {
            this.client = client;
        }
        /**
         * Create a new CloudEndpoint.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param storageSyncServiceName Name of Storage Sync Service resource.
         * @param syncGroupName Name of Sync Group resource.
         * @param cloudEndpointName Name of Cloud Endpoint object.
         * @param parameters Body of Cloud Endpoint resource.
         * @param [options] The optional parameters
         * @returns Promise<Models.CloudEndpointsCreateResponse>
         */
        CloudEndpoints.prototype.create = function (resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, cloudEndpointName$$1, parameters, options) {
            return this.beginCreate(resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, cloudEndpointName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        CloudEndpoints.prototype.get = function (resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, cloudEndpointName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                storageSyncServiceName: storageSyncServiceName$$1,
                syncGroupName: syncGroupName$$1,
                cloudEndpointName: cloudEndpointName$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        /**
         * Delete a given CloudEndpoint.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param storageSyncServiceName Name of Storage Sync Service resource.
         * @param syncGroupName Name of Sync Group resource.
         * @param cloudEndpointName Name of Cloud Endpoint object.
         * @param [options] The optional parameters
         * @returns Promise<Models.CloudEndpointsDeleteResponse>
         */
        CloudEndpoints.prototype.deleteMethod = function (resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, cloudEndpointName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, cloudEndpointName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        CloudEndpoints.prototype.listBySyncGroup = function (resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                storageSyncServiceName: storageSyncServiceName$$1,
                syncGroupName: syncGroupName$$1,
                options: options
            }, listBySyncGroupOperationSpec, callback);
        };
        /**
         * Pre Backup a given CloudEndpoint.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param storageSyncServiceName Name of Storage Sync Service resource.
         * @param syncGroupName Name of Sync Group resource.
         * @param cloudEndpointName Name of Cloud Endpoint object.
         * @param parameters Body of Backup request.
         * @param [options] The optional parameters
         * @returns Promise<Models.CloudEndpointsPreBackupResponse>
         */
        CloudEndpoints.prototype.preBackup = function (resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, cloudEndpointName$$1, parameters, options) {
            return this.beginPreBackup(resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, cloudEndpointName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Post Backup a given CloudEndpoint.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param storageSyncServiceName Name of Storage Sync Service resource.
         * @param syncGroupName Name of Sync Group resource.
         * @param cloudEndpointName Name of Cloud Endpoint object.
         * @param parameters Body of Backup request.
         * @param [options] The optional parameters
         * @returns Promise<Models.CloudEndpointsPostBackupResponse>
         */
        CloudEndpoints.prototype.postBackup = function (resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, cloudEndpointName$$1, parameters, options) {
            return this.beginPostBackup(resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, cloudEndpointName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Pre Restore a given CloudEndpoint.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param storageSyncServiceName Name of Storage Sync Service resource.
         * @param syncGroupName Name of Sync Group resource.
         * @param cloudEndpointName Name of Cloud Endpoint object.
         * @param parameters Body of Cloud Endpoint object.
         * @param [options] The optional parameters
         * @returns Promise<Models.CloudEndpointsPreRestoreResponse>
         */
        CloudEndpoints.prototype.preRestore = function (resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, cloudEndpointName$$1, parameters, options) {
            return this.beginPreRestore(resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, cloudEndpointName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        CloudEndpoints.prototype.restoreheartbeat = function (resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, cloudEndpointName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                storageSyncServiceName: storageSyncServiceName$$1,
                syncGroupName: syncGroupName$$1,
                cloudEndpointName: cloudEndpointName$$1,
                options: options
            }, restoreheartbeatOperationSpec, callback);
        };
        /**
         * Post Restore a given CloudEndpoint.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param storageSyncServiceName Name of Storage Sync Service resource.
         * @param syncGroupName Name of Sync Group resource.
         * @param cloudEndpointName Name of Cloud Endpoint object.
         * @param parameters Body of Cloud Endpoint object.
         * @param [options] The optional parameters
         * @returns Promise<Models.CloudEndpointsPostRestoreResponse>
         */
        CloudEndpoints.prototype.postRestore = function (resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, cloudEndpointName$$1, parameters, options) {
            return this.beginPostRestore(resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, cloudEndpointName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Create a new CloudEndpoint.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param storageSyncServiceName Name of Storage Sync Service resource.
         * @param syncGroupName Name of Sync Group resource.
         * @param cloudEndpointName Name of Cloud Endpoint object.
         * @param parameters Body of Cloud Endpoint resource.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        CloudEndpoints.prototype.beginCreate = function (resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, cloudEndpointName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                storageSyncServiceName: storageSyncServiceName$$1,
                syncGroupName: syncGroupName$$1,
                cloudEndpointName: cloudEndpointName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOperationSpec, options);
        };
        /**
         * Delete a given CloudEndpoint.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param storageSyncServiceName Name of Storage Sync Service resource.
         * @param syncGroupName Name of Sync Group resource.
         * @param cloudEndpointName Name of Cloud Endpoint object.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        CloudEndpoints.prototype.beginDeleteMethod = function (resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, cloudEndpointName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                storageSyncServiceName: storageSyncServiceName$$1,
                syncGroupName: syncGroupName$$1,
                cloudEndpointName: cloudEndpointName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        /**
         * Pre Backup a given CloudEndpoint.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param storageSyncServiceName Name of Storage Sync Service resource.
         * @param syncGroupName Name of Sync Group resource.
         * @param cloudEndpointName Name of Cloud Endpoint object.
         * @param parameters Body of Backup request.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        CloudEndpoints.prototype.beginPreBackup = function (resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, cloudEndpointName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                storageSyncServiceName: storageSyncServiceName$$1,
                syncGroupName: syncGroupName$$1,
                cloudEndpointName: cloudEndpointName$$1,
                parameters: parameters,
                options: options
            }, beginPreBackupOperationSpec, options);
        };
        /**
         * Post Backup a given CloudEndpoint.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param storageSyncServiceName Name of Storage Sync Service resource.
         * @param syncGroupName Name of Sync Group resource.
         * @param cloudEndpointName Name of Cloud Endpoint object.
         * @param parameters Body of Backup request.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        CloudEndpoints.prototype.beginPostBackup = function (resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, cloudEndpointName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                storageSyncServiceName: storageSyncServiceName$$1,
                syncGroupName: syncGroupName$$1,
                cloudEndpointName: cloudEndpointName$$1,
                parameters: parameters,
                options: options
            }, beginPostBackupOperationSpec, options);
        };
        /**
         * Pre Restore a given CloudEndpoint.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param storageSyncServiceName Name of Storage Sync Service resource.
         * @param syncGroupName Name of Sync Group resource.
         * @param cloudEndpointName Name of Cloud Endpoint object.
         * @param parameters Body of Cloud Endpoint object.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        CloudEndpoints.prototype.beginPreRestore = function (resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, cloudEndpointName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                storageSyncServiceName: storageSyncServiceName$$1,
                syncGroupName: syncGroupName$$1,
                cloudEndpointName: cloudEndpointName$$1,
                parameters: parameters,
                options: options
            }, beginPreRestoreOperationSpec, options);
        };
        /**
         * Post Restore a given CloudEndpoint.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param storageSyncServiceName Name of Storage Sync Service resource.
         * @param syncGroupName Name of Sync Group resource.
         * @param cloudEndpointName Name of Cloud Endpoint object.
         * @param parameters Body of Cloud Endpoint object.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        CloudEndpoints.prototype.beginPostRestore = function (resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, cloudEndpointName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                storageSyncServiceName: storageSyncServiceName$$1,
                syncGroupName: syncGroupName$$1,
                cloudEndpointName: cloudEndpointName$$1,
                parameters: parameters,
                options: options
            }, beginPostRestoreOperationSpec, options);
        };
        return CloudEndpoints;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            storageSyncServiceName,
            syncGroupName,
            cloudEndpointName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CloudEndpoint,
                headersMapper: CloudEndpointsGetHeaders
            },
            default: {
                bodyMapper: StorageSyncError
            }
        },
        serializer: serializer$3
    };
    var listBySyncGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            storageSyncServiceName,
            syncGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CloudEndpointArray,
                headersMapper: CloudEndpointsListBySyncGroupHeaders
            },
            default: {
                bodyMapper: StorageSyncError
            }
        },
        serializer: serializer$3
    };
    var restoreheartbeatOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/restoreheartbeat",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            storageSyncServiceName,
            syncGroupName,
            cloudEndpointName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: CloudEndpointsRestoreheartbeatHeaders
            },
            default: {
                bodyMapper: StorageSyncError
            }
        },
        serializer: serializer$3
    };
    var beginCreateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            storageSyncServiceName,
            syncGroupName,
            cloudEndpointName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, CloudEndpointCreateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: CloudEndpoint,
                headersMapper: CloudEndpointsCreateHeaders
            },
            202: {
                headersMapper: CloudEndpointsCreateHeaders
            },
            default: {
                bodyMapper: StorageSyncError
            }
        },
        serializer: serializer$3
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            storageSyncServiceName,
            syncGroupName,
            cloudEndpointName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: CloudEndpointsDeleteHeaders
            },
            202: {
                headersMapper: CloudEndpointsDeleteHeaders
            },
            204: {
                headersMapper: CloudEndpointsDeleteHeaders
            },
            default: {
                bodyMapper: StorageSyncError
            }
        },
        serializer: serializer$3
    };
    var beginPreBackupOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/prebackup",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            storageSyncServiceName,
            syncGroupName,
            cloudEndpointName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, BackupRequest, { required: true })
        },
        responses: {
            200: {
                headersMapper: CloudEndpointsPreBackupHeaders
            },
            202: {
                headersMapper: CloudEndpointsPreBackupHeaders
            },
            default: {
                bodyMapper: StorageSyncError
            }
        },
        serializer: serializer$3
    };
    var beginPostBackupOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/postbackup",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            storageSyncServiceName,
            syncGroupName,
            cloudEndpointName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, BackupRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: PostBackupResponse,
                headersMapper: CloudEndpointsPostBackupHeaders
            },
            202: {
                headersMapper: CloudEndpointsPostBackupHeaders
            },
            default: {
                bodyMapper: StorageSyncError
            }
        },
        serializer: serializer$3
    };
    var beginPreRestoreOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/prerestore",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            storageSyncServiceName,
            syncGroupName,
            cloudEndpointName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, PreRestoreRequest, { required: true })
        },
        responses: {
            200: {
                headersMapper: CloudEndpointsPreRestoreHeaders
            },
            202: {
                headersMapper: CloudEndpointsPreRestoreHeaders
            },
            default: {
                bodyMapper: StorageSyncError
            }
        },
        serializer: serializer$3
    };
    var beginPostRestoreOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/postrestore",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            storageSyncServiceName,
            syncGroupName,
            cloudEndpointName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, PostRestoreRequest, { required: true })
        },
        responses: {
            200: {
                headersMapper: CloudEndpointsPostRestoreHeaders
            },
            202: {
                headersMapper: CloudEndpointsPostRestoreHeaders
            },
            default: {
                bodyMapper: StorageSyncError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        ServerEndpointCreateParameters: ServerEndpointCreateParameters,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        ServerEndpoint: ServerEndpoint,
        ServerEndpointsCreateHeaders: ServerEndpointsCreateHeaders,
        StorageSyncError: StorageSyncError,
        StorageSyncApiError: StorageSyncApiError,
        StorageSyncErrorDetails: StorageSyncErrorDetails,
        ServerEndpointUpdateParameters: ServerEndpointUpdateParameters,
        ServerEndpointsUpdateHeaders: ServerEndpointsUpdateHeaders,
        ServerEndpointsGetHeaders: ServerEndpointsGetHeaders,
        ServerEndpointsDeleteHeaders: ServerEndpointsDeleteHeaders,
        ServerEndpointArray: ServerEndpointArray,
        ServerEndpointsListBySyncGroupHeaders: ServerEndpointsListBySyncGroupHeaders,
        RecallActionParameters: RecallActionParameters,
        ServerEndpointsRecallActionHeaders: ServerEndpointsRecallActionHeaders,
        SyncGroup: SyncGroup,
        CloudEndpoint: CloudEndpoint,
        SyncGroupCreateParameters: SyncGroupCreateParameters,
        CloudEndpointCreateParameters: CloudEndpointCreateParameters,
        RegisteredServerCreateParameters: RegisteredServerCreateParameters,
        RegisteredServer: RegisteredServer,
        Workflow: Workflow,
        TrackedResource: TrackedResource,
        AzureEntityResource: AzureEntityResource,
        StorageSyncService: StorageSyncService
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServerEndpoints. */
    var ServerEndpoints = /** @class */ (function () {
        /**
         * Create a ServerEndpoints.
         * @param {StorageSyncManagementClientContext} client Reference to the service client.
         */
        function ServerEndpoints(client) {
            this.client = client;
        }
        /**
         * Create a new ServerEndpoint.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param storageSyncServiceName Name of Storage Sync Service resource.
         * @param syncGroupName Name of Sync Group resource.
         * @param serverEndpointName Name of Server Endpoint object.
         * @param parameters Body of Server Endpoint object.
         * @param [options] The optional parameters
         * @returns Promise<Models.ServerEndpointsCreateResponse>
         */
        ServerEndpoints.prototype.create = function (resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, serverEndpointName$$1, parameters, options) {
            return this.beginCreate(resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, serverEndpointName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Patch a given ServerEndpoint.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param storageSyncServiceName Name of Storage Sync Service resource.
         * @param syncGroupName Name of Sync Group resource.
         * @param serverEndpointName Name of Server Endpoint object.
         * @param [options] The optional parameters
         * @returns Promise<Models.ServerEndpointsUpdateResponse>
         */
        ServerEndpoints.prototype.update = function (resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, serverEndpointName$$1, options) {
            return this.beginUpdate(resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, serverEndpointName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ServerEndpoints.prototype.get = function (resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, serverEndpointName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                storageSyncServiceName: storageSyncServiceName$$1,
                syncGroupName: syncGroupName$$1,
                serverEndpointName: serverEndpointName$$1,
                options: options
            }, getOperationSpec$3, callback);
        };
        /**
         * Delete a given ServerEndpoint.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param storageSyncServiceName Name of Storage Sync Service resource.
         * @param syncGroupName Name of Sync Group resource.
         * @param serverEndpointName Name of Server Endpoint object.
         * @param [options] The optional parameters
         * @returns Promise<Models.ServerEndpointsDeleteResponse>
         */
        ServerEndpoints.prototype.deleteMethod = function (resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, serverEndpointName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, serverEndpointName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ServerEndpoints.prototype.listBySyncGroup = function (resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                storageSyncServiceName: storageSyncServiceName$$1,
                syncGroupName: syncGroupName$$1,
                options: options
            }, listBySyncGroupOperationSpec$1, callback);
        };
        /**
         * Recall a serverendpoint.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param storageSyncServiceName Name of Storage Sync Service resource.
         * @param syncGroupName Name of Sync Group resource.
         * @param serverEndpointName Name of Server Endpoint object.
         * @param parameters Body of Recall Action object.
         * @param [options] The optional parameters
         * @returns Promise<Models.ServerEndpointsRecallActionResponse>
         */
        ServerEndpoints.prototype.recallAction = function (resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, serverEndpointName$$1, parameters, options) {
            return this.beginRecallAction(resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, serverEndpointName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Create a new ServerEndpoint.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param storageSyncServiceName Name of Storage Sync Service resource.
         * @param syncGroupName Name of Sync Group resource.
         * @param serverEndpointName Name of Server Endpoint object.
         * @param parameters Body of Server Endpoint object.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ServerEndpoints.prototype.beginCreate = function (resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, serverEndpointName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                storageSyncServiceName: storageSyncServiceName$$1,
                syncGroupName: syncGroupName$$1,
                serverEndpointName: serverEndpointName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOperationSpec$1, options);
        };
        /**
         * Patch a given ServerEndpoint.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param storageSyncServiceName Name of Storage Sync Service resource.
         * @param syncGroupName Name of Sync Group resource.
         * @param serverEndpointName Name of Server Endpoint object.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ServerEndpoints.prototype.beginUpdate = function (resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, serverEndpointName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                storageSyncServiceName: storageSyncServiceName$$1,
                syncGroupName: syncGroupName$$1,
                serverEndpointName: serverEndpointName$$1,
                options: options
            }, beginUpdateOperationSpec, options);
        };
        /**
         * Delete a given ServerEndpoint.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param storageSyncServiceName Name of Storage Sync Service resource.
         * @param syncGroupName Name of Sync Group resource.
         * @param serverEndpointName Name of Server Endpoint object.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ServerEndpoints.prototype.beginDeleteMethod = function (resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, serverEndpointName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                storageSyncServiceName: storageSyncServiceName$$1,
                syncGroupName: syncGroupName$$1,
                serverEndpointName: serverEndpointName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$1, options);
        };
        /**
         * Recall a serverendpoint.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param storageSyncServiceName Name of Storage Sync Service resource.
         * @param syncGroupName Name of Sync Group resource.
         * @param serverEndpointName Name of Server Endpoint object.
         * @param parameters Body of Recall Action object.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ServerEndpoints.prototype.beginRecallAction = function (resourceGroupName$$1, storageSyncServiceName$$1, syncGroupName$$1, serverEndpointName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                storageSyncServiceName: storageSyncServiceName$$1,
                syncGroupName: syncGroupName$$1,
                serverEndpointName: serverEndpointName$$1,
                parameters: parameters,
                options: options
            }, beginRecallActionOperationSpec, options);
        };
        return ServerEndpoints;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints/{serverEndpointName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            storageSyncServiceName,
            syncGroupName,
            serverEndpointName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerEndpoint,
                headersMapper: ServerEndpointsGetHeaders
            },
            default: {
                bodyMapper: StorageSyncError
            }
        },
        serializer: serializer$4
    };
    var listBySyncGroupOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            storageSyncServiceName,
            syncGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerEndpointArray,
                headersMapper: ServerEndpointsListBySyncGroupHeaders
            },
            default: {
                bodyMapper: StorageSyncError
            }
        },
        serializer: serializer$4
    };
    var beginCreateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints/{serverEndpointName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            storageSyncServiceName,
            syncGroupName,
            serverEndpointName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ServerEndpointCreateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ServerEndpoint,
                headersMapper: ServerEndpointsCreateHeaders
            },
            202: {
                headersMapper: ServerEndpointsCreateHeaders
            },
            default: {
                bodyMapper: StorageSyncError
            }
        },
        serializer: serializer$4
    };
    var beginUpdateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints/{serverEndpointName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            storageSyncServiceName,
            syncGroupName,
            serverEndpointName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "parameters"
            ],
            mapper: ServerEndpointUpdateParameters
        },
        responses: {
            200: {
                bodyMapper: ServerEndpoint,
                headersMapper: ServerEndpointsUpdateHeaders
            },
            202: {
                headersMapper: ServerEndpointsUpdateHeaders
            },
            default: {
                bodyMapper: StorageSyncError
            }
        },
        serializer: serializer$4
    };
    var beginDeleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints/{serverEndpointName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            storageSyncServiceName,
            syncGroupName,
            serverEndpointName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: ServerEndpointsDeleteHeaders
            },
            202: {
                headersMapper: ServerEndpointsDeleteHeaders
            },
            default: {
                bodyMapper: StorageSyncError
            }
        },
        serializer: serializer$4
    };
    var beginRecallActionOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints/{serverEndpointName}/recallAction",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            storageSyncServiceName,
            syncGroupName,
            serverEndpointName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, RecallActionParameters, { required: true })
        },
        responses: {
            200: {
                headersMapper: ServerEndpointsRecallActionHeaders
            },
            202: {
                headersMapper: ServerEndpointsRecallActionHeaders
            },
            default: {
                bodyMapper: StorageSyncError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        RegisteredServerArray: RegisteredServerArray,
        RegisteredServer: RegisteredServer,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        RegisteredServersListByStorageSyncServiceHeaders: RegisteredServersListByStorageSyncServiceHeaders,
        StorageSyncError: StorageSyncError,
        StorageSyncApiError: StorageSyncApiError,
        StorageSyncErrorDetails: StorageSyncErrorDetails,
        RegisteredServersGetHeaders: RegisteredServersGetHeaders,
        RegisteredServerCreateParameters: RegisteredServerCreateParameters,
        RegisteredServersCreateHeaders: RegisteredServersCreateHeaders,
        RegisteredServersDeleteHeaders: RegisteredServersDeleteHeaders,
        TriggerRolloverRequest: TriggerRolloverRequest,
        RegisteredServersTriggerRolloverHeaders: RegisteredServersTriggerRolloverHeaders,
        SyncGroup: SyncGroup,
        CloudEndpoint: CloudEndpoint,
        SyncGroupCreateParameters: SyncGroupCreateParameters,
        CloudEndpointCreateParameters: CloudEndpointCreateParameters,
        ServerEndpointCreateParameters: ServerEndpointCreateParameters,
        ServerEndpoint: ServerEndpoint,
        Workflow: Workflow,
        TrackedResource: TrackedResource,
        AzureEntityResource: AzureEntityResource,
        StorageSyncService: StorageSyncService
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a RegisteredServers. */
    var RegisteredServers = /** @class */ (function () {
        /**
         * Create a RegisteredServers.
         * @param {StorageSyncManagementClientContext} client Reference to the service client.
         */
        function RegisteredServers(client) {
            this.client = client;
        }
        RegisteredServers.prototype.listByStorageSyncService = function (resourceGroupName$$1, storageSyncServiceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                storageSyncServiceName: storageSyncServiceName$$1,
                options: options
            }, listByStorageSyncServiceOperationSpec$1, callback);
        };
        RegisteredServers.prototype.get = function (resourceGroupName$$1, storageSyncServiceName$$1, serverId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                storageSyncServiceName: storageSyncServiceName$$1,
                serverId: serverId$$1,
                options: options
            }, getOperationSpec$4, callback);
        };
        /**
         * Add a new registered server.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param storageSyncServiceName Name of Storage Sync Service resource.
         * @param serverId GUID identifying the on-premises server.
         * @param parameters Body of Registered Server object.
         * @param [options] The optional parameters
         * @returns Promise<Models.RegisteredServersCreateResponse>
         */
        RegisteredServers.prototype.create = function (resourceGroupName$$1, storageSyncServiceName$$1, serverId$$1, parameters, options) {
            return this.beginCreate(resourceGroupName$$1, storageSyncServiceName$$1, serverId$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Delete the given registered server.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param storageSyncServiceName Name of Storage Sync Service resource.
         * @param serverId GUID identifying the on-premises server.
         * @param [options] The optional parameters
         * @returns Promise<Models.RegisteredServersDeleteResponse>
         */
        RegisteredServers.prototype.deleteMethod = function (resourceGroupName$$1, storageSyncServiceName$$1, serverId$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, storageSyncServiceName$$1, serverId$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Triggers Server certificate rollover.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param storageSyncServiceName Name of Storage Sync Service resource.
         * @param serverId Server Id
         * @param parameters Body of Trigger Rollover request.
         * @param [options] The optional parameters
         * @returns Promise<Models.RegisteredServersTriggerRolloverResponse>
         */
        RegisteredServers.prototype.triggerRollover = function (resourceGroupName$$1, storageSyncServiceName$$1, serverId$$1, parameters, options) {
            return this.beginTriggerRollover(resourceGroupName$$1, storageSyncServiceName$$1, serverId$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Add a new registered server.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param storageSyncServiceName Name of Storage Sync Service resource.
         * @param serverId GUID identifying the on-premises server.
         * @param parameters Body of Registered Server object.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        RegisteredServers.prototype.beginCreate = function (resourceGroupName$$1, storageSyncServiceName$$1, serverId$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                storageSyncServiceName: storageSyncServiceName$$1,
                serverId: serverId$$1,
                parameters: parameters,
                options: options
            }, beginCreateOperationSpec$2, options);
        };
        /**
         * Delete the given registered server.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param storageSyncServiceName Name of Storage Sync Service resource.
         * @param serverId GUID identifying the on-premises server.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        RegisteredServers.prototype.beginDeleteMethod = function (resourceGroupName$$1, storageSyncServiceName$$1, serverId$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                storageSyncServiceName: storageSyncServiceName$$1,
                serverId: serverId$$1,
                options: options
            }, beginDeleteMethodOperationSpec$2, options);
        };
        /**
         * Triggers Server certificate rollover.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param storageSyncServiceName Name of Storage Sync Service resource.
         * @param serverId Server Id
         * @param parameters Body of Trigger Rollover request.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        RegisteredServers.prototype.beginTriggerRollover = function (resourceGroupName$$1, storageSyncServiceName$$1, serverId$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                storageSyncServiceName: storageSyncServiceName$$1,
                serverId: serverId$$1,
                parameters: parameters,
                options: options
            }, beginTriggerRolloverOperationSpec, options);
        };
        return RegisteredServers;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var listByStorageSyncServiceOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            storageSyncServiceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RegisteredServerArray,
                headersMapper: RegisteredServersListByStorageSyncServiceHeaders
            },
            default: {
                bodyMapper: StorageSyncError
            }
        },
        serializer: serializer$5
    };
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers/{serverId}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            storageSyncServiceName,
            serverId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RegisteredServer,
                headersMapper: RegisteredServersGetHeaders
            },
            default: {
                bodyMapper: StorageSyncError
            }
        },
        serializer: serializer$5
    };
    var beginCreateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers/{serverId}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            storageSyncServiceName,
            serverId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, RegisteredServerCreateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: RegisteredServer,
                headersMapper: RegisteredServersCreateHeaders
            },
            202: {
                headersMapper: RegisteredServersCreateHeaders
            },
            default: {
                bodyMapper: StorageSyncError
            }
        },
        serializer: serializer$5
    };
    var beginDeleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers/{serverId}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            storageSyncServiceName,
            serverId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: RegisteredServersDeleteHeaders
            },
            202: {
                headersMapper: RegisteredServersDeleteHeaders
            },
            204: {
                headersMapper: RegisteredServersDeleteHeaders
            },
            default: {
                bodyMapper: StorageSyncError
            }
        },
        serializer: serializer$5
    };
    var beginTriggerRolloverOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers/{serverId}/triggerRollover",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            storageSyncServiceName,
            serverId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, TriggerRolloverRequest, { required: true })
        },
        responses: {
            200: {
                headersMapper: RegisteredServersTriggerRolloverHeaders
            },
            202: {
                headersMapper: RegisteredServersTriggerRolloverHeaders
            },
            default: {
                bodyMapper: StorageSyncError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        WorkflowArray: WorkflowArray,
        Workflow: Workflow,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        WorkflowsListByStorageSyncServiceHeaders: WorkflowsListByStorageSyncServiceHeaders,
        StorageSyncError: StorageSyncError,
        StorageSyncApiError: StorageSyncApiError,
        StorageSyncErrorDetails: StorageSyncErrorDetails,
        WorkflowsGetHeaders: WorkflowsGetHeaders,
        WorkflowsAbortHeaders: WorkflowsAbortHeaders,
        SyncGroup: SyncGroup,
        CloudEndpoint: CloudEndpoint,
        SyncGroupCreateParameters: SyncGroupCreateParameters,
        CloudEndpointCreateParameters: CloudEndpointCreateParameters,
        ServerEndpointCreateParameters: ServerEndpointCreateParameters,
        RegisteredServerCreateParameters: RegisteredServerCreateParameters,
        ServerEndpoint: ServerEndpoint,
        RegisteredServer: RegisteredServer,
        TrackedResource: TrackedResource,
        AzureEntityResource: AzureEntityResource,
        StorageSyncService: StorageSyncService
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Workflows. */
    var Workflows = /** @class */ (function () {
        /**
         * Create a Workflows.
         * @param {StorageSyncManagementClientContext} client Reference to the service client.
         */
        function Workflows(client) {
            this.client = client;
        }
        Workflows.prototype.listByStorageSyncService = function (resourceGroupName$$1, storageSyncServiceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                storageSyncServiceName: storageSyncServiceName$$1,
                options: options
            }, listByStorageSyncServiceOperationSpec$2, callback);
        };
        Workflows.prototype.get = function (resourceGroupName$$1, storageSyncServiceName$$1, workflowId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                storageSyncServiceName: storageSyncServiceName$$1,
                workflowId: workflowId$$1,
                options: options
            }, getOperationSpec$5, callback);
        };
        Workflows.prototype.abort = function (resourceGroupName$$1, storageSyncServiceName$$1, workflowId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                storageSyncServiceName: storageSyncServiceName$$1,
                workflowId: workflowId$$1,
                options: options
            }, abortOperationSpec, callback);
        };
        return Workflows;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var listByStorageSyncServiceOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/workflows",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            storageSyncServiceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkflowArray,
                headersMapper: WorkflowsListByStorageSyncServiceHeaders
            },
            default: {
                bodyMapper: StorageSyncError
            }
        },
        serializer: serializer$6
    };
    var getOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/workflows/{workflowId}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            storageSyncServiceName,
            workflowId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Workflow,
                headersMapper: WorkflowsGetHeaders
            },
            default: {
                bodyMapper: StorageSyncError
            }
        },
        serializer: serializer$6
    };
    var abortOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/workflows/{workflowId}/abort",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            storageSyncServiceName,
            workflowId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: WorkflowsAbortHeaders
            },
            default: {
                bodyMapper: StorageSyncError
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-storagesync";
    var packageVersion = "1.0.0";
    var StorageSyncManagementClientContext = /** @class */ (function (_super) {
        __extends(StorageSyncManagementClientContext, _super);
        /**
         * Initializes a new instance of the StorageSyncManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The ID of the target subscription.
         * @param [options] The parameter options
         */
        function StorageSyncManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2018-07-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://azure.microsoft.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return StorageSyncManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var StorageSyncManagementClient = /** @class */ (function (_super) {
        __extends(StorageSyncManagementClient, _super);
        /**
         * Initializes a new instance of the StorageSyncManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The ID of the target subscription.
         * @param [options] The parameter options
         */
        function StorageSyncManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.operations = new Operations(_this);
            _this.storageSyncServices = new StorageSyncServices(_this);
            _this.syncGroups = new SyncGroups(_this);
            _this.cloudEndpoints = new CloudEndpoints(_this);
            _this.serverEndpoints = new ServerEndpoints(_this);
            _this.registeredServers = new RegisteredServers(_this);
            _this.workflows = new Workflows(_this);
            return _this;
        }
        return StorageSyncManagementClient;
    }(StorageSyncManagementClientContext));

    exports.StorageSyncManagementClient = StorageSyncManagementClient;
    exports.StorageSyncManagementClientContext = StorageSyncManagementClientContext;
    exports.StorageSyncManagementModels = index;
    exports.StorageSyncManagementMappers = mappers;
    exports.Operations = Operations;
    exports.StorageSyncServices = StorageSyncServices;
    exports.SyncGroups = SyncGroups;
    exports.CloudEndpoints = CloudEndpoints;
    exports.ServerEndpoints = ServerEndpoints;
    exports.RegisteredServers = RegisteredServers;
    exports.Workflows = Workflows;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-storagesync.js.map
