/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmMonitor = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for MetricStatisticType.
     * Possible values include: 'Average', 'Min', 'Max', 'Sum'
     * @readonly
     * @enum {string}
     */
    var MetricStatisticType;
    (function (MetricStatisticType) {
        MetricStatisticType["Average"] = "Average";
        MetricStatisticType["Min"] = "Min";
        MetricStatisticType["Max"] = "Max";
        MetricStatisticType["Sum"] = "Sum";
    })(MetricStatisticType || (MetricStatisticType = {}));
    /**
     * Defines values for TimeAggregationType.
     * Possible values include: 'Average', 'Minimum', 'Maximum', 'Total', 'Count',
     * 'Last'
     * @readonly
     * @enum {string}
     */
    var TimeAggregationType;
    (function (TimeAggregationType) {
        TimeAggregationType["Average"] = "Average";
        TimeAggregationType["Minimum"] = "Minimum";
        TimeAggregationType["Maximum"] = "Maximum";
        TimeAggregationType["Total"] = "Total";
        TimeAggregationType["Count"] = "Count";
        TimeAggregationType["Last"] = "Last";
    })(TimeAggregationType || (TimeAggregationType = {}));
    /**
     * Defines values for ComparisonOperationType.
     * Possible values include: 'Equals', 'NotEquals', 'GreaterThan',
     * 'GreaterThanOrEqual', 'LessThan', 'LessThanOrEqual'
     * @readonly
     * @enum {string}
     */
    var ComparisonOperationType;
    (function (ComparisonOperationType) {
        ComparisonOperationType["Equals"] = "Equals";
        ComparisonOperationType["NotEquals"] = "NotEquals";
        ComparisonOperationType["GreaterThan"] = "GreaterThan";
        ComparisonOperationType["GreaterThanOrEqual"] = "GreaterThanOrEqual";
        ComparisonOperationType["LessThan"] = "LessThan";
        ComparisonOperationType["LessThanOrEqual"] = "LessThanOrEqual";
    })(ComparisonOperationType || (ComparisonOperationType = {}));
    /**
     * Defines values for ScaleDirection.
     * Possible values include: 'None', 'Increase', 'Decrease'
     * @readonly
     * @enum {string}
     */
    var ScaleDirection;
    (function (ScaleDirection) {
        ScaleDirection["None"] = "None";
        ScaleDirection["Increase"] = "Increase";
        ScaleDirection["Decrease"] = "Decrease";
    })(ScaleDirection || (ScaleDirection = {}));
    /**
     * Defines values for ScaleType.
     * Possible values include: 'ChangeCount', 'PercentChangeCount', 'ExactCount'
     * @readonly
     * @enum {string}
     */
    var ScaleType;
    (function (ScaleType) {
        ScaleType["ChangeCount"] = "ChangeCount";
        ScaleType["PercentChangeCount"] = "PercentChangeCount";
        ScaleType["ExactCount"] = "ExactCount";
    })(ScaleType || (ScaleType = {}));
    /**
     * Defines values for RecurrenceFrequency.
     * Possible values include: 'None', 'Second', 'Minute', 'Hour', 'Day', 'Week',
     * 'Month', 'Year'
     * @readonly
     * @enum {string}
     */
    var RecurrenceFrequency;
    (function (RecurrenceFrequency) {
        RecurrenceFrequency["None"] = "None";
        RecurrenceFrequency["Second"] = "Second";
        RecurrenceFrequency["Minute"] = "Minute";
        RecurrenceFrequency["Hour"] = "Hour";
        RecurrenceFrequency["Day"] = "Day";
        RecurrenceFrequency["Week"] = "Week";
        RecurrenceFrequency["Month"] = "Month";
        RecurrenceFrequency["Year"] = "Year";
    })(RecurrenceFrequency || (RecurrenceFrequency = {}));
    /**
     * Defines values for ConditionOperator.
     * Possible values include: 'GreaterThan', 'GreaterThanOrEqual', 'LessThan',
     * 'LessThanOrEqual'
     * @readonly
     * @enum {string}
     */
    var ConditionOperator;
    (function (ConditionOperator) {
        ConditionOperator["GreaterThan"] = "GreaterThan";
        ConditionOperator["GreaterThanOrEqual"] = "GreaterThanOrEqual";
        ConditionOperator["LessThan"] = "LessThan";
        ConditionOperator["LessThanOrEqual"] = "LessThanOrEqual";
    })(ConditionOperator || (ConditionOperator = {}));
    /**
     * Defines values for TimeAggregationOperator.
     * Possible values include: 'Average', 'Minimum', 'Maximum', 'Total', 'Last'
     * @readonly
     * @enum {string}
     */
    var TimeAggregationOperator;
    (function (TimeAggregationOperator) {
        TimeAggregationOperator["Average"] = "Average";
        TimeAggregationOperator["Minimum"] = "Minimum";
        TimeAggregationOperator["Maximum"] = "Maximum";
        TimeAggregationOperator["Total"] = "Total";
        TimeAggregationOperator["Last"] = "Last";
    })(TimeAggregationOperator || (TimeAggregationOperator = {}));
    /**
     * Defines values for CategoryType.
     * Possible values include: 'Metrics', 'Logs'
     * @readonly
     * @enum {string}
     */
    var CategoryType;
    (function (CategoryType) {
        CategoryType["Metrics"] = "Metrics";
        CategoryType["Logs"] = "Logs";
    })(CategoryType || (CategoryType = {}));
    /**
     * Defines values for ReceiverStatus.
     * Possible values include: 'NotSpecified', 'Enabled', 'Disabled'
     * @readonly
     * @enum {string}
     */
    var ReceiverStatus;
    (function (ReceiverStatus) {
        ReceiverStatus["NotSpecified"] = "NotSpecified";
        ReceiverStatus["Enabled"] = "Enabled";
        ReceiverStatus["Disabled"] = "Disabled";
    })(ReceiverStatus || (ReceiverStatus = {}));
    /**
     * Defines values for EventLevel.
     * Possible values include: 'Critical', 'Error', 'Warning', 'Informational',
     * 'Verbose'
     * @readonly
     * @enum {string}
     */
    var EventLevel;
    (function (EventLevel) {
        EventLevel["Critical"] = "Critical";
        EventLevel["Error"] = "Error";
        EventLevel["Warning"] = "Warning";
        EventLevel["Informational"] = "Informational";
        EventLevel["Verbose"] = "Verbose";
    })(EventLevel || (EventLevel = {}));
    /**
     * Defines values for Unit.
     * Possible values include: 'Count', 'Bytes', 'Seconds', 'CountPerSecond',
     * 'BytesPerSecond', 'Percent', 'MilliSeconds', 'ByteSeconds', 'Unspecified'
     * @readonly
     * @enum {string}
     */
    var Unit;
    (function (Unit) {
        Unit["Count"] = "Count";
        Unit["Bytes"] = "Bytes";
        Unit["Seconds"] = "Seconds";
        Unit["CountPerSecond"] = "CountPerSecond";
        Unit["BytesPerSecond"] = "BytesPerSecond";
        Unit["Percent"] = "Percent";
        Unit["MilliSeconds"] = "MilliSeconds";
        Unit["ByteSeconds"] = "ByteSeconds";
        Unit["Unspecified"] = "Unspecified";
    })(Unit || (Unit = {}));
    /**
     * Defines values for AggregationType.
     * Possible values include: 'None', 'Average', 'Count', 'Minimum', 'Maximum',
     * 'Total'
     * @readonly
     * @enum {string}
     */
    var AggregationType;
    (function (AggregationType) {
        AggregationType["None"] = "None";
        AggregationType["Average"] = "Average";
        AggregationType["Count"] = "Count";
        AggregationType["Minimum"] = "Minimum";
        AggregationType["Maximum"] = "Maximum";
        AggregationType["Total"] = "Total";
    })(AggregationType || (AggregationType = {}));
    /**
     * Defines values for Sensitivity.
     * Possible values include: 'Low', 'Medium', 'High'
     * @readonly
     * @enum {string}
     */
    var Sensitivity;
    (function (Sensitivity) {
        Sensitivity["Low"] = "Low";
        Sensitivity["Medium"] = "Medium";
        Sensitivity["High"] = "High";
    })(Sensitivity || (Sensitivity = {}));
    /**
     * Defines values for Enabled.
     * Possible values include: 'true', 'false'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Enabled = <Enabled>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Enabled;
    (function (Enabled) {
        Enabled["True"] = "true";
        Enabled["False"] = "false";
    })(Enabled || (Enabled = {}));
    /**
     * Defines values for ProvisioningState.
     * Possible values include: 'Succeeded', 'Deploying', 'Canceled', 'Failed'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ProvisioningState =
     * <ProvisioningState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ProvisioningState;
    (function (ProvisioningState) {
        ProvisioningState["Succeeded"] = "Succeeded";
        ProvisioningState["Deploying"] = "Deploying";
        ProvisioningState["Canceled"] = "Canceled";
        ProvisioningState["Failed"] = "Failed";
    })(ProvisioningState || (ProvisioningState = {}));
    /**
     * Defines values for QueryType.
     * Possible values include: 'ResultCount'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: QueryType = <QueryType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var QueryType;
    (function (QueryType) {
        QueryType["ResultCount"] = "ResultCount";
    })(QueryType || (QueryType = {}));
    /**
     * Defines values for ConditionalOperator.
     * Possible values include: 'GreaterThan', 'LessThan', 'Equal'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ConditionalOperator =
     * <ConditionalOperator>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ConditionalOperator;
    (function (ConditionalOperator) {
        ConditionalOperator["GreaterThan"] = "GreaterThan";
        ConditionalOperator["LessThan"] = "LessThan";
        ConditionalOperator["Equal"] = "Equal";
    })(ConditionalOperator || (ConditionalOperator = {}));
    /**
     * Defines values for MetricTriggerType.
     * Possible values include: 'Consecutive', 'Total'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: MetricTriggerType =
     * <MetricTriggerType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var MetricTriggerType;
    (function (MetricTriggerType) {
        MetricTriggerType["Consecutive"] = "Consecutive";
        MetricTriggerType["Total"] = "Total";
    })(MetricTriggerType || (MetricTriggerType = {}));
    /**
     * Defines values for AlertSeverity.
     * Possible values include: '0', '1', '2', '3', '4'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: AlertSeverity =
     * <AlertSeverity>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var AlertSeverity;
    (function (AlertSeverity) {
        AlertSeverity["Zero"] = "0";
        AlertSeverity["One"] = "1";
        AlertSeverity["Two"] = "2";
        AlertSeverity["Three"] = "3";
        AlertSeverity["Four"] = "4";
    })(AlertSeverity || (AlertSeverity = {}));
    /**
     * Defines values for ResultType.
     * Possible values include: 'Data', 'Metadata'
     * @readonly
     * @enum {string}
     */
    var ResultType;
    (function (ResultType) {
        ResultType["Data"] = "Data";
        ResultType["Metadata"] = "Metadata";
    })(ResultType || (ResultType = {}));

    var index = /*#__PURE__*/Object.freeze({
        get MetricStatisticType () { return MetricStatisticType; },
        get TimeAggregationType () { return TimeAggregationType; },
        get ComparisonOperationType () { return ComparisonOperationType; },
        get ScaleDirection () { return ScaleDirection; },
        get ScaleType () { return ScaleType; },
        get RecurrenceFrequency () { return RecurrenceFrequency; },
        get ConditionOperator () { return ConditionOperator; },
        get TimeAggregationOperator () { return TimeAggregationOperator; },
        get CategoryType () { return CategoryType; },
        get ReceiverStatus () { return ReceiverStatus; },
        get EventLevel () { return EventLevel; },
        get Unit () { return Unit; },
        get AggregationType () { return AggregationType; },
        get Sensitivity () { return Sensitivity; },
        get Enabled () { return Enabled; },
        get ProvisioningState () { return ProvisioningState; },
        get QueryType () { return QueryType; },
        get ConditionalOperator () { return ConditionalOperator; },
        get MetricTriggerType () { return MetricTriggerType; },
        get AlertSeverity () { return AlertSeverity; },
        get ResultType () { return ResultType; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ScaleCapacity = {
        serializedName: "ScaleCapacity",
        type: {
            name: "Composite",
            className: "ScaleCapacity",
            modelProperties: {
                minimum: {
                    required: true,
                    serializedName: "minimum",
                    type: {
                        name: "String"
                    }
                },
                maximum: {
                    required: true,
                    serializedName: "maximum",
                    type: {
                        name: "String"
                    }
                },
                default: {
                    required: true,
                    serializedName: "default",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MetricTrigger = {
        serializedName: "MetricTrigger",
        type: {
            name: "Composite",
            className: "MetricTrigger",
            modelProperties: {
                metricName: {
                    required: true,
                    serializedName: "metricName",
                    type: {
                        name: "String"
                    }
                },
                metricResourceUri: {
                    required: true,
                    serializedName: "metricResourceUri",
                    type: {
                        name: "String"
                    }
                },
                timeGrain: {
                    required: true,
                    serializedName: "timeGrain",
                    type: {
                        name: "TimeSpan"
                    }
                },
                statistic: {
                    required: true,
                    serializedName: "statistic",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Average",
                            "Min",
                            "Max",
                            "Sum"
                        ]
                    }
                },
                timeWindow: {
                    required: true,
                    serializedName: "timeWindow",
                    type: {
                        name: "TimeSpan"
                    }
                },
                timeAggregation: {
                    required: true,
                    serializedName: "timeAggregation",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Average",
                            "Minimum",
                            "Maximum",
                            "Total",
                            "Count",
                            "Last"
                        ]
                    }
                },
                operator: {
                    required: true,
                    serializedName: "operator",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Equals",
                            "NotEquals",
                            "GreaterThan",
                            "GreaterThanOrEqual",
                            "LessThan",
                            "LessThanOrEqual"
                        ]
                    }
                },
                threshold: {
                    required: true,
                    serializedName: "threshold",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ScaleAction = {
        serializedName: "ScaleAction",
        type: {
            name: "Composite",
            className: "ScaleAction",
            modelProperties: {
                direction: {
                    required: true,
                    serializedName: "direction",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "Increase",
                            "Decrease"
                        ]
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "ChangeCount",
                            "PercentChangeCount",
                            "ExactCount"
                        ]
                    }
                },
                value: {
                    serializedName: "value",
                    defaultValue: '1',
                    type: {
                        name: "String"
                    }
                },
                cooldown: {
                    required: true,
                    serializedName: "cooldown",
                    type: {
                        name: "TimeSpan"
                    }
                }
            }
        }
    };
    var ScaleRule = {
        serializedName: "ScaleRule",
        type: {
            name: "Composite",
            className: "ScaleRule",
            modelProperties: {
                metricTrigger: {
                    required: true,
                    serializedName: "metricTrigger",
                    type: {
                        name: "Composite",
                        className: "MetricTrigger"
                    }
                },
                scaleAction: {
                    required: true,
                    serializedName: "scaleAction",
                    type: {
                        name: "Composite",
                        className: "ScaleAction"
                    }
                }
            }
        }
    };
    var TimeWindow = {
        serializedName: "TimeWindow",
        type: {
            name: "Composite",
            className: "TimeWindow",
            modelProperties: {
                timeZone: {
                    serializedName: "timeZone",
                    type: {
                        name: "String"
                    }
                },
                start: {
                    required: true,
                    serializedName: "start",
                    type: {
                        name: "DateTime"
                    }
                },
                end: {
                    required: true,
                    serializedName: "end",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var RecurrentSchedule = {
        serializedName: "RecurrentSchedule",
        type: {
            name: "Composite",
            className: "RecurrentSchedule",
            modelProperties: {
                timeZone: {
                    required: true,
                    serializedName: "timeZone",
                    type: {
                        name: "String"
                    }
                },
                days: {
                    required: true,
                    serializedName: "days",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                hours: {
                    required: true,
                    serializedName: "hours",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                },
                minutes: {
                    required: true,
                    serializedName: "minutes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                }
            }
        }
    };
    var Recurrence = {
        serializedName: "Recurrence",
        type: {
            name: "Composite",
            className: "Recurrence",
            modelProperties: {
                frequency: {
                    required: true,
                    serializedName: "frequency",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "Second",
                            "Minute",
                            "Hour",
                            "Day",
                            "Week",
                            "Month",
                            "Year"
                        ]
                    }
                },
                schedule: {
                    required: true,
                    serializedName: "schedule",
                    type: {
                        name: "Composite",
                        className: "RecurrentSchedule"
                    }
                }
            }
        }
    };
    var AutoscaleProfile = {
        serializedName: "AutoscaleProfile",
        type: {
            name: "Composite",
            className: "AutoscaleProfile",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                capacity: {
                    required: true,
                    serializedName: "capacity",
                    type: {
                        name: "Composite",
                        className: "ScaleCapacity"
                    }
                },
                rules: {
                    required: true,
                    serializedName: "rules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ScaleRule"
                            }
                        }
                    }
                },
                fixedDate: {
                    serializedName: "fixedDate",
                    type: {
                        name: "Composite",
                        className: "TimeWindow"
                    }
                },
                recurrence: {
                    serializedName: "recurrence",
                    type: {
                        name: "Composite",
                        className: "Recurrence"
                    }
                }
            }
        }
    };
    var EmailNotification = {
        serializedName: "EmailNotification",
        type: {
            name: "Composite",
            className: "EmailNotification",
            modelProperties: {
                sendToSubscriptionAdministrator: {
                    serializedName: "sendToSubscriptionAdministrator",
                    type: {
                        name: "Boolean"
                    }
                },
                sendToSubscriptionCoAdministrators: {
                    serializedName: "sendToSubscriptionCoAdministrators",
                    type: {
                        name: "Boolean"
                    }
                },
                customEmails: {
                    serializedName: "customEmails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var WebhookNotification = {
        serializedName: "WebhookNotification",
        type: {
            name: "Composite",
            className: "WebhookNotification",
            modelProperties: {
                serviceUri: {
                    serializedName: "serviceUri",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var AutoscaleNotification = {
        serializedName: "AutoscaleNotification",
        type: {
            name: "Composite",
            className: "AutoscaleNotification",
            modelProperties: {
                operation: {
                    required: true,
                    isConstant: true,
                    serializedName: "operation",
                    defaultValue: 'Scale',
                    type: {
                        name: "String"
                    }
                },
                email: {
                    serializedName: "email",
                    type: {
                        name: "Composite",
                        className: "EmailNotification"
                    }
                },
                webhooks: {
                    serializedName: "webhooks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WebhookNotification"
                            }
                        }
                    }
                }
            }
        }
    };
    var AutoscaleSetting = {
        serializedName: "AutoscaleSetting",
        type: {
            name: "Composite",
            className: "AutoscaleSetting",
            modelProperties: {
                profiles: {
                    required: true,
                    serializedName: "profiles",
                    constraints: {
                        MaxItems: 20
                    },
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AutoscaleProfile"
                            }
                        }
                    }
                },
                notifications: {
                    serializedName: "notifications",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AutoscaleNotification"
                            }
                        }
                    }
                },
                enabled: {
                    serializedName: "enabled",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                targetResourceUri: {
                    serializedName: "targetResourceUri",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AutoscaleSettingResource = {
        serializedName: "AutoscaleSettingResource",
        type: {
            name: "Composite",
            className: "AutoscaleSettingResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { profiles: {
                    required: true,
                    serializedName: "properties.profiles",
                    constraints: {
                        MaxItems: 20
                    },
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AutoscaleProfile"
                            }
                        }
                    }
                }, notifications: {
                    serializedName: "properties.notifications",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AutoscaleNotification"
                            }
                        }
                    }
                }, enabled: {
                    serializedName: "properties.enabled",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                }, autoscaleSettingResourceName: {
                    serializedName: "properties.name",
                    type: {
                        name: "String"
                    }
                }, targetResourceUri: {
                    serializedName: "properties.targetResourceUri",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var AutoscaleSettingResourcePatch = {
        serializedName: "AutoscaleSettingResourcePatch",
        type: {
            name: "Composite",
            className: "AutoscaleSettingResourcePatch",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                profiles: {
                    required: true,
                    serializedName: "properties.profiles",
                    constraints: {
                        MaxItems: 20
                    },
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AutoscaleProfile"
                            }
                        }
                    }
                },
                notifications: {
                    serializedName: "properties.notifications",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AutoscaleNotification"
                            }
                        }
                    }
                },
                enabled: {
                    serializedName: "properties.enabled",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                },
                name: {
                    serializedName: "properties.name",
                    type: {
                        name: "String"
                    }
                },
                targetResourceUri: {
                    serializedName: "properties.targetResourceUri",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Incident = {
        serializedName: "Incident",
        type: {
            name: "Composite",
            className: "Incident",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                ruleName: {
                    readOnly: true,
                    serializedName: "ruleName",
                    type: {
                        name: "String"
                    }
                },
                isActive: {
                    readOnly: true,
                    serializedName: "isActive",
                    type: {
                        name: "Boolean"
                    }
                },
                activatedTime: {
                    readOnly: true,
                    serializedName: "activatedTime",
                    type: {
                        name: "DateTime"
                    }
                },
                resolvedTime: {
                    readOnly: true,
                    serializedName: "resolvedTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var RuleDataSource = {
        serializedName: "RuleDataSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "odata.type",
                clientName: "odatatype"
            },
            uberParent: "RuleDataSource",
            className: "RuleDataSource",
            modelProperties: {
                resourceUri: {
                    serializedName: "resourceUri",
                    type: {
                        name: "String"
                    }
                },
                odatatype: {
                    required: true,
                    serializedName: "odata\\.type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RuleCondition = {
        serializedName: "RuleCondition",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "odata.type",
                clientName: "odatatype"
            },
            uberParent: "RuleCondition",
            className: "RuleCondition",
            modelProperties: {
                dataSource: {
                    serializedName: "dataSource",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "odata.type",
                            clientName: "odatatype"
                        },
                        uberParent: "RuleDataSource",
                        className: "RuleDataSource"
                    }
                },
                odatatype: {
                    required: true,
                    serializedName: "odata\\.type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RuleMetricDataSource = {
        serializedName: "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: RuleDataSource.type.polymorphicDiscriminator,
            uberParent: "RuleDataSource",
            className: "RuleMetricDataSource",
            modelProperties: __assign({}, RuleDataSource.type.modelProperties, { metricName: {
                    serializedName: "metricName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RuleManagementEventClaimsDataSource = {
        serializedName: "RuleManagementEventClaimsDataSource",
        type: {
            name: "Composite",
            className: "RuleManagementEventClaimsDataSource",
            modelProperties: {
                emailAddress: {
                    serializedName: "emailAddress",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RuleManagementEventDataSource = {
        serializedName: "Microsoft.Azure.Management.Insights.Models.RuleManagementEventDataSource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: RuleDataSource.type.polymorphicDiscriminator,
            uberParent: "RuleDataSource",
            className: "RuleManagementEventDataSource",
            modelProperties: __assign({}, RuleDataSource.type.modelProperties, { eventName: {
                    serializedName: "eventName",
                    type: {
                        name: "String"
                    }
                }, eventSource: {
                    serializedName: "eventSource",
                    type: {
                        name: "String"
                    }
                }, level: {
                    serializedName: "level",
                    type: {
                        name: "String"
                    }
                }, operationName: {
                    serializedName: "operationName",
                    type: {
                        name: "String"
                    }
                }, resourceGroupName: {
                    serializedName: "resourceGroupName",
                    type: {
                        name: "String"
                    }
                }, resourceProviderName: {
                    serializedName: "resourceProviderName",
                    type: {
                        name: "String"
                    }
                }, status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                }, subStatus: {
                    serializedName: "subStatus",
                    type: {
                        name: "String"
                    }
                }, claims: {
                    serializedName: "claims",
                    type: {
                        name: "Composite",
                        className: "RuleManagementEventClaimsDataSource"
                    }
                } })
        }
    };
    var ThresholdRuleCondition = {
        serializedName: "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
        type: {
            name: "Composite",
            polymorphicDiscriminator: RuleCondition.type.polymorphicDiscriminator,
            uberParent: "RuleCondition",
            className: "ThresholdRuleCondition",
            modelProperties: __assign({}, RuleCondition.type.modelProperties, { operator: {
                    required: true,
                    serializedName: "operator",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "GreaterThan",
                            "GreaterThanOrEqual",
                            "LessThan",
                            "LessThanOrEqual"
                        ]
                    }
                }, threshold: {
                    required: true,
                    serializedName: "threshold",
                    type: {
                        name: "Number"
                    }
                }, windowSize: {
                    serializedName: "windowSize",
                    type: {
                        name: "TimeSpan"
                    }
                }, timeAggregation: {
                    serializedName: "timeAggregation",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Average",
                            "Minimum",
                            "Maximum",
                            "Total",
                            "Last"
                        ]
                    }
                } })
        }
    };
    var LocationThresholdRuleCondition = {
        serializedName: "Microsoft.Azure.Management.Insights.Models.LocationThresholdRuleCondition",
        type: {
            name: "Composite",
            polymorphicDiscriminator: RuleCondition.type.polymorphicDiscriminator,
            uberParent: "RuleCondition",
            className: "LocationThresholdRuleCondition",
            modelProperties: __assign({}, RuleCondition.type.modelProperties, { windowSize: {
                    serializedName: "windowSize",
                    type: {
                        name: "TimeSpan"
                    }
                }, failedLocationCount: {
                    required: true,
                    serializedName: "failedLocationCount",
                    constraints: {
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var ManagementEventAggregationCondition = {
        serializedName: "ManagementEventAggregationCondition",
        type: {
            name: "Composite",
            className: "ManagementEventAggregationCondition",
            modelProperties: {
                operator: {
                    serializedName: "operator",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "GreaterThan",
                            "GreaterThanOrEqual",
                            "LessThan",
                            "LessThanOrEqual"
                        ]
                    }
                },
                threshold: {
                    serializedName: "threshold",
                    type: {
                        name: "Number"
                    }
                },
                windowSize: {
                    serializedName: "windowSize",
                    type: {
                        name: "TimeSpan"
                    }
                }
            }
        }
    };
    var ManagementEventRuleCondition = {
        serializedName: "Microsoft.Azure.Management.Insights.Models.ManagementEventRuleCondition",
        type: {
            name: "Composite",
            polymorphicDiscriminator: RuleCondition.type.polymorphicDiscriminator,
            uberParent: "RuleCondition",
            className: "ManagementEventRuleCondition",
            modelProperties: __assign({}, RuleCondition.type.modelProperties, { aggregation: {
                    serializedName: "aggregation",
                    type: {
                        name: "Composite",
                        className: "ManagementEventAggregationCondition"
                    }
                } })
        }
    };
    var RuleAction = {
        serializedName: "RuleAction",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "odata.type",
                clientName: "odatatype"
            },
            uberParent: "RuleAction",
            className: "RuleAction",
            modelProperties: {
                odatatype: {
                    required: true,
                    serializedName: "odata\\.type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RuleEmailAction = {
        serializedName: "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
        type: {
            name: "Composite",
            polymorphicDiscriminator: RuleAction.type.polymorphicDiscriminator,
            uberParent: "RuleAction",
            className: "RuleEmailAction",
            modelProperties: __assign({}, RuleAction.type.modelProperties, { sendToServiceOwners: {
                    serializedName: "sendToServiceOwners",
                    type: {
                        name: "Boolean"
                    }
                }, customEmails: {
                    serializedName: "customEmails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var RuleWebhookAction = {
        serializedName: "Microsoft.Azure.Management.Insights.Models.RuleWebhookAction",
        type: {
            name: "Composite",
            polymorphicDiscriminator: RuleAction.type.polymorphicDiscriminator,
            uberParent: "RuleAction",
            className: "RuleWebhookAction",
            modelProperties: __assign({}, RuleAction.type.modelProperties, { serviceUri: {
                    serializedName: "serviceUri",
                    type: {
                        name: "String"
                    }
                }, properties: {
                    serializedName: "properties",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var AlertRule = {
        serializedName: "AlertRule",
        type: {
            name: "Composite",
            className: "AlertRule",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                isEnabled: {
                    required: true,
                    serializedName: "isEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                condition: {
                    required: true,
                    serializedName: "condition",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "odata.type",
                            clientName: "odatatype"
                        },
                        uberParent: "RuleCondition",
                        className: "RuleCondition"
                    }
                },
                actions: {
                    serializedName: "actions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: {
                                    serializedName: "odata.type",
                                    clientName: "odatatype"
                                },
                                uberParent: "RuleAction",
                                className: "RuleAction"
                            }
                        }
                    }
                },
                lastUpdatedTime: {
                    readOnly: true,
                    serializedName: "lastUpdatedTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var AlertRuleResource = {
        serializedName: "AlertRuleResource",
        type: {
            name: "Composite",
            className: "AlertRuleResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { alertRuleResourceName: {
                    required: true,
                    serializedName: "properties.name",
                    type: {
                        name: "String"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, isEnabled: {
                    required: true,
                    serializedName: "properties.isEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, condition: {
                    required: true,
                    serializedName: "properties.condition",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "odata.type",
                            clientName: "odatatype"
                        },
                        uberParent: "RuleCondition",
                        className: "RuleCondition"
                    }
                }, actions: {
                    serializedName: "properties.actions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: {
                                    serializedName: "odata.type",
                                    clientName: "odatatype"
                                },
                                uberParent: "RuleAction",
                                className: "RuleAction"
                            }
                        }
                    }
                }, lastUpdatedTime: {
                    readOnly: true,
                    serializedName: "properties.lastUpdatedTime",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var AlertRuleResourcePatch = {
        serializedName: "AlertRuleResourcePatch",
        type: {
            name: "Composite",
            className: "AlertRuleResourcePatch",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                name: {
                    required: true,
                    serializedName: "properties.name",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                },
                isEnabled: {
                    required: true,
                    serializedName: "properties.isEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                condition: {
                    required: true,
                    serializedName: "properties.condition",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "odata.type",
                            clientName: "odatatype"
                        },
                        uberParent: "RuleCondition",
                        className: "RuleCondition"
                    }
                },
                actions: {
                    serializedName: "properties.actions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: {
                                    serializedName: "odata.type",
                                    clientName: "odatatype"
                                },
                                uberParent: "RuleAction",
                                className: "RuleAction"
                            }
                        }
                    }
                },
                lastUpdatedTime: {
                    readOnly: true,
                    serializedName: "properties.lastUpdatedTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var RetentionPolicy = {
        serializedName: "RetentionPolicy",
        type: {
            name: "Composite",
            className: "RetentionPolicy",
            modelProperties: {
                enabled: {
                    required: true,
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                days: {
                    required: true,
                    serializedName: "days",
                    constraints: {
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var LogProfileProperties = {
        serializedName: "LogProfileProperties",
        type: {
            name: "Composite",
            className: "LogProfileProperties",
            modelProperties: {
                storageAccountId: {
                    serializedName: "storageAccountId",
                    type: {
                        name: "String"
                    }
                },
                serviceBusRuleId: {
                    serializedName: "serviceBusRuleId",
                    type: {
                        name: "String"
                    }
                },
                locations: {
                    required: true,
                    serializedName: "locations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                categories: {
                    required: true,
                    serializedName: "categories",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                retentionPolicy: {
                    required: true,
                    serializedName: "retentionPolicy",
                    type: {
                        name: "Composite",
                        className: "RetentionPolicy"
                    }
                }
            }
        }
    };
    var LogProfileResource = {
        serializedName: "LogProfileResource",
        type: {
            name: "Composite",
            className: "LogProfileResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { storageAccountId: {
                    serializedName: "properties.storageAccountId",
                    type: {
                        name: "String"
                    }
                }, serviceBusRuleId: {
                    serializedName: "properties.serviceBusRuleId",
                    type: {
                        name: "String"
                    }
                }, locations: {
                    required: true,
                    serializedName: "properties.locations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, categories: {
                    required: true,
                    serializedName: "properties.categories",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, retentionPolicy: {
                    required: true,
                    serializedName: "properties.retentionPolicy",
                    type: {
                        name: "Composite",
                        className: "RetentionPolicy"
                    }
                } })
        }
    };
    var LogProfileResourcePatch = {
        serializedName: "LogProfileResourcePatch",
        type: {
            name: "Composite",
            className: "LogProfileResourcePatch",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                storageAccountId: {
                    serializedName: "properties.storageAccountId",
                    type: {
                        name: "String"
                    }
                },
                serviceBusRuleId: {
                    serializedName: "properties.serviceBusRuleId",
                    type: {
                        name: "String"
                    }
                },
                locations: {
                    required: true,
                    serializedName: "properties.locations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                categories: {
                    required: true,
                    serializedName: "properties.categories",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                retentionPolicy: {
                    required: true,
                    serializedName: "properties.retentionPolicy",
                    type: {
                        name: "Composite",
                        className: "RetentionPolicy"
                    }
                }
            }
        }
    };
    var ProxyOnlyResource = {
        serializedName: "ProxyOnlyResource",
        type: {
            name: "Composite",
            className: "ProxyOnlyResource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MetricSettings = {
        serializedName: "MetricSettings",
        type: {
            name: "Composite",
            className: "MetricSettings",
            modelProperties: {
                timeGrain: {
                    serializedName: "timeGrain",
                    type: {
                        name: "TimeSpan"
                    }
                },
                category: {
                    serializedName: "category",
                    type: {
                        name: "String"
                    }
                },
                enabled: {
                    required: true,
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                retentionPolicy: {
                    serializedName: "retentionPolicy",
                    type: {
                        name: "Composite",
                        className: "RetentionPolicy"
                    }
                }
            }
        }
    };
    var LogSettings = {
        serializedName: "LogSettings",
        type: {
            name: "Composite",
            className: "LogSettings",
            modelProperties: {
                category: {
                    serializedName: "category",
                    type: {
                        name: "String"
                    }
                },
                enabled: {
                    required: true,
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                retentionPolicy: {
                    serializedName: "retentionPolicy",
                    type: {
                        name: "Composite",
                        className: "RetentionPolicy"
                    }
                }
            }
        }
    };
    var DiagnosticSettings = {
        serializedName: "DiagnosticSettings",
        type: {
            name: "Composite",
            className: "DiagnosticSettings",
            modelProperties: {
                storageAccountId: {
                    serializedName: "storageAccountId",
                    type: {
                        name: "String"
                    }
                },
                serviceBusRuleId: {
                    serializedName: "serviceBusRuleId",
                    type: {
                        name: "String"
                    }
                },
                eventHubAuthorizationRuleId: {
                    serializedName: "eventHubAuthorizationRuleId",
                    type: {
                        name: "String"
                    }
                },
                eventHubName: {
                    serializedName: "eventHubName",
                    type: {
                        name: "String"
                    }
                },
                metrics: {
                    serializedName: "metrics",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricSettings"
                            }
                        }
                    }
                },
                logs: {
                    serializedName: "logs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LogSettings"
                            }
                        }
                    }
                },
                workspaceId: {
                    serializedName: "workspaceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DiagnosticSettingsResource = {
        serializedName: "DiagnosticSettingsResource",
        type: {
            name: "Composite",
            className: "DiagnosticSettingsResource",
            modelProperties: __assign({}, ProxyOnlyResource.type.modelProperties, { storageAccountId: {
                    serializedName: "properties.storageAccountId",
                    type: {
                        name: "String"
                    }
                }, serviceBusRuleId: {
                    serializedName: "properties.serviceBusRuleId",
                    type: {
                        name: "String"
                    }
                }, eventHubAuthorizationRuleId: {
                    serializedName: "properties.eventHubAuthorizationRuleId",
                    type: {
                        name: "String"
                    }
                }, eventHubName: {
                    serializedName: "properties.eventHubName",
                    type: {
                        name: "String"
                    }
                }, metrics: {
                    serializedName: "properties.metrics",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricSettings"
                            }
                        }
                    }
                }, logs: {
                    serializedName: "properties.logs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LogSettings"
                            }
                        }
                    }
                }, workspaceId: {
                    serializedName: "properties.workspaceId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var DiagnosticSettingsResourceCollection = {
        serializedName: "DiagnosticSettingsResourceCollection",
        type: {
            name: "Composite",
            className: "DiagnosticSettingsResourceCollection",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DiagnosticSettingsResource"
                            }
                        }
                    }
                }
            }
        }
    };
    var DiagnosticSettingsCategory = {
        serializedName: "DiagnosticSettingsCategory",
        type: {
            name: "Composite",
            className: "DiagnosticSettingsCategory",
            modelProperties: {
                categoryType: {
                    nullable: false,
                    serializedName: "categoryType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Metrics",
                            "Logs"
                        ]
                    }
                }
            }
        }
    };
    var DiagnosticSettingsCategoryResource = {
        serializedName: "DiagnosticSettingsCategoryResource",
        type: {
            name: "Composite",
            className: "DiagnosticSettingsCategoryResource",
            modelProperties: __assign({}, ProxyOnlyResource.type.modelProperties, { categoryType: {
                    nullable: false,
                    serializedName: "properties.categoryType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Metrics",
                            "Logs"
                        ]
                    }
                } })
        }
    };
    var DiagnosticSettingsCategoryResourceCollection = {
        serializedName: "DiagnosticSettingsCategoryResourceCollection",
        type: {
            name: "Composite",
            className: "DiagnosticSettingsCategoryResourceCollection",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DiagnosticSettingsCategoryResource"
                            }
                        }
                    }
                }
            }
        }
    };
    var EmailReceiver = {
        serializedName: "EmailReceiver",
        type: {
            name: "Composite",
            className: "EmailReceiver",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                emailAddress: {
                    required: true,
                    serializedName: "emailAddress",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "NotSpecified",
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }
            }
        }
    };
    var SmsReceiver = {
        serializedName: "SmsReceiver",
        type: {
            name: "Composite",
            className: "SmsReceiver",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                countryCode: {
                    required: true,
                    serializedName: "countryCode",
                    type: {
                        name: "String"
                    }
                },
                phoneNumber: {
                    required: true,
                    serializedName: "phoneNumber",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "NotSpecified",
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }
            }
        }
    };
    var WebhookReceiver = {
        serializedName: "WebhookReceiver",
        type: {
            name: "Composite",
            className: "WebhookReceiver",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                serviceUri: {
                    required: true,
                    serializedName: "serviceUri",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ItsmReceiver = {
        serializedName: "ItsmReceiver",
        type: {
            name: "Composite",
            className: "ItsmReceiver",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                workspaceId: {
                    required: true,
                    serializedName: "workspaceId",
                    type: {
                        name: "String"
                    }
                },
                connectionId: {
                    required: true,
                    serializedName: "connectionId",
                    type: {
                        name: "String"
                    }
                },
                ticketConfiguration: {
                    required: true,
                    serializedName: "ticketConfiguration",
                    type: {
                        name: "String"
                    }
                },
                region: {
                    required: true,
                    serializedName: "region",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AzureAppPushReceiver = {
        serializedName: "AzureAppPushReceiver",
        type: {
            name: "Composite",
            className: "AzureAppPushReceiver",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                emailAddress: {
                    required: true,
                    serializedName: "emailAddress",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AutomationRunbookReceiver = {
        serializedName: "AutomationRunbookReceiver",
        type: {
            name: "Composite",
            className: "AutomationRunbookReceiver",
            modelProperties: {
                automationAccountId: {
                    required: true,
                    serializedName: "automationAccountId",
                    type: {
                        name: "String"
                    }
                },
                runbookName: {
                    required: true,
                    serializedName: "runbookName",
                    type: {
                        name: "String"
                    }
                },
                webhookResourceId: {
                    required: true,
                    serializedName: "webhookResourceId",
                    type: {
                        name: "String"
                    }
                },
                isGlobalRunbook: {
                    required: true,
                    serializedName: "isGlobalRunbook",
                    type: {
                        name: "Boolean"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                serviceUri: {
                    serializedName: "serviceUri",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VoiceReceiver = {
        serializedName: "VoiceReceiver",
        type: {
            name: "Composite",
            className: "VoiceReceiver",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                countryCode: {
                    required: true,
                    serializedName: "countryCode",
                    type: {
                        name: "String"
                    }
                },
                phoneNumber: {
                    required: true,
                    serializedName: "phoneNumber",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LogicAppReceiver = {
        serializedName: "LogicAppReceiver",
        type: {
            name: "Composite",
            className: "LogicAppReceiver",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                resourceId: {
                    required: true,
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                },
                callbackUrl: {
                    required: true,
                    serializedName: "callbackUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AzureFunctionReceiver = {
        serializedName: "AzureFunctionReceiver",
        type: {
            name: "Composite",
            className: "AzureFunctionReceiver",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                functionAppResourceId: {
                    required: true,
                    serializedName: "functionAppResourceId",
                    type: {
                        name: "String"
                    }
                },
                functionName: {
                    required: true,
                    serializedName: "functionName",
                    type: {
                        name: "String"
                    }
                },
                httpTriggerUrl: {
                    required: true,
                    serializedName: "httpTriggerUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ActionGroup = {
        serializedName: "ActionGroup",
        type: {
            name: "Composite",
            className: "ActionGroup",
            modelProperties: {
                groupShortName: {
                    required: true,
                    serializedName: "groupShortName",
                    constraints: {
                        MaxLength: 12
                    },
                    type: {
                        name: "String"
                    }
                },
                enabled: {
                    required: true,
                    serializedName: "enabled",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                },
                emailReceivers: {
                    serializedName: "emailReceivers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EmailReceiver"
                            }
                        }
                    }
                },
                smsReceivers: {
                    serializedName: "smsReceivers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SmsReceiver"
                            }
                        }
                    }
                },
                webhookReceivers: {
                    serializedName: "webhookReceivers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WebhookReceiver"
                            }
                        }
                    }
                },
                itsmReceivers: {
                    serializedName: "itsmReceivers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ItsmReceiver"
                            }
                        }
                    }
                },
                azureAppPushReceivers: {
                    serializedName: "azureAppPushReceivers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AzureAppPushReceiver"
                            }
                        }
                    }
                },
                automationRunbookReceivers: {
                    serializedName: "automationRunbookReceivers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AutomationRunbookReceiver"
                            }
                        }
                    }
                },
                voiceReceivers: {
                    serializedName: "voiceReceivers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VoiceReceiver"
                            }
                        }
                    }
                },
                logicAppReceivers: {
                    serializedName: "logicAppReceivers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LogicAppReceiver"
                            }
                        }
                    }
                },
                azureFunctionReceivers: {
                    serializedName: "azureFunctionReceivers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AzureFunctionReceiver"
                            }
                        }
                    }
                }
            }
        }
    };
    var ActionGroupResource = {
        serializedName: "ActionGroupResource",
        type: {
            name: "Composite",
            className: "ActionGroupResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { groupShortName: {
                    required: true,
                    serializedName: "properties.groupShortName",
                    constraints: {
                        MaxLength: 12
                    },
                    type: {
                        name: "String"
                    }
                }, enabled: {
                    required: true,
                    serializedName: "properties.enabled",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                }, emailReceivers: {
                    serializedName: "properties.emailReceivers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EmailReceiver"
                            }
                        }
                    }
                }, smsReceivers: {
                    serializedName: "properties.smsReceivers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SmsReceiver"
                            }
                        }
                    }
                }, webhookReceivers: {
                    serializedName: "properties.webhookReceivers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WebhookReceiver"
                            }
                        }
                    }
                }, itsmReceivers: {
                    serializedName: "properties.itsmReceivers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ItsmReceiver"
                            }
                        }
                    }
                }, azureAppPushReceivers: {
                    serializedName: "properties.azureAppPushReceivers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AzureAppPushReceiver"
                            }
                        }
                    }
                }, automationRunbookReceivers: {
                    serializedName: "properties.automationRunbookReceivers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AutomationRunbookReceiver"
                            }
                        }
                    }
                }, voiceReceivers: {
                    serializedName: "properties.voiceReceivers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VoiceReceiver"
                            }
                        }
                    }
                }, logicAppReceivers: {
                    serializedName: "properties.logicAppReceivers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LogicAppReceiver"
                            }
                        }
                    }
                }, azureFunctionReceivers: {
                    serializedName: "properties.azureFunctionReceivers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AzureFunctionReceiver"
                            }
                        }
                    }
                } })
        }
    };
    var EnableRequest = {
        serializedName: "EnableRequest",
        type: {
            name: "Composite",
            className: "EnableRequest",
            modelProperties: {
                receiverName: {
                    required: true,
                    serializedName: "receiverName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ActionGroupPatch = {
        serializedName: "ActionGroupPatch",
        type: {
            name: "Composite",
            className: "ActionGroupPatch",
            modelProperties: {
                enabled: {
                    serializedName: "enabled",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var ActionGroupPatchBody = {
        serializedName: "ActionGroupPatchBody",
        type: {
            name: "Composite",
            className: "ActionGroupPatchBody",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                enabled: {
                    serializedName: "properties.enabled",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var ActivityLogAlertLeafCondition = {
        serializedName: "ActivityLogAlertLeafCondition",
        type: {
            name: "Composite",
            className: "ActivityLogAlertLeafCondition",
            modelProperties: {
                field: {
                    required: true,
                    serializedName: "field",
                    type: {
                        name: "String"
                    }
                },
                equals: {
                    required: true,
                    serializedName: "equals",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ActivityLogAlertAllOfCondition = {
        serializedName: "ActivityLogAlertAllOfCondition",
        type: {
            name: "Composite",
            className: "ActivityLogAlertAllOfCondition",
            modelProperties: {
                allOf: {
                    required: true,
                    serializedName: "allOf",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ActivityLogAlertLeafCondition"
                            }
                        }
                    }
                }
            }
        }
    };
    var ActivityLogAlertActionGroup = {
        serializedName: "ActivityLogAlertActionGroup",
        type: {
            name: "Composite",
            className: "ActivityLogAlertActionGroup",
            modelProperties: {
                actionGroupId: {
                    required: true,
                    serializedName: "actionGroupId",
                    type: {
                        name: "String"
                    }
                },
                webhookProperties: {
                    serializedName: "webhookProperties",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ActivityLogAlertActionList = {
        serializedName: "ActivityLogAlertActionList",
        type: {
            name: "Composite",
            className: "ActivityLogAlertActionList",
            modelProperties: {
                actionGroups: {
                    serializedName: "actionGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ActivityLogAlertActionGroup"
                            }
                        }
                    }
                }
            }
        }
    };
    var ActivityLogAlert = {
        serializedName: "ActivityLogAlert",
        type: {
            name: "Composite",
            className: "ActivityLogAlert",
            modelProperties: {
                scopes: {
                    required: true,
                    serializedName: "scopes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                enabled: {
                    serializedName: "enabled",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                },
                condition: {
                    required: true,
                    serializedName: "condition",
                    type: {
                        name: "Composite",
                        className: "ActivityLogAlertAllOfCondition"
                    }
                },
                actions: {
                    required: true,
                    serializedName: "actions",
                    type: {
                        name: "Composite",
                        className: "ActivityLogAlertActionList"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ActivityLogAlertResource = {
        serializedName: "ActivityLogAlertResource",
        type: {
            name: "Composite",
            className: "ActivityLogAlertResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { scopes: {
                    required: true,
                    serializedName: "properties.scopes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, enabled: {
                    serializedName: "properties.enabled",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                }, condition: {
                    required: true,
                    serializedName: "properties.condition",
                    type: {
                        name: "Composite",
                        className: "ActivityLogAlertAllOfCondition"
                    }
                }, actions: {
                    required: true,
                    serializedName: "properties.actions",
                    type: {
                        name: "Composite",
                        className: "ActivityLogAlertActionList"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ActivityLogAlertPatch = {
        serializedName: "ActivityLogAlertPatch",
        type: {
            name: "Composite",
            className: "ActivityLogAlertPatch",
            modelProperties: {
                enabled: {
                    serializedName: "enabled",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var ActivityLogAlertPatchBody = {
        serializedName: "ActivityLogAlertPatchBody",
        type: {
            name: "Composite",
            className: "ActivityLogAlertPatchBody",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                enabled: {
                    serializedName: "properties.enabled",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var LocalizableString = {
        serializedName: "LocalizableString",
        type: {
            name: "Composite",
            className: "LocalizableString",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                localizedValue: {
                    serializedName: "localizedValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SenderAuthorization = {
        serializedName: "SenderAuthorization",
        type: {
            name: "Composite",
            className: "SenderAuthorization",
            modelProperties: {
                action: {
                    serializedName: "action",
                    type: {
                        name: "String"
                    }
                },
                role: {
                    serializedName: "role",
                    type: {
                        name: "String"
                    }
                },
                scope: {
                    serializedName: "scope",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HttpRequestInfo = {
        serializedName: "HttpRequestInfo",
        type: {
            name: "Composite",
            className: "HttpRequestInfo",
            modelProperties: {
                clientRequestId: {
                    serializedName: "clientRequestId",
                    type: {
                        name: "String"
                    }
                },
                clientIpAddress: {
                    serializedName: "clientIpAddress",
                    type: {
                        name: "String"
                    }
                },
                method: {
                    serializedName: "method",
                    type: {
                        name: "String"
                    }
                },
                uri: {
                    serializedName: "uri",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventData = {
        serializedName: "EventData",
        type: {
            name: "Composite",
            className: "EventData",
            modelProperties: {
                authorization: {
                    readOnly: true,
                    serializedName: "authorization",
                    type: {
                        name: "Composite",
                        className: "SenderAuthorization"
                    }
                },
                claims: {
                    readOnly: true,
                    serializedName: "claims",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                caller: {
                    readOnly: true,
                    serializedName: "caller",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    readOnly: true,
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                eventDataId: {
                    readOnly: true,
                    serializedName: "eventDataId",
                    type: {
                        name: "String"
                    }
                },
                correlationId: {
                    readOnly: true,
                    serializedName: "correlationId",
                    type: {
                        name: "String"
                    }
                },
                eventName: {
                    readOnly: true,
                    serializedName: "eventName",
                    type: {
                        name: "Composite",
                        className: "LocalizableString"
                    }
                },
                category: {
                    readOnly: true,
                    serializedName: "category",
                    type: {
                        name: "Composite",
                        className: "LocalizableString"
                    }
                },
                httpRequest: {
                    readOnly: true,
                    serializedName: "httpRequest",
                    type: {
                        name: "Composite",
                        className: "HttpRequestInfo"
                    }
                },
                level: {
                    readOnly: true,
                    serializedName: "level",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Critical",
                            "Error",
                            "Warning",
                            "Informational",
                            "Verbose"
                        ]
                    }
                },
                resourceGroupName: {
                    readOnly: true,
                    serializedName: "resourceGroupName",
                    type: {
                        name: "String"
                    }
                },
                resourceProviderName: {
                    readOnly: true,
                    serializedName: "resourceProviderName",
                    type: {
                        name: "Composite",
                        className: "LocalizableString"
                    }
                },
                resourceId: {
                    readOnly: true,
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                },
                resourceType: {
                    readOnly: true,
                    serializedName: "resourceType",
                    type: {
                        name: "Composite",
                        className: "LocalizableString"
                    }
                },
                operationId: {
                    readOnly: true,
                    serializedName: "operationId",
                    type: {
                        name: "String"
                    }
                },
                operationName: {
                    readOnly: true,
                    serializedName: "operationName",
                    type: {
                        name: "Composite",
                        className: "LocalizableString"
                    }
                },
                properties: {
                    readOnly: true,
                    serializedName: "properties",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Composite",
                        className: "LocalizableString"
                    }
                },
                subStatus: {
                    readOnly: true,
                    serializedName: "subStatus",
                    type: {
                        name: "Composite",
                        className: "LocalizableString"
                    }
                },
                eventTimestamp: {
                    readOnly: true,
                    serializedName: "eventTimestamp",
                    type: {
                        name: "DateTime"
                    }
                },
                submissionTimestamp: {
                    readOnly: true,
                    serializedName: "submissionTimestamp",
                    type: {
                        name: "DateTime"
                    }
                },
                subscriptionId: {
                    readOnly: true,
                    serializedName: "subscriptionId",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MetricAvailability = {
        serializedName: "MetricAvailability",
        type: {
            name: "Composite",
            className: "MetricAvailability",
            modelProperties: {
                timeGrain: {
                    serializedName: "timeGrain",
                    type: {
                        name: "TimeSpan"
                    }
                },
                retention: {
                    serializedName: "retention",
                    type: {
                        name: "TimeSpan"
                    }
                }
            }
        }
    };
    var MetricDefinition = {
        serializedName: "MetricDefinition",
        type: {
            name: "Composite",
            className: "MetricDefinition",
            modelProperties: {
                isDimensionRequired: {
                    serializedName: "isDimensionRequired",
                    type: {
                        name: "Boolean"
                    }
                },
                resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                },
                namespace: {
                    serializedName: "namespace",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "LocalizableString"
                    }
                },
                unit: {
                    serializedName: "unit",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Count",
                            "Bytes",
                            "Seconds",
                            "CountPerSecond",
                            "BytesPerSecond",
                            "Percent",
                            "MilliSeconds",
                            "ByteSeconds",
                            "Unspecified"
                        ]
                    }
                },
                primaryAggregationType: {
                    serializedName: "primaryAggregationType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "Average",
                            "Count",
                            "Minimum",
                            "Maximum",
                            "Total"
                        ]
                    }
                },
                supportedAggregationTypes: {
                    serializedName: "supportedAggregationTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Enum",
                                allowedValues: [
                                    "None",
                                    "Average",
                                    "Count",
                                    "Minimum",
                                    "Maximum",
                                    "Total"
                                ]
                            }
                        }
                    }
                },
                metricAvailabilities: {
                    serializedName: "metricAvailabilities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricAvailability"
                            }
                        }
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                dimensions: {
                    serializedName: "dimensions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LocalizableString"
                            }
                        }
                    }
                }
            }
        }
    };
    var MetricValue = {
        serializedName: "MetricValue",
        type: {
            name: "Composite",
            className: "MetricValue",
            modelProperties: {
                timeStamp: {
                    required: true,
                    serializedName: "timeStamp",
                    type: {
                        name: "DateTime"
                    }
                },
                average: {
                    serializedName: "average",
                    type: {
                        name: "Number"
                    }
                },
                minimum: {
                    serializedName: "minimum",
                    type: {
                        name: "Number"
                    }
                },
                maximum: {
                    serializedName: "maximum",
                    type: {
                        name: "Number"
                    }
                },
                total: {
                    serializedName: "total",
                    type: {
                        name: "Number"
                    }
                },
                count: {
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var MetadataValue = {
        serializedName: "MetadataValue",
        type: {
            name: "Composite",
            className: "MetadataValue",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "LocalizableString"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TimeSeriesElement = {
        serializedName: "TimeSeriesElement",
        type: {
            name: "Composite",
            className: "TimeSeriesElement",
            modelProperties: {
                metadatavalues: {
                    serializedName: "metadatavalues",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetadataValue"
                            }
                        }
                    }
                },
                data: {
                    serializedName: "data",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricValue"
                            }
                        }
                    }
                }
            }
        }
    };
    var Metric = {
        serializedName: "Metric",
        type: {
            name: "Composite",
            className: "Metric",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "LocalizableString"
                    }
                },
                unit: {
                    required: true,
                    serializedName: "unit",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Count",
                            "Bytes",
                            "Seconds",
                            "CountPerSecond",
                            "BytesPerSecond",
                            "Percent",
                            "MilliSeconds",
                            "ByteSeconds",
                            "Unspecified"
                        ]
                    }
                },
                timeseries: {
                    required: true,
                    serializedName: "timeseries",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TimeSeriesElement"
                            }
                        }
                    }
                }
            }
        }
    };
    var Response = {
        serializedName: "Response",
        type: {
            name: "Composite",
            className: "Response",
            modelProperties: {
                cost: {
                    serializedName: "cost",
                    constraints: {
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                },
                timespan: {
                    required: true,
                    serializedName: "timespan",
                    type: {
                        name: "String"
                    }
                },
                interval: {
                    serializedName: "interval",
                    type: {
                        name: "TimeSpan"
                    }
                },
                namespace: {
                    serializedName: "namespace",
                    type: {
                        name: "String"
                    }
                },
                resourceregion: {
                    serializedName: "resourceregion",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Metric"
                            }
                        }
                    }
                }
            }
        }
    };
    var BaselineMetadataValue = {
        serializedName: "BaselineMetadataValue",
        type: {
            name: "Composite",
            className: "BaselineMetadataValue",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "LocalizableString"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Baseline = {
        serializedName: "Baseline",
        type: {
            name: "Composite",
            className: "Baseline",
            modelProperties: {
                sensitivity: {
                    required: true,
                    serializedName: "sensitivity",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Low",
                            "Medium",
                            "High"
                        ]
                    }
                },
                lowThresholds: {
                    required: true,
                    serializedName: "lowThresholds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                },
                highThresholds: {
                    required: true,
                    serializedName: "highThresholds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                }
            }
        }
    };
    var BaselineProperties = {
        serializedName: "BaselineProperties",
        type: {
            name: "Composite",
            className: "BaselineProperties",
            modelProperties: {
                timespan: {
                    serializedName: "timespan",
                    type: {
                        name: "String"
                    }
                },
                interval: {
                    serializedName: "interval",
                    type: {
                        name: "TimeSpan"
                    }
                },
                aggregation: {
                    serializedName: "aggregation",
                    type: {
                        name: "String"
                    }
                },
                timestamps: {
                    serializedName: "timestamps",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "DateTime"
                            }
                        }
                    }
                },
                baseline: {
                    serializedName: "baseline",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Baseline"
                            }
                        }
                    }
                },
                metadata: {
                    serializedName: "metadata",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BaselineMetadataValue"
                            }
                        }
                    }
                }
            }
        }
    };
    var BaselineResponse = {
        serializedName: "BaselineResponse",
        type: {
            name: "Composite",
            className: "BaselineResponse",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "LocalizableString"
                    }
                },
                timespan: {
                    serializedName: "properties.timespan",
                    type: {
                        name: "String"
                    }
                },
                interval: {
                    serializedName: "properties.interval",
                    type: {
                        name: "TimeSpan"
                    }
                },
                aggregation: {
                    serializedName: "properties.aggregation",
                    type: {
                        name: "String"
                    }
                },
                timestamps: {
                    serializedName: "properties.timestamps",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "DateTime"
                            }
                        }
                    }
                },
                baseline: {
                    serializedName: "properties.baseline",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Baseline"
                            }
                        }
                    }
                },
                metadata: {
                    serializedName: "properties.metadata",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BaselineMetadataValue"
                            }
                        }
                    }
                }
            }
        }
    };
    var TimeSeriesInformation = {
        serializedName: "TimeSeriesInformation",
        type: {
            name: "Composite",
            className: "TimeSeriesInformation",
            modelProperties: {
                sensitivities: {
                    required: true,
                    serializedName: "sensitivities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                values: {
                    required: true,
                    serializedName: "values",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                },
                timestamps: {
                    serializedName: "timestamps",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "DateTime"
                            }
                        }
                    }
                }
            }
        }
    };
    var CalculateBaselineResponse = {
        serializedName: "CalculateBaselineResponse",
        type: {
            name: "Composite",
            className: "CalculateBaselineResponse",
            modelProperties: {
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                timestamps: {
                    serializedName: "timestamps",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "DateTime"
                            }
                        }
                    }
                },
                baseline: {
                    required: true,
                    serializedName: "baseline",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Baseline"
                            }
                        }
                    }
                }
            }
        }
    };
    var MetricAlertAction = {
        serializedName: "MetricAlertAction",
        type: {
            name: "Composite",
            className: "MetricAlertAction",
            modelProperties: {
                actionGroupId: {
                    serializedName: "actionGroupId",
                    type: {
                        name: "String"
                    }
                },
                webhookProperties: {
                    serializedName: "webhookProperties",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var MetricAlertCriteria = {
        serializedName: "MetricAlertCriteria",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "odata.type",
                clientName: "odatatype"
            },
            uberParent: "MetricAlertCriteria",
            className: "MetricAlertCriteria",
            modelProperties: {
                odatatype: {
                    required: true,
                    serializedName: "odata\\.type",
                    type: {
                        name: "String"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var MetricAlertProperties = {
        serializedName: "MetricAlertProperties",
        type: {
            name: "Composite",
            className: "MetricAlertProperties",
            modelProperties: {
                description: {
                    required: true,
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                severity: {
                    required: true,
                    serializedName: "severity",
                    type: {
                        name: "Number"
                    }
                },
                enabled: {
                    required: true,
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                scopes: {
                    serializedName: "scopes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                evaluationFrequency: {
                    required: true,
                    serializedName: "evaluationFrequency",
                    type: {
                        name: "TimeSpan"
                    }
                },
                windowSize: {
                    required: true,
                    serializedName: "windowSize",
                    type: {
                        name: "TimeSpan"
                    }
                },
                targetResourceType: {
                    serializedName: "targetResourceType",
                    type: {
                        name: "String"
                    }
                },
                targetResourceRegion: {
                    serializedName: "targetResourceRegion",
                    type: {
                        name: "String"
                    }
                },
                criteria: {
                    required: true,
                    serializedName: "criteria",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "odata.type",
                            clientName: "odatatype"
                        },
                        uberParent: "MetricAlertCriteria",
                        className: "MetricAlertCriteria",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                },
                autoMitigate: {
                    serializedName: "autoMitigate",
                    type: {
                        name: "Boolean"
                    }
                },
                actions: {
                    serializedName: "actions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricAlertAction"
                            }
                        }
                    }
                },
                lastUpdatedTime: {
                    readOnly: true,
                    serializedName: "lastUpdatedTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var MetricAlertResource = {
        serializedName: "MetricAlertResource",
        type: {
            name: "Composite",
            className: "MetricAlertResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { description: {
                    required: true,
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, severity: {
                    required: true,
                    serializedName: "properties.severity",
                    type: {
                        name: "Number"
                    }
                }, enabled: {
                    required: true,
                    serializedName: "properties.enabled",
                    type: {
                        name: "Boolean"
                    }
                }, scopes: {
                    serializedName: "properties.scopes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, evaluationFrequency: {
                    required: true,
                    serializedName: "properties.evaluationFrequency",
                    type: {
                        name: "TimeSpan"
                    }
                }, windowSize: {
                    required: true,
                    serializedName: "properties.windowSize",
                    type: {
                        name: "TimeSpan"
                    }
                }, targetResourceType: {
                    serializedName: "properties.targetResourceType",
                    type: {
                        name: "String"
                    }
                }, targetResourceRegion: {
                    serializedName: "properties.targetResourceRegion",
                    type: {
                        name: "String"
                    }
                }, criteria: {
                    required: true,
                    serializedName: "properties.criteria",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "odata.type",
                            clientName: "odatatype"
                        },
                        uberParent: "MetricAlertCriteria",
                        className: "MetricAlertCriteria",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }, autoMitigate: {
                    serializedName: "properties.autoMitigate",
                    type: {
                        name: "Boolean"
                    }
                }, actions: {
                    serializedName: "properties.actions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricAlertAction"
                            }
                        }
                    }
                }, lastUpdatedTime: {
                    readOnly: true,
                    serializedName: "properties.lastUpdatedTime",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var MetricAlertResourcePatch = {
        serializedName: "MetricAlertResourcePatch",
        type: {
            name: "Composite",
            className: "MetricAlertResourcePatch",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                description: {
                    required: true,
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                },
                severity: {
                    required: true,
                    serializedName: "properties.severity",
                    type: {
                        name: "Number"
                    }
                },
                enabled: {
                    required: true,
                    serializedName: "properties.enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                scopes: {
                    serializedName: "properties.scopes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                evaluationFrequency: {
                    required: true,
                    serializedName: "properties.evaluationFrequency",
                    type: {
                        name: "TimeSpan"
                    }
                },
                windowSize: {
                    required: true,
                    serializedName: "properties.windowSize",
                    type: {
                        name: "TimeSpan"
                    }
                },
                targetResourceType: {
                    serializedName: "properties.targetResourceType",
                    type: {
                        name: "String"
                    }
                },
                targetResourceRegion: {
                    serializedName: "properties.targetResourceRegion",
                    type: {
                        name: "String"
                    }
                },
                criteria: {
                    required: true,
                    serializedName: "properties.criteria",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "odata.type",
                            clientName: "odatatype"
                        },
                        uberParent: "MetricAlertCriteria",
                        className: "MetricAlertCriteria",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                },
                autoMitigate: {
                    serializedName: "properties.autoMitigate",
                    type: {
                        name: "Boolean"
                    }
                },
                actions: {
                    serializedName: "properties.actions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricAlertAction"
                            }
                        }
                    }
                },
                lastUpdatedTime: {
                    readOnly: true,
                    serializedName: "properties.lastUpdatedTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var MetricAlertStatusProperties = {
        serializedName: "MetricAlertStatusProperties",
        type: {
            name: "Composite",
            className: "MetricAlertStatusProperties",
            modelProperties: {
                dimensions: {
                    serializedName: "dimensions",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                timestamp: {
                    serializedName: "timestamp",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var MetricAlertStatus = {
        serializedName: "MetricAlertStatus",
        type: {
            name: "Composite",
            className: "MetricAlertStatus",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "MetricAlertStatusProperties"
                    }
                }
            }
        }
    };
    var MetricAlertStatusCollection = {
        serializedName: "MetricAlertStatusCollection",
        type: {
            name: "Composite",
            className: "MetricAlertStatusCollection",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricAlertStatus"
                            }
                        }
                    }
                }
            }
        }
    };
    var MetricDimension = {
        serializedName: "MetricDimension",
        type: {
            name: "Composite",
            className: "MetricDimension",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                operator: {
                    required: true,
                    serializedName: "operator",
                    type: {
                        name: "String"
                    }
                },
                values: {
                    required: true,
                    serializedName: "values",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var MultiMetricCriteria = {
        serializedName: "MultiMetricCriteria",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "criterionType",
                clientName: "criterionType"
            },
            uberParent: "MultiMetricCriteria",
            className: "MultiMetricCriteria",
            modelProperties: {
                criterionType: {
                    required: true,
                    serializedName: "criterionType",
                    type: {
                        name: "String"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var MetricCriteria = {
        serializedName: "StaticThresholdCriterion",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MultiMetricCriteria.type.polymorphicDiscriminator,
            uberParent: "MultiMetricCriteria",
            className: "MetricCriteria",
            modelProperties: __assign({}, MultiMetricCriteria.type.modelProperties, { name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, metricName: {
                    required: true,
                    serializedName: "metricName",
                    type: {
                        name: "String"
                    }
                }, metricNamespace: {
                    serializedName: "metricNamespace",
                    type: {
                        name: "String"
                    }
                }, operator: {
                    required: true,
                    serializedName: "operator",
                    type: {
                        name: "Object"
                    }
                }, timeAggregation: {
                    required: true,
                    serializedName: "timeAggregation",
                    type: {
                        name: "Object"
                    }
                }, threshold: {
                    required: true,
                    serializedName: "threshold",
                    type: {
                        name: "Number"
                    }
                }, dimensions: {
                    serializedName: "dimensions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricDimension"
                            }
                        }
                    }
                } }),
            additionalProperties: MultiMetricCriteria.type.additionalProperties
        }
    };
    var MetricAlertSingleResourceMultipleMetricCriteria = {
        serializedName: "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MetricAlertCriteria.type.polymorphicDiscriminator,
            uberParent: "MetricAlertCriteria",
            className: "MetricAlertSingleResourceMultipleMetricCriteria",
            modelProperties: __assign({}, MetricAlertCriteria.type.modelProperties, { allOf: {
                    serializedName: "allOf",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: MultiMetricCriteria.type.polymorphicDiscriminator,
                                uberParent: "MultiMetricCriteria",
                                className: "MetricCriteria",
                                additionalProperties: MultiMetricCriteria.type.additionalProperties
                            }
                        }
                    }
                } }),
            additionalProperties: MetricAlertCriteria.type.additionalProperties
        }
    };
    var MetricAlertMultipleResourceMultipleMetricCriteria = {
        serializedName: "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MetricAlertCriteria.type.polymorphicDiscriminator,
            uberParent: "MetricAlertCriteria",
            className: "MetricAlertMultipleResourceMultipleMetricCriteria",
            modelProperties: __assign({}, MetricAlertCriteria.type.modelProperties, { allOf: {
                    serializedName: "allOf",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: {
                                    serializedName: "criterionType",
                                    clientName: "criterionType"
                                },
                                uberParent: "MultiMetricCriteria",
                                className: "MultiMetricCriteria",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                } }),
            additionalProperties: MetricAlertCriteria.type.additionalProperties
        }
    };
    var Source = {
        serializedName: "Source",
        type: {
            name: "Composite",
            className: "Source",
            modelProperties: {
                query: {
                    serializedName: "query",
                    type: {
                        name: "String"
                    }
                },
                authorizedResources: {
                    serializedName: "authorizedResources",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                dataSourceId: {
                    required: true,
                    serializedName: "dataSourceId",
                    type: {
                        name: "String"
                    }
                },
                queryType: {
                    serializedName: "queryType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Schedule = {
        serializedName: "Schedule",
        type: {
            name: "Composite",
            className: "Schedule",
            modelProperties: {
                frequencyInMinutes: {
                    required: true,
                    serializedName: "frequencyInMinutes",
                    type: {
                        name: "Number"
                    }
                },
                timeWindowInMinutes: {
                    required: true,
                    serializedName: "timeWindowInMinutes",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Action = {
        serializedName: "Action",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "odata.type",
                clientName: "odatatype"
            },
            uberParent: "Action",
            className: "Action",
            modelProperties: {
                odatatype: {
                    required: true,
                    serializedName: "odata\\.type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LogSearchRule = {
        serializedName: "LogSearchRule",
        type: {
            name: "Composite",
            className: "LogSearchRule",
            modelProperties: {
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "String"
                    }
                },
                lastUpdatedTime: {
                    readOnly: true,
                    serializedName: "lastUpdatedTime",
                    type: {
                        name: "DateTime"
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                source: {
                    required: true,
                    serializedName: "source",
                    type: {
                        name: "Composite",
                        className: "Source"
                    }
                },
                schedule: {
                    serializedName: "schedule",
                    type: {
                        name: "Composite",
                        className: "Schedule"
                    }
                },
                action: {
                    required: true,
                    serializedName: "action",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "odata.type",
                            clientName: "odatatype"
                        },
                        uberParent: "Action",
                        className: "Action"
                    }
                }
            }
        }
    };
    var LogSearchRuleResource = {
        serializedName: "LogSearchRuleResource",
        type: {
            name: "Composite",
            className: "LogSearchRuleResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, enabled: {
                    serializedName: "properties.enabled",
                    type: {
                        name: "String"
                    }
                }, lastUpdatedTime: {
                    readOnly: true,
                    serializedName: "properties.lastUpdatedTime",
                    type: {
                        name: "DateTime"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, source: {
                    required: true,
                    serializedName: "properties.source",
                    type: {
                        name: "Composite",
                        className: "Source"
                    }
                }, schedule: {
                    serializedName: "properties.schedule",
                    type: {
                        name: "Composite",
                        className: "Schedule"
                    }
                }, action: {
                    required: true,
                    serializedName: "properties.action",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "odata.type",
                            clientName: "odatatype"
                        },
                        uberParent: "Action",
                        className: "Action"
                    }
                } })
        }
    };
    var LogSearchRulePatch = {
        serializedName: "LogSearchRulePatch",
        type: {
            name: "Composite",
            className: "LogSearchRulePatch",
            modelProperties: {
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LogSearchRuleResourcePatch = {
        serializedName: "LogSearchRuleResourcePatch",
        type: {
            name: "Composite",
            className: "LogSearchRuleResourcePatch",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                enabled: {
                    serializedName: "properties.enabled",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LogMetricTrigger = {
        serializedName: "LogMetricTrigger",
        type: {
            name: "Composite",
            className: "LogMetricTrigger",
            modelProperties: {
                thresholdOperator: {
                    serializedName: "thresholdOperator",
                    type: {
                        name: "String"
                    }
                },
                threshold: {
                    serializedName: "threshold",
                    type: {
                        name: "Number"
                    }
                },
                metricTriggerType: {
                    serializedName: "metricTriggerType",
                    type: {
                        name: "String"
                    }
                },
                metricColumn: {
                    serializedName: "metricColumn",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TriggerCondition = {
        serializedName: "TriggerCondition",
        type: {
            name: "Composite",
            className: "TriggerCondition",
            modelProperties: {
                thresholdOperator: {
                    required: true,
                    serializedName: "thresholdOperator",
                    type: {
                        name: "String"
                    }
                },
                threshold: {
                    required: true,
                    serializedName: "threshold",
                    type: {
                        name: "Number"
                    }
                },
                metricTrigger: {
                    serializedName: "metricTrigger",
                    type: {
                        name: "Composite",
                        className: "LogMetricTrigger"
                    }
                }
            }
        }
    };
    var AzNsActionGroup = {
        serializedName: "AzNsActionGroup",
        type: {
            name: "Composite",
            className: "AzNsActionGroup",
            modelProperties: {
                actionGroup: {
                    serializedName: "actionGroup",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                emailSubject: {
                    serializedName: "emailSubject",
                    type: {
                        name: "String"
                    }
                },
                customWebhookPayload: {
                    serializedName: "customWebhookPayload",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AlertingAction = {
        serializedName: "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Action.type.polymorphicDiscriminator,
            uberParent: "Action",
            className: "AlertingAction",
            modelProperties: __assign({}, Action.type.modelProperties, { severity: {
                    required: true,
                    serializedName: "severity",
                    type: {
                        name: "String"
                    }
                }, aznsAction: {
                    required: true,
                    serializedName: "aznsAction",
                    type: {
                        name: "Composite",
                        className: "AzNsActionGroup"
                    }
                }, throttlingInMin: {
                    serializedName: "throttlingInMin",
                    type: {
                        name: "Number"
                    }
                }, trigger: {
                    required: true,
                    serializedName: "trigger",
                    type: {
                        name: "Composite",
                        className: "TriggerCondition"
                    }
                } })
        }
    };
    var Dimension = {
        serializedName: "Dimension",
        type: {
            name: "Composite",
            className: "Dimension",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                operator: {
                    required: true,
                    isConstant: true,
                    serializedName: "operator",
                    defaultValue: 'Include',
                    type: {
                        name: "String"
                    }
                },
                values: {
                    required: true,
                    serializedName: "values",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var Criteria = {
        serializedName: "Criteria",
        type: {
            name: "Composite",
            className: "Criteria",
            modelProperties: {
                metricName: {
                    required: true,
                    serializedName: "metricName",
                    type: {
                        name: "String"
                    }
                },
                dimensions: {
                    serializedName: "dimensions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Dimension"
                            }
                        }
                    }
                }
            }
        }
    };
    var LogToMetricAction = {
        serializedName: "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.LogToMetricAction",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Action.type.polymorphicDiscriminator,
            uberParent: "Action",
            className: "LogToMetricAction",
            modelProperties: __assign({}, Action.type.modelProperties, { criteria: {
                    required: true,
                    serializedName: "criteria",
                    type: {
                        name: "Composite",
                        className: "Criteria"
                    }
                } })
        }
    };
    var MetricNamespaceName = {
        serializedName: "MetricNamespaceName",
        type: {
            name: "Composite",
            className: "MetricNamespaceName",
            modelProperties: {
                metricNamespaceName: {
                    serializedName: "metricNamespaceName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MetricNamespace = {
        serializedName: "MetricNamespace",
        type: {
            name: "Composite",
            className: "MetricNamespace",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "MetricNamespaceName"
                    }
                }
            }
        }
    };
    var AutoscaleSettingResourceCollection = {
        serializedName: "AutoscaleSettingResourceCollection",
        type: {
            name: "Composite",
            className: "AutoscaleSettingResourceCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AutoscaleSettingResource"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IncidentListResult = {
        serializedName: "IncidentListResult",
        type: {
            name: "Composite",
            className: "IncidentListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Incident"
                            }
                        }
                    }
                }
            }
        }
    };
    var AlertRuleResourceCollection = {
        serializedName: "AlertRuleResourceCollection",
        type: {
            name: "Composite",
            className: "AlertRuleResourceCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AlertRuleResource"
                            }
                        }
                    }
                }
            }
        }
    };
    var LogProfileCollection = {
        serializedName: "LogProfileCollection",
        type: {
            name: "Composite",
            className: "LogProfileCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LogProfileResource"
                            }
                        }
                    }
                }
            }
        }
    };
    var ActionGroupList = {
        serializedName: "ActionGroupList",
        type: {
            name: "Composite",
            className: "ActionGroupList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ActionGroupResource"
                            }
                        }
                    }
                }
            }
        }
    };
    var ActivityLogAlertList = {
        serializedName: "ActivityLogAlertList",
        type: {
            name: "Composite",
            className: "ActivityLogAlertList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ActivityLogAlertResource"
                            }
                        }
                    }
                }
            }
        }
    };
    var EventDataCollection = {
        serializedName: "EventDataCollection",
        type: {
            name: "Composite",
            className: "EventDataCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EventData"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventCategoryCollection = {
        serializedName: "EventCategoryCollection",
        type: {
            name: "Composite",
            className: "EventCategoryCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LocalizableString"
                            }
                        }
                    }
                }
            }
        }
    };
    var MetricDefinitionCollection = {
        serializedName: "MetricDefinitionCollection",
        type: {
            name: "Composite",
            className: "MetricDefinitionCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricDefinition"
                            }
                        }
                    }
                }
            }
        }
    };
    var MetricAlertResourceCollection = {
        serializedName: "MetricAlertResourceCollection",
        type: {
            name: "Composite",
            className: "MetricAlertResourceCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricAlertResource"
                            }
                        }
                    }
                }
            }
        }
    };
    var LogSearchRuleResourceCollection = {
        serializedName: "LogSearchRuleResourceCollection",
        type: {
            name: "Composite",
            className: "LogSearchRuleResourceCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LogSearchRuleResource"
                            }
                        }
                    }
                }
            }
        }
    };
    var MetricNamespaceCollection = {
        serializedName: "MetricNamespaceCollection",
        type: {
            name: "Composite",
            className: "MetricNamespaceCollection",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricNamespace"
                            }
                        }
                    }
                }
            }
        }
    };
    var discriminators = {
        'RuleDataSource': RuleDataSource,
        'RuleCondition': RuleCondition,
        'RuleDataSource.Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource': RuleMetricDataSource,
        'RuleDataSource.Microsoft.Azure.Management.Insights.Models.RuleManagementEventDataSource': RuleManagementEventDataSource,
        'RuleCondition.Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition': ThresholdRuleCondition,
        'RuleCondition.Microsoft.Azure.Management.Insights.Models.LocationThresholdRuleCondition': LocationThresholdRuleCondition,
        'RuleCondition.Microsoft.Azure.Management.Insights.Models.ManagementEventRuleCondition': ManagementEventRuleCondition,
        'RuleAction': RuleAction,
        'RuleAction.Microsoft.Azure.Management.Insights.Models.RuleEmailAction': RuleEmailAction,
        'RuleAction.Microsoft.Azure.Management.Insights.Models.RuleWebhookAction': RuleWebhookAction,
        'MetricAlertCriteria': MetricAlertCriteria,
        'MultiMetricCriteria.StaticThresholdCriterion': MetricCriteria,
        'MetricAlertCriteria.Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria': MetricAlertSingleResourceMultipleMetricCriteria,
        'MultiMetricCriteria': MultiMetricCriteria,
        'MetricAlertCriteria.Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria': MetricAlertMultipleResourceMultipleMetricCriteria,
        'Action': Action,
        'Action.Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction': AlertingAction,
        'Action.Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.LogToMetricAction': LogToMetricAction
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        Resource: Resource,
        ScaleCapacity: ScaleCapacity,
        MetricTrigger: MetricTrigger,
        ScaleAction: ScaleAction,
        ScaleRule: ScaleRule,
        TimeWindow: TimeWindow,
        RecurrentSchedule: RecurrentSchedule,
        Recurrence: Recurrence,
        AutoscaleProfile: AutoscaleProfile,
        EmailNotification: EmailNotification,
        WebhookNotification: WebhookNotification,
        AutoscaleNotification: AutoscaleNotification,
        AutoscaleSetting: AutoscaleSetting,
        AutoscaleSettingResource: AutoscaleSettingResource,
        AutoscaleSettingResourcePatch: AutoscaleSettingResourcePatch,
        ErrorResponse: ErrorResponse,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        OperationListResult: OperationListResult,
        Incident: Incident,
        RuleDataSource: RuleDataSource,
        RuleCondition: RuleCondition,
        RuleMetricDataSource: RuleMetricDataSource,
        RuleManagementEventClaimsDataSource: RuleManagementEventClaimsDataSource,
        RuleManagementEventDataSource: RuleManagementEventDataSource,
        ThresholdRuleCondition: ThresholdRuleCondition,
        LocationThresholdRuleCondition: LocationThresholdRuleCondition,
        ManagementEventAggregationCondition: ManagementEventAggregationCondition,
        ManagementEventRuleCondition: ManagementEventRuleCondition,
        RuleAction: RuleAction,
        RuleEmailAction: RuleEmailAction,
        RuleWebhookAction: RuleWebhookAction,
        AlertRule: AlertRule,
        AlertRuleResource: AlertRuleResource,
        AlertRuleResourcePatch: AlertRuleResourcePatch,
        RetentionPolicy: RetentionPolicy,
        LogProfileProperties: LogProfileProperties,
        LogProfileResource: LogProfileResource,
        LogProfileResourcePatch: LogProfileResourcePatch,
        ProxyOnlyResource: ProxyOnlyResource,
        MetricSettings: MetricSettings,
        LogSettings: LogSettings,
        DiagnosticSettings: DiagnosticSettings,
        DiagnosticSettingsResource: DiagnosticSettingsResource,
        DiagnosticSettingsResourceCollection: DiagnosticSettingsResourceCollection,
        DiagnosticSettingsCategory: DiagnosticSettingsCategory,
        DiagnosticSettingsCategoryResource: DiagnosticSettingsCategoryResource,
        DiagnosticSettingsCategoryResourceCollection: DiagnosticSettingsCategoryResourceCollection,
        EmailReceiver: EmailReceiver,
        SmsReceiver: SmsReceiver,
        WebhookReceiver: WebhookReceiver,
        ItsmReceiver: ItsmReceiver,
        AzureAppPushReceiver: AzureAppPushReceiver,
        AutomationRunbookReceiver: AutomationRunbookReceiver,
        VoiceReceiver: VoiceReceiver,
        LogicAppReceiver: LogicAppReceiver,
        AzureFunctionReceiver: AzureFunctionReceiver,
        ActionGroup: ActionGroup,
        ActionGroupResource: ActionGroupResource,
        EnableRequest: EnableRequest,
        ActionGroupPatch: ActionGroupPatch,
        ActionGroupPatchBody: ActionGroupPatchBody,
        ActivityLogAlertLeafCondition: ActivityLogAlertLeafCondition,
        ActivityLogAlertAllOfCondition: ActivityLogAlertAllOfCondition,
        ActivityLogAlertActionGroup: ActivityLogAlertActionGroup,
        ActivityLogAlertActionList: ActivityLogAlertActionList,
        ActivityLogAlert: ActivityLogAlert,
        ActivityLogAlertResource: ActivityLogAlertResource,
        ActivityLogAlertPatch: ActivityLogAlertPatch,
        ActivityLogAlertPatchBody: ActivityLogAlertPatchBody,
        LocalizableString: LocalizableString,
        SenderAuthorization: SenderAuthorization,
        HttpRequestInfo: HttpRequestInfo,
        EventData: EventData,
        MetricAvailability: MetricAvailability,
        MetricDefinition: MetricDefinition,
        MetricValue: MetricValue,
        MetadataValue: MetadataValue,
        TimeSeriesElement: TimeSeriesElement,
        Metric: Metric,
        Response: Response,
        BaselineMetadataValue: BaselineMetadataValue,
        Baseline: Baseline,
        BaselineProperties: BaselineProperties,
        BaselineResponse: BaselineResponse,
        TimeSeriesInformation: TimeSeriesInformation,
        CalculateBaselineResponse: CalculateBaselineResponse,
        MetricAlertAction: MetricAlertAction,
        MetricAlertCriteria: MetricAlertCriteria,
        MetricAlertProperties: MetricAlertProperties,
        MetricAlertResource: MetricAlertResource,
        MetricAlertResourcePatch: MetricAlertResourcePatch,
        MetricAlertStatusProperties: MetricAlertStatusProperties,
        MetricAlertStatus: MetricAlertStatus,
        MetricAlertStatusCollection: MetricAlertStatusCollection,
        MetricDimension: MetricDimension,
        MultiMetricCriteria: MultiMetricCriteria,
        MetricCriteria: MetricCriteria,
        MetricAlertSingleResourceMultipleMetricCriteria: MetricAlertSingleResourceMultipleMetricCriteria,
        MetricAlertMultipleResourceMultipleMetricCriteria: MetricAlertMultipleResourceMultipleMetricCriteria,
        Source: Source,
        Schedule: Schedule,
        Action: Action,
        LogSearchRule: LogSearchRule,
        LogSearchRuleResource: LogSearchRuleResource,
        LogSearchRulePatch: LogSearchRulePatch,
        LogSearchRuleResourcePatch: LogSearchRuleResourcePatch,
        LogMetricTrigger: LogMetricTrigger,
        TriggerCondition: TriggerCondition,
        AzNsActionGroup: AzNsActionGroup,
        AlertingAction: AlertingAction,
        Dimension: Dimension,
        Criteria: Criteria,
        LogToMetricAction: LogToMetricAction,
        MetricNamespaceName: MetricNamespaceName,
        MetricNamespace: MetricNamespace,
        AutoscaleSettingResourceCollection: AutoscaleSettingResourceCollection,
        IncidentListResult: IncidentListResult,
        AlertRuleResourceCollection: AlertRuleResourceCollection,
        LogProfileCollection: LogProfileCollection,
        ActionGroupList: ActionGroupList,
        ActivityLogAlertList: ActivityLogAlertList,
        EventDataCollection: EventDataCollection,
        EventCategoryCollection: EventCategoryCollection,
        MetricDefinitionCollection: MetricDefinitionCollection,
        MetricAlertResourceCollection: MetricAlertResourceCollection,
        LogSearchRuleResourceCollection: LogSearchRuleResourceCollection,
        MetricNamespaceCollection: MetricNamespaceCollection,
        discriminators: discriminators
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        AutoscaleSettingResourceCollection: AutoscaleSettingResourceCollection,
        AutoscaleSettingResource: AutoscaleSettingResource,
        Resource: Resource,
        BaseResource: BaseResource,
        AutoscaleProfile: AutoscaleProfile,
        ScaleCapacity: ScaleCapacity,
        ScaleRule: ScaleRule,
        MetricTrigger: MetricTrigger,
        ScaleAction: ScaleAction,
        TimeWindow: TimeWindow,
        Recurrence: Recurrence,
        RecurrentSchedule: RecurrentSchedule,
        AutoscaleNotification: AutoscaleNotification,
        EmailNotification: EmailNotification,
        WebhookNotification: WebhookNotification,
        ErrorResponse: ErrorResponse,
        AutoscaleSettingResourcePatch: AutoscaleSettingResourcePatch,
        AlertRuleResource: AlertRuleResource,
        RuleCondition: RuleCondition,
        RuleDataSource: RuleDataSource,
        RuleAction: RuleAction,
        LogProfileResource: LogProfileResource,
        RetentionPolicy: RetentionPolicy,
        ProxyOnlyResource: ProxyOnlyResource,
        DiagnosticSettingsResource: DiagnosticSettingsResource,
        MetricSettings: MetricSettings,
        LogSettings: LogSettings,
        DiagnosticSettingsCategoryResource: DiagnosticSettingsCategoryResource,
        ActionGroupResource: ActionGroupResource,
        EmailReceiver: EmailReceiver,
        SmsReceiver: SmsReceiver,
        WebhookReceiver: WebhookReceiver,
        ItsmReceiver: ItsmReceiver,
        AzureAppPushReceiver: AzureAppPushReceiver,
        AutomationRunbookReceiver: AutomationRunbookReceiver,
        VoiceReceiver: VoiceReceiver,
        LogicAppReceiver: LogicAppReceiver,
        AzureFunctionReceiver: AzureFunctionReceiver,
        ActivityLogAlertResource: ActivityLogAlertResource,
        ActivityLogAlertAllOfCondition: ActivityLogAlertAllOfCondition,
        ActivityLogAlertLeafCondition: ActivityLogAlertLeafCondition,
        ActivityLogAlertActionList: ActivityLogAlertActionList,
        ActivityLogAlertActionGroup: ActivityLogAlertActionGroup,
        MetricAlertResource: MetricAlertResource,
        MetricAlertCriteria: MetricAlertCriteria,
        MetricAlertAction: MetricAlertAction,
        MetricAlertSingleResourceMultipleMetricCriteria: MetricAlertSingleResourceMultipleMetricCriteria,
        MetricCriteria: MetricCriteria,
        MultiMetricCriteria: MultiMetricCriteria,
        MetricDimension: MetricDimension,
        MetricAlertMultipleResourceMultipleMetricCriteria: MetricAlertMultipleResourceMultipleMetricCriteria,
        LogSearchRuleResource: LogSearchRuleResource,
        Source: Source,
        Schedule: Schedule,
        Action: Action,
        AlertingAction: AlertingAction,
        AzNsActionGroup: AzNsActionGroup,
        TriggerCondition: TriggerCondition,
        LogMetricTrigger: LogMetricTrigger,
        LogToMetricAction: LogToMetricAction,
        Criteria: Criteria,
        Dimension: Dimension,
        RuleMetricDataSource: RuleMetricDataSource,
        RuleManagementEventDataSource: RuleManagementEventDataSource,
        RuleManagementEventClaimsDataSource: RuleManagementEventClaimsDataSource,
        ThresholdRuleCondition: ThresholdRuleCondition,
        LocationThresholdRuleCondition: LocationThresholdRuleCondition,
        ManagementEventRuleCondition: ManagementEventRuleCondition,
        ManagementEventAggregationCondition: ManagementEventAggregationCondition,
        RuleEmailAction: RuleEmailAction,
        RuleWebhookAction: RuleWebhookAction
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var actionGroupName = {
        parameterPath: "actionGroupName",
        mapper: {
            required: true,
            serializedName: "actionGroupName",
            type: {
                name: "String"
            }
        }
    };
    var activityLogAlertName = {
        parameterPath: "activityLogAlertName",
        mapper: {
            required: true,
            serializedName: "activityLogAlertName",
            type: {
                name: "String"
            }
        }
    };
    var aggregation = {
        parameterPath: [
            "options",
            "aggregation"
        ],
        mapper: {
            serializedName: "aggregation",
            type: {
                name: "String"
            }
        }
    };
    var apiVersion0 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2015-04-01',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion1 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2016-03-01',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion2 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2017-05-01-preview',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion3 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2018-03-01',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion4 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2017-04-01',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion5 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2018-01-01',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion6 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2017-11-01-preview',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion7 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2018-04-16',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion8 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2017-12-01-preview',
            type: {
                name: "String"
            }
        }
    };
    var autoscaleSettingName = {
        parameterPath: "autoscaleSettingName",
        mapper: {
            required: true,
            serializedName: "autoscaleSettingName",
            type: {
                name: "String"
            }
        }
    };
    var filter = {
        parameterPath: [
            "options",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var incidentName = {
        parameterPath: "incidentName",
        mapper: {
            required: true,
            serializedName: "incidentName",
            type: {
                name: "String"
            }
        }
    };
    var interval = {
        parameterPath: [
            "options",
            "interval"
        ],
        mapper: {
            serializedName: "interval",
            type: {
                name: "TimeSpan"
            }
        }
    };
    var logProfileName = {
        parameterPath: "logProfileName",
        mapper: {
            required: true,
            serializedName: "logProfileName",
            type: {
                name: "String"
            }
        }
    };
    var metricName = {
        parameterPath: "metricName",
        mapper: {
            required: true,
            serializedName: "metricName",
            type: {
                name: "String"
            }
        }
    };
    var metricnames = {
        parameterPath: [
            "options",
            "metricnames"
        ],
        mapper: {
            serializedName: "metricnames",
            type: {
                name: "String"
            }
        }
    };
    var metricnamespace = {
        parameterPath: [
            "options",
            "metricnamespace"
        ],
        mapper: {
            serializedName: "metricnamespace",
            type: {
                name: "String"
            }
        }
    };
    var name = {
        parameterPath: "name",
        mapper: {
            required: true,
            serializedName: "name",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var orderby = {
        parameterPath: [
            "options",
            "orderby"
        ],
        mapper: {
            serializedName: "orderby",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var resourceUri = {
        parameterPath: "resourceUri",
        mapper: {
            required: true,
            serializedName: "resourceUri",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resultType = {
        parameterPath: [
            "options",
            "resultType"
        ],
        mapper: {
            serializedName: "resultType",
            type: {
                name: "Enum",
                allowedValues: [
                    "Data",
                    "Metadata"
                ]
            }
        }
    };
    var ruleName = {
        parameterPath: "ruleName",
        mapper: {
            required: true,
            serializedName: "ruleName",
            type: {
                name: "String"
            }
        }
    };
    var select = {
        parameterPath: [
            "options",
            "select"
        ],
        mapper: {
            serializedName: "$select",
            type: {
                name: "String"
            }
        }
    };
    var sensitivities = {
        parameterPath: [
            "options",
            "sensitivities"
        ],
        mapper: {
            serializedName: "sensitivities",
            type: {
                name: "String"
            }
        }
    };
    var startTime = {
        parameterPath: [
            "options",
            "startTime"
        ],
        mapper: {
            serializedName: "startTime",
            type: {
                name: "String"
            }
        }
    };
    var statusName = {
        parameterPath: "statusName",
        mapper: {
            required: true,
            serializedName: "statusName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var timespan = {
        parameterPath: [
            "options",
            "timespan"
        ],
        mapper: {
            serializedName: "timespan",
            type: {
                name: "String"
            }
        }
    };
    var top = {
        parameterPath: [
            "options",
            "top"
        ],
        mapper: {
            serializedName: "top",
            type: {
                name: "Number"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a AutoscaleSettings. */
    var AutoscaleSettings = /** @class */ (function () {
        /**
         * Create a AutoscaleSettings.
         * @param {MonitorManagementClientContext} client Reference to the service client.
         */
        function AutoscaleSettings(client) {
            this.client = client;
        }
        AutoscaleSettings.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        AutoscaleSettings.prototype.createOrUpdate = function (resourceGroupName$$1, autoscaleSettingName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                autoscaleSettingName: autoscaleSettingName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        AutoscaleSettings.prototype.deleteMethod = function (resourceGroupName$$1, autoscaleSettingName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                autoscaleSettingName: autoscaleSettingName$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        AutoscaleSettings.prototype.get = function (resourceGroupName$$1, autoscaleSettingName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                autoscaleSettingName: autoscaleSettingName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        AutoscaleSettings.prototype.update = function (resourceGroupName$$1, autoscaleSettingName$$1, autoscaleSettingResource, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                autoscaleSettingName: autoscaleSettingName$$1,
                autoscaleSettingResource: autoscaleSettingResource,
                options: options
            }, updateOperationSpec, callback);
        };
        AutoscaleSettings.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec, callback);
        };
        AutoscaleSettings.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        AutoscaleSettings.prototype.listBySubscriptionNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listBySubscriptionNextOperationSpec, callback);
        };
        return AutoscaleSettings;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/autoscalesettings",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AutoscaleSettingResourceCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/autoscalesettings/{autoscaleSettingName}",
        urlParameters: [
            resourceGroupName,
            autoscaleSettingName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, AutoscaleSettingResource, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AutoscaleSettingResource
            },
            201: {
                bodyMapper: AutoscaleSettingResource
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/autoscalesettings/{autoscaleSettingName}",
        urlParameters: [
            resourceGroupName,
            autoscaleSettingName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/autoscalesettings/{autoscaleSettingName}",
        urlParameters: [
            resourceGroupName,
            autoscaleSettingName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AutoscaleSettingResource
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/autoscalesettings/{autoscaleSettingName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            autoscaleSettingName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "autoscaleSettingResource",
            mapper: __assign({}, AutoscaleSettingResourcePatch, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AutoscaleSettingResource
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listBySubscriptionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/microsoft.insights/autoscalesettings",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AutoscaleSettingResourceCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AutoscaleSettingResourceCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listBySubscriptionNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AutoscaleSettingResourceCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        OperationListResult: OperationListResult,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {MonitorManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/microsoft.insights/operations",
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        Incident: Incident,
        ErrorResponse: ErrorResponse,
        IncidentListResult: IncidentListResult,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a AlertRuleIncidents. */
    var AlertRuleIncidents = /** @class */ (function () {
        /**
         * Create a AlertRuleIncidents.
         * @param {MonitorManagementClientContext} client Reference to the service client.
         */
        function AlertRuleIncidents(client) {
            this.client = client;
        }
        AlertRuleIncidents.prototype.get = function (resourceGroupName$$1, ruleName$$1, incidentName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                ruleName: ruleName$$1,
                incidentName: incidentName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        AlertRuleIncidents.prototype.listByAlertRule = function (resourceGroupName$$1, ruleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                ruleName: ruleName$$1,
                options: options
            }, listByAlertRuleOperationSpec, callback);
        };
        return AlertRuleIncidents;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/alertrules/{ruleName}/incidents/{incidentName}",
        urlParameters: [
            resourceGroupName,
            ruleName,
            incidentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Incident
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listByAlertRuleOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/alertrules/{ruleName}/incidents",
        urlParameters: [
            resourceGroupName,
            ruleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IncidentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        AlertRuleResource: AlertRuleResource,
        Resource: Resource,
        BaseResource: BaseResource,
        RuleCondition: RuleCondition,
        RuleDataSource: RuleDataSource,
        RuleAction: RuleAction,
        ErrorResponse: ErrorResponse,
        CloudError: CloudError,
        AlertRuleResourcePatch: AlertRuleResourcePatch,
        AlertRuleResourceCollection: AlertRuleResourceCollection,
        AutoscaleSettingResource: AutoscaleSettingResource,
        AutoscaleProfile: AutoscaleProfile,
        ScaleCapacity: ScaleCapacity,
        ScaleRule: ScaleRule,
        MetricTrigger: MetricTrigger,
        ScaleAction: ScaleAction,
        TimeWindow: TimeWindow,
        Recurrence: Recurrence,
        RecurrentSchedule: RecurrentSchedule,
        AutoscaleNotification: AutoscaleNotification,
        EmailNotification: EmailNotification,
        WebhookNotification: WebhookNotification,
        RuleMetricDataSource: RuleMetricDataSource,
        RuleManagementEventDataSource: RuleManagementEventDataSource,
        RuleManagementEventClaimsDataSource: RuleManagementEventClaimsDataSource,
        ThresholdRuleCondition: ThresholdRuleCondition,
        LocationThresholdRuleCondition: LocationThresholdRuleCondition,
        ManagementEventRuleCondition: ManagementEventRuleCondition,
        ManagementEventAggregationCondition: ManagementEventAggregationCondition,
        RuleEmailAction: RuleEmailAction,
        RuleWebhookAction: RuleWebhookAction,
        LogProfileResource: LogProfileResource,
        RetentionPolicy: RetentionPolicy,
        ProxyOnlyResource: ProxyOnlyResource,
        DiagnosticSettingsResource: DiagnosticSettingsResource,
        MetricSettings: MetricSettings,
        LogSettings: LogSettings,
        DiagnosticSettingsCategoryResource: DiagnosticSettingsCategoryResource,
        ActionGroupResource: ActionGroupResource,
        EmailReceiver: EmailReceiver,
        SmsReceiver: SmsReceiver,
        WebhookReceiver: WebhookReceiver,
        ItsmReceiver: ItsmReceiver,
        AzureAppPushReceiver: AzureAppPushReceiver,
        AutomationRunbookReceiver: AutomationRunbookReceiver,
        VoiceReceiver: VoiceReceiver,
        LogicAppReceiver: LogicAppReceiver,
        AzureFunctionReceiver: AzureFunctionReceiver,
        ActivityLogAlertResource: ActivityLogAlertResource,
        ActivityLogAlertAllOfCondition: ActivityLogAlertAllOfCondition,
        ActivityLogAlertLeafCondition: ActivityLogAlertLeafCondition,
        ActivityLogAlertActionList: ActivityLogAlertActionList,
        ActivityLogAlertActionGroup: ActivityLogAlertActionGroup,
        MetricAlertResource: MetricAlertResource,
        MetricAlertCriteria: MetricAlertCriteria,
        MetricAlertAction: MetricAlertAction,
        MetricAlertSingleResourceMultipleMetricCriteria: MetricAlertSingleResourceMultipleMetricCriteria,
        MetricCriteria: MetricCriteria,
        MultiMetricCriteria: MultiMetricCriteria,
        MetricDimension: MetricDimension,
        MetricAlertMultipleResourceMultipleMetricCriteria: MetricAlertMultipleResourceMultipleMetricCriteria,
        LogSearchRuleResource: LogSearchRuleResource,
        Source: Source,
        Schedule: Schedule,
        Action: Action,
        AlertingAction: AlertingAction,
        AzNsActionGroup: AzNsActionGroup,
        TriggerCondition: TriggerCondition,
        LogMetricTrigger: LogMetricTrigger,
        LogToMetricAction: LogToMetricAction,
        Criteria: Criteria,
        Dimension: Dimension
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a AlertRules. */
    var AlertRules = /** @class */ (function () {
        /**
         * Create a AlertRules.
         * @param {MonitorManagementClientContext} client Reference to the service client.
         */
        function AlertRules(client) {
            this.client = client;
        }
        AlertRules.prototype.createOrUpdate = function (resourceGroupName$$1, ruleName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                ruleName: ruleName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$1, callback);
        };
        AlertRules.prototype.deleteMethod = function (resourceGroupName$$1, ruleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                ruleName: ruleName$$1,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        AlertRules.prototype.get = function (resourceGroupName$$1, ruleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                ruleName: ruleName$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        AlertRules.prototype.update = function (resourceGroupName$$1, ruleName$$1, alertRulesResource, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                ruleName: ruleName$$1,
                alertRulesResource: alertRulesResource,
                options: options
            }, updateOperationSpec$1, callback);
        };
        AlertRules.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec$1, callback);
        };
        AlertRules.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec$1, callback);
        };
        return AlertRules;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var createOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/alertrules/{ruleName}",
        urlParameters: [
            resourceGroupName,
            ruleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, AlertRuleResource, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AlertRuleResource
            },
            201: {
                bodyMapper: AlertRuleResource
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/alertrules/{ruleName}",
        urlParameters: [
            resourceGroupName,
            ruleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/alertrules/{ruleName}",
        urlParameters: [
            resourceGroupName,
            ruleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AlertRuleResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var updateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/alertrules/{ruleName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            ruleName
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "alertRulesResource",
            mapper: __assign({}, AlertRuleResourcePatch, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AlertRuleResource
            },
            201: {
                bodyMapper: AlertRuleResource
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var listByResourceGroupOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/alertrules",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AlertRuleResourceCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listBySubscriptionOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/microsoft.insights/alertrules",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AlertRuleResourceCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        CloudError: CloudError,
        LogProfileResource: LogProfileResource,
        Resource: Resource,
        BaseResource: BaseResource,
        RetentionPolicy: RetentionPolicy,
        ErrorResponse: ErrorResponse,
        LogProfileResourcePatch: LogProfileResourcePatch,
        LogProfileCollection: LogProfileCollection,
        AutoscaleSettingResource: AutoscaleSettingResource,
        AutoscaleProfile: AutoscaleProfile,
        ScaleCapacity: ScaleCapacity,
        ScaleRule: ScaleRule,
        MetricTrigger: MetricTrigger,
        ScaleAction: ScaleAction,
        TimeWindow: TimeWindow,
        Recurrence: Recurrence,
        RecurrentSchedule: RecurrentSchedule,
        AutoscaleNotification: AutoscaleNotification,
        EmailNotification: EmailNotification,
        WebhookNotification: WebhookNotification,
        AlertRuleResource: AlertRuleResource,
        RuleCondition: RuleCondition,
        RuleDataSource: RuleDataSource,
        RuleAction: RuleAction,
        ProxyOnlyResource: ProxyOnlyResource,
        DiagnosticSettingsResource: DiagnosticSettingsResource,
        MetricSettings: MetricSettings,
        LogSettings: LogSettings,
        DiagnosticSettingsCategoryResource: DiagnosticSettingsCategoryResource,
        ActionGroupResource: ActionGroupResource,
        EmailReceiver: EmailReceiver,
        SmsReceiver: SmsReceiver,
        WebhookReceiver: WebhookReceiver,
        ItsmReceiver: ItsmReceiver,
        AzureAppPushReceiver: AzureAppPushReceiver,
        AutomationRunbookReceiver: AutomationRunbookReceiver,
        VoiceReceiver: VoiceReceiver,
        LogicAppReceiver: LogicAppReceiver,
        AzureFunctionReceiver: AzureFunctionReceiver,
        ActivityLogAlertResource: ActivityLogAlertResource,
        ActivityLogAlertAllOfCondition: ActivityLogAlertAllOfCondition,
        ActivityLogAlertLeafCondition: ActivityLogAlertLeafCondition,
        ActivityLogAlertActionList: ActivityLogAlertActionList,
        ActivityLogAlertActionGroup: ActivityLogAlertActionGroup,
        MetricAlertResource: MetricAlertResource,
        MetricAlertCriteria: MetricAlertCriteria,
        MetricAlertAction: MetricAlertAction,
        MetricAlertSingleResourceMultipleMetricCriteria: MetricAlertSingleResourceMultipleMetricCriteria,
        MetricCriteria: MetricCriteria,
        MultiMetricCriteria: MultiMetricCriteria,
        MetricDimension: MetricDimension,
        MetricAlertMultipleResourceMultipleMetricCriteria: MetricAlertMultipleResourceMultipleMetricCriteria,
        LogSearchRuleResource: LogSearchRuleResource,
        Source: Source,
        Schedule: Schedule,
        Action: Action,
        AlertingAction: AlertingAction,
        AzNsActionGroup: AzNsActionGroup,
        TriggerCondition: TriggerCondition,
        LogMetricTrigger: LogMetricTrigger,
        LogToMetricAction: LogToMetricAction,
        Criteria: Criteria,
        Dimension: Dimension,
        RuleMetricDataSource: RuleMetricDataSource,
        RuleManagementEventDataSource: RuleManagementEventDataSource,
        RuleManagementEventClaimsDataSource: RuleManagementEventClaimsDataSource,
        ThresholdRuleCondition: ThresholdRuleCondition,
        LocationThresholdRuleCondition: LocationThresholdRuleCondition,
        ManagementEventRuleCondition: ManagementEventRuleCondition,
        ManagementEventAggregationCondition: ManagementEventAggregationCondition,
        RuleEmailAction: RuleEmailAction,
        RuleWebhookAction: RuleWebhookAction
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a LogProfiles. */
    var LogProfiles = /** @class */ (function () {
        /**
         * Create a LogProfiles.
         * @param {MonitorManagementClientContext} client Reference to the service client.
         */
        function LogProfiles(client) {
            this.client = client;
        }
        LogProfiles.prototype.deleteMethod = function (logProfileName$$1, options, callback) {
            return this.client.sendOperationRequest({
                logProfileName: logProfileName$$1,
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        LogProfiles.prototype.get = function (logProfileName$$1, options, callback) {
            return this.client.sendOperationRequest({
                logProfileName: logProfileName$$1,
                options: options
            }, getOperationSpec$3, callback);
        };
        LogProfiles.prototype.createOrUpdate = function (logProfileName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                logProfileName: logProfileName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$2, callback);
        };
        LogProfiles.prototype.update = function (logProfileName$$1, logProfilesResource, options, callback) {
            return this.client.sendOperationRequest({
                logProfileName: logProfileName$$1,
                logProfilesResource: logProfilesResource,
                options: options
            }, updateOperationSpec$2, callback);
        };
        LogProfiles.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        return LogProfiles;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/providers/microsoft.insights/logprofiles/{logProfileName}",
        urlParameters: [
            logProfileName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/microsoft.insights/logprofiles/{logProfileName}",
        urlParameters: [
            logProfileName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LogProfileResource
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var createOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/providers/microsoft.insights/logprofiles/{logProfileName}",
        urlParameters: [
            logProfileName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, LogProfileResource, { required: true })
        },
        responses: {
            200: {
                bodyMapper: LogProfileResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var updateOperationSpec$2 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/providers/microsoft.insights/logprofiles/{logProfileName}",
        urlParameters: [
            subscriptionId,
            logProfileName
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "logProfilesResource",
            mapper: __assign({}, LogProfileResourcePatch, { required: true })
        },
        responses: {
            200: {
                bodyMapper: LogProfileResource
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/microsoft.insights/logprofiles",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LogProfileCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        DiagnosticSettingsResource: DiagnosticSettingsResource,
        ProxyOnlyResource: ProxyOnlyResource,
        BaseResource: BaseResource,
        MetricSettings: MetricSettings,
        RetentionPolicy: RetentionPolicy,
        LogSettings: LogSettings,
        ErrorResponse: ErrorResponse,
        DiagnosticSettingsResourceCollection: DiagnosticSettingsResourceCollection,
        Resource: Resource,
        AutoscaleSettingResource: AutoscaleSettingResource,
        AutoscaleProfile: AutoscaleProfile,
        ScaleCapacity: ScaleCapacity,
        ScaleRule: ScaleRule,
        MetricTrigger: MetricTrigger,
        ScaleAction: ScaleAction,
        TimeWindow: TimeWindow,
        Recurrence: Recurrence,
        RecurrentSchedule: RecurrentSchedule,
        AutoscaleNotification: AutoscaleNotification,
        EmailNotification: EmailNotification,
        WebhookNotification: WebhookNotification,
        AlertRuleResource: AlertRuleResource,
        RuleCondition: RuleCondition,
        RuleDataSource: RuleDataSource,
        RuleAction: RuleAction,
        LogProfileResource: LogProfileResource,
        DiagnosticSettingsCategoryResource: DiagnosticSettingsCategoryResource,
        ActionGroupResource: ActionGroupResource,
        EmailReceiver: EmailReceiver,
        SmsReceiver: SmsReceiver,
        WebhookReceiver: WebhookReceiver,
        ItsmReceiver: ItsmReceiver,
        AzureAppPushReceiver: AzureAppPushReceiver,
        AutomationRunbookReceiver: AutomationRunbookReceiver,
        VoiceReceiver: VoiceReceiver,
        LogicAppReceiver: LogicAppReceiver,
        AzureFunctionReceiver: AzureFunctionReceiver,
        ActivityLogAlertResource: ActivityLogAlertResource,
        ActivityLogAlertAllOfCondition: ActivityLogAlertAllOfCondition,
        ActivityLogAlertLeafCondition: ActivityLogAlertLeafCondition,
        ActivityLogAlertActionList: ActivityLogAlertActionList,
        ActivityLogAlertActionGroup: ActivityLogAlertActionGroup,
        MetricAlertResource: MetricAlertResource,
        MetricAlertCriteria: MetricAlertCriteria,
        MetricAlertAction: MetricAlertAction,
        MetricAlertSingleResourceMultipleMetricCriteria: MetricAlertSingleResourceMultipleMetricCriteria,
        MetricCriteria: MetricCriteria,
        MultiMetricCriteria: MultiMetricCriteria,
        MetricDimension: MetricDimension,
        MetricAlertMultipleResourceMultipleMetricCriteria: MetricAlertMultipleResourceMultipleMetricCriteria,
        LogSearchRuleResource: LogSearchRuleResource,
        Source: Source,
        Schedule: Schedule,
        Action: Action,
        AlertingAction: AlertingAction,
        AzNsActionGroup: AzNsActionGroup,
        TriggerCondition: TriggerCondition,
        LogMetricTrigger: LogMetricTrigger,
        LogToMetricAction: LogToMetricAction,
        Criteria: Criteria,
        Dimension: Dimension,
        RuleMetricDataSource: RuleMetricDataSource,
        RuleManagementEventDataSource: RuleManagementEventDataSource,
        RuleManagementEventClaimsDataSource: RuleManagementEventClaimsDataSource,
        ThresholdRuleCondition: ThresholdRuleCondition,
        LocationThresholdRuleCondition: LocationThresholdRuleCondition,
        ManagementEventRuleCondition: ManagementEventRuleCondition,
        ManagementEventAggregationCondition: ManagementEventAggregationCondition,
        RuleEmailAction: RuleEmailAction,
        RuleWebhookAction: RuleWebhookAction
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DiagnosticSettingsOperations. */
    var DiagnosticSettingsOperations = /** @class */ (function () {
        /**
         * Create a DiagnosticSettingsOperations.
         * @param {MonitorManagementClientContext} client Reference to the service client.
         */
        function DiagnosticSettingsOperations(client) {
            this.client = client;
        }
        DiagnosticSettingsOperations.prototype.get = function (resourceUri$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceUri: resourceUri$$1,
                name: name$$1,
                options: options
            }, getOperationSpec$4, callback);
        };
        DiagnosticSettingsOperations.prototype.createOrUpdate = function (resourceUri$$1, parameters, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceUri: resourceUri$$1,
                parameters: parameters,
                name: name$$1,
                options: options
            }, createOrUpdateOperationSpec$3, callback);
        };
        DiagnosticSettingsOperations.prototype.deleteMethod = function (resourceUri$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceUri: resourceUri$$1,
                name: name$$1,
                options: options
            }, deleteMethodOperationSpec$3, callback);
        };
        DiagnosticSettingsOperations.prototype.list = function (resourceUri$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceUri: resourceUri$$1,
                options: options
            }, listOperationSpec$2, callback);
        };
        return DiagnosticSettingsOperations;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "{resourceUri}/providers/microsoft.insights/diagnosticSettings/{name}",
        urlParameters: [
            resourceUri,
            name
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiagnosticSettingsResource
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var createOrUpdateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "{resourceUri}/providers/microsoft.insights/diagnosticSettings/{name}",
        urlParameters: [
            resourceUri,
            name
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, DiagnosticSettingsResource, { required: true })
        },
        responses: {
            200: {
                bodyMapper: DiagnosticSettingsResource
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var deleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "{resourceUri}/providers/microsoft.insights/diagnosticSettings/{name}",
        urlParameters: [
            resourceUri,
            name
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "{resourceUri}/providers/microsoft.insights/diagnosticSettings",
        urlParameters: [
            resourceUri
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiagnosticSettingsResourceCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        DiagnosticSettingsCategoryResource: DiagnosticSettingsCategoryResource,
        ProxyOnlyResource: ProxyOnlyResource,
        BaseResource: BaseResource,
        ErrorResponse: ErrorResponse,
        DiagnosticSettingsCategoryResourceCollection: DiagnosticSettingsCategoryResourceCollection,
        Resource: Resource,
        AutoscaleSettingResource: AutoscaleSettingResource,
        AutoscaleProfile: AutoscaleProfile,
        ScaleCapacity: ScaleCapacity,
        ScaleRule: ScaleRule,
        MetricTrigger: MetricTrigger,
        ScaleAction: ScaleAction,
        TimeWindow: TimeWindow,
        Recurrence: Recurrence,
        RecurrentSchedule: RecurrentSchedule,
        AutoscaleNotification: AutoscaleNotification,
        EmailNotification: EmailNotification,
        WebhookNotification: WebhookNotification,
        AlertRuleResource: AlertRuleResource,
        RuleCondition: RuleCondition,
        RuleDataSource: RuleDataSource,
        RuleAction: RuleAction,
        LogProfileResource: LogProfileResource,
        RetentionPolicy: RetentionPolicy,
        DiagnosticSettingsResource: DiagnosticSettingsResource,
        MetricSettings: MetricSettings,
        LogSettings: LogSettings,
        ActionGroupResource: ActionGroupResource,
        EmailReceiver: EmailReceiver,
        SmsReceiver: SmsReceiver,
        WebhookReceiver: WebhookReceiver,
        ItsmReceiver: ItsmReceiver,
        AzureAppPushReceiver: AzureAppPushReceiver,
        AutomationRunbookReceiver: AutomationRunbookReceiver,
        VoiceReceiver: VoiceReceiver,
        LogicAppReceiver: LogicAppReceiver,
        AzureFunctionReceiver: AzureFunctionReceiver,
        ActivityLogAlertResource: ActivityLogAlertResource,
        ActivityLogAlertAllOfCondition: ActivityLogAlertAllOfCondition,
        ActivityLogAlertLeafCondition: ActivityLogAlertLeafCondition,
        ActivityLogAlertActionList: ActivityLogAlertActionList,
        ActivityLogAlertActionGroup: ActivityLogAlertActionGroup,
        MetricAlertResource: MetricAlertResource,
        MetricAlertCriteria: MetricAlertCriteria,
        MetricAlertAction: MetricAlertAction,
        MetricAlertSingleResourceMultipleMetricCriteria: MetricAlertSingleResourceMultipleMetricCriteria,
        MetricCriteria: MetricCriteria,
        MultiMetricCriteria: MultiMetricCriteria,
        MetricDimension: MetricDimension,
        MetricAlertMultipleResourceMultipleMetricCriteria: MetricAlertMultipleResourceMultipleMetricCriteria,
        LogSearchRuleResource: LogSearchRuleResource,
        Source: Source,
        Schedule: Schedule,
        Action: Action,
        AlertingAction: AlertingAction,
        AzNsActionGroup: AzNsActionGroup,
        TriggerCondition: TriggerCondition,
        LogMetricTrigger: LogMetricTrigger,
        LogToMetricAction: LogToMetricAction,
        Criteria: Criteria,
        Dimension: Dimension,
        RuleMetricDataSource: RuleMetricDataSource,
        RuleManagementEventDataSource: RuleManagementEventDataSource,
        RuleManagementEventClaimsDataSource: RuleManagementEventClaimsDataSource,
        ThresholdRuleCondition: ThresholdRuleCondition,
        LocationThresholdRuleCondition: LocationThresholdRuleCondition,
        ManagementEventRuleCondition: ManagementEventRuleCondition,
        ManagementEventAggregationCondition: ManagementEventAggregationCondition,
        RuleEmailAction: RuleEmailAction,
        RuleWebhookAction: RuleWebhookAction
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DiagnosticSettingsCategoryOperations. */
    var DiagnosticSettingsCategoryOperations = /** @class */ (function () {
        /**
         * Create a DiagnosticSettingsCategoryOperations.
         * @param {MonitorManagementClientContext} client Reference to the service client.
         */
        function DiagnosticSettingsCategoryOperations(client) {
            this.client = client;
        }
        DiagnosticSettingsCategoryOperations.prototype.get = function (resourceUri$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceUri: resourceUri$$1,
                name: name$$1,
                options: options
            }, getOperationSpec$5, callback);
        };
        DiagnosticSettingsCategoryOperations.prototype.list = function (resourceUri$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceUri: resourceUri$$1,
                options: options
            }, listOperationSpec$3, callback);
        };
        return DiagnosticSettingsCategoryOperations;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var getOperationSpec$5 = {
        httpMethod: "GET",
        path: "{resourceUri}/providers/microsoft.insights/diagnosticSettingsCategories/{name}",
        urlParameters: [
            resourceUri,
            name
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiagnosticSettingsCategoryResource
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "{resourceUri}/providers/microsoft.insights/diagnosticSettingsCategories",
        urlParameters: [
            resourceUri
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiagnosticSettingsCategoryResourceCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        ActionGroupResource: ActionGroupResource,
        Resource: Resource,
        BaseResource: BaseResource,
        EmailReceiver: EmailReceiver,
        SmsReceiver: SmsReceiver,
        WebhookReceiver: WebhookReceiver,
        ItsmReceiver: ItsmReceiver,
        AzureAppPushReceiver: AzureAppPushReceiver,
        AutomationRunbookReceiver: AutomationRunbookReceiver,
        VoiceReceiver: VoiceReceiver,
        LogicAppReceiver: LogicAppReceiver,
        AzureFunctionReceiver: AzureFunctionReceiver,
        ErrorResponse: ErrorResponse,
        ActionGroupPatchBody: ActionGroupPatchBody,
        ActionGroupList: ActionGroupList,
        EnableRequest: EnableRequest,
        AutoscaleSettingResource: AutoscaleSettingResource,
        AutoscaleProfile: AutoscaleProfile,
        ScaleCapacity: ScaleCapacity,
        ScaleRule: ScaleRule,
        MetricTrigger: MetricTrigger,
        ScaleAction: ScaleAction,
        TimeWindow: TimeWindow,
        Recurrence: Recurrence,
        RecurrentSchedule: RecurrentSchedule,
        AutoscaleNotification: AutoscaleNotification,
        EmailNotification: EmailNotification,
        WebhookNotification: WebhookNotification,
        AlertRuleResource: AlertRuleResource,
        RuleCondition: RuleCondition,
        RuleDataSource: RuleDataSource,
        RuleAction: RuleAction,
        LogProfileResource: LogProfileResource,
        RetentionPolicy: RetentionPolicy,
        ProxyOnlyResource: ProxyOnlyResource,
        DiagnosticSettingsResource: DiagnosticSettingsResource,
        MetricSettings: MetricSettings,
        LogSettings: LogSettings,
        DiagnosticSettingsCategoryResource: DiagnosticSettingsCategoryResource,
        ActivityLogAlertResource: ActivityLogAlertResource,
        ActivityLogAlertAllOfCondition: ActivityLogAlertAllOfCondition,
        ActivityLogAlertLeafCondition: ActivityLogAlertLeafCondition,
        ActivityLogAlertActionList: ActivityLogAlertActionList,
        ActivityLogAlertActionGroup: ActivityLogAlertActionGroup,
        MetricAlertResource: MetricAlertResource,
        MetricAlertCriteria: MetricAlertCriteria,
        MetricAlertAction: MetricAlertAction,
        MetricAlertSingleResourceMultipleMetricCriteria: MetricAlertSingleResourceMultipleMetricCriteria,
        MetricCriteria: MetricCriteria,
        MultiMetricCriteria: MultiMetricCriteria,
        MetricDimension: MetricDimension,
        MetricAlertMultipleResourceMultipleMetricCriteria: MetricAlertMultipleResourceMultipleMetricCriteria,
        LogSearchRuleResource: LogSearchRuleResource,
        Source: Source,
        Schedule: Schedule,
        Action: Action,
        AlertingAction: AlertingAction,
        AzNsActionGroup: AzNsActionGroup,
        TriggerCondition: TriggerCondition,
        LogMetricTrigger: LogMetricTrigger,
        LogToMetricAction: LogToMetricAction,
        Criteria: Criteria,
        Dimension: Dimension,
        RuleMetricDataSource: RuleMetricDataSource,
        RuleManagementEventDataSource: RuleManagementEventDataSource,
        RuleManagementEventClaimsDataSource: RuleManagementEventClaimsDataSource,
        ThresholdRuleCondition: ThresholdRuleCondition,
        LocationThresholdRuleCondition: LocationThresholdRuleCondition,
        ManagementEventRuleCondition: ManagementEventRuleCondition,
        ManagementEventAggregationCondition: ManagementEventAggregationCondition,
        RuleEmailAction: RuleEmailAction,
        RuleWebhookAction: RuleWebhookAction
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ActionGroups. */
    var ActionGroups = /** @class */ (function () {
        /**
         * Create a ActionGroups.
         * @param {MonitorManagementClientContext} client Reference to the service client.
         */
        function ActionGroups(client) {
            this.client = client;
        }
        ActionGroups.prototype.createOrUpdate = function (resourceGroupName$$1, actionGroupName$$1, actionGroup, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                actionGroupName: actionGroupName$$1,
                actionGroup: actionGroup,
                options: options
            }, createOrUpdateOperationSpec$4, callback);
        };
        ActionGroups.prototype.get = function (resourceGroupName$$1, actionGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                actionGroupName: actionGroupName$$1,
                options: options
            }, getOperationSpec$6, callback);
        };
        ActionGroups.prototype.deleteMethod = function (resourceGroupName$$1, actionGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                actionGroupName: actionGroupName$$1,
                options: options
            }, deleteMethodOperationSpec$4, callback);
        };
        ActionGroups.prototype.update = function (resourceGroupName$$1, actionGroupName$$1, actionGroupPatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                actionGroupName: actionGroupName$$1,
                actionGroupPatch: actionGroupPatch,
                options: options
            }, updateOperationSpec$3, callback);
        };
        ActionGroups.prototype.listBySubscriptionId = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionIdOperationSpec, callback);
        };
        ActionGroups.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec$2, callback);
        };
        ActionGroups.prototype.enableReceiver = function (resourceGroupName$$1, actionGroupName$$1, receiverName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                actionGroupName: actionGroupName$$1,
                receiverName: receiverName,
                options: options
            }, enableReceiverOperationSpec, callback);
        };
        return ActionGroups;
    }());
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers$7);
    var createOrUpdateOperationSpec$4 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups/{actionGroupName}",
        urlParameters: [
            resourceGroupName,
            actionGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "actionGroup",
            mapper: __assign({}, ActionGroupResource, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ActionGroupResource
            },
            201: {
                bodyMapper: ActionGroupResource
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };
    var getOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups/{actionGroupName}",
        urlParameters: [
            resourceGroupName,
            actionGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ActionGroupResource
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };
    var deleteMethodOperationSpec$4 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups/{actionGroupName}",
        urlParameters: [
            resourceGroupName,
            actionGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };
    var updateOperationSpec$3 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups/{actionGroupName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            actionGroupName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "actionGroupPatch",
            mapper: __assign({}, ActionGroupPatchBody, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ActionGroupResource
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };
    var listBySubscriptionIdOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/microsoft.insights/actionGroups",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ActionGroupList
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };
    var listByResourceGroupOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ActionGroupList
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };
    var enableReceiverOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups/{actionGroupName}/subscribe",
        urlParameters: [
            resourceGroupName,
            actionGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                receiverName: "receiverName"
            },
            mapper: __assign({}, EnableRequest, { required: true })
        },
        responses: {
            200: {},
            409: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$8 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        ActivityLogAlertResource: ActivityLogAlertResource,
        Resource: Resource,
        BaseResource: BaseResource,
        ActivityLogAlertAllOfCondition: ActivityLogAlertAllOfCondition,
        ActivityLogAlertLeafCondition: ActivityLogAlertLeafCondition,
        ActivityLogAlertActionList: ActivityLogAlertActionList,
        ActivityLogAlertActionGroup: ActivityLogAlertActionGroup,
        ErrorResponse: ErrorResponse,
        ActivityLogAlertPatchBody: ActivityLogAlertPatchBody,
        ActivityLogAlertList: ActivityLogAlertList,
        AutoscaleSettingResource: AutoscaleSettingResource,
        AutoscaleProfile: AutoscaleProfile,
        ScaleCapacity: ScaleCapacity,
        ScaleRule: ScaleRule,
        MetricTrigger: MetricTrigger,
        ScaleAction: ScaleAction,
        TimeWindow: TimeWindow,
        Recurrence: Recurrence,
        RecurrentSchedule: RecurrentSchedule,
        AutoscaleNotification: AutoscaleNotification,
        EmailNotification: EmailNotification,
        WebhookNotification: WebhookNotification,
        AlertRuleResource: AlertRuleResource,
        RuleCondition: RuleCondition,
        RuleDataSource: RuleDataSource,
        RuleAction: RuleAction,
        LogProfileResource: LogProfileResource,
        RetentionPolicy: RetentionPolicy,
        ProxyOnlyResource: ProxyOnlyResource,
        DiagnosticSettingsResource: DiagnosticSettingsResource,
        MetricSettings: MetricSettings,
        LogSettings: LogSettings,
        DiagnosticSettingsCategoryResource: DiagnosticSettingsCategoryResource,
        ActionGroupResource: ActionGroupResource,
        EmailReceiver: EmailReceiver,
        SmsReceiver: SmsReceiver,
        WebhookReceiver: WebhookReceiver,
        ItsmReceiver: ItsmReceiver,
        AzureAppPushReceiver: AzureAppPushReceiver,
        AutomationRunbookReceiver: AutomationRunbookReceiver,
        VoiceReceiver: VoiceReceiver,
        LogicAppReceiver: LogicAppReceiver,
        AzureFunctionReceiver: AzureFunctionReceiver,
        MetricAlertResource: MetricAlertResource,
        MetricAlertCriteria: MetricAlertCriteria,
        MetricAlertAction: MetricAlertAction,
        MetricAlertSingleResourceMultipleMetricCriteria: MetricAlertSingleResourceMultipleMetricCriteria,
        MetricCriteria: MetricCriteria,
        MultiMetricCriteria: MultiMetricCriteria,
        MetricDimension: MetricDimension,
        MetricAlertMultipleResourceMultipleMetricCriteria: MetricAlertMultipleResourceMultipleMetricCriteria,
        LogSearchRuleResource: LogSearchRuleResource,
        Source: Source,
        Schedule: Schedule,
        Action: Action,
        AlertingAction: AlertingAction,
        AzNsActionGroup: AzNsActionGroup,
        TriggerCondition: TriggerCondition,
        LogMetricTrigger: LogMetricTrigger,
        LogToMetricAction: LogToMetricAction,
        Criteria: Criteria,
        Dimension: Dimension,
        RuleMetricDataSource: RuleMetricDataSource,
        RuleManagementEventDataSource: RuleManagementEventDataSource,
        RuleManagementEventClaimsDataSource: RuleManagementEventClaimsDataSource,
        ThresholdRuleCondition: ThresholdRuleCondition,
        LocationThresholdRuleCondition: LocationThresholdRuleCondition,
        ManagementEventRuleCondition: ManagementEventRuleCondition,
        ManagementEventAggregationCondition: ManagementEventAggregationCondition,
        RuleEmailAction: RuleEmailAction,
        RuleWebhookAction: RuleWebhookAction
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ActivityLogAlerts. */
    var ActivityLogAlerts = /** @class */ (function () {
        /**
         * Create a ActivityLogAlerts.
         * @param {MonitorManagementClientContext} client Reference to the service client.
         */
        function ActivityLogAlerts(client) {
            this.client = client;
        }
        ActivityLogAlerts.prototype.createOrUpdate = function (resourceGroupName$$1, activityLogAlertName$$1, activityLogAlert, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                activityLogAlertName: activityLogAlertName$$1,
                activityLogAlert: activityLogAlert,
                options: options
            }, createOrUpdateOperationSpec$5, callback);
        };
        ActivityLogAlerts.prototype.get = function (resourceGroupName$$1, activityLogAlertName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                activityLogAlertName: activityLogAlertName$$1,
                options: options
            }, getOperationSpec$7, callback);
        };
        ActivityLogAlerts.prototype.deleteMethod = function (resourceGroupName$$1, activityLogAlertName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                activityLogAlertName: activityLogAlertName$$1,
                options: options
            }, deleteMethodOperationSpec$5, callback);
        };
        ActivityLogAlerts.prototype.update = function (resourceGroupName$$1, activityLogAlertName$$1, activityLogAlertPatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                activityLogAlertName: activityLogAlertName$$1,
                activityLogAlertPatch: activityLogAlertPatch,
                options: options
            }, updateOperationSpec$4, callback);
        };
        ActivityLogAlerts.prototype.listBySubscriptionId = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionIdOperationSpec$1, callback);
        };
        ActivityLogAlerts.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec$3, callback);
        };
        return ActivityLogAlerts;
    }());
    // Operation Specifications
    var serializer$8 = new msRest.Serializer(Mappers$8);
    var createOrUpdateOperationSpec$5 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/activityLogAlerts/{activityLogAlertName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            activityLogAlertName
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "activityLogAlert",
            mapper: __assign({}, ActivityLogAlertResource, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ActivityLogAlertResource
            },
            201: {
                bodyMapper: ActivityLogAlertResource
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$8
    };
    var getOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/activityLogAlerts/{activityLogAlertName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            activityLogAlertName
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ActivityLogAlertResource
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$8
    };
    var deleteMethodOperationSpec$5 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/activityLogAlerts/{activityLogAlertName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            activityLogAlertName
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$8
    };
    var updateOperationSpec$4 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/activityLogAlerts/{activityLogAlertName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            activityLogAlertName
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "activityLogAlertPatch",
            mapper: __assign({}, ActivityLogAlertPatchBody, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ActivityLogAlertResource
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$8
    };
    var listBySubscriptionIdOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/microsoft.insights/activityLogAlerts",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ActivityLogAlertList
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$8
    };
    var listByResourceGroupOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/activityLogAlerts",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ActivityLogAlertList
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$8
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$9 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        EventDataCollection: EventDataCollection,
        EventData: EventData,
        SenderAuthorization: SenderAuthorization,
        LocalizableString: LocalizableString,
        HttpRequestInfo: HttpRequestInfo,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ActivityLogs. */
    var ActivityLogs = /** @class */ (function () {
        /**
         * Create a ActivityLogs.
         * @param {MonitorManagementClientContext} client Reference to the service client.
         */
        function ActivityLogs(client) {
            this.client = client;
        }
        ActivityLogs.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$4, callback);
        };
        ActivityLogs.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return ActivityLogs;
    }());
    // Operation Specifications
    var serializer$9 = new msRest.Serializer(Mappers$9);
    var listOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/microsoft.insights/eventtypes/management/values",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0,
            filter,
            select
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EventDataCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$9
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EventDataCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$9
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$a = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        EventCategoryCollection: EventCategoryCollection,
        LocalizableString: LocalizableString,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a EventCategories. */
    var EventCategories = /** @class */ (function () {
        /**
         * Create a EventCategories.
         * @param {MonitorManagementClientContext} client Reference to the service client.
         */
        function EventCategories(client) {
            this.client = client;
        }
        EventCategories.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$5, callback);
        };
        return EventCategories;
    }());
    // Operation Specifications
    var serializer$a = new msRest.Serializer(Mappers$a);
    var listOperationSpec$5 = {
        httpMethod: "GET",
        path: "providers/microsoft.insights/eventcategories",
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EventCategoryCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$a
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$b = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        EventDataCollection: EventDataCollection,
        EventData: EventData,
        SenderAuthorization: SenderAuthorization,
        LocalizableString: LocalizableString,
        HttpRequestInfo: HttpRequestInfo,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a TenantActivityLogs. */
    var TenantActivityLogs = /** @class */ (function () {
        /**
         * Create a TenantActivityLogs.
         * @param {MonitorManagementClientContext} client Reference to the service client.
         */
        function TenantActivityLogs(client) {
            this.client = client;
        }
        TenantActivityLogs.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$6, callback);
        };
        TenantActivityLogs.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return TenantActivityLogs;
    }());
    // Operation Specifications
    var serializer$b = new msRest.Serializer(Mappers$b);
    var listOperationSpec$6 = {
        httpMethod: "GET",
        path: "providers/microsoft.insights/eventtypes/management/values",
        queryParameters: [
            apiVersion0,
            filter,
            select
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EventDataCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$b
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EventDataCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$b
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$c = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        MetricDefinitionCollection: MetricDefinitionCollection,
        MetricDefinition: MetricDefinition,
        LocalizableString: LocalizableString,
        MetricAvailability: MetricAvailability,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a MetricDefinitions. */
    var MetricDefinitions = /** @class */ (function () {
        /**
         * Create a MetricDefinitions.
         * @param {MonitorManagementClientContext} client Reference to the service client.
         */
        function MetricDefinitions(client) {
            this.client = client;
        }
        MetricDefinitions.prototype.list = function (resourceUri$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceUri: resourceUri$$1,
                options: options
            }, listOperationSpec$7, callback);
        };
        return MetricDefinitions;
    }());
    // Operation Specifications
    var serializer$c = new msRest.Serializer(Mappers$c);
    var listOperationSpec$7 = {
        httpMethod: "GET",
        path: "{resourceUri}/providers/microsoft.insights/metricDefinitions",
        urlParameters: [
            resourceUri
        ],
        queryParameters: [
            apiVersion5,
            metricnamespace
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricDefinitionCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$c
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$d = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        Response: Response,
        Metric: Metric,
        LocalizableString: LocalizableString,
        TimeSeriesElement: TimeSeriesElement,
        MetadataValue: MetadataValue,
        MetricValue: MetricValue,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Metrics. */
    var Metrics = /** @class */ (function () {
        /**
         * Create a Metrics.
         * @param {MonitorManagementClientContext} client Reference to the service client.
         */
        function Metrics(client) {
            this.client = client;
        }
        Metrics.prototype.list = function (resourceUri$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceUri: resourceUri$$1,
                options: options
            }, listOperationSpec$8, callback);
        };
        return Metrics;
    }());
    // Operation Specifications
    var serializer$d = new msRest.Serializer(Mappers$d);
    var listOperationSpec$8 = {
        httpMethod: "GET",
        path: "{resourceUri}/providers/microsoft.insights/metrics",
        urlParameters: [
            resourceUri
        ],
        queryParameters: [
            timespan,
            interval,
            metricnames,
            aggregation,
            top,
            orderby,
            filter,
            resultType,
            apiVersion5,
            metricnamespace
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Response
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$d
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$e = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        BaselineResponse: BaselineResponse,
        LocalizableString: LocalizableString,
        Baseline: Baseline,
        BaselineMetadataValue: BaselineMetadataValue,
        ErrorResponse: ErrorResponse,
        TimeSeriesInformation: TimeSeriesInformation,
        CalculateBaselineResponse: CalculateBaselineResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a MetricBaseline. */
    var MetricBaseline = /** @class */ (function () {
        /**
         * Create a MetricBaseline.
         * @param {MonitorManagementClientContext} client Reference to the service client.
         */
        function MetricBaseline(client) {
            this.client = client;
        }
        MetricBaseline.prototype.get = function (resourceUri$$1, metricName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceUri: resourceUri$$1,
                metricName: metricName$$1,
                options: options
            }, getOperationSpec$8, callback);
        };
        MetricBaseline.prototype.calculateBaseline = function (resourceUri$$1, timeSeriesInformation, options, callback) {
            return this.client.sendOperationRequest({
                resourceUri: resourceUri$$1,
                timeSeriesInformation: timeSeriesInformation,
                options: options
            }, calculateBaselineOperationSpec, callback);
        };
        return MetricBaseline;
    }());
    // Operation Specifications
    var serializer$e = new msRest.Serializer(Mappers$e);
    var getOperationSpec$8 = {
        httpMethod: "GET",
        path: "{resourceUri}/providers/microsoft.insights/baseline/{metricName}",
        urlParameters: [
            resourceUri,
            metricName
        ],
        queryParameters: [
            timespan,
            interval,
            aggregation,
            sensitivities,
            resultType,
            apiVersion6
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BaselineResponse
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$e
    };
    var calculateBaselineOperationSpec = {
        httpMethod: "POST",
        path: "{resourceUri}/providers/microsoft.insights/calculatebaseline",
        urlParameters: [
            resourceUri
        ],
        queryParameters: [
            apiVersion6
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "timeSeriesInformation",
            mapper: __assign({}, TimeSeriesInformation, { required: true })
        },
        responses: {
            200: {
                bodyMapper: CalculateBaselineResponse
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$e
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$f = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        MetricAlertResourceCollection: MetricAlertResourceCollection,
        MetricAlertResource: MetricAlertResource,
        Resource: Resource,
        BaseResource: BaseResource,
        MetricAlertCriteria: MetricAlertCriteria,
        MetricAlertAction: MetricAlertAction,
        ErrorResponse: ErrorResponse,
        MetricAlertResourcePatch: MetricAlertResourcePatch,
        CloudError: CloudError,
        AutoscaleSettingResource: AutoscaleSettingResource,
        AutoscaleProfile: AutoscaleProfile,
        ScaleCapacity: ScaleCapacity,
        ScaleRule: ScaleRule,
        MetricTrigger: MetricTrigger,
        ScaleAction: ScaleAction,
        TimeWindow: TimeWindow,
        Recurrence: Recurrence,
        RecurrentSchedule: RecurrentSchedule,
        AutoscaleNotification: AutoscaleNotification,
        EmailNotification: EmailNotification,
        WebhookNotification: WebhookNotification,
        AlertRuleResource: AlertRuleResource,
        RuleCondition: RuleCondition,
        RuleDataSource: RuleDataSource,
        RuleAction: RuleAction,
        LogProfileResource: LogProfileResource,
        RetentionPolicy: RetentionPolicy,
        ProxyOnlyResource: ProxyOnlyResource,
        DiagnosticSettingsResource: DiagnosticSettingsResource,
        MetricSettings: MetricSettings,
        LogSettings: LogSettings,
        DiagnosticSettingsCategoryResource: DiagnosticSettingsCategoryResource,
        ActionGroupResource: ActionGroupResource,
        EmailReceiver: EmailReceiver,
        SmsReceiver: SmsReceiver,
        WebhookReceiver: WebhookReceiver,
        ItsmReceiver: ItsmReceiver,
        AzureAppPushReceiver: AzureAppPushReceiver,
        AutomationRunbookReceiver: AutomationRunbookReceiver,
        VoiceReceiver: VoiceReceiver,
        LogicAppReceiver: LogicAppReceiver,
        AzureFunctionReceiver: AzureFunctionReceiver,
        ActivityLogAlertResource: ActivityLogAlertResource,
        ActivityLogAlertAllOfCondition: ActivityLogAlertAllOfCondition,
        ActivityLogAlertLeafCondition: ActivityLogAlertLeafCondition,
        ActivityLogAlertActionList: ActivityLogAlertActionList,
        ActivityLogAlertActionGroup: ActivityLogAlertActionGroup,
        MetricAlertSingleResourceMultipleMetricCriteria: MetricAlertSingleResourceMultipleMetricCriteria,
        MetricCriteria: MetricCriteria,
        MultiMetricCriteria: MultiMetricCriteria,
        MetricDimension: MetricDimension,
        MetricAlertMultipleResourceMultipleMetricCriteria: MetricAlertMultipleResourceMultipleMetricCriteria,
        LogSearchRuleResource: LogSearchRuleResource,
        Source: Source,
        Schedule: Schedule,
        Action: Action,
        AlertingAction: AlertingAction,
        AzNsActionGroup: AzNsActionGroup,
        TriggerCondition: TriggerCondition,
        LogMetricTrigger: LogMetricTrigger,
        LogToMetricAction: LogToMetricAction,
        Criteria: Criteria,
        Dimension: Dimension,
        RuleMetricDataSource: RuleMetricDataSource,
        RuleManagementEventDataSource: RuleManagementEventDataSource,
        RuleManagementEventClaimsDataSource: RuleManagementEventClaimsDataSource,
        ThresholdRuleCondition: ThresholdRuleCondition,
        LocationThresholdRuleCondition: LocationThresholdRuleCondition,
        ManagementEventRuleCondition: ManagementEventRuleCondition,
        ManagementEventAggregationCondition: ManagementEventAggregationCondition,
        RuleEmailAction: RuleEmailAction,
        RuleWebhookAction: RuleWebhookAction
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a MetricAlerts. */
    var MetricAlerts = /** @class */ (function () {
        /**
         * Create a MetricAlerts.
         * @param {MonitorManagementClientContext} client Reference to the service client.
         */
        function MetricAlerts(client) {
            this.client = client;
        }
        MetricAlerts.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec$2, callback);
        };
        MetricAlerts.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec$4, callback);
        };
        MetricAlerts.prototype.get = function (resourceGroupName$$1, ruleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                ruleName: ruleName$$1,
                options: options
            }, getOperationSpec$9, callback);
        };
        MetricAlerts.prototype.createOrUpdate = function (resourceGroupName$$1, ruleName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                ruleName: ruleName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$6, callback);
        };
        MetricAlerts.prototype.update = function (resourceGroupName$$1, ruleName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                ruleName: ruleName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec$5, callback);
        };
        MetricAlerts.prototype.deleteMethod = function (resourceGroupName$$1, ruleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                ruleName: ruleName$$1,
                options: options
            }, deleteMethodOperationSpec$6, callback);
        };
        return MetricAlerts;
    }());
    // Operation Specifications
    var serializer$f = new msRest.Serializer(Mappers$f);
    var listBySubscriptionOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Insights/metricAlerts",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricAlertResourceCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$f
    };
    var listByResourceGroupOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricAlertResourceCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$f
    };
    var getOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts/{ruleName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            ruleName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricAlertResource
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$f
    };
    var createOrUpdateOperationSpec$6 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts/{ruleName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            ruleName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, MetricAlertResource, { required: true })
        },
        responses: {
            200: {
                bodyMapper: MetricAlertResource
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$f
    };
    var updateOperationSpec$5 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts/{ruleName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            ruleName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, MetricAlertResourcePatch, { required: true })
        },
        responses: {
            200: {
                bodyMapper: MetricAlertResource
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$f
    };
    var deleteMethodOperationSpec$6 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts/{ruleName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            ruleName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$g = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        MetricAlertStatusCollection: MetricAlertStatusCollection,
        MetricAlertStatus: MetricAlertStatus,
        MetricAlertStatusProperties: MetricAlertStatusProperties,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a MetricAlertsStatus. */
    var MetricAlertsStatus = /** @class */ (function () {
        /**
         * Create a MetricAlertsStatus.
         * @param {MonitorManagementClientContext} client Reference to the service client.
         */
        function MetricAlertsStatus(client) {
            this.client = client;
        }
        MetricAlertsStatus.prototype.list = function (resourceGroupName$$1, ruleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                ruleName: ruleName$$1,
                options: options
            }, listOperationSpec$9, callback);
        };
        MetricAlertsStatus.prototype.listByName = function (resourceGroupName$$1, ruleName$$1, statusName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                ruleName: ruleName$$1,
                statusName: statusName$$1,
                options: options
            }, listByNameOperationSpec, callback);
        };
        return MetricAlertsStatus;
    }());
    // Operation Specifications
    var serializer$g = new msRest.Serializer(Mappers$g);
    var listOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts/{ruleName}/status",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            ruleName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricAlertStatusCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$g
    };
    var listByNameOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts/{ruleName}/status/{statusName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            ruleName,
            statusName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricAlertStatusCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$g
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$h = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        LogSearchRuleResource: LogSearchRuleResource,
        Resource: Resource,
        BaseResource: BaseResource,
        Source: Source,
        Schedule: Schedule,
        Action: Action,
        ErrorResponse: ErrorResponse,
        LogSearchRuleResourcePatch: LogSearchRuleResourcePatch,
        LogSearchRuleResourceCollection: LogSearchRuleResourceCollection,
        AutoscaleSettingResource: AutoscaleSettingResource,
        AutoscaleProfile: AutoscaleProfile,
        ScaleCapacity: ScaleCapacity,
        ScaleRule: ScaleRule,
        MetricTrigger: MetricTrigger,
        ScaleAction: ScaleAction,
        TimeWindow: TimeWindow,
        Recurrence: Recurrence,
        RecurrentSchedule: RecurrentSchedule,
        AutoscaleNotification: AutoscaleNotification,
        EmailNotification: EmailNotification,
        WebhookNotification: WebhookNotification,
        AlertRuleResource: AlertRuleResource,
        RuleCondition: RuleCondition,
        RuleDataSource: RuleDataSource,
        RuleAction: RuleAction,
        LogProfileResource: LogProfileResource,
        RetentionPolicy: RetentionPolicy,
        ProxyOnlyResource: ProxyOnlyResource,
        DiagnosticSettingsResource: DiagnosticSettingsResource,
        MetricSettings: MetricSettings,
        LogSettings: LogSettings,
        DiagnosticSettingsCategoryResource: DiagnosticSettingsCategoryResource,
        ActionGroupResource: ActionGroupResource,
        EmailReceiver: EmailReceiver,
        SmsReceiver: SmsReceiver,
        WebhookReceiver: WebhookReceiver,
        ItsmReceiver: ItsmReceiver,
        AzureAppPushReceiver: AzureAppPushReceiver,
        AutomationRunbookReceiver: AutomationRunbookReceiver,
        VoiceReceiver: VoiceReceiver,
        LogicAppReceiver: LogicAppReceiver,
        AzureFunctionReceiver: AzureFunctionReceiver,
        ActivityLogAlertResource: ActivityLogAlertResource,
        ActivityLogAlertAllOfCondition: ActivityLogAlertAllOfCondition,
        ActivityLogAlertLeafCondition: ActivityLogAlertLeafCondition,
        ActivityLogAlertActionList: ActivityLogAlertActionList,
        ActivityLogAlertActionGroup: ActivityLogAlertActionGroup,
        MetricAlertResource: MetricAlertResource,
        MetricAlertCriteria: MetricAlertCriteria,
        MetricAlertAction: MetricAlertAction,
        MetricAlertSingleResourceMultipleMetricCriteria: MetricAlertSingleResourceMultipleMetricCriteria,
        MetricCriteria: MetricCriteria,
        MultiMetricCriteria: MultiMetricCriteria,
        MetricDimension: MetricDimension,
        MetricAlertMultipleResourceMultipleMetricCriteria: MetricAlertMultipleResourceMultipleMetricCriteria,
        AlertingAction: AlertingAction,
        AzNsActionGroup: AzNsActionGroup,
        TriggerCondition: TriggerCondition,
        LogMetricTrigger: LogMetricTrigger,
        LogToMetricAction: LogToMetricAction,
        Criteria: Criteria,
        Dimension: Dimension,
        RuleMetricDataSource: RuleMetricDataSource,
        RuleManagementEventDataSource: RuleManagementEventDataSource,
        RuleManagementEventClaimsDataSource: RuleManagementEventClaimsDataSource,
        ThresholdRuleCondition: ThresholdRuleCondition,
        LocationThresholdRuleCondition: LocationThresholdRuleCondition,
        ManagementEventRuleCondition: ManagementEventRuleCondition,
        ManagementEventAggregationCondition: ManagementEventAggregationCondition,
        RuleEmailAction: RuleEmailAction,
        RuleWebhookAction: RuleWebhookAction
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ScheduledQueryRules. */
    var ScheduledQueryRules = /** @class */ (function () {
        /**
         * Create a ScheduledQueryRules.
         * @param {MonitorManagementClientContext} client Reference to the service client.
         */
        function ScheduledQueryRules(client) {
            this.client = client;
        }
        ScheduledQueryRules.prototype.createOrUpdate = function (resourceGroupName$$1, ruleName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                ruleName: ruleName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$7, callback);
        };
        ScheduledQueryRules.prototype.get = function (resourceGroupName$$1, ruleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                ruleName: ruleName$$1,
                options: options
            }, getOperationSpec$a, callback);
        };
        ScheduledQueryRules.prototype.update = function (resourceGroupName$$1, ruleName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                ruleName: ruleName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec$6, callback);
        };
        ScheduledQueryRules.prototype.deleteMethod = function (resourceGroupName$$1, ruleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                ruleName: ruleName$$1,
                options: options
            }, deleteMethodOperationSpec$7, callback);
        };
        ScheduledQueryRules.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec$3, callback);
        };
        ScheduledQueryRules.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec$5, callback);
        };
        return ScheduledQueryRules;
    }());
    // Operation Specifications
    var serializer$h = new msRest.Serializer(Mappers$h);
    var createOrUpdateOperationSpec$7 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/scheduledQueryRules/{ruleName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            ruleName
        ],
        queryParameters: [
            apiVersion7
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, LogSearchRuleResource, { required: true })
        },
        responses: {
            200: {
                bodyMapper: LogSearchRuleResource
            },
            201: {
                bodyMapper: LogSearchRuleResource
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$h
    };
    var getOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/scheduledQueryRules/{ruleName}",
        urlParameters: [
            resourceGroupName,
            ruleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion7
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LogSearchRuleResource
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$h
    };
    var updateOperationSpec$6 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/scheduledQueryRules/{ruleName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            ruleName
        ],
        queryParameters: [
            apiVersion7
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, LogSearchRuleResourcePatch, { required: true })
        },
        responses: {
            200: {
                bodyMapper: LogSearchRuleResource
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$h
    };
    var deleteMethodOperationSpec$7 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/scheduledQueryRules/{ruleName}",
        urlParameters: [
            resourceGroupName,
            ruleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion7
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$h
    };
    var listBySubscriptionOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/microsoft.insights/scheduledQueryRules",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion7,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LogSearchRuleResourceCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$h
    };
    var listByResourceGroupOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/scheduledQueryRules",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion7,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LogSearchRuleResourceCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$h
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$i = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        MetricNamespaceCollection: MetricNamespaceCollection,
        MetricNamespace: MetricNamespace,
        MetricNamespaceName: MetricNamespaceName,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a MetricNamespaces. */
    var MetricNamespaces = /** @class */ (function () {
        /**
         * Create a MetricNamespaces.
         * @param {MonitorManagementClientContext} client Reference to the service client.
         */
        function MetricNamespaces(client) {
            this.client = client;
        }
        MetricNamespaces.prototype.list = function (resourceUri$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceUri: resourceUri$$1,
                options: options
            }, listOperationSpec$a, callback);
        };
        return MetricNamespaces;
    }());
    // Operation Specifications
    var serializer$i = new msRest.Serializer(Mappers$i);
    var listOperationSpec$a = {
        httpMethod: "GET",
        path: "{resourceUri}/providers/microsoft.insights/metricNamespaces",
        urlParameters: [
            resourceUri
        ],
        queryParameters: [
            apiVersion8,
            startTime
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricNamespaceCollection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$i
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-monitor";
    var packageVersion = "1.0.0-preview";
    var MonitorManagementClientContext = /** @class */ (function (_super) {
        __extends(MonitorManagementClientContext, _super);
        /**
         * Initializes a new instance of the MonitorManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The Azure subscription Id.
         * @param [options] The parameter options
         */
        function MonitorManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return MonitorManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var MonitorManagementClient = /** @class */ (function (_super) {
        __extends(MonitorManagementClient, _super);
        /**
         * Initializes a new instance of the MonitorManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The Azure subscription Id.
         * @param [options] The parameter options
         */
        function MonitorManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.autoscaleSettings = new AutoscaleSettings(_this);
            _this.operations = new Operations(_this);
            _this.alertRuleIncidents = new AlertRuleIncidents(_this);
            _this.alertRules = new AlertRules(_this);
            _this.logProfiles = new LogProfiles(_this);
            _this.diagnosticSettings = new DiagnosticSettingsOperations(_this);
            _this.diagnosticSettingsCategory = new DiagnosticSettingsCategoryOperations(_this);
            _this.actionGroups = new ActionGroups(_this);
            _this.activityLogAlerts = new ActivityLogAlerts(_this);
            _this.activityLogs = new ActivityLogs(_this);
            _this.eventCategories = new EventCategories(_this);
            _this.tenantActivityLogs = new TenantActivityLogs(_this);
            _this.metricDefinitions = new MetricDefinitions(_this);
            _this.metrics = new Metrics(_this);
            _this.metricBaseline = new MetricBaseline(_this);
            _this.metricAlerts = new MetricAlerts(_this);
            _this.metricAlertsStatus = new MetricAlertsStatus(_this);
            _this.scheduledQueryRules = new ScheduledQueryRules(_this);
            _this.metricNamespaces = new MetricNamespaces(_this);
            return _this;
        }
        return MonitorManagementClient;
    }(MonitorManagementClientContext));

    exports.MonitorManagementClient = MonitorManagementClient;
    exports.MonitorManagementClientContext = MonitorManagementClientContext;
    exports.MonitorManagementModels = index;
    exports.MonitorManagementMappers = mappers;
    exports.AutoscaleSettings = AutoscaleSettings;
    exports.Operations = Operations;
    exports.AlertRuleIncidents = AlertRuleIncidents;
    exports.AlertRules = AlertRules;
    exports.LogProfiles = LogProfiles;
    exports.DiagnosticSettingsOperations = DiagnosticSettingsOperations;
    exports.DiagnosticSettingsCategoryOperations = DiagnosticSettingsCategoryOperations;
    exports.ActionGroups = ActionGroups;
    exports.ActivityLogAlerts = ActivityLogAlerts;
    exports.ActivityLogs = ActivityLogs;
    exports.EventCategories = EventCategories;
    exports.TenantActivityLogs = TenantActivityLogs;
    exports.MetricDefinitions = MetricDefinitions;
    exports.Metrics = Metrics;
    exports.MetricBaseline = MetricBaseline;
    exports.MetricAlerts = MetricAlerts;
    exports.MetricAlertsStatus = MetricAlertsStatus;
    exports.ScheduledQueryRules = ScheduledQueryRules;
    exports.MetricNamespaces = MetricNamespaces;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-monitor.js.map
