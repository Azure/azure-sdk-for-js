/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/logProfilesMappers";
import * as Parameters from "../models/parameters";
import { MonitorManagementClientContext } from "../monitorManagementClientContext";

/** Class representing a LogProfiles. */
export class LogProfiles {
  private readonly client: MonitorManagementClientContext;

  /**
   * Create a LogProfiles.
   * @param {MonitorManagementClientContext} client Reference to the service client.
   */
  constructor(client: MonitorManagementClientContext) {
    this.client = client;
  }

  /**
   * Deletes the log profile.
   * @param logProfileName The name of the log profile.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(logProfileName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param logProfileName The name of the log profile.
   * @param callback The callback
   */
  deleteMethod(logProfileName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param logProfileName The name of the log profile.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(logProfileName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(logProfileName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        logProfileName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Gets the log profile.
   * @param logProfileName The name of the log profile.
   * @param [options] The optional parameters
   * @returns Promise<Models.LogProfilesGetResponse>
   */
  get(logProfileName: string, options?: msRest.RequestOptionsBase): Promise<Models.LogProfilesGetResponse>;
  /**
   * @param logProfileName The name of the log profile.
   * @param callback The callback
   */
  get(logProfileName: string, callback: msRest.ServiceCallback<Models.LogProfileResource>): void;
  /**
   * @param logProfileName The name of the log profile.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(logProfileName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LogProfileResource>): void;
  get(logProfileName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LogProfileResource>, callback?: msRest.ServiceCallback<Models.LogProfileResource>): Promise<Models.LogProfilesGetResponse> {
    return this.client.sendOperationRequest(
      {
        logProfileName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.LogProfilesGetResponse>;
  }

  /**
   * Create or update a log profile in Azure Monitoring REST API.
   * @param logProfileName The name of the log profile.
   * @param parameters Parameters supplied to the operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.LogProfilesCreateOrUpdateResponse>
   */
  createOrUpdate(logProfileName: string, parameters: Models.LogProfileResource, options?: msRest.RequestOptionsBase): Promise<Models.LogProfilesCreateOrUpdateResponse>;
  /**
   * @param logProfileName The name of the log profile.
   * @param parameters Parameters supplied to the operation.
   * @param callback The callback
   */
  createOrUpdate(logProfileName: string, parameters: Models.LogProfileResource, callback: msRest.ServiceCallback<Models.LogProfileResource>): void;
  /**
   * @param logProfileName The name of the log profile.
   * @param parameters Parameters supplied to the operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(logProfileName: string, parameters: Models.LogProfileResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LogProfileResource>): void;
  createOrUpdate(logProfileName: string, parameters: Models.LogProfileResource, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LogProfileResource>, callback?: msRest.ServiceCallback<Models.LogProfileResource>): Promise<Models.LogProfilesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        logProfileName,
        parameters,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.LogProfilesCreateOrUpdateResponse>;
  }

  /**
   * Updates an existing LogProfilesResource. To update other fields use the CreateOrUpdate method.
   * @param logProfileName The name of the log profile.
   * @param logProfilesResource Parameters supplied to the operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.LogProfilesUpdateResponse>
   */
  update(logProfileName: string, logProfilesResource: Models.LogProfileResourcePatch, options?: msRest.RequestOptionsBase): Promise<Models.LogProfilesUpdateResponse>;
  /**
   * @param logProfileName The name of the log profile.
   * @param logProfilesResource Parameters supplied to the operation.
   * @param callback The callback
   */
  update(logProfileName: string, logProfilesResource: Models.LogProfileResourcePatch, callback: msRest.ServiceCallback<Models.LogProfileResource>): void;
  /**
   * @param logProfileName The name of the log profile.
   * @param logProfilesResource Parameters supplied to the operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(logProfileName: string, logProfilesResource: Models.LogProfileResourcePatch, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LogProfileResource>): void;
  update(logProfileName: string, logProfilesResource: Models.LogProfileResourcePatch, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LogProfileResource>, callback?: msRest.ServiceCallback<Models.LogProfileResource>): Promise<Models.LogProfilesUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        logProfileName,
        logProfilesResource,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.LogProfilesUpdateResponse>;
  }

  /**
   * List the log profiles.
   * @param [options] The optional parameters
   * @returns Promise<Models.LogProfilesListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.LogProfilesListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.LogProfileCollection>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LogProfileCollection>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LogProfileCollection>, callback?: msRest.ServiceCallback<Models.LogProfileCollection>): Promise<Models.LogProfilesListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.LogProfilesListResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/providers/microsoft.insights/logprofiles/{logProfileName}",
  urlParameters: [
    Parameters.logProfileName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/microsoft.insights/logprofiles/{logProfileName}",
  urlParameters: [
    Parameters.logProfileName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LogProfileResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/providers/microsoft.insights/logprofiles/{logProfileName}",
  urlParameters: [
    Parameters.logProfileName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.LogProfileResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.LogProfileResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/providers/microsoft.insights/logprofiles/{logProfileName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.logProfileName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "logProfilesResource",
    mapper: {
      ...Mappers.LogProfileResourcePatch,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.LogProfileResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/microsoft.insights/logprofiles",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LogProfileCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
