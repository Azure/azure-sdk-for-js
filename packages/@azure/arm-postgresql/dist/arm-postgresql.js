/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmPostgresql = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for ServerVersion.
     * Possible values include: '9.5', '9.6', '10', '10.0', '10.2'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ServerVersion =
     * <ServerVersion>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ServerVersion;
    (function (ServerVersion) {
        ServerVersion["NineFullStopFive"] = "9.5";
        ServerVersion["NineFullStopSix"] = "9.6";
        ServerVersion["OneZero"] = "10";
        ServerVersion["OneZeroFullStopZero"] = "10.0";
        ServerVersion["OneZeroFullStopTwo"] = "10.2";
    })(ServerVersion || (ServerVersion = {}));
    /**
     * Defines values for SslEnforcementEnum.
     * Possible values include: 'Enabled', 'Disabled'
     * @readonly
     * @enum {string}
     */
    var SslEnforcementEnum;
    (function (SslEnforcementEnum) {
        SslEnforcementEnum["Enabled"] = "Enabled";
        SslEnforcementEnum["Disabled"] = "Disabled";
    })(SslEnforcementEnum || (SslEnforcementEnum = {}));
    /**
     * Defines values for ServerState.
     * Possible values include: 'Ready', 'Dropping', 'Disabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ServerState =
     * <ServerState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ServerState;
    (function (ServerState) {
        ServerState["Ready"] = "Ready";
        ServerState["Dropping"] = "Dropping";
        ServerState["Disabled"] = "Disabled";
    })(ServerState || (ServerState = {}));
    /**
     * Defines values for GeoRedundantBackup.
     * Possible values include: 'Enabled', 'Disabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: GeoRedundantBackup =
     * <GeoRedundantBackup>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var GeoRedundantBackup;
    (function (GeoRedundantBackup) {
        GeoRedundantBackup["Enabled"] = "Enabled";
        GeoRedundantBackup["Disabled"] = "Disabled";
    })(GeoRedundantBackup || (GeoRedundantBackup = {}));
    /**
     * Defines values for SkuTier.
     * Possible values include: 'Basic', 'GeneralPurpose', 'MemoryOptimized'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SkuTier = <SkuTier>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SkuTier;
    (function (SkuTier) {
        SkuTier["Basic"] = "Basic";
        SkuTier["GeneralPurpose"] = "GeneralPurpose";
        SkuTier["MemoryOptimized"] = "MemoryOptimized";
    })(SkuTier || (SkuTier = {}));
    /**
     * Defines values for VirtualNetworkRuleState.
     * Possible values include: 'Initializing', 'InProgress', 'Ready', 'Deleting',
     * 'Unknown'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: VirtualNetworkRuleState =
     * <VirtualNetworkRuleState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var VirtualNetworkRuleState;
    (function (VirtualNetworkRuleState) {
        VirtualNetworkRuleState["Initializing"] = "Initializing";
        VirtualNetworkRuleState["InProgress"] = "InProgress";
        VirtualNetworkRuleState["Ready"] = "Ready";
        VirtualNetworkRuleState["Deleting"] = "Deleting";
        VirtualNetworkRuleState["Unknown"] = "Unknown";
    })(VirtualNetworkRuleState || (VirtualNetworkRuleState = {}));
    /**
     * Defines values for OperationOrigin.
     * Possible values include: 'NotSpecified', 'user', 'system'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: OperationOrigin =
     * <OperationOrigin>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var OperationOrigin;
    (function (OperationOrigin) {
        OperationOrigin["NotSpecified"] = "NotSpecified";
        OperationOrigin["User"] = "user";
        OperationOrigin["System"] = "system";
    })(OperationOrigin || (OperationOrigin = {}));
    /**
     * Defines values for ServerSecurityAlertPolicyState.
     * Possible values include: 'Enabled', 'Disabled'
     * @readonly
     * @enum {string}
     */
    var ServerSecurityAlertPolicyState;
    (function (ServerSecurityAlertPolicyState) {
        ServerSecurityAlertPolicyState["Enabled"] = "Enabled";
        ServerSecurityAlertPolicyState["Disabled"] = "Disabled";
    })(ServerSecurityAlertPolicyState || (ServerSecurityAlertPolicyState = {}));

    var index = /*#__PURE__*/Object.freeze({
        get ServerVersion () { return ServerVersion; },
        get SslEnforcementEnum () { return SslEnforcementEnum; },
        get ServerState () { return ServerState; },
        get GeoRedundantBackup () { return GeoRedundantBackup; },
        get SkuTier () { return SkuTier; },
        get VirtualNetworkRuleState () { return VirtualNetworkRuleState; },
        get OperationOrigin () { return OperationOrigin; },
        get ServerSecurityAlertPolicyState () { return ServerSecurityAlertPolicyState; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var ProxyResource = {
        serializedName: "ProxyResource",
        type: {
            name: "Composite",
            className: "ProxyResource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TrackedResource = {
        serializedName: "TrackedResource",
        type: {
            name: "Composite",
            className: "TrackedResource",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var StorageProfile = {
        serializedName: "StorageProfile",
        type: {
            name: "Composite",
            className: "StorageProfile",
            modelProperties: {
                backupRetentionDays: {
                    serializedName: "backupRetentionDays",
                    type: {
                        name: "Number"
                    }
                },
                geoRedundantBackup: {
                    serializedName: "geoRedundantBackup",
                    type: {
                        name: "String"
                    }
                },
                storageMB: {
                    serializedName: "storageMB",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ServerProperties = {
        serializedName: "ServerProperties",
        type: {
            name: "Composite",
            className: "ServerProperties",
            modelProperties: {
                administratorLogin: {
                    serializedName: "administratorLogin",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                },
                sslEnforcement: {
                    serializedName: "sslEnforcement",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                },
                userVisibleState: {
                    serializedName: "userVisibleState",
                    type: {
                        name: "String"
                    }
                },
                fullyQualifiedDomainName: {
                    serializedName: "fullyQualifiedDomainName",
                    type: {
                        name: "String"
                    }
                },
                earliestRestoreDate: {
                    serializedName: "earliestRestoreDate",
                    type: {
                        name: "DateTime"
                    }
                },
                storageProfile: {
                    serializedName: "storageProfile",
                    type: {
                        name: "Composite",
                        className: "StorageProfile"
                    }
                }
            }
        }
    };
    var ServerPropertiesForCreate = {
        serializedName: "ServerPropertiesForCreate",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "createMode",
                clientName: "createMode"
            },
            uberParent: "ServerPropertiesForCreate",
            className: "ServerPropertiesForCreate",
            modelProperties: {
                version: {
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                },
                sslEnforcement: {
                    serializedName: "sslEnforcement",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                },
                storageProfile: {
                    serializedName: "storageProfile",
                    type: {
                        name: "Composite",
                        className: "StorageProfile"
                    }
                },
                createMode: {
                    required: true,
                    serializedName: "createMode",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServerPropertiesForDefaultCreate = {
        serializedName: "Default",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ServerPropertiesForCreate.type.polymorphicDiscriminator,
            uberParent: "ServerPropertiesForCreate",
            className: "ServerPropertiesForDefaultCreate",
            modelProperties: __assign({}, ServerPropertiesForCreate.type.modelProperties, { administratorLogin: {
                    required: true,
                    serializedName: "administratorLogin",
                    type: {
                        name: "String"
                    }
                }, administratorLoginPassword: {
                    required: true,
                    serializedName: "administratorLoginPassword",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ServerPropertiesForRestore = {
        serializedName: "PointInTimeRestore",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ServerPropertiesForCreate.type.polymorphicDiscriminator,
            uberParent: "ServerPropertiesForCreate",
            className: "ServerPropertiesForRestore",
            modelProperties: __assign({}, ServerPropertiesForCreate.type.modelProperties, { sourceServerId: {
                    required: true,
                    serializedName: "sourceServerId",
                    type: {
                        name: "String"
                    }
                }, restorePointInTime: {
                    required: true,
                    serializedName: "restorePointInTime",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var ServerPropertiesForGeoRestore = {
        serializedName: "GeoRestore",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ServerPropertiesForCreate.type.polymorphicDiscriminator,
            uberParent: "ServerPropertiesForCreate",
            className: "ServerPropertiesForGeoRestore",
            modelProperties: __assign({}, ServerPropertiesForCreate.type.modelProperties, { sourceServerId: {
                    required: true,
                    serializedName: "sourceServerId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Sku = {
        serializedName: "Sku",
        type: {
            name: "Composite",
            className: "Sku",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    serializedName: "tier",
                    type: {
                        name: "String"
                    }
                },
                capacity: {
                    serializedName: "capacity",
                    constraints: {
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                },
                size: {
                    serializedName: "size",
                    type: {
                        name: "String"
                    }
                },
                family: {
                    serializedName: "family",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Server = {
        serializedName: "Server",
        type: {
            name: "Composite",
            className: "Server",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }, administratorLogin: {
                    serializedName: "properties.administratorLogin",
                    type: {
                        name: "String"
                    }
                }, version: {
                    serializedName: "properties.version",
                    type: {
                        name: "String"
                    }
                }, sslEnforcement: {
                    serializedName: "properties.sslEnforcement",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, userVisibleState: {
                    serializedName: "properties.userVisibleState",
                    type: {
                        name: "String"
                    }
                }, fullyQualifiedDomainName: {
                    serializedName: "properties.fullyQualifiedDomainName",
                    type: {
                        name: "String"
                    }
                }, earliestRestoreDate: {
                    serializedName: "properties.earliestRestoreDate",
                    type: {
                        name: "DateTime"
                    }
                }, storageProfile: {
                    serializedName: "properties.storageProfile",
                    type: {
                        name: "Composite",
                        className: "StorageProfile"
                    }
                } })
        }
    };
    var ServerForCreate = {
        serializedName: "ServerForCreate",
        type: {
            name: "Composite",
            className: "ServerForCreate",
            modelProperties: {
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                properties: {
                    required: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "createMode",
                            clientName: "createMode"
                        },
                        uberParent: "ServerPropertiesForCreate",
                        className: "ServerPropertiesForCreate"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ServerUpdateParametersProperties = {
        serializedName: "ServerUpdateParameters_properties",
        type: {
            name: "Composite",
            className: "ServerUpdateParametersProperties",
            modelProperties: {
                storageProfile: {
                    serializedName: "storageProfile",
                    type: {
                        name: "Composite",
                        className: "StorageProfile"
                    }
                },
                administratorLoginPassword: {
                    serializedName: "administratorLoginPassword",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                },
                sslEnforcement: {
                    serializedName: "sslEnforcement",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }
            }
        }
    };
    var ServerUpdateParameters = {
        serializedName: "ServerUpdateParameters",
        type: {
            name: "Composite",
            className: "ServerUpdateParameters",
            modelProperties: {
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                storageProfile: {
                    serializedName: "properties.storageProfile",
                    type: {
                        name: "Composite",
                        className: "StorageProfile"
                    }
                },
                administratorLoginPassword: {
                    serializedName: "properties.administratorLoginPassword",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    serializedName: "properties.version",
                    type: {
                        name: "String"
                    }
                },
                sslEnforcement: {
                    serializedName: "properties.sslEnforcement",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var FirewallRuleProperties = {
        serializedName: "FirewallRuleProperties",
        type: {
            name: "Composite",
            className: "FirewallRuleProperties",
            modelProperties: {
                startIpAddress: {
                    required: true,
                    serializedName: "startIpAddress",
                    constraints: {
                        Pattern: /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/
                    },
                    type: {
                        name: "String"
                    }
                },
                endIpAddress: {
                    required: true,
                    serializedName: "endIpAddress",
                    constraints: {
                        Pattern: /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FirewallRule = {
        serializedName: "FirewallRule",
        type: {
            name: "Composite",
            className: "FirewallRule",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { startIpAddress: {
                    required: true,
                    serializedName: "properties.startIpAddress",
                    constraints: {
                        Pattern: /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/
                    },
                    type: {
                        name: "String"
                    }
                }, endIpAddress: {
                    required: true,
                    serializedName: "properties.endIpAddress",
                    constraints: {
                        Pattern: /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/
                    },
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VirtualNetworkRuleProperties = {
        serializedName: "VirtualNetworkRuleProperties",
        type: {
            name: "Composite",
            className: "VirtualNetworkRuleProperties",
            modelProperties: {
                virtualNetworkSubnetId: {
                    required: true,
                    serializedName: "virtualNetworkSubnetId",
                    type: {
                        name: "String"
                    }
                },
                ignoreMissingVnetServiceEndpoint: {
                    serializedName: "ignoreMissingVnetServiceEndpoint",
                    type: {
                        name: "Boolean"
                    }
                },
                state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualNetworkRule = {
        serializedName: "VirtualNetworkRule",
        type: {
            name: "Composite",
            className: "VirtualNetworkRule",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { virtualNetworkSubnetId: {
                    required: true,
                    serializedName: "properties.virtualNetworkSubnetId",
                    type: {
                        name: "String"
                    }
                }, ignoreMissingVnetServiceEndpoint: {
                    serializedName: "properties.ignoreMissingVnetServiceEndpoint",
                    type: {
                        name: "Boolean"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var DatabaseProperties = {
        serializedName: "DatabaseProperties",
        type: {
            name: "Composite",
            className: "DatabaseProperties",
            modelProperties: {
                charset: {
                    serializedName: "charset",
                    type: {
                        name: "String"
                    }
                },
                collation: {
                    serializedName: "collation",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Database = {
        serializedName: "Database",
        type: {
            name: "Composite",
            className: "Database",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { charset: {
                    serializedName: "properties.charset",
                    type: {
                        name: "String"
                    }
                }, collation: {
                    serializedName: "properties.collation",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ConfigurationProperties = {
        serializedName: "ConfigurationProperties",
        type: {
            name: "Composite",
            className: "ConfigurationProperties",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    readOnly: true,
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                defaultValue: {
                    readOnly: true,
                    serializedName: "defaultValue",
                    type: {
                        name: "String"
                    }
                },
                dataType: {
                    readOnly: true,
                    serializedName: "dataType",
                    type: {
                        name: "String"
                    }
                },
                allowedValues: {
                    readOnly: true,
                    serializedName: "allowedValues",
                    type: {
                        name: "String"
                    }
                },
                source: {
                    serializedName: "source",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Configuration = {
        serializedName: "Configuration",
        type: {
            name: "Composite",
            className: "Configuration",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { value: {
                    serializedName: "properties.value",
                    type: {
                        name: "String"
                    }
                }, description: {
                    readOnly: true,
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, defaultValue: {
                    readOnly: true,
                    serializedName: "properties.defaultValue",
                    type: {
                        name: "String"
                    }
                }, dataType: {
                    readOnly: true,
                    serializedName: "properties.dataType",
                    type: {
                        name: "String"
                    }
                }, allowedValues: {
                    readOnly: true,
                    serializedName: "properties.allowedValues",
                    type: {
                        name: "String"
                    }
                }, source: {
                    serializedName: "properties.source",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var OperationDisplay = {
        serializedName: "OperationDisplay",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    readOnly: true,
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    readOnly: true,
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    readOnly: true,
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    readOnly: true,
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    readOnly: true,
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                },
                origin: {
                    readOnly: true,
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    readOnly: true,
                    serializedName: "properties",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                }
            }
        }
    };
    var LogFileProperties = {
        serializedName: "LogFileProperties",
        type: {
            name: "Composite",
            className: "LogFileProperties",
            modelProperties: {
                sizeInKB: {
                    serializedName: "sizeInKB",
                    type: {
                        name: "Number"
                    }
                },
                createdTime: {
                    readOnly: true,
                    serializedName: "createdTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastModifiedTime: {
                    readOnly: true,
                    serializedName: "lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                url: {
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LogFile = {
        serializedName: "LogFile",
        type: {
            name: "Composite",
            className: "LogFile",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { sizeInKB: {
                    serializedName: "properties.sizeInKB",
                    type: {
                        name: "Number"
                    }
                }, createdTime: {
                    readOnly: true,
                    serializedName: "properties.createdTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastModifiedTime: {
                    readOnly: true,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                }, logFileType: {
                    serializedName: "properties.type",
                    type: {
                        name: "String"
                    }
                }, url: {
                    serializedName: "properties.url",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var PerformanceTierServiceLevelObjectives = {
        serializedName: "PerformanceTierServiceLevelObjectives",
        type: {
            name: "Composite",
            className: "PerformanceTierServiceLevelObjectives",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                edition: {
                    serializedName: "edition",
                    type: {
                        name: "String"
                    }
                },
                vCore: {
                    serializedName: "vCore",
                    type: {
                        name: "Number"
                    }
                },
                hardwareGeneration: {
                    serializedName: "hardwareGeneration",
                    type: {
                        name: "String"
                    }
                },
                maxBackupRetentionDays: {
                    serializedName: "maxBackupRetentionDays",
                    type: {
                        name: "Number"
                    }
                },
                minBackupRetentionDays: {
                    serializedName: "minBackupRetentionDays",
                    type: {
                        name: "Number"
                    }
                },
                maxStorageMB: {
                    serializedName: "maxStorageMB",
                    type: {
                        name: "Number"
                    }
                },
                minStorageMB: {
                    serializedName: "minStorageMB",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var PerformanceTierProperties = {
        serializedName: "PerformanceTierProperties",
        type: {
            name: "Composite",
            className: "PerformanceTierProperties",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                serviceLevelObjectives: {
                    serializedName: "serviceLevelObjectives",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PerformanceTierServiceLevelObjectives"
                            }
                        }
                    }
                }
            }
        }
    };
    var NameAvailabilityRequest = {
        serializedName: "NameAvailabilityRequest",
        type: {
            name: "Composite",
            className: "NameAvailabilityRequest",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NameAvailability = {
        serializedName: "NameAvailability",
        type: {
            name: "Composite",
            className: "NameAvailability",
            modelProperties: {
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                nameAvailable: {
                    serializedName: "nameAvailable",
                    type: {
                        name: "Boolean"
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SecurityAlertPolicyProperties = {
        serializedName: "SecurityAlertPolicyProperties",
        type: {
            name: "Composite",
            className: "SecurityAlertPolicyProperties",
            modelProperties: {
                state: {
                    required: true,
                    serializedName: "state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                },
                disabledAlerts: {
                    serializedName: "disabledAlerts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                emailAddresses: {
                    serializedName: "emailAddresses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                emailAccountAdmins: {
                    serializedName: "emailAccountAdmins",
                    type: {
                        name: "Boolean"
                    }
                },
                storageEndpoint: {
                    serializedName: "storageEndpoint",
                    type: {
                        name: "String"
                    }
                },
                storageAccountAccessKey: {
                    serializedName: "storageAccountAccessKey",
                    type: {
                        name: "String"
                    }
                },
                retentionDays: {
                    serializedName: "retentionDays",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ServerSecurityAlertPolicy = {
        serializedName: "ServerSecurityAlertPolicy",
        type: {
            name: "Composite",
            className: "ServerSecurityAlertPolicy",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { state: {
                    required: true,
                    serializedName: "properties.state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, disabledAlerts: {
                    serializedName: "properties.disabledAlerts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, emailAddresses: {
                    serializedName: "properties.emailAddresses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, emailAccountAdmins: {
                    serializedName: "properties.emailAccountAdmins",
                    type: {
                        name: "Boolean"
                    }
                }, storageEndpoint: {
                    serializedName: "properties.storageEndpoint",
                    type: {
                        name: "String"
                    }
                }, storageAccountAccessKey: {
                    serializedName: "properties.storageAccountAccessKey",
                    type: {
                        name: "String"
                    }
                }, retentionDays: {
                    serializedName: "properties.retentionDays",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var ServerListResult = {
        serializedName: "ServerListResult",
        type: {
            name: "Composite",
            className: "ServerListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Server"
                            }
                        }
                    }
                }
            }
        }
    };
    var FirewallRuleListResult = {
        serializedName: "FirewallRuleListResult",
        type: {
            name: "Composite",
            className: "FirewallRuleListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FirewallRule"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualNetworkRuleListResult = {
        serializedName: "VirtualNetworkRuleListResult",
        type: {
            name: "Composite",
            className: "VirtualNetworkRuleListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualNetworkRule"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DatabaseListResult = {
        serializedName: "DatabaseListResult",
        type: {
            name: "Composite",
            className: "DatabaseListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Database"
                            }
                        }
                    }
                }
            }
        }
    };
    var ConfigurationListResult = {
        serializedName: "ConfigurationListResult",
        type: {
            name: "Composite",
            className: "ConfigurationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Configuration"
                            }
                        }
                    }
                }
            }
        }
    };
    var LogFileListResult = {
        serializedName: "LogFileListResult",
        type: {
            name: "Composite",
            className: "LogFileListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LogFile"
                            }
                        }
                    }
                }
            }
        }
    };
    var PerformanceTierListResult = {
        serializedName: "PerformanceTierListResult",
        type: {
            name: "Composite",
            className: "PerformanceTierListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PerformanceTierProperties"
                            }
                        }
                    }
                }
            }
        }
    };
    var discriminators = {
        'ServerPropertiesForCreate': ServerPropertiesForCreate,
        'ServerPropertiesForCreate.Default': ServerPropertiesForDefaultCreate,
        'ServerPropertiesForCreate.PointInTimeRestore': ServerPropertiesForRestore,
        'ServerPropertiesForCreate.GeoRestore': ServerPropertiesForGeoRestore
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        ProxyResource: ProxyResource,
        TrackedResource: TrackedResource,
        StorageProfile: StorageProfile,
        ServerProperties: ServerProperties,
        ServerPropertiesForCreate: ServerPropertiesForCreate,
        ServerPropertiesForDefaultCreate: ServerPropertiesForDefaultCreate,
        ServerPropertiesForRestore: ServerPropertiesForRestore,
        ServerPropertiesForGeoRestore: ServerPropertiesForGeoRestore,
        Sku: Sku,
        Server: Server,
        ServerForCreate: ServerForCreate,
        ServerUpdateParametersProperties: ServerUpdateParametersProperties,
        ServerUpdateParameters: ServerUpdateParameters,
        FirewallRuleProperties: FirewallRuleProperties,
        FirewallRule: FirewallRule,
        VirtualNetworkRuleProperties: VirtualNetworkRuleProperties,
        VirtualNetworkRule: VirtualNetworkRule,
        DatabaseProperties: DatabaseProperties,
        Database: Database,
        ConfigurationProperties: ConfigurationProperties,
        Configuration: Configuration,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        OperationListResult: OperationListResult,
        LogFileProperties: LogFileProperties,
        LogFile: LogFile,
        PerformanceTierServiceLevelObjectives: PerformanceTierServiceLevelObjectives,
        PerformanceTierProperties: PerformanceTierProperties,
        NameAvailabilityRequest: NameAvailabilityRequest,
        NameAvailability: NameAvailability,
        SecurityAlertPolicyProperties: SecurityAlertPolicyProperties,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ServerListResult: ServerListResult,
        FirewallRuleListResult: FirewallRuleListResult,
        VirtualNetworkRuleListResult: VirtualNetworkRuleListResult,
        DatabaseListResult: DatabaseListResult,
        ConfigurationListResult: ConfigurationListResult,
        LogFileListResult: LogFileListResult,
        PerformanceTierListResult: PerformanceTierListResult,
        discriminators: discriminators
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        ServerForCreate: ServerForCreate,
        Sku: Sku,
        ServerPropertiesForCreate: ServerPropertiesForCreate,
        StorageProfile: StorageProfile,
        Server: Server,
        TrackedResource: TrackedResource,
        ProxyResource: ProxyResource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        ServerUpdateParameters: ServerUpdateParameters,
        ServerListResult: ServerListResult,
        ServerPropertiesForDefaultCreate: ServerPropertiesForDefaultCreate,
        ServerPropertiesForRestore: ServerPropertiesForRestore,
        ServerPropertiesForGeoRestore: ServerPropertiesForGeoRestore,
        FirewallRule: FirewallRule,
        VirtualNetworkRule: VirtualNetworkRule,
        Database: Database,
        Configuration: Configuration,
        LogFile: LogFile,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var configurationName = {
        parameterPath: "configurationName",
        mapper: {
            required: true,
            serializedName: "configurationName",
            type: {
                name: "String"
            }
        }
    };
    var databaseName = {
        parameterPath: "databaseName",
        mapper: {
            required: true,
            serializedName: "databaseName",
            type: {
                name: "String"
            }
        }
    };
    var firewallRuleName = {
        parameterPath: "firewallRuleName",
        mapper: {
            required: true,
            serializedName: "firewallRuleName",
            type: {
                name: "String"
            }
        }
    };
    var locationName = {
        parameterPath: "locationName",
        mapper: {
            required: true,
            serializedName: "locationName",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var securityAlertPolicyName = {
        parameterPath: "securityAlertPolicyName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "securityAlertPolicyName",
            defaultValue: 'Default',
            type: {
                name: "String"
            }
        }
    };
    var serverName = {
        parameterPath: "serverName",
        mapper: {
            required: true,
            serializedName: "serverName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var virtualNetworkRuleName = {
        parameterPath: "virtualNetworkRuleName",
        mapper: {
            required: true,
            serializedName: "virtualNetworkRuleName",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Servers. */
    var Servers = /** @class */ (function () {
        /**
         * Create a Servers.
         * @param {PostgreSQLManagementClientContext} client Reference to the service client.
         */
        function Servers(client) {
            this.client = client;
        }
        /**
         * Creates a new server, or will overwrite an existing server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters The required parameters for creating or updating a server.
         * @param [options] The optional parameters
         * @returns Promise<Models.ServersCreateResponse>
         */
        Servers.prototype.create = function (resourceGroupName$$1, serverName$$1, parameters, options) {
            return this.beginCreate(resourceGroupName$$1, serverName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates an existing server. The request body can contain one to many of the properties present
         * in the normal server definition.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters The required parameters for updating a server.
         * @param [options] The optional parameters
         * @returns Promise<Models.ServersUpdateResponse>
         */
        Servers.prototype.update = function (resourceGroupName$$1, serverName$$1, parameters, options) {
            return this.beginUpdate(resourceGroupName$$1, serverName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Servers.prototype.deleteMethod = function (resourceGroupName$$1, serverName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, serverName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Servers.prototype.get = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        Servers.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Servers.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        /**
         * Creates a new server, or will overwrite an existing server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters The required parameters for creating or updating a server.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Servers.prototype.beginCreate = function (resourceGroupName$$1, serverName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOperationSpec, options);
        };
        /**
         * Updates an existing server. The request body can contain one to many of the properties present
         * in the normal server definition.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters The required parameters for updating a server.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Servers.prototype.beginUpdate = function (resourceGroupName$$1, serverName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec, options);
        };
        /**
         * Deletes a server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Servers.prototype.beginDeleteMethod = function (resourceGroupName$$1, serverName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        return Servers;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/servers/{serverName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Server
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/servers",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.DBforPostgreSQL/servers",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginCreateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/servers/{serverName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ServerForCreate, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Server
            },
            201: {
                bodyMapper: Server
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginUpdateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/servers/{serverName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ServerUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Server
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/servers/{serverName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        FirewallRule: FirewallRule,
        ProxyResource: ProxyResource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        FirewallRuleListResult: FirewallRuleListResult,
        TrackedResource: TrackedResource,
        Server: Server,
        Sku: Sku,
        StorageProfile: StorageProfile,
        VirtualNetworkRule: VirtualNetworkRule,
        Database: Database,
        Configuration: Configuration,
        LogFile: LogFile,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a FirewallRules. */
    var FirewallRules = /** @class */ (function () {
        /**
         * Create a FirewallRules.
         * @param {PostgreSQLManagementClientContext} client Reference to the service client.
         */
        function FirewallRules(client) {
            this.client = client;
        }
        /**
         * Creates a new firewall rule or updates an existing firewall rule.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param firewallRuleName The name of the server firewall rule.
         * @param parameters The required parameters for creating or updating a firewall rule.
         * @param [options] The optional parameters
         * @returns Promise<Models.FirewallRulesCreateOrUpdateResponse>
         */
        FirewallRules.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, firewallRuleName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, serverName$$1, firewallRuleName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a server firewall rule.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param firewallRuleName The name of the server firewall rule.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        FirewallRules.prototype.deleteMethod = function (resourceGroupName$$1, serverName$$1, firewallRuleName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, serverName$$1, firewallRuleName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        FirewallRules.prototype.get = function (resourceGroupName$$1, serverName$$1, firewallRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                firewallRuleName: firewallRuleName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        FirewallRules.prototype.listByServer = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, listByServerOperationSpec, callback);
        };
        /**
         * Creates a new firewall rule or updates an existing firewall rule.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param firewallRuleName The name of the server firewall rule.
         * @param parameters The required parameters for creating or updating a firewall rule.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        FirewallRules.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, serverName$$1, firewallRuleName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                firewallRuleName: firewallRuleName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * Deletes a server firewall rule.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param firewallRuleName The name of the server firewall rule.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        FirewallRules.prototype.beginDeleteMethod = function (resourceGroupName$$1, serverName$$1, firewallRuleName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                firewallRuleName: firewallRuleName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$1, options);
        };
        return FirewallRules;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/servers/{serverName}/firewallRules/{firewallRuleName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            firewallRuleName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FirewallRule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByServerOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/servers/{serverName}/firewallRules",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FirewallRuleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/servers/{serverName}/firewallRules/{firewallRuleName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            firewallRuleName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, FirewallRule, { required: true })
        },
        responses: {
            200: {
                bodyMapper: FirewallRule
            },
            201: {
                bodyMapper: FirewallRule
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginDeleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/servers/{serverName}/firewallRules/{firewallRuleName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            firewallRuleName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        VirtualNetworkRule: VirtualNetworkRule,
        ProxyResource: ProxyResource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        VirtualNetworkRuleListResult: VirtualNetworkRuleListResult,
        TrackedResource: TrackedResource,
        Server: Server,
        Sku: Sku,
        StorageProfile: StorageProfile,
        FirewallRule: FirewallRule,
        Database: Database,
        Configuration: Configuration,
        LogFile: LogFile,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualNetworkRules. */
    var VirtualNetworkRules = /** @class */ (function () {
        /**
         * Create a VirtualNetworkRules.
         * @param {PostgreSQLManagementClientContext} client Reference to the service client.
         */
        function VirtualNetworkRules(client) {
            this.client = client;
        }
        VirtualNetworkRules.prototype.get = function (resourceGroupName$$1, serverName$$1, virtualNetworkRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                virtualNetworkRuleName: virtualNetworkRuleName$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        /**
         * Creates or updates an existing virtual network rule.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param virtualNetworkRuleName The name of the virtual network rule.
         * @param parameters The requested virtual Network Rule Resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualNetworkRulesCreateOrUpdateResponse>
         */
        VirtualNetworkRules.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, virtualNetworkRuleName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, serverName$$1, virtualNetworkRuleName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the virtual network rule with the given name.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param virtualNetworkRuleName The name of the virtual network rule.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualNetworkRules.prototype.deleteMethod = function (resourceGroupName$$1, serverName$$1, virtualNetworkRuleName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, serverName$$1, virtualNetworkRuleName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualNetworkRules.prototype.listByServer = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, listByServerOperationSpec$1, callback);
        };
        /**
         * Creates or updates an existing virtual network rule.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param virtualNetworkRuleName The name of the virtual network rule.
         * @param parameters The requested virtual Network Rule Resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualNetworkRules.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, serverName$$1, virtualNetworkRuleName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                virtualNetworkRuleName: virtualNetworkRuleName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$1, options);
        };
        /**
         * Deletes the virtual network rule with the given name.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param virtualNetworkRuleName The name of the virtual network rule.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualNetworkRules.prototype.beginDeleteMethod = function (resourceGroupName$$1, serverName$$1, virtualNetworkRuleName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                virtualNetworkRuleName: virtualNetworkRuleName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$2, options);
        };
        VirtualNetworkRules.prototype.listByServerNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByServerNextOperationSpec, callback);
        };
        return VirtualNetworkRules;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/servers/{serverName}/virtualNetworkRules/{virtualNetworkRuleName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId,
            virtualNetworkRuleName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkRule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listByServerOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/servers/{serverName}/virtualNetworkRules",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkRuleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginCreateOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/servers/{serverName}/virtualNetworkRules/{virtualNetworkRuleName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId,
            virtualNetworkRuleName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, VirtualNetworkRule, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualNetworkRule
            },
            201: {
                bodyMapper: VirtualNetworkRule
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginDeleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/servers/{serverName}/virtualNetworkRules/{virtualNetworkRuleName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            virtualNetworkRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listByServerNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkRuleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        Database: Database,
        ProxyResource: ProxyResource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        DatabaseListResult: DatabaseListResult,
        TrackedResource: TrackedResource,
        Server: Server,
        Sku: Sku,
        StorageProfile: StorageProfile,
        FirewallRule: FirewallRule,
        VirtualNetworkRule: VirtualNetworkRule,
        Configuration: Configuration,
        LogFile: LogFile,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Databases. */
    var Databases = /** @class */ (function () {
        /**
         * Create a Databases.
         * @param {PostgreSQLManagementClientContext} client Reference to the service client.
         */
        function Databases(client) {
            this.client = client;
        }
        /**
         * Creates a new database or updates an existing database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param parameters The required parameters for creating or updating a database.
         * @param [options] The optional parameters
         * @returns Promise<Models.DatabasesCreateOrUpdateResponse>
         */
        Databases.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Databases.prototype.deleteMethod = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, serverName$$1, databaseName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Databases.prototype.get = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                options: options
            }, getOperationSpec$3, callback);
        };
        Databases.prototype.listByServer = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, listByServerOperationSpec$2, callback);
        };
        /**
         * Creates a new database or updates an existing database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param parameters The required parameters for creating or updating a database.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Databases.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$2, options);
        };
        /**
         * Deletes a database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Databases.prototype.beginDeleteMethod = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$3, options);
        };
        return Databases;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/servers/{serverName}/databases/{databaseName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Database
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listByServerOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/servers/{serverName}/databases",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginCreateOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/servers/{serverName}/databases/{databaseName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Database, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Database
            },
            201: {
                bodyMapper: Database
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginDeleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/servers/{serverName}/databases/{databaseName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        Configuration: Configuration,
        ProxyResource: ProxyResource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        ConfigurationListResult: ConfigurationListResult,
        TrackedResource: TrackedResource,
        Server: Server,
        Sku: Sku,
        StorageProfile: StorageProfile,
        FirewallRule: FirewallRule,
        VirtualNetworkRule: VirtualNetworkRule,
        Database: Database,
        LogFile: LogFile,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Configurations. */
    var Configurations = /** @class */ (function () {
        /**
         * Create a Configurations.
         * @param {PostgreSQLManagementClientContext} client Reference to the service client.
         */
        function Configurations(client) {
            this.client = client;
        }
        /**
         * Updates a configuration of a server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param configurationName The name of the server configuration.
         * @param parameters The required parameters for updating a server configuration.
         * @param [options] The optional parameters
         * @returns Promise<Models.ConfigurationsCreateOrUpdateResponse>
         */
        Configurations.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, configurationName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, serverName$$1, configurationName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Configurations.prototype.get = function (resourceGroupName$$1, serverName$$1, configurationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                configurationName: configurationName$$1,
                options: options
            }, getOperationSpec$4, callback);
        };
        Configurations.prototype.listByServer = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, listByServerOperationSpec$3, callback);
        };
        /**
         * Updates a configuration of a server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param configurationName The name of the server configuration.
         * @param parameters The required parameters for updating a server configuration.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Configurations.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, serverName$$1, configurationName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                configurationName: configurationName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$3, options);
        };
        return Configurations;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/servers/{serverName}/configurations/{configurationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            configurationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Configuration
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listByServerOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/servers/{serverName}/configurations",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ConfigurationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var beginCreateOrUpdateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/servers/{serverName}/configurations/{configurationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            configurationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Configuration, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Configuration
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        LogFileListResult: LogFileListResult,
        LogFile: LogFile,
        ProxyResource: ProxyResource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        TrackedResource: TrackedResource,
        Server: Server,
        Sku: Sku,
        StorageProfile: StorageProfile,
        FirewallRule: FirewallRule,
        VirtualNetworkRule: VirtualNetworkRule,
        Database: Database,
        Configuration: Configuration,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a LogFiles. */
    var LogFiles = /** @class */ (function () {
        /**
         * Create a LogFiles.
         * @param {PostgreSQLManagementClientContext} client Reference to the service client.
         */
        function LogFiles(client) {
            this.client = client;
        }
        LogFiles.prototype.listByServer = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, listByServerOperationSpec$4, callback);
        };
        return LogFiles;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var listByServerOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/servers/{serverName}/logFiles",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LogFileListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        PerformanceTierListResult: PerformanceTierListResult,
        PerformanceTierProperties: PerformanceTierProperties,
        PerformanceTierServiceLevelObjectives: PerformanceTierServiceLevelObjectives,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a LocationBasedPerformanceTier. */
    var LocationBasedPerformanceTier = /** @class */ (function () {
        /**
         * Create a LocationBasedPerformanceTier.
         * @param {PostgreSQLManagementClientContext} client Reference to the service client.
         */
        function LocationBasedPerformanceTier(client) {
            this.client = client;
        }
        LocationBasedPerformanceTier.prototype.list = function (locationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                locationName: locationName$$1,
                options: options
            }, listOperationSpec$1, callback);
        };
        return LocationBasedPerformanceTier;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.DBforPostgreSQL/locations/{locationName}/performanceTiers",
        urlParameters: [
            subscriptionId,
            locationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PerformanceTierListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        NameAvailabilityRequest: NameAvailabilityRequest,
        NameAvailability: NameAvailability,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a CheckNameAvailability. */
    var CheckNameAvailability = /** @class */ (function () {
        /**
         * Create a CheckNameAvailability.
         * @param {PostgreSQLManagementClientContext} client Reference to the service client.
         */
        function CheckNameAvailability(client) {
            this.client = client;
        }
        CheckNameAvailability.prototype.execute = function (nameAvailabilityRequest, options, callback) {
            return this.client.sendOperationRequest({
                nameAvailabilityRequest: nameAvailabilityRequest,
                options: options
            }, executeOperationSpec, callback);
        };
        return CheckNameAvailability;
    }());
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers$7);
    var executeOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.DBforPostgreSQL/checkNameAvailability",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "nameAvailabilityRequest",
            mapper: __assign({}, NameAvailabilityRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: NameAvailability
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$8 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ProxyResource: ProxyResource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        TrackedResource: TrackedResource,
        Server: Server,
        Sku: Sku,
        StorageProfile: StorageProfile,
        FirewallRule: FirewallRule,
        VirtualNetworkRule: VirtualNetworkRule,
        Database: Database,
        Configuration: Configuration,
        LogFile: LogFile
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServerSecurityAlertPolicies. */
    var ServerSecurityAlertPolicies = /** @class */ (function () {
        /**
         * Create a ServerSecurityAlertPolicies.
         * @param {PostgreSQLManagementClientContext} client Reference to the service client.
         */
        function ServerSecurityAlertPolicies(client) {
            this.client = client;
        }
        ServerSecurityAlertPolicies.prototype.get = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, getOperationSpec$5, callback);
        };
        /**
         * Creates or updates a threat detection policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters The server security alert policy.
         * @param [options] The optional parameters
         * @returns Promise<Models.ServerSecurityAlertPoliciesCreateOrUpdateResponse>
         */
        ServerSecurityAlertPolicies.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, serverName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates a threat detection policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters The server security alert policy.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ServerSecurityAlertPolicies.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, serverName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$4, options);
        };
        return ServerSecurityAlertPolicies;
    }());
    // Operation Specifications
    var serializer$8 = new msRest.Serializer(Mappers$8);
    var getOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/servers/{serverName}/securityAlertPolicies/{securityAlertPolicyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            securityAlertPolicyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerSecurityAlertPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var beginCreateOrUpdateOperationSpec$4 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/servers/{serverName}/securityAlertPolicies/{securityAlertPolicyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            securityAlertPolicyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ServerSecurityAlertPolicy, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ServerSecurityAlertPolicy
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$9 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        OperationListResult: OperationListResult,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {PostgreSQLManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$2, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$9 = new msRest.Serializer(Mappers$9);
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "providers/Microsoft.DBforPostgreSQL/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-postgresql";
    var packageVersion = "1.0.0";
    var PostgreSQLManagementClientContext = /** @class */ (function (_super) {
        __extends(PostgreSQLManagementClientContext, _super);
        /**
         * Initializes a new instance of the PostgreSQLManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The subscription ID that identifies an Azure subscription.
         * @param [options] The parameter options
         */
        function PostgreSQLManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2017-12-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return PostgreSQLManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var PostgreSQLManagementClient = /** @class */ (function (_super) {
        __extends(PostgreSQLManagementClient, _super);
        /**
         * Initializes a new instance of the PostgreSQLManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The subscription ID that identifies an Azure subscription.
         * @param [options] The parameter options
         */
        function PostgreSQLManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.servers = new Servers(_this);
            _this.firewallRules = new FirewallRules(_this);
            _this.virtualNetworkRules = new VirtualNetworkRules(_this);
            _this.databases = new Databases(_this);
            _this.configurations = new Configurations(_this);
            _this.logFiles = new LogFiles(_this);
            _this.locationBasedPerformanceTier = new LocationBasedPerformanceTier(_this);
            _this.checkNameAvailability = new CheckNameAvailability(_this);
            _this.serverSecurityAlertPolicies = new ServerSecurityAlertPolicies(_this);
            _this.operations = new Operations(_this);
            return _this;
        }
        return PostgreSQLManagementClient;
    }(PostgreSQLManagementClientContext));

    exports.PostgreSQLManagementClient = PostgreSQLManagementClient;
    exports.PostgreSQLManagementClientContext = PostgreSQLManagementClientContext;
    exports.PostgreSQLManagementModels = index;
    exports.PostgreSQLManagementMappers = mappers;
    exports.Servers = Servers;
    exports.FirewallRules = FirewallRules;
    exports.VirtualNetworkRules = VirtualNetworkRules;
    exports.Databases = Databases;
    exports.Configurations = Configurations;
    exports.LogFiles = LogFiles;
    exports.LocationBasedPerformanceTier = LocationBasedPerformanceTier;
    exports.CheckNameAvailability = CheckNameAvailability;
    exports.ServerSecurityAlertPolicies = ServerSecurityAlertPolicies;
    exports.Operations = Operations;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-postgresql.js.map
