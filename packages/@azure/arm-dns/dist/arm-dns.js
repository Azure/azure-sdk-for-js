/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmDns = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for ZoneType.
     * Possible values include: 'Public', 'Private'
     * @readonly
     * @enum {string}
     */
    var ZoneType;
    (function (ZoneType) {
        ZoneType["Public"] = "Public";
        ZoneType["Private"] = "Private";
    })(ZoneType || (ZoneType = {}));
    /**
     * Defines values for RecordType.
     * Possible values include: 'A', 'AAAA', 'CAA', 'CNAME', 'MX', 'NS', 'PTR',
     * 'SOA', 'SRV', 'TXT'
     * @readonly
     * @enum {string}
     */
    var RecordType;
    (function (RecordType) {
        RecordType["A"] = "A";
        RecordType["AAAA"] = "AAAA";
        RecordType["CAA"] = "CAA";
        RecordType["CNAME"] = "CNAME";
        RecordType["MX"] = "MX";
        RecordType["NS"] = "NS";
        RecordType["PTR"] = "PTR";
        RecordType["SOA"] = "SOA";
        RecordType["SRV"] = "SRV";
        RecordType["TXT"] = "TXT";
    })(RecordType || (RecordType = {}));

    var index = /*#__PURE__*/Object.freeze({
        get ZoneType () { return ZoneType; },
        get RecordType () { return RecordType; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var ARecord = {
        serializedName: "ARecord",
        type: {
            name: "Composite",
            className: "ARecord",
            modelProperties: {
                ipv4Address: {
                    serializedName: "ipv4Address",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AaaaRecord = {
        serializedName: "AaaaRecord",
        type: {
            name: "Composite",
            className: "AaaaRecord",
            modelProperties: {
                ipv6Address: {
                    serializedName: "ipv6Address",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MxRecord = {
        serializedName: "MxRecord",
        type: {
            name: "Composite",
            className: "MxRecord",
            modelProperties: {
                preference: {
                    serializedName: "preference",
                    type: {
                        name: "Number"
                    }
                },
                exchange: {
                    serializedName: "exchange",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NsRecord = {
        serializedName: "NsRecord",
        type: {
            name: "Composite",
            className: "NsRecord",
            modelProperties: {
                nsdname: {
                    serializedName: "nsdname",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PtrRecord = {
        serializedName: "PtrRecord",
        type: {
            name: "Composite",
            className: "PtrRecord",
            modelProperties: {
                ptrdname: {
                    serializedName: "ptrdname",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SrvRecord = {
        serializedName: "SrvRecord",
        type: {
            name: "Composite",
            className: "SrvRecord",
            modelProperties: {
                priority: {
                    serializedName: "priority",
                    type: {
                        name: "Number"
                    }
                },
                weight: {
                    serializedName: "weight",
                    type: {
                        name: "Number"
                    }
                },
                port: {
                    serializedName: "port",
                    type: {
                        name: "Number"
                    }
                },
                target: {
                    serializedName: "target",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TxtRecord = {
        serializedName: "TxtRecord",
        type: {
            name: "Composite",
            className: "TxtRecord",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var CnameRecord = {
        serializedName: "CnameRecord",
        type: {
            name: "Composite",
            className: "CnameRecord",
            modelProperties: {
                cname: {
                    serializedName: "cname",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SoaRecord = {
        serializedName: "SoaRecord",
        type: {
            name: "Composite",
            className: "SoaRecord",
            modelProperties: {
                host: {
                    serializedName: "host",
                    type: {
                        name: "String"
                    }
                },
                email: {
                    serializedName: "email",
                    type: {
                        name: "String"
                    }
                },
                serialNumber: {
                    serializedName: "serialNumber",
                    type: {
                        name: "Number"
                    }
                },
                refreshTime: {
                    serializedName: "refreshTime",
                    type: {
                        name: "Number"
                    }
                },
                retryTime: {
                    serializedName: "retryTime",
                    type: {
                        name: "Number"
                    }
                },
                expireTime: {
                    serializedName: "expireTime",
                    type: {
                        name: "Number"
                    }
                },
                minimumTtl: {
                    serializedName: "minimumTTL",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var CaaRecord = {
        serializedName: "CaaRecord",
        type: {
            name: "Composite",
            className: "CaaRecord",
            modelProperties: {
                flags: {
                    serializedName: "flags",
                    type: {
                        name: "Number"
                    }
                },
                tag: {
                    serializedName: "tag",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SubResource = {
        serializedName: "SubResource",
        type: {
            name: "Composite",
            className: "SubResource",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RecordSet = {
        serializedName: "RecordSet",
        type: {
            name: "Composite",
            className: "RecordSet",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                metadata: {
                    serializedName: "properties.metadata",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                tTL: {
                    serializedName: "properties.TTL",
                    type: {
                        name: "Number"
                    }
                },
                fqdn: {
                    readOnly: true,
                    serializedName: "properties.fqdn",
                    type: {
                        name: "String"
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                },
                targetResource: {
                    serializedName: "properties.targetResource",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                },
                aRecords: {
                    serializedName: "properties.ARecords",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ARecord"
                            }
                        }
                    }
                },
                aaaaRecords: {
                    serializedName: "properties.AAAARecords",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AaaaRecord"
                            }
                        }
                    }
                },
                mxRecords: {
                    serializedName: "properties.MXRecords",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MxRecord"
                            }
                        }
                    }
                },
                nsRecords: {
                    serializedName: "properties.NSRecords",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NsRecord"
                            }
                        }
                    }
                },
                ptrRecords: {
                    serializedName: "properties.PTRRecords",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PtrRecord"
                            }
                        }
                    }
                },
                srvRecords: {
                    serializedName: "properties.SRVRecords",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SrvRecord"
                            }
                        }
                    }
                },
                txtRecords: {
                    serializedName: "properties.TXTRecords",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TxtRecord"
                            }
                        }
                    }
                },
                cnameRecord: {
                    serializedName: "properties.CNAMERecord",
                    type: {
                        name: "Composite",
                        className: "CnameRecord"
                    }
                },
                soaRecord: {
                    serializedName: "properties.SOARecord",
                    type: {
                        name: "Composite",
                        className: "SoaRecord"
                    }
                },
                caaRecords: {
                    serializedName: "properties.caaRecords",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CaaRecord"
                            }
                        }
                    }
                }
            }
        }
    };
    var RecordSetUpdateParameters = {
        serializedName: "RecordSetUpdateParameters",
        type: {
            name: "Composite",
            className: "RecordSetUpdateParameters",
            modelProperties: {
                recordSet: {
                    serializedName: "RecordSet",
                    type: {
                        name: "Composite",
                        className: "RecordSet"
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var Zone = {
        serializedName: "Zone",
        type: {
            name: "Composite",
            className: "Zone",
            modelProperties: __assign({}, Resource.type.modelProperties, { etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }, maxNumberOfRecordSets: {
                    readOnly: true,
                    serializedName: "properties.maxNumberOfRecordSets",
                    type: {
                        name: "Number"
                    }
                }, numberOfRecordSets: {
                    readOnly: true,
                    serializedName: "properties.numberOfRecordSets",
                    type: {
                        name: "Number"
                    }
                }, nameServers: {
                    readOnly: true,
                    serializedName: "properties.nameServers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, zoneType: {
                    serializedName: "properties.zoneType",
                    defaultValue: 'Public',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Public",
                            "Private"
                        ]
                    }
                }, registrationVirtualNetworks: {
                    serializedName: "properties.registrationVirtualNetworks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }, resolutionVirtualNetworks: {
                    serializedName: "properties.resolutionVirtualNetworks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                } })
        }
    };
    var ZoneUpdate = {
        serializedName: "ZoneUpdate",
        type: {
            name: "Composite",
            className: "ZoneUpdate",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var DnsResourceReferenceRequest = {
        serializedName: "DnsResourceReferenceRequest",
        type: {
            name: "Composite",
            className: "DnsResourceReferenceRequest",
            modelProperties: {
                targetResources: {
                    serializedName: "properties.targetResources",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }
            }
        }
    };
    var DnsResourceReference = {
        serializedName: "DnsResourceReference",
        type: {
            name: "Composite",
            className: "DnsResourceReference",
            modelProperties: {
                dnsResources: {
                    serializedName: "dnsResources",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                },
                targetResource: {
                    serializedName: "targetResource",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }
            }
        }
    };
    var DnsResourceReferenceResult = {
        serializedName: "DnsResourceReferenceResult",
        type: {
            name: "Composite",
            className: "DnsResourceReferenceResult",
            modelProperties: {
                dnsResourceReferences: {
                    serializedName: "properties.dnsResourceReferences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DnsResourceReference"
                            }
                        }
                    }
                }
            }
        }
    };
    var RecordSetListResult = {
        serializedName: "RecordSetListResult",
        type: {
            name: "Composite",
            className: "RecordSetListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RecordSet"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ZoneListResult = {
        serializedName: "ZoneListResult",
        type: {
            name: "Composite",
            className: "ZoneListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Zone"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        ARecord: ARecord,
        AaaaRecord: AaaaRecord,
        MxRecord: MxRecord,
        NsRecord: NsRecord,
        PtrRecord: PtrRecord,
        SrvRecord: SrvRecord,
        TxtRecord: TxtRecord,
        CnameRecord: CnameRecord,
        SoaRecord: SoaRecord,
        CaaRecord: CaaRecord,
        SubResource: SubResource,
        RecordSet: RecordSet,
        RecordSetUpdateParameters: RecordSetUpdateParameters,
        Resource: Resource,
        Zone: Zone,
        ZoneUpdate: ZoneUpdate,
        DnsResourceReferenceRequest: DnsResourceReferenceRequest,
        DnsResourceReference: DnsResourceReference,
        DnsResourceReferenceResult: DnsResourceReferenceResult,
        RecordSetListResult: RecordSetListResult,
        ZoneListResult: ZoneListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        RecordSet: RecordSet,
        BaseResource: BaseResource,
        SubResource: SubResource,
        ARecord: ARecord,
        AaaaRecord: AaaaRecord,
        MxRecord: MxRecord,
        NsRecord: NsRecord,
        PtrRecord: PtrRecord,
        SrvRecord: SrvRecord,
        TxtRecord: TxtRecord,
        CnameRecord: CnameRecord,
        SoaRecord: SoaRecord,
        CaaRecord: CaaRecord,
        CloudError: CloudError,
        RecordSetListResult: RecordSetListResult,
        Resource: Resource,
        Zone: Zone
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch = {
        parameterPath: [
            "options",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifNoneMatch = {
        parameterPath: [
            "options",
            "ifNoneMatch"
        ],
        mapper: {
            serializedName: "If-None-Match",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var recordsetnamesuffix = {
        parameterPath: [
            "options",
            "recordsetnamesuffix"
        ],
        mapper: {
            serializedName: "$recordsetnamesuffix",
            type: {
                name: "String"
            }
        }
    };
    var recordSetNameSuffix = {
        parameterPath: [
            "options",
            "recordSetNameSuffix"
        ],
        mapper: {
            serializedName: "$recordsetnamesuffix",
            type: {
                name: "String"
            }
        }
    };
    var recordType = {
        parameterPath: "recordType",
        mapper: {
            required: true,
            serializedName: "recordType",
            type: {
                name: "Enum",
                allowedValues: [
                    "A",
                    "AAAA",
                    "CAA",
                    "CNAME",
                    "MX",
                    "NS",
                    "PTR",
                    "SOA",
                    "SRV",
                    "TXT"
                ]
            }
        }
    };
    var relativeRecordSetName = {
        parameterPath: "relativeRecordSetName",
        mapper: {
            required: true,
            serializedName: "relativeRecordSetName",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var top = {
        parameterPath: [
            "options",
            "top"
        ],
        mapper: {
            serializedName: "$top",
            type: {
                name: "Number"
            }
        }
    };
    var zoneName = {
        parameterPath: "zoneName",
        mapper: {
            required: true,
            serializedName: "zoneName",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a RecordSets. */
    var RecordSets = /** @class */ (function () {
        /**
         * Create a RecordSets.
         * @param {DnsManagementClientContext} client Reference to the service client.
         */
        function RecordSets(client) {
            this.client = client;
        }
        RecordSets.prototype.update = function (resourceGroupName$$1, zoneName$$1, relativeRecordSetName$$1, recordType$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                zoneName: zoneName$$1,
                relativeRecordSetName: relativeRecordSetName$$1,
                recordType: recordType$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec, callback);
        };
        RecordSets.prototype.createOrUpdate = function (resourceGroupName$$1, zoneName$$1, relativeRecordSetName$$1, recordType$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                zoneName: zoneName$$1,
                relativeRecordSetName: relativeRecordSetName$$1,
                recordType: recordType$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        RecordSets.prototype.deleteMethod = function (resourceGroupName$$1, zoneName$$1, relativeRecordSetName$$1, recordType$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                zoneName: zoneName$$1,
                relativeRecordSetName: relativeRecordSetName$$1,
                recordType: recordType$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        RecordSets.prototype.get = function (resourceGroupName$$1, zoneName$$1, relativeRecordSetName$$1, recordType$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                zoneName: zoneName$$1,
                relativeRecordSetName: relativeRecordSetName$$1,
                recordType: recordType$$1,
                options: options
            }, getOperationSpec, callback);
        };
        RecordSets.prototype.listByType = function (resourceGroupName$$1, zoneName$$1, recordType$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                zoneName: zoneName$$1,
                recordType: recordType$$1,
                options: options
            }, listByTypeOperationSpec, callback);
        };
        RecordSets.prototype.listByDnsZone = function (resourceGroupName$$1, zoneName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                zoneName: zoneName$$1,
                options: options
            }, listByDnsZoneOperationSpec, callback);
        };
        RecordSets.prototype.listAllByDnsZone = function (resourceGroupName$$1, zoneName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                zoneName: zoneName$$1,
                options: options
            }, listAllByDnsZoneOperationSpec, callback);
        };
        RecordSets.prototype.listByTypeNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByTypeNextOperationSpec, callback);
        };
        RecordSets.prototype.listByDnsZoneNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByDnsZoneNextOperationSpec, callback);
        };
        RecordSets.prototype.listAllByDnsZoneNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listAllByDnsZoneNextOperationSpec, callback);
        };
        return RecordSets;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}",
        urlParameters: [
            resourceGroupName,
            zoneName,
            relativeRecordSetName,
            recordType,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, RecordSet, { required: true })
        },
        responses: {
            200: {
                bodyMapper: RecordSet
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}",
        urlParameters: [
            resourceGroupName,
            zoneName,
            relativeRecordSetName,
            recordType,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch,
            ifNoneMatch,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, RecordSet, { required: true })
        },
        responses: {
            200: {
                bodyMapper: RecordSet
            },
            201: {
                bodyMapper: RecordSet
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}",
        urlParameters: [
            resourceGroupName,
            zoneName,
            relativeRecordSetName,
            recordType,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch,
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}",
        urlParameters: [
            resourceGroupName,
            zoneName,
            relativeRecordSetName,
            recordType,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecordSet
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listByTypeOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}",
        urlParameters: [
            resourceGroupName,
            zoneName,
            recordType,
            subscriptionId
        ],
        queryParameters: [
            top,
            recordsetnamesuffix,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecordSetListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listByDnsZoneOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/recordsets",
        urlParameters: [
            resourceGroupName,
            zoneName,
            subscriptionId
        ],
        queryParameters: [
            top,
            recordsetnamesuffix,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecordSetListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listAllByDnsZoneOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/all",
        urlParameters: [
            resourceGroupName,
            zoneName,
            subscriptionId
        ],
        queryParameters: [
            top,
            recordSetNameSuffix,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecordSetListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listByTypeNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecordSetListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listByDnsZoneNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecordSetListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listAllByDnsZoneNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecordSetListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        Zone: Zone,
        Resource: Resource,
        BaseResource: BaseResource,
        SubResource: SubResource,
        CloudError: CloudError,
        ZoneUpdate: ZoneUpdate,
        ZoneListResult: ZoneListResult,
        RecordSet: RecordSet,
        ARecord: ARecord,
        AaaaRecord: AaaaRecord,
        MxRecord: MxRecord,
        NsRecord: NsRecord,
        PtrRecord: PtrRecord,
        SrvRecord: SrvRecord,
        TxtRecord: TxtRecord,
        CnameRecord: CnameRecord,
        SoaRecord: SoaRecord,
        CaaRecord: CaaRecord
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Zones. */
    var Zones = /** @class */ (function () {
        /**
         * Create a Zones.
         * @param {DnsManagementClientContext} client Reference to the service client.
         */
        function Zones(client) {
            this.client = client;
        }
        Zones.prototype.createOrUpdate = function (resourceGroupName$$1, zoneName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                zoneName: zoneName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$1, callback);
        };
        /**
         * Deletes a DNS zone. WARNING: All DNS records in the zone will also be deleted. This operation
         * cannot be undone.
         * @param resourceGroupName The name of the resource group.
         * @param zoneName The name of the DNS zone (without a terminating dot).
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Zones.prototype.deleteMethod = function (resourceGroupName$$1, zoneName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, zoneName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Zones.prototype.get = function (resourceGroupName$$1, zoneName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                zoneName: zoneName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        Zones.prototype.update = function (resourceGroupName$$1, zoneName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                zoneName: zoneName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec$1, callback);
        };
        Zones.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Zones.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        /**
         * Deletes a DNS zone. WARNING: All DNS records in the zone will also be deleted. This operation
         * cannot be undone.
         * @param resourceGroupName The name of the resource group.
         * @param zoneName The name of the DNS zone (without a terminating dot).
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Zones.prototype.beginDeleteMethod = function (resourceGroupName$$1, zoneName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                zoneName: zoneName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        Zones.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        Zones.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Zones;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var createOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}",
        urlParameters: [
            resourceGroupName,
            zoneName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch,
            ifNoneMatch,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Zone, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Zone
            },
            201: {
                bodyMapper: Zone
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}",
        urlParameters: [
            resourceGroupName,
            zoneName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Zone
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var updateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}",
        urlParameters: [
            resourceGroupName,
            zoneName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ZoneUpdate, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Zone
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            top,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ZoneListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/dnszones",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            top,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ZoneListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}",
        urlParameters: [
            resourceGroupName,
            zoneName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch,
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ZoneListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ZoneListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        DnsResourceReferenceRequest: DnsResourceReferenceRequest,
        SubResource: SubResource,
        DnsResourceReferenceResult: DnsResourceReferenceResult,
        DnsResourceReference: DnsResourceReference,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DnsResourceReferenceOperations. */
    var DnsResourceReferenceOperations = /** @class */ (function () {
        /**
         * Create a DnsResourceReferenceOperations.
         * @param {DnsManagementClientContext} client Reference to the service client.
         */
        function DnsResourceReferenceOperations(client) {
            this.client = client;
        }
        DnsResourceReferenceOperations.prototype.getByTargetResources = function (parameters, options, callback) {
            return this.client.sendOperationRequest({
                parameters: parameters,
                options: options
            }, getByTargetResourcesOperationSpec, callback);
        };
        return DnsResourceReferenceOperations;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var getByTargetResourcesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/getDnsResourceReference",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, DnsResourceReferenceRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: DnsResourceReferenceResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-dns";
    var packageVersion = "1.0.0";
    var DnsManagementClientContext = /** @class */ (function (_super) {
        __extends(DnsManagementClientContext, _super);
        /**
         * Initializes a new instance of the DnsManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Specifies the Azure subscription ID, which uniquely identifies the
         * Microsoft Azure subscription.
         * @param [options] The parameter options
         */
        function DnsManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2018-05-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return DnsManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var DnsManagementClient = /** @class */ (function (_super) {
        __extends(DnsManagementClient, _super);
        /**
         * Initializes a new instance of the DnsManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Specifies the Azure subscription ID, which uniquely identifies the
         * Microsoft Azure subscription.
         * @param [options] The parameter options
         */
        function DnsManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.recordSets = new RecordSets(_this);
            _this.zones = new Zones(_this);
            _this.dnsResourceReference = new DnsResourceReferenceOperations(_this);
            return _this;
        }
        return DnsManagementClient;
    }(DnsManagementClientContext));

    exports.DnsManagementClient = DnsManagementClient;
    exports.DnsManagementClientContext = DnsManagementClientContext;
    exports.DnsManagementModels = index;
    exports.DnsManagementMappers = mappers;
    exports.RecordSets = RecordSets;
    exports.Zones = Zones;
    exports.DnsResourceReferenceOperations = DnsResourceReferenceOperations;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-dns.js.map
