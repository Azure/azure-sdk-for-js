/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmBatchai = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for UsageUnit.
     * Possible values include: 'Count'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: UsageUnit = <UsageUnit>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var UsageUnit;
    (function (UsageUnit) {
        UsageUnit["Count"] = "Count";
    })(UsageUnit || (UsageUnit = {}));
    /**
     * Defines values for CachingType.
     * Possible values include: 'none', 'readonly', 'readwrite'
     * @readonly
     * @enum {string}
     */
    var CachingType;
    (function (CachingType) {
        CachingType["None"] = "none";
        CachingType["Readonly"] = "readonly";
        CachingType["Readwrite"] = "readwrite";
    })(CachingType || (CachingType = {}));
    /**
     * Defines values for StorageAccountType.
     * Possible values include: 'Standard_LRS', 'Premium_LRS'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: StorageAccountType =
     * <StorageAccountType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var StorageAccountType;
    (function (StorageAccountType) {
        StorageAccountType["StandardLRS"] = "Standard_LRS";
        StorageAccountType["PremiumLRS"] = "Premium_LRS";
    })(StorageAccountType || (StorageAccountType = {}));
    /**
     * Defines values for FileServerProvisioningState.
     * Possible values include: 'creating', 'updating', 'deleting', 'succeeded',
     * 'failed'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: FileServerProvisioningState =
     * <FileServerProvisioningState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var FileServerProvisioningState;
    (function (FileServerProvisioningState) {
        FileServerProvisioningState["Creating"] = "creating";
        FileServerProvisioningState["Updating"] = "updating";
        FileServerProvisioningState["Deleting"] = "deleting";
        FileServerProvisioningState["Succeeded"] = "succeeded";
        FileServerProvisioningState["Failed"] = "failed";
    })(FileServerProvisioningState || (FileServerProvisioningState = {}));
    /**
     * Defines values for VmPriority.
     * Possible values include: 'dedicated', 'lowpriority'
     * @readonly
     * @enum {string}
     */
    var VmPriority;
    (function (VmPriority) {
        VmPriority["Dedicated"] = "dedicated";
        VmPriority["Lowpriority"] = "lowpriority";
    })(VmPriority || (VmPriority = {}));
    /**
     * Defines values for DeallocationOption.
     * Possible values include: 'requeue', 'terminate', 'waitforjobcompletion'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: DeallocationOption =
     * <DeallocationOption>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var DeallocationOption;
    (function (DeallocationOption) {
        DeallocationOption["Requeue"] = "requeue";
        DeallocationOption["Terminate"] = "terminate";
        DeallocationOption["Waitforjobcompletion"] = "waitforjobcompletion";
    })(DeallocationOption || (DeallocationOption = {}));
    /**
     * Defines values for ProvisioningState.
     * Possible values include: 'creating', 'succeeded', 'failed', 'deleting'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ProvisioningState =
     * <ProvisioningState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ProvisioningState;
    (function (ProvisioningState) {
        ProvisioningState["Creating"] = "creating";
        ProvisioningState["Succeeded"] = "succeeded";
        ProvisioningState["Failed"] = "failed";
        ProvisioningState["Deleting"] = "deleting";
    })(ProvisioningState || (ProvisioningState = {}));
    /**
     * Defines values for AllocationState.
     * Possible values include: 'steady', 'resizing'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: AllocationState =
     * <AllocationState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var AllocationState;
    (function (AllocationState) {
        AllocationState["Steady"] = "steady";
        AllocationState["Resizing"] = "resizing";
    })(AllocationState || (AllocationState = {}));
    /**
     * Defines values for JobPriority.
     * Possible values include: 'low', 'normal', 'high'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: JobPriority =
     * <JobPriority>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var JobPriority;
    (function (JobPriority) {
        JobPriority["Low"] = "low";
        JobPriority["Normal"] = "normal";
        JobPriority["High"] = "high";
    })(JobPriority || (JobPriority = {}));
    /**
     * Defines values for ToolType.
     * Possible values include: 'cntk', 'tensorflow', 'caffe', 'caffe2', 'chainer',
     * 'horovod', 'custommpi', 'custom'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ToolType = <ToolType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ToolType;
    (function (ToolType) {
        ToolType["Cntk"] = "cntk";
        ToolType["Tensorflow"] = "tensorflow";
        ToolType["Caffe"] = "caffe";
        ToolType["Caffe2"] = "caffe2";
        ToolType["Chainer"] = "chainer";
        ToolType["Horovod"] = "horovod";
        ToolType["Custommpi"] = "custommpi";
        ToolType["Custom"] = "custom";
    })(ToolType || (ToolType = {}));
    /**
     * Defines values for ExecutionState.
     * Possible values include: 'queued', 'running', 'terminating', 'succeeded',
     * 'failed'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ExecutionState =
     * <ExecutionState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ExecutionState;
    (function (ExecutionState) {
        ExecutionState["Queued"] = "queued";
        ExecutionState["Running"] = "running";
        ExecutionState["Terminating"] = "terminating";
        ExecutionState["Succeeded"] = "succeeded";
        ExecutionState["Failed"] = "failed";
    })(ExecutionState || (ExecutionState = {}));
    /**
     * Defines values for FileType.
     * Possible values include: 'file', 'directory'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: FileType = <FileType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var FileType;
    (function (FileType) {
        FileType["File"] = "file";
        FileType["Directory"] = "directory";
    })(FileType || (FileType = {}));

    var index = /*#__PURE__*/Object.freeze({
        get UsageUnit () { return UsageUnit; },
        get CachingType () { return CachingType; },
        get StorageAccountType () { return StorageAccountType; },
        get FileServerProvisioningState () { return FileServerProvisioningState; },
        get VmPriority () { return VmPriority; },
        get DeallocationOption () { return DeallocationOption; },
        get ProvisioningState () { return ProvisioningState; },
        get AllocationState () { return AllocationState; },
        get JobPriority () { return JobPriority; },
        get ToolType () { return ToolType; },
        get ExecutionState () { return ExecutionState; },
        get FileType () { return FileType; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var UsageName = {
        serializedName: "UsageName",
        type: {
            name: "Composite",
            className: "UsageName",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                localizedValue: {
                    readOnly: true,
                    serializedName: "localizedValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Usage = {
        serializedName: "Usage",
        type: {
            name: "Composite",
            className: "Usage",
            modelProperties: {
                unit: {
                    readOnly: true,
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                currentValue: {
                    readOnly: true,
                    serializedName: "currentValue",
                    type: {
                        name: "Number"
                    }
                },
                limit: {
                    readOnly: true,
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "UsageName"
                    }
                }
            }
        }
    };
    var UserAccountSettings = {
        serializedName: "UserAccountSettings",
        type: {
            name: "Composite",
            className: "UserAccountSettings",
            modelProperties: {
                adminUserName: {
                    required: true,
                    serializedName: "adminUserName",
                    type: {
                        name: "String"
                    }
                },
                adminUserSshPublicKey: {
                    serializedName: "adminUserSshPublicKey",
                    type: {
                        name: "String"
                    }
                },
                adminUserPassword: {
                    serializedName: "adminUserPassword",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SshConfiguration = {
        serializedName: "SshConfiguration",
        type: {
            name: "Composite",
            className: "SshConfiguration",
            modelProperties: {
                publicIPsToAllow: {
                    serializedName: "publicIPsToAllow",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                userAccountSettings: {
                    required: true,
                    serializedName: "userAccountSettings",
                    type: {
                        name: "Composite",
                        className: "UserAccountSettings"
                    }
                }
            }
        }
    };
    var DataDisks = {
        serializedName: "DataDisks",
        type: {
            name: "Composite",
            className: "DataDisks",
            modelProperties: {
                diskSizeInGB: {
                    required: true,
                    serializedName: "diskSizeInGB",
                    type: {
                        name: "Number"
                    }
                },
                cachingType: {
                    serializedName: "cachingType",
                    defaultValue: 'none',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "none",
                            "readonly",
                            "readwrite"
                        ]
                    }
                },
                diskCount: {
                    required: true,
                    serializedName: "diskCount",
                    type: {
                        name: "Number"
                    }
                },
                storageAccountType: {
                    required: true,
                    serializedName: "storageAccountType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceId = {
        serializedName: "ResourceId",
        type: {
            name: "Composite",
            className: "ResourceId",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MountSettings = {
        serializedName: "MountSettings",
        type: {
            name: "Composite",
            className: "MountSettings",
            modelProperties: {
                mountPoint: {
                    serializedName: "mountPoint",
                    type: {
                        name: "String"
                    }
                },
                fileServerPublicIP: {
                    serializedName: "fileServerPublicIP",
                    type: {
                        name: "String"
                    }
                },
                fileServerInternalIP: {
                    serializedName: "fileServerInternalIP",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProxyResource = {
        serializedName: "ProxyResource",
        type: {
            name: "Composite",
            className: "ProxyResource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FileServer = {
        serializedName: "FileServer",
        type: {
            name: "Composite",
            className: "FileServer",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { vmSize: {
                    serializedName: "properties.vmSize",
                    type: {
                        name: "String"
                    }
                }, sshConfiguration: {
                    serializedName: "properties.sshConfiguration",
                    type: {
                        name: "Composite",
                        className: "SshConfiguration"
                    }
                }, dataDisks: {
                    serializedName: "properties.dataDisks",
                    type: {
                        name: "Composite",
                        className: "DataDisks"
                    }
                }, subnet: {
                    serializedName: "properties.subnet",
                    type: {
                        name: "Composite",
                        className: "ResourceId"
                    }
                }, mountSettings: {
                    readOnly: true,
                    serializedName: "properties.mountSettings",
                    type: {
                        name: "Composite",
                        className: "MountSettings"
                    }
                }, provisioningStateTransitionTime: {
                    readOnly: true,
                    serializedName: "properties.provisioningStateTransitionTime",
                    type: {
                        name: "DateTime"
                    }
                }, creationTime: {
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, provisioningState: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var KeyVaultSecretReference = {
        serializedName: "KeyVaultSecretReference",
        type: {
            name: "Composite",
            className: "KeyVaultSecretReference",
            modelProperties: {
                sourceVault: {
                    required: true,
                    serializedName: "sourceVault",
                    type: {
                        name: "Composite",
                        className: "ResourceId"
                    }
                },
                secretUrl: {
                    required: true,
                    serializedName: "secretUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FileServerCreateParameters = {
        serializedName: "FileServerCreateParameters",
        type: {
            name: "Composite",
            className: "FileServerCreateParameters",
            modelProperties: {
                vmSize: {
                    required: true,
                    serializedName: "properties.vmSize",
                    type: {
                        name: "String"
                    }
                },
                sshConfiguration: {
                    required: true,
                    serializedName: "properties.sshConfiguration",
                    type: {
                        name: "Composite",
                        className: "SshConfiguration"
                    }
                },
                dataDisks: {
                    required: true,
                    serializedName: "properties.dataDisks",
                    type: {
                        name: "Composite",
                        className: "DataDisks"
                    }
                },
                subnet: {
                    serializedName: "properties.subnet",
                    type: {
                        name: "Composite",
                        className: "ResourceId"
                    }
                }
            }
        }
    };
    var ManualScaleSettings = {
        serializedName: "ManualScaleSettings",
        type: {
            name: "Composite",
            className: "ManualScaleSettings",
            modelProperties: {
                targetNodeCount: {
                    required: true,
                    serializedName: "targetNodeCount",
                    defaultValue: 0,
                    type: {
                        name: "Number"
                    }
                },
                nodeDeallocationOption: {
                    serializedName: "nodeDeallocationOption",
                    defaultValue: 'requeue',
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AutoScaleSettings = {
        serializedName: "AutoScaleSettings",
        type: {
            name: "Composite",
            className: "AutoScaleSettings",
            modelProperties: {
                minimumNodeCount: {
                    required: true,
                    serializedName: "minimumNodeCount",
                    type: {
                        name: "Number"
                    }
                },
                maximumNodeCount: {
                    required: true,
                    serializedName: "maximumNodeCount",
                    type: {
                        name: "Number"
                    }
                },
                initialNodeCount: {
                    serializedName: "initialNodeCount",
                    defaultValue: 0,
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ScaleSettings = {
        serializedName: "ScaleSettings",
        type: {
            name: "Composite",
            className: "ScaleSettings",
            modelProperties: {
                manual: {
                    serializedName: "manual",
                    type: {
                        name: "Composite",
                        className: "ManualScaleSettings"
                    }
                },
                autoScale: {
                    serializedName: "autoScale",
                    type: {
                        name: "Composite",
                        className: "AutoScaleSettings"
                    }
                }
            }
        }
    };
    var ImageReference = {
        serializedName: "ImageReference",
        type: {
            name: "Composite",
            className: "ImageReference",
            modelProperties: {
                publisher: {
                    required: true,
                    serializedName: "publisher",
                    type: {
                        name: "String"
                    }
                },
                offer: {
                    required: true,
                    serializedName: "offer",
                    type: {
                        name: "String"
                    }
                },
                sku: {
                    required: true,
                    serializedName: "sku",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                },
                virtualMachineImageId: {
                    serializedName: "virtualMachineImageId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineConfiguration = {
        serializedName: "VirtualMachineConfiguration",
        type: {
            name: "Composite",
            className: "VirtualMachineConfiguration",
            modelProperties: {
                imageReference: {
                    serializedName: "imageReference",
                    type: {
                        name: "Composite",
                        className: "ImageReference"
                    }
                }
            }
        }
    };
    var EnvironmentVariable = {
        serializedName: "EnvironmentVariable",
        type: {
            name: "Composite",
            className: "EnvironmentVariable",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EnvironmentVariableWithSecretValue = {
        serializedName: "EnvironmentVariableWithSecretValue",
        type: {
            name: "Composite",
            className: "EnvironmentVariableWithSecretValue",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                valueSecretReference: {
                    serializedName: "valueSecretReference",
                    type: {
                        name: "Composite",
                        className: "KeyVaultSecretReference"
                    }
                }
            }
        }
    };
    var SetupTask = {
        serializedName: "SetupTask",
        type: {
            name: "Composite",
            className: "SetupTask",
            modelProperties: {
                commandLine: {
                    required: true,
                    serializedName: "commandLine",
                    type: {
                        name: "String"
                    }
                },
                environmentVariables: {
                    serializedName: "environmentVariables",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EnvironmentVariable"
                            }
                        }
                    }
                },
                secrets: {
                    serializedName: "secrets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EnvironmentVariableWithSecretValue"
                            }
                        }
                    }
                },
                stdOutErrPathPrefix: {
                    required: true,
                    serializedName: "stdOutErrPathPrefix",
                    type: {
                        name: "String"
                    }
                },
                stdOutErrPathSuffix: {
                    readOnly: true,
                    serializedName: "stdOutErrPathSuffix",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AzureStorageCredentialsInfo = {
        serializedName: "AzureStorageCredentialsInfo",
        type: {
            name: "Composite",
            className: "AzureStorageCredentialsInfo",
            modelProperties: {
                accountKey: {
                    serializedName: "accountKey",
                    type: {
                        name: "String"
                    }
                },
                accountKeySecretReference: {
                    serializedName: "accountKeySecretReference",
                    type: {
                        name: "Composite",
                        className: "KeyVaultSecretReference"
                    }
                }
            }
        }
    };
    var AzureFileShareReference = {
        serializedName: "AzureFileShareReference",
        type: {
            name: "Composite",
            className: "AzureFileShareReference",
            modelProperties: {
                accountName: {
                    required: true,
                    serializedName: "accountName",
                    type: {
                        name: "String"
                    }
                },
                azureFileUrl: {
                    required: true,
                    serializedName: "azureFileUrl",
                    type: {
                        name: "String"
                    }
                },
                credentials: {
                    required: true,
                    serializedName: "credentials",
                    type: {
                        name: "Composite",
                        className: "AzureStorageCredentialsInfo"
                    }
                },
                relativeMountPath: {
                    required: true,
                    serializedName: "relativeMountPath",
                    type: {
                        name: "String"
                    }
                },
                fileMode: {
                    serializedName: "fileMode",
                    defaultValue: '0777',
                    type: {
                        name: "String"
                    }
                },
                directoryMode: {
                    serializedName: "directoryMode",
                    defaultValue: '0777',
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AzureBlobFileSystemReference = {
        serializedName: "AzureBlobFileSystemReference",
        type: {
            name: "Composite",
            className: "AzureBlobFileSystemReference",
            modelProperties: {
                accountName: {
                    required: true,
                    serializedName: "accountName",
                    type: {
                        name: "String"
                    }
                },
                containerName: {
                    required: true,
                    serializedName: "containerName",
                    type: {
                        name: "String"
                    }
                },
                credentials: {
                    required: true,
                    serializedName: "credentials",
                    type: {
                        name: "Composite",
                        className: "AzureStorageCredentialsInfo"
                    }
                },
                relativeMountPath: {
                    required: true,
                    serializedName: "relativeMountPath",
                    type: {
                        name: "String"
                    }
                },
                mountOptions: {
                    serializedName: "mountOptions",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FileServerReference = {
        serializedName: "FileServerReference",
        type: {
            name: "Composite",
            className: "FileServerReference",
            modelProperties: {
                fileServer: {
                    required: true,
                    serializedName: "fileServer",
                    type: {
                        name: "Composite",
                        className: "ResourceId"
                    }
                },
                sourceDirectory: {
                    serializedName: "sourceDirectory",
                    type: {
                        name: "String"
                    }
                },
                relativeMountPath: {
                    required: true,
                    serializedName: "relativeMountPath",
                    type: {
                        name: "String"
                    }
                },
                mountOptions: {
                    serializedName: "mountOptions",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UnmanagedFileSystemReference = {
        serializedName: "UnmanagedFileSystemReference",
        type: {
            name: "Composite",
            className: "UnmanagedFileSystemReference",
            modelProperties: {
                mountCommand: {
                    required: true,
                    serializedName: "mountCommand",
                    type: {
                        name: "String"
                    }
                },
                relativeMountPath: {
                    required: true,
                    serializedName: "relativeMountPath",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MountVolumes = {
        serializedName: "MountVolumes",
        type: {
            name: "Composite",
            className: "MountVolumes",
            modelProperties: {
                azureFileShares: {
                    serializedName: "azureFileShares",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AzureFileShareReference"
                            }
                        }
                    }
                },
                azureBlobFileSystems: {
                    serializedName: "azureBlobFileSystems",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AzureBlobFileSystemReference"
                            }
                        }
                    }
                },
                fileServers: {
                    serializedName: "fileServers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FileServerReference"
                            }
                        }
                    }
                },
                unmanagedFileSystems: {
                    serializedName: "unmanagedFileSystems",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UnmanagedFileSystemReference"
                            }
                        }
                    }
                }
            }
        }
    };
    var AppInsightsReference = {
        serializedName: "AppInsightsReference",
        type: {
            name: "Composite",
            className: "AppInsightsReference",
            modelProperties: {
                component: {
                    required: true,
                    serializedName: "component",
                    type: {
                        name: "Composite",
                        className: "ResourceId"
                    }
                },
                instrumentationKey: {
                    serializedName: "instrumentationKey",
                    type: {
                        name: "String"
                    }
                },
                instrumentationKeySecretReference: {
                    serializedName: "instrumentationKeySecretReference",
                    type: {
                        name: "Composite",
                        className: "KeyVaultSecretReference"
                    }
                }
            }
        }
    };
    var PerformanceCountersSettings = {
        serializedName: "PerformanceCountersSettings",
        type: {
            name: "Composite",
            className: "PerformanceCountersSettings",
            modelProperties: {
                appInsightsReference: {
                    required: true,
                    serializedName: "appInsightsReference",
                    type: {
                        name: "Composite",
                        className: "AppInsightsReference"
                    }
                }
            }
        }
    };
    var NodeSetup = {
        serializedName: "NodeSetup",
        type: {
            name: "Composite",
            className: "NodeSetup",
            modelProperties: {
                setupTask: {
                    serializedName: "setupTask",
                    type: {
                        name: "Composite",
                        className: "SetupTask"
                    }
                },
                mountVolumes: {
                    serializedName: "mountVolumes",
                    type: {
                        name: "Composite",
                        className: "MountVolumes"
                    }
                },
                performanceCountersSettings: {
                    serializedName: "performanceCountersSettings",
                    type: {
                        name: "Composite",
                        className: "PerformanceCountersSettings"
                    }
                }
            }
        }
    };
    var NodeStateCounts = {
        serializedName: "NodeStateCounts",
        type: {
            name: "Composite",
            className: "NodeStateCounts",
            modelProperties: {
                idleNodeCount: {
                    readOnly: true,
                    serializedName: "idleNodeCount",
                    type: {
                        name: "Number"
                    }
                },
                runningNodeCount: {
                    readOnly: true,
                    serializedName: "runningNodeCount",
                    type: {
                        name: "Number"
                    }
                },
                preparingNodeCount: {
                    readOnly: true,
                    serializedName: "preparingNodeCount",
                    type: {
                        name: "Number"
                    }
                },
                unusableNodeCount: {
                    readOnly: true,
                    serializedName: "unusableNodeCount",
                    type: {
                        name: "Number"
                    }
                },
                leavingNodeCount: {
                    readOnly: true,
                    serializedName: "leavingNodeCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ClusterCreateParameters = {
        serializedName: "ClusterCreateParameters",
        type: {
            name: "Composite",
            className: "ClusterCreateParameters",
            modelProperties: {
                vmSize: {
                    required: true,
                    serializedName: "properties.vmSize",
                    type: {
                        name: "String"
                    }
                },
                vmPriority: {
                    serializedName: "properties.vmPriority",
                    defaultValue: 'dedicated',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "dedicated",
                            "lowpriority"
                        ]
                    }
                },
                scaleSettings: {
                    serializedName: "properties.scaleSettings",
                    type: {
                        name: "Composite",
                        className: "ScaleSettings"
                    }
                },
                virtualMachineConfiguration: {
                    serializedName: "properties.virtualMachineConfiguration",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineConfiguration"
                    }
                },
                nodeSetup: {
                    serializedName: "properties.nodeSetup",
                    type: {
                        name: "Composite",
                        className: "NodeSetup"
                    }
                },
                userAccountSettings: {
                    required: true,
                    serializedName: "properties.userAccountSettings",
                    type: {
                        name: "Composite",
                        className: "UserAccountSettings"
                    }
                },
                subnet: {
                    serializedName: "properties.subnet",
                    type: {
                        name: "Composite",
                        className: "ResourceId"
                    }
                }
            }
        }
    };
    var ClusterUpdateParameters = {
        serializedName: "ClusterUpdateParameters",
        type: {
            name: "Composite",
            className: "ClusterUpdateParameters",
            modelProperties: {
                scaleSettings: {
                    serializedName: "properties.scaleSettings",
                    type: {
                        name: "Composite",
                        className: "ScaleSettings"
                    }
                }
            }
        }
    };
    var NameValuePair = {
        serializedName: "NameValuePair",
        type: {
            name: "Composite",
            className: "NameValuePair",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BatchAIError = {
        serializedName: "BatchAIError",
        type: {
            name: "Composite",
            className: "BatchAIError",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    readOnly: true,
                    serializedName: "details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NameValuePair"
                            }
                        }
                    }
                }
            }
        }
    };
    var Cluster = {
        serializedName: "Cluster",
        type: {
            name: "Composite",
            className: "Cluster",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { vmSize: {
                    serializedName: "properties.vmSize",
                    type: {
                        name: "String"
                    }
                }, vmPriority: {
                    serializedName: "properties.vmPriority",
                    defaultValue: 'dedicated',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "dedicated",
                            "lowpriority"
                        ]
                    }
                }, scaleSettings: {
                    serializedName: "properties.scaleSettings",
                    type: {
                        name: "Composite",
                        className: "ScaleSettings"
                    }
                }, virtualMachineConfiguration: {
                    serializedName: "properties.virtualMachineConfiguration",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineConfiguration"
                    }
                }, nodeSetup: {
                    serializedName: "properties.nodeSetup",
                    type: {
                        name: "Composite",
                        className: "NodeSetup"
                    }
                }, userAccountSettings: {
                    serializedName: "properties.userAccountSettings",
                    type: {
                        name: "Composite",
                        className: "UserAccountSettings"
                    }
                }, subnet: {
                    serializedName: "properties.subnet",
                    type: {
                        name: "Composite",
                        className: "ResourceId"
                    }
                }, creationTime: {
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, provisioningState: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, provisioningStateTransitionTime: {
                    readOnly: true,
                    serializedName: "properties.provisioningStateTransitionTime",
                    type: {
                        name: "DateTime"
                    }
                }, allocationState: {
                    readOnly: true,
                    serializedName: "properties.allocationState",
                    type: {
                        name: "String"
                    }
                }, allocationStateTransitionTime: {
                    readOnly: true,
                    serializedName: "properties.allocationStateTransitionTime",
                    type: {
                        name: "DateTime"
                    }
                }, errors: {
                    readOnly: true,
                    serializedName: "properties.errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BatchAIError"
                            }
                        }
                    }
                }, currentNodeCount: {
                    readOnly: true,
                    serializedName: "properties.currentNodeCount",
                    type: {
                        name: "Number"
                    }
                }, nodeStateCounts: {
                    readOnly: true,
                    serializedName: "properties.nodeStateCounts",
                    type: {
                        name: "Composite",
                        className: "NodeStateCounts"
                    }
                } })
        }
    };
    var PrivateRegistryCredentials = {
        serializedName: "PrivateRegistryCredentials",
        type: {
            name: "Composite",
            className: "PrivateRegistryCredentials",
            modelProperties: {
                username: {
                    required: true,
                    serializedName: "username",
                    type: {
                        name: "String"
                    }
                },
                password: {
                    serializedName: "password",
                    type: {
                        name: "String"
                    }
                },
                passwordSecretReference: {
                    serializedName: "passwordSecretReference",
                    type: {
                        name: "Composite",
                        className: "KeyVaultSecretReference"
                    }
                }
            }
        }
    };
    var ImageSourceRegistry = {
        serializedName: "ImageSourceRegistry",
        type: {
            name: "Composite",
            className: "ImageSourceRegistry",
            modelProperties: {
                serverUrl: {
                    serializedName: "serverUrl",
                    type: {
                        name: "String"
                    }
                },
                image: {
                    required: true,
                    serializedName: "image",
                    type: {
                        name: "String"
                    }
                },
                credentials: {
                    serializedName: "credentials",
                    type: {
                        name: "Composite",
                        className: "PrivateRegistryCredentials"
                    }
                }
            }
        }
    };
    var ContainerSettings = {
        serializedName: "ContainerSettings",
        type: {
            name: "Composite",
            className: "ContainerSettings",
            modelProperties: {
                imageSourceRegistry: {
                    required: true,
                    serializedName: "imageSourceRegistry",
                    type: {
                        name: "Composite",
                        className: "ImageSourceRegistry"
                    }
                },
                shmSize: {
                    serializedName: "shmSize",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CNTKsettings = {
        serializedName: "CNTKsettings",
        type: {
            name: "Composite",
            className: "CNTKsettings",
            modelProperties: {
                languageType: {
                    serializedName: "languageType",
                    type: {
                        name: "String"
                    }
                },
                configFilePath: {
                    serializedName: "configFilePath",
                    type: {
                        name: "String"
                    }
                },
                pythonScriptFilePath: {
                    serializedName: "pythonScriptFilePath",
                    type: {
                        name: "String"
                    }
                },
                pythonInterpreterPath: {
                    serializedName: "pythonInterpreterPath",
                    type: {
                        name: "String"
                    }
                },
                commandLineArgs: {
                    serializedName: "commandLineArgs",
                    type: {
                        name: "String"
                    }
                },
                processCount: {
                    serializedName: "processCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var PyTorchSettings = {
        serializedName: "PyTorchSettings",
        type: {
            name: "Composite",
            className: "PyTorchSettings",
            modelProperties: {
                pythonScriptFilePath: {
                    required: true,
                    serializedName: "pythonScriptFilePath",
                    type: {
                        name: "String"
                    }
                },
                pythonInterpreterPath: {
                    serializedName: "pythonInterpreterPath",
                    type: {
                        name: "String"
                    }
                },
                commandLineArgs: {
                    serializedName: "commandLineArgs",
                    type: {
                        name: "String"
                    }
                },
                processCount: {
                    serializedName: "processCount",
                    type: {
                        name: "Number"
                    }
                },
                communicationBackend: {
                    serializedName: "communicationBackend",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TensorFlowSettings = {
        serializedName: "TensorFlowSettings",
        type: {
            name: "Composite",
            className: "TensorFlowSettings",
            modelProperties: {
                pythonScriptFilePath: {
                    required: true,
                    serializedName: "pythonScriptFilePath",
                    type: {
                        name: "String"
                    }
                },
                pythonInterpreterPath: {
                    serializedName: "pythonInterpreterPath",
                    type: {
                        name: "String"
                    }
                },
                masterCommandLineArgs: {
                    serializedName: "masterCommandLineArgs",
                    type: {
                        name: "String"
                    }
                },
                workerCommandLineArgs: {
                    serializedName: "workerCommandLineArgs",
                    type: {
                        name: "String"
                    }
                },
                parameterServerCommandLineArgs: {
                    serializedName: "parameterServerCommandLineArgs",
                    type: {
                        name: "String"
                    }
                },
                workerCount: {
                    serializedName: "workerCount",
                    type: {
                        name: "Number"
                    }
                },
                parameterServerCount: {
                    serializedName: "parameterServerCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var CaffeSettings = {
        serializedName: "CaffeSettings",
        type: {
            name: "Composite",
            className: "CaffeSettings",
            modelProperties: {
                configFilePath: {
                    serializedName: "configFilePath",
                    type: {
                        name: "String"
                    }
                },
                pythonScriptFilePath: {
                    serializedName: "pythonScriptFilePath",
                    type: {
                        name: "String"
                    }
                },
                pythonInterpreterPath: {
                    serializedName: "pythonInterpreterPath",
                    type: {
                        name: "String"
                    }
                },
                commandLineArgs: {
                    serializedName: "commandLineArgs",
                    type: {
                        name: "String"
                    }
                },
                processCount: {
                    serializedName: "processCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Caffe2Settings = {
        serializedName: "Caffe2Settings",
        type: {
            name: "Composite",
            className: "Caffe2Settings",
            modelProperties: {
                pythonScriptFilePath: {
                    required: true,
                    serializedName: "pythonScriptFilePath",
                    type: {
                        name: "String"
                    }
                },
                pythonInterpreterPath: {
                    serializedName: "pythonInterpreterPath",
                    type: {
                        name: "String"
                    }
                },
                commandLineArgs: {
                    serializedName: "commandLineArgs",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ChainerSettings = {
        serializedName: "ChainerSettings",
        type: {
            name: "Composite",
            className: "ChainerSettings",
            modelProperties: {
                pythonScriptFilePath: {
                    required: true,
                    serializedName: "pythonScriptFilePath",
                    type: {
                        name: "String"
                    }
                },
                pythonInterpreterPath: {
                    serializedName: "pythonInterpreterPath",
                    type: {
                        name: "String"
                    }
                },
                commandLineArgs: {
                    serializedName: "commandLineArgs",
                    type: {
                        name: "String"
                    }
                },
                processCount: {
                    serializedName: "processCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var CustomToolkitSettings = {
        serializedName: "CustomToolkitSettings",
        type: {
            name: "Composite",
            className: "CustomToolkitSettings",
            modelProperties: {
                commandLine: {
                    serializedName: "commandLine",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CustomMpiSettings = {
        serializedName: "CustomMpiSettings",
        type: {
            name: "Composite",
            className: "CustomMpiSettings",
            modelProperties: {
                commandLine: {
                    required: true,
                    serializedName: "commandLine",
                    type: {
                        name: "String"
                    }
                },
                processCount: {
                    serializedName: "processCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var HorovodSettings = {
        serializedName: "HorovodSettings",
        type: {
            name: "Composite",
            className: "HorovodSettings",
            modelProperties: {
                pythonScriptFilePath: {
                    required: true,
                    serializedName: "pythonScriptFilePath",
                    type: {
                        name: "String"
                    }
                },
                pythonInterpreterPath: {
                    serializedName: "pythonInterpreterPath",
                    type: {
                        name: "String"
                    }
                },
                commandLineArgs: {
                    serializedName: "commandLineArgs",
                    type: {
                        name: "String"
                    }
                },
                processCount: {
                    serializedName: "processCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var JobPreparation = {
        serializedName: "JobPreparation",
        type: {
            name: "Composite",
            className: "JobPreparation",
            modelProperties: {
                commandLine: {
                    required: true,
                    serializedName: "commandLine",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InputDirectory = {
        serializedName: "InputDirectory",
        type: {
            name: "Composite",
            className: "InputDirectory",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                path: {
                    required: true,
                    serializedName: "path",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OutputDirectory = {
        serializedName: "OutputDirectory",
        type: {
            name: "Composite",
            className: "OutputDirectory",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                pathPrefix: {
                    required: true,
                    serializedName: "pathPrefix",
                    type: {
                        name: "String"
                    }
                },
                pathSuffix: {
                    serializedName: "pathSuffix",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobBasePropertiesConstraints = {
        serializedName: "JobBaseProperties_constraints",
        type: {
            name: "Composite",
            className: "JobBasePropertiesConstraints",
            modelProperties: {
                maxWallClockTime: {
                    serializedName: "maxWallClockTime",
                    defaultValue: '7.00:00:00',
                    type: {
                        name: "TimeSpan"
                    }
                }
            }
        }
    };
    var JobCreateParameters = {
        serializedName: "JobCreateParameters",
        type: {
            name: "Composite",
            className: "JobCreateParameters",
            modelProperties: {
                schedulingPriority: {
                    serializedName: "properties.schedulingPriority",
                    defaultValue: 'normal',
                    type: {
                        name: "String"
                    }
                },
                cluster: {
                    required: true,
                    serializedName: "properties.cluster",
                    type: {
                        name: "Composite",
                        className: "ResourceId"
                    }
                },
                mountVolumes: {
                    serializedName: "properties.mountVolumes",
                    type: {
                        name: "Composite",
                        className: "MountVolumes"
                    }
                },
                nodeCount: {
                    required: true,
                    serializedName: "properties.nodeCount",
                    type: {
                        name: "Number"
                    }
                },
                containerSettings: {
                    serializedName: "properties.containerSettings",
                    type: {
                        name: "Composite",
                        className: "ContainerSettings"
                    }
                },
                cntkSettings: {
                    serializedName: "properties.cntkSettings",
                    type: {
                        name: "Composite",
                        className: "CNTKsettings"
                    }
                },
                pyTorchSettings: {
                    serializedName: "properties.pyTorchSettings",
                    type: {
                        name: "Composite",
                        className: "PyTorchSettings"
                    }
                },
                tensorFlowSettings: {
                    serializedName: "properties.tensorFlowSettings",
                    type: {
                        name: "Composite",
                        className: "TensorFlowSettings"
                    }
                },
                caffeSettings: {
                    serializedName: "properties.caffeSettings",
                    type: {
                        name: "Composite",
                        className: "CaffeSettings"
                    }
                },
                caffe2Settings: {
                    serializedName: "properties.caffe2Settings",
                    type: {
                        name: "Composite",
                        className: "Caffe2Settings"
                    }
                },
                chainerSettings: {
                    serializedName: "properties.chainerSettings",
                    type: {
                        name: "Composite",
                        className: "ChainerSettings"
                    }
                },
                customToolkitSettings: {
                    serializedName: "properties.customToolkitSettings",
                    type: {
                        name: "Composite",
                        className: "CustomToolkitSettings"
                    }
                },
                customMpiSettings: {
                    serializedName: "properties.customMpiSettings",
                    type: {
                        name: "Composite",
                        className: "CustomMpiSettings"
                    }
                },
                horovodSettings: {
                    serializedName: "properties.horovodSettings",
                    type: {
                        name: "Composite",
                        className: "HorovodSettings"
                    }
                },
                jobPreparation: {
                    serializedName: "properties.jobPreparation",
                    type: {
                        name: "Composite",
                        className: "JobPreparation"
                    }
                },
                stdOutErrPathPrefix: {
                    required: true,
                    serializedName: "properties.stdOutErrPathPrefix",
                    type: {
                        name: "String"
                    }
                },
                inputDirectories: {
                    serializedName: "properties.inputDirectories",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InputDirectory"
                            }
                        }
                    }
                },
                outputDirectories: {
                    serializedName: "properties.outputDirectories",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OutputDirectory"
                            }
                        }
                    }
                },
                environmentVariables: {
                    serializedName: "properties.environmentVariables",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EnvironmentVariable"
                            }
                        }
                    }
                },
                secrets: {
                    serializedName: "properties.secrets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EnvironmentVariableWithSecretValue"
                            }
                        }
                    }
                },
                constraints: {
                    serializedName: "properties.constraints",
                    type: {
                        name: "Composite",
                        className: "JobBasePropertiesConstraints"
                    }
                }
            }
        }
    };
    var JobPropertiesConstraints = {
        serializedName: "JobProperties_constraints",
        type: {
            name: "Composite",
            className: "JobPropertiesConstraints",
            modelProperties: {
                maxWallClockTime: {
                    serializedName: "maxWallClockTime",
                    defaultValue: '7.00:00:00',
                    type: {
                        name: "TimeSpan"
                    }
                }
            }
        }
    };
    var JobPropertiesExecutionInfo = {
        serializedName: "JobProperties_executionInfo",
        type: {
            name: "Composite",
            className: "JobPropertiesExecutionInfo",
            modelProperties: {
                startTime: {
                    readOnly: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    readOnly: true,
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                exitCode: {
                    readOnly: true,
                    serializedName: "exitCode",
                    type: {
                        name: "Number"
                    }
                },
                errors: {
                    readOnly: true,
                    serializedName: "errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BatchAIError"
                            }
                        }
                    }
                }
            }
        }
    };
    var Job = {
        serializedName: "Job",
        type: {
            name: "Composite",
            className: "Job",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { schedulingPriority: {
                    serializedName: "properties.schedulingPriority",
                    defaultValue: 'normal',
                    type: {
                        name: "String"
                    }
                }, cluster: {
                    serializedName: "properties.cluster",
                    type: {
                        name: "Composite",
                        className: "ResourceId"
                    }
                }, mountVolumes: {
                    serializedName: "properties.mountVolumes",
                    type: {
                        name: "Composite",
                        className: "MountVolumes"
                    }
                }, nodeCount: {
                    serializedName: "properties.nodeCount",
                    type: {
                        name: "Number"
                    }
                }, containerSettings: {
                    serializedName: "properties.containerSettings",
                    type: {
                        name: "Composite",
                        className: "ContainerSettings"
                    }
                }, toolType: {
                    serializedName: "properties.toolType",
                    type: {
                        name: "String"
                    }
                }, cntkSettings: {
                    serializedName: "properties.cntkSettings",
                    type: {
                        name: "Composite",
                        className: "CNTKsettings"
                    }
                }, pyTorchSettings: {
                    serializedName: "properties.pyTorchSettings",
                    type: {
                        name: "Composite",
                        className: "PyTorchSettings"
                    }
                }, tensorFlowSettings: {
                    serializedName: "properties.tensorFlowSettings",
                    type: {
                        name: "Composite",
                        className: "TensorFlowSettings"
                    }
                }, caffeSettings: {
                    serializedName: "properties.caffeSettings",
                    type: {
                        name: "Composite",
                        className: "CaffeSettings"
                    }
                }, caffe2Settings: {
                    serializedName: "properties.caffe2Settings",
                    type: {
                        name: "Composite",
                        className: "Caffe2Settings"
                    }
                }, chainerSettings: {
                    serializedName: "properties.chainerSettings",
                    type: {
                        name: "Composite",
                        className: "ChainerSettings"
                    }
                }, customToolkitSettings: {
                    serializedName: "properties.customToolkitSettings",
                    type: {
                        name: "Composite",
                        className: "CustomToolkitSettings"
                    }
                }, customMpiSettings: {
                    serializedName: "properties.customMpiSettings",
                    type: {
                        name: "Composite",
                        className: "CustomMpiSettings"
                    }
                }, horovodSettings: {
                    serializedName: "properties.horovodSettings",
                    type: {
                        name: "Composite",
                        className: "HorovodSettings"
                    }
                }, jobPreparation: {
                    serializedName: "properties.jobPreparation",
                    type: {
                        name: "Composite",
                        className: "JobPreparation"
                    }
                }, jobOutputDirectoryPathSegment: {
                    readOnly: true,
                    serializedName: "properties.jobOutputDirectoryPathSegment",
                    type: {
                        name: "String"
                    }
                }, stdOutErrPathPrefix: {
                    serializedName: "properties.stdOutErrPathPrefix",
                    type: {
                        name: "String"
                    }
                }, inputDirectories: {
                    serializedName: "properties.inputDirectories",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InputDirectory"
                            }
                        }
                    }
                }, outputDirectories: {
                    serializedName: "properties.outputDirectories",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OutputDirectory"
                            }
                        }
                    }
                }, environmentVariables: {
                    serializedName: "properties.environmentVariables",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EnvironmentVariable"
                            }
                        }
                    }
                }, secrets: {
                    serializedName: "properties.secrets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EnvironmentVariableWithSecretValue"
                            }
                        }
                    }
                }, constraints: {
                    serializedName: "properties.constraints",
                    type: {
                        name: "Composite",
                        className: "JobPropertiesConstraints"
                    }
                }, creationTime: {
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, provisioningState: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, provisioningStateTransitionTime: {
                    readOnly: true,
                    serializedName: "properties.provisioningStateTransitionTime",
                    type: {
                        name: "DateTime"
                    }
                }, executionState: {
                    readOnly: true,
                    serializedName: "properties.executionState",
                    type: {
                        name: "String"
                    }
                }, executionStateTransitionTime: {
                    readOnly: true,
                    serializedName: "properties.executionStateTransitionTime",
                    type: {
                        name: "DateTime"
                    }
                }, executionInfo: {
                    serializedName: "properties.executionInfo",
                    type: {
                        name: "Composite",
                        className: "JobPropertiesExecutionInfo"
                    }
                } })
        }
    };
    var RemoteLoginInformation = {
        serializedName: "RemoteLoginInformation",
        type: {
            name: "Composite",
            className: "RemoteLoginInformation",
            modelProperties: {
                nodeId: {
                    readOnly: true,
                    serializedName: "nodeId",
                    type: {
                        name: "String"
                    }
                },
                ipAddress: {
                    readOnly: true,
                    serializedName: "ipAddress",
                    type: {
                        name: "String"
                    }
                },
                port: {
                    readOnly: true,
                    serializedName: "port",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var File = {
        serializedName: "File",
        type: {
            name: "Composite",
            className: "File",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                fileType: {
                    readOnly: true,
                    serializedName: "fileType",
                    type: {
                        name: "String"
                    }
                },
                downloadUrl: {
                    readOnly: true,
                    serializedName: "downloadUrl",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    readOnly: true,
                    serializedName: "properties.lastModified",
                    type: {
                        name: "DateTime"
                    }
                },
                contentLength: {
                    readOnly: true,
                    serializedName: "properties.contentLength",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    readOnly: true,
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    readOnly: true,
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    readOnly: true,
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    readOnly: true,
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    readOnly: true,
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                },
                origin: {
                    readOnly: true,
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var Workspace = {
        serializedName: "Workspace",
        type: {
            name: "Composite",
            className: "Workspace",
            modelProperties: __assign({}, Resource.type.modelProperties, { creationTime: {
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, provisioningState: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, provisioningStateTransitionTime: {
                    readOnly: true,
                    serializedName: "properties.provisioningStateTransitionTime",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var WorkspaceCreateParameters = {
        serializedName: "WorkspaceCreateParameters",
        type: {
            name: "Composite",
            className: "WorkspaceCreateParameters",
            modelProperties: {
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var WorkspaceUpdateParameters = {
        serializedName: "WorkspaceUpdateParameters",
        type: {
            name: "Composite",
            className: "WorkspaceUpdateParameters",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var Experiment = {
        serializedName: "Experiment",
        type: {
            name: "Composite",
            className: "Experiment",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { creationTime: {
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, provisioningState: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, provisioningStateTransitionTime: {
                    readOnly: true,
                    serializedName: "properties.provisioningStateTransitionTime",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var WorkspacesListOptions = {
        type: {
            name: "Composite",
            className: "WorkspacesListOptions",
            modelProperties: {
                maxResults: {
                    defaultValue: 1000,
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var WorkspacesListByResourceGroupOptions = {
        type: {
            name: "Composite",
            className: "WorkspacesListByResourceGroupOptions",
            modelProperties: {
                maxResults: {
                    defaultValue: 1000,
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ExperimentsListByWorkspaceOptions = {
        type: {
            name: "Composite",
            className: "ExperimentsListByWorkspaceOptions",
            modelProperties: {
                maxResults: {
                    defaultValue: 1000,
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var JobsListByExperimentOptions = {
        type: {
            name: "Composite",
            className: "JobsListByExperimentOptions",
            modelProperties: {
                maxResults: {
                    defaultValue: 1000,
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var JobsListOutputFilesOptions = {
        type: {
            name: "Composite",
            className: "JobsListOutputFilesOptions",
            modelProperties: {
                outputdirectoryid: {
                    required: true,
                    type: {
                        name: "String"
                    }
                },
                directory: {
                    defaultValue: '.',
                    type: {
                        name: "String"
                    }
                },
                linkexpiryinminutes: {
                    defaultValue: 60,
                    type: {
                        name: "Number"
                    }
                },
                maxResults: {
                    defaultValue: 1000,
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var FileServersListByWorkspaceOptions = {
        type: {
            name: "Composite",
            className: "FileServersListByWorkspaceOptions",
            modelProperties: {
                maxResults: {
                    defaultValue: 1000,
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ClustersListByWorkspaceOptions = {
        type: {
            name: "Composite",
            className: "ClustersListByWorkspaceOptions",
            modelProperties: {
                maxResults: {
                    defaultValue: 1000,
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ListUsagesResult = {
        serializedName: "ListUsagesResult",
        type: {
            name: "Composite",
            className: "ListUsagesResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Usage"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WorkspaceListResult = {
        serializedName: "WorkspaceListResult",
        type: {
            name: "Composite",
            className: "WorkspaceListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Workspace"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ExperimentListResult = {
        serializedName: "ExperimentListResult",
        type: {
            name: "Composite",
            className: "ExperimentListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Experiment"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobListResult = {
        serializedName: "JobListResult",
        type: {
            name: "Composite",
            className: "JobListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Job"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FileListResult = {
        serializedName: "FileListResult",
        type: {
            name: "Composite",
            className: "FileListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "File"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RemoteLoginInformationListResult = {
        serializedName: "RemoteLoginInformationListResult",
        type: {
            name: "Composite",
            className: "RemoteLoginInformationListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RemoteLoginInformation"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FileServerListResult = {
        serializedName: "FileServerListResult",
        type: {
            name: "Composite",
            className: "FileServerListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FileServer"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ClusterListResult = {
        serializedName: "ClusterListResult",
        type: {
            name: "Composite",
            className: "ClusterListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Cluster"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        UsageName: UsageName,
        Usage: Usage,
        UserAccountSettings: UserAccountSettings,
        SshConfiguration: SshConfiguration,
        DataDisks: DataDisks,
        ResourceId: ResourceId,
        MountSettings: MountSettings,
        ProxyResource: ProxyResource,
        FileServer: FileServer,
        KeyVaultSecretReference: KeyVaultSecretReference,
        FileServerCreateParameters: FileServerCreateParameters,
        ManualScaleSettings: ManualScaleSettings,
        AutoScaleSettings: AutoScaleSettings,
        ScaleSettings: ScaleSettings,
        ImageReference: ImageReference,
        VirtualMachineConfiguration: VirtualMachineConfiguration,
        EnvironmentVariable: EnvironmentVariable,
        EnvironmentVariableWithSecretValue: EnvironmentVariableWithSecretValue,
        SetupTask: SetupTask,
        AzureStorageCredentialsInfo: AzureStorageCredentialsInfo,
        AzureFileShareReference: AzureFileShareReference,
        AzureBlobFileSystemReference: AzureBlobFileSystemReference,
        FileServerReference: FileServerReference,
        UnmanagedFileSystemReference: UnmanagedFileSystemReference,
        MountVolumes: MountVolumes,
        AppInsightsReference: AppInsightsReference,
        PerformanceCountersSettings: PerformanceCountersSettings,
        NodeSetup: NodeSetup,
        NodeStateCounts: NodeStateCounts,
        ClusterCreateParameters: ClusterCreateParameters,
        ClusterUpdateParameters: ClusterUpdateParameters,
        NameValuePair: NameValuePair,
        BatchAIError: BatchAIError,
        Cluster: Cluster,
        PrivateRegistryCredentials: PrivateRegistryCredentials,
        ImageSourceRegistry: ImageSourceRegistry,
        ContainerSettings: ContainerSettings,
        CNTKsettings: CNTKsettings,
        PyTorchSettings: PyTorchSettings,
        TensorFlowSettings: TensorFlowSettings,
        CaffeSettings: CaffeSettings,
        Caffe2Settings: Caffe2Settings,
        ChainerSettings: ChainerSettings,
        CustomToolkitSettings: CustomToolkitSettings,
        CustomMpiSettings: CustomMpiSettings,
        HorovodSettings: HorovodSettings,
        JobPreparation: JobPreparation,
        InputDirectory: InputDirectory,
        OutputDirectory: OutputDirectory,
        JobBasePropertiesConstraints: JobBasePropertiesConstraints,
        JobCreateParameters: JobCreateParameters,
        JobPropertiesConstraints: JobPropertiesConstraints,
        JobPropertiesExecutionInfo: JobPropertiesExecutionInfo,
        Job: Job,
        RemoteLoginInformation: RemoteLoginInformation,
        File: File,
        Resource: Resource,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        Workspace: Workspace,
        WorkspaceCreateParameters: WorkspaceCreateParameters,
        WorkspaceUpdateParameters: WorkspaceUpdateParameters,
        Experiment: Experiment,
        WorkspacesListOptions: WorkspacesListOptions,
        WorkspacesListByResourceGroupOptions: WorkspacesListByResourceGroupOptions,
        ExperimentsListByWorkspaceOptions: ExperimentsListByWorkspaceOptions,
        JobsListByExperimentOptions: JobsListByExperimentOptions,
        JobsListOutputFilesOptions: JobsListOutputFilesOptions,
        FileServersListByWorkspaceOptions: FileServersListByWorkspaceOptions,
        ClustersListByWorkspaceOptions: ClustersListByWorkspaceOptions,
        OperationListResult: OperationListResult,
        ListUsagesResult: ListUsagesResult,
        WorkspaceListResult: WorkspaceListResult,
        ExperimentListResult: ExperimentListResult,
        JobListResult: JobListResult,
        FileListResult: FileListResult,
        RemoteLoginInformationListResult: RemoteLoginInformationListResult,
        FileServerListResult: FileServerListResult,
        ClusterListResult: ClusterListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        OperationListResult: OperationListResult,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var clusterName = {
        parameterPath: "clusterName",
        mapper: {
            required: true,
            serializedName: "clusterName",
            constraints: {
                MaxLength: 64,
                MinLength: 1,
                Pattern: /^[-\w_]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var directory = {
        parameterPath: [
            "jobsListOutputFilesOptions",
            "directory"
        ],
        mapper: {
            serializedName: "directory",
            defaultValue: '.',
            type: {
                name: "String"
            }
        }
    };
    var experimentName = {
        parameterPath: "experimentName",
        mapper: {
            required: true,
            serializedName: "experimentName",
            constraints: {
                MaxLength: 64,
                MinLength: 1,
                Pattern: /^[-\w_]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var fileServerName = {
        parameterPath: "fileServerName",
        mapper: {
            required: true,
            serializedName: "fileServerName",
            constraints: {
                MaxLength: 64,
                MinLength: 1,
                Pattern: /^[-\w_]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var jobName = {
        parameterPath: "jobName",
        mapper: {
            required: true,
            serializedName: "jobName",
            constraints: {
                MaxLength: 64,
                MinLength: 1,
                Pattern: /^[-\w_]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var linkexpiryinminutes = {
        parameterPath: [
            "jobsListOutputFilesOptions",
            "linkexpiryinminutes"
        ],
        mapper: {
            serializedName: "linkexpiryinminutes",
            defaultValue: 60,
            constraints: {
                InclusiveMaximum: 600,
                InclusiveMinimum: 5
            },
            type: {
                name: "Number"
            }
        }
    };
    var location = {
        parameterPath: "location",
        mapper: {
            required: true,
            serializedName: "location",
            constraints: {
                Pattern: /^[-\w\._]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var maxResults0 = {
        parameterPath: [
            "options",
            "workspacesListOptions",
            "maxResults"
        ],
        mapper: {
            serializedName: "maxresults",
            defaultValue: 1000,
            constraints: {
                InclusiveMaximum: 1000,
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };
    var maxResults1 = {
        parameterPath: [
            "options",
            "workspacesListByResourceGroupOptions",
            "maxResults"
        ],
        mapper: {
            serializedName: "maxresults",
            defaultValue: 1000,
            constraints: {
                InclusiveMaximum: 1000,
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };
    var maxResults2 = {
        parameterPath: [
            "options",
            "experimentsListByWorkspaceOptions",
            "maxResults"
        ],
        mapper: {
            serializedName: "maxresults",
            defaultValue: 1000,
            constraints: {
                InclusiveMaximum: 1000,
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };
    var maxResults3 = {
        parameterPath: [
            "options",
            "jobsListByExperimentOptions",
            "maxResults"
        ],
        mapper: {
            serializedName: "maxresults",
            defaultValue: 1000,
            constraints: {
                InclusiveMaximum: 1000,
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };
    var maxResults4 = {
        parameterPath: [
            "jobsListOutputFilesOptions",
            "maxResults"
        ],
        mapper: {
            serializedName: "maxresults",
            defaultValue: 1000,
            constraints: {
                InclusiveMaximum: 1000,
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };
    var maxResults5 = {
        parameterPath: [
            "options",
            "fileServersListByWorkspaceOptions",
            "maxResults"
        ],
        mapper: {
            serializedName: "maxresults",
            defaultValue: 1000,
            constraints: {
                InclusiveMaximum: 1000,
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };
    var maxResults6 = {
        parameterPath: [
            "options",
            "clustersListByWorkspaceOptions",
            "maxResults"
        ],
        mapper: {
            serializedName: "maxresults",
            defaultValue: 1000,
            constraints: {
                InclusiveMaximum: 1000,
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var outputdirectoryid = {
        parameterPath: [
            "jobsListOutputFilesOptions",
            "outputdirectoryid"
        ],
        mapper: {
            required: true,
            serializedName: "outputdirectoryid",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            constraints: {
                Pattern: /^[-\w\._]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var workspaceName = {
        parameterPath: "workspaceName",
        mapper: {
            required: true,
            serializedName: "workspaceName",
            constraints: {
                MaxLength: 64,
                MinLength: 1,
                Pattern: /^[-\w_]+$/
            },
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {BatchAIManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.BatchAI/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        ListUsagesResult: ListUsagesResult,
        Usage: Usage,
        UsageName: UsageName,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Usages. */
    var Usages = /** @class */ (function () {
        /**
         * Create a Usages.
         * @param {BatchAIManagementClientContext} client Reference to the service client.
         */
        function Usages(client) {
            this.client = client;
        }
        Usages.prototype.list = function (location$$1, options, callback) {
            return this.client.sendOperationRequest({
                location: location$$1,
                options: options
            }, listOperationSpec$1, callback);
        };
        Usages.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return Usages;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.BatchAI/locations/{location}/usages",
        urlParameters: [
            subscriptionId,
            location
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListUsagesResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListUsagesResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        WorkspaceListResult: WorkspaceListResult,
        Workspace: Workspace,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        WorkspaceCreateParameters: WorkspaceCreateParameters,
        WorkspaceUpdateParameters: WorkspaceUpdateParameters,
        ResourceId: ResourceId,
        ProxyResource: ProxyResource,
        Experiment: Experiment,
        FileServer: FileServer,
        SshConfiguration: SshConfiguration,
        UserAccountSettings: UserAccountSettings,
        DataDisks: DataDisks,
        MountSettings: MountSettings,
        Cluster: Cluster,
        ScaleSettings: ScaleSettings,
        ManualScaleSettings: ManualScaleSettings,
        AutoScaleSettings: AutoScaleSettings,
        VirtualMachineConfiguration: VirtualMachineConfiguration,
        ImageReference: ImageReference,
        NodeSetup: NodeSetup,
        SetupTask: SetupTask,
        EnvironmentVariable: EnvironmentVariable,
        EnvironmentVariableWithSecretValue: EnvironmentVariableWithSecretValue,
        KeyVaultSecretReference: KeyVaultSecretReference,
        MountVolumes: MountVolumes,
        AzureFileShareReference: AzureFileShareReference,
        AzureStorageCredentialsInfo: AzureStorageCredentialsInfo,
        AzureBlobFileSystemReference: AzureBlobFileSystemReference,
        FileServerReference: FileServerReference,
        UnmanagedFileSystemReference: UnmanagedFileSystemReference,
        PerformanceCountersSettings: PerformanceCountersSettings,
        AppInsightsReference: AppInsightsReference,
        BatchAIError: BatchAIError,
        NameValuePair: NameValuePair,
        NodeStateCounts: NodeStateCounts,
        Job: Job,
        ContainerSettings: ContainerSettings,
        ImageSourceRegistry: ImageSourceRegistry,
        PrivateRegistryCredentials: PrivateRegistryCredentials,
        CNTKsettings: CNTKsettings,
        PyTorchSettings: PyTorchSettings,
        TensorFlowSettings: TensorFlowSettings,
        CaffeSettings: CaffeSettings,
        Caffe2Settings: Caffe2Settings,
        ChainerSettings: ChainerSettings,
        CustomToolkitSettings: CustomToolkitSettings,
        CustomMpiSettings: CustomMpiSettings,
        HorovodSettings: HorovodSettings,
        JobPreparation: JobPreparation,
        InputDirectory: InputDirectory,
        OutputDirectory: OutputDirectory,
        JobPropertiesConstraints: JobPropertiesConstraints,
        JobPropertiesExecutionInfo: JobPropertiesExecutionInfo
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Workspaces. */
    var Workspaces = /** @class */ (function () {
        /**
         * Create a Workspaces.
         * @param {BatchAIManagementClientContext} client Reference to the service client.
         */
        function Workspaces(client) {
            this.client = client;
        }
        Workspaces.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$2, callback);
        };
        Workspaces.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        /**
         * Creates a Workspace.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param workspaceName The name of the workspace. Workspace names can only contain a combination
         * of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1
         * through 64 characters long.
         * @param parameters Workspace creation parameters.
         * @param [options] The optional parameters
         * @returns Promise<Models.WorkspacesCreateResponse>
         */
        Workspaces.prototype.create = function (resourceGroupName$$1, workspaceName$$1, parameters, options) {
            return this.beginCreate(resourceGroupName$$1, workspaceName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Workspaces.prototype.update = function (resourceGroupName$$1, workspaceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                options: options
            }, updateOperationSpec, callback);
        };
        /**
         * Deletes a Workspace.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param workspaceName The name of the workspace. Workspace names can only contain a combination
         * of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1
         * through 64 characters long.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Workspaces.prototype.deleteMethod = function (resourceGroupName$$1, workspaceName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, workspaceName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Workspaces.prototype.get = function (resourceGroupName$$1, workspaceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        /**
         * Creates a Workspace.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param workspaceName The name of the workspace. Workspace names can only contain a combination
         * of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1
         * through 64 characters long.
         * @param parameters Workspace creation parameters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Workspaces.prototype.beginCreate = function (resourceGroupName$$1, workspaceName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOperationSpec, options);
        };
        /**
         * Deletes a Workspace.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param workspaceName The name of the workspace. Workspace names can only contain a combination
         * of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1
         * through 64 characters long.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Workspaces.prototype.beginDeleteMethod = function (resourceGroupName$$1, workspaceName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        Workspaces.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        Workspaces.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        return Workspaces;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.BatchAI/workspaces",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion,
            maxResults0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkspaceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion,
            maxResults1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkspaceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}",
        urlParameters: [
            resourceGroupName,
            workspaceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                tags: [
                    "options",
                    "tags"
                ]
            },
            mapper: __assign({}, WorkspaceUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Workspace
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}",
        urlParameters: [
            resourceGroupName,
            workspaceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Workspace
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginCreateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}",
        urlParameters: [
            resourceGroupName,
            workspaceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, WorkspaceCreateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Workspace
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}",
        urlParameters: [
            resourceGroupName,
            workspaceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkspaceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkspaceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        ExperimentListResult: ExperimentListResult,
        Experiment: Experiment,
        ProxyResource: ProxyResource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        ResourceId: ResourceId,
        FileServer: FileServer,
        SshConfiguration: SshConfiguration,
        UserAccountSettings: UserAccountSettings,
        DataDisks: DataDisks,
        MountSettings: MountSettings,
        Cluster: Cluster,
        ScaleSettings: ScaleSettings,
        ManualScaleSettings: ManualScaleSettings,
        AutoScaleSettings: AutoScaleSettings,
        VirtualMachineConfiguration: VirtualMachineConfiguration,
        ImageReference: ImageReference,
        NodeSetup: NodeSetup,
        SetupTask: SetupTask,
        EnvironmentVariable: EnvironmentVariable,
        EnvironmentVariableWithSecretValue: EnvironmentVariableWithSecretValue,
        KeyVaultSecretReference: KeyVaultSecretReference,
        MountVolumes: MountVolumes,
        AzureFileShareReference: AzureFileShareReference,
        AzureStorageCredentialsInfo: AzureStorageCredentialsInfo,
        AzureBlobFileSystemReference: AzureBlobFileSystemReference,
        FileServerReference: FileServerReference,
        UnmanagedFileSystemReference: UnmanagedFileSystemReference,
        PerformanceCountersSettings: PerformanceCountersSettings,
        AppInsightsReference: AppInsightsReference,
        BatchAIError: BatchAIError,
        NameValuePair: NameValuePair,
        NodeStateCounts: NodeStateCounts,
        Job: Job,
        ContainerSettings: ContainerSettings,
        ImageSourceRegistry: ImageSourceRegistry,
        PrivateRegistryCredentials: PrivateRegistryCredentials,
        CNTKsettings: CNTKsettings,
        PyTorchSettings: PyTorchSettings,
        TensorFlowSettings: TensorFlowSettings,
        CaffeSettings: CaffeSettings,
        Caffe2Settings: Caffe2Settings,
        ChainerSettings: ChainerSettings,
        CustomToolkitSettings: CustomToolkitSettings,
        CustomMpiSettings: CustomMpiSettings,
        HorovodSettings: HorovodSettings,
        JobPreparation: JobPreparation,
        InputDirectory: InputDirectory,
        OutputDirectory: OutputDirectory,
        JobPropertiesConstraints: JobPropertiesConstraints,
        JobPropertiesExecutionInfo: JobPropertiesExecutionInfo,
        Resource: Resource,
        Workspace: Workspace
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Experiments. */
    var Experiments = /** @class */ (function () {
        /**
         * Create a Experiments.
         * @param {BatchAIManagementClientContext} client Reference to the service client.
         */
        function Experiments(client) {
            this.client = client;
        }
        Experiments.prototype.listByWorkspace = function (resourceGroupName$$1, workspaceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                options: options
            }, listByWorkspaceOperationSpec, callback);
        };
        /**
         * Creates an Experiment.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param workspaceName The name of the workspace. Workspace names can only contain a combination
         * of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1
         * through 64 characters long.
         * @param experimentName The name of the experiment. Experiment names can only contain a
         * combination of alphanumeric characters along with dash (-) and underscore (_). The name must be
         * from 1 through 64 characters long.
         * @param [options] The optional parameters
         * @returns Promise<Models.ExperimentsCreateResponse>
         */
        Experiments.prototype.create = function (resourceGroupName$$1, workspaceName$$1, experimentName$$1, options) {
            return this.beginCreate(resourceGroupName$$1, workspaceName$$1, experimentName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes an Experiment.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param workspaceName The name of the workspace. Workspace names can only contain a combination
         * of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1
         * through 64 characters long.
         * @param experimentName The name of the experiment. Experiment names can only contain a
         * combination of alphanumeric characters along with dash (-) and underscore (_). The name must be
         * from 1 through 64 characters long.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Experiments.prototype.deleteMethod = function (resourceGroupName$$1, workspaceName$$1, experimentName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, workspaceName$$1, experimentName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Experiments.prototype.get = function (resourceGroupName$$1, workspaceName$$1, experimentName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                experimentName: experimentName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        /**
         * Creates an Experiment.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param workspaceName The name of the workspace. Workspace names can only contain a combination
         * of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1
         * through 64 characters long.
         * @param experimentName The name of the experiment. Experiment names can only contain a
         * combination of alphanumeric characters along with dash (-) and underscore (_). The name must be
         * from 1 through 64 characters long.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Experiments.prototype.beginCreate = function (resourceGroupName$$1, workspaceName$$1, experimentName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                experimentName: experimentName$$1,
                options: options
            }, beginCreateOperationSpec$1, options);
        };
        /**
         * Deletes an Experiment.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param workspaceName The name of the workspace. Workspace names can only contain a combination
         * of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1
         * through 64 characters long.
         * @param experimentName The name of the experiment. Experiment names can only contain a
         * combination of alphanumeric characters along with dash (-) and underscore (_). The name must be
         * from 1 through 64 characters long.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Experiments.prototype.beginDeleteMethod = function (resourceGroupName$$1, workspaceName$$1, experimentName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                experimentName: experimentName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$1, options);
        };
        Experiments.prototype.listByWorkspaceNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByWorkspaceNextOperationSpec, callback);
        };
        return Experiments;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listByWorkspaceOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/experiments",
        urlParameters: [
            resourceGroupName,
            workspaceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion,
            maxResults2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExperimentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/experiments/{experimentName}",
        urlParameters: [
            resourceGroupName,
            workspaceName,
            experimentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Experiment
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginCreateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/experiments/{experimentName}",
        urlParameters: [
            resourceGroupName,
            workspaceName,
            experimentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Experiment
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginDeleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/experiments/{experimentName}",
        urlParameters: [
            resourceGroupName,
            workspaceName,
            experimentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listByWorkspaceNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExperimentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        JobListResult: JobListResult,
        Job: Job,
        ProxyResource: ProxyResource,
        BaseResource: BaseResource,
        ResourceId: ResourceId,
        MountVolumes: MountVolumes,
        AzureFileShareReference: AzureFileShareReference,
        AzureStorageCredentialsInfo: AzureStorageCredentialsInfo,
        KeyVaultSecretReference: KeyVaultSecretReference,
        AzureBlobFileSystemReference: AzureBlobFileSystemReference,
        FileServerReference: FileServerReference,
        UnmanagedFileSystemReference: UnmanagedFileSystemReference,
        ContainerSettings: ContainerSettings,
        ImageSourceRegistry: ImageSourceRegistry,
        PrivateRegistryCredentials: PrivateRegistryCredentials,
        CNTKsettings: CNTKsettings,
        PyTorchSettings: PyTorchSettings,
        TensorFlowSettings: TensorFlowSettings,
        CaffeSettings: CaffeSettings,
        Caffe2Settings: Caffe2Settings,
        ChainerSettings: ChainerSettings,
        CustomToolkitSettings: CustomToolkitSettings,
        CustomMpiSettings: CustomMpiSettings,
        HorovodSettings: HorovodSettings,
        JobPreparation: JobPreparation,
        InputDirectory: InputDirectory,
        OutputDirectory: OutputDirectory,
        EnvironmentVariable: EnvironmentVariable,
        EnvironmentVariableWithSecretValue: EnvironmentVariableWithSecretValue,
        JobPropertiesConstraints: JobPropertiesConstraints,
        JobPropertiesExecutionInfo: JobPropertiesExecutionInfo,
        BatchAIError: BatchAIError,
        NameValuePair: NameValuePair,
        CloudError: CloudError,
        JobCreateParameters: JobCreateParameters,
        JobBasePropertiesConstraints: JobBasePropertiesConstraints,
        FileListResult: FileListResult,
        File: File,
        RemoteLoginInformationListResult: RemoteLoginInformationListResult,
        RemoteLoginInformation: RemoteLoginInformation,
        FileServer: FileServer,
        SshConfiguration: SshConfiguration,
        UserAccountSettings: UserAccountSettings,
        DataDisks: DataDisks,
        MountSettings: MountSettings,
        Cluster: Cluster,
        ScaleSettings: ScaleSettings,
        ManualScaleSettings: ManualScaleSettings,
        AutoScaleSettings: AutoScaleSettings,
        VirtualMachineConfiguration: VirtualMachineConfiguration,
        ImageReference: ImageReference,
        NodeSetup: NodeSetup,
        SetupTask: SetupTask,
        PerformanceCountersSettings: PerformanceCountersSettings,
        AppInsightsReference: AppInsightsReference,
        NodeStateCounts: NodeStateCounts,
        Resource: Resource,
        Workspace: Workspace,
        Experiment: Experiment
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Jobs. */
    var Jobs = /** @class */ (function () {
        /**
         * Create a Jobs.
         * @param {BatchAIManagementClientContext} client Reference to the service client.
         */
        function Jobs(client) {
            this.client = client;
        }
        Jobs.prototype.listByExperiment = function (resourceGroupName$$1, workspaceName$$1, experimentName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                experimentName: experimentName$$1,
                options: options
            }, listByExperimentOperationSpec, callback);
        };
        /**
         * Creates a Job in the given Experiment.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param workspaceName The name of the workspace. Workspace names can only contain a combination
         * of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1
         * through 64 characters long.
         * @param experimentName The name of the experiment. Experiment names can only contain a
         * combination of alphanumeric characters along with dash (-) and underscore (_). The name must be
         * from 1 through 64 characters long.
         * @param jobName The name of the job within the specified resource group. Job names can only
         * contain a combination of alphanumeric characters along with dash (-) and underscore (_). The
         * name must be from 1 through 64 characters long.
         * @param parameters The parameters to provide for job creation.
         * @param [options] The optional parameters
         * @returns Promise<Models.JobsCreateResponse>
         */
        Jobs.prototype.create = function (resourceGroupName$$1, workspaceName$$1, experimentName$$1, jobName$$1, parameters, options) {
            return this.beginCreate(resourceGroupName$$1, workspaceName$$1, experimentName$$1, jobName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a Job.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param workspaceName The name of the workspace. Workspace names can only contain a combination
         * of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1
         * through 64 characters long.
         * @param experimentName The name of the experiment. Experiment names can only contain a
         * combination of alphanumeric characters along with dash (-) and underscore (_). The name must be
         * from 1 through 64 characters long.
         * @param jobName The name of the job within the specified resource group. Job names can only
         * contain a combination of alphanumeric characters along with dash (-) and underscore (_). The
         * name must be from 1 through 64 characters long.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Jobs.prototype.deleteMethod = function (resourceGroupName$$1, workspaceName$$1, experimentName$$1, jobName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, workspaceName$$1, experimentName$$1, jobName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Jobs.prototype.get = function (resourceGroupName$$1, workspaceName$$1, experimentName$$1, jobName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                experimentName: experimentName$$1,
                jobName: jobName$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        Jobs.prototype.listOutputFiles = function (resourceGroupName$$1, workspaceName$$1, experimentName$$1, jobName$$1, jobsListOutputFilesOptions, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                experimentName: experimentName$$1,
                jobName: jobName$$1,
                jobsListOutputFilesOptions: jobsListOutputFilesOptions,
                options: options
            }, listOutputFilesOperationSpec, callback);
        };
        Jobs.prototype.listRemoteLoginInformation = function (resourceGroupName$$1, workspaceName$$1, experimentName$$1, jobName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                experimentName: experimentName$$1,
                jobName: jobName$$1,
                options: options
            }, listRemoteLoginInformationOperationSpec, callback);
        };
        /**
         * Terminates a job.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param workspaceName The name of the workspace. Workspace names can only contain a combination
         * of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1
         * through 64 characters long.
         * @param experimentName The name of the experiment. Experiment names can only contain a
         * combination of alphanumeric characters along with dash (-) and underscore (_). The name must be
         * from 1 through 64 characters long.
         * @param jobName The name of the job within the specified resource group. Job names can only
         * contain a combination of alphanumeric characters along with dash (-) and underscore (_). The
         * name must be from 1 through 64 characters long.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Jobs.prototype.terminate = function (resourceGroupName$$1, workspaceName$$1, experimentName$$1, jobName$$1, options) {
            return this.beginTerminate(resourceGroupName$$1, workspaceName$$1, experimentName$$1, jobName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates a Job in the given Experiment.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param workspaceName The name of the workspace. Workspace names can only contain a combination
         * of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1
         * through 64 characters long.
         * @param experimentName The name of the experiment. Experiment names can only contain a
         * combination of alphanumeric characters along with dash (-) and underscore (_). The name must be
         * from 1 through 64 characters long.
         * @param jobName The name of the job within the specified resource group. Job names can only
         * contain a combination of alphanumeric characters along with dash (-) and underscore (_). The
         * name must be from 1 through 64 characters long.
         * @param parameters The parameters to provide for job creation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Jobs.prototype.beginCreate = function (resourceGroupName$$1, workspaceName$$1, experimentName$$1, jobName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                experimentName: experimentName$$1,
                jobName: jobName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOperationSpec$2, options);
        };
        /**
         * Deletes a Job.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param workspaceName The name of the workspace. Workspace names can only contain a combination
         * of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1
         * through 64 characters long.
         * @param experimentName The name of the experiment. Experiment names can only contain a
         * combination of alphanumeric characters along with dash (-) and underscore (_). The name must be
         * from 1 through 64 characters long.
         * @param jobName The name of the job within the specified resource group. Job names can only
         * contain a combination of alphanumeric characters along with dash (-) and underscore (_). The
         * name must be from 1 through 64 characters long.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Jobs.prototype.beginDeleteMethod = function (resourceGroupName$$1, workspaceName$$1, experimentName$$1, jobName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                experimentName: experimentName$$1,
                jobName: jobName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$2, options);
        };
        /**
         * Terminates a job.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param workspaceName The name of the workspace. Workspace names can only contain a combination
         * of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1
         * through 64 characters long.
         * @param experimentName The name of the experiment. Experiment names can only contain a
         * combination of alphanumeric characters along with dash (-) and underscore (_). The name must be
         * from 1 through 64 characters long.
         * @param jobName The name of the job within the specified resource group. Job names can only
         * contain a combination of alphanumeric characters along with dash (-) and underscore (_). The
         * name must be from 1 through 64 characters long.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Jobs.prototype.beginTerminate = function (resourceGroupName$$1, workspaceName$$1, experimentName$$1, jobName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                experimentName: experimentName$$1,
                jobName: jobName$$1,
                options: options
            }, beginTerminateOperationSpec, options);
        };
        Jobs.prototype.listByExperimentNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByExperimentNextOperationSpec, callback);
        };
        Jobs.prototype.listOutputFilesNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listOutputFilesNextOperationSpec, callback);
        };
        Jobs.prototype.listRemoteLoginInformationNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listRemoteLoginInformationNextOperationSpec, callback);
        };
        return Jobs;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var listByExperimentOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/experiments/{experimentName}/jobs",
        urlParameters: [
            resourceGroupName,
            workspaceName,
            experimentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion,
            maxResults3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/experiments/{experimentName}/jobs/{jobName}",
        urlParameters: [
            resourceGroupName,
            workspaceName,
            experimentName,
            jobName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Job
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listOutputFilesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/experiments/{experimentName}/jobs/{jobName}/listOutputFiles",
        urlParameters: [
            resourceGroupName,
            workspaceName,
            experimentName,
            jobName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion,
            outputdirectoryid,
            directory,
            linkexpiryinminutes,
            maxResults4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FileListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listRemoteLoginInformationOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/experiments/{experimentName}/jobs/{jobName}/listRemoteLoginInformation",
        urlParameters: [
            resourceGroupName,
            workspaceName,
            experimentName,
            jobName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RemoteLoginInformationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var beginCreateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/experiments/{experimentName}/jobs/{jobName}",
        urlParameters: [
            resourceGroupName,
            workspaceName,
            experimentName,
            jobName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, JobCreateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Job
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var beginDeleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/experiments/{experimentName}/jobs/{jobName}",
        urlParameters: [
            resourceGroupName,
            workspaceName,
            experimentName,
            jobName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var beginTerminateOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/experiments/{experimentName}/jobs/{jobName}/terminate",
        urlParameters: [
            resourceGroupName,
            workspaceName,
            experimentName,
            jobName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listByExperimentNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listOutputFilesNextOperationSpec = {
        httpMethod: "POST",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FileListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listRemoteLoginInformationNextOperationSpec = {
        httpMethod: "POST",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RemoteLoginInformationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        FileServerCreateParameters: FileServerCreateParameters,
        SshConfiguration: SshConfiguration,
        UserAccountSettings: UserAccountSettings,
        DataDisks: DataDisks,
        ResourceId: ResourceId,
        BaseResource: BaseResource,
        FileServer: FileServer,
        ProxyResource: ProxyResource,
        MountSettings: MountSettings,
        CloudError: CloudError,
        FileServerListResult: FileServerListResult,
        Cluster: Cluster,
        ScaleSettings: ScaleSettings,
        ManualScaleSettings: ManualScaleSettings,
        AutoScaleSettings: AutoScaleSettings,
        VirtualMachineConfiguration: VirtualMachineConfiguration,
        ImageReference: ImageReference,
        NodeSetup: NodeSetup,
        SetupTask: SetupTask,
        EnvironmentVariable: EnvironmentVariable,
        EnvironmentVariableWithSecretValue: EnvironmentVariableWithSecretValue,
        KeyVaultSecretReference: KeyVaultSecretReference,
        MountVolumes: MountVolumes,
        AzureFileShareReference: AzureFileShareReference,
        AzureStorageCredentialsInfo: AzureStorageCredentialsInfo,
        AzureBlobFileSystemReference: AzureBlobFileSystemReference,
        FileServerReference: FileServerReference,
        UnmanagedFileSystemReference: UnmanagedFileSystemReference,
        PerformanceCountersSettings: PerformanceCountersSettings,
        AppInsightsReference: AppInsightsReference,
        BatchAIError: BatchAIError,
        NameValuePair: NameValuePair,
        NodeStateCounts: NodeStateCounts,
        Job: Job,
        ContainerSettings: ContainerSettings,
        ImageSourceRegistry: ImageSourceRegistry,
        PrivateRegistryCredentials: PrivateRegistryCredentials,
        CNTKsettings: CNTKsettings,
        PyTorchSettings: PyTorchSettings,
        TensorFlowSettings: TensorFlowSettings,
        CaffeSettings: CaffeSettings,
        Caffe2Settings: Caffe2Settings,
        ChainerSettings: ChainerSettings,
        CustomToolkitSettings: CustomToolkitSettings,
        CustomMpiSettings: CustomMpiSettings,
        HorovodSettings: HorovodSettings,
        JobPreparation: JobPreparation,
        InputDirectory: InputDirectory,
        OutputDirectory: OutputDirectory,
        JobPropertiesConstraints: JobPropertiesConstraints,
        JobPropertiesExecutionInfo: JobPropertiesExecutionInfo,
        Resource: Resource,
        Workspace: Workspace,
        Experiment: Experiment
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a FileServers. */
    var FileServers = /** @class */ (function () {
        /**
         * Create a FileServers.
         * @param {BatchAIManagementClientContext} client Reference to the service client.
         */
        function FileServers(client) {
            this.client = client;
        }
        /**
         * Creates a File Server in the given workspace.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param workspaceName The name of the workspace. Workspace names can only contain a combination
         * of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1
         * through 64 characters long.
         * @param fileServerName The name of the file server within the specified resource group. File
         * server names can only contain a combination of alphanumeric characters along with dash (-) and
         * underscore (_). The name must be from 1 through 64 characters long.
         * @param parameters The parameters to provide for File Server creation.
         * @param [options] The optional parameters
         * @returns Promise<Models.FileServersCreateResponse>
         */
        FileServers.prototype.create = function (resourceGroupName$$1, workspaceName$$1, fileServerName$$1, parameters, options) {
            return this.beginCreate(resourceGroupName$$1, workspaceName$$1, fileServerName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a File Server.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param workspaceName The name of the workspace. Workspace names can only contain a combination
         * of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1
         * through 64 characters long.
         * @param fileServerName The name of the file server within the specified resource group. File
         * server names can only contain a combination of alphanumeric characters along with dash (-) and
         * underscore (_). The name must be from 1 through 64 characters long.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        FileServers.prototype.deleteMethod = function (resourceGroupName$$1, workspaceName$$1, fileServerName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, workspaceName$$1, fileServerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        FileServers.prototype.get = function (resourceGroupName$$1, workspaceName$$1, fileServerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                fileServerName: fileServerName$$1,
                options: options
            }, getOperationSpec$3, callback);
        };
        FileServers.prototype.listByWorkspace = function (resourceGroupName$$1, workspaceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                options: options
            }, listByWorkspaceOperationSpec$1, callback);
        };
        /**
         * Creates a File Server in the given workspace.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param workspaceName The name of the workspace. Workspace names can only contain a combination
         * of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1
         * through 64 characters long.
         * @param fileServerName The name of the file server within the specified resource group. File
         * server names can only contain a combination of alphanumeric characters along with dash (-) and
         * underscore (_). The name must be from 1 through 64 characters long.
         * @param parameters The parameters to provide for File Server creation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        FileServers.prototype.beginCreate = function (resourceGroupName$$1, workspaceName$$1, fileServerName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                fileServerName: fileServerName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOperationSpec$3, options);
        };
        /**
         * Deletes a File Server.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param workspaceName The name of the workspace. Workspace names can only contain a combination
         * of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1
         * through 64 characters long.
         * @param fileServerName The name of the file server within the specified resource group. File
         * server names can only contain a combination of alphanumeric characters along with dash (-) and
         * underscore (_). The name must be from 1 through 64 characters long.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        FileServers.prototype.beginDeleteMethod = function (resourceGroupName$$1, workspaceName$$1, fileServerName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                fileServerName: fileServerName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$3, options);
        };
        FileServers.prototype.listByWorkspaceNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByWorkspaceNextOperationSpec$1, callback);
        };
        return FileServers;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/fileServers/{fileServerName}",
        urlParameters: [
            resourceGroupName,
            workspaceName,
            fileServerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FileServer
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var listByWorkspaceOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/fileServers",
        urlParameters: [
            resourceGroupName,
            workspaceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion,
            maxResults5
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FileServerListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var beginCreateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/fileServers/{fileServerName}",
        urlParameters: [
            resourceGroupName,
            workspaceName,
            fileServerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, FileServerCreateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: FileServer
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var beginDeleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/fileServers/{fileServerName}",
        urlParameters: [
            resourceGroupName,
            workspaceName,
            fileServerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var listByWorkspaceNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FileServerListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        ClusterCreateParameters: ClusterCreateParameters,
        ScaleSettings: ScaleSettings,
        ManualScaleSettings: ManualScaleSettings,
        AutoScaleSettings: AutoScaleSettings,
        VirtualMachineConfiguration: VirtualMachineConfiguration,
        ImageReference: ImageReference,
        NodeSetup: NodeSetup,
        SetupTask: SetupTask,
        EnvironmentVariable: EnvironmentVariable,
        EnvironmentVariableWithSecretValue: EnvironmentVariableWithSecretValue,
        KeyVaultSecretReference: KeyVaultSecretReference,
        ResourceId: ResourceId,
        BaseResource: BaseResource,
        MountVolumes: MountVolumes,
        AzureFileShareReference: AzureFileShareReference,
        AzureStorageCredentialsInfo: AzureStorageCredentialsInfo,
        AzureBlobFileSystemReference: AzureBlobFileSystemReference,
        FileServerReference: FileServerReference,
        UnmanagedFileSystemReference: UnmanagedFileSystemReference,
        PerformanceCountersSettings: PerformanceCountersSettings,
        AppInsightsReference: AppInsightsReference,
        UserAccountSettings: UserAccountSettings,
        Cluster: Cluster,
        ProxyResource: ProxyResource,
        BatchAIError: BatchAIError,
        NameValuePair: NameValuePair,
        NodeStateCounts: NodeStateCounts,
        CloudError: CloudError,
        ClusterUpdateParameters: ClusterUpdateParameters,
        RemoteLoginInformationListResult: RemoteLoginInformationListResult,
        RemoteLoginInformation: RemoteLoginInformation,
        ClusterListResult: ClusterListResult,
        FileServer: FileServer,
        SshConfiguration: SshConfiguration,
        DataDisks: DataDisks,
        MountSettings: MountSettings,
        Job: Job,
        ContainerSettings: ContainerSettings,
        ImageSourceRegistry: ImageSourceRegistry,
        PrivateRegistryCredentials: PrivateRegistryCredentials,
        CNTKsettings: CNTKsettings,
        PyTorchSettings: PyTorchSettings,
        TensorFlowSettings: TensorFlowSettings,
        CaffeSettings: CaffeSettings,
        Caffe2Settings: Caffe2Settings,
        ChainerSettings: ChainerSettings,
        CustomToolkitSettings: CustomToolkitSettings,
        CustomMpiSettings: CustomMpiSettings,
        HorovodSettings: HorovodSettings,
        JobPreparation: JobPreparation,
        InputDirectory: InputDirectory,
        OutputDirectory: OutputDirectory,
        JobPropertiesConstraints: JobPropertiesConstraints,
        JobPropertiesExecutionInfo: JobPropertiesExecutionInfo,
        Resource: Resource,
        Workspace: Workspace,
        Experiment: Experiment
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Clusters. */
    var Clusters = /** @class */ (function () {
        /**
         * Create a Clusters.
         * @param {BatchAIManagementClientContext} client Reference to the service client.
         */
        function Clusters(client) {
            this.client = client;
        }
        /**
         * Creates a Cluster in the given Workspace.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param workspaceName The name of the workspace. Workspace names can only contain a combination
         * of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1
         * through 64 characters long.
         * @param clusterName The name of the cluster within the specified resource group. Cluster names
         * can only contain a combination of alphanumeric characters along with dash (-) and underscore
         * (_). The name must be from 1 through 64 characters long.
         * @param parameters The parameters to provide for the Cluster creation.
         * @param [options] The optional parameters
         * @returns Promise<Models.ClustersCreateResponse>
         */
        Clusters.prototype.create = function (resourceGroupName$$1, workspaceName$$1, clusterName$$1, parameters, options) {
            return this.beginCreate(resourceGroupName$$1, workspaceName$$1, clusterName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Clusters.prototype.update = function (resourceGroupName$$1, workspaceName$$1, clusterName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                clusterName: clusterName$$1,
                options: options
            }, updateOperationSpec$1, callback);
        };
        /**
         * Deletes a Cluster.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param workspaceName The name of the workspace. Workspace names can only contain a combination
         * of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1
         * through 64 characters long.
         * @param clusterName The name of the cluster within the specified resource group. Cluster names
         * can only contain a combination of alphanumeric characters along with dash (-) and underscore
         * (_). The name must be from 1 through 64 characters long.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Clusters.prototype.deleteMethod = function (resourceGroupName$$1, workspaceName$$1, clusterName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, workspaceName$$1, clusterName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Clusters.prototype.get = function (resourceGroupName$$1, workspaceName$$1, clusterName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                clusterName: clusterName$$1,
                options: options
            }, getOperationSpec$4, callback);
        };
        Clusters.prototype.listRemoteLoginInformation = function (resourceGroupName$$1, workspaceName$$1, clusterName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                clusterName: clusterName$$1,
                options: options
            }, listRemoteLoginInformationOperationSpec$1, callback);
        };
        Clusters.prototype.listByWorkspace = function (resourceGroupName$$1, workspaceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                options: options
            }, listByWorkspaceOperationSpec$2, callback);
        };
        /**
         * Creates a Cluster in the given Workspace.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param workspaceName The name of the workspace. Workspace names can only contain a combination
         * of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1
         * through 64 characters long.
         * @param clusterName The name of the cluster within the specified resource group. Cluster names
         * can only contain a combination of alphanumeric characters along with dash (-) and underscore
         * (_). The name must be from 1 through 64 characters long.
         * @param parameters The parameters to provide for the Cluster creation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Clusters.prototype.beginCreate = function (resourceGroupName$$1, workspaceName$$1, clusterName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                clusterName: clusterName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOperationSpec$4, options);
        };
        /**
         * Deletes a Cluster.
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * @param workspaceName The name of the workspace. Workspace names can only contain a combination
         * of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1
         * through 64 characters long.
         * @param clusterName The name of the cluster within the specified resource group. Cluster names
         * can only contain a combination of alphanumeric characters along with dash (-) and underscore
         * (_). The name must be from 1 through 64 characters long.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Clusters.prototype.beginDeleteMethod = function (resourceGroupName$$1, workspaceName$$1, clusterName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                clusterName: clusterName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$4, options);
        };
        Clusters.prototype.listRemoteLoginInformationNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listRemoteLoginInformationNextOperationSpec$1, callback);
        };
        Clusters.prototype.listByWorkspaceNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByWorkspaceNextOperationSpec$2, callback);
        };
        return Clusters;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var updateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/clusters/{clusterName}",
        urlParameters: [
            resourceGroupName,
            workspaceName,
            clusterName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                scaleSettings: [
                    "options",
                    "scaleSettings"
                ]
            },
            mapper: __assign({}, ClusterUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Cluster
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/clusters/{clusterName}",
        urlParameters: [
            resourceGroupName,
            workspaceName,
            clusterName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Cluster
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listRemoteLoginInformationOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/clusters/{clusterName}/listRemoteLoginInformation",
        urlParameters: [
            resourceGroupName,
            workspaceName,
            clusterName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RemoteLoginInformationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listByWorkspaceOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/clusters",
        urlParameters: [
            resourceGroupName,
            workspaceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion,
            maxResults6
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ClusterListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var beginCreateOperationSpec$4 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/clusters/{clusterName}",
        urlParameters: [
            resourceGroupName,
            workspaceName,
            clusterName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ClusterCreateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Cluster
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var beginDeleteMethodOperationSpec$4 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/clusters/{clusterName}",
        urlParameters: [
            resourceGroupName,
            workspaceName,
            clusterName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listRemoteLoginInformationNextOperationSpec$1 = {
        httpMethod: "POST",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RemoteLoginInformationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listByWorkspaceNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ClusterListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-batchai";
    var packageVersion = "1.0.0";
    var BatchAIManagementClientContext = /** @class */ (function (_super) {
        __extends(BatchAIManagementClientContext, _super);
        /**
         * Initializes a new instance of the BatchAIManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The subscriptionID for the Azure user.
         * @param [options] The parameter options
         */
        function BatchAIManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2018-05-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return BatchAIManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var BatchAIManagementClient = /** @class */ (function (_super) {
        __extends(BatchAIManagementClient, _super);
        /**
         * Initializes a new instance of the BatchAIManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The subscriptionID for the Azure user.
         * @param [options] The parameter options
         */
        function BatchAIManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.operations = new Operations(_this);
            _this.usages = new Usages(_this);
            _this.workspaces = new Workspaces(_this);
            _this.experiments = new Experiments(_this);
            _this.jobs = new Jobs(_this);
            _this.fileServers = new FileServers(_this);
            _this.clusters = new Clusters(_this);
            return _this;
        }
        return BatchAIManagementClient;
    }(BatchAIManagementClientContext));

    exports.BatchAIManagementClient = BatchAIManagementClient;
    exports.BatchAIManagementClientContext = BatchAIManagementClientContext;
    exports.BatchAIManagementModels = index;
    exports.BatchAIManagementMappers = mappers;
    exports.Operations = Operations;
    exports.Usages = Usages;
    exports.Workspaces = Workspaces;
    exports.Experiments = Experiments;
    exports.Jobs = Jobs;
    exports.FileServers = FileServers;
    exports.Clusters = Clusters;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-batchai.js.map
