/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmAnalysisservices = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for SkuTier.
     * Possible values include: 'Development', 'Basic', 'Standard'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SkuTier = <SkuTier>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SkuTier;
    (function (SkuTier) {
        SkuTier["Development"] = "Development";
        SkuTier["Basic"] = "Basic";
        SkuTier["Standard"] = "Standard";
    })(SkuTier || (SkuTier = {}));
    /**
     * Defines values for State.
     * Possible values include: 'Deleting', 'Succeeded', 'Failed', 'Paused',
     * 'Suspended', 'Provisioning', 'Updating', 'Suspending', 'Pausing',
     * 'Resuming', 'Preparing', 'Scaling'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: State = <State>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var State;
    (function (State) {
        State["Deleting"] = "Deleting";
        State["Succeeded"] = "Succeeded";
        State["Failed"] = "Failed";
        State["Paused"] = "Paused";
        State["Suspended"] = "Suspended";
        State["Provisioning"] = "Provisioning";
        State["Updating"] = "Updating";
        State["Suspending"] = "Suspending";
        State["Pausing"] = "Pausing";
        State["Resuming"] = "Resuming";
        State["Preparing"] = "Preparing";
        State["Scaling"] = "Scaling";
    })(State || (State = {}));
    /**
     * Defines values for ProvisioningState.
     * Possible values include: 'Deleting', 'Succeeded', 'Failed', 'Paused',
     * 'Suspended', 'Provisioning', 'Updating', 'Suspending', 'Pausing',
     * 'Resuming', 'Preparing', 'Scaling'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ProvisioningState =
     * <ProvisioningState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ProvisioningState;
    (function (ProvisioningState) {
        ProvisioningState["Deleting"] = "Deleting";
        ProvisioningState["Succeeded"] = "Succeeded";
        ProvisioningState["Failed"] = "Failed";
        ProvisioningState["Paused"] = "Paused";
        ProvisioningState["Suspended"] = "Suspended";
        ProvisioningState["Provisioning"] = "Provisioning";
        ProvisioningState["Updating"] = "Updating";
        ProvisioningState["Suspending"] = "Suspending";
        ProvisioningState["Pausing"] = "Pausing";
        ProvisioningState["Resuming"] = "Resuming";
        ProvisioningState["Preparing"] = "Preparing";
        ProvisioningState["Scaling"] = "Scaling";
    })(ProvisioningState || (ProvisioningState = {}));
    /**
     * Defines values for ConnectionMode.
     * Possible values include: 'All', 'ReadOnly'
     * @readonly
     * @enum {string}
     */
    var ConnectionMode;
    (function (ConnectionMode) {
        ConnectionMode["All"] = "All";
        ConnectionMode["ReadOnly"] = "ReadOnly";
    })(ConnectionMode || (ConnectionMode = {}));
    /**
     * Defines values for Status.
     * Possible values include: 'Live'
     * @readonly
     * @enum {string}
     */
    var Status;
    (function (Status) {
        Status["Live"] = "Live";
    })(Status || (Status = {}));

    var index = /*#__PURE__*/Object.freeze({
        get SkuTier () { return SkuTier; },
        get State () { return State; },
        get ProvisioningState () { return ProvisioningState; },
        get ConnectionMode () { return ConnectionMode; },
        get Status () { return Status; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    readOnly: true,
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    readOnly: true,
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    readOnly: true,
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                }
            }
        }
    };
    var ResourceSku = {
        serializedName: "ResourceSku",
        type: {
            name: "Composite",
            className: "ResourceSku",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    serializedName: "tier",
                    type: {
                        name: "String"
                    }
                },
                capacity: {
                    serializedName: "capacity",
                    defaultValue: 1,
                    constraints: {
                        InclusiveMaximum: 8,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                sku: {
                    required: true,
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "ResourceSku"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var AnalysisServicesServer = {
        serializedName: "AnalysisServicesServer",
        type: {
            name: "Composite",
            className: "AnalysisServicesServer",
            modelProperties: __assign({}, Resource.type.modelProperties, { asAdministrators: {
                    serializedName: "properties.asAdministrators",
                    type: {
                        name: "Composite",
                        className: "ServerAdministrators"
                    }
                }, backupBlobContainerUri: {
                    serializedName: "properties.backupBlobContainerUri",
                    type: {
                        name: "String"
                    }
                }, gatewayDetails: {
                    serializedName: "properties.gatewayDetails",
                    type: {
                        name: "Composite",
                        className: "GatewayDetails"
                    }
                }, ipV4FirewallSettings: {
                    serializedName: "properties.ipV4FirewallSettings",
                    type: {
                        name: "Composite",
                        className: "IPv4FirewallSettings"
                    }
                }, querypoolConnectionMode: {
                    serializedName: "properties.querypoolConnectionMode",
                    defaultValue: 'All',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "All",
                            "ReadOnly"
                        ]
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, serverFullName: {
                    readOnly: true,
                    serializedName: "properties.serverFullName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ServerAdministrators = {
        serializedName: "ServerAdministrators",
        type: {
            name: "Composite",
            className: "ServerAdministrators",
            modelProperties: {
                members: {
                    serializedName: "members",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var GatewayDetails = {
        serializedName: "GatewayDetails",
        type: {
            name: "Composite",
            className: "GatewayDetails",
            modelProperties: {
                gatewayResourceId: {
                    serializedName: "gatewayResourceId",
                    type: {
                        name: "String"
                    }
                },
                gatewayObjectId: {
                    readOnly: true,
                    serializedName: "gatewayObjectId",
                    type: {
                        name: "String"
                    }
                },
                dmtsClusterUri: {
                    readOnly: true,
                    serializedName: "dmtsClusterUri",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IPv4FirewallRule = {
        serializedName: "IPv4FirewallRule",
        type: {
            name: "Composite",
            className: "IPv4FirewallRule",
            modelProperties: {
                firewallRuleName: {
                    serializedName: "firewallRuleName",
                    type: {
                        name: "String"
                    }
                },
                rangeStart: {
                    serializedName: "rangeStart",
                    type: {
                        name: "String"
                    }
                },
                rangeEnd: {
                    serializedName: "rangeEnd",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IPv4FirewallSettings = {
        serializedName: "IPv4FirewallSettings",
        type: {
            name: "Composite",
            className: "IPv4FirewallSettings",
            modelProperties: {
                firewallRules: {
                    serializedName: "firewallRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IPv4FirewallRule"
                            }
                        }
                    }
                },
                enablePowerBIService: {
                    serializedName: "enablePowerBIService",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AnalysisServicesServerUpdateParameters = {
        serializedName: "AnalysisServicesServerUpdateParameters",
        type: {
            name: "Composite",
            className: "AnalysisServicesServerUpdateParameters",
            modelProperties: {
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "ResourceSku"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                asAdministrators: {
                    serializedName: "properties.asAdministrators",
                    type: {
                        name: "Composite",
                        className: "ServerAdministrators"
                    }
                },
                backupBlobContainerUri: {
                    serializedName: "properties.backupBlobContainerUri",
                    type: {
                        name: "String"
                    }
                },
                gatewayDetails: {
                    serializedName: "properties.gatewayDetails",
                    type: {
                        name: "Composite",
                        className: "GatewayDetails"
                    }
                },
                ipV4FirewallSettings: {
                    serializedName: "properties.ipV4FirewallSettings",
                    type: {
                        name: "Composite",
                        className: "IPv4FirewallSettings"
                    }
                },
                querypoolConnectionMode: {
                    serializedName: "properties.querypoolConnectionMode",
                    defaultValue: 'All',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "All",
                            "ReadOnly"
                        ]
                    }
                }
            }
        }
    };
    var GatewayListStatusLive = {
        serializedName: "GatewayListStatusLive",
        type: {
            name: "Composite",
            className: "GatewayListStatusLive",
            modelProperties: {
                status: {
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Live"
                        ]
                    }
                }
            }
        }
    };
    var GatewayError = {
        serializedName: "GatewayError",
        type: {
            name: "Composite",
            className: "GatewayError",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GatewayListStatusError = {
        serializedName: "GatewayListStatusError",
        type: {
            name: "Composite",
            className: "GatewayListStatusError",
            modelProperties: {
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "GatewayError"
                    }
                }
            }
        }
    };
    var CheckServerNameAvailabilityParameters = {
        serializedName: "CheckServerNameAvailabilityParameters",
        type: {
            name: "Composite",
            className: "CheckServerNameAvailabilityParameters",
            modelProperties: {
                name: {
                    serializedName: "name",
                    constraints: {
                        MaxLength: 63,
                        MinLength: 3,
                        Pattern: /^[a-z][a-z0-9]*$/
                    },
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    defaultValue: 'Microsoft.AnalysisServices/servers',
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CheckServerNameAvailabilityResult = {
        serializedName: "CheckServerNameAvailabilityResult",
        type: {
            name: "Composite",
            className: "CheckServerNameAvailabilityResult",
            modelProperties: {
                nameAvailable: {
                    serializedName: "nameAvailable",
                    type: {
                        name: "Boolean"
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationStatus = {
        serializedName: "OperationStatus",
        type: {
            name: "Composite",
            className: "OperationStatus",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "String"
                    }
                },
                endTime: {
                    serializedName: "endTime",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorResponse"
                    }
                }
            }
        }
    };
    var SkuEnumerationForNewResourceResult = {
        serializedName: "SkuEnumerationForNewResourceResult",
        type: {
            name: "Composite",
            className: "SkuEnumerationForNewResourceResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceSku"
                            }
                        }
                    }
                }
            }
        }
    };
    var SkuDetailsForExistingResource = {
        serializedName: "SkuDetailsForExistingResource",
        type: {
            name: "Composite",
            className: "SkuDetailsForExistingResource",
            modelProperties: {
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "ResourceSku"
                    }
                }
            }
        }
    };
    var SkuEnumerationForExistingResourceResult = {
        serializedName: "SkuEnumerationForExistingResourceResult",
        type: {
            name: "Composite",
            className: "SkuEnumerationForExistingResourceResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SkuDetailsForExistingResource"
                            }
                        }
                    }
                }
            }
        }
    };
    var AnalysisServicesServers = {
        serializedName: "AnalysisServicesServers",
        type: {
            name: "Composite",
            className: "AnalysisServicesServers",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AnalysisServicesServer"
                            }
                        }
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        ResourceSku: ResourceSku,
        Resource: Resource,
        AnalysisServicesServer: AnalysisServicesServer,
        ServerAdministrators: ServerAdministrators,
        GatewayDetails: GatewayDetails,
        IPv4FirewallRule: IPv4FirewallRule,
        IPv4FirewallSettings: IPv4FirewallSettings,
        AnalysisServicesServerUpdateParameters: AnalysisServicesServerUpdateParameters,
        GatewayListStatusLive: GatewayListStatusLive,
        GatewayError: GatewayError,
        GatewayListStatusError: GatewayListStatusError,
        CheckServerNameAvailabilityParameters: CheckServerNameAvailabilityParameters,
        CheckServerNameAvailabilityResult: CheckServerNameAvailabilityResult,
        ErrorResponse: ErrorResponse,
        OperationStatus: OperationStatus,
        SkuEnumerationForNewResourceResult: SkuEnumerationForNewResourceResult,
        SkuDetailsForExistingResource: SkuDetailsForExistingResource,
        SkuEnumerationForExistingResourceResult: SkuEnumerationForExistingResourceResult,
        AnalysisServicesServers: AnalysisServicesServers,
        OperationListResult: OperationListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        AnalysisServicesServer: AnalysisServicesServer,
        Resource: Resource,
        BaseResource: BaseResource,
        ResourceSku: ResourceSku,
        ServerAdministrators: ServerAdministrators,
        GatewayDetails: GatewayDetails,
        IPv4FirewallSettings: IPv4FirewallSettings,
        IPv4FirewallRule: IPv4FirewallRule,
        CloudError: CloudError,
        AnalysisServicesServerUpdateParameters: AnalysisServicesServerUpdateParameters,
        AnalysisServicesServers: AnalysisServicesServers,
        SkuEnumerationForNewResourceResult: SkuEnumerationForNewResourceResult,
        SkuEnumerationForExistingResourceResult: SkuEnumerationForExistingResourceResult,
        SkuDetailsForExistingResource: SkuDetailsForExistingResource,
        GatewayListStatusLive: GatewayListStatusLive,
        GatewayListStatusError: GatewayListStatusError,
        GatewayError: GatewayError,
        CheckServerNameAvailabilityParameters: CheckServerNameAvailabilityParameters,
        CheckServerNameAvailabilityResult: CheckServerNameAvailabilityResult,
        OperationStatus: OperationStatus,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var location = {
        parameterPath: "location",
        mapper: {
            required: true,
            serializedName: "location",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var operationId = {
        parameterPath: "operationId",
        mapper: {
            required: true,
            serializedName: "operationId",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            constraints: {
                MaxLength: 90,
                MinLength: 1,
                Pattern: /^[-\w\._\(\)]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var serverName = {
        parameterPath: "serverName",
        mapper: {
            required: true,
            serializedName: "serverName",
            constraints: {
                MaxLength: 63,
                MinLength: 3,
                Pattern: /^[a-z][a-z0-9]*$/
            },
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Servers. */
    var Servers = /** @class */ (function () {
        /**
         * Create a Servers.
         * @param {AnalysisServicesManagementClientContext} client Reference to the service client.
         */
        function Servers(client) {
            this.client = client;
        }
        Servers.prototype.getDetails = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, getDetailsOperationSpec, callback);
        };
        /**
         * Provisions the specified Analysis Services server based on the configuration specified in the
         * request.
         * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
         * server is part. This name must be at least 1 character in length, and no more than 90.
         * @param serverName The name of the Analysis Services server. It must be a minimum of 3
         * characters, and a maximum of 63.
         * @param serverParameters Contains the information used to provision the Analysis Services server.
         * @param [options] The optional parameters
         * @returns Promise<Models.ServersCreateResponse>
         */
        Servers.prototype.create = function (resourceGroupName$$1, serverName$$1, serverParameters, options) {
            return this.beginCreate(resourceGroupName$$1, serverName$$1, serverParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the specified Analysis Services server.
         * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
         * server is part. This name must be at least 1 character in length, and no more than 90.
         * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
         * length, and no more than 63.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Servers.prototype.deleteMethod = function (resourceGroupName$$1, serverName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, serverName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates the current state of the specified Analysis Services server.
         * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
         * server is part. This name must be at least 1 character in length, and no more than 90.
         * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
         * length, and no more than 63.
         * @param serverUpdateParameters Request object that contains the updated information for the
         * server.
         * @param [options] The optional parameters
         * @returns Promise<Models.ServersUpdateResponse>
         */
        Servers.prototype.update = function (resourceGroupName$$1, serverName$$1, serverUpdateParameters, options) {
            return this.beginUpdate(resourceGroupName$$1, serverName$$1, serverUpdateParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Supends operation of the specified Analysis Services server instance.
         * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
         * server is part. This name must be at least 1 character in length, and no more than 90.
         * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
         * length, and no more than 63.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Servers.prototype.suspend = function (resourceGroupName$$1, serverName$$1, options) {
            return this.beginSuspend(resourceGroupName$$1, serverName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Resumes operation of the specified Analysis Services server instance.
         * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
         * server is part. This name must be at least 1 character in length, and no more than 90.
         * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
         * length, and no more than 63.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Servers.prototype.resume = function (resourceGroupName$$1, serverName$$1, options) {
            return this.beginResume(resourceGroupName$$1, serverName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Servers.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Servers.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Servers.prototype.listSkusForNew = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listSkusForNewOperationSpec, callback);
        };
        Servers.prototype.listSkusForExisting = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, listSkusForExistingOperationSpec, callback);
        };
        Servers.prototype.listGatewayStatus = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, listGatewayStatusOperationSpec, callback);
        };
        Servers.prototype.dissociateGateway = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, dissociateGatewayOperationSpec, callback);
        };
        Servers.prototype.checkNameAvailability = function (location$$1, serverParameters, options, callback) {
            return this.client.sendOperationRequest({
                location: location$$1,
                serverParameters: serverParameters,
                options: options
            }, checkNameAvailabilityOperationSpec, callback);
        };
        Servers.prototype.listOperationResults = function (location$$1, operationId$$1, options, callback) {
            return this.client.sendOperationRequest({
                location: location$$1,
                operationId: operationId$$1,
                options: options
            }, listOperationResultsOperationSpec, callback);
        };
        Servers.prototype.listOperationStatuses = function (location$$1, operationId$$1, options, callback) {
            return this.client.sendOperationRequest({
                location: location$$1,
                operationId: operationId$$1,
                options: options
            }, listOperationStatusesOperationSpec, callback);
        };
        /**
         * Provisions the specified Analysis Services server based on the configuration specified in the
         * request.
         * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
         * server is part. This name must be at least 1 character in length, and no more than 90.
         * @param serverName The name of the Analysis Services server. It must be a minimum of 3
         * characters, and a maximum of 63.
         * @param serverParameters Contains the information used to provision the Analysis Services server.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Servers.prototype.beginCreate = function (resourceGroupName$$1, serverName$$1, serverParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                serverParameters: serverParameters,
                options: options
            }, beginCreateOperationSpec, options);
        };
        /**
         * Deletes the specified Analysis Services server.
         * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
         * server is part. This name must be at least 1 character in length, and no more than 90.
         * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
         * length, and no more than 63.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Servers.prototype.beginDeleteMethod = function (resourceGroupName$$1, serverName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        /**
         * Updates the current state of the specified Analysis Services server.
         * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
         * server is part. This name must be at least 1 character in length, and no more than 90.
         * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
         * length, and no more than 63.
         * @param serverUpdateParameters Request object that contains the updated information for the
         * server.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Servers.prototype.beginUpdate = function (resourceGroupName$$1, serverName$$1, serverUpdateParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                serverUpdateParameters: serverUpdateParameters,
                options: options
            }, beginUpdateOperationSpec, options);
        };
        /**
         * Supends operation of the specified Analysis Services server instance.
         * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
         * server is part. This name must be at least 1 character in length, and no more than 90.
         * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
         * length, and no more than 63.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Servers.prototype.beginSuspend = function (resourceGroupName$$1, serverName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, beginSuspendOperationSpec, options);
        };
        /**
         * Resumes operation of the specified Analysis Services server instance.
         * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services
         * server is part. This name must be at least 1 character in length, and no more than 90.
         * @param serverName The name of the Analysis Services server. It must be at least 3 characters in
         * length, and no more than 63.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Servers.prototype.beginResume = function (resourceGroupName$$1, serverName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, beginResumeOperationSpec, options);
        };
        return Servers;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var getDetailsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AnalysisServicesServer
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AnalysisServicesServers
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/servers",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AnalysisServicesServers
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listSkusForNewOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/skus",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SkuEnumerationForNewResourceResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listSkusForExistingOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/skus",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SkuEnumerationForExistingResourceResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listGatewayStatusOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/listGatewayStatus",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GatewayListStatusLive
            },
            default: {
                bodyMapper: GatewayListStatusError
            }
        },
        serializer: serializer
    };
    var dissociateGatewayOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/dissociateGateway",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var checkNameAvailabilityOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/locations/{location}/checkNameAvailability",
        urlParameters: [
            location,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "serverParameters",
            mapper: __assign({}, CheckServerNameAvailabilityParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: CheckServerNameAvailabilityResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listOperationResultsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/locations/{location}/operationresults/{operationId}",
        urlParameters: [
            location,
            operationId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listOperationStatusesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/locations/{location}/operationstatuses/{operationId}",
        urlParameters: [
            location,
            operationId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            202: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginCreateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "serverParameters",
            mapper: __assign({}, AnalysisServicesServer, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AnalysisServicesServer
            },
            201: {
                bodyMapper: AnalysisServicesServer
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginUpdateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "serverUpdateParameters",
            mapper: __assign({}, AnalysisServicesServerUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AnalysisServicesServer
            },
            202: {
                bodyMapper: AnalysisServicesServer
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginSuspendOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/suspend",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginResumeOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/resume",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        OperationListResult: OperationListResult,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {AnalysisServicesManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.AnalysisServices/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-analysisservices";
    var packageVersion = "1.0.0";
    var AnalysisServicesManagementClientContext = /** @class */ (function (_super) {
        __extends(AnalysisServicesManagementClientContext, _super);
        /**
         * Initializes a new instance of the AnalysisServicesManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription
         * ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function AnalysisServicesManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2017-08-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return AnalysisServicesManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var AnalysisServicesManagementClient = /** @class */ (function (_super) {
        __extends(AnalysisServicesManagementClient, _super);
        /**
         * Initializes a new instance of the AnalysisServicesManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription
         * ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function AnalysisServicesManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.servers = new Servers(_this);
            _this.operations = new Operations(_this);
            return _this;
        }
        return AnalysisServicesManagementClient;
    }(AnalysisServicesManagementClientContext));

    exports.AnalysisServicesManagementClient = AnalysisServicesManagementClient;
    exports.AnalysisServicesManagementClientContext = AnalysisServicesManagementClientContext;
    exports.AnalysisServicesManagementModels = index;
    exports.AnalysisServicesManagementMappers = mappers;
    exports.Servers = Servers;
    exports.Operations = Operations;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-analysisservices.js.map
