/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/listManagementImageListsMappers";
import * as Parameters from "../models/parameters";
import { ContentModeratorClientContext } from "../contentModeratorClientContext";

/** Class representing a ListManagementImageLists. */
export class ListManagementImageLists {
  private readonly client: ContentModeratorClientContext;

  /**
   * Create a ListManagementImageLists.
   * @param {ContentModeratorClientContext} client Reference to the service client.
   */
  constructor(client: ContentModeratorClientContext) {
    this.client = client;
  }

  /**
   * Returns the details of the image list with list Id equal to list Id passed.
   * @param listId List Id of the image list.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListManagementImageListsGetDetailsResponse>
   */
  getDetails(listId: string, options?: msRest.RequestOptionsBase): Promise<Models.ListManagementImageListsGetDetailsResponse>;
  /**
   * @param listId List Id of the image list.
   * @param callback The callback
   */
  getDetails(listId: string, callback: msRest.ServiceCallback<Models.ImageList>): void;
  /**
   * @param listId List Id of the image list.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDetails(listId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ImageList>): void;
  getDetails(listId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ImageList>, callback?: msRest.ServiceCallback<Models.ImageList>): Promise<Models.ListManagementImageListsGetDetailsResponse> {
    return this.client.sendOperationRequest(
      {
        listId,
        options
      },
      getDetailsOperationSpec,
      callback) as Promise<Models.ListManagementImageListsGetDetailsResponse>;
  }

  /**
   * Deletes image list with the list Id equal to list Id passed.
   * @param listId List Id of the image list.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListManagementImageListsDeleteMethodResponse>
   */
  deleteMethod(listId: string, options?: msRest.RequestOptionsBase): Promise<Models.ListManagementImageListsDeleteMethodResponse>;
  /**
   * @param listId List Id of the image list.
   * @param callback The callback
   */
  deleteMethod(listId: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param listId List Id of the image list.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(listId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  deleteMethod(listId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ListManagementImageListsDeleteMethodResponse> {
    return this.client.sendOperationRequest(
      {
        listId,
        options
      },
      deleteMethodOperationSpec,
      callback) as Promise<Models.ListManagementImageListsDeleteMethodResponse>;
  }

  /**
   * Updates an image list with list Id equal to list Id passed.
   * @param listId List Id of the image list.
   * @param contentType The content type.
   * @param body Schema of the body.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListManagementImageListsUpdateResponse>
   */
  update(listId: string, contentType: string, body: Models.Body, options?: msRest.RequestOptionsBase): Promise<Models.ListManagementImageListsUpdateResponse>;
  /**
   * @param listId List Id of the image list.
   * @param contentType The content type.
   * @param body Schema of the body.
   * @param callback The callback
   */
  update(listId: string, contentType: string, body: Models.Body, callback: msRest.ServiceCallback<Models.ImageList>): void;
  /**
   * @param listId List Id of the image list.
   * @param contentType The content type.
   * @param body Schema of the body.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(listId: string, contentType: string, body: Models.Body, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ImageList>): void;
  update(listId: string, contentType: string, body: Models.Body, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ImageList>, callback?: msRest.ServiceCallback<Models.ImageList>): Promise<Models.ListManagementImageListsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        listId,
        contentType,
        body,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.ListManagementImageListsUpdateResponse>;
  }

  /**
   * Creates an image list.
   * @param contentType The content type.
   * @param body Schema of the body.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListManagementImageListsCreateResponse>
   */
  create(contentType: string, body: Models.Body, options?: msRest.RequestOptionsBase): Promise<Models.ListManagementImageListsCreateResponse>;
  /**
   * @param contentType The content type.
   * @param body Schema of the body.
   * @param callback The callback
   */
  create(contentType: string, body: Models.Body, callback: msRest.ServiceCallback<Models.ImageList>): void;
  /**
   * @param contentType The content type.
   * @param body Schema of the body.
   * @param options The optional parameters
   * @param callback The callback
   */
  create(contentType: string, body: Models.Body, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ImageList>): void;
  create(contentType: string, body: Models.Body, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ImageList>, callback?: msRest.ServiceCallback<Models.ImageList>): Promise<Models.ListManagementImageListsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        contentType,
        body,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.ListManagementImageListsCreateResponse>;
  }

  /**
   * Gets all the Image Lists.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListManagementImageListsGetAllImageListsResponse>
   */
  getAllImageLists(options?: msRest.RequestOptionsBase): Promise<Models.ListManagementImageListsGetAllImageListsResponse>;
  /**
   * @param callback The callback
   */
  getAllImageLists(callback: msRest.ServiceCallback<Models.ImageList[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllImageLists(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ImageList[]>): void;
  getAllImageLists(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ImageList[]>, callback?: msRest.ServiceCallback<Models.ImageList[]>): Promise<Models.ListManagementImageListsGetAllImageListsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getAllImageListsOperationSpec,
      callback) as Promise<Models.ListManagementImageListsGetAllImageListsResponse>;
  }

  /**
   * Refreshes the index of the list with list Id equal to list Id passed.
   * @param listId List Id of the image list.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListManagementImageListsRefreshIndexMethodResponse>
   */
  refreshIndexMethod(listId: string, options?: msRest.RequestOptionsBase): Promise<Models.ListManagementImageListsRefreshIndexMethodResponse>;
  /**
   * @param listId List Id of the image list.
   * @param callback The callback
   */
  refreshIndexMethod(listId: string, callback: msRest.ServiceCallback<Models.RefreshIndex>): void;
  /**
   * @param listId List Id of the image list.
   * @param options The optional parameters
   * @param callback The callback
   */
  refreshIndexMethod(listId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RefreshIndex>): void;
  refreshIndexMethod(listId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RefreshIndex>, callback?: msRest.ServiceCallback<Models.RefreshIndex>): Promise<Models.ListManagementImageListsRefreshIndexMethodResponse> {
    return this.client.sendOperationRequest(
      {
        listId,
        options
      },
      refreshIndexMethodOperationSpec,
      callback) as Promise<Models.ListManagementImageListsRefreshIndexMethodResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getDetailsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "contentmoderator/lists/v1.0/imagelists/{listId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.listId1
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ImageList
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "contentmoderator/lists/v1.0/imagelists/{listId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.listId1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "contentmoderator/lists/v1.0/imagelists/{listId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.listId1
  ],
  headerParameters: [
    Parameters.contentType0
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Body,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ImageList
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "contentmoderator/lists/v1.0/imagelists",
  urlParameters: [
    Parameters.endpoint
  ],
  headerParameters: [
    Parameters.contentType0
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Body,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ImageList
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const getAllImageListsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "contentmoderator/lists/v1.0/imagelists",
  urlParameters: [
    Parameters.endpoint
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ImageList"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const refreshIndexMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "contentmoderator/lists/v1.0/imagelists/{listId}/RefreshIndex",
  urlParameters: [
    Parameters.endpoint,
    Parameters.listId1
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RefreshIndex
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};
