/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.CognitiveservicesContentmoderator = {}),global.msRest));
}(this, (function (exports,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for Type.
     * Possible values include: 'Image', 'Text'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Type = <Type>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Type;
    (function (Type) {
        Type["Image"] = "Image";
        Type["Text"] = "Text";
    })(Type || (Type = {}));
    /**
     * Defines values for StatusEnum.
     * Possible values include: 'Complete', 'Unpublished', 'Pending'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: StatusEnum = <StatusEnum>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum["Complete"] = "Complete";
        StatusEnum["Unpublished"] = "Unpublished";
        StatusEnum["Pending"] = "Pending";
    })(StatusEnum || (StatusEnum = {}));
    /**
     * Defines values for TextContentType.
     * Possible values include: 'text/plain', 'text/html', 'text/xml',
     * 'text/markdown'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: TextContentType =
     * <TextContentType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var TextContentType;
    (function (TextContentType) {
        TextContentType["Textplain"] = "text/plain";
        TextContentType["Texthtml"] = "text/html";
        TextContentType["Textxml"] = "text/xml";
        TextContentType["Textmarkdown"] = "text/markdown";
    })(TextContentType || (TextContentType = {}));
    /**
     * Defines values for TextContentType1.
     * Possible values include: 'text/plain', 'text/html', 'text/xml',
     * 'text/markdown'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: TextContentType1 =
     * <TextContentType1>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var TextContentType1;
    (function (TextContentType1) {
        TextContentType1["Textplain"] = "text/plain";
        TextContentType1["Texthtml"] = "text/html";
        TextContentType1["Textxml"] = "text/xml";
        TextContentType1["Textmarkdown"] = "text/markdown";
    })(TextContentType1 || (TextContentType1 = {}));
    /**
     * Defines values for ContentType.
     * Possible values include: 'Image', 'Text', 'Video'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ContentType =
     * <ContentType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ContentType;
    (function (ContentType) {
        ContentType["Image"] = "Image";
        ContentType["Text"] = "Text";
        ContentType["Video"] = "Video";
    })(ContentType || (ContentType = {}));
    /**
     * Defines values for JobContentType.
     * Possible values include: 'application/json', 'image/jpeg'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: JobContentType =
     * <JobContentType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var JobContentType;
    (function (JobContentType) {
        JobContentType["Applicationjson"] = "application/json";
        JobContentType["Imagejpeg"] = "image/jpeg";
    })(JobContentType || (JobContentType = {}));

    var index = /*#__PURE__*/Object.freeze({
        get Type () { return Type; },
        get StatusEnum () { return StatusEnum; },
        get TextContentType () { return TextContentType; },
        get TextContentType1 () { return TextContentType1; },
        get ContentType () { return ContentType; },
        get JobContentType () { return JobContentType; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var KeyValuePair = {
        serializedName: "KeyValuePair",
        type: {
            name: "Composite",
            className: "KeyValuePair",
            modelProperties: {
                key: {
                    serializedName: "Key",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "Value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Tag = {
        serializedName: "Tag",
        type: {
            name: "Composite",
            className: "Tag",
            modelProperties: {
                key: {
                    serializedName: "Key",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "Value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Frame = {
        serializedName: "Frame",
        type: {
            name: "Composite",
            className: "Frame",
            modelProperties: {
                timestamp: {
                    serializedName: "Timestamp",
                    type: {
                        name: "String"
                    }
                },
                frameImage: {
                    serializedName: "FrameImage",
                    type: {
                        name: "String"
                    }
                },
                metadata: {
                    serializedName: "Metadata",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "KeyValuePair"
                            }
                        }
                    }
                },
                reviewerResultTags: {
                    serializedName: "ReviewerResultTags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Tag"
                            }
                        }
                    }
                }
            }
        }
    };
    var Frames = {
        serializedName: "Frames",
        type: {
            name: "Composite",
            className: "Frames",
            modelProperties: {
                reviewId: {
                    serializedName: "ReviewId",
                    type: {
                        name: "String"
                    }
                },
                videoFrames: {
                    serializedName: "VideoFrames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Frame"
                            }
                        }
                    }
                }
            }
        }
    };
    var ClassificationCategory1 = {
        serializedName: "Classification_Category1",
        type: {
            name: "Composite",
            className: "ClassificationCategory1",
            modelProperties: {
                score: {
                    serializedName: "Score",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ClassificationCategory2 = {
        serializedName: "Classification_Category2",
        type: {
            name: "Composite",
            className: "ClassificationCategory2",
            modelProperties: {
                score: {
                    serializedName: "Score",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ClassificationCategory3 = {
        serializedName: "Classification_Category3",
        type: {
            name: "Composite",
            className: "ClassificationCategory3",
            modelProperties: {
                score: {
                    serializedName: "Score",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Classification = {
        serializedName: "Classification",
        type: {
            name: "Composite",
            className: "Classification",
            modelProperties: {
                category1: {
                    serializedName: "Category1",
                    type: {
                        name: "Composite",
                        className: "ClassificationCategory1"
                    }
                },
                category2: {
                    serializedName: "Category2",
                    type: {
                        name: "Composite",
                        className: "ClassificationCategory2"
                    }
                },
                category3: {
                    serializedName: "Category3",
                    type: {
                        name: "Composite",
                        className: "ClassificationCategory3"
                    }
                },
                reviewRecommended: {
                    serializedName: "ReviewRecommended",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var Status = {
        serializedName: "Status",
        type: {
            name: "Composite",
            className: "Status",
            modelProperties: {
                code: {
                    serializedName: "Code",
                    type: {
                        name: "Number"
                    }
                },
                description: {
                    serializedName: "Description",
                    type: {
                        name: "String"
                    }
                },
                exception: {
                    serializedName: "Exception",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Email = {
        serializedName: "Email",
        type: {
            name: "Composite",
            className: "Email",
            modelProperties: {
                detected: {
                    serializedName: "Detected",
                    type: {
                        name: "String"
                    }
                },
                subType: {
                    serializedName: "SubType",
                    type: {
                        name: "String"
                    }
                },
                text: {
                    serializedName: "Text",
                    type: {
                        name: "String"
                    }
                },
                index: {
                    serializedName: "Index",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var SSN = {
        serializedName: "SSN",
        type: {
            name: "Composite",
            className: "SSN",
            modelProperties: {
                text: {
                    serializedName: "Text",
                    type: {
                        name: "String"
                    }
                },
                index: {
                    serializedName: "Index",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var IPA = {
        serializedName: "IPA",
        type: {
            name: "Composite",
            className: "IPA",
            modelProperties: {
                subType: {
                    serializedName: "SubType",
                    type: {
                        name: "String"
                    }
                },
                text: {
                    serializedName: "Text",
                    type: {
                        name: "String"
                    }
                },
                index: {
                    serializedName: "Index",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Phone = {
        serializedName: "Phone",
        type: {
            name: "Composite",
            className: "Phone",
            modelProperties: {
                countryCode: {
                    serializedName: "CountryCode",
                    type: {
                        name: "String"
                    }
                },
                text: {
                    serializedName: "Text",
                    type: {
                        name: "String"
                    }
                },
                index: {
                    serializedName: "Index",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Address = {
        serializedName: "Address",
        type: {
            name: "Composite",
            className: "Address",
            modelProperties: {
                text: {
                    serializedName: "Text",
                    type: {
                        name: "String"
                    }
                },
                index: {
                    serializedName: "Index",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var PII = {
        serializedName: "PII",
        type: {
            name: "Composite",
            className: "PII",
            modelProperties: {
                email: {
                    serializedName: "Email",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Email"
                            }
                        }
                    }
                },
                sSN: {
                    serializedName: "SSN",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SSN"
                            }
                        }
                    }
                },
                iPA: {
                    serializedName: "IPA",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IPA"
                            }
                        }
                    }
                },
                phone: {
                    serializedName: "Phone",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Phone"
                            }
                        }
                    }
                },
                address: {
                    serializedName: "Address",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Address"
                            }
                        }
                    }
                }
            }
        }
    };
    var DetectedTerms = {
        serializedName: "DetectedTerms",
        type: {
            name: "Composite",
            className: "DetectedTerms",
            modelProperties: {
                index: {
                    serializedName: "Index",
                    type: {
                        name: "Number"
                    }
                },
                originalIndex: {
                    serializedName: "OriginalIndex",
                    type: {
                        name: "Number"
                    }
                },
                listId: {
                    serializedName: "ListId",
                    type: {
                        name: "Number"
                    }
                },
                term: {
                    serializedName: "Term",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Screen = {
        serializedName: "Screen",
        type: {
            name: "Composite",
            className: "Screen",
            modelProperties: {
                originalText: {
                    serializedName: "OriginalText",
                    type: {
                        name: "String"
                    }
                },
                normalizedText: {
                    serializedName: "NormalizedText",
                    type: {
                        name: "String"
                    }
                },
                autoCorrectedText: {
                    serializedName: "AutoCorrectedText",
                    type: {
                        name: "String"
                    }
                },
                misrepresentation: {
                    serializedName: "Misrepresentation",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                classification: {
                    serializedName: "Classification",
                    type: {
                        name: "Composite",
                        className: "Classification"
                    }
                },
                status: {
                    serializedName: "Status",
                    type: {
                        name: "Composite",
                        className: "Status"
                    }
                },
                pII: {
                    serializedName: "PII",
                    type: {
                        name: "Composite",
                        className: "PII"
                    }
                },
                language: {
                    serializedName: "Language",
                    type: {
                        name: "String"
                    }
                },
                terms: {
                    serializedName: "Terms",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DetectedTerms"
                            }
                        }
                    }
                },
                trackingId: {
                    serializedName: "TrackingId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Face = {
        serializedName: "Face",
        type: {
            name: "Composite",
            className: "Face",
            modelProperties: {
                bottom: {
                    serializedName: "Bottom",
                    type: {
                        name: "Number"
                    }
                },
                left: {
                    serializedName: "Left",
                    type: {
                        name: "Number"
                    }
                },
                right: {
                    serializedName: "Right",
                    type: {
                        name: "Number"
                    }
                },
                top: {
                    serializedName: "Top",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var FoundFaces = {
        serializedName: "FoundFaces",
        type: {
            name: "Composite",
            className: "FoundFaces",
            modelProperties: {
                status: {
                    serializedName: "Status",
                    type: {
                        name: "Composite",
                        className: "Status"
                    }
                },
                trackingId: {
                    serializedName: "TrackingId",
                    type: {
                        name: "String"
                    }
                },
                cacheId: {
                    serializedName: "CacheId",
                    type: {
                        name: "String"
                    }
                },
                result: {
                    serializedName: "Result",
                    type: {
                        name: "Boolean"
                    }
                },
                count: {
                    serializedName: "Count",
                    type: {
                        name: "Number"
                    }
                },
                advancedInfo: {
                    serializedName: "AdvancedInfo",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "KeyValuePair"
                            }
                        }
                    }
                },
                faces: {
                    serializedName: "Faces",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Face"
                            }
                        }
                    }
                }
            }
        }
    };
    var Candidate = {
        serializedName: "Candidate",
        type: {
            name: "Composite",
            className: "Candidate",
            modelProperties: {
                text: {
                    serializedName: "Text",
                    type: {
                        name: "String"
                    }
                },
                confidence: {
                    serializedName: "Confidence",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var OCR = {
        serializedName: "OCR",
        type: {
            name: "Composite",
            className: "OCR",
            modelProperties: {
                status: {
                    serializedName: "Status",
                    type: {
                        name: "Composite",
                        className: "Status"
                    }
                },
                metadata: {
                    serializedName: "Metadata",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "KeyValuePair"
                            }
                        }
                    }
                },
                trackingId: {
                    serializedName: "TrackingId",
                    type: {
                        name: "String"
                    }
                },
                cacheId: {
                    serializedName: "CacheId",
                    type: {
                        name: "String"
                    }
                },
                language: {
                    serializedName: "Language",
                    type: {
                        name: "String"
                    }
                },
                text: {
                    serializedName: "Text",
                    type: {
                        name: "String"
                    }
                },
                candidates: {
                    serializedName: "Candidates",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Candidate"
                            }
                        }
                    }
                }
            }
        }
    };
    var Evaluate = {
        serializedName: "Evaluate",
        type: {
            name: "Composite",
            className: "Evaluate",
            modelProperties: {
                cacheID: {
                    serializedName: "CacheID",
                    type: {
                        name: "String"
                    }
                },
                result: {
                    serializedName: "Result",
                    type: {
                        name: "Boolean"
                    }
                },
                trackingId: {
                    serializedName: "TrackingId",
                    type: {
                        name: "String"
                    }
                },
                adultClassificationScore: {
                    serializedName: "AdultClassificationScore",
                    type: {
                        name: "Number"
                    }
                },
                isImageAdultClassified: {
                    serializedName: "IsImageAdultClassified",
                    type: {
                        name: "Boolean"
                    }
                },
                racyClassificationScore: {
                    serializedName: "RacyClassificationScore",
                    type: {
                        name: "Number"
                    }
                },
                isImageRacyClassified: {
                    serializedName: "IsImageRacyClassified",
                    type: {
                        name: "Boolean"
                    }
                },
                advancedInfo: {
                    serializedName: "AdvancedInfo",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "KeyValuePair"
                            }
                        }
                    }
                },
                status: {
                    serializedName: "Status",
                    type: {
                        name: "Composite",
                        className: "Status"
                    }
                }
            }
        }
    };
    var Match = {
        serializedName: "Match",
        type: {
            name: "Composite",
            className: "Match",
            modelProperties: {
                score: {
                    serializedName: "Score",
                    type: {
                        name: "Number"
                    }
                },
                matchId: {
                    serializedName: "MatchId",
                    type: {
                        name: "Number"
                    }
                },
                source: {
                    serializedName: "Source",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "Tags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                },
                label: {
                    serializedName: "Label",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MatchResponse = {
        serializedName: "MatchResponse",
        type: {
            name: "Composite",
            className: "MatchResponse",
            modelProperties: {
                trackingId: {
                    serializedName: "TrackingId",
                    type: {
                        name: "String"
                    }
                },
                cacheID: {
                    serializedName: "CacheID",
                    type: {
                        name: "String"
                    }
                },
                isMatch: {
                    serializedName: "IsMatch",
                    type: {
                        name: "Boolean"
                    }
                },
                matches: {
                    serializedName: "Matches",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Match"
                            }
                        }
                    }
                },
                status: {
                    serializedName: "Status",
                    type: {
                        name: "Composite",
                        className: "Status"
                    }
                }
            }
        }
    };
    var DetectedLanguage = {
        serializedName: "DetectedLanguage",
        type: {
            name: "Composite",
            className: "DetectedLanguage",
            modelProperties: {
                detectedLanguage: {
                    serializedName: "DetectedLanguage",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    serializedName: "Status",
                    type: {
                        name: "Composite",
                        className: "Status"
                    }
                },
                trackingId: {
                    serializedName: "TrackingId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ImageList = {
        serializedName: "ImageList",
        type: {
            name: "Composite",
            className: "ImageList",
            modelProperties: {
                id: {
                    serializedName: "Id",
                    type: {
                        name: "Number"
                    }
                },
                name: {
                    serializedName: "Name",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "Description",
                    type: {
                        name: "String"
                    }
                },
                metadata: {
                    serializedName: "Metadata",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var TermList = {
        serializedName: "TermList",
        type: {
            name: "Composite",
            className: "TermList",
            modelProperties: {
                id: {
                    serializedName: "Id",
                    type: {
                        name: "Number"
                    }
                },
                name: {
                    serializedName: "Name",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "Description",
                    type: {
                        name: "String"
                    }
                },
                metadata: {
                    serializedName: "Metadata",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var RefreshIndex = {
        serializedName: "RefreshIndex",
        type: {
            name: "Composite",
            className: "RefreshIndex",
            modelProperties: {
                contentSourceId: {
                    serializedName: "ContentSourceId",
                    type: {
                        name: "String"
                    }
                },
                isUpdateSuccess: {
                    serializedName: "IsUpdateSuccess",
                    type: {
                        name: "Boolean"
                    }
                },
                advancedInfo: {
                    serializedName: "AdvancedInfo",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Dictionary",
                                value: {
                                    type: {
                                        name: "String"
                                    }
                                }
                            }
                        }
                    }
                },
                status: {
                    serializedName: "Status",
                    type: {
                        name: "Composite",
                        className: "Status"
                    }
                },
                trackingId: {
                    serializedName: "TrackingId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ImageAdditionalInfoItem = {
        serializedName: "Image_AdditionalInfoItem",
        type: {
            name: "Composite",
            className: "ImageAdditionalInfoItem",
            modelProperties: {
                key: {
                    serializedName: "Key",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "Value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Image = {
        serializedName: "Image",
        type: {
            name: "Composite",
            className: "Image",
            modelProperties: {
                contentId: {
                    serializedName: "ContentId",
                    type: {
                        name: "String"
                    }
                },
                additionalInfo: {
                    serializedName: "AdditionalInfo",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImageAdditionalInfoItem"
                            }
                        }
                    }
                },
                status: {
                    serializedName: "Status",
                    type: {
                        name: "Composite",
                        className: "Status"
                    }
                },
                trackingId: {
                    serializedName: "TrackingId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ImageIds = {
        serializedName: "ImageIds",
        type: {
            name: "Composite",
            className: "ImageIds",
            modelProperties: {
                contentSource: {
                    serializedName: "ContentSource",
                    type: {
                        name: "String"
                    }
                },
                contentIds: {
                    serializedName: "ContentIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                },
                status: {
                    serializedName: "Status",
                    type: {
                        name: "Composite",
                        className: "Status"
                    }
                },
                trackingId: {
                    serializedName: "TrackingId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TermsInList = {
        serializedName: "TermsInList",
        type: {
            name: "Composite",
            className: "TermsInList",
            modelProperties: {
                term: {
                    serializedName: "Term",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TermsData = {
        serializedName: "TermsData",
        type: {
            name: "Composite",
            className: "TermsData",
            modelProperties: {
                language: {
                    serializedName: "Language",
                    type: {
                        name: "String"
                    }
                },
                terms: {
                    serializedName: "Terms",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TermsInList"
                            }
                        }
                    }
                },
                status: {
                    serializedName: "Status",
                    type: {
                        name: "Composite",
                        className: "Status"
                    }
                },
                trackingId: {
                    serializedName: "TrackingId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TermsPaging = {
        serializedName: "Terms_Paging",
        type: {
            name: "Composite",
            className: "TermsPaging",
            modelProperties: {
                total: {
                    serializedName: "Total",
                    type: {
                        name: "Number"
                    }
                },
                limit: {
                    serializedName: "Limit",
                    type: {
                        name: "Number"
                    }
                },
                offset: {
                    serializedName: "Offset",
                    type: {
                        name: "Number"
                    }
                },
                returned: {
                    serializedName: "Returned",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Terms = {
        serializedName: "Terms",
        type: {
            name: "Composite",
            className: "Terms",
            modelProperties: {
                data: {
                    serializedName: "Data",
                    type: {
                        name: "Composite",
                        className: "TermsData"
                    }
                },
                paging: {
                    serializedName: "Paging",
                    type: {
                        name: "Composite",
                        className: "TermsPaging"
                    }
                }
            }
        }
    };
    var Review = {
        serializedName: "Review",
        type: {
            name: "Composite",
            className: "Review",
            modelProperties: {
                reviewId: {
                    serializedName: "ReviewId",
                    type: {
                        name: "String"
                    }
                },
                subTeam: {
                    serializedName: "SubTeam",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    serializedName: "Status",
                    type: {
                        name: "String"
                    }
                },
                reviewerResultTags: {
                    serializedName: "ReviewerResultTags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "KeyValuePair"
                            }
                        }
                    }
                },
                createdBy: {
                    serializedName: "CreatedBy",
                    type: {
                        name: "String"
                    }
                },
                metadata: {
                    serializedName: "Metadata",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "KeyValuePair"
                            }
                        }
                    }
                },
                type: {
                    serializedName: "Type",
                    type: {
                        name: "String"
                    }
                },
                content: {
                    serializedName: "Content",
                    type: {
                        name: "String"
                    }
                },
                contentId: {
                    serializedName: "ContentId",
                    type: {
                        name: "String"
                    }
                },
                callbackEndpoint: {
                    serializedName: "CallbackEndpoint",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobExecutionReportDetails = {
        serializedName: "JobExecutionReportDetails",
        type: {
            name: "Composite",
            className: "JobExecutionReportDetails",
            modelProperties: {
                ts: {
                    serializedName: "Ts",
                    type: {
                        name: "String"
                    }
                },
                msg: {
                    serializedName: "Msg",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Job = {
        serializedName: "Job",
        type: {
            name: "Composite",
            className: "Job",
            modelProperties: {
                id: {
                    serializedName: "Id",
                    type: {
                        name: "String"
                    }
                },
                teamName: {
                    serializedName: "TeamName",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    serializedName: "Status",
                    type: {
                        name: "String"
                    }
                },
                workflowId: {
                    serializedName: "WorkflowId",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "Type",
                    type: {
                        name: "String"
                    }
                },
                callBackEndpoint: {
                    serializedName: "CallBackEndpoint",
                    type: {
                        name: "String"
                    }
                },
                reviewId: {
                    serializedName: "ReviewId",
                    type: {
                        name: "String"
                    }
                },
                resultMetaData: {
                    serializedName: "ResultMetaData",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "KeyValuePair"
                            }
                        }
                    }
                },
                jobExecutionReport: {
                    serializedName: "JobExecutionReport",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobExecutionReportDetails"
                            }
                        }
                    }
                }
            }
        }
    };
    var JobListResult = {
        serializedName: "JobListResult",
        type: {
            name: "Composite",
            className: "JobListResult",
            modelProperties: {
                value: {
                    serializedName: "Value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var JobId = {
        serializedName: "JobId",
        type: {
            name: "Composite",
            className: "JobId",
            modelProperties: {
                jobId: {
                    serializedName: "JobId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorModel = {
        serializedName: "Error",
        type: {
            name: "Composite",
            className: "ErrorModel",
            modelProperties: {
                code: {
                    serializedName: "Code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "Message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var APIError = {
        serializedName: "APIError",
        type: {
            name: "Composite",
            className: "APIError",
            modelProperties: {
                error: {
                    serializedName: "Error",
                    type: {
                        name: "Composite",
                        className: "ErrorModel"
                    }
                }
            }
        }
    };
    var Body = {
        serializedName: "body",
        type: {
            name: "Composite",
            className: "Body",
            modelProperties: {
                name: {
                    serializedName: "Name",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "Description",
                    type: {
                        name: "String"
                    }
                },
                metadata: {
                    serializedName: "Metadata",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var CreateReviewBodyItemMetadataItem = {
        serializedName: "createReviewBodyItem_MetadataItem",
        type: {
            name: "Composite",
            className: "CreateReviewBodyItemMetadataItem",
            modelProperties: {
                key: {
                    required: true,
                    serializedName: "Key",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    required: true,
                    serializedName: "Value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CreateReviewBodyItem = {
        serializedName: "createReviewBodyItem",
        type: {
            name: "Composite",
            className: "CreateReviewBodyItem",
            modelProperties: {
                type: {
                    required: true,
                    serializedName: "Type",
                    type: {
                        name: "String"
                    }
                },
                content: {
                    required: true,
                    serializedName: "Content",
                    type: {
                        name: "String"
                    }
                },
                contentId: {
                    required: true,
                    serializedName: "ContentId",
                    type: {
                        name: "String"
                    }
                },
                callbackEndpoint: {
                    serializedName: "CallbackEndpoint",
                    type: {
                        name: "String"
                    }
                },
                metadata: {
                    serializedName: "Metadata",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CreateReviewBodyItemMetadataItem"
                            }
                        }
                    }
                }
            }
        }
    };
    var Content = {
        serializedName: "Content",
        type: {
            name: "Composite",
            className: "Content",
            modelProperties: {
                contentValue: {
                    required: true,
                    serializedName: "ContentValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TranscriptModerationBodyItemTermsItem = {
        serializedName: "transcriptModerationBodyItem_TermsItem",
        type: {
            name: "Composite",
            className: "TranscriptModerationBodyItemTermsItem",
            modelProperties: {
                index: {
                    required: true,
                    serializedName: "Index",
                    type: {
                        name: "Number"
                    }
                },
                term: {
                    required: true,
                    serializedName: "Term",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TranscriptModerationBodyItem = {
        serializedName: "transcriptModerationBodyItem",
        type: {
            name: "Composite",
            className: "TranscriptModerationBodyItem",
            modelProperties: {
                timestamp: {
                    required: true,
                    serializedName: "Timestamp",
                    type: {
                        name: "String"
                    }
                },
                terms: {
                    required: true,
                    serializedName: "Terms",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TranscriptModerationBodyItemTermsItem"
                            }
                        }
                    }
                }
            }
        }
    };
    var BodyModel = {
        serializedName: "body",
        type: {
            name: "Composite",
            className: "BodyModel",
            modelProperties: {
                dataRepresentation: {
                    serializedName: "DataRepresentation",
                    defaultValue: 'URL',
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "Value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CreateVideoReviewsBodyItemVideoFramesItemReviewerResultTagsItem = {
        serializedName: "CreateVideoReviewsBodyItem_VideoFramesItem_ReviewerResultTagsItem",
        type: {
            name: "Composite",
            className: "CreateVideoReviewsBodyItemVideoFramesItemReviewerResultTagsItem",
            modelProperties: {
                key: {
                    required: true,
                    serializedName: "Key",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    required: true,
                    serializedName: "Value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CreateVideoReviewsBodyItemVideoFramesItemMetadataItem = {
        serializedName: "CreateVideoReviewsBodyItem_VideoFramesItem_MetadataItem",
        type: {
            name: "Composite",
            className: "CreateVideoReviewsBodyItemVideoFramesItemMetadataItem",
            modelProperties: {
                key: {
                    required: true,
                    serializedName: "Key",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    required: true,
                    serializedName: "Value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CreateVideoReviewsBodyItemVideoFramesItem = {
        serializedName: "CreateVideoReviewsBodyItem_VideoFramesItem",
        type: {
            name: "Composite",
            className: "CreateVideoReviewsBodyItemVideoFramesItem",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "Id",
                    type: {
                        name: "String"
                    }
                },
                timestamp: {
                    required: true,
                    serializedName: "Timestamp",
                    type: {
                        name: "Number"
                    }
                },
                frameImage: {
                    required: true,
                    serializedName: "FrameImage",
                    type: {
                        name: "String"
                    }
                },
                reviewerResultTags: {
                    serializedName: "ReviewerResultTags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CreateVideoReviewsBodyItemVideoFramesItemReviewerResultTagsItem"
                            }
                        }
                    }
                },
                metadata: {
                    serializedName: "Metadata",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CreateVideoReviewsBodyItemVideoFramesItemMetadataItem"
                            }
                        }
                    }
                }
            }
        }
    };
    var CreateVideoReviewsBodyItemMetadataItem = {
        serializedName: "CreateVideoReviewsBodyItem_MetadataItem",
        type: {
            name: "Composite",
            className: "CreateVideoReviewsBodyItemMetadataItem",
            modelProperties: {
                key: {
                    required: true,
                    serializedName: "Key",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    required: true,
                    serializedName: "Value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CreateVideoReviewsBodyItem = {
        serializedName: "CreateVideoReviewsBodyItem",
        type: {
            name: "Composite",
            className: "CreateVideoReviewsBodyItem",
            modelProperties: {
                videoFrames: {
                    serializedName: "VideoFrames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CreateVideoReviewsBodyItemVideoFramesItem"
                            }
                        }
                    }
                },
                metadata: {
                    serializedName: "Metadata",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CreateVideoReviewsBodyItemMetadataItem"
                            }
                        }
                    }
                },
                type: {
                    required: true,
                    isConstant: true,
                    serializedName: "Type",
                    defaultValue: 'Video',
                    type: {
                        name: "String"
                    }
                },
                content: {
                    required: true,
                    serializedName: "Content",
                    type: {
                        name: "String"
                    }
                },
                contentId: {
                    required: true,
                    serializedName: "ContentId",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    required: true,
                    serializedName: "Status",
                    type: {
                        name: "String"
                    }
                },
                timescale: {
                    serializedName: "Timescale",
                    type: {
                        name: "Number"
                    }
                },
                callbackEndpoint: {
                    serializedName: "CallbackEndpoint",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VideoFrameBodyItemReviewerResultTagsItem = {
        serializedName: "videoFrameBodyItem_ReviewerResultTagsItem",
        type: {
            name: "Composite",
            className: "VideoFrameBodyItemReviewerResultTagsItem",
            modelProperties: {
                key: {
                    required: true,
                    serializedName: "Key",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    required: true,
                    serializedName: "Value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VideoFrameBodyItemMetadataItem = {
        serializedName: "videoFrameBodyItem_MetadataItem",
        type: {
            name: "Composite",
            className: "VideoFrameBodyItemMetadataItem",
            modelProperties: {
                key: {
                    required: true,
                    serializedName: "Key",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    required: true,
                    serializedName: "Value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VideoFrameBodyItem = {
        serializedName: "videoFrameBodyItem",
        type: {
            name: "Composite",
            className: "VideoFrameBodyItem",
            modelProperties: {
                timestamp: {
                    required: true,
                    serializedName: "Timestamp",
                    type: {
                        name: "String"
                    }
                },
                frameImage: {
                    required: true,
                    serializedName: "FrameImage",
                    type: {
                        name: "String"
                    }
                },
                reviewerResultTags: {
                    serializedName: "ReviewerResultTags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VideoFrameBodyItemReviewerResultTagsItem"
                            }
                        }
                    }
                },
                metadata: {
                    serializedName: "Metadata",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VideoFrameBodyItemMetadataItem"
                            }
                        }
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        KeyValuePair: KeyValuePair,
        Tag: Tag,
        Frame: Frame,
        Frames: Frames,
        ClassificationCategory1: ClassificationCategory1,
        ClassificationCategory2: ClassificationCategory2,
        ClassificationCategory3: ClassificationCategory3,
        Classification: Classification,
        Status: Status,
        Email: Email,
        SSN: SSN,
        IPA: IPA,
        Phone: Phone,
        Address: Address,
        PII: PII,
        DetectedTerms: DetectedTerms,
        Screen: Screen,
        Face: Face,
        FoundFaces: FoundFaces,
        Candidate: Candidate,
        OCR: OCR,
        Evaluate: Evaluate,
        Match: Match,
        MatchResponse: MatchResponse,
        DetectedLanguage: DetectedLanguage,
        ImageList: ImageList,
        TermList: TermList,
        RefreshIndex: RefreshIndex,
        ImageAdditionalInfoItem: ImageAdditionalInfoItem,
        Image: Image,
        ImageIds: ImageIds,
        TermsInList: TermsInList,
        TermsData: TermsData,
        TermsPaging: TermsPaging,
        Terms: Terms,
        Review: Review,
        JobExecutionReportDetails: JobExecutionReportDetails,
        Job: Job,
        JobListResult: JobListResult,
        JobId: JobId,
        ErrorModel: ErrorModel,
        APIError: APIError,
        Body: Body,
        CreateReviewBodyItemMetadataItem: CreateReviewBodyItemMetadataItem,
        CreateReviewBodyItem: CreateReviewBodyItem,
        Content: Content,
        TranscriptModerationBodyItemTermsItem: TranscriptModerationBodyItemTermsItem,
        TranscriptModerationBodyItem: TranscriptModerationBodyItem,
        BodyModel: BodyModel,
        CreateVideoReviewsBodyItemVideoFramesItemReviewerResultTagsItem: CreateVideoReviewsBodyItemVideoFramesItemReviewerResultTagsItem,
        CreateVideoReviewsBodyItemVideoFramesItemMetadataItem: CreateVideoReviewsBodyItemVideoFramesItemMetadataItem,
        CreateVideoReviewsBodyItemVideoFramesItem: CreateVideoReviewsBodyItemVideoFramesItem,
        CreateVideoReviewsBodyItemMetadataItem: CreateVideoReviewsBodyItemMetadataItem,
        CreateVideoReviewsBodyItem: CreateVideoReviewsBodyItem,
        VideoFrameBodyItemReviewerResultTagsItem: VideoFrameBodyItemReviewerResultTagsItem,
        VideoFrameBodyItemMetadataItem: VideoFrameBodyItemMetadataItem,
        VideoFrameBodyItem: VideoFrameBodyItem
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        FoundFaces: FoundFaces,
        Status: Status,
        KeyValuePair: KeyValuePair,
        Face: Face,
        APIError: APIError,
        ErrorModel: ErrorModel,
        OCR: OCR,
        Candidate: Candidate,
        Evaluate: Evaluate,
        MatchResponse: MatchResponse,
        Match: Match,
        BodyModel: BodyModel
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var autocorrect = {
        parameterPath: [
            "options",
            "autocorrect"
        ],
        mapper: {
            serializedName: "autocorrect",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var cacheImage = {
        parameterPath: [
            "options",
            "cacheImage"
        ],
        mapper: {
            serializedName: "CacheImage",
            type: {
                name: "Boolean"
            }
        }
    };
    var callBackEndpoint = {
        parameterPath: [
            "options",
            "callBackEndpoint"
        ],
        mapper: {
            serializedName: "CallBackEndpoint",
            type: {
                name: "String"
            }
        }
    };
    var classify = {
        parameterPath: [
            "options",
            "classify"
        ],
        mapper: {
            serializedName: "classify",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var contentId = {
        parameterPath: "contentId",
        mapper: {
            required: true,
            serializedName: "ContentId",
            type: {
                name: "String"
            }
        }
    };
    var contentType0 = {
        parameterPath: "contentType",
        mapper: {
            required: true,
            serializedName: "Content-Type",
            type: {
                name: "String"
            }
        }
    };
    var contentType1 = {
        parameterPath: "contentType",
        mapper: {
            required: true,
            serializedName: "ContentType",
            type: {
                name: "String"
            }
        }
    };
    var contentType2 = {
        parameterPath: "contentType",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "Content-Type",
            defaultValue: 'text/plain',
            type: {
                name: "String"
            }
        }
    };
    var endpoint = {
        parameterPath: "endpoint",
        mapper: {
            required: true,
            serializedName: "Endpoint",
            defaultValue: '',
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var enhanced = {
        parameterPath: [
            "options",
            "enhanced"
        ],
        mapper: {
            serializedName: "enhanced",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var filter = {
        parameterPath: [
            "options",
            "filter"
        ],
        mapper: {
            serializedName: "filter",
            type: {
                name: "String"
            }
        }
    };
    var frameImageZip = {
        parameterPath: "frameImageZip",
        mapper: {
            required: true,
            serializedName: "frameImageZip",
            type: {
                name: "Stream"
            }
        }
    };
    var frameMetadata = {
        parameterPath: "frameMetadata",
        mapper: {
            required: true,
            serializedName: "frameMetadata",
            type: {
                name: "String"
            }
        }
    };
    var imageId = {
        parameterPath: "imageId",
        mapper: {
            required: true,
            serializedName: "ImageId",
            type: {
                name: "String"
            }
        }
    };
    var jobContentType = {
        parameterPath: "jobContentType",
        mapper: {
            required: true,
            serializedName: "Content-Type",
            type: {
                name: "String"
            }
        }
    };
    var jobId = {
        parameterPath: "jobId",
        mapper: {
            required: true,
            serializedName: "JobId",
            type: {
                name: "String"
            }
        }
    };
    var label = {
        parameterPath: [
            "options",
            "label"
        ],
        mapper: {
            serializedName: "label",
            type: {
                name: "String"
            }
        }
    };
    var language0 = {
        parameterPath: "language",
        mapper: {
            required: true,
            serializedName: "language",
            type: {
                name: "String"
            }
        }
    };
    var language1 = {
        parameterPath: [
            "options",
            "language"
        ],
        mapper: {
            serializedName: "language",
            type: {
                name: "String"
            }
        }
    };
    var limit = {
        parameterPath: [
            "options",
            "limit"
        ],
        mapper: {
            serializedName: "limit",
            type: {
                name: "Number"
            }
        }
    };
    var listId0 = {
        parameterPath: [
            "options",
            "listId"
        ],
        mapper: {
            serializedName: "listId",
            type: {
                name: "String"
            }
        }
    };
    var listId1 = {
        parameterPath: "listId",
        mapper: {
            required: true,
            serializedName: "listId",
            type: {
                name: "String"
            }
        }
    };
    var noOfRecords = {
        parameterPath: [
            "options",
            "noOfRecords"
        ],
        mapper: {
            serializedName: "noOfRecords",
            type: {
                name: "Number"
            }
        }
    };
    var offset = {
        parameterPath: [
            "options",
            "offset"
        ],
        mapper: {
            serializedName: "offset",
            type: {
                name: "Number"
            }
        }
    };
    var pII = {
        parameterPath: [
            "options",
            "pII"
        ],
        mapper: {
            serializedName: "PII",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var reviewId = {
        parameterPath: "reviewId",
        mapper: {
            required: true,
            serializedName: "reviewId",
            type: {
                name: "String"
            }
        }
    };
    var startSeed = {
        parameterPath: [
            "options",
            "startSeed"
        ],
        mapper: {
            serializedName: "startSeed",
            type: {
                name: "Number"
            }
        }
    };
    var subTeam = {
        parameterPath: [
            "options",
            "subTeam"
        ],
        mapper: {
            serializedName: "subTeam",
            type: {
                name: "String"
            }
        }
    };
    var tag = {
        parameterPath: [
            "options",
            "tag"
        ],
        mapper: {
            serializedName: "tag",
            type: {
                name: "Number"
            }
        }
    };
    var teamName = {
        parameterPath: "teamName",
        mapper: {
            required: true,
            serializedName: "teamName",
            type: {
                name: "String"
            }
        }
    };
    var term = {
        parameterPath: "term",
        mapper: {
            required: true,
            serializedName: "term",
            type: {
                name: "String"
            }
        }
    };
    var textContentType = {
        parameterPath: "textContentType",
        mapper: {
            required: true,
            serializedName: "Content-Type",
            type: {
                name: "String"
            }
        }
    };
    var timescale = {
        parameterPath: [
            "options",
            "timescale"
        ],
        mapper: {
            serializedName: "timescale",
            type: {
                name: "Number"
            }
        }
    };
    var urlContentType = {
        parameterPath: "urlContentType",
        mapper: {
            required: true,
            serializedName: "UrlContentType",
            type: {
                name: "String"
            }
        }
    };
    var workflowName = {
        parameterPath: "workflowName",
        mapper: {
            required: true,
            serializedName: "WorkflowName",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ImageModeration. */
    var ImageModeration = /** @class */ (function () {
        /**
         * Create a ImageModeration.
         * @param {ContentModeratorClientContext} client Reference to the service client.
         */
        function ImageModeration(client) {
            this.client = client;
        }
        ImageModeration.prototype.findFaces = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, findFacesOperationSpec, callback);
        };
        ImageModeration.prototype.oCRMethod = function (language, options, callback) {
            return this.client.sendOperationRequest({
                language: language,
                options: options
            }, oCRMethodOperationSpec, callback);
        };
        ImageModeration.prototype.evaluateMethod = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, evaluateMethodOperationSpec, callback);
        };
        ImageModeration.prototype.matchMethod = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, matchMethodOperationSpec, callback);
        };
        ImageModeration.prototype.findFacesFileInput = function (imageStream, options, callback) {
            return this.client.sendOperationRequest({
                imageStream: imageStream,
                options: options
            }, findFacesFileInputOperationSpec, callback);
        };
        ImageModeration.prototype.findFacesUrlInput = function (contentType, imageUrl, options, callback) {
            return this.client.sendOperationRequest({
                contentType: contentType,
                imageUrl: imageUrl,
                options: options
            }, findFacesUrlInputOperationSpec, callback);
        };
        ImageModeration.prototype.oCRUrlInput = function (language, contentType, imageUrl, options, callback) {
            return this.client.sendOperationRequest({
                language: language,
                contentType: contentType,
                imageUrl: imageUrl,
                options: options
            }, oCRUrlInputOperationSpec, callback);
        };
        ImageModeration.prototype.oCRFileInput = function (language, imageStream, options, callback) {
            return this.client.sendOperationRequest({
                language: language,
                imageStream: imageStream,
                options: options
            }, oCRFileInputOperationSpec, callback);
        };
        ImageModeration.prototype.evaluateFileInput = function (imageStream, options, callback) {
            return this.client.sendOperationRequest({
                imageStream: imageStream,
                options: options
            }, evaluateFileInputOperationSpec, callback);
        };
        ImageModeration.prototype.evaluateUrlInput = function (contentType, imageUrl, options, callback) {
            return this.client.sendOperationRequest({
                contentType: contentType,
                imageUrl: imageUrl,
                options: options
            }, evaluateUrlInputOperationSpec, callback);
        };
        ImageModeration.prototype.matchUrlInput = function (contentType, imageUrl, options, callback) {
            return this.client.sendOperationRequest({
                contentType: contentType,
                imageUrl: imageUrl,
                options: options
            }, matchUrlInputOperationSpec, callback);
        };
        ImageModeration.prototype.matchFileInput = function (imageStream, options, callback) {
            return this.client.sendOperationRequest({
                imageStream: imageStream,
                options: options
            }, matchFileInputOperationSpec, callback);
        };
        return ImageModeration;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var findFacesOperationSpec = {
        httpMethod: "POST",
        path: "contentmoderator/moderate/v1.0/ProcessImage/FindFaces",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            cacheImage
        ],
        responses: {
            200: {
                bodyMapper: FoundFaces
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer
    };
    var oCRMethodOperationSpec = {
        httpMethod: "POST",
        path: "contentmoderator/moderate/v1.0/ProcessImage/OCR",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            language0,
            cacheImage,
            enhanced
        ],
        responses: {
            200: {
                bodyMapper: OCR
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer
    };
    var evaluateMethodOperationSpec = {
        httpMethod: "POST",
        path: "contentmoderator/moderate/v1.0/ProcessImage/Evaluate",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            cacheImage
        ],
        responses: {
            200: {
                bodyMapper: Evaluate
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer
    };
    var matchMethodOperationSpec = {
        httpMethod: "POST",
        path: "contentmoderator/moderate/v1.0/ProcessImage/Match",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            listId0,
            cacheImage
        ],
        responses: {
            200: {
                bodyMapper: MatchResponse
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer
    };
    var findFacesFileInputOperationSpec = {
        httpMethod: "POST",
        path: "contentmoderator/moderate/v1.0/ProcessImage/FindFaces",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            cacheImage
        ],
        requestBody: {
            parameterPath: "imageStream",
            mapper: {
                required: true,
                serializedName: "ImageStream",
                type: {
                    name: "Stream"
                }
            }
        },
        contentType: "image/gif",
        responses: {
            200: {
                bodyMapper: FoundFaces
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer
    };
    var findFacesUrlInputOperationSpec = {
        httpMethod: "POST",
        path: "contentmoderator/moderate/v1.0/ProcessImage/FindFaces",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            cacheImage
        ],
        headerParameters: [
            contentType0
        ],
        requestBody: {
            parameterPath: "imageUrl",
            mapper: __assign({}, BodyModel, { required: true })
        },
        responses: {
            200: {
                bodyMapper: FoundFaces
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer
    };
    var oCRUrlInputOperationSpec = {
        httpMethod: "POST",
        path: "contentmoderator/moderate/v1.0/ProcessImage/OCR",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            language0,
            cacheImage,
            enhanced
        ],
        headerParameters: [
            contentType0
        ],
        requestBody: {
            parameterPath: "imageUrl",
            mapper: __assign({}, BodyModel, { required: true })
        },
        responses: {
            200: {
                bodyMapper: OCR
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer
    };
    var oCRFileInputOperationSpec = {
        httpMethod: "POST",
        path: "contentmoderator/moderate/v1.0/ProcessImage/OCR",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            language0,
            cacheImage,
            enhanced
        ],
        requestBody: {
            parameterPath: "imageStream",
            mapper: {
                required: true,
                serializedName: "ImageStream",
                type: {
                    name: "Stream"
                }
            }
        },
        contentType: "image/gif",
        responses: {
            200: {
                bodyMapper: OCR
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer
    };
    var evaluateFileInputOperationSpec = {
        httpMethod: "POST",
        path: "contentmoderator/moderate/v1.0/ProcessImage/Evaluate",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            cacheImage
        ],
        requestBody: {
            parameterPath: "imageStream",
            mapper: {
                required: true,
                serializedName: "ImageStream",
                type: {
                    name: "Stream"
                }
            }
        },
        contentType: "image/gif",
        responses: {
            200: {
                bodyMapper: Evaluate
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer
    };
    var evaluateUrlInputOperationSpec = {
        httpMethod: "POST",
        path: "contentmoderator/moderate/v1.0/ProcessImage/Evaluate",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            cacheImage
        ],
        headerParameters: [
            contentType0
        ],
        requestBody: {
            parameterPath: "imageUrl",
            mapper: __assign({}, BodyModel, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Evaluate
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer
    };
    var matchUrlInputOperationSpec = {
        httpMethod: "POST",
        path: "contentmoderator/moderate/v1.0/ProcessImage/Match",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            listId0,
            cacheImage
        ],
        headerParameters: [
            contentType0
        ],
        requestBody: {
            parameterPath: "imageUrl",
            mapper: __assign({}, BodyModel, { required: true })
        },
        responses: {
            200: {
                bodyMapper: MatchResponse
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer
    };
    var matchFileInputOperationSpec = {
        httpMethod: "POST",
        path: "contentmoderator/moderate/v1.0/ProcessImage/Match",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            listId0,
            cacheImage
        ],
        requestBody: {
            parameterPath: "imageStream",
            mapper: {
                required: true,
                serializedName: "ImageStream",
                type: {
                    name: "Stream"
                }
            }
        },
        contentType: "image/gif",
        responses: {
            200: {
                bodyMapper: MatchResponse
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        Screen: Screen,
        Classification: Classification,
        ClassificationCategory1: ClassificationCategory1,
        ClassificationCategory2: ClassificationCategory2,
        ClassificationCategory3: ClassificationCategory3,
        Status: Status,
        PII: PII,
        Email: Email,
        SSN: SSN,
        IPA: IPA,
        Phone: Phone,
        Address: Address,
        DetectedTerms: DetectedTerms,
        APIError: APIError,
        ErrorModel: ErrorModel,
        DetectedLanguage: DetectedLanguage
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a TextModeration. */
    var TextModeration = /** @class */ (function () {
        /**
         * Create a TextModeration.
         * @param {ContentModeratorClientContext} client Reference to the service client.
         */
        function TextModeration(client) {
            this.client = client;
        }
        TextModeration.prototype.screenText = function (textContentType$$1, textContent, options, callback) {
            return this.client.sendOperationRequest({
                textContentType: textContentType$$1,
                textContent: textContent,
                options: options
            }, screenTextOperationSpec, callback);
        };
        TextModeration.prototype.detectLanguage = function (textContentType$$1, textContent, options, callback) {
            return this.client.sendOperationRequest({
                textContentType: textContentType$$1,
                textContent: textContent,
                options: options
            }, detectLanguageOperationSpec, callback);
        };
        return TextModeration;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var screenTextOperationSpec = {
        httpMethod: "POST",
        path: "contentmoderator/moderate/v1.0/ProcessText/Screen/",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            language1,
            autocorrect,
            pII,
            listId0,
            classify
        ],
        headerParameters: [
            textContentType
        ],
        requestBody: {
            parameterPath: "textContent",
            mapper: {
                required: true,
                serializedName: "Text Content",
                type: {
                    name: "Stream"
                }
            }
        },
        contentType: "text/plain",
        responses: {
            200: {
                bodyMapper: Screen
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$1
    };
    var detectLanguageOperationSpec = {
        httpMethod: "POST",
        path: "contentmoderator/moderate/v1.0/ProcessText/DetectLanguage",
        urlParameters: [
            endpoint
        ],
        headerParameters: [
            textContentType
        ],
        requestBody: {
            parameterPath: "textContent",
            mapper: {
                required: true,
                serializedName: "Text Content",
                type: {
                    name: "Stream"
                }
            }
        },
        contentType: "text/plain",
        responses: {
            200: {
                bodyMapper: DetectedLanguage
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        ImageList: ImageList,
        APIError: APIError,
        ErrorModel: ErrorModel,
        Body: Body,
        RefreshIndex: RefreshIndex,
        Status: Status
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ListManagementImageLists. */
    var ListManagementImageLists = /** @class */ (function () {
        /**
         * Create a ListManagementImageLists.
         * @param {ContentModeratorClientContext} client Reference to the service client.
         */
        function ListManagementImageLists(client) {
            this.client = client;
        }
        ListManagementImageLists.prototype.getDetails = function (listId, options, callback) {
            return this.client.sendOperationRequest({
                listId: listId,
                options: options
            }, getDetailsOperationSpec, callback);
        };
        ListManagementImageLists.prototype.deleteMethod = function (listId, options, callback) {
            return this.client.sendOperationRequest({
                listId: listId,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        ListManagementImageLists.prototype.update = function (listId, contentType, body, options, callback) {
            return this.client.sendOperationRequest({
                listId: listId,
                contentType: contentType,
                body: body,
                options: options
            }, updateOperationSpec, callback);
        };
        ListManagementImageLists.prototype.create = function (contentType, body, options, callback) {
            return this.client.sendOperationRequest({
                contentType: contentType,
                body: body,
                options: options
            }, createOperationSpec, callback);
        };
        ListManagementImageLists.prototype.getAllImageLists = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, getAllImageListsOperationSpec, callback);
        };
        ListManagementImageLists.prototype.refreshIndexMethod = function (listId, options, callback) {
            return this.client.sendOperationRequest({
                listId: listId,
                options: options
            }, refreshIndexMethodOperationSpec, callback);
        };
        return ListManagementImageLists;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var getDetailsOperationSpec = {
        httpMethod: "GET",
        path: "contentmoderator/lists/v1.0/imagelists/{listId}",
        urlParameters: [
            endpoint,
            listId1
        ],
        responses: {
            200: {
                bodyMapper: ImageList
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$2
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "contentmoderator/lists/v1.0/imagelists/{listId}",
        urlParameters: [
            endpoint,
            listId1
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "String"
                    }
                }
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$2
    };
    var updateOperationSpec = {
        httpMethod: "PUT",
        path: "contentmoderator/lists/v1.0/imagelists/{listId}",
        urlParameters: [
            endpoint,
            listId1
        ],
        headerParameters: [
            contentType0
        ],
        requestBody: {
            parameterPath: "body",
            mapper: __assign({}, Body, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ImageList
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$2
    };
    var createOperationSpec = {
        httpMethod: "POST",
        path: "contentmoderator/lists/v1.0/imagelists",
        urlParameters: [
            endpoint
        ],
        headerParameters: [
            contentType0
        ],
        requestBody: {
            parameterPath: "body",
            mapper: __assign({}, Body, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ImageList
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$2
    };
    var getAllImageListsOperationSpec = {
        httpMethod: "GET",
        path: "contentmoderator/lists/v1.0/imagelists",
        urlParameters: [
            endpoint
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImageList"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$2
    };
    var refreshIndexMethodOperationSpec = {
        httpMethod: "POST",
        path: "contentmoderator/lists/v1.0/imagelists/{listId}/RefreshIndex",
        urlParameters: [
            endpoint,
            listId1
        ],
        responses: {
            200: {
                bodyMapper: RefreshIndex
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        TermList: TermList,
        APIError: APIError,
        ErrorModel: ErrorModel,
        Body: Body,
        RefreshIndex: RefreshIndex,
        Status: Status
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ListManagementTermLists. */
    var ListManagementTermLists = /** @class */ (function () {
        /**
         * Create a ListManagementTermLists.
         * @param {ContentModeratorClientContext} client Reference to the service client.
         */
        function ListManagementTermLists(client) {
            this.client = client;
        }
        ListManagementTermLists.prototype.getDetails = function (listId, options, callback) {
            return this.client.sendOperationRequest({
                listId: listId,
                options: options
            }, getDetailsOperationSpec$1, callback);
        };
        ListManagementTermLists.prototype.deleteMethod = function (listId, options, callback) {
            return this.client.sendOperationRequest({
                listId: listId,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        ListManagementTermLists.prototype.update = function (listId, contentType, body, options, callback) {
            return this.client.sendOperationRequest({
                listId: listId,
                contentType: contentType,
                body: body,
                options: options
            }, updateOperationSpec$1, callback);
        };
        ListManagementTermLists.prototype.create = function (contentType, body, options, callback) {
            return this.client.sendOperationRequest({
                contentType: contentType,
                body: body,
                options: options
            }, createOperationSpec$1, callback);
        };
        ListManagementTermLists.prototype.getAllTermLists = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, getAllTermListsOperationSpec, callback);
        };
        ListManagementTermLists.prototype.refreshIndexMethod = function (listId, language, options, callback) {
            return this.client.sendOperationRequest({
                listId: listId,
                language: language,
                options: options
            }, refreshIndexMethodOperationSpec$1, callback);
        };
        return ListManagementTermLists;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var getDetailsOperationSpec$1 = {
        httpMethod: "GET",
        path: "contentmoderator/lists/v1.0/termlists/{listId}",
        urlParameters: [
            endpoint,
            listId1
        ],
        responses: {
            200: {
                bodyMapper: TermList
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$3
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "contentmoderator/lists/v1.0/termlists/{listId}",
        urlParameters: [
            endpoint,
            listId1
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "String"
                    }
                }
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$3
    };
    var updateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "contentmoderator/lists/v1.0/termlists/{listId}",
        urlParameters: [
            endpoint,
            listId1
        ],
        headerParameters: [
            contentType0
        ],
        requestBody: {
            parameterPath: "body",
            mapper: __assign({}, Body, { required: true })
        },
        responses: {
            200: {
                bodyMapper: TermList
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$3
    };
    var createOperationSpec$1 = {
        httpMethod: "POST",
        path: "contentmoderator/lists/v1.0/termlists",
        urlParameters: [
            endpoint
        ],
        headerParameters: [
            contentType0
        ],
        requestBody: {
            parameterPath: "body",
            mapper: __assign({}, Body, { required: true })
        },
        responses: {
            200: {
                bodyMapper: TermList
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$3
    };
    var getAllTermListsOperationSpec = {
        httpMethod: "GET",
        path: "contentmoderator/lists/v1.0/termlists",
        urlParameters: [
            endpoint
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TermList"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$3
    };
    var refreshIndexMethodOperationSpec$1 = {
        httpMethod: "POST",
        path: "contentmoderator/lists/v1.0/termlists/{listId}/RefreshIndex",
        urlParameters: [
            endpoint,
            listId1
        ],
        queryParameters: [
            language0
        ],
        responses: {
            200: {
                bodyMapper: RefreshIndex
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        Image: Image,
        ImageAdditionalInfoItem: ImageAdditionalInfoItem,
        Status: Status,
        APIError: APIError,
        ErrorModel: ErrorModel,
        ImageIds: ImageIds,
        BodyModel: BodyModel
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ListManagementImage. */
    var ListManagementImage = /** @class */ (function () {
        /**
         * Create a ListManagementImage.
         * @param {ContentModeratorClientContext} client Reference to the service client.
         */
        function ListManagementImage(client) {
            this.client = client;
        }
        ListManagementImage.prototype.addImage = function (listId, options, callback) {
            return this.client.sendOperationRequest({
                listId: listId,
                options: options
            }, addImageOperationSpec, callback);
        };
        ListManagementImage.prototype.deleteAllImages = function (listId, options, callback) {
            return this.client.sendOperationRequest({
                listId: listId,
                options: options
            }, deleteAllImagesOperationSpec, callback);
        };
        ListManagementImage.prototype.getAllImageIds = function (listId, options, callback) {
            return this.client.sendOperationRequest({
                listId: listId,
                options: options
            }, getAllImageIdsOperationSpec, callback);
        };
        ListManagementImage.prototype.deleteImage = function (listId, imageId$$1, options, callback) {
            return this.client.sendOperationRequest({
                listId: listId,
                imageId: imageId$$1,
                options: options
            }, deleteImageOperationSpec, callback);
        };
        ListManagementImage.prototype.addImageUrlInput = function (listId, contentType, imageUrl, options, callback) {
            return this.client.sendOperationRequest({
                listId: listId,
                contentType: contentType,
                imageUrl: imageUrl,
                options: options
            }, addImageUrlInputOperationSpec, callback);
        };
        ListManagementImage.prototype.addImageFileInput = function (listId, imageStream, options, callback) {
            return this.client.sendOperationRequest({
                listId: listId,
                imageStream: imageStream,
                options: options
            }, addImageFileInputOperationSpec, callback);
        };
        return ListManagementImage;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var addImageOperationSpec = {
        httpMethod: "POST",
        path: "contentmoderator/lists/v1.0/imagelists/{listId}/images",
        urlParameters: [
            endpoint,
            listId1
        ],
        queryParameters: [
            tag,
            label
        ],
        responses: {
            200: {
                bodyMapper: Image
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$4
    };
    var deleteAllImagesOperationSpec = {
        httpMethod: "DELETE",
        path: "contentmoderator/lists/v1.0/imagelists/{listId}/images",
        urlParameters: [
            endpoint,
            listId1
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "String"
                    }
                }
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$4
    };
    var getAllImageIdsOperationSpec = {
        httpMethod: "GET",
        path: "contentmoderator/lists/v1.0/imagelists/{listId}/images",
        urlParameters: [
            endpoint,
            listId1
        ],
        responses: {
            200: {
                bodyMapper: ImageIds
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$4
    };
    var deleteImageOperationSpec = {
        httpMethod: "DELETE",
        path: "contentmoderator/lists/v1.0/imagelists/{listId}/images/{ImageId}",
        urlParameters: [
            endpoint,
            listId1,
            imageId
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "String"
                    }
                }
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$4
    };
    var addImageUrlInputOperationSpec = {
        httpMethod: "POST",
        path: "contentmoderator/lists/v1.0/imagelists/{listId}/images",
        urlParameters: [
            endpoint,
            listId1
        ],
        queryParameters: [
            tag,
            label
        ],
        headerParameters: [
            contentType0
        ],
        requestBody: {
            parameterPath: "imageUrl",
            mapper: __assign({}, BodyModel, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Image
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$4
    };
    var addImageFileInputOperationSpec = {
        httpMethod: "POST",
        path: "contentmoderator/lists/v1.0/imagelists/{listId}/images",
        urlParameters: [
            endpoint,
            listId1
        ],
        queryParameters: [
            tag,
            label
        ],
        requestBody: {
            parameterPath: "imageStream",
            mapper: {
                required: true,
                serializedName: "ImageStream",
                type: {
                    name: "Stream"
                }
            }
        },
        contentType: "image/gif",
        responses: {
            200: {
                bodyMapper: Image
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        APIError: APIError,
        ErrorModel: ErrorModel,
        Terms: Terms,
        TermsData: TermsData,
        TermsInList: TermsInList,
        Status: Status,
        TermsPaging: TermsPaging
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ListManagementTerm. */
    var ListManagementTerm = /** @class */ (function () {
        /**
         * Create a ListManagementTerm.
         * @param {ContentModeratorClientContext} client Reference to the service client.
         */
        function ListManagementTerm(client) {
            this.client = client;
        }
        ListManagementTerm.prototype.addTerm = function (listId, term$$1, language, options, callback) {
            return this.client.sendOperationRequest({
                listId: listId,
                term: term$$1,
                language: language,
                options: options
            }, addTermOperationSpec, callback);
        };
        ListManagementTerm.prototype.deleteTerm = function (listId, term$$1, language, options, callback) {
            return this.client.sendOperationRequest({
                listId: listId,
                term: term$$1,
                language: language,
                options: options
            }, deleteTermOperationSpec, callback);
        };
        ListManagementTerm.prototype.getAllTerms = function (listId, language, options, callback) {
            return this.client.sendOperationRequest({
                listId: listId,
                language: language,
                options: options
            }, getAllTermsOperationSpec, callback);
        };
        ListManagementTerm.prototype.deleteAllTerms = function (listId, language, options, callback) {
            return this.client.sendOperationRequest({
                listId: listId,
                language: language,
                options: options
            }, deleteAllTermsOperationSpec, callback);
        };
        return ListManagementTerm;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var addTermOperationSpec = {
        httpMethod: "POST",
        path: "contentmoderator/lists/v1.0/termlists/{listId}/terms/{term}",
        urlParameters: [
            endpoint,
            listId1,
            term
        ],
        queryParameters: [
            language0
        ],
        responses: {
            201: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Object"
                    }
                }
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$5
    };
    var deleteTermOperationSpec = {
        httpMethod: "DELETE",
        path: "contentmoderator/lists/v1.0/termlists/{listId}/terms/{term}",
        urlParameters: [
            endpoint,
            listId1,
            term
        ],
        queryParameters: [
            language0
        ],
        responses: {
            204: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "String"
                    }
                }
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$5
    };
    var getAllTermsOperationSpec = {
        httpMethod: "GET",
        path: "contentmoderator/lists/v1.0/termlists/{listId}/terms",
        urlParameters: [
            endpoint,
            listId1
        ],
        queryParameters: [
            language0,
            offset,
            limit
        ],
        responses: {
            200: {
                bodyMapper: Terms
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$5
    };
    var deleteAllTermsOperationSpec = {
        httpMethod: "DELETE",
        path: "contentmoderator/lists/v1.0/termlists/{listId}/terms",
        urlParameters: [
            endpoint,
            listId1
        ],
        queryParameters: [
            language0
        ],
        responses: {
            204: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "String"
                    }
                }
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        Review: Review,
        KeyValuePair: KeyValuePair,
        APIError: APIError,
        ErrorModel: ErrorModel,
        Job: Job,
        JobExecutionReportDetails: JobExecutionReportDetails,
        CreateReviewBodyItem: CreateReviewBodyItem,
        CreateReviewBodyItemMetadataItem: CreateReviewBodyItemMetadataItem,
        Content: Content,
        JobId: JobId,
        Frames: Frames,
        Frame: Frame,
        Tag: Tag,
        TranscriptModerationBodyItem: TranscriptModerationBodyItem,
        TranscriptModerationBodyItemTermsItem: TranscriptModerationBodyItemTermsItem,
        CreateVideoReviewsBodyItem: CreateVideoReviewsBodyItem,
        CreateVideoReviewsBodyItemVideoFramesItem: CreateVideoReviewsBodyItemVideoFramesItem,
        CreateVideoReviewsBodyItemVideoFramesItemReviewerResultTagsItem: CreateVideoReviewsBodyItemVideoFramesItemReviewerResultTagsItem,
        CreateVideoReviewsBodyItemVideoFramesItemMetadataItem: CreateVideoReviewsBodyItemVideoFramesItemMetadataItem,
        CreateVideoReviewsBodyItemMetadataItem: CreateVideoReviewsBodyItemMetadataItem,
        VideoFrameBodyItem: VideoFrameBodyItem,
        VideoFrameBodyItemReviewerResultTagsItem: VideoFrameBodyItemReviewerResultTagsItem,
        VideoFrameBodyItemMetadataItem: VideoFrameBodyItemMetadataItem
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Reviews. */
    var Reviews = /** @class */ (function () {
        /**
         * Create a Reviews.
         * @param {ContentModeratorClientContext} client Reference to the service client.
         */
        function Reviews(client) {
            this.client = client;
        }
        Reviews.prototype.getReview = function (teamName$$1, reviewId$$1, options, callback) {
            return this.client.sendOperationRequest({
                teamName: teamName$$1,
                reviewId: reviewId$$1,
                options: options
            }, getReviewOperationSpec, callback);
        };
        Reviews.prototype.getJobDetails = function (teamName$$1, jobId$$1, options, callback) {
            return this.client.sendOperationRequest({
                teamName: teamName$$1,
                jobId: jobId$$1,
                options: options
            }, getJobDetailsOperationSpec, callback);
        };
        Reviews.prototype.createReviews = function (urlContentType$$1, teamName$$1, createReviewBody, options, callback) {
            return this.client.sendOperationRequest({
                urlContentType: urlContentType$$1,
                teamName: teamName$$1,
                createReviewBody: createReviewBody,
                options: options
            }, createReviewsOperationSpec, callback);
        };
        Reviews.prototype.createJob = function (teamName$$1, contentType, contentId$$1, workflowName$$1, jobContentType$$1, content, options, callback) {
            return this.client.sendOperationRequest({
                teamName: teamName$$1,
                contentType: contentType,
                contentId: contentId$$1,
                workflowName: workflowName$$1,
                jobContentType: jobContentType$$1,
                content: content,
                options: options
            }, createJobOperationSpec, callback);
        };
        Reviews.prototype.addVideoFrame = function (teamName$$1, reviewId$$1, options, callback) {
            return this.client.sendOperationRequest({
                teamName: teamName$$1,
                reviewId: reviewId$$1,
                options: options
            }, addVideoFrameOperationSpec, callback);
        };
        Reviews.prototype.getVideoFrames = function (teamName$$1, reviewId$$1, options, callback) {
            return this.client.sendOperationRequest({
                teamName: teamName$$1,
                reviewId: reviewId$$1,
                options: options
            }, getVideoFramesOperationSpec, callback);
        };
        Reviews.prototype.publishVideoReview = function (teamName$$1, reviewId$$1, options, callback) {
            return this.client.sendOperationRequest({
                teamName: teamName$$1,
                reviewId: reviewId$$1,
                options: options
            }, publishVideoReviewOperationSpec, callback);
        };
        Reviews.prototype.addVideoTranscriptModerationResult = function (contentType, teamName$$1, reviewId$$1, transcriptModerationBody, options, callback) {
            return this.client.sendOperationRequest({
                contentType: contentType,
                teamName: teamName$$1,
                reviewId: reviewId$$1,
                transcriptModerationBody: transcriptModerationBody,
                options: options
            }, addVideoTranscriptModerationResultOperationSpec, callback);
        };
        Reviews.prototype.addVideoTranscript = function (teamName$$1, reviewId$$1, vTTfile, options, callback) {
            return this.client.sendOperationRequest({
                teamName: teamName$$1,
                reviewId: reviewId$$1,
                vTTfile: vTTfile,
                options: options
            }, addVideoTranscriptOperationSpec, callback);
        };
        Reviews.prototype.createVideoReviews = function (contentType, teamName$$1, createVideoReviewsBody, options, callback) {
            return this.client.sendOperationRequest({
                contentType: contentType,
                teamName: teamName$$1,
                createVideoReviewsBody: createVideoReviewsBody,
                options: options
            }, createVideoReviewsOperationSpec, callback);
        };
        Reviews.prototype.addVideoFrameUrl = function (contentType, teamName$$1, reviewId$$1, videoFrameBody, options, callback) {
            return this.client.sendOperationRequest({
                contentType: contentType,
                teamName: teamName$$1,
                reviewId: reviewId$$1,
                videoFrameBody: videoFrameBody,
                options: options
            }, addVideoFrameUrlOperationSpec, callback);
        };
        Reviews.prototype.addVideoFrameStream = function (contentType, teamName$$1, reviewId$$1, frameImageZip$$1, frameMetadata$$1, options, callback) {
            return this.client.sendOperationRequest({
                contentType: contentType,
                teamName: teamName$$1,
                reviewId: reviewId$$1,
                frameImageZip: frameImageZip$$1,
                frameMetadata: frameMetadata$$1,
                options: options
            }, addVideoFrameStreamOperationSpec, callback);
        };
        return Reviews;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var getReviewOperationSpec = {
        httpMethod: "GET",
        path: "contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}",
        urlParameters: [
            endpoint,
            teamName,
            reviewId
        ],
        responses: {
            200: {
                bodyMapper: Review
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };
    var getJobDetailsOperationSpec = {
        httpMethod: "GET",
        path: "contentmoderator/review/v1.0/teams/{teamName}/jobs/{JobId}",
        urlParameters: [
            endpoint,
            teamName,
            jobId
        ],
        responses: {
            200: {
                bodyMapper: Job
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };
    var createReviewsOperationSpec = {
        httpMethod: "POST",
        path: "contentmoderator/review/v1.0/teams/{teamName}/reviews",
        urlParameters: [
            endpoint,
            teamName
        ],
        queryParameters: [
            subTeam
        ],
        headerParameters: [
            urlContentType
        ],
        requestBody: {
            parameterPath: "createReviewBody",
            mapper: {
                required: true,
                serializedName: "createReviewBody",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CreateReviewBodyItem"
                        }
                    }
                }
            }
        },
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };
    var createJobOperationSpec = {
        httpMethod: "POST",
        path: "contentmoderator/review/v1.0/teams/{teamName}/jobs",
        urlParameters: [
            endpoint,
            teamName
        ],
        queryParameters: [
            contentType1,
            contentId,
            workflowName,
            callBackEndpoint
        ],
        headerParameters: [
            jobContentType
        ],
        requestBody: {
            parameterPath: "content",
            mapper: __assign({}, Content, { required: true })
        },
        responses: {
            200: {
                bodyMapper: JobId
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };
    var addVideoFrameOperationSpec = {
        httpMethod: "POST",
        path: "contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/frames",
        urlParameters: [
            endpoint,
            teamName,
            reviewId
        ],
        queryParameters: [
            timescale
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };
    var getVideoFramesOperationSpec = {
        httpMethod: "GET",
        path: "contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/frames",
        urlParameters: [
            endpoint,
            teamName,
            reviewId
        ],
        queryParameters: [
            startSeed,
            noOfRecords,
            filter
        ],
        responses: {
            200: {
                bodyMapper: Frames
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };
    var publishVideoReviewOperationSpec = {
        httpMethod: "POST",
        path: "contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/publish",
        urlParameters: [
            endpoint,
            teamName,
            reviewId
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };
    var addVideoTranscriptModerationResultOperationSpec = {
        httpMethod: "PUT",
        path: "contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/transcriptmoderationresult",
        urlParameters: [
            endpoint,
            teamName,
            reviewId
        ],
        headerParameters: [
            contentType0
        ],
        requestBody: {
            parameterPath: "transcriptModerationBody",
            mapper: {
                required: true,
                serializedName: "transcriptModerationBody",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TranscriptModerationBodyItem"
                        }
                    }
                }
            }
        },
        responses: {
            204: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };
    var addVideoTranscriptOperationSpec = {
        httpMethod: "PUT",
        path: "contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/transcript",
        urlParameters: [
            endpoint,
            teamName,
            reviewId
        ],
        headerParameters: [
            contentType2
        ],
        requestBody: {
            parameterPath: "vTTfile",
            mapper: {
                required: true,
                serializedName: "VTT file",
                type: {
                    name: "Stream"
                }
            }
        },
        contentType: "text/plain",
        responses: {
            204: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };
    var createVideoReviewsOperationSpec = {
        httpMethod: "POST",
        path: "contentmoderator/review/v1.0/teams/{teamName}/reviews",
        urlParameters: [
            endpoint,
            teamName
        ],
        queryParameters: [
            subTeam
        ],
        headerParameters: [
            contentType0
        ],
        requestBody: {
            parameterPath: "createVideoReviewsBody",
            mapper: {
                required: true,
                serializedName: "CreateVideoReviewsBody",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CreateVideoReviewsBodyItem"
                        }
                    }
                }
            }
        },
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };
    var addVideoFrameUrlOperationSpec = {
        httpMethod: "POST",
        path: "contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/frames",
        urlParameters: [
            endpoint,
            teamName,
            reviewId
        ],
        queryParameters: [
            timescale
        ],
        headerParameters: [
            contentType0
        ],
        requestBody: {
            parameterPath: "videoFrameBody",
            mapper: {
                required: true,
                serializedName: "videoFrameBody",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VideoFrameBodyItem"
                        }
                    }
                }
            }
        },
        responses: {
            204: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };
    var addVideoFrameStreamOperationSpec = {
        httpMethod: "POST",
        path: "contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/frames",
        urlParameters: [
            endpoint,
            teamName,
            reviewId
        ],
        queryParameters: [
            timescale
        ],
        headerParameters: [
            contentType0
        ],
        formDataParameters: [
            frameImageZip,
            frameMetadata
        ],
        contentType: "multipart/form-data",
        responses: {
            204: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/cognitiveservices-contentmoderator";
    var packageVersion = "1.0.0";
    var ContentModeratorClientContext = /** @class */ (function (_super) {
        __extends(ContentModeratorClientContext, _super);
        /**
         * Initializes a new instance of the ContentModeratorClientContext class.
         * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
         * https://westus.api.cognitive.microsoft.com).
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param [options] The parameter options
         */
        function ContentModeratorClientContext(endpoint, credentials, options) {
            var _this = this;
            if (endpoint === null || endpoint === undefined) {
                throw new Error('\'endpoint\' cannot be null.');
            }
            if (credentials === null || credentials === undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.baseUri = "{Endpoint}";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.endpoint = endpoint;
            _this.credentials = credentials;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            return _this;
        }
        return ContentModeratorClientContext;
    }(msRest.ServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var ContentModeratorClient = /** @class */ (function (_super) {
        __extends(ContentModeratorClient, _super);
        /**
         * Initializes a new instance of the ContentModeratorClient class.
         * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
         * https://westus.api.cognitive.microsoft.com).
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param [options] The parameter options
         */
        function ContentModeratorClient(endpoint, credentials, options) {
            var _this = _super.call(this, endpoint, credentials, options) || this;
            _this.imageModeration = new ImageModeration(_this);
            _this.textModeration = new TextModeration(_this);
            _this.listManagementImageLists = new ListManagementImageLists(_this);
            _this.listManagementTermLists = new ListManagementTermLists(_this);
            _this.listManagementImage = new ListManagementImage(_this);
            _this.listManagementTerm = new ListManagementTerm(_this);
            _this.reviews = new Reviews(_this);
            return _this;
        }
        return ContentModeratorClient;
    }(ContentModeratorClientContext));

    exports.ContentModeratorClient = ContentModeratorClient;
    exports.ContentModeratorClientContext = ContentModeratorClientContext;
    exports.ContentModeratorModels = index;
    exports.ContentModeratorMappers = mappers;
    exports.ImageModeration = ImageModeration;
    exports.TextModeration = TextModeration;
    exports.ListManagementImageLists = ListManagementImageLists;
    exports.ListManagementTermLists = ListManagementTermLists;
    exports.ListManagementImage = ListManagementImage;
    exports.ListManagementTerm = ListManagementTerm;
    exports.Reviews = Reviews;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=cognitiveservices-contentmoderator.js.map
