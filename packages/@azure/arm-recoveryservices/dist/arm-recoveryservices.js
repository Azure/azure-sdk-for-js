/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmRecoveryservices = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for AuthType.
     * Possible values include: 'Invalid', 'ACS', 'AAD', 'AccessControlService',
     * 'AzureActiveDirectory'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: AuthType = <AuthType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var AuthType;
    (function (AuthType) {
        AuthType["Invalid"] = "Invalid";
        AuthType["ACS"] = "ACS";
        AuthType["AAD"] = "AAD";
        AuthType["AccessControlService"] = "AccessControlService";
        AuthType["AzureActiveDirectory"] = "AzureActiveDirectory";
    })(AuthType || (AuthType = {}));
    /**
     * Defines values for SkuName.
     * Possible values include: 'Standard', 'RS0'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SkuName = <SkuName>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SkuName;
    (function (SkuName) {
        SkuName["Standard"] = "Standard";
        SkuName["RS0"] = "RS0";
    })(SkuName || (SkuName = {}));
    /**
     * Defines values for VaultUpgradeState.
     * Possible values include: 'Unknown', 'InProgress', 'Upgraded', 'Failed'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: VaultUpgradeState =
     * <VaultUpgradeState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var VaultUpgradeState;
    (function (VaultUpgradeState) {
        VaultUpgradeState["Unknown"] = "Unknown";
        VaultUpgradeState["InProgress"] = "InProgress";
        VaultUpgradeState["Upgraded"] = "Upgraded";
        VaultUpgradeState["Failed"] = "Failed";
    })(VaultUpgradeState || (VaultUpgradeState = {}));
    /**
     * Defines values for TriggerType.
     * Possible values include: 'UserTriggered', 'ForcedUpgrade'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: TriggerType =
     * <TriggerType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var TriggerType;
    (function (TriggerType) {
        TriggerType["UserTriggered"] = "UserTriggered";
        TriggerType["ForcedUpgrade"] = "ForcedUpgrade";
    })(TriggerType || (TriggerType = {}));
    /**
     * Defines values for UsagesUnit.
     * Possible values include: 'Count', 'Bytes', 'Seconds', 'Percent',
     * 'CountPerSecond', 'BytesPerSecond'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: UsagesUnit = <UsagesUnit>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var UsagesUnit;
    (function (UsagesUnit) {
        UsagesUnit["Count"] = "Count";
        UsagesUnit["Bytes"] = "Bytes";
        UsagesUnit["Seconds"] = "Seconds";
        UsagesUnit["Percent"] = "Percent";
        UsagesUnit["CountPerSecond"] = "CountPerSecond";
        UsagesUnit["BytesPerSecond"] = "BytesPerSecond";
    })(UsagesUnit || (UsagesUnit = {}));

    var index = /*#__PURE__*/Object.freeze({
        get AuthType () { return AuthType; },
        get SkuName () { return SkuName; },
        get VaultUpgradeState () { return VaultUpgradeState; },
        get TriggerType () { return TriggerType; },
        get UsagesUnit () { return UsagesUnit; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var RawCertificateData = {
        serializedName: "RawCertificateData",
        type: {
            name: "Composite",
            className: "RawCertificateData",
            modelProperties: {
                authType: {
                    serializedName: "authType",
                    type: {
                        name: "String"
                    }
                },
                certificate: {
                    serializedName: "certificate",
                    type: {
                        name: "ByteArray"
                    }
                }
            }
        }
    };
    var CertificateRequest = {
        serializedName: "CertificateRequest",
        type: {
            name: "Composite",
            className: "CertificateRequest",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "RawCertificateData"
                    }
                }
            }
        }
    };
    var ResourceCertificateDetails = {
        serializedName: "ResourceCertificateDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "authType",
                clientName: "authType"
            },
            uberParent: "ResourceCertificateDetails",
            className: "ResourceCertificateDetails",
            modelProperties: {
                certificate: {
                    serializedName: "certificate",
                    type: {
                        name: "ByteArray"
                    }
                },
                friendlyName: {
                    serializedName: "friendlyName",
                    type: {
                        name: "String"
                    }
                },
                issuer: {
                    serializedName: "issuer",
                    type: {
                        name: "String"
                    }
                },
                resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "Number"
                    }
                },
                subject: {
                    serializedName: "subject",
                    type: {
                        name: "String"
                    }
                },
                thumbprint: {
                    serializedName: "thumbprint",
                    type: {
                        name: "String"
                    }
                },
                validFrom: {
                    serializedName: "validFrom",
                    type: {
                        name: "DateTime"
                    }
                },
                validTo: {
                    serializedName: "validTo",
                    type: {
                        name: "DateTime"
                    }
                },
                authType: {
                    required: true,
                    serializedName: "authType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceCertificateAndAadDetails = {
        serializedName: "AzureActiveDirectory",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResourceCertificateDetails.type.polymorphicDiscriminator,
            uberParent: "ResourceCertificateDetails",
            className: "ResourceCertificateAndAadDetails",
            modelProperties: __assign({}, ResourceCertificateDetails.type.modelProperties, { aadAuthority: {
                    required: true,
                    serializedName: "aadAuthority",
                    type: {
                        name: "String"
                    }
                }, aadTenantId: {
                    required: true,
                    serializedName: "aadTenantId",
                    type: {
                        name: "String"
                    }
                }, servicePrincipalClientId: {
                    required: true,
                    serializedName: "servicePrincipalClientId",
                    type: {
                        name: "String"
                    }
                }, servicePrincipalObjectId: {
                    required: true,
                    serializedName: "servicePrincipalObjectId",
                    type: {
                        name: "String"
                    }
                }, azureManagementEndpointAudience: {
                    required: true,
                    serializedName: "azureManagementEndpointAudience",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ResourceCertificateAndAcsDetails = {
        serializedName: "AccessControlService",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResourceCertificateDetails.type.polymorphicDiscriminator,
            uberParent: "ResourceCertificateDetails",
            className: "ResourceCertificateAndAcsDetails",
            modelProperties: __assign({}, ResourceCertificateDetails.type.modelProperties, { globalAcsNamespace: {
                    required: true,
                    serializedName: "globalAcsNamespace",
                    type: {
                        name: "String"
                    }
                }, globalAcsHostName: {
                    required: true,
                    serializedName: "globalAcsHostName",
                    type: {
                        name: "String"
                    }
                }, globalAcsRPRealm: {
                    required: true,
                    serializedName: "globalAcsRPRealm",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VaultCertificateResponse = {
        serializedName: "VaultCertificateResponse",
        type: {
            name: "Composite",
            className: "VaultCertificateResponse",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "authType",
                            clientName: "authType"
                        },
                        uberParent: "ResourceCertificateDetails",
                        className: "ResourceCertificateDetails"
                    }
                }
            }
        }
    };
    var JobsSummary = {
        serializedName: "JobsSummary",
        type: {
            name: "Composite",
            className: "JobsSummary",
            modelProperties: {
                failedJobs: {
                    serializedName: "failedJobs",
                    type: {
                        name: "Number"
                    }
                },
                suspendedJobs: {
                    serializedName: "suspendedJobs",
                    type: {
                        name: "Number"
                    }
                },
                inProgressJobs: {
                    serializedName: "inProgressJobs",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var MonitoringSummary = {
        serializedName: "MonitoringSummary",
        type: {
            name: "Composite",
            className: "MonitoringSummary",
            modelProperties: {
                unHealthyVmCount: {
                    serializedName: "unHealthyVmCount",
                    type: {
                        name: "Number"
                    }
                },
                unHealthyProviderCount: {
                    serializedName: "unHealthyProviderCount",
                    type: {
                        name: "Number"
                    }
                },
                eventsCount: {
                    serializedName: "eventsCount",
                    type: {
                        name: "Number"
                    }
                },
                deprecatedProviderCount: {
                    serializedName: "deprecatedProviderCount",
                    type: {
                        name: "Number"
                    }
                },
                supportedProviderCount: {
                    serializedName: "supportedProviderCount",
                    type: {
                        name: "Number"
                    }
                },
                unsupportedProviderCount: {
                    serializedName: "unsupportedProviderCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ReplicationUsage = {
        serializedName: "ReplicationUsage",
        type: {
            name: "Composite",
            className: "ReplicationUsage",
            modelProperties: {
                monitoringSummary: {
                    serializedName: "monitoringSummary",
                    type: {
                        name: "Composite",
                        className: "MonitoringSummary"
                    }
                },
                jobsSummary: {
                    serializedName: "jobsSummary",
                    type: {
                        name: "Composite",
                        className: "JobsSummary"
                    }
                },
                protectedItemCount: {
                    serializedName: "protectedItemCount",
                    type: {
                        name: "Number"
                    }
                },
                recoveryPlanCount: {
                    serializedName: "recoveryPlanCount",
                    type: {
                        name: "Number"
                    }
                },
                registeredServersCount: {
                    serializedName: "registeredServersCount",
                    type: {
                        name: "Number"
                    }
                },
                recoveryServicesProviderAuthType: {
                    serializedName: "recoveryServicesProviderAuthType",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ClientDiscoveryDisplay = {
        serializedName: "ClientDiscoveryDisplay",
        type: {
            name: "Composite",
            className: "ClientDiscoveryDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ClientDiscoveryForLogSpecification = {
        serializedName: "ClientDiscoveryForLogSpecification",
        type: {
            name: "Composite",
            className: "ClientDiscoveryForLogSpecification",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                blobDuration: {
                    serializedName: "blobDuration",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ClientDiscoveryForServiceSpecification = {
        serializedName: "ClientDiscoveryForServiceSpecification",
        type: {
            name: "Composite",
            className: "ClientDiscoveryForServiceSpecification",
            modelProperties: {
                logSpecifications: {
                    serializedName: "logSpecifications",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ClientDiscoveryForLogSpecification"
                            }
                        }
                    }
                }
            }
        }
    };
    var ClientDiscoveryForProperties = {
        serializedName: "ClientDiscoveryForProperties",
        type: {
            name: "Composite",
            className: "ClientDiscoveryForProperties",
            modelProperties: {
                serviceSpecification: {
                    serializedName: "serviceSpecification",
                    type: {
                        name: "Composite",
                        className: "ClientDiscoveryForServiceSpecification"
                    }
                }
            }
        }
    };
    var ClientDiscoveryValueForSingleApi = {
        serializedName: "ClientDiscoveryValueForSingleApi",
        type: {
            name: "Composite",
            className: "ClientDiscoveryValueForSingleApi",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "ClientDiscoveryDisplay"
                    }
                },
                origin: {
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "ClientDiscoveryForProperties"
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                eTag: {
                    serializedName: "eTag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Sku = {
        serializedName: "Sku",
        type: {
            name: "Composite",
            className: "Sku",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TrackedResource = {
        serializedName: "TrackedResource",
        type: {
            name: "Composite",
            className: "TrackedResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var PatchTrackedResource = {
        serializedName: "PatchTrackedResource",
        type: {
            name: "Composite",
            className: "PatchTrackedResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var UpgradeDetails = {
        serializedName: "UpgradeDetails",
        type: {
            name: "Composite",
            className: "UpgradeDetails",
            modelProperties: {
                operationId: {
                    readOnly: true,
                    serializedName: "operationId",
                    type: {
                        name: "String"
                    }
                },
                startTimeUtc: {
                    readOnly: true,
                    serializedName: "startTimeUtc",
                    type: {
                        name: "DateTime"
                    }
                },
                lastUpdatedTimeUtc: {
                    readOnly: true,
                    serializedName: "lastUpdatedTimeUtc",
                    type: {
                        name: "DateTime"
                    }
                },
                endTimeUtc: {
                    readOnly: true,
                    serializedName: "endTimeUtc",
                    type: {
                        name: "DateTime"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                triggerType: {
                    readOnly: true,
                    serializedName: "triggerType",
                    type: {
                        name: "String"
                    }
                },
                upgradedResourceId: {
                    readOnly: true,
                    serializedName: "upgradedResourceId",
                    type: {
                        name: "String"
                    }
                },
                previousResourceId: {
                    readOnly: true,
                    serializedName: "previousResourceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VaultProperties = {
        serializedName: "VaultProperties",
        type: {
            name: "Composite",
            className: "VaultProperties",
            modelProperties: {
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                upgradeDetails: {
                    serializedName: "upgradeDetails",
                    type: {
                        name: "Composite",
                        className: "UpgradeDetails"
                    }
                }
            }
        }
    };
    var Vault = {
        serializedName: "Vault",
        type: {
            name: "Composite",
            className: "Vault",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "VaultProperties"
                    }
                }, sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                } })
        }
    };
    var PatchVault = {
        serializedName: "PatchVault",
        type: {
            name: "Composite",
            className: "PatchVault",
            modelProperties: __assign({}, PatchTrackedResource.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "VaultProperties"
                    }
                }, sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                } })
        }
    };
    var VaultExtendedInfo = {
        serializedName: "VaultExtendedInfo",
        type: {
            name: "Composite",
            className: "VaultExtendedInfo",
            modelProperties: {
                integrityKey: {
                    serializedName: "integrityKey",
                    type: {
                        name: "String"
                    }
                },
                encryptionKey: {
                    serializedName: "encryptionKey",
                    type: {
                        name: "String"
                    }
                },
                encryptionKeyThumbprint: {
                    serializedName: "encryptionKeyThumbprint",
                    type: {
                        name: "String"
                    }
                },
                algorithm: {
                    serializedName: "algorithm",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VaultExtendedInfoResource = {
        serializedName: "VaultExtendedInfoResource",
        type: {
            name: "Composite",
            className: "VaultExtendedInfoResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { integrityKey: {
                    serializedName: "properties.integrityKey",
                    type: {
                        name: "String"
                    }
                }, encryptionKey: {
                    serializedName: "properties.encryptionKey",
                    type: {
                        name: "String"
                    }
                }, encryptionKeyThumbprint: {
                    serializedName: "properties.encryptionKeyThumbprint",
                    type: {
                        name: "String"
                    }
                }, algorithm: {
                    serializedName: "properties.algorithm",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var NameInfo = {
        serializedName: "NameInfo",
        type: {
            name: "Composite",
            className: "NameInfo",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                localizedValue: {
                    serializedName: "localizedValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VaultUsage = {
        serializedName: "VaultUsage",
        type: {
            name: "Composite",
            className: "VaultUsage",
            modelProperties: {
                unit: {
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                quotaPeriod: {
                    serializedName: "quotaPeriod",
                    type: {
                        name: "String"
                    }
                },
                nextResetTime: {
                    serializedName: "nextResetTime",
                    type: {
                        name: "DateTime"
                    }
                },
                currentValue: {
                    serializedName: "currentValue",
                    type: {
                        name: "Number"
                    }
                },
                limit: {
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "NameInfo"
                    }
                }
            }
        }
    };
    var ReplicationUsageList = {
        serializedName: "ReplicationUsageList",
        type: {
            name: "Composite",
            className: "ReplicationUsageList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReplicationUsage"
                            }
                        }
                    }
                }
            }
        }
    };
    var VaultList = {
        serializedName: "VaultList",
        type: {
            name: "Composite",
            className: "VaultList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Vault"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ClientDiscoveryResponse = {
        serializedName: "ClientDiscoveryResponse",
        type: {
            name: "Composite",
            className: "ClientDiscoveryResponse",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ClientDiscoveryValueForSingleApi"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VaultUsageList = {
        serializedName: "VaultUsageList",
        type: {
            name: "Composite",
            className: "VaultUsageList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VaultUsage"
                            }
                        }
                    }
                }
            }
        }
    };
    var discriminators = {
        'ResourceCertificateDetails.AzureActiveDirectory': ResourceCertificateAndAadDetails,
        'ResourceCertificateDetails.AccessControlService': ResourceCertificateAndAcsDetails,
        'ResourceCertificateDetails': ResourceCertificateDetails
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        RawCertificateData: RawCertificateData,
        CertificateRequest: CertificateRequest,
        ResourceCertificateDetails: ResourceCertificateDetails,
        ResourceCertificateAndAadDetails: ResourceCertificateAndAadDetails,
        ResourceCertificateAndAcsDetails: ResourceCertificateAndAcsDetails,
        VaultCertificateResponse: VaultCertificateResponse,
        JobsSummary: JobsSummary,
        MonitoringSummary: MonitoringSummary,
        ReplicationUsage: ReplicationUsage,
        ClientDiscoveryDisplay: ClientDiscoveryDisplay,
        ClientDiscoveryForLogSpecification: ClientDiscoveryForLogSpecification,
        ClientDiscoveryForServiceSpecification: ClientDiscoveryForServiceSpecification,
        ClientDiscoveryForProperties: ClientDiscoveryForProperties,
        ClientDiscoveryValueForSingleApi: ClientDiscoveryValueForSingleApi,
        Resource: Resource,
        Sku: Sku,
        TrackedResource: TrackedResource,
        PatchTrackedResource: PatchTrackedResource,
        UpgradeDetails: UpgradeDetails,
        VaultProperties: VaultProperties,
        Vault: Vault,
        PatchVault: PatchVault,
        VaultExtendedInfo: VaultExtendedInfo,
        VaultExtendedInfoResource: VaultExtendedInfoResource,
        NameInfo: NameInfo,
        VaultUsage: VaultUsage,
        ReplicationUsageList: ReplicationUsageList,
        VaultList: VaultList,
        ClientDiscoveryResponse: ClientDiscoveryResponse,
        VaultUsageList: VaultUsageList,
        discriminators: discriminators
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        CertificateRequest: CertificateRequest,
        RawCertificateData: RawCertificateData,
        VaultCertificateResponse: VaultCertificateResponse,
        BaseResource: BaseResource,
        ResourceCertificateDetails: ResourceCertificateDetails,
        CloudError: CloudError,
        ResourceCertificateAndAadDetails: ResourceCertificateAndAadDetails,
        ResourceCertificateAndAcsDetails: ResourceCertificateAndAcsDetails,
        Resource: Resource,
        TrackedResource: TrackedResource,
        PatchTrackedResource: PatchTrackedResource,
        Vault: Vault,
        VaultProperties: VaultProperties,
        UpgradeDetails: UpgradeDetails,
        Sku: Sku,
        PatchVault: PatchVault,
        VaultExtendedInfoResource: VaultExtendedInfoResource
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var certificateName = {
        parameterPath: "certificateName",
        mapper: {
            required: true,
            serializedName: "certificateName",
            type: {
                name: "String"
            }
        }
    };
    var identityName = {
        parameterPath: "identityName",
        mapper: {
            required: true,
            serializedName: "identityName",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var vaultName = {
        parameterPath: "vaultName",
        mapper: {
            required: true,
            serializedName: "vaultName",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VaultCertificates. */
    var VaultCertificates = /** @class */ (function () {
        /**
         * Create a VaultCertificates.
         * @param {RecoveryServicesClientContext} client Reference to the service client.
         */
        function VaultCertificates(client) {
            this.client = client;
        }
        VaultCertificates.prototype.create = function (resourceGroupName$$1, vaultName$$1, certificateName$$1, certificateRequest, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                vaultName: vaultName$$1,
                certificateName: certificateName$$1,
                certificateRequest: certificateRequest,
                options: options
            }, createOperationSpec, callback);
        };
        return VaultCertificates;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var createOperationSpec = {
        httpMethod: "PUT",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/certificates/{certificateName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            vaultName,
            certificateName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "certificateRequest",
            mapper: __assign({}, CertificateRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VaultCertificateResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a RegisteredIdentities. */
    var RegisteredIdentities = /** @class */ (function () {
        /**
         * Create a RegisteredIdentities.
         * @param {RecoveryServicesClientContext} client Reference to the service client.
         */
        function RegisteredIdentities(client) {
            this.client = client;
        }
        RegisteredIdentities.prototype.deleteMethod = function (resourceGroupName$$1, vaultName$$1, identityName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                vaultName: vaultName$$1,
                identityName: identityName$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        return RegisteredIdentities;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/registeredIdentities/{identityName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            vaultName,
            identityName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        ReplicationUsageList: ReplicationUsageList,
        ReplicationUsage: ReplicationUsage,
        MonitoringSummary: MonitoringSummary,
        JobsSummary: JobsSummary,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ReplicationUsages. */
    var ReplicationUsages = /** @class */ (function () {
        /**
         * Create a ReplicationUsages.
         * @param {RecoveryServicesClientContext} client Reference to the service client.
         */
        function ReplicationUsages(client) {
            this.client = client;
        }
        ReplicationUsages.prototype.list = function (resourceGroupName$$1, vaultName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                vaultName: vaultName$$1,
                options: options
            }, listOperationSpec, callback);
        };
        return ReplicationUsages;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/replicationUsages",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            vaultName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReplicationUsageList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        VaultList: VaultList,
        Vault: Vault,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        VaultProperties: VaultProperties,
        UpgradeDetails: UpgradeDetails,
        Sku: Sku,
        CloudError: CloudError,
        PatchVault: PatchVault,
        PatchTrackedResource: PatchTrackedResource,
        VaultCertificateResponse: VaultCertificateResponse,
        ResourceCertificateDetails: ResourceCertificateDetails,
        VaultExtendedInfoResource: VaultExtendedInfoResource,
        ResourceCertificateAndAadDetails: ResourceCertificateAndAadDetails,
        ResourceCertificateAndAcsDetails: ResourceCertificateAndAcsDetails
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Vaults. */
    var Vaults = /** @class */ (function () {
        /**
         * Create a Vaults.
         * @param {RecoveryServicesClientContext} client Reference to the service client.
         */
        function Vaults(client) {
            this.client = client;
        }
        Vaults.prototype.listBySubscriptionId = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionIdOperationSpec, callback);
        };
        Vaults.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Vaults.prototype.get = function (resourceGroupName$$1, vaultName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                vaultName: vaultName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        Vaults.prototype.createOrUpdate = function (resourceGroupName$$1, vaultName$$1, vault, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                vaultName: vaultName$$1,
                vault: vault,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        Vaults.prototype.deleteMethod = function (resourceGroupName$$1, vaultName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                vaultName: vaultName$$1,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        Vaults.prototype.update = function (resourceGroupName$$1, vaultName$$1, vault, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                vaultName: vaultName$$1,
                vault: vault,
                options: options
            }, updateOperationSpec, callback);
        };
        Vaults.prototype.listBySubscriptionIdNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listBySubscriptionIdNextOperationSpec, callback);
        };
        Vaults.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        return Vaults;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listBySubscriptionIdOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.RecoveryServices/vaults",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VaultList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VaultList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            vaultName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Vault
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            vaultName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "vault",
            mapper: __assign({}, Vault, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Vault
            },
            201: {
                bodyMapper: Vault
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            vaultName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            vaultName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "vault",
            mapper: __assign({}, PatchVault, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Vault
            },
            201: {
                bodyMapper: Vault
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listBySubscriptionIdNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VaultList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VaultList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        ClientDiscoveryResponse: ClientDiscoveryResponse,
        ClientDiscoveryValueForSingleApi: ClientDiscoveryValueForSingleApi,
        ClientDiscoveryDisplay: ClientDiscoveryDisplay,
        ClientDiscoveryForProperties: ClientDiscoveryForProperties,
        ClientDiscoveryForServiceSpecification: ClientDiscoveryForServiceSpecification,
        ClientDiscoveryForLogSpecification: ClientDiscoveryForLogSpecification,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {RecoveryServicesClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.RecoveryServices/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ClientDiscoveryResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ClientDiscoveryResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        VaultExtendedInfoResource: VaultExtendedInfoResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        VaultCertificateResponse: VaultCertificateResponse,
        ResourceCertificateDetails: ResourceCertificateDetails,
        TrackedResource: TrackedResource,
        PatchTrackedResource: PatchTrackedResource,
        Vault: Vault,
        VaultProperties: VaultProperties,
        UpgradeDetails: UpgradeDetails,
        Sku: Sku,
        PatchVault: PatchVault,
        ResourceCertificateAndAadDetails: ResourceCertificateAndAadDetails,
        ResourceCertificateAndAcsDetails: ResourceCertificateAndAcsDetails
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VaultExtendedInfoOperations. */
    var VaultExtendedInfoOperations = /** @class */ (function () {
        /**
         * Create a VaultExtendedInfoOperations.
         * @param {RecoveryServicesClientContext} client Reference to the service client.
         */
        function VaultExtendedInfoOperations(client) {
            this.client = client;
        }
        VaultExtendedInfoOperations.prototype.get = function (resourceGroupName$$1, vaultName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                vaultName: vaultName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        VaultExtendedInfoOperations.prototype.createOrUpdate = function (resourceGroupName$$1, vaultName$$1, resourceResourceExtendedInfoDetails, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                vaultName: vaultName$$1,
                resourceResourceExtendedInfoDetails: resourceResourceExtendedInfoDetails,
                options: options
            }, createOrUpdateOperationSpec$1, callback);
        };
        VaultExtendedInfoOperations.prototype.update = function (resourceGroupName$$1, vaultName$$1, resourceResourceExtendedInfoDetails, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                vaultName: vaultName$$1,
                resourceResourceExtendedInfoDetails: resourceResourceExtendedInfoDetails,
                options: options
            }, updateOperationSpec$1, callback);
        };
        return VaultExtendedInfoOperations;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/extendedInformation/vaultExtendedInfo",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            vaultName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VaultExtendedInfoResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var createOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/extendedInformation/vaultExtendedInfo",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            vaultName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "resourceResourceExtendedInfoDetails",
            mapper: __assign({}, VaultExtendedInfoResource, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VaultExtendedInfoResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var updateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/extendedInformation/vaultExtendedInfo",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            vaultName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "resourceResourceExtendedInfoDetails",
            mapper: __assign({}, VaultExtendedInfoResource, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VaultExtendedInfoResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        VaultUsageList: VaultUsageList,
        VaultUsage: VaultUsage,
        NameInfo: NameInfo,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Usages. */
    var Usages = /** @class */ (function () {
        /**
         * Create a Usages.
         * @param {RecoveryServicesClientContext} client Reference to the service client.
         */
        function Usages(client) {
            this.client = client;
        }
        Usages.prototype.listByVaults = function (resourceGroupName$$1, vaultName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                vaultName: vaultName$$1,
                options: options
            }, listByVaultsOperationSpec, callback);
        };
        return Usages;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var listByVaultsOperationSpec = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/usages",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            vaultName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VaultUsageList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-recoveryservices";
    var packageVersion = "1.0.0";
    var RecoveryServicesClientContext = /** @class */ (function (_super) {
        __extends(RecoveryServicesClientContext, _super);
        /**
         * Initializes a new instance of the RecoveryServicesClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The subscription Id.
         * @param [options] The parameter options
         */
        function RecoveryServicesClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2016-06-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return RecoveryServicesClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var RecoveryServicesClient = /** @class */ (function (_super) {
        __extends(RecoveryServicesClient, _super);
        /**
         * Initializes a new instance of the RecoveryServicesClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The subscription Id.
         * @param [options] The parameter options
         */
        function RecoveryServicesClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.vaultCertificates = new VaultCertificates(_this);
            _this.registeredIdentities = new RegisteredIdentities(_this);
            _this.replicationUsages = new ReplicationUsages(_this);
            _this.vaults = new Vaults(_this);
            _this.operations = new Operations(_this);
            _this.vaultExtendedInfo = new VaultExtendedInfoOperations(_this);
            _this.usages = new Usages(_this);
            return _this;
        }
        return RecoveryServicesClient;
    }(RecoveryServicesClientContext));

    exports.RecoveryServicesClient = RecoveryServicesClient;
    exports.RecoveryServicesClientContext = RecoveryServicesClientContext;
    exports.RecoveryServicesModels = index;
    exports.RecoveryServicesMappers = mappers;
    exports.VaultCertificates = VaultCertificates;
    exports.RegisteredIdentities = RegisteredIdentities;
    exports.ReplicationUsages = ReplicationUsages;
    exports.Vaults = Vaults;
    exports.Operations = Operations;
    exports.VaultExtendedInfoOperations = VaultExtendedInfoOperations;
    exports.Usages = Usages;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-recoveryservices.js.map
