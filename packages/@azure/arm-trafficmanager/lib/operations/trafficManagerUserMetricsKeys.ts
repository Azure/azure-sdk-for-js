/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/trafficManagerUserMetricsKeysMappers";
import * as Parameters from "../models/parameters";
import { TrafficManagerManagementClientContext } from "../trafficManagerManagementClientContext";

/** Class representing a TrafficManagerUserMetricsKeys. */
export class TrafficManagerUserMetricsKeys {
  private readonly client: TrafficManagerManagementClientContext;

  /**
   * Create a TrafficManagerUserMetricsKeys.
   * @param {TrafficManagerManagementClientContext} client Reference to the service client.
   */
  constructor(client: TrafficManagerManagementClientContext) {
    this.client = client;
  }

  /**
   * Get the subscription-level key used for Real User Metrics collection.
   * @param [options] The optional parameters
   * @returns Promise<Models.TrafficManagerUserMetricsKeysGetResponse>
   */
  get(options?: msRest.RequestOptionsBase): Promise<Models.TrafficManagerUserMetricsKeysGetResponse>;
  /**
   * @param callback The callback
   */
  get(callback: msRest.ServiceCallback<Models.UserMetricsModel>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UserMetricsModel>): void;
  get(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.UserMetricsModel>, callback?: msRest.ServiceCallback<Models.UserMetricsModel>): Promise<Models.TrafficManagerUserMetricsKeysGetResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getOperationSpec,
      callback) as Promise<Models.TrafficManagerUserMetricsKeysGetResponse>;
  }

  /**
   * Create or update a subscription-level key used for Real User Metrics collection.
   * @param [options] The optional parameters
   * @returns Promise<Models.TrafficManagerUserMetricsKeysCreateOrUpdateResponse>
   */
  createOrUpdate(options?: msRest.RequestOptionsBase): Promise<Models.TrafficManagerUserMetricsKeysCreateOrUpdateResponse>;
  /**
   * @param callback The callback
   */
  createOrUpdate(callback: msRest.ServiceCallback<Models.UserMetricsModel>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UserMetricsModel>): void;
  createOrUpdate(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.UserMetricsModel>, callback?: msRest.ServiceCallback<Models.UserMetricsModel>): Promise<Models.TrafficManagerUserMetricsKeysCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.TrafficManagerUserMetricsKeysCreateOrUpdateResponse>;
  }

  /**
   * Delete a subscription-level key used for Real User Metrics collection.
   * @param [options] The optional parameters
   * @returns Promise<Models.TrafficManagerUserMetricsKeysDeleteMethodResponse>
   */
  deleteMethod(options?: msRest.RequestOptionsBase): Promise<Models.TrafficManagerUserMetricsKeysDeleteMethodResponse>;
  /**
   * @param callback The callback
   */
  deleteMethod(callback: msRest.ServiceCallback<Models.DeleteOperationResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeleteOperationResult>): void;
  deleteMethod(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeleteOperationResult>, callback?: msRest.ServiceCallback<Models.DeleteOperationResult>): Promise<Models.TrafficManagerUserMetricsKeysDeleteMethodResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      deleteMethodOperationSpec,
      callback) as Promise<Models.TrafficManagerUserMetricsKeysDeleteMethodResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficManagerUserMetricsKeys/default",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.UserMetricsModel
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficManagerUserMetricsKeys/default",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    201: {
      bodyMapper: Mappers.UserMetricsModel
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficManagerUserMetricsKeys/default",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeleteOperationResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
