/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmTrafficmanager = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for EndpointStatus.
     * Possible values include: 'Enabled', 'Disabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: EndpointStatus =
     * <EndpointStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var EndpointStatus;
    (function (EndpointStatus) {
        EndpointStatus["Enabled"] = "Enabled";
        EndpointStatus["Disabled"] = "Disabled";
    })(EndpointStatus || (EndpointStatus = {}));
    /**
     * Defines values for EndpointMonitorStatus.
     * Possible values include: 'CheckingEndpoint', 'Online', 'Degraded',
     * 'Disabled', 'Inactive', 'Stopped'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: EndpointMonitorStatus =
     * <EndpointMonitorStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var EndpointMonitorStatus;
    (function (EndpointMonitorStatus) {
        EndpointMonitorStatus["CheckingEndpoint"] = "CheckingEndpoint";
        EndpointMonitorStatus["Online"] = "Online";
        EndpointMonitorStatus["Degraded"] = "Degraded";
        EndpointMonitorStatus["Disabled"] = "Disabled";
        EndpointMonitorStatus["Inactive"] = "Inactive";
        EndpointMonitorStatus["Stopped"] = "Stopped";
    })(EndpointMonitorStatus || (EndpointMonitorStatus = {}));
    /**
     * Defines values for ProfileMonitorStatus.
     * Possible values include: 'CheckingEndpoints', 'Online', 'Degraded',
     * 'Disabled', 'Inactive'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ProfileMonitorStatus =
     * <ProfileMonitorStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ProfileMonitorStatus;
    (function (ProfileMonitorStatus) {
        ProfileMonitorStatus["CheckingEndpoints"] = "CheckingEndpoints";
        ProfileMonitorStatus["Online"] = "Online";
        ProfileMonitorStatus["Degraded"] = "Degraded";
        ProfileMonitorStatus["Disabled"] = "Disabled";
        ProfileMonitorStatus["Inactive"] = "Inactive";
    })(ProfileMonitorStatus || (ProfileMonitorStatus = {}));
    /**
     * Defines values for MonitorProtocol.
     * Possible values include: 'HTTP', 'HTTPS', 'TCP'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: MonitorProtocol =
     * <MonitorProtocol>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var MonitorProtocol;
    (function (MonitorProtocol) {
        MonitorProtocol["HTTP"] = "HTTP";
        MonitorProtocol["HTTPS"] = "HTTPS";
        MonitorProtocol["TCP"] = "TCP";
    })(MonitorProtocol || (MonitorProtocol = {}));
    /**
     * Defines values for ProfileStatus.
     * Possible values include: 'Enabled', 'Disabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ProfileStatus =
     * <ProfileStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ProfileStatus;
    (function (ProfileStatus) {
        ProfileStatus["Enabled"] = "Enabled";
        ProfileStatus["Disabled"] = "Disabled";
    })(ProfileStatus || (ProfileStatus = {}));
    /**
     * Defines values for TrafficRoutingMethod.
     * Possible values include: 'Performance', 'Priority', 'Weighted',
     * 'Geographic', 'MultiValue', 'Subnet'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: TrafficRoutingMethod =
     * <TrafficRoutingMethod>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var TrafficRoutingMethod;
    (function (TrafficRoutingMethod) {
        TrafficRoutingMethod["Performance"] = "Performance";
        TrafficRoutingMethod["Priority"] = "Priority";
        TrafficRoutingMethod["Weighted"] = "Weighted";
        TrafficRoutingMethod["Geographic"] = "Geographic";
        TrafficRoutingMethod["MultiValue"] = "MultiValue";
        TrafficRoutingMethod["Subnet"] = "Subnet";
    })(TrafficRoutingMethod || (TrafficRoutingMethod = {}));
    /**
     * Defines values for TrafficViewEnrollmentStatus.
     * Possible values include: 'Enabled', 'Disabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: TrafficViewEnrollmentStatus =
     * <TrafficViewEnrollmentStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var TrafficViewEnrollmentStatus;
    (function (TrafficViewEnrollmentStatus) {
        TrafficViewEnrollmentStatus["Enabled"] = "Enabled";
        TrafficViewEnrollmentStatus["Disabled"] = "Disabled";
    })(TrafficViewEnrollmentStatus || (TrafficViewEnrollmentStatus = {}));

    var index = /*#__PURE__*/Object.freeze({
        get EndpointStatus () { return EndpointStatus; },
        get EndpointMonitorStatus () { return EndpointMonitorStatus; },
        get ProfileMonitorStatus () { return ProfileMonitorStatus; },
        get MonitorProtocol () { return MonitorProtocol; },
        get ProfileStatus () { return ProfileStatus; },
        get TrafficRoutingMethod () { return TrafficRoutingMethod; },
        get TrafficViewEnrollmentStatus () { return TrafficViewEnrollmentStatus; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var DeleteOperationResult = {
        serializedName: "DeleteOperationResult",
        type: {
            name: "Composite",
            className: "DeleteOperationResult",
            modelProperties: {
                operationResult: {
                    readOnly: true,
                    serializedName: "boolean",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var EndpointPropertiesSubnetsItem = {
        serializedName: "EndpointProperties_subnetsItem",
        type: {
            name: "Composite",
            className: "EndpointPropertiesSubnetsItem",
            modelProperties: {
                first: {
                    serializedName: "first",
                    type: {
                        name: "String"
                    }
                },
                last: {
                    serializedName: "last",
                    type: {
                        name: "String"
                    }
                },
                scope: {
                    serializedName: "scope",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var EndpointPropertiesCustomHeadersItem = {
        serializedName: "EndpointProperties_customHeadersItem",
        type: {
            name: "Composite",
            className: "EndpointPropertiesCustomHeadersItem",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HeatMapEndpoint = {
        serializedName: "HeatMapEndpoint",
        type: {
            name: "Composite",
            className: "HeatMapEndpoint",
            modelProperties: {
                resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                },
                endpointId: {
                    serializedName: "endpointId",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var QueryExperience = {
        serializedName: "QueryExperience",
        type: {
            name: "Composite",
            className: "QueryExperience",
            modelProperties: {
                endpointId: {
                    required: true,
                    serializedName: "endpointId",
                    type: {
                        name: "Number"
                    }
                },
                queryCount: {
                    required: true,
                    serializedName: "queryCount",
                    type: {
                        name: "Number"
                    }
                },
                latency: {
                    serializedName: "latency",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var TrafficFlow = {
        serializedName: "TrafficFlow",
        type: {
            name: "Composite",
            className: "TrafficFlow",
            modelProperties: {
                sourceIp: {
                    serializedName: "sourceIp",
                    type: {
                        name: "String"
                    }
                },
                latitude: {
                    serializedName: "latitude",
                    type: {
                        name: "Number"
                    }
                },
                longitude: {
                    serializedName: "longitude",
                    type: {
                        name: "Number"
                    }
                },
                queryExperiences: {
                    serializedName: "queryExperiences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "QueryExperience"
                            }
                        }
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProxyResource = {
        serializedName: "ProxyResource",
        type: {
            name: "Composite",
            className: "ProxyResource",
            modelProperties: __assign({}, Resource.type.modelProperties)
        }
    };
    var HeatMapModel = {
        serializedName: "HeatMapModel",
        type: {
            name: "Composite",
            className: "HeatMapModel",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { startTime: {
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, endTime: {
                    serializedName: "properties.endTime",
                    type: {
                        name: "DateTime"
                    }
                }, endpoints: {
                    serializedName: "properties.endpoints",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HeatMapEndpoint"
                            }
                        }
                    }
                }, trafficFlows: {
                    serializedName: "properties.trafficFlows",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TrafficFlow"
                            }
                        }
                    }
                } })
        }
    };
    var UserMetricsModel = {
        serializedName: "UserMetricsModel",
        type: {
            name: "Composite",
            className: "UserMetricsModel",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { key: {
                    serializedName: "properties.key",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Endpoint = {
        serializedName: "Endpoint",
        type: {
            name: "Composite",
            className: "Endpoint",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { targetResourceId: {
                    serializedName: "properties.targetResourceId",
                    type: {
                        name: "String"
                    }
                }, target: {
                    serializedName: "properties.target",
                    type: {
                        name: "String"
                    }
                }, endpointStatus: {
                    serializedName: "properties.endpointStatus",
                    type: {
                        name: "String"
                    }
                }, weight: {
                    serializedName: "properties.weight",
                    type: {
                        name: "Number"
                    }
                }, priority: {
                    serializedName: "properties.priority",
                    type: {
                        name: "Number"
                    }
                }, endpointLocation: {
                    serializedName: "properties.endpointLocation",
                    type: {
                        name: "String"
                    }
                }, endpointMonitorStatus: {
                    serializedName: "properties.endpointMonitorStatus",
                    type: {
                        name: "String"
                    }
                }, minChildEndpoints: {
                    serializedName: "properties.minChildEndpoints",
                    type: {
                        name: "Number"
                    }
                }, geoMapping: {
                    serializedName: "properties.geoMapping",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, subnets: {
                    serializedName: "properties.subnets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EndpointPropertiesSubnetsItem"
                            }
                        }
                    }
                }, customHeaders: {
                    serializedName: "properties.customHeaders",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EndpointPropertiesCustomHeadersItem"
                            }
                        }
                    }
                } })
        }
    };
    var CheckTrafficManagerRelativeDnsNameAvailabilityParameters = {
        serializedName: "CheckTrafficManagerRelativeDnsNameAvailabilityParameters",
        type: {
            name: "Composite",
            className: "CheckTrafficManagerRelativeDnsNameAvailabilityParameters",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DnsConfig = {
        serializedName: "DnsConfig",
        type: {
            name: "Composite",
            className: "DnsConfig",
            modelProperties: {
                relativeName: {
                    serializedName: "relativeName",
                    type: {
                        name: "String"
                    }
                },
                fqdn: {
                    readOnly: true,
                    serializedName: "fqdn",
                    type: {
                        name: "String"
                    }
                },
                ttl: {
                    serializedName: "ttl",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var MonitorConfigCustomHeadersItem = {
        serializedName: "MonitorConfig_customHeadersItem",
        type: {
            name: "Composite",
            className: "MonitorConfigCustomHeadersItem",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MonitorConfigExpectedStatusCodeRangesItem = {
        serializedName: "MonitorConfig_expectedStatusCodeRangesItem",
        type: {
            name: "Composite",
            className: "MonitorConfigExpectedStatusCodeRangesItem",
            modelProperties: {
                min: {
                    serializedName: "min",
                    type: {
                        name: "Number"
                    }
                },
                max: {
                    serializedName: "max",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var MonitorConfig = {
        serializedName: "MonitorConfig",
        type: {
            name: "Composite",
            className: "MonitorConfig",
            modelProperties: {
                profileMonitorStatus: {
                    serializedName: "profileMonitorStatus",
                    type: {
                        name: "String"
                    }
                },
                protocol: {
                    serializedName: "protocol",
                    type: {
                        name: "String"
                    }
                },
                port: {
                    serializedName: "port",
                    type: {
                        name: "Number"
                    }
                },
                path: {
                    serializedName: "path",
                    type: {
                        name: "String"
                    }
                },
                intervalInSeconds: {
                    serializedName: "intervalInSeconds",
                    type: {
                        name: "Number"
                    }
                },
                timeoutInSeconds: {
                    serializedName: "timeoutInSeconds",
                    type: {
                        name: "Number"
                    }
                },
                toleratedNumberOfFailures: {
                    serializedName: "toleratedNumberOfFailures",
                    type: {
                        name: "Number"
                    }
                },
                customHeaders: {
                    serializedName: "customHeaders",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MonitorConfigCustomHeadersItem"
                            }
                        }
                    }
                },
                expectedStatusCodeRanges: {
                    serializedName: "expectedStatusCodeRanges",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MonitorConfigExpectedStatusCodeRangesItem"
                            }
                        }
                    }
                }
            }
        }
    };
    var TrackedResource = {
        serializedName: "TrackedResource",
        type: {
            name: "Composite",
            className: "TrackedResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Profile = {
        serializedName: "Profile",
        type: {
            name: "Composite",
            className: "Profile",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { profileStatus: {
                    serializedName: "properties.profileStatus",
                    type: {
                        name: "String"
                    }
                }, trafficRoutingMethod: {
                    serializedName: "properties.trafficRoutingMethod",
                    type: {
                        name: "String"
                    }
                }, dnsConfig: {
                    serializedName: "properties.dnsConfig",
                    type: {
                        name: "Composite",
                        className: "DnsConfig"
                    }
                }, monitorConfig: {
                    serializedName: "properties.monitorConfig",
                    type: {
                        name: "Composite",
                        className: "MonitorConfig"
                    }
                }, endpoints: {
                    serializedName: "properties.endpoints",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Endpoint"
                            }
                        }
                    }
                }, trafficViewEnrollmentStatus: {
                    serializedName: "properties.trafficViewEnrollmentStatus",
                    type: {
                        name: "String"
                    }
                }, maxReturn: {
                    serializedName: "properties.maxReturn",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var TrafficManagerNameAvailability = {
        serializedName: "TrafficManagerNameAvailability",
        type: {
            name: "Composite",
            className: "TrafficManagerNameAvailability",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                nameAvailable: {
                    serializedName: "nameAvailable",
                    type: {
                        name: "Boolean"
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Region = {
        serializedName: "Region",
        type: {
            name: "Composite",
            className: "Region",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                regions: {
                    serializedName: "regions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Region"
                            }
                        }
                    }
                }
            }
        }
    };
    var TrafficManagerGeographicHierarchy = {
        serializedName: "TrafficManagerGeographicHierarchy",
        type: {
            name: "Composite",
            className: "TrafficManagerGeographicHierarchy",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { geographicHierarchy: {
                    serializedName: "properties.geographicHierarchy",
                    type: {
                        name: "Composite",
                        className: "Region"
                    }
                } })
        }
    };
    var ProfileListResult = {
        serializedName: "ProfileListResult",
        type: {
            name: "Composite",
            className: "ProfileListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Profile"
                            }
                        }
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        DeleteOperationResult: DeleteOperationResult,
        EndpointPropertiesSubnetsItem: EndpointPropertiesSubnetsItem,
        EndpointPropertiesCustomHeadersItem: EndpointPropertiesCustomHeadersItem,
        HeatMapEndpoint: HeatMapEndpoint,
        QueryExperience: QueryExperience,
        TrafficFlow: TrafficFlow,
        Resource: Resource,
        ProxyResource: ProxyResource,
        HeatMapModel: HeatMapModel,
        UserMetricsModel: UserMetricsModel,
        Endpoint: Endpoint,
        CheckTrafficManagerRelativeDnsNameAvailabilityParameters: CheckTrafficManagerRelativeDnsNameAvailabilityParameters,
        DnsConfig: DnsConfig,
        MonitorConfigCustomHeadersItem: MonitorConfigCustomHeadersItem,
        MonitorConfigExpectedStatusCodeRangesItem: MonitorConfigExpectedStatusCodeRangesItem,
        MonitorConfig: MonitorConfig,
        TrackedResource: TrackedResource,
        Profile: Profile,
        TrafficManagerNameAvailability: TrafficManagerNameAvailability,
        Region: Region,
        TrafficManagerGeographicHierarchy: TrafficManagerGeographicHierarchy,
        ProfileListResult: ProfileListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        Endpoint: Endpoint,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        EndpointPropertiesSubnetsItem: EndpointPropertiesSubnetsItem,
        EndpointPropertiesCustomHeadersItem: EndpointPropertiesCustomHeadersItem,
        CloudError: CloudError,
        DeleteOperationResult: DeleteOperationResult,
        HeatMapModel: HeatMapModel,
        HeatMapEndpoint: HeatMapEndpoint,
        TrafficFlow: TrafficFlow,
        QueryExperience: QueryExperience,
        UserMetricsModel: UserMetricsModel,
        TrafficManagerGeographicHierarchy: TrafficManagerGeographicHierarchy,
        Region: Region,
        TrackedResource: TrackedResource,
        Profile: Profile,
        DnsConfig: DnsConfig,
        MonitorConfig: MonitorConfig,
        MonitorConfigCustomHeadersItem: MonitorConfigCustomHeadersItem,
        MonitorConfigExpectedStatusCodeRangesItem: MonitorConfigExpectedStatusCodeRangesItem
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var botRight = {
        parameterPath: [
            "options",
            "botRight"
        ],
        mapper: {
            serializedName: "botRight",
            constraints: {
                MaxItems: 2,
                MinItems: 2
            },
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Number"
                    }
                }
            }
        },
        collectionFormat: msRest.QueryCollectionFormat.Csv
    };
    var endpointName = {
        parameterPath: "endpointName",
        mapper: {
            required: true,
            serializedName: "endpointName",
            type: {
                name: "String"
            }
        }
    };
    var endpointType = {
        parameterPath: "endpointType",
        mapper: {
            required: true,
            serializedName: "endpointType",
            type: {
                name: "String"
            }
        }
    };
    var heatMapType = {
        parameterPath: "heatMapType",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "heatMapType",
            defaultValue: 'default',
            type: {
                name: "String"
            }
        }
    };
    var profileName = {
        parameterPath: "profileName",
        mapper: {
            required: true,
            serializedName: "profileName",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var topLeft = {
        parameterPath: [
            "options",
            "topLeft"
        ],
        mapper: {
            serializedName: "topLeft",
            constraints: {
                MaxItems: 2,
                MinItems: 2
            },
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Number"
                    }
                }
            }
        },
        collectionFormat: msRest.QueryCollectionFormat.Csv
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Endpoints. */
    var Endpoints = /** @class */ (function () {
        /**
         * Create a Endpoints.
         * @param {TrafficManagerManagementClientContext} client Reference to the service client.
         */
        function Endpoints(client) {
            this.client = client;
        }
        Endpoints.prototype.update = function (resourceGroupName$$1, profileName$$1, endpointType$$1, endpointName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                endpointType: endpointType$$1,
                endpointName: endpointName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec, callback);
        };
        Endpoints.prototype.get = function (resourceGroupName$$1, profileName$$1, endpointType$$1, endpointName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                endpointType: endpointType$$1,
                endpointName: endpointName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        Endpoints.prototype.createOrUpdate = function (resourceGroupName$$1, profileName$$1, endpointType$$1, endpointName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                endpointType: endpointType$$1,
                endpointName: endpointName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        Endpoints.prototype.deleteMethod = function (resourceGroupName$$1, profileName$$1, endpointType$$1, endpointName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                endpointType: endpointType$$1,
                endpointName: endpointName$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        return Endpoints;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}",
        urlParameters: [
            resourceGroupName,
            profileName,
            endpointType,
            endpointName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Endpoint, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Endpoint
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}",
        urlParameters: [
            resourceGroupName,
            profileName,
            endpointType,
            endpointName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Endpoint
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}",
        urlParameters: [
            resourceGroupName,
            profileName,
            endpointType,
            endpointName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Endpoint, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Endpoint
            },
            201: {
                bodyMapper: Endpoint
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}",
        urlParameters: [
            resourceGroupName,
            profileName,
            endpointType,
            endpointName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeleteOperationResult
            },
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        CheckTrafficManagerRelativeDnsNameAvailabilityParameters: CheckTrafficManagerRelativeDnsNameAvailabilityParameters,
        TrafficManagerNameAvailability: TrafficManagerNameAvailability,
        CloudError: CloudError,
        ProfileListResult: ProfileListResult,
        Profile: Profile,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        DnsConfig: DnsConfig,
        MonitorConfig: MonitorConfig,
        MonitorConfigCustomHeadersItem: MonitorConfigCustomHeadersItem,
        MonitorConfigExpectedStatusCodeRangesItem: MonitorConfigExpectedStatusCodeRangesItem,
        Endpoint: Endpoint,
        ProxyResource: ProxyResource,
        EndpointPropertiesSubnetsItem: EndpointPropertiesSubnetsItem,
        EndpointPropertiesCustomHeadersItem: EndpointPropertiesCustomHeadersItem,
        DeleteOperationResult: DeleteOperationResult,
        HeatMapModel: HeatMapModel,
        HeatMapEndpoint: HeatMapEndpoint,
        TrafficFlow: TrafficFlow,
        QueryExperience: QueryExperience,
        UserMetricsModel: UserMetricsModel,
        TrafficManagerGeographicHierarchy: TrafficManagerGeographicHierarchy,
        Region: Region
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Profiles. */
    var Profiles = /** @class */ (function () {
        /**
         * Create a Profiles.
         * @param {TrafficManagerManagementClientContext} client Reference to the service client.
         */
        function Profiles(client) {
            this.client = client;
        }
        Profiles.prototype.checkTrafficManagerRelativeDnsNameAvailability = function (parameters, options, callback) {
            return this.client.sendOperationRequest({
                parameters: parameters,
                options: options
            }, checkTrafficManagerRelativeDnsNameAvailabilityOperationSpec, callback);
        };
        Profiles.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Profiles.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec, callback);
        };
        Profiles.prototype.get = function (resourceGroupName$$1, profileName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        Profiles.prototype.createOrUpdate = function (resourceGroupName$$1, profileName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$1, callback);
        };
        Profiles.prototype.deleteMethod = function (resourceGroupName$$1, profileName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        Profiles.prototype.update = function (resourceGroupName$$1, profileName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec$1, callback);
        };
        return Profiles;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var checkTrafficManagerRelativeDnsNameAvailabilityOperationSpec = {
        httpMethod: "POST",
        path: "providers/Microsoft.Network/checkTrafficManagerNameAvailability",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, CheckTrafficManagerRelativeDnsNameAvailabilityParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: TrafficManagerNameAvailability
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProfileListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listBySubscriptionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficmanagerprofiles",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProfileListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}",
        urlParameters: [
            resourceGroupName,
            profileName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Profile
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var createOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}",
        urlParameters: [
            resourceGroupName,
            profileName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Profile, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Profile
            },
            201: {
                bodyMapper: Profile
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}",
        urlParameters: [
            resourceGroupName,
            profileName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeleteOperationResult
            },
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var updateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}",
        urlParameters: [
            resourceGroupName,
            profileName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Profile, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Profile
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        TrafficManagerGeographicHierarchy: TrafficManagerGeographicHierarchy,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        Region: Region,
        CloudError: CloudError,
        HeatMapModel: HeatMapModel,
        HeatMapEndpoint: HeatMapEndpoint,
        TrafficFlow: TrafficFlow,
        QueryExperience: QueryExperience,
        UserMetricsModel: UserMetricsModel,
        Endpoint: Endpoint,
        EndpointPropertiesSubnetsItem: EndpointPropertiesSubnetsItem,
        EndpointPropertiesCustomHeadersItem: EndpointPropertiesCustomHeadersItem,
        TrackedResource: TrackedResource,
        Profile: Profile,
        DnsConfig: DnsConfig,
        MonitorConfig: MonitorConfig,
        MonitorConfigCustomHeadersItem: MonitorConfigCustomHeadersItem,
        MonitorConfigExpectedStatusCodeRangesItem: MonitorConfigExpectedStatusCodeRangesItem
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a GeographicHierarchies. */
    var GeographicHierarchies = /** @class */ (function () {
        /**
         * Create a GeographicHierarchies.
         * @param {TrafficManagerManagementClientContext} client Reference to the service client.
         */
        function GeographicHierarchies(client) {
            this.client = client;
        }
        GeographicHierarchies.prototype.getDefault = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, getDefaultOperationSpec, callback);
        };
        return GeographicHierarchies;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var getDefaultOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Network/trafficManagerGeographicHierarchies/default",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TrafficManagerGeographicHierarchy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        HeatMapModel: HeatMapModel,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        HeatMapEndpoint: HeatMapEndpoint,
        TrafficFlow: TrafficFlow,
        QueryExperience: QueryExperience,
        CloudError: CloudError,
        UserMetricsModel: UserMetricsModel,
        Endpoint: Endpoint,
        EndpointPropertiesSubnetsItem: EndpointPropertiesSubnetsItem,
        EndpointPropertiesCustomHeadersItem: EndpointPropertiesCustomHeadersItem,
        TrafficManagerGeographicHierarchy: TrafficManagerGeographicHierarchy,
        Region: Region,
        TrackedResource: TrackedResource,
        Profile: Profile,
        DnsConfig: DnsConfig,
        MonitorConfig: MonitorConfig,
        MonitorConfigCustomHeadersItem: MonitorConfigCustomHeadersItem,
        MonitorConfigExpectedStatusCodeRangesItem: MonitorConfigExpectedStatusCodeRangesItem
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a HeatMap. */
    var HeatMap = /** @class */ (function () {
        /**
         * Create a HeatMap.
         * @param {TrafficManagerManagementClientContext} client Reference to the service client.
         */
        function HeatMap(client) {
            this.client = client;
        }
        HeatMap.prototype.get = function (resourceGroupName$$1, profileName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                profileName: profileName$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        return HeatMap;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/heatMaps/{heatMapType}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            profileName,
            heatMapType
        ],
        queryParameters: [
            topLeft,
            botRight,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HeatMapModel
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        UserMetricsModel: UserMetricsModel,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        DeleteOperationResult: DeleteOperationResult,
        HeatMapModel: HeatMapModel,
        HeatMapEndpoint: HeatMapEndpoint,
        TrafficFlow: TrafficFlow,
        QueryExperience: QueryExperience,
        Endpoint: Endpoint,
        EndpointPropertiesSubnetsItem: EndpointPropertiesSubnetsItem,
        EndpointPropertiesCustomHeadersItem: EndpointPropertiesCustomHeadersItem,
        TrafficManagerGeographicHierarchy: TrafficManagerGeographicHierarchy,
        Region: Region,
        TrackedResource: TrackedResource,
        Profile: Profile,
        DnsConfig: DnsConfig,
        MonitorConfig: MonitorConfig,
        MonitorConfigCustomHeadersItem: MonitorConfigCustomHeadersItem,
        MonitorConfigExpectedStatusCodeRangesItem: MonitorConfigExpectedStatusCodeRangesItem
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a TrafficManagerUserMetricsKeys. */
    var TrafficManagerUserMetricsKeys = /** @class */ (function () {
        /**
         * Create a TrafficManagerUserMetricsKeys.
         * @param {TrafficManagerManagementClientContext} client Reference to the service client.
         */
        function TrafficManagerUserMetricsKeys(client) {
            this.client = client;
        }
        TrafficManagerUserMetricsKeys.prototype.get = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, getOperationSpec$3, callback);
        };
        TrafficManagerUserMetricsKeys.prototype.createOrUpdate = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, createOrUpdateOperationSpec$2, callback);
        };
        TrafficManagerUserMetricsKeys.prototype.deleteMethod = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        return TrafficManagerUserMetricsKeys;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficManagerUserMetricsKeys/default",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UserMetricsModel
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var createOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficManagerUserMetricsKeys/default",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            201: {
                bodyMapper: UserMetricsModel
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficManagerUserMetricsKeys/default",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeleteOperationResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-trafficmanager";
    var packageVersion = "1.0.0";
    var TrafficManagerManagementClientContext = /** @class */ (function (_super) {
        __extends(TrafficManagerManagementClientContext, _super);
        /**
         * Initializes a new instance of the TrafficManagerManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function TrafficManagerManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2018-04-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return TrafficManagerManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var TrafficManagerManagementClient = /** @class */ (function (_super) {
        __extends(TrafficManagerManagementClient, _super);
        /**
         * Initializes a new instance of the TrafficManagerManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function TrafficManagerManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.endpoints = new Endpoints(_this);
            _this.profiles = new Profiles(_this);
            _this.geographicHierarchies = new GeographicHierarchies(_this);
            _this.heatMap = new HeatMap(_this);
            _this.trafficManagerUserMetricsKeys = new TrafficManagerUserMetricsKeys(_this);
            return _this;
        }
        return TrafficManagerManagementClient;
    }(TrafficManagerManagementClientContext));

    exports.TrafficManagerManagementClient = TrafficManagerManagementClient;
    exports.TrafficManagerManagementClientContext = TrafficManagerManagementClientContext;
    exports.TrafficManagerManagementModels = index;
    exports.TrafficManagerManagementMappers = mappers;
    exports.Endpoints = Endpoints;
    exports.Profiles = Profiles;
    exports.GeographicHierarchies = GeographicHierarchies;
    exports.HeatMap = HeatMap;
    exports.TrafficManagerUserMetricsKeys = TrafficManagerUserMetricsKeys;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-trafficmanager.js.map
