/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/usersMappers";
import * as Parameters from "../models/parameters";
import { ManagedLabsClientContext } from "../managedLabsClientContext";

/** Class representing a Users. */
export class Users {
  private readonly client: ManagedLabsClientContext;

  /**
   * Create a Users.
   * @param {ManagedLabsClientContext} client Reference to the service client.
   */
  constructor(client: ManagedLabsClientContext) {
    this.client = client;
  }

  /**
   * List users in a given lab.
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param [options] The optional parameters
   * @returns Promise<Models.UsersListResponse>
   */
  list(resourceGroupName: string, labAccountName: string, labName: string, options?: Models.UsersListOptionalParams): Promise<Models.UsersListResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param callback The callback
   */
  list(resourceGroupName: string, labAccountName: string, labName: string, callback: msRest.ServiceCallback<Models.ResponseWithContinuationUser>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, labAccountName: string, labName: string, options: Models.UsersListOptionalParams, callback: msRest.ServiceCallback<Models.ResponseWithContinuationUser>): void;
  list(resourceGroupName: string, labAccountName: string, labName: string, options?: Models.UsersListOptionalParams | msRest.ServiceCallback<Models.ResponseWithContinuationUser>, callback?: msRest.ServiceCallback<Models.ResponseWithContinuationUser>): Promise<Models.UsersListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labAccountName,
        labName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.UsersListResponse>;
  }

  /**
   * Get user
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param userName The name of the user.
   * @param [options] The optional parameters
   * @returns Promise<Models.UsersGetResponse>
   */
  get(resourceGroupName: string, labAccountName: string, labName: string, userName: string, options?: Models.UsersGetOptionalParams): Promise<Models.UsersGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param userName The name of the user.
   * @param callback The callback
   */
  get(resourceGroupName: string, labAccountName: string, labName: string, userName: string, callback: msRest.ServiceCallback<Models.User>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param userName The name of the user.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, labAccountName: string, labName: string, userName: string, options: Models.UsersGetOptionalParams, callback: msRest.ServiceCallback<Models.User>): void;
  get(resourceGroupName: string, labAccountName: string, labName: string, userName: string, options?: Models.UsersGetOptionalParams | msRest.ServiceCallback<Models.User>, callback?: msRest.ServiceCallback<Models.User>): Promise<Models.UsersGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labAccountName,
        labName,
        userName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.UsersGetResponse>;
  }

  /**
   * Create or replace an existing User.
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param userName The name of the user.
   * @param user The User registered to a lab
   * @param [options] The optional parameters
   * @returns Promise<Models.UsersCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, labAccountName: string, labName: string, userName: string, user: Models.User, options?: msRest.RequestOptionsBase): Promise<Models.UsersCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param userName The name of the user.
   * @param user The User registered to a lab
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, labAccountName: string, labName: string, userName: string, user: Models.User, callback: msRest.ServiceCallback<Models.User>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param userName The name of the user.
   * @param user The User registered to a lab
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, labAccountName: string, labName: string, userName: string, user: Models.User, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.User>): void;
  createOrUpdate(resourceGroupName: string, labAccountName: string, labName: string, userName: string, user: Models.User, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.User>, callback?: msRest.ServiceCallback<Models.User>): Promise<Models.UsersCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labAccountName,
        labName,
        userName,
        user,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.UsersCreateOrUpdateResponse>;
  }

  /**
   * Delete user. This operation can take a while to complete
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param userName The name of the user.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, labAccountName: string, labName: string, userName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,labAccountName,labName,userName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Modify properties of users.
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param userName The name of the user.
   * @param user The User registered to a lab
   * @param [options] The optional parameters
   * @returns Promise<Models.UsersUpdateResponse>
   */
  update(resourceGroupName: string, labAccountName: string, labName: string, userName: string, user: Models.UserFragment, options?: msRest.RequestOptionsBase): Promise<Models.UsersUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param userName The name of the user.
   * @param user The User registered to a lab
   * @param callback The callback
   */
  update(resourceGroupName: string, labAccountName: string, labName: string, userName: string, user: Models.UserFragment, callback: msRest.ServiceCallback<Models.User>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param userName The name of the user.
   * @param user The User registered to a lab
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, labAccountName: string, labName: string, userName: string, user: Models.UserFragment, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.User>): void;
  update(resourceGroupName: string, labAccountName: string, labName: string, userName: string, user: Models.UserFragment, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.User>, callback?: msRest.ServiceCallback<Models.User>): Promise<Models.UsersUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labAccountName,
        labName,
        userName,
        user,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.UsersUpdateResponse>;
  }

  /**
   * Delete user. This operation can take a while to complete
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param userName The name of the user.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, labAccountName: string, labName: string, userName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        labAccountName,
        labName,
        userName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * List users in a given lab.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.UsersListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.UsersListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ResponseWithContinuationUser>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResponseWithContinuationUser>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ResponseWithContinuationUser>, callback?: msRest.ServiceCallback<Models.ResponseWithContinuationUser>): Promise<Models.UsersListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.UsersListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/users",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labAccountName,
    Parameters.labName
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.filter,
    Parameters.top,
    Parameters.orderby,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ResponseWithContinuationUser
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/users/{userName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labAccountName,
    Parameters.labName,
    Parameters.userName
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.User
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/users/{userName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labAccountName,
    Parameters.labName,
    Parameters.userName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "user",
    mapper: {
      ...Mappers.User,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.User
    },
    201: {
      bodyMapper: Mappers.User
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/users/{userName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labAccountName,
    Parameters.labName,
    Parameters.userName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "user",
    mapper: {
      ...Mappers.UserFragment,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.User
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/users/{userName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labAccountName,
    Parameters.labName,
    Parameters.userName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ResponseWithContinuationUser
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
