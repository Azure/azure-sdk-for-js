/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "ms-rest-azure-js";
import * as msRest from "ms-rest-js";

export { BaseResource, CloudError };


/**
 * @interface
 * An interface representing Sku.
 * SKU parameters supplied to the create Redis operation.
 *
 */
export interface Sku {
  /**
   * @member {SkuName} name The type of Redis cache to deploy. Valid values:
   * (Basic, Standard, Premium). Possible values include: 'Basic', 'Standard',
   * 'Premium'
   */
  name: SkuName;
  /**
   * @member {SkuFamily} family The SKU family to use. Valid values: (C, P). (C
   * = Basic/Standard, P = Premium). Possible values include: 'C', 'P'
   */
  family: SkuFamily;
  /**
   * @member {number} capacity The size of the Redis cache to deploy. Valid
   * values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P
   * (Premium) family (1, 2, 3, 4).
   */
  capacity: number;
}

/**
 * @interface
 * An interface representing RedisAccessKeys.
 * Redis cache access keys.
 *
 */
export interface RedisAccessKeys {
  /**
   * @member {string} [primaryKey] The current primary key that clients can use
   * to authenticate with Redis cache.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly primaryKey?: string;
  /**
   * @member {string} [secondaryKey] The current secondary key that clients can
   * use to authenticate with Redis cache.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly secondaryKey?: string;
}

/**
 * @interface
 * An interface representing RedisLinkedServer.
 * Linked server Id
 *
 */
export interface RedisLinkedServer {
  /**
   * @member {string} [id] Linked server Id.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
}

/**
 * @interface
 * An interface representing Resource.
 * The Resource definition.
 *
 * @extends BaseResource
 */
export interface Resource extends BaseResource {
  /**
   * @member {string} [id] Resource ID.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [type] Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
}

/**
 * @interface
 * An interface representing ProxyResource.
 * The resource model definition for a ARM proxy resource. It will have
 * everything other than required location and tags
 *
 * @extends Resource
 */
export interface ProxyResource extends Resource {
}

/**
 * @interface
 * An interface representing TrackedResource.
 * The resource model definition for a ARM tracked top level resource
 *
 * @extends Resource
 */
export interface TrackedResource extends Resource {
  /**
   * @member {{ [propertyName: string]: string }} [tags] Resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * @member {string} location The geo-location where the resource lives
   */
  location: string;
}

/**
 * @interface
 * An interface representing RedisCreateParameters.
 * Parameters supplied to the Create Redis operation.
 *
 */
export interface RedisCreateParameters {
  /**
   * @member {{ [propertyName: string]: string }} [redisConfiguration] All
   * Redis Settings. Few possible keys:
   * rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
   * etc.
   */
  redisConfiguration?: { [propertyName: string]: string };
  /**
   * @member {boolean} [enableNonSslPort] Specifies whether the non-ssl Redis
   * server port (6379) is enabled.
   */
  enableNonSslPort?: boolean;
  /**
   * @member {{ [propertyName: string]: string }} [tenantSettings] A dictionary
   * of tenant settings
   */
  tenantSettings?: { [propertyName: string]: string };
  /**
   * @member {number} [shardCount] The number of shards to be created on a
   * Premium Cluster Cache.
   */
  shardCount?: number;
  /**
   * @member {TlsVersion} [minimumTlsVersion] Optional: requires clients to use
   * a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2').
   * Possible values include: '1.0', '1.1', '1.2'
   */
  minimumTlsVersion?: TlsVersion;
  /**
   * @member {Sku} sku The SKU of the Redis cache to deploy.
   */
  sku: Sku;
  /**
   * @member {string} [subnetId] The full resource ID of a subnet in a virtual
   * network to deploy the Redis cache in. Example format:
   * /subscriptions/{subid}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
   */
  subnetId?: string;
  /**
   * @member {string} [staticIP] Static IP address. Required when deploying a
   * Redis cache inside an existing Azure Virtual Network.
   */
  staticIP?: string;
  /**
   * @member {string[]} [zones] A list of availability zones denoting where the
   * resource needs to come from.
   */
  zones?: string[];
  /**
   * @member {string} location The geo-location where the resource lives
   */
  location: string;
  /**
   * @member {{ [propertyName: string]: string }} [tags] Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing RedisUpdateParameters.
 * Parameters supplied to the Update Redis operation.
 *
 */
export interface RedisUpdateParameters {
  /**
   * @member {{ [propertyName: string]: string }} [redisConfiguration] All
   * Redis Settings. Few possible keys:
   * rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
   * etc.
   */
  redisConfiguration?: { [propertyName: string]: string };
  /**
   * @member {boolean} [enableNonSslPort] Specifies whether the non-ssl Redis
   * server port (6379) is enabled.
   */
  enableNonSslPort?: boolean;
  /**
   * @member {{ [propertyName: string]: string }} [tenantSettings] A dictionary
   * of tenant settings
   */
  tenantSettings?: { [propertyName: string]: string };
  /**
   * @member {number} [shardCount] The number of shards to be created on a
   * Premium Cluster Cache.
   */
  shardCount?: number;
  /**
   * @member {TlsVersion} [minimumTlsVersion] Optional: requires clients to use
   * a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2').
   * Possible values include: '1.0', '1.1', '1.2'
   */
  minimumTlsVersion?: TlsVersion;
  /**
   * @member {Sku} [sku] The SKU of the Redis cache to deploy.
   */
  sku?: Sku;
  /**
   * @member {{ [propertyName: string]: string }} [tags] Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing RedisFirewallRuleProperties.
 * Specifies a range of IP addresses permitted to connect to the cache
 *
 */
export interface RedisFirewallRuleProperties {
  /**
   * @member {string} startIP lowest IP address included in the range
   */
  startIP: string;
  /**
   * @member {string} endIP highest IP address included in the range
   */
  endIP: string;
}

/**
 * @interface
 * An interface representing RedisFirewallRule.
 * A firewall rule on a redis cache has a name, and describes a contiguous
 * range of IP addresses permitted to connect
 *
 * @extends ProxyResource
 */
export interface RedisFirewallRule extends ProxyResource {
  /**
   * @member {string} startIP lowest IP address included in the range
   */
  startIP: string;
  /**
   * @member {string} endIP highest IP address included in the range
   */
  endIP: string;
}

/**
 * @interface
 * An interface representing RedisFirewallRuleCreateParameters.
 * Parameters required for creating a firewall rule on redis cache.
 *
 */
export interface RedisFirewallRuleCreateParameters {
  /**
   * @member {string} startIP lowest IP address included in the range
   */
  startIP: string;
  /**
   * @member {string} endIP highest IP address included in the range
   */
  endIP: string;
}

/**
 * @interface
 * An interface representing RedisResource.
 * A single Redis item in List or Get Operation.
 *
 * @extends TrackedResource
 */
export interface RedisResource extends TrackedResource {
  /**
   * @member {{ [propertyName: string]: string }} [redisConfiguration] All
   * Redis Settings. Few possible keys:
   * rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
   * etc.
   */
  redisConfiguration?: { [propertyName: string]: string };
  /**
   * @member {boolean} [enableNonSslPort] Specifies whether the non-ssl Redis
   * server port (6379) is enabled.
   */
  enableNonSslPort?: boolean;
  /**
   * @member {{ [propertyName: string]: string }} [tenantSettings] A dictionary
   * of tenant settings
   */
  tenantSettings?: { [propertyName: string]: string };
  /**
   * @member {number} [shardCount] The number of shards to be created on a
   * Premium Cluster Cache.
   */
  shardCount?: number;
  /**
   * @member {TlsVersion} [minimumTlsVersion] Optional: requires clients to use
   * a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2').
   * Possible values include: '1.0', '1.1', '1.2'
   */
  minimumTlsVersion?: TlsVersion;
  /**
   * @member {Sku} sku The SKU of the Redis cache to deploy.
   */
  sku: Sku;
  /**
   * @member {string} [subnetId] The full resource ID of a subnet in a virtual
   * network to deploy the Redis cache in. Example format:
   * /subscriptions/{subid}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
   */
  subnetId?: string;
  /**
   * @member {string} [staticIP] Static IP address. Required when deploying a
   * Redis cache inside an existing Azure Virtual Network.
   */
  staticIP?: string;
  /**
   * @member {string} [redisVersion] Redis version.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly redisVersion?: string;
  /**
   * @member {ProvisioningState} [provisioningState] Redis instance
   * provisioning status. Possible values include: 'Creating', 'Deleting',
   * 'Disabled', 'Failed', 'Linking', 'Provisioning', 'RecoveringScaleFailure',
   * 'Scaling', 'Succeeded', 'Unlinking', 'Unprovisioning', 'Updating'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * @member {string} [hostName] Redis host name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly hostName?: string;
  /**
   * @member {number} [port] Redis non-SSL port.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly port?: number;
  /**
   * @member {number} [sslPort] Redis SSL port.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sslPort?: number;
  /**
   * @member {RedisAccessKeys} [accessKeys] The keys of the Redis cache - not
   * set if this object is not the response to Create or Update redis cache
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly accessKeys?: RedisAccessKeys;
  /**
   * @member {RedisLinkedServer[]} [linkedServers] List of the linked servers
   * associated with the cache
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly linkedServers?: RedisLinkedServer[];
  /**
   * @member {string[]} [zones] A list of availability zones denoting where the
   * resource needs to come from.
   */
  zones?: string[];
}

/**
 * @interface
 * An interface representing RedisRegenerateKeyParameters.
 * Specifies which Redis access keys to reset.
 *
 */
export interface RedisRegenerateKeyParameters {
  /**
   * @member {RedisKeyType} keyType The Redis access key to regenerate.
   * Possible values include: 'Primary', 'Secondary'
   */
  keyType: RedisKeyType;
}

/**
 * @interface
 * An interface representing RedisRebootParameters.
 * Specifies which Redis node(s) to reboot.
 *
 */
export interface RedisRebootParameters {
  /**
   * @member {RebootType} rebootType Which Redis node(s) to reboot. Depending
   * on this value data loss is possible. Possible values include:
   * 'PrimaryNode', 'SecondaryNode', 'AllNodes'
   */
  rebootType: RebootType;
  /**
   * @member {number} [shardId] If clustering is enabled, the ID of the shard
   * to be rebooted.
   */
  shardId?: number;
}

/**
 * @interface
 * An interface representing ExportRDBParameters.
 * Parameters for Redis export operation.
 *
 */
export interface ExportRDBParameters {
  /**
   * @member {string} [format] File format.
   */
  format?: string;
  /**
   * @member {string} prefix Prefix to use for exported files.
   */
  prefix: string;
  /**
   * @member {string} container Container name to export to.
   */
  container: string;
}

/**
 * @interface
 * An interface representing ImportRDBParameters.
 * Parameters for Redis import operation.
 *
 */
export interface ImportRDBParameters {
  /**
   * @member {string} [format] File format.
   */
  format?: string;
  /**
   * @member {string[]} files files to import.
   */
  files: string[];
}

/**
 * @interface
 * An interface representing ScheduleEntry.
 * Patch schedule entry for a Premium Redis Cache.
 *
 */
export interface ScheduleEntry {
  /**
   * @member {DayOfWeek} dayOfWeek Day of the week when a cache can be patched.
   * Possible values include: 'Monday', 'Tuesday', 'Wednesday', 'Thursday',
   * 'Friday', 'Saturday', 'Sunday', 'Everyday', 'Weekend'
   */
  dayOfWeek: DayOfWeek;
  /**
   * @member {number} startHourUtc Start hour after which cache patching can
   * start.
   */
  startHourUtc: number;
  /**
   * @member {string} [maintenanceWindow] ISO8601 timespan specifying how much
   * time cache patching can take.
   */
  maintenanceWindow?: string;
}

/**
 * @interface
 * An interface representing ScheduleEntries.
 * List of patch schedules for a Redis cache.
 *
 */
export interface ScheduleEntries {
  /**
   * @member {ScheduleEntry[]} scheduleEntries List of patch schedules for a
   * Redis cache.
   */
  scheduleEntries: ScheduleEntry[];
}

/**
 * @interface
 * An interface representing RedisPatchSchedule.
 * Response to put/get patch schedules for Redis cache.
 *
 * @extends ProxyResource
 */
export interface RedisPatchSchedule extends ProxyResource {
  /**
   * @member {ScheduleEntry[]} scheduleEntries List of patch schedules for a
   * Redis cache.
   */
  scheduleEntries: ScheduleEntry[];
}

/**
 * @interface
 * An interface representing RedisForceRebootResponse.
 * Response to force reboot for Redis cache.
 *
 */
export interface RedisForceRebootResponse {
  /**
   * @member {string} [message] Status message
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly message?: string;
}

/**
 * @interface
 * An interface representing RedisLinkedServerCreateProperties.
 * Create properties for a linked server
 *
 */
export interface RedisLinkedServerCreateProperties {
  /**
   * @member {string} linkedRedisCacheId Fully qualified resourceId of the
   * linked redis cache.
   */
  linkedRedisCacheId: string;
  /**
   * @member {string} linkedRedisCacheLocation Location of the linked redis
   * cache.
   */
  linkedRedisCacheLocation: string;
  /**
   * @member {ReplicationRole} serverRole Role of the linked server. Possible
   * values include: 'Primary', 'Secondary'
   */
  serverRole: ReplicationRole;
}

/**
 * @interface
 * An interface representing RedisLinkedServerProperties.
 * Properties of a linked server to be returned in get/put response
 *
 * @extends RedisLinkedServerCreateProperties
 */
export interface RedisLinkedServerProperties extends RedisLinkedServerCreateProperties {
  /**
   * @member {string} [provisioningState] Terminal state of the link between
   * primary and secondary redis cache.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
}

/**
 * @interface
 * An interface representing RedisLinkedServerWithProperties.
 * Response to put/get linked server (with properties) for Redis cache.
 *
 * @extends ProxyResource
 */
export interface RedisLinkedServerWithProperties extends ProxyResource {
  /**
   * @member {string} linkedRedisCacheId Fully qualified resourceId of the
   * linked redis cache.
   */
  linkedRedisCacheId: string;
  /**
   * @member {string} linkedRedisCacheLocation Location of the linked redis
   * cache.
   */
  linkedRedisCacheLocation: string;
  /**
   * @member {ReplicationRole} serverRole Role of the linked server. Possible
   * values include: 'Primary', 'Secondary'
   */
  serverRole: ReplicationRole;
  /**
   * @member {string} [provisioningState] Terminal state of the link between
   * primary and secondary redis cache.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
}

/**
 * @interface
 * An interface representing RedisLinkedServerCreateParameters.
 * Parameter required for creating a linked server to redis cache.
 *
 */
export interface RedisLinkedServerCreateParameters {
  /**
   * @member {string} linkedRedisCacheId Fully qualified resourceId of the
   * linked redis cache.
   */
  linkedRedisCacheId: string;
  /**
   * @member {string} linkedRedisCacheLocation Location of the linked redis
   * cache.
   */
  linkedRedisCacheLocation: string;
  /**
   * @member {ReplicationRole} serverRole Role of the linked server. Possible
   * values include: 'Primary', 'Secondary'
   */
  serverRole: ReplicationRole;
}

/**
 * @interface
 * An interface representing OperationDisplay.
 * The object that describes the operation.
 *
 */
export interface OperationDisplay {
  /**
   * @member {string} [provider] Friendly name of the resource provider
   */
  provider?: string;
  /**
   * @member {string} [operation] Operation type: read, write, delete,
   * listKeys/action, etc.
   */
  operation?: string;
  /**
   * @member {string} [resource] Resource type on which the operation is
   * performed.
   */
  resource?: string;
  /**
   * @member {string} [description] Friendly name of the operation
   */
  description?: string;
}

/**
 * @interface
 * An interface representing Operation.
 * REST API operation
 *
 */
export interface Operation {
  /**
   * @member {string} [name] Operation name: {provider}/{resource}/{operation}
   */
  name?: string;
  /**
   * @member {OperationDisplay} [display] The object that describes the
   * operation.
   */
  display?: OperationDisplay;
}

/**
 * @interface
 * An interface representing CheckNameAvailabilityParameters.
 * Parameters body to pass for resource name availability check.
 *
 */
export interface CheckNameAvailabilityParameters {
  /**
   * @member {string} name Resource name.
   */
  name: string;
  /**
   * @member {string} type Resource type. The only legal value of this property
   * for checking redis cache name availability is 'Microsoft.Cache/redis'.
   */
  type: string;
}

/**
 * @interface
 * An interface representing UpgradeNotification.
 * Properties of upgrade notification.
 *
 */
export interface UpgradeNotification {
  /**
   * @member {string} [name] Name of upgrade notification.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {Date} [timestamp] Timestamp when upgrade notification occured.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly timestamp?: Date;
  /**
   * @member {{ [propertyName: string]: string }} [upsellNotification] Details
   * about this upgrade notification
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly upsellNotification?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing NotificationListResponse.
 * The response of listUpgradeNotifications.
 *
 */
export interface NotificationListResponse {
  /**
   * @member {UpgradeNotification[]} [value] List of all notifications.
   */
  value?: UpgradeNotification[];
  /**
   * @member {string} [nextLink] Link for next set of notifications.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing RedisManagementClientOptions.
 * @extends AzureServiceClientOptions
 */
export interface RedisManagementClientOptions extends AzureServiceClientOptions {
  /**
   * @member {string} [baseUri]
   */
  baseUri?: string;
}


/**
 * @interface
 * An interface representing the OperationListResult.
 * Result of the request to list REST API operations. It contains a list of
 * operations and a URL nextLink to get the next set of results.
 *
 * @extends Array<Operation>
 */
export interface OperationListResult extends Array<Operation> {
  /**
   * @member {string} [nextLink] URL to get the next set of operation list
   * results if there are any.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the RedisListResult.
 * The response of list Redis operation.
 *
 * @extends Array<RedisResource>
 */
export interface RedisListResult extends Array<RedisResource> {
  /**
   * @member {string} [nextLink] Link for next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the RedisFirewallRuleListResult.
 * The response of list firewall rules Redis operation.
 *
 * @extends Array<RedisFirewallRule>
 */
export interface RedisFirewallRuleListResult extends Array<RedisFirewallRule> {
  /**
   * @member {string} [nextLink] Link for next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the RedisPatchScheduleListResult.
 * The response of list patch schedules Redis operation.
 *
 * @extends Array<RedisPatchSchedule>
 */
export interface RedisPatchScheduleListResult extends Array<RedisPatchSchedule> {
  /**
   * @member {string} [nextLink] Link for next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the RedisLinkedServerWithPropertiesList.
 * List of linked servers (with properites) of a Redis cache.
 *
 * @extends Array<RedisLinkedServerWithProperties>
 */
export interface RedisLinkedServerWithPropertiesList extends Array<RedisLinkedServerWithProperties> {
  /**
   * @member {string} [nextLink] Link for next set.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * Defines values for SkuName.
 * Possible values include: 'Basic', 'Standard', 'Premium'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SkuName = <SkuName>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SkuName {
  Basic = 'Basic',
  Standard = 'Standard',
  Premium = 'Premium',
}

/**
 * Defines values for SkuFamily.
 * Possible values include: 'C', 'P'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SkuFamily = <SkuFamily>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SkuFamily {
  C = 'C',
  P = 'P',
}

/**
 * Defines values for TlsVersion.
 * Possible values include: '1.0', '1.1', '1.2'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: TlsVersion = <TlsVersion>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum TlsVersion {
  OneFullStopZero = '1.0',
  OneFullStopOne = '1.1',
  OneFullStopTwo = '1.2',
}

/**
 * Defines values for ProvisioningState.
 * Possible values include: 'Creating', 'Deleting', 'Disabled', 'Failed',
 * 'Linking', 'Provisioning', 'RecoveringScaleFailure', 'Scaling', 'Succeeded',
 * 'Unlinking', 'Unprovisioning', 'Updating'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ProvisioningState =
 * <ProvisioningState>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum ProvisioningState {
  Creating = 'Creating',
  Deleting = 'Deleting',
  Disabled = 'Disabled',
  Failed = 'Failed',
  Linking = 'Linking',
  Provisioning = 'Provisioning',
  RecoveringScaleFailure = 'RecoveringScaleFailure',
  Scaling = 'Scaling',
  Succeeded = 'Succeeded',
  Unlinking = 'Unlinking',
  Unprovisioning = 'Unprovisioning',
  Updating = 'Updating',
}

/**
 * Defines values for RedisKeyType.
 * Possible values include: 'Primary', 'Secondary'
 * @readonly
 * @enum {string}
 */
export enum RedisKeyType {
  Primary = 'Primary',
  Secondary = 'Secondary',
}

/**
 * Defines values for RebootType.
 * Possible values include: 'PrimaryNode', 'SecondaryNode', 'AllNodes'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: RebootType = <RebootType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum RebootType {
  PrimaryNode = 'PrimaryNode',
  SecondaryNode = 'SecondaryNode',
  AllNodes = 'AllNodes',
}

/**
 * Defines values for DayOfWeek.
 * Possible values include: 'Monday', 'Tuesday', 'Wednesday', 'Thursday',
 * 'Friday', 'Saturday', 'Sunday', 'Everyday', 'Weekend'
 * @readonly
 * @enum {string}
 */
export enum DayOfWeek {
  Monday = 'Monday',
  Tuesday = 'Tuesday',
  Wednesday = 'Wednesday',
  Thursday = 'Thursday',
  Friday = 'Friday',
  Saturday = 'Saturday',
  Sunday = 'Sunday',
  Everyday = 'Everyday',
  Weekend = 'Weekend',
}

/**
 * Defines values for ReplicationRole.
 * Possible values include: 'Primary', 'Secondary'
 * @readonly
 * @enum {string}
 */
export enum ReplicationRole {
  Primary = 'Primary',
  Secondary = 'Secondary',
}

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the listUpgradeNotifications operation.
 */
export type RedisListUpgradeNotificationsResponse = NotificationListResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NotificationListResponse;
    };
};

/**
 * Contains response data for the create operation.
 */
export type RedisCreateResponse = RedisResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RedisResource;
    };
};

/**
 * Contains response data for the update operation.
 */
export type RedisUpdateResponse = RedisResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RedisResource;
    };
};

/**
 * Contains response data for the get operation.
 */
export type RedisGetResponse = RedisResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RedisResource;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type RedisListByResourceGroupResponse = RedisListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RedisListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type RedisListResponse = RedisListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RedisListResult;
    };
};

/**
 * Contains response data for the listKeys operation.
 */
export type RedisListKeysResponse = RedisAccessKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RedisAccessKeys;
    };
};

/**
 * Contains response data for the regenerateKey operation.
 */
export type RedisRegenerateKeyResponse = RedisAccessKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RedisAccessKeys;
    };
};

/**
 * Contains response data for the forceReboot operation.
 */
export type RedisForceRebootResponse2 = RedisForceRebootResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RedisForceRebootResponse;
    };
};

/**
 * Contains response data for the beginCreate operation.
 */
export type RedisBeginCreateResponse = RedisResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RedisResource;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type RedisListByResourceGroupNextResponse = RedisListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RedisListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type RedisListNextResponse = RedisListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RedisListResult;
    };
};

/**
 * Contains response data for the listByRedisResource operation.
 */
export type FirewallRulesListByRedisResourceResponse = RedisFirewallRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RedisFirewallRuleListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type FirewallRulesCreateOrUpdateResponse = RedisFirewallRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RedisFirewallRule;
    };
};

/**
 * Contains response data for the get operation.
 */
export type FirewallRulesGetResponse = RedisFirewallRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RedisFirewallRule;
    };
};

/**
 * Contains response data for the listByRedisResourceNext operation.
 */
export type FirewallRulesListByRedisResourceNextResponse = RedisFirewallRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RedisFirewallRuleListResult;
    };
};

/**
 * Contains response data for the listByRedisResource operation.
 */
export type PatchSchedulesListByRedisResourceResponse = RedisPatchScheduleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RedisPatchScheduleListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PatchSchedulesCreateOrUpdateResponse = RedisPatchSchedule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RedisPatchSchedule;
    };
};

/**
 * Contains response data for the get operation.
 */
export type PatchSchedulesGetResponse = RedisPatchSchedule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RedisPatchSchedule;
    };
};

/**
 * Contains response data for the listByRedisResourceNext operation.
 */
export type PatchSchedulesListByRedisResourceNextResponse = RedisPatchScheduleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RedisPatchScheduleListResult;
    };
};

/**
 * Contains response data for the create operation.
 */
export type LinkedServerCreateResponse = RedisLinkedServerWithProperties & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RedisLinkedServerWithProperties;
    };
};

/**
 * Contains response data for the get operation.
 */
export type LinkedServerGetResponse = RedisLinkedServerWithProperties & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RedisLinkedServerWithProperties;
    };
};

/**
 * Contains response data for the list operation.
 */
export type LinkedServerListResponse = RedisLinkedServerWithPropertiesList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RedisLinkedServerWithPropertiesList;
    };
};

/**
 * Contains response data for the beginCreate operation.
 */
export type LinkedServerBeginCreateResponse = RedisLinkedServerWithProperties & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RedisLinkedServerWithProperties;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type LinkedServerListNextResponse = RedisLinkedServerWithPropertiesList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RedisLinkedServerWithPropertiesList;
    };
};
