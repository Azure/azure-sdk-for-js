/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/replicationProtectedItemsMappers";
import * as Parameters from "../models/parameters";
import { SiteRecoveryManagementClientContext } from "../siteRecoveryManagementClientContext";

/** Class representing a ReplicationProtectedItems. */
export class ReplicationProtectedItems {
  private readonly client: SiteRecoveryManagementClientContext;

  /**
   * Create a ReplicationProtectedItems.
   * @param {SiteRecoveryManagementClientContext} client Reference to the service client.
   */
  constructor(client: SiteRecoveryManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets the list of ASR replication protected items in the protection container.
   * @summary Gets the list of Replication protected items.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicationProtectedItemsListByReplicationProtectionContainersResponse>
   */
  listByReplicationProtectionContainers(fabricName: string, protectionContainerName: string, options?: msRest.RequestOptionsBase): Promise<Models.ReplicationProtectedItemsListByReplicationProtectionContainersResponse>;
  /**
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param callback The callback
   */
  listByReplicationProtectionContainers(fabricName: string, protectionContainerName: string, callback: msRest.ServiceCallback<Models.ReplicationProtectedItemCollection>): void;
  /**
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByReplicationProtectionContainers(fabricName: string, protectionContainerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ReplicationProtectedItemCollection>): void;
  listByReplicationProtectionContainers(fabricName: string, protectionContainerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ReplicationProtectedItemCollection>, callback?: msRest.ServiceCallback<Models.ReplicationProtectedItemCollection>): Promise<Models.ReplicationProtectedItemsListByReplicationProtectionContainersResponse> {
    return this.client.sendOperationRequest(
      {
        fabricName,
        protectionContainerName,
        options
      },
      listByReplicationProtectionContainersOperationSpec,
      callback) as Promise<Models.ReplicationProtectedItemsListByReplicationProtectionContainersResponse>;
  }

  /**
   * Gets the details of an ASR replication protected item.
   * @summary Gets the details of a Replication protected item.
   * @param fabricName Fabric unique name.
   * @param protectionContainerName Protection container name.
   * @param replicatedProtectedItemName Replication protected item name.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicationProtectedItemsGetResponse>
   */
  get(fabricName: string, protectionContainerName: string, replicatedProtectedItemName: string, options?: msRest.RequestOptionsBase): Promise<Models.ReplicationProtectedItemsGetResponse>;
  /**
   * @param fabricName Fabric unique name.
   * @param protectionContainerName Protection container name.
   * @param replicatedProtectedItemName Replication protected item name.
   * @param callback The callback
   */
  get(fabricName: string, protectionContainerName: string, replicatedProtectedItemName: string, callback: msRest.ServiceCallback<Models.ReplicationProtectedItem>): void;
  /**
   * @param fabricName Fabric unique name.
   * @param protectionContainerName Protection container name.
   * @param replicatedProtectedItemName Replication protected item name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(fabricName: string, protectionContainerName: string, replicatedProtectedItemName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ReplicationProtectedItem>): void;
  get(fabricName: string, protectionContainerName: string, replicatedProtectedItemName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ReplicationProtectedItem>, callback?: msRest.ServiceCallback<Models.ReplicationProtectedItem>): Promise<Models.ReplicationProtectedItemsGetResponse> {
    return this.client.sendOperationRequest(
      {
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ReplicationProtectedItemsGetResponse>;
  }

  /**
   * The operation to create an ASR replication protected item (Enable replication).
   * @summary Enables protection.
   * @param fabricName Name of the fabric.
   * @param protectionContainerName Protection container name.
   * @param replicatedProtectedItemName A name for the replication protected item.
   * @param input Enable Protection Input.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicationProtectedItemsCreateResponse>
   */
  create(fabricName: string, protectionContainerName: string, replicatedProtectedItemName: string, input: Models.EnableProtectionInput, options?: msRest.RequestOptionsBase): Promise<Models.ReplicationProtectedItemsCreateResponse> {
    return this.beginCreate(fabricName,protectionContainerName,replicatedProtectedItemName,input,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ReplicationProtectedItemsCreateResponse>;
  }

  /**
   * The operation to delete or purge a replication protected item. This operation will force delete
   * the replication protected item. Use the remove operation on replication protected item to
   * perform a clean disable replication for the item.
   * @summary Purges protection.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param replicatedProtectedItemName Replication protected item name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  purge(fabricName: string, protectionContainerName: string, replicatedProtectedItemName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginPurge(fabricName,protectionContainerName,replicatedProtectedItemName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * The operation to update the recovery settings of an ASR replication protected item.
   * @summary Updates protection.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param replicatedProtectedItemName Replication protected item name.
   * @param updateProtectionInput Update protection input.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicationProtectedItemsUpdateResponse>
   */
  update(fabricName: string, protectionContainerName: string, replicatedProtectedItemName: string, updateProtectionInput: Models.UpdateReplicationProtectedItemInput, options?: msRest.RequestOptionsBase): Promise<Models.ReplicationProtectedItemsUpdateResponse> {
    return this.beginUpdate(fabricName,protectionContainerName,replicatedProtectedItemName,updateProtectionInput,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ReplicationProtectedItemsUpdateResponse>;
  }

  /**
   * The operation to change the recovery point of a failed over replication protected item.
   * @summary Change or apply recovery point.
   * @param fabricName The ARM fabric name.
   * @param protectionContainerName The protection container name.
   * @param replicatedProtectedItemName The replicated protected item's name.
   * @param applyRecoveryPointInput The ApplyRecoveryPointInput.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicationProtectedItemsApplyRecoveryPointResponse>
   */
  applyRecoveryPoint(fabricName: string, protectionContainerName: string, replicatedProtectedItemName: string, applyRecoveryPointInput: Models.ApplyRecoveryPointInput, options?: msRest.RequestOptionsBase): Promise<Models.ReplicationProtectedItemsApplyRecoveryPointResponse> {
    return this.beginApplyRecoveryPoint(fabricName,protectionContainerName,replicatedProtectedItemName,applyRecoveryPointInput,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ReplicationProtectedItemsApplyRecoveryPointResponse>;
  }

  /**
   * Operation to commit the failover of the replication protected item.
   * @summary Execute commit failover
   * @param fabricName Unique fabric name.
   * @param protectionContainerName Protection container name.
   * @param replicatedProtectedItemName Replication protected item name.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicationProtectedItemsFailoverCommitResponse>
   */
  failoverCommit(fabricName: string, protectionContainerName: string, replicatedProtectedItemName: string, options?: msRest.RequestOptionsBase): Promise<Models.ReplicationProtectedItemsFailoverCommitResponse> {
    return this.beginFailoverCommit(fabricName,protectionContainerName,replicatedProtectedItemName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ReplicationProtectedItemsFailoverCommitResponse>;
  }

  /**
   * Operation to initiate a planned failover of the replication protected item.
   * @summary Execute planned failover
   * @param fabricName Unique fabric name.
   * @param protectionContainerName Protection container name.
   * @param replicatedProtectedItemName Replication protected item name.
   * @param failoverInput Disable protection input.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicationProtectedItemsPlannedFailoverResponse>
   */
  plannedFailover(fabricName: string, protectionContainerName: string, replicatedProtectedItemName: string, failoverInput: Models.PlannedFailoverInput, options?: msRest.RequestOptionsBase): Promise<Models.ReplicationProtectedItemsPlannedFailoverResponse> {
    return this.beginPlannedFailover(fabricName,protectionContainerName,replicatedProtectedItemName,failoverInput,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ReplicationProtectedItemsPlannedFailoverResponse>;
  }

  /**
   * The operation to disable replication on a replication protected item. This will also remove the
   * item.
   * @summary Disables protection.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param replicatedProtectedItemName Replication protected item name.
   * @param disableProtectionInput Disable protection input.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(fabricName: string, protectionContainerName: string, replicatedProtectedItemName: string, disableProtectionInput: Models.DisableProtectionInput, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(fabricName,protectionContainerName,replicatedProtectedItemName,disableProtectionInput,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * The operation to start resynchronize/repair replication for a replication protected item
   * requiring resynchronization.
   * @summary Resynchronize or repair replication.
   * @param fabricName The name of the fabric.
   * @param protectionContainerName The name of the container.
   * @param replicatedProtectedItemName The name of the replication protected item.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicationProtectedItemsRepairReplicationResponse>
   */
  repairReplication(fabricName: string, protectionContainerName: string, replicatedProtectedItemName: string, options?: msRest.RequestOptionsBase): Promise<Models.ReplicationProtectedItemsRepairReplicationResponse> {
    return this.beginRepairReplication(fabricName,protectionContainerName,replicatedProtectedItemName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ReplicationProtectedItemsRepairReplicationResponse>;
  }

  /**
   * Operation to reprotect or reverse replicate a failed over replication protected item.
   * @summary Execute Reverse Replication\Reprotect
   * @param fabricName Unique fabric name.
   * @param protectionContainerName Protection container name.
   * @param replicatedProtectedItemName Replication protected item name.
   * @param rrInput Disable protection input.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicationProtectedItemsReprotectResponse>
   */
  reprotect(fabricName: string, protectionContainerName: string, replicatedProtectedItemName: string, rrInput: Models.ReverseReplicationInput, options?: msRest.RequestOptionsBase): Promise<Models.ReplicationProtectedItemsReprotectResponse> {
    return this.beginReprotect(fabricName,protectionContainerName,replicatedProtectedItemName,rrInput,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ReplicationProtectedItemsReprotectResponse>;
  }

  /**
   * Operation to perform a test failover of the replication protected item.
   * @summary Execute test failover
   * @param fabricName Unique fabric name.
   * @param protectionContainerName Protection container name.
   * @param replicatedProtectedItemName Replication protected item name.
   * @param failoverInput Test failover input.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicationProtectedItemsTestFailoverResponse>
   */
  testFailover(fabricName: string, protectionContainerName: string, replicatedProtectedItemName: string, failoverInput: Models.TestFailoverInput, options?: msRest.RequestOptionsBase): Promise<Models.ReplicationProtectedItemsTestFailoverResponse> {
    return this.beginTestFailover(fabricName,protectionContainerName,replicatedProtectedItemName,failoverInput,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ReplicationProtectedItemsTestFailoverResponse>;
  }

  /**
   * Operation to clean up the test failover of a replication protected item.
   * @summary Execute test failover cleanup.
   * @param fabricName Unique fabric name.
   * @param protectionContainerName Protection container name.
   * @param replicatedProtectedItemName Replication protected item name.
   * @param cleanupInput Test failover cleanup input.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicationProtectedItemsTestFailoverCleanupResponse>
   */
  testFailoverCleanup(fabricName: string, protectionContainerName: string, replicatedProtectedItemName: string, cleanupInput: Models.TestFailoverCleanupInput, options?: msRest.RequestOptionsBase): Promise<Models.ReplicationProtectedItemsTestFailoverCleanupResponse> {
    return this.beginTestFailoverCleanup(fabricName,protectionContainerName,replicatedProtectedItemName,cleanupInput,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ReplicationProtectedItemsTestFailoverCleanupResponse>;
  }

  /**
   * Operation to initiate a failover of the replication protected item.
   * @summary Execute unplanned failover
   * @param fabricName Unique fabric name.
   * @param protectionContainerName Protection container name.
   * @param replicatedProtectedItemName Replication protected item name.
   * @param failoverInput Disable protection input.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicationProtectedItemsUnplannedFailoverResponse>
   */
  unplannedFailover(fabricName: string, protectionContainerName: string, replicatedProtectedItemName: string, failoverInput: Models.UnplannedFailoverInput, options?: msRest.RequestOptionsBase): Promise<Models.ReplicationProtectedItemsUnplannedFailoverResponse> {
    return this.beginUnplannedFailover(fabricName,protectionContainerName,replicatedProtectedItemName,failoverInput,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ReplicationProtectedItemsUnplannedFailoverResponse>;
  }

  /**
   * The operation to update(push update) the installed mobility service software on a replication
   * protected item to the latest available version.
   * @summary Update the mobility service on a protected item.
   * @param fabricName The name of the fabric containing the protected item.
   * @param protectionContainerName The name of the container containing the protected item.
   * @param replicationProtectedItemName The name of the protected item on which the agent is to be
   * updated.
   * @param updateMobilityServiceRequest Request to update the mobility service on the protected
   * item.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicationProtectedItemsUpdateMobilityServiceResponse>
   */
  updateMobilityService(fabricName: string, protectionContainerName: string, replicationProtectedItemName: string, updateMobilityServiceRequest: Models.UpdateMobilityServiceRequest, options?: msRest.RequestOptionsBase): Promise<Models.ReplicationProtectedItemsUpdateMobilityServiceResponse> {
    return this.beginUpdateMobilityService(fabricName,protectionContainerName,replicationProtectedItemName,updateMobilityServiceRequest,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ReplicationProtectedItemsUpdateMobilityServiceResponse>;
  }

  /**
   * Gets the list of ASR replication protected items in the vault.
   * @summary Gets the list of replication protected items.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicationProtectedItemsListResponse>
   */
  list(options?: Models.ReplicationProtectedItemsListOptionalParams): Promise<Models.ReplicationProtectedItemsListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.ReplicationProtectedItemCollection>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: Models.ReplicationProtectedItemsListOptionalParams, callback: msRest.ServiceCallback<Models.ReplicationProtectedItemCollection>): void;
  list(options?: Models.ReplicationProtectedItemsListOptionalParams | msRest.ServiceCallback<Models.ReplicationProtectedItemCollection>, callback?: msRest.ServiceCallback<Models.ReplicationProtectedItemCollection>): Promise<Models.ReplicationProtectedItemsListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.ReplicationProtectedItemsListResponse>;
  }

  /**
   * The operation to create an ASR replication protected item (Enable replication).
   * @summary Enables protection.
   * @param fabricName Name of the fabric.
   * @param protectionContainerName Protection container name.
   * @param replicatedProtectedItemName A name for the replication protected item.
   * @param input Enable Protection Input.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreate(fabricName: string, protectionContainerName: string, replicatedProtectedItemName: string, input: Models.EnableProtectionInput, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
        input,
        options
      },
      beginCreateOperationSpec,
      options);
  }

  /**
   * The operation to delete or purge a replication protected item. This operation will force delete
   * the replication protected item. Use the remove operation on replication protected item to
   * perform a clean disable replication for the item.
   * @summary Purges protection.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param replicatedProtectedItemName Replication protected item name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPurge(fabricName: string, protectionContainerName: string, replicatedProtectedItemName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
        options
      },
      beginPurgeOperationSpec,
      options);
  }

  /**
   * The operation to update the recovery settings of an ASR replication protected item.
   * @summary Updates protection.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param replicatedProtectedItemName Replication protected item name.
   * @param updateProtectionInput Update protection input.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(fabricName: string, protectionContainerName: string, replicatedProtectedItemName: string, updateProtectionInput: Models.UpdateReplicationProtectedItemInput, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
        updateProtectionInput,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * The operation to change the recovery point of a failed over replication protected item.
   * @summary Change or apply recovery point.
   * @param fabricName The ARM fabric name.
   * @param protectionContainerName The protection container name.
   * @param replicatedProtectedItemName The replicated protected item's name.
   * @param applyRecoveryPointInput The ApplyRecoveryPointInput.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginApplyRecoveryPoint(fabricName: string, protectionContainerName: string, replicatedProtectedItemName: string, applyRecoveryPointInput: Models.ApplyRecoveryPointInput, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
        applyRecoveryPointInput,
        options
      },
      beginApplyRecoveryPointOperationSpec,
      options);
  }

  /**
   * Operation to commit the failover of the replication protected item.
   * @summary Execute commit failover
   * @param fabricName Unique fabric name.
   * @param protectionContainerName Protection container name.
   * @param replicatedProtectedItemName Replication protected item name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginFailoverCommit(fabricName: string, protectionContainerName: string, replicatedProtectedItemName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
        options
      },
      beginFailoverCommitOperationSpec,
      options);
  }

  /**
   * Operation to initiate a planned failover of the replication protected item.
   * @summary Execute planned failover
   * @param fabricName Unique fabric name.
   * @param protectionContainerName Protection container name.
   * @param replicatedProtectedItemName Replication protected item name.
   * @param failoverInput Disable protection input.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPlannedFailover(fabricName: string, protectionContainerName: string, replicatedProtectedItemName: string, failoverInput: Models.PlannedFailoverInput, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
        failoverInput,
        options
      },
      beginPlannedFailoverOperationSpec,
      options);
  }

  /**
   * The operation to disable replication on a replication protected item. This will also remove the
   * item.
   * @summary Disables protection.
   * @param fabricName Fabric name.
   * @param protectionContainerName Protection container name.
   * @param replicatedProtectedItemName Replication protected item name.
   * @param disableProtectionInput Disable protection input.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(fabricName: string, protectionContainerName: string, replicatedProtectedItemName: string, disableProtectionInput: Models.DisableProtectionInput, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
        disableProtectionInput,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * The operation to start resynchronize/repair replication for a replication protected item
   * requiring resynchronization.
   * @summary Resynchronize or repair replication.
   * @param fabricName The name of the fabric.
   * @param protectionContainerName The name of the container.
   * @param replicatedProtectedItemName The name of the replication protected item.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginRepairReplication(fabricName: string, protectionContainerName: string, replicatedProtectedItemName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
        options
      },
      beginRepairReplicationOperationSpec,
      options);
  }

  /**
   * Operation to reprotect or reverse replicate a failed over replication protected item.
   * @summary Execute Reverse Replication\Reprotect
   * @param fabricName Unique fabric name.
   * @param protectionContainerName Protection container name.
   * @param replicatedProtectedItemName Replication protected item name.
   * @param rrInput Disable protection input.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginReprotect(fabricName: string, protectionContainerName: string, replicatedProtectedItemName: string, rrInput: Models.ReverseReplicationInput, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
        rrInput,
        options
      },
      beginReprotectOperationSpec,
      options);
  }

  /**
   * Operation to perform a test failover of the replication protected item.
   * @summary Execute test failover
   * @param fabricName Unique fabric name.
   * @param protectionContainerName Protection container name.
   * @param replicatedProtectedItemName Replication protected item name.
   * @param failoverInput Test failover input.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginTestFailover(fabricName: string, protectionContainerName: string, replicatedProtectedItemName: string, failoverInput: Models.TestFailoverInput, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
        failoverInput,
        options
      },
      beginTestFailoverOperationSpec,
      options);
  }

  /**
   * Operation to clean up the test failover of a replication protected item.
   * @summary Execute test failover cleanup.
   * @param fabricName Unique fabric name.
   * @param protectionContainerName Protection container name.
   * @param replicatedProtectedItemName Replication protected item name.
   * @param cleanupInput Test failover cleanup input.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginTestFailoverCleanup(fabricName: string, protectionContainerName: string, replicatedProtectedItemName: string, cleanupInput: Models.TestFailoverCleanupInput, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
        cleanupInput,
        options
      },
      beginTestFailoverCleanupOperationSpec,
      options);
  }

  /**
   * Operation to initiate a failover of the replication protected item.
   * @summary Execute unplanned failover
   * @param fabricName Unique fabric name.
   * @param protectionContainerName Protection container name.
   * @param replicatedProtectedItemName Replication protected item name.
   * @param failoverInput Disable protection input.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUnplannedFailover(fabricName: string, protectionContainerName: string, replicatedProtectedItemName: string, failoverInput: Models.UnplannedFailoverInput, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
        failoverInput,
        options
      },
      beginUnplannedFailoverOperationSpec,
      options);
  }

  /**
   * The operation to update(push update) the installed mobility service software on a replication
   * protected item to the latest available version.
   * @summary Update the mobility service on a protected item.
   * @param fabricName The name of the fabric containing the protected item.
   * @param protectionContainerName The name of the container containing the protected item.
   * @param replicationProtectedItemName The name of the protected item on which the agent is to be
   * updated.
   * @param updateMobilityServiceRequest Request to update the mobility service on the protected
   * item.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdateMobilityService(fabricName: string, protectionContainerName: string, replicationProtectedItemName: string, updateMobilityServiceRequest: Models.UpdateMobilityServiceRequest, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        fabricName,
        protectionContainerName,
        replicationProtectedItemName,
        updateMobilityServiceRequest,
        options
      },
      beginUpdateMobilityServiceOperationSpec,
      options);
  }

  /**
   * Gets the list of ASR replication protected items in the protection container.
   * @summary Gets the list of Replication protected items.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.ReplicationProtectedItemsListByReplicationProtectionContainersNextResponse>
   */
  listByReplicationProtectionContainersNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ReplicationProtectedItemsListByReplicationProtectionContainersNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByReplicationProtectionContainersNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ReplicationProtectedItemCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByReplicationProtectionContainersNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ReplicationProtectedItemCollection>): void;
  listByReplicationProtectionContainersNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ReplicationProtectedItemCollection>, callback?: msRest.ServiceCallback<Models.ReplicationProtectedItemCollection>): Promise<Models.ReplicationProtectedItemsListByReplicationProtectionContainersNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByReplicationProtectionContainersNextOperationSpec,
      callback) as Promise<Models.ReplicationProtectedItemsListByReplicationProtectionContainersNextResponse>;
  }

  /**
   * Gets the list of ASR replication protected items in the vault.
   * @summary Gets the list of replication protected items.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicationProtectedItemsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ReplicationProtectedItemsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ReplicationProtectedItemCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ReplicationProtectedItemCollection>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ReplicationProtectedItemCollection>, callback?: msRest.ServiceCallback<Models.ReplicationProtectedItemCollection>): Promise<Models.ReplicationProtectedItemsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.ReplicationProtectedItemsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByReplicationProtectionContainersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems",
  urlParameters: [
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.fabricName,
    Parameters.protectionContainerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectedItemCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}",
  urlParameters: [
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.replicatedProtectedItemName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationProtectedItems",
  urlParameters: [
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skipToken,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectedItemCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}",
  urlParameters: [
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.replicatedProtectedItemName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "input",
    mapper: {
      ...Mappers.EnableProtectionInput,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginPurgeOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}",
  urlParameters: [
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.replicatedProtectedItemName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}",
  urlParameters: [
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.replicatedProtectedItemName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "updateProtectionInput",
    mapper: {
      ...Mappers.UpdateReplicationProtectedItemInput,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginApplyRecoveryPointOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/applyRecoveryPoint",
  urlParameters: [
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.replicatedProtectedItemName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "applyRecoveryPointInput",
    mapper: {
      ...Mappers.ApplyRecoveryPointInput,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginFailoverCommitOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/failoverCommit",
  urlParameters: [
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.replicatedProtectedItemName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginPlannedFailoverOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/plannedFailover",
  urlParameters: [
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.replicatedProtectedItemName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "failoverInput",
    mapper: {
      ...Mappers.PlannedFailoverInput,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/remove",
  urlParameters: [
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.replicatedProtectedItemName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "disableProtectionInput",
    mapper: {
      ...Mappers.DisableProtectionInput,
      required: true
    }
  },
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginRepairReplicationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/repairReplication",
  urlParameters: [
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.replicatedProtectedItemName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginReprotectOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/reProtect",
  urlParameters: [
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.replicatedProtectedItemName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "rrInput",
    mapper: {
      ...Mappers.ReverseReplicationInput,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginTestFailoverOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/testFailover",
  urlParameters: [
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.replicatedProtectedItemName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "failoverInput",
    mapper: {
      ...Mappers.TestFailoverInput,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginTestFailoverCleanupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/testFailoverCleanup",
  urlParameters: [
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.replicatedProtectedItemName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "cleanupInput",
    mapper: {
      ...Mappers.TestFailoverCleanupInput,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUnplannedFailoverOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/unplannedFailover",
  urlParameters: [
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.replicatedProtectedItemName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "failoverInput",
    mapper: {
      ...Mappers.UnplannedFailoverInput,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdateMobilityServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicationProtectedItemName}/updateMobilityService",
  urlParameters: [
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.fabricName,
    Parameters.protectionContainerName,
    Parameters.replicationProtectedItemName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "updateMobilityServiceRequest",
    mapper: {
      ...Mappers.UpdateMobilityServiceRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectedItem
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByReplicationProtectionContainersNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectedItemCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationProtectedItemCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
