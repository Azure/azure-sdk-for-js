/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/replicationFabricsMappers";
import * as Parameters from "../models/parameters";
import { SiteRecoveryManagementClientContext } from "../siteRecoveryManagementClientContext";

/** Class representing a ReplicationFabrics. */
export class ReplicationFabrics {
  private readonly client: SiteRecoveryManagementClientContext;

  /**
   * Create a ReplicationFabrics.
   * @param {SiteRecoveryManagementClientContext} client Reference to the service client.
   */
  constructor(client: SiteRecoveryManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets a list of the Azure Site Recovery fabrics in the vault.
   * @summary Gets the list of ASR fabrics
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicationFabricsListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.ReplicationFabricsListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.FabricCollection>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FabricCollection>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FabricCollection>, callback?: msRest.ServiceCallback<Models.FabricCollection>): Promise<Models.ReplicationFabricsListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.ReplicationFabricsListResponse>;
  }

  /**
   * Gets the details of an Azure Site Recovery fabric.
   * @summary Gets the details of an ASR fabric.
   * @param fabricName Fabric name.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicationFabricsGetResponse>
   */
  get(fabricName: string, options?: msRest.RequestOptionsBase): Promise<Models.ReplicationFabricsGetResponse>;
  /**
   * @param fabricName Fabric name.
   * @param callback The callback
   */
  get(fabricName: string, callback: msRest.ServiceCallback<Models.Fabric>): void;
  /**
   * @param fabricName Fabric name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(fabricName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Fabric>): void;
  get(fabricName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Fabric>, callback?: msRest.ServiceCallback<Models.Fabric>): Promise<Models.ReplicationFabricsGetResponse> {
    return this.client.sendOperationRequest(
      {
        fabricName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ReplicationFabricsGetResponse>;
  }

  /**
   * The operation to create an Azure Site Recovery fabric (for e.g. Hyper-V site)
   * @summary Creates an Azure Site Recovery fabric.
   * @param fabricName Name of the ASR fabric.
   * @param input Fabric creation input.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicationFabricsCreateResponse>
   */
  create(fabricName: string, input: Models.FabricCreationInput, options?: msRest.RequestOptionsBase): Promise<Models.ReplicationFabricsCreateResponse> {
    return this.beginCreate(fabricName,input,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ReplicationFabricsCreateResponse>;
  }

  /**
   * The operation to purge(force delete) an Azure Site Recovery fabric.
   * @summary Purges the site.
   * @param fabricName ASR fabric to purge.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  purge(fabricName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginPurge(fabricName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * The operation to perform a consistency check on the fabric.
   * @summary Checks the consistency of the ASR fabric.
   * @param fabricName Fabric name.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicationFabricsCheckConsistencyResponse>
   */
  checkConsistency(fabricName: string, options?: msRest.RequestOptionsBase): Promise<Models.ReplicationFabricsCheckConsistencyResponse> {
    return this.beginCheckConsistency(fabricName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ReplicationFabricsCheckConsistencyResponse>;
  }

  /**
   * The operation to migrate an Azure Site Recovery fabric to AAD.
   * @summary Migrates the site to AAD.
   * @param fabricName ASR fabric to migrate.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  migrateToAad(fabricName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginMigrateToAad(fabricName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * The operation to move replications from a process server to another process server.
   * @summary Perform failover of the process server.
   * @param fabricName The name of the fabric containing the process server.
   * @param failoverProcessServerRequest The input to the failover process server operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicationFabricsReassociateGatewayResponse>
   */
  reassociateGateway(fabricName: string, failoverProcessServerRequest: Models.FailoverProcessServerRequest, options?: msRest.RequestOptionsBase): Promise<Models.ReplicationFabricsReassociateGatewayResponse> {
    return this.beginReassociateGateway(fabricName,failoverProcessServerRequest,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ReplicationFabricsReassociateGatewayResponse>;
  }

  /**
   * The operation to delete or remove an Azure Site Recovery fabric.
   * @summary Deletes the site.
   * @param fabricName ASR fabric to delete
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(fabricName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(fabricName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Renews the connection certificate for the ASR replication fabric.
   * @summary Renews certificate for the fabric.
   * @param fabricName fabric name to renew certs for.
   * @param renewCertificateParameter Renew certificate input.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicationFabricsRenewCertificateResponse>
   */
  renewCertificate(fabricName: string, renewCertificateParameter: Models.RenewCertificateInput, options?: msRest.RequestOptionsBase): Promise<Models.ReplicationFabricsRenewCertificateResponse> {
    return this.beginRenewCertificate(fabricName,renewCertificateParameter,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ReplicationFabricsRenewCertificateResponse>;
  }

  /**
   * The operation to create an Azure Site Recovery fabric (for e.g. Hyper-V site)
   * @summary Creates an Azure Site Recovery fabric.
   * @param fabricName Name of the ASR fabric.
   * @param input Fabric creation input.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreate(fabricName: string, input: Models.FabricCreationInput, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        fabricName,
        input,
        options
      },
      beginCreateOperationSpec,
      options);
  }

  /**
   * The operation to purge(force delete) an Azure Site Recovery fabric.
   * @summary Purges the site.
   * @param fabricName ASR fabric to purge.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPurge(fabricName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        fabricName,
        options
      },
      beginPurgeOperationSpec,
      options);
  }

  /**
   * The operation to perform a consistency check on the fabric.
   * @summary Checks the consistency of the ASR fabric.
   * @param fabricName Fabric name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCheckConsistency(fabricName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        fabricName,
        options
      },
      beginCheckConsistencyOperationSpec,
      options);
  }

  /**
   * The operation to migrate an Azure Site Recovery fabric to AAD.
   * @summary Migrates the site to AAD.
   * @param fabricName ASR fabric to migrate.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginMigrateToAad(fabricName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        fabricName,
        options
      },
      beginMigrateToAadOperationSpec,
      options);
  }

  /**
   * The operation to move replications from a process server to another process server.
   * @summary Perform failover of the process server.
   * @param fabricName The name of the fabric containing the process server.
   * @param failoverProcessServerRequest The input to the failover process server operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginReassociateGateway(fabricName: string, failoverProcessServerRequest: Models.FailoverProcessServerRequest, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        fabricName,
        failoverProcessServerRequest,
        options
      },
      beginReassociateGatewayOperationSpec,
      options);
  }

  /**
   * The operation to delete or remove an Azure Site Recovery fabric.
   * @summary Deletes the site.
   * @param fabricName ASR fabric to delete
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(fabricName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        fabricName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Renews the connection certificate for the ASR replication fabric.
   * @summary Renews certificate for the fabric.
   * @param fabricName fabric name to renew certs for.
   * @param renewCertificateParameter Renew certificate input.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginRenewCertificate(fabricName: string, renewCertificateParameter: Models.RenewCertificateInput, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        fabricName,
        renewCertificateParameter,
        options
      },
      beginRenewCertificateOperationSpec,
      options);
  }

  /**
   * Gets a list of the Azure Site Recovery fabrics in the vault.
   * @summary Gets the list of ASR fabrics
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicationFabricsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ReplicationFabricsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.FabricCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FabricCollection>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FabricCollection>, callback?: msRest.ServiceCallback<Models.FabricCollection>): Promise<Models.ReplicationFabricsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.ReplicationFabricsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics",
  urlParameters: [
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FabricCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}",
  urlParameters: [
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.fabricName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Fabric
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}",
  urlParameters: [
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.fabricName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "input",
    mapper: {
      ...Mappers.FabricCreationInput,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Fabric
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginPurgeOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}",
  urlParameters: [
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.fabricName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCheckConsistencyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/checkConsistency",
  urlParameters: [
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.fabricName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Fabric
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginMigrateToAadOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/migratetoaad",
  urlParameters: [
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.fabricName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginReassociateGatewayOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/reassociateGateway",
  urlParameters: [
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.fabricName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "failoverProcessServerRequest",
    mapper: {
      ...Mappers.FailoverProcessServerRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Fabric
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/remove",
  urlParameters: [
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.fabricName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginRenewCertificateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/renewCertificate",
  urlParameters: [
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.fabricName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "renewCertificateParameter",
    mapper: {
      ...Mappers.RenewCertificateInput,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Fabric
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FabricCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
