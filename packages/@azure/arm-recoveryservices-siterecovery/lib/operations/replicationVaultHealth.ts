/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/replicationVaultHealthMappers";
import * as Parameters from "../models/parameters";
import { SiteRecoveryManagementClientContext } from "../siteRecoveryManagementClientContext";

/** Class representing a ReplicationVaultHealth. */
export class ReplicationVaultHealth {
  private readonly client: SiteRecoveryManagementClientContext;

  /**
   * Create a ReplicationVaultHealth.
   * @param {SiteRecoveryManagementClientContext} client Reference to the service client.
   */
  constructor(client: SiteRecoveryManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets the health details of the vault.
   * @summary Gets the health summary for the vault.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicationVaultHealthGetResponse>
   */
  get(options?: msRest.RequestOptionsBase): Promise<Models.ReplicationVaultHealthGetResponse>;
  /**
   * @param callback The callback
   */
  get(callback: msRest.ServiceCallback<Models.VaultHealthDetails>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VaultHealthDetails>): void;
  get(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VaultHealthDetails>, callback?: msRest.ServiceCallback<Models.VaultHealthDetails>): Promise<Models.ReplicationVaultHealthGetResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ReplicationVaultHealthGetResponse>;
  }

  /**
   * @summary Refreshes health summary of the vault.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicationVaultHealthRefreshResponse>
   */
  refresh(options?: msRest.RequestOptionsBase): Promise<Models.ReplicationVaultHealthRefreshResponse> {
    return this.beginRefresh(options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ReplicationVaultHealthRefreshResponse>;
  }

  /**
   * @summary Refreshes health summary of the vault.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginRefresh(options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        options
      },
      beginRefreshOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationVaultHealth",
  urlParameters: [
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VaultHealthDetails
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginRefreshOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationVaultHealth/default/refresh",
  urlParameters: [
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VaultHealthDetails
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
