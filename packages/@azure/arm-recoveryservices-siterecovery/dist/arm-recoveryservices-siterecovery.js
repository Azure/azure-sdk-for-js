/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmRecoveryservicesSiterecovery = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for AgentAutoUpdateStatus.
     * Possible values include: 'Disabled', 'Enabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: AgentAutoUpdateStatus =
     * <AgentAutoUpdateStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var AgentAutoUpdateStatus;
    (function (AgentAutoUpdateStatus) {
        AgentAutoUpdateStatus["Disabled"] = "Disabled";
        AgentAutoUpdateStatus["Enabled"] = "Enabled";
    })(AgentAutoUpdateStatus || (AgentAutoUpdateStatus = {}));
    /**
     * Defines values for SetMultiVmSyncStatus.
     * Possible values include: 'Enable', 'Disable'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SetMultiVmSyncStatus =
     * <SetMultiVmSyncStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SetMultiVmSyncStatus;
    (function (SetMultiVmSyncStatus) {
        SetMultiVmSyncStatus["Enable"] = "Enable";
        SetMultiVmSyncStatus["Disable"] = "Disable";
    })(SetMultiVmSyncStatus || (SetMultiVmSyncStatus = {}));
    /**
     * Defines values for RecoveryPointSyncType.
     * Possible values include: 'MultiVmSyncRecoveryPoint', 'PerVmRecoveryPoint'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: RecoveryPointSyncType =
     * <RecoveryPointSyncType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var RecoveryPointSyncType;
    (function (RecoveryPointSyncType) {
        RecoveryPointSyncType["MultiVmSyncRecoveryPoint"] = "MultiVmSyncRecoveryPoint";
        RecoveryPointSyncType["PerVmRecoveryPoint"] = "PerVmRecoveryPoint";
    })(RecoveryPointSyncType || (RecoveryPointSyncType = {}));
    /**
     * Defines values for MultiVmGroupCreateOption.
     * Possible values include: 'AutoCreated', 'UserSpecified'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: MultiVmGroupCreateOption =
     * <MultiVmGroupCreateOption>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var MultiVmGroupCreateOption;
    (function (MultiVmGroupCreateOption) {
        MultiVmGroupCreateOption["AutoCreated"] = "AutoCreated";
        MultiVmGroupCreateOption["UserSpecified"] = "UserSpecified";
    })(MultiVmGroupCreateOption || (MultiVmGroupCreateOption = {}));
    /**
     * Defines values for FailoverDeploymentModel.
     * Possible values include: 'NotApplicable', 'Classic', 'ResourceManager'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: FailoverDeploymentModel =
     * <FailoverDeploymentModel>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var FailoverDeploymentModel;
    (function (FailoverDeploymentModel) {
        FailoverDeploymentModel["NotApplicable"] = "NotApplicable";
        FailoverDeploymentModel["Classic"] = "Classic";
        FailoverDeploymentModel["ResourceManager"] = "ResourceManager";
    })(FailoverDeploymentModel || (FailoverDeploymentModel = {}));
    /**
     * Defines values for RecoveryPlanGroupType.
     * Possible values include: 'Shutdown', 'Boot', 'Failover'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: RecoveryPlanGroupType =
     * <RecoveryPlanGroupType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var RecoveryPlanGroupType;
    (function (RecoveryPlanGroupType) {
        RecoveryPlanGroupType["Shutdown"] = "Shutdown";
        RecoveryPlanGroupType["Boot"] = "Boot";
        RecoveryPlanGroupType["Failover"] = "Failover";
    })(RecoveryPlanGroupType || (RecoveryPlanGroupType = {}));
    /**
     * Defines values for ReplicationProtectedItemOperation.
     * Possible values include: 'ReverseReplicate', 'Commit', 'PlannedFailover',
     * 'UnplannedFailover', 'DisableProtection', 'TestFailover',
     * 'TestFailoverCleanup', 'Failback', 'FinalizeFailback', 'ChangePit',
     * 'RepairReplication', 'SwitchProtection', 'CompleteMigration'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ReplicationProtectedItemOperation =
     * <ReplicationProtectedItemOperation>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ReplicationProtectedItemOperation;
    (function (ReplicationProtectedItemOperation) {
        ReplicationProtectedItemOperation["ReverseReplicate"] = "ReverseReplicate";
        ReplicationProtectedItemOperation["Commit"] = "Commit";
        ReplicationProtectedItemOperation["PlannedFailover"] = "PlannedFailover";
        ReplicationProtectedItemOperation["UnplannedFailover"] = "UnplannedFailover";
        ReplicationProtectedItemOperation["DisableProtection"] = "DisableProtection";
        ReplicationProtectedItemOperation["TestFailover"] = "TestFailover";
        ReplicationProtectedItemOperation["TestFailoverCleanup"] = "TestFailoverCleanup";
        ReplicationProtectedItemOperation["Failback"] = "Failback";
        ReplicationProtectedItemOperation["FinalizeFailback"] = "FinalizeFailback";
        ReplicationProtectedItemOperation["ChangePit"] = "ChangePit";
        ReplicationProtectedItemOperation["RepairReplication"] = "RepairReplication";
        ReplicationProtectedItemOperation["SwitchProtection"] = "SwitchProtection";
        ReplicationProtectedItemOperation["CompleteMigration"] = "CompleteMigration";
    })(ReplicationProtectedItemOperation || (ReplicationProtectedItemOperation = {}));
    /**
     * Defines values for PossibleOperationsDirections.
     * Possible values include: 'PrimaryToRecovery', 'RecoveryToPrimary'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: PossibleOperationsDirections =
     * <PossibleOperationsDirections>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var PossibleOperationsDirections;
    (function (PossibleOperationsDirections) {
        PossibleOperationsDirections["PrimaryToRecovery"] = "PrimaryToRecovery";
        PossibleOperationsDirections["RecoveryToPrimary"] = "RecoveryToPrimary";
    })(PossibleOperationsDirections || (PossibleOperationsDirections = {}));
    /**
     * Defines values for DisableProtectionReason.
     * Possible values include: 'NotSpecified', 'MigrationComplete'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: DisableProtectionReason =
     * <DisableProtectionReason>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var DisableProtectionReason;
    (function (DisableProtectionReason) {
        DisableProtectionReason["NotSpecified"] = "NotSpecified";
        DisableProtectionReason["MigrationComplete"] = "MigrationComplete";
    })(DisableProtectionReason || (DisableProtectionReason = {}));
    /**
     * Defines values for HealthErrorCategory.
     * Possible values include: 'None', 'Replication', 'TestFailover',
     * 'Configuration', 'FabricInfrastructure', 'VersionExpiry', 'AgentAutoUpdate'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: HealthErrorCategory =
     * <HealthErrorCategory>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var HealthErrorCategory;
    (function (HealthErrorCategory) {
        HealthErrorCategory["None"] = "None";
        HealthErrorCategory["Replication"] = "Replication";
        HealthErrorCategory["TestFailover"] = "TestFailover";
        HealthErrorCategory["Configuration"] = "Configuration";
        HealthErrorCategory["FabricInfrastructure"] = "FabricInfrastructure";
        HealthErrorCategory["VersionExpiry"] = "VersionExpiry";
        HealthErrorCategory["AgentAutoUpdate"] = "AgentAutoUpdate";
    })(HealthErrorCategory || (HealthErrorCategory = {}));
    /**
     * Defines values for Severity.
     * Possible values include: 'NONE', 'Warning', 'Error', 'Info'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Severity = <Severity>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Severity;
    (function (Severity) {
        Severity["NONE"] = "NONE";
        Severity["Warning"] = "Warning";
        Severity["Error"] = "Error";
        Severity["Info"] = "Info";
    })(Severity || (Severity = {}));
    /**
     * Defines values for PresenceStatus.
     * Possible values include: 'Unknown', 'Present', 'NotPresent'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: PresenceStatus =
     * <PresenceStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var PresenceStatus;
    (function (PresenceStatus) {
        PresenceStatus["Unknown"] = "Unknown";
        PresenceStatus["Present"] = "Present";
        PresenceStatus["NotPresent"] = "NotPresent";
    })(PresenceStatus || (PresenceStatus = {}));
    /**
     * Defines values for IdentityProviderType.
     * Possible values include: 'RecoveryServicesActiveDirectory'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: IdentityProviderType =
     * <IdentityProviderType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var IdentityProviderType;
    (function (IdentityProviderType) {
        IdentityProviderType["RecoveryServicesActiveDirectory"] = "RecoveryServicesActiveDirectory";
    })(IdentityProviderType || (IdentityProviderType = {}));
    /**
     * Defines values for AgentVersionStatus.
     * Possible values include: 'Supported', 'NotSupported', 'Deprecated',
     * 'UpdateRequired', 'SecurityUpdateRequired'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: AgentVersionStatus =
     * <AgentVersionStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var AgentVersionStatus;
    (function (AgentVersionStatus) {
        AgentVersionStatus["Supported"] = "Supported";
        AgentVersionStatus["NotSupported"] = "NotSupported";
        AgentVersionStatus["Deprecated"] = "Deprecated";
        AgentVersionStatus["UpdateRequired"] = "UpdateRequired";
        AgentVersionStatus["SecurityUpdateRequired"] = "SecurityUpdateRequired";
    })(AgentVersionStatus || (AgentVersionStatus = {}));
    /**
     * Defines values for RecoveryPointType.
     * Possible values include: 'LatestTime', 'LatestTag', 'Custom'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: RecoveryPointType =
     * <RecoveryPointType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var RecoveryPointType;
    (function (RecoveryPointType) {
        RecoveryPointType["LatestTime"] = "LatestTime";
        RecoveryPointType["LatestTag"] = "LatestTag";
        RecoveryPointType["Custom"] = "Custom";
    })(RecoveryPointType || (RecoveryPointType = {}));
    /**
     * Defines values for MultiVmSyncStatus.
     * Possible values include: 'Enabled', 'Disabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: MultiVmSyncStatus =
     * <MultiVmSyncStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var MultiVmSyncStatus;
    (function (MultiVmSyncStatus) {
        MultiVmSyncStatus["Enabled"] = "Enabled";
        MultiVmSyncStatus["Disabled"] = "Disabled";
    })(MultiVmSyncStatus || (MultiVmSyncStatus = {}));
    /**
     * Defines values for A2ARpRecoveryPointType.
     * Possible values include: 'Latest', 'LatestApplicationConsistent',
     * 'LatestCrashConsistent', 'LatestProcessed'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: A2ARpRecoveryPointType =
     * <A2ARpRecoveryPointType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var A2ARpRecoveryPointType;
    (function (A2ARpRecoveryPointType) {
        A2ARpRecoveryPointType["Latest"] = "Latest";
        A2ARpRecoveryPointType["LatestApplicationConsistent"] = "LatestApplicationConsistent";
        A2ARpRecoveryPointType["LatestCrashConsistent"] = "LatestCrashConsistent";
        A2ARpRecoveryPointType["LatestProcessed"] = "LatestProcessed";
    })(A2ARpRecoveryPointType || (A2ARpRecoveryPointType = {}));
    /**
     * Defines values for MultiVmSyncPointOption.
     * Possible values include: 'UseMultiVmSyncRecoveryPoint',
     * 'UsePerVmRecoveryPoint'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: MultiVmSyncPointOption =
     * <MultiVmSyncPointOption>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var MultiVmSyncPointOption;
    (function (MultiVmSyncPointOption) {
        MultiVmSyncPointOption["UseMultiVmSyncRecoveryPoint"] = "UseMultiVmSyncRecoveryPoint";
        MultiVmSyncPointOption["UsePerVmRecoveryPoint"] = "UsePerVmRecoveryPoint";
    })(MultiVmSyncPointOption || (MultiVmSyncPointOption = {}));
    /**
     * Defines values for RecoveryPlanActionLocation.
     * Possible values include: 'Primary', 'Recovery'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: RecoveryPlanActionLocation =
     * <RecoveryPlanActionLocation>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var RecoveryPlanActionLocation;
    (function (RecoveryPlanActionLocation) {
        RecoveryPlanActionLocation["Primary"] = "Primary";
        RecoveryPlanActionLocation["Recovery"] = "Recovery";
    })(RecoveryPlanActionLocation || (RecoveryPlanActionLocation = {}));
    /**
     * Defines values for DataSyncStatus.
     * Possible values include: 'ForDownTime', 'ForSynchronization'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: DataSyncStatus =
     * <DataSyncStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var DataSyncStatus;
    (function (DataSyncStatus) {
        DataSyncStatus["ForDownTime"] = "ForDownTime";
        DataSyncStatus["ForSynchronization"] = "ForSynchronization";
    })(DataSyncStatus || (DataSyncStatus = {}));
    /**
     * Defines values for AlternateLocationRecoveryOption.
     * Possible values include: 'CreateVmIfNotFound', 'NoAction'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: AlternateLocationRecoveryOption =
     * <AlternateLocationRecoveryOption>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var AlternateLocationRecoveryOption;
    (function (AlternateLocationRecoveryOption) {
        AlternateLocationRecoveryOption["CreateVmIfNotFound"] = "CreateVmIfNotFound";
        AlternateLocationRecoveryOption["NoAction"] = "NoAction";
    })(AlternateLocationRecoveryOption || (AlternateLocationRecoveryOption = {}));
    /**
     * Defines values for HyperVReplicaAzureRpRecoveryPointType.
     * Possible values include: 'Latest', 'LatestApplicationConsistent',
     * 'LatestProcessed'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: HyperVReplicaAzureRpRecoveryPointType =
     * <HyperVReplicaAzureRpRecoveryPointType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var HyperVReplicaAzureRpRecoveryPointType;
    (function (HyperVReplicaAzureRpRecoveryPointType) {
        HyperVReplicaAzureRpRecoveryPointType["Latest"] = "Latest";
        HyperVReplicaAzureRpRecoveryPointType["LatestApplicationConsistent"] = "LatestApplicationConsistent";
        HyperVReplicaAzureRpRecoveryPointType["LatestProcessed"] = "LatestProcessed";
    })(HyperVReplicaAzureRpRecoveryPointType || (HyperVReplicaAzureRpRecoveryPointType = {}));
    /**
     * Defines values for InMageV2RpRecoveryPointType.
     * Possible values include: 'Latest', 'LatestApplicationConsistent',
     * 'LatestCrashConsistent', 'LatestProcessed'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: InMageV2RpRecoveryPointType =
     * <InMageV2RpRecoveryPointType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var InMageV2RpRecoveryPointType;
    (function (InMageV2RpRecoveryPointType) {
        InMageV2RpRecoveryPointType["Latest"] = "Latest";
        InMageV2RpRecoveryPointType["LatestApplicationConsistent"] = "LatestApplicationConsistent";
        InMageV2RpRecoveryPointType["LatestCrashConsistent"] = "LatestCrashConsistent";
        InMageV2RpRecoveryPointType["LatestProcessed"] = "LatestProcessed";
    })(InMageV2RpRecoveryPointType || (InMageV2RpRecoveryPointType = {}));
    /**
     * Defines values for RpInMageRecoveryPointType.
     * Possible values include: 'LatestTime', 'LatestTag', 'Custom'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: RpInMageRecoveryPointType =
     * <RpInMageRecoveryPointType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var RpInMageRecoveryPointType;
    (function (RpInMageRecoveryPointType) {
        RpInMageRecoveryPointType["LatestTime"] = "LatestTime";
        RpInMageRecoveryPointType["LatestTag"] = "LatestTag";
        RpInMageRecoveryPointType["Custom"] = "Custom";
    })(RpInMageRecoveryPointType || (RpInMageRecoveryPointType = {}));
    /**
     * Defines values for SourceSiteOperations.
     * Possible values include: 'Required', 'NotRequired'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SourceSiteOperations =
     * <SourceSiteOperations>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SourceSiteOperations;
    (function (SourceSiteOperations) {
        SourceSiteOperations["Required"] = "Required";
        SourceSiteOperations["NotRequired"] = "NotRequired";
    })(SourceSiteOperations || (SourceSiteOperations = {}));
    /**
     * Defines values for LicenseType.
     * Possible values include: 'NotSpecified', 'NoLicenseType', 'WindowsServer'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: LicenseType =
     * <LicenseType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var LicenseType;
    (function (LicenseType) {
        LicenseType["NotSpecified"] = "NotSpecified";
        LicenseType["NoLicenseType"] = "NoLicenseType";
        LicenseType["WindowsServer"] = "WindowsServer";
    })(LicenseType || (LicenseType = {}));

    var index = /*#__PURE__*/Object.freeze({
        get AgentAutoUpdateStatus () { return AgentAutoUpdateStatus; },
        get SetMultiVmSyncStatus () { return SetMultiVmSyncStatus; },
        get RecoveryPointSyncType () { return RecoveryPointSyncType; },
        get MultiVmGroupCreateOption () { return MultiVmGroupCreateOption; },
        get FailoverDeploymentModel () { return FailoverDeploymentModel; },
        get RecoveryPlanGroupType () { return RecoveryPlanGroupType; },
        get ReplicationProtectedItemOperation () { return ReplicationProtectedItemOperation; },
        get PossibleOperationsDirections () { return PossibleOperationsDirections; },
        get DisableProtectionReason () { return DisableProtectionReason; },
        get HealthErrorCategory () { return HealthErrorCategory; },
        get Severity () { return Severity; },
        get PresenceStatus () { return PresenceStatus; },
        get IdentityProviderType () { return IdentityProviderType; },
        get AgentVersionStatus () { return AgentVersionStatus; },
        get RecoveryPointType () { return RecoveryPointType; },
        get MultiVmSyncStatus () { return MultiVmSyncStatus; },
        get A2ARpRecoveryPointType () { return A2ARpRecoveryPointType; },
        get MultiVmSyncPointOption () { return MultiVmSyncPointOption; },
        get RecoveryPlanActionLocation () { return RecoveryPlanActionLocation; },
        get DataSyncStatus () { return DataSyncStatus; },
        get AlternateLocationRecoveryOption () { return AlternateLocationRecoveryOption; },
        get HyperVReplicaAzureRpRecoveryPointType () { return HyperVReplicaAzureRpRecoveryPointType; },
        get InMageV2RpRecoveryPointType () { return InMageV2RpRecoveryPointType; },
        get RpInMageRecoveryPointType () { return RpInMageRecoveryPointType; },
        get SourceSiteOperations () { return SourceSiteOperations; },
        get LicenseType () { return LicenseType; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var ApplyRecoveryPointProviderSpecificInput = {
        serializedName: "ApplyRecoveryPointProviderSpecificInput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "instanceType",
                clientName: "instanceType"
            },
            uberParent: "ApplyRecoveryPointProviderSpecificInput",
            className: "ApplyRecoveryPointProviderSpecificInput",
            modelProperties: {
                instanceType: {
                    required: true,
                    serializedName: "instanceType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var A2AApplyRecoveryPointInput = {
        serializedName: "A2A",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ApplyRecoveryPointProviderSpecificInput.type.polymorphicDiscriminator,
            uberParent: "ApplyRecoveryPointProviderSpecificInput",
            className: "A2AApplyRecoveryPointInput",
            modelProperties: __assign({}, ApplyRecoveryPointProviderSpecificInput.type.modelProperties)
        }
    };
    var ReplicationProviderSpecificContainerCreationInput = {
        serializedName: "ReplicationProviderSpecificContainerCreationInput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "instanceType",
                clientName: "instanceType"
            },
            uberParent: "ReplicationProviderSpecificContainerCreationInput",
            className: "ReplicationProviderSpecificContainerCreationInput",
            modelProperties: {
                instanceType: {
                    required: true,
                    serializedName: "instanceType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var A2AContainerCreationInput = {
        serializedName: "A2A",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ReplicationProviderSpecificContainerCreationInput.type.polymorphicDiscriminator,
            uberParent: "ReplicationProviderSpecificContainerCreationInput",
            className: "A2AContainerCreationInput",
            modelProperties: __assign({}, ReplicationProviderSpecificContainerCreationInput.type.modelProperties)
        }
    };
    var ReplicationProviderSpecificContainerMappingInput = {
        serializedName: "ReplicationProviderSpecificContainerMappingInput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "instanceType",
                clientName: "instanceType"
            },
            uberParent: "ReplicationProviderSpecificContainerMappingInput",
            className: "ReplicationProviderSpecificContainerMappingInput",
            modelProperties: {
                instanceType: {
                    required: true,
                    serializedName: "instanceType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var A2AContainerMappingInput = {
        serializedName: "A2A",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ReplicationProviderSpecificContainerMappingInput.type.polymorphicDiscriminator,
            uberParent: "ReplicationProviderSpecificContainerMappingInput",
            className: "A2AContainerMappingInput",
            modelProperties: __assign({}, ReplicationProviderSpecificContainerMappingInput.type.modelProperties, { agentAutoUpdateStatus: {
                    serializedName: "agentAutoUpdateStatus",
                    type: {
                        name: "String"
                    }
                }, automationAccountArmId: {
                    serializedName: "automationAccountArmId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var A2AVmDiskInputDetails = {
        serializedName: "A2AVmDiskInputDetails",
        type: {
            name: "Composite",
            className: "A2AVmDiskInputDetails",
            modelProperties: {
                diskUri: {
                    serializedName: "diskUri",
                    type: {
                        name: "String"
                    }
                },
                recoveryAzureStorageAccountId: {
                    serializedName: "recoveryAzureStorageAccountId",
                    type: {
                        name: "String"
                    }
                },
                primaryStagingAzureStorageAccountId: {
                    serializedName: "primaryStagingAzureStorageAccountId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var A2AVmManagedDiskInputDetails = {
        serializedName: "A2AVmManagedDiskInputDetails",
        type: {
            name: "Composite",
            className: "A2AVmManagedDiskInputDetails",
            modelProperties: {
                diskId: {
                    serializedName: "diskId",
                    type: {
                        name: "String"
                    }
                },
                primaryStagingAzureStorageAccountId: {
                    serializedName: "primaryStagingAzureStorageAccountId",
                    type: {
                        name: "String"
                    }
                },
                recoveryResourceGroupId: {
                    serializedName: "recoveryResourceGroupId",
                    type: {
                        name: "String"
                    }
                },
                recoveryReplicaDiskAccountType: {
                    serializedName: "recoveryReplicaDiskAccountType",
                    type: {
                        name: "String"
                    }
                },
                recoveryTargetDiskAccountType: {
                    serializedName: "recoveryTargetDiskAccountType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DiskEncryptionKeyInfo = {
        serializedName: "DiskEncryptionKeyInfo",
        type: {
            name: "Composite",
            className: "DiskEncryptionKeyInfo",
            modelProperties: {
                secretIdentifier: {
                    serializedName: "secretIdentifier",
                    type: {
                        name: "String"
                    }
                },
                keyVaultResourceArmId: {
                    serializedName: "keyVaultResourceArmId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var KeyEncryptionKeyInfo = {
        serializedName: "KeyEncryptionKeyInfo",
        type: {
            name: "Composite",
            className: "KeyEncryptionKeyInfo",
            modelProperties: {
                keyIdentifier: {
                    serializedName: "keyIdentifier",
                    type: {
                        name: "String"
                    }
                },
                keyVaultResourceArmId: {
                    serializedName: "keyVaultResourceArmId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DiskEncryptionInfo = {
        serializedName: "DiskEncryptionInfo",
        type: {
            name: "Composite",
            className: "DiskEncryptionInfo",
            modelProperties: {
                diskEncryptionKeyInfo: {
                    serializedName: "diskEncryptionKeyInfo",
                    type: {
                        name: "Composite",
                        className: "DiskEncryptionKeyInfo"
                    }
                },
                keyEncryptionKeyInfo: {
                    serializedName: "keyEncryptionKeyInfo",
                    type: {
                        name: "Composite",
                        className: "KeyEncryptionKeyInfo"
                    }
                }
            }
        }
    };
    var EnableProtectionProviderSpecificInput = {
        serializedName: "EnableProtectionProviderSpecificInput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "instanceType",
                clientName: "instanceType"
            },
            uberParent: "EnableProtectionProviderSpecificInput",
            className: "EnableProtectionProviderSpecificInput",
            modelProperties: {
                instanceType: {
                    required: true,
                    serializedName: "instanceType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var A2AEnableProtectionInput = {
        serializedName: "A2A",
        type: {
            name: "Composite",
            polymorphicDiscriminator: EnableProtectionProviderSpecificInput.type.polymorphicDiscriminator,
            uberParent: "EnableProtectionProviderSpecificInput",
            className: "A2AEnableProtectionInput",
            modelProperties: __assign({}, EnableProtectionProviderSpecificInput.type.modelProperties, { fabricObjectId: {
                    serializedName: "fabricObjectId",
                    type: {
                        name: "String"
                    }
                }, recoveryContainerId: {
                    serializedName: "recoveryContainerId",
                    type: {
                        name: "String"
                    }
                }, recoveryResourceGroupId: {
                    serializedName: "recoveryResourceGroupId",
                    type: {
                        name: "String"
                    }
                }, recoveryCloudServiceId: {
                    serializedName: "recoveryCloudServiceId",
                    type: {
                        name: "String"
                    }
                }, recoveryAvailabilitySetId: {
                    serializedName: "recoveryAvailabilitySetId",
                    type: {
                        name: "String"
                    }
                }, vmDisks: {
                    serializedName: "vmDisks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "A2AVmDiskInputDetails"
                            }
                        }
                    }
                }, vmManagedDisks: {
                    serializedName: "vmManagedDisks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "A2AVmManagedDiskInputDetails"
                            }
                        }
                    }
                }, multiVmGroupName: {
                    serializedName: "multiVmGroupName",
                    type: {
                        name: "String"
                    }
                }, recoveryBootDiagStorageAccountId: {
                    serializedName: "recoveryBootDiagStorageAccountId",
                    type: {
                        name: "String"
                    }
                }, diskEncryptionInfo: {
                    serializedName: "diskEncryptionInfo",
                    type: {
                        name: "Composite",
                        className: "DiskEncryptionInfo"
                    }
                } })
        }
    };
    var EventProviderSpecificDetails = {
        serializedName: "EventProviderSpecificDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "instanceType",
                clientName: "instanceType"
            },
            uberParent: "EventProviderSpecificDetails",
            className: "EventProviderSpecificDetails",
            modelProperties: {
                instanceType: {
                    required: true,
                    serializedName: "instanceType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var A2AEventDetails = {
        serializedName: "A2A",
        type: {
            name: "Composite",
            polymorphicDiscriminator: EventProviderSpecificDetails.type.polymorphicDiscriminator,
            uberParent: "EventProviderSpecificDetails",
            className: "A2AEventDetails",
            modelProperties: __assign({}, EventProviderSpecificDetails.type.modelProperties, { protectedItemName: {
                    serializedName: "protectedItemName",
                    type: {
                        name: "String"
                    }
                }, fabricObjectId: {
                    serializedName: "fabricObjectId",
                    type: {
                        name: "String"
                    }
                }, fabricName: {
                    serializedName: "fabricName",
                    type: {
                        name: "String"
                    }
                }, fabricLocation: {
                    serializedName: "fabricLocation",
                    type: {
                        name: "String"
                    }
                }, remoteFabricName: {
                    serializedName: "remoteFabricName",
                    type: {
                        name: "String"
                    }
                }, remoteFabricLocation: {
                    serializedName: "remoteFabricLocation",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ProviderSpecificFailoverInput = {
        serializedName: "ProviderSpecificFailoverInput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "instanceType",
                clientName: "instanceType"
            },
            uberParent: "ProviderSpecificFailoverInput",
            className: "ProviderSpecificFailoverInput",
            modelProperties: {
                instanceType: {
                    required: true,
                    serializedName: "instanceType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var A2AFailoverProviderInput = {
        serializedName: "A2A",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProviderSpecificFailoverInput.type.polymorphicDiscriminator,
            uberParent: "ProviderSpecificFailoverInput",
            className: "A2AFailoverProviderInput",
            modelProperties: __assign({}, ProviderSpecificFailoverInput.type.modelProperties, { recoveryPointId: {
                    serializedName: "recoveryPointId",
                    type: {
                        name: "String"
                    }
                }, cloudServiceCreationOption: {
                    serializedName: "cloudServiceCreationOption",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var PolicyProviderSpecificInput = {
        serializedName: "PolicyProviderSpecificInput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "instanceType",
                clientName: "instanceType"
            },
            uberParent: "PolicyProviderSpecificInput",
            className: "PolicyProviderSpecificInput",
            modelProperties: {
                instanceType: {
                    required: true,
                    serializedName: "instanceType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var A2APolicyCreationInput = {
        serializedName: "A2A",
        type: {
            name: "Composite",
            polymorphicDiscriminator: PolicyProviderSpecificInput.type.polymorphicDiscriminator,
            uberParent: "PolicyProviderSpecificInput",
            className: "A2APolicyCreationInput",
            modelProperties: __assign({}, PolicyProviderSpecificInput.type.modelProperties, { recoveryPointHistory: {
                    serializedName: "recoveryPointHistory",
                    type: {
                        name: "Number"
                    }
                }, crashConsistentFrequencyInMinutes: {
                    serializedName: "crashConsistentFrequencyInMinutes",
                    type: {
                        name: "Number"
                    }
                }, appConsistentFrequencyInMinutes: {
                    serializedName: "appConsistentFrequencyInMinutes",
                    type: {
                        name: "Number"
                    }
                }, multiVmSyncStatus: {
                    required: true,
                    serializedName: "multiVmSyncStatus",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var PolicyProviderSpecificDetails = {
        serializedName: "PolicyProviderSpecificDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "instanceType",
                clientName: "instanceType"
            },
            uberParent: "PolicyProviderSpecificDetails",
            className: "PolicyProviderSpecificDetails",
            modelProperties: {
                instanceType: {
                    required: true,
                    serializedName: "instanceType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var A2APolicyDetails = {
        serializedName: "A2A",
        type: {
            name: "Composite",
            polymorphicDiscriminator: PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
            uberParent: "PolicyProviderSpecificDetails",
            className: "A2APolicyDetails",
            modelProperties: __assign({}, PolicyProviderSpecificDetails.type.modelProperties, { recoveryPointThresholdInMinutes: {
                    serializedName: "recoveryPointThresholdInMinutes",
                    type: {
                        name: "Number"
                    }
                }, recoveryPointHistory: {
                    serializedName: "recoveryPointHistory",
                    type: {
                        name: "Number"
                    }
                }, appConsistentFrequencyInMinutes: {
                    serializedName: "appConsistentFrequencyInMinutes",
                    type: {
                        name: "Number"
                    }
                }, multiVmSyncStatus: {
                    serializedName: "multiVmSyncStatus",
                    type: {
                        name: "String"
                    }
                }, crashConsistentFrequencyInMinutes: {
                    serializedName: "crashConsistentFrequencyInMinutes",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var A2AProtectedDiskDetails = {
        serializedName: "A2AProtectedDiskDetails",
        type: {
            name: "Composite",
            className: "A2AProtectedDiskDetails",
            modelProperties: {
                diskUri: {
                    serializedName: "diskUri",
                    type: {
                        name: "String"
                    }
                },
                recoveryAzureStorageAccountId: {
                    serializedName: "recoveryAzureStorageAccountId",
                    type: {
                        name: "String"
                    }
                },
                primaryDiskAzureStorageAccountId: {
                    serializedName: "primaryDiskAzureStorageAccountId",
                    type: {
                        name: "String"
                    }
                },
                recoveryDiskUri: {
                    serializedName: "recoveryDiskUri",
                    type: {
                        name: "String"
                    }
                },
                diskName: {
                    serializedName: "diskName",
                    type: {
                        name: "String"
                    }
                },
                diskCapacityInBytes: {
                    serializedName: "diskCapacityInBytes",
                    type: {
                        name: "Number"
                    }
                },
                primaryStagingAzureStorageAccountId: {
                    serializedName: "primaryStagingAzureStorageAccountId",
                    type: {
                        name: "String"
                    }
                },
                diskType: {
                    serializedName: "diskType",
                    type: {
                        name: "String"
                    }
                },
                resyncRequired: {
                    serializedName: "resyncRequired",
                    type: {
                        name: "Boolean"
                    }
                },
                monitoringPercentageCompletion: {
                    serializedName: "monitoringPercentageCompletion",
                    type: {
                        name: "Number"
                    }
                },
                monitoringJobType: {
                    serializedName: "monitoringJobType",
                    type: {
                        name: "String"
                    }
                },
                dataPendingInStagingStorageAccountInMB: {
                    serializedName: "dataPendingInStagingStorageAccountInMB",
                    type: {
                        name: "Number"
                    }
                },
                dataPendingAtSourceAgentInMB: {
                    serializedName: "dataPendingAtSourceAgentInMB",
                    type: {
                        name: "Number"
                    }
                },
                isDiskEncrypted: {
                    serializedName: "isDiskEncrypted",
                    type: {
                        name: "Boolean"
                    }
                },
                secretIdentifier: {
                    serializedName: "secretIdentifier",
                    type: {
                        name: "String"
                    }
                },
                dekKeyVaultArmId: {
                    serializedName: "dekKeyVaultArmId",
                    type: {
                        name: "String"
                    }
                },
                isDiskKeyEncrypted: {
                    serializedName: "isDiskKeyEncrypted",
                    type: {
                        name: "Boolean"
                    }
                },
                keyIdentifier: {
                    serializedName: "keyIdentifier",
                    type: {
                        name: "String"
                    }
                },
                kekKeyVaultArmId: {
                    serializedName: "kekKeyVaultArmId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var A2AProtectedManagedDiskDetails = {
        serializedName: "A2AProtectedManagedDiskDetails",
        type: {
            name: "Composite",
            className: "A2AProtectedManagedDiskDetails",
            modelProperties: {
                diskId: {
                    serializedName: "diskId",
                    type: {
                        name: "String"
                    }
                },
                recoveryResourceGroupId: {
                    serializedName: "recoveryResourceGroupId",
                    type: {
                        name: "String"
                    }
                },
                recoveryTargetDiskId: {
                    serializedName: "recoveryTargetDiskId",
                    type: {
                        name: "String"
                    }
                },
                recoveryReplicaDiskId: {
                    serializedName: "recoveryReplicaDiskId",
                    type: {
                        name: "String"
                    }
                },
                recoveryReplicaDiskAccountType: {
                    serializedName: "recoveryReplicaDiskAccountType",
                    type: {
                        name: "String"
                    }
                },
                recoveryTargetDiskAccountType: {
                    serializedName: "recoveryTargetDiskAccountType",
                    type: {
                        name: "String"
                    }
                },
                diskName: {
                    serializedName: "diskName",
                    type: {
                        name: "String"
                    }
                },
                diskCapacityInBytes: {
                    serializedName: "diskCapacityInBytes",
                    type: {
                        name: "Number"
                    }
                },
                primaryStagingAzureStorageAccountId: {
                    serializedName: "primaryStagingAzureStorageAccountId",
                    type: {
                        name: "String"
                    }
                },
                diskType: {
                    serializedName: "diskType",
                    type: {
                        name: "String"
                    }
                },
                resyncRequired: {
                    serializedName: "resyncRequired",
                    type: {
                        name: "Boolean"
                    }
                },
                monitoringPercentageCompletion: {
                    serializedName: "monitoringPercentageCompletion",
                    type: {
                        name: "Number"
                    }
                },
                monitoringJobType: {
                    serializedName: "monitoringJobType",
                    type: {
                        name: "String"
                    }
                },
                dataPendingInStagingStorageAccountInMB: {
                    serializedName: "dataPendingInStagingStorageAccountInMB",
                    type: {
                        name: "Number"
                    }
                },
                dataPendingAtSourceAgentInMB: {
                    serializedName: "dataPendingAtSourceAgentInMB",
                    type: {
                        name: "Number"
                    }
                },
                isDiskEncrypted: {
                    serializedName: "isDiskEncrypted",
                    type: {
                        name: "Boolean"
                    }
                },
                secretIdentifier: {
                    serializedName: "secretIdentifier",
                    type: {
                        name: "String"
                    }
                },
                dekKeyVaultArmId: {
                    serializedName: "dekKeyVaultArmId",
                    type: {
                        name: "String"
                    }
                },
                isDiskKeyEncrypted: {
                    serializedName: "isDiskKeyEncrypted",
                    type: {
                        name: "Boolean"
                    }
                },
                keyIdentifier: {
                    serializedName: "keyIdentifier",
                    type: {
                        name: "String"
                    }
                },
                kekKeyVaultArmId: {
                    serializedName: "kekKeyVaultArmId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProtectionContainerMappingProviderSpecificDetails = {
        serializedName: "ProtectionContainerMappingProviderSpecificDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "instanceType",
                clientName: "instanceType"
            },
            uberParent: "ProtectionContainerMappingProviderSpecificDetails",
            className: "ProtectionContainerMappingProviderSpecificDetails",
            modelProperties: {
                instanceType: {
                    required: true,
                    serializedName: "instanceType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var A2AProtectionContainerMappingDetails = {
        serializedName: "A2A",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProtectionContainerMappingProviderSpecificDetails.type.polymorphicDiscriminator,
            uberParent: "ProtectionContainerMappingProviderSpecificDetails",
            className: "A2AProtectionContainerMappingDetails",
            modelProperties: __assign({}, ProtectionContainerMappingProviderSpecificDetails.type.modelProperties, { agentAutoUpdateStatus: {
                    serializedName: "agentAutoUpdateStatus",
                    type: {
                        name: "String"
                    }
                }, automationAccountArmId: {
                    serializedName: "automationAccountArmId",
                    type: {
                        name: "String"
                    }
                }, scheduleName: {
                    serializedName: "scheduleName",
                    type: {
                        name: "String"
                    }
                }, jobScheduleName: {
                    serializedName: "jobScheduleName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ProviderSpecificRecoveryPointDetails = {
        serializedName: "ProviderSpecificRecoveryPointDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "instanceType",
                clientName: "instanceType"
            },
            uberParent: "ProviderSpecificRecoveryPointDetails",
            className: "ProviderSpecificRecoveryPointDetails",
            modelProperties: {
                instanceType: {
                    required: true,
                    serializedName: "instanceType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var A2ARecoveryPointDetails = {
        serializedName: "A2A",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProviderSpecificRecoveryPointDetails.type.polymorphicDiscriminator,
            uberParent: "ProviderSpecificRecoveryPointDetails",
            className: "A2ARecoveryPointDetails",
            modelProperties: __assign({}, ProviderSpecificRecoveryPointDetails.type.modelProperties, { recoveryPointSyncType: {
                    serializedName: "recoveryPointSyncType",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VMNicDetails = {
        serializedName: "VMNicDetails",
        type: {
            name: "Composite",
            className: "VMNicDetails",
            modelProperties: {
                nicId: {
                    serializedName: "nicId",
                    type: {
                        name: "String"
                    }
                },
                replicaNicId: {
                    serializedName: "replicaNicId",
                    type: {
                        name: "String"
                    }
                },
                sourceNicArmId: {
                    serializedName: "sourceNicArmId",
                    type: {
                        name: "String"
                    }
                },
                vMSubnetName: {
                    serializedName: "vMSubnetName",
                    type: {
                        name: "String"
                    }
                },
                vMNetworkName: {
                    serializedName: "vMNetworkName",
                    type: {
                        name: "String"
                    }
                },
                recoveryVMNetworkId: {
                    serializedName: "recoveryVMNetworkId",
                    type: {
                        name: "String"
                    }
                },
                recoveryVMSubnetName: {
                    serializedName: "recoveryVMSubnetName",
                    type: {
                        name: "String"
                    }
                },
                ipAddressType: {
                    serializedName: "ipAddressType",
                    type: {
                        name: "String"
                    }
                },
                primaryNicStaticIPAddress: {
                    serializedName: "primaryNicStaticIPAddress",
                    type: {
                        name: "String"
                    }
                },
                replicaNicStaticIPAddress: {
                    serializedName: "replicaNicStaticIPAddress",
                    type: {
                        name: "String"
                    }
                },
                selectionType: {
                    serializedName: "selectionType",
                    type: {
                        name: "String"
                    }
                },
                recoveryNicIpAddressType: {
                    serializedName: "recoveryNicIpAddressType",
                    type: {
                        name: "String"
                    }
                },
                enableAcceleratedNetworkingOnRecovery: {
                    serializedName: "enableAcceleratedNetworkingOnRecovery",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var RoleAssignment = {
        serializedName: "RoleAssignment",
        type: {
            name: "Composite",
            className: "RoleAssignment",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                scope: {
                    serializedName: "scope",
                    type: {
                        name: "String"
                    }
                },
                principalId: {
                    serializedName: "principalId",
                    type: {
                        name: "String"
                    }
                },
                roleDefinitionId: {
                    serializedName: "roleDefinitionId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InputEndpoint = {
        serializedName: "InputEndpoint",
        type: {
            name: "Composite",
            className: "InputEndpoint",
            modelProperties: {
                endpointName: {
                    serializedName: "endpointName",
                    type: {
                        name: "String"
                    }
                },
                privatePort: {
                    serializedName: "privatePort",
                    type: {
                        name: "Number"
                    }
                },
                publicPort: {
                    serializedName: "publicPort",
                    type: {
                        name: "Number"
                    }
                },
                protocol: {
                    serializedName: "protocol",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AzureToAzureVmSyncedConfigDetails = {
        serializedName: "AzureToAzureVmSyncedConfigDetails",
        type: {
            name: "Composite",
            className: "AzureToAzureVmSyncedConfigDetails",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                roleAssignments: {
                    serializedName: "roleAssignments",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RoleAssignment"
                            }
                        }
                    }
                },
                inputEndpoints: {
                    serializedName: "inputEndpoints",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InputEndpoint"
                            }
                        }
                    }
                }
            }
        }
    };
    var ReplicationProviderSpecificSettings = {
        serializedName: "ReplicationProviderSpecificSettings",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "instanceType",
                clientName: "instanceType"
            },
            uberParent: "ReplicationProviderSpecificSettings",
            className: "ReplicationProviderSpecificSettings",
            modelProperties: {
                instanceType: {
                    required: true,
                    serializedName: "instanceType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var A2AReplicationDetails = {
        serializedName: "A2A",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ReplicationProviderSpecificSettings.type.polymorphicDiscriminator,
            uberParent: "ReplicationProviderSpecificSettings",
            className: "A2AReplicationDetails",
            modelProperties: __assign({}, ReplicationProviderSpecificSettings.type.modelProperties, { fabricObjectId: {
                    serializedName: "fabricObjectId",
                    type: {
                        name: "String"
                    }
                }, multiVmGroupId: {
                    serializedName: "multiVmGroupId",
                    type: {
                        name: "String"
                    }
                }, multiVmGroupName: {
                    serializedName: "multiVmGroupName",
                    type: {
                        name: "String"
                    }
                }, multiVmGroupCreateOption: {
                    serializedName: "multiVmGroupCreateOption",
                    type: {
                        name: "String"
                    }
                }, managementId: {
                    serializedName: "managementId",
                    type: {
                        name: "String"
                    }
                }, protectedDisks: {
                    serializedName: "protectedDisks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "A2AProtectedDiskDetails"
                            }
                        }
                    }
                }, protectedManagedDisks: {
                    serializedName: "protectedManagedDisks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "A2AProtectedManagedDiskDetails"
                            }
                        }
                    }
                }, recoveryBootDiagStorageAccountId: {
                    serializedName: "recoveryBootDiagStorageAccountId",
                    type: {
                        name: "String"
                    }
                }, primaryFabricLocation: {
                    serializedName: "primaryFabricLocation",
                    type: {
                        name: "String"
                    }
                }, recoveryFabricLocation: {
                    serializedName: "recoveryFabricLocation",
                    type: {
                        name: "String"
                    }
                }, osType: {
                    serializedName: "osType",
                    type: {
                        name: "String"
                    }
                }, recoveryAzureVMSize: {
                    serializedName: "recoveryAzureVMSize",
                    type: {
                        name: "String"
                    }
                }, recoveryAzureVMName: {
                    serializedName: "recoveryAzureVMName",
                    type: {
                        name: "String"
                    }
                }, recoveryAzureResourceGroupId: {
                    serializedName: "recoveryAzureResourceGroupId",
                    type: {
                        name: "String"
                    }
                }, recoveryCloudService: {
                    serializedName: "recoveryCloudService",
                    type: {
                        name: "String"
                    }
                }, recoveryAvailabilitySet: {
                    serializedName: "recoveryAvailabilitySet",
                    type: {
                        name: "String"
                    }
                }, selectedRecoveryAzureNetworkId: {
                    serializedName: "selectedRecoveryAzureNetworkId",
                    type: {
                        name: "String"
                    }
                }, vmNics: {
                    serializedName: "vmNics",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VMNicDetails"
                            }
                        }
                    }
                }, vmSyncedConfigDetails: {
                    serializedName: "vmSyncedConfigDetails",
                    type: {
                        name: "Composite",
                        className: "AzureToAzureVmSyncedConfigDetails"
                    }
                }, monitoringPercentageCompletion: {
                    serializedName: "monitoringPercentageCompletion",
                    type: {
                        name: "Number"
                    }
                }, monitoringJobType: {
                    serializedName: "monitoringJobType",
                    type: {
                        name: "String"
                    }
                }, lastHeartbeat: {
                    serializedName: "lastHeartbeat",
                    type: {
                        name: "DateTime"
                    }
                }, agentVersion: {
                    serializedName: "agentVersion",
                    type: {
                        name: "String"
                    }
                }, isReplicationAgentUpdateRequired: {
                    serializedName: "isReplicationAgentUpdateRequired",
                    type: {
                        name: "Boolean"
                    }
                }, recoveryFabricObjectId: {
                    serializedName: "recoveryFabricObjectId",
                    type: {
                        name: "String"
                    }
                }, vmProtectionState: {
                    serializedName: "vmProtectionState",
                    type: {
                        name: "String"
                    }
                }, vmProtectionStateDescription: {
                    serializedName: "vmProtectionStateDescription",
                    type: {
                        name: "String"
                    }
                }, lifecycleId: {
                    serializedName: "lifecycleId",
                    type: {
                        name: "String"
                    }
                }, testFailoverRecoveryFabricObjectId: {
                    serializedName: "testFailoverRecoveryFabricObjectId",
                    type: {
                        name: "String"
                    }
                }, rpoInSeconds: {
                    serializedName: "rpoInSeconds",
                    type: {
                        name: "Number"
                    }
                }, lastRpoCalculatedTime: {
                    serializedName: "lastRpoCalculatedTime",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var ReverseReplicationProviderSpecificInput = {
        serializedName: "ReverseReplicationProviderSpecificInput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "instanceType",
                clientName: "instanceType"
            },
            uberParent: "ReverseReplicationProviderSpecificInput",
            className: "ReverseReplicationProviderSpecificInput",
            modelProperties: {
                instanceType: {
                    required: true,
                    serializedName: "instanceType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var A2AReprotectInput = {
        serializedName: "A2A",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ReverseReplicationProviderSpecificInput.type.polymorphicDiscriminator,
            uberParent: "ReverseReplicationProviderSpecificInput",
            className: "A2AReprotectInput",
            modelProperties: __assign({}, ReverseReplicationProviderSpecificInput.type.modelProperties, { recoveryContainerId: {
                    serializedName: "recoveryContainerId",
                    type: {
                        name: "String"
                    }
                }, vmDisks: {
                    serializedName: "vmDisks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "A2AVmDiskInputDetails"
                            }
                        }
                    }
                }, recoveryResourceGroupId: {
                    serializedName: "recoveryResourceGroupId",
                    type: {
                        name: "String"
                    }
                }, recoveryCloudServiceId: {
                    serializedName: "recoveryCloudServiceId",
                    type: {
                        name: "String"
                    }
                }, recoveryAvailabilitySetId: {
                    serializedName: "recoveryAvailabilitySetId",
                    type: {
                        name: "String"
                    }
                }, policyId: {
                    serializedName: "policyId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var SwitchProtectionProviderSpecificInput = {
        serializedName: "SwitchProtectionProviderSpecificInput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "instanceType",
                clientName: "instanceType"
            },
            uberParent: "SwitchProtectionProviderSpecificInput",
            className: "SwitchProtectionProviderSpecificInput",
            modelProperties: {
                instanceType: {
                    required: true,
                    serializedName: "instanceType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var A2ASwitchProtectionInput = {
        serializedName: "A2A",
        type: {
            name: "Composite",
            polymorphicDiscriminator: SwitchProtectionProviderSpecificInput.type.polymorphicDiscriminator,
            uberParent: "SwitchProtectionProviderSpecificInput",
            className: "A2ASwitchProtectionInput",
            modelProperties: __assign({}, SwitchProtectionProviderSpecificInput.type.modelProperties, { recoveryContainerId: {
                    serializedName: "recoveryContainerId",
                    type: {
                        name: "String"
                    }
                }, vmDisks: {
                    serializedName: "vmDisks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "A2AVmDiskInputDetails"
                            }
                        }
                    }
                }, vmManagedDisks: {
                    serializedName: "vmManagedDisks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "A2AVmManagedDiskInputDetails"
                            }
                        }
                    }
                }, recoveryResourceGroupId: {
                    serializedName: "recoveryResourceGroupId",
                    type: {
                        name: "String"
                    }
                }, recoveryCloudServiceId: {
                    serializedName: "recoveryCloudServiceId",
                    type: {
                        name: "String"
                    }
                }, recoveryAvailabilitySetId: {
                    serializedName: "recoveryAvailabilitySetId",
                    type: {
                        name: "String"
                    }
                }, policyId: {
                    serializedName: "policyId",
                    type: {
                        name: "String"
                    }
                }, recoveryBootDiagStorageAccountId: {
                    serializedName: "recoveryBootDiagStorageAccountId",
                    type: {
                        name: "String"
                    }
                }, diskEncryptionInfo: {
                    serializedName: "diskEncryptionInfo",
                    type: {
                        name: "Composite",
                        className: "DiskEncryptionInfo"
                    }
                } })
        }
    };
    var ReplicationProviderSpecificUpdateContainerMappingInput = {
        serializedName: "ReplicationProviderSpecificUpdateContainerMappingInput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "instanceType",
                clientName: "instanceType"
            },
            uberParent: "ReplicationProviderSpecificUpdateContainerMappingInput",
            className: "ReplicationProviderSpecificUpdateContainerMappingInput",
            modelProperties: {
                instanceType: {
                    required: true,
                    serializedName: "instanceType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var A2AUpdateContainerMappingInput = {
        serializedName: "A2A",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ReplicationProviderSpecificUpdateContainerMappingInput.type.polymorphicDiscriminator,
            uberParent: "ReplicationProviderSpecificUpdateContainerMappingInput",
            className: "A2AUpdateContainerMappingInput",
            modelProperties: __assign({}, ReplicationProviderSpecificUpdateContainerMappingInput.type.modelProperties, { agentAutoUpdateStatus: {
                    serializedName: "agentAutoUpdateStatus",
                    type: {
                        name: "String"
                    }
                }, automationAccountArmId: {
                    serializedName: "automationAccountArmId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var A2AVmManagedDiskUpdateDetails = {
        serializedName: "A2AVmManagedDiskUpdateDetails",
        type: {
            name: "Composite",
            className: "A2AVmManagedDiskUpdateDetails",
            modelProperties: {
                diskId: {
                    serializedName: "diskId",
                    type: {
                        name: "String"
                    }
                },
                recoveryTargetDiskAccountType: {
                    serializedName: "recoveryTargetDiskAccountType",
                    type: {
                        name: "String"
                    }
                },
                recoveryReplicaDiskAccountType: {
                    serializedName: "recoveryReplicaDiskAccountType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UpdateReplicationProtectedItemProviderInput = {
        serializedName: "UpdateReplicationProtectedItemProviderInput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "instanceType",
                clientName: "instanceType"
            },
            uberParent: "UpdateReplicationProtectedItemProviderInput",
            className: "UpdateReplicationProtectedItemProviderInput",
            modelProperties: {
                instanceType: {
                    required: true,
                    serializedName: "instanceType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var A2AUpdateReplicationProtectedItemInput = {
        serializedName: "A2A",
        type: {
            name: "Composite",
            polymorphicDiscriminator: UpdateReplicationProtectedItemProviderInput.type.polymorphicDiscriminator,
            uberParent: "UpdateReplicationProtectedItemProviderInput",
            className: "A2AUpdateReplicationProtectedItemInput",
            modelProperties: __assign({}, UpdateReplicationProtectedItemProviderInput.type.modelProperties, { recoveryCloudServiceId: {
                    serializedName: "recoveryCloudServiceId",
                    type: {
                        name: "String"
                    }
                }, recoveryResourceGroupId: {
                    serializedName: "recoveryResourceGroupId",
                    type: {
                        name: "String"
                    }
                }, managedDiskUpdateDetails: {
                    serializedName: "managedDiskUpdateDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "A2AVmManagedDiskUpdateDetails"
                            }
                        }
                    }
                }, recoveryBootDiagStorageAccountId: {
                    serializedName: "recoveryBootDiagStorageAccountId",
                    type: {
                        name: "String"
                    }
                }, diskEncryptionInfo: {
                    serializedName: "diskEncryptionInfo",
                    type: {
                        name: "Composite",
                        className: "DiskEncryptionInfo"
                    }
                } })
        }
    };
    var AddVCenterRequestProperties = {
        serializedName: "AddVCenterRequestProperties",
        type: {
            name: "Composite",
            className: "AddVCenterRequestProperties",
            modelProperties: {
                friendlyName: {
                    serializedName: "friendlyName",
                    type: {
                        name: "String"
                    }
                },
                ipAddress: {
                    serializedName: "ipAddress",
                    type: {
                        name: "String"
                    }
                },
                processServerId: {
                    serializedName: "processServerId",
                    type: {
                        name: "String"
                    }
                },
                port: {
                    serializedName: "port",
                    type: {
                        name: "String"
                    }
                },
                runAsAccountId: {
                    serializedName: "runAsAccountId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AddVCenterRequest = {
        serializedName: "AddVCenterRequest",
        type: {
            name: "Composite",
            className: "AddVCenterRequest",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "AddVCenterRequestProperties"
                    }
                }
            }
        }
    };
    var AlertProperties = {
        serializedName: "AlertProperties",
        type: {
            name: "Composite",
            className: "AlertProperties",
            modelProperties: {
                sendToOwners: {
                    serializedName: "sendToOwners",
                    type: {
                        name: "String"
                    }
                },
                customEmailAddresses: {
                    serializedName: "customEmailAddresses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                locale: {
                    serializedName: "locale",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Alert = {
        serializedName: "Alert",
        type: {
            name: "Composite",
            className: "Alert",
            modelProperties: __assign({}, Resource.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "AlertProperties"
                    }
                } })
        }
    };
    var ApplyRecoveryPointInputProperties = {
        serializedName: "ApplyRecoveryPointInputProperties",
        type: {
            name: "Composite",
            className: "ApplyRecoveryPointInputProperties",
            modelProperties: {
                recoveryPointId: {
                    serializedName: "recoveryPointId",
                    type: {
                        name: "String"
                    }
                },
                providerSpecificDetails: {
                    serializedName: "providerSpecificDetails",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "instanceType",
                            clientName: "instanceType"
                        },
                        uberParent: "ApplyRecoveryPointProviderSpecificInput",
                        className: "ApplyRecoveryPointProviderSpecificInput"
                    }
                }
            }
        }
    };
    var ApplyRecoveryPointInput = {
        serializedName: "ApplyRecoveryPointInput",
        type: {
            name: "Composite",
            className: "ApplyRecoveryPointInput",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "ApplyRecoveryPointInputProperties"
                    }
                }
            }
        }
    };
    var JobDetails = {
        serializedName: "JobDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "instanceType",
                clientName: "instanceType"
            },
            uberParent: "JobDetails",
            className: "JobDetails",
            modelProperties: {
                affectedObjectDetails: {
                    serializedName: "affectedObjectDetails",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                instanceType: {
                    required: true,
                    serializedName: "instanceType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AsrJobDetails = {
        serializedName: "AsrJobDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
            uberParent: "JobDetails",
            className: "AsrJobDetails",
            modelProperties: __assign({}, JobDetails.type.modelProperties)
        }
    };
    var TaskTypeDetails = {
        serializedName: "TaskTypeDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "instanceType",
                clientName: "instanceType"
            },
            uberParent: "TaskTypeDetails",
            className: "TaskTypeDetails",
            modelProperties: {
                instanceType: {
                    required: true,
                    serializedName: "instanceType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GroupTaskDetails = {
        serializedName: "GroupTaskDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "instanceType",
                clientName: "instanceType"
            },
            uberParent: "GroupTaskDetails",
            className: "GroupTaskDetails",
            modelProperties: {
                childTasks: {
                    serializedName: "childTasks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ASRTask"
                            }
                        }
                    }
                },
                instanceType: {
                    required: true,
                    serializedName: "instanceType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServiceError = {
        serializedName: "ServiceError",
        type: {
            name: "Composite",
            className: "ServiceError",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                possibleCauses: {
                    serializedName: "possibleCauses",
                    type: {
                        name: "String"
                    }
                },
                recommendedAction: {
                    serializedName: "recommendedAction",
                    type: {
                        name: "String"
                    }
                },
                activityId: {
                    serializedName: "activityId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProviderError = {
        serializedName: "ProviderError",
        type: {
            name: "Composite",
            className: "ProviderError",
            modelProperties: {
                errorCode: {
                    serializedName: "errorCode",
                    type: {
                        name: "Number"
                    }
                },
                errorMessage: {
                    serializedName: "errorMessage",
                    type: {
                        name: "String"
                    }
                },
                errorId: {
                    serializedName: "errorId",
                    type: {
                        name: "String"
                    }
                },
                possibleCauses: {
                    serializedName: "possibleCauses",
                    type: {
                        name: "String"
                    }
                },
                recommendedAction: {
                    serializedName: "recommendedAction",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobErrorDetails = {
        serializedName: "JobErrorDetails",
        type: {
            name: "Composite",
            className: "JobErrorDetails",
            modelProperties: {
                serviceErrorDetails: {
                    serializedName: "serviceErrorDetails",
                    type: {
                        name: "Composite",
                        className: "ServiceError"
                    }
                },
                providerErrorDetails: {
                    serializedName: "providerErrorDetails",
                    type: {
                        name: "Composite",
                        className: "ProviderError"
                    }
                },
                errorLevel: {
                    serializedName: "errorLevel",
                    type: {
                        name: "String"
                    }
                },
                creationTime: {
                    serializedName: "creationTime",
                    type: {
                        name: "DateTime"
                    }
                },
                taskId: {
                    serializedName: "taskId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ASRTask = {
        serializedName: "ASRTask",
        type: {
            name: "Composite",
            className: "ASRTask",
            modelProperties: {
                taskId: {
                    serializedName: "taskId",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                allowedActions: {
                    serializedName: "allowedActions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                friendlyName: {
                    serializedName: "friendlyName",
                    type: {
                        name: "String"
                    }
                },
                state: {
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                },
                stateDescription: {
                    serializedName: "stateDescription",
                    type: {
                        name: "String"
                    }
                },
                taskType: {
                    serializedName: "taskType",
                    type: {
                        name: "String"
                    }
                },
                customDetails: {
                    serializedName: "customDetails",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "instanceType",
                            clientName: "instanceType"
                        },
                        uberParent: "TaskTypeDetails",
                        className: "TaskTypeDetails"
                    }
                },
                groupTaskCustomDetails: {
                    serializedName: "groupTaskCustomDetails",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "instanceType",
                            clientName: "instanceType"
                        },
                        uberParent: "GroupTaskDetails",
                        className: "GroupTaskDetails"
                    }
                },
                errors: {
                    serializedName: "errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobErrorDetails"
                            }
                        }
                    }
                }
            }
        }
    };
    var AutomationRunbookTaskDetails = {
        serializedName: "AutomationRunbookTaskDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: TaskTypeDetails.type.polymorphicDiscriminator,
            uberParent: "TaskTypeDetails",
            className: "AutomationRunbookTaskDetails",
            modelProperties: __assign({}, TaskTypeDetails.type.modelProperties, { name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, cloudServiceName: {
                    serializedName: "cloudServiceName",
                    type: {
                        name: "String"
                    }
                }, subscriptionId: {
                    serializedName: "subscriptionId",
                    type: {
                        name: "String"
                    }
                }, accountName: {
                    serializedName: "accountName",
                    type: {
                        name: "String"
                    }
                }, runbookId: {
                    serializedName: "runbookId",
                    type: {
                        name: "String"
                    }
                }, runbookName: {
                    serializedName: "runbookName",
                    type: {
                        name: "String"
                    }
                }, jobId: {
                    serializedName: "jobId",
                    type: {
                        name: "String"
                    }
                }, jobOutput: {
                    serializedName: "jobOutput",
                    type: {
                        name: "String"
                    }
                }, isPrimarySideScript: {
                    serializedName: "isPrimarySideScript",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var FabricSpecificCreationInput = {
        serializedName: "FabricSpecificCreationInput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "instanceType",
                clientName: "instanceType"
            },
            uberParent: "FabricSpecificCreationInput",
            className: "FabricSpecificCreationInput",
            modelProperties: {
                instanceType: {
                    required: true,
                    serializedName: "instanceType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AzureFabricCreationInput = {
        serializedName: "Azure",
        type: {
            name: "Composite",
            polymorphicDiscriminator: FabricSpecificCreationInput.type.polymorphicDiscriminator,
            uberParent: "FabricSpecificCreationInput",
            className: "AzureFabricCreationInput",
            modelProperties: __assign({}, FabricSpecificCreationInput.type.modelProperties, { location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var FabricSpecificDetails = {
        serializedName: "FabricSpecificDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "instanceType",
                clientName: "instanceType"
            },
            uberParent: "FabricSpecificDetails",
            className: "FabricSpecificDetails",
            modelProperties: {
                instanceType: {
                    required: true,
                    serializedName: "instanceType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AzureFabricSpecificDetails = {
        serializedName: "Azure",
        type: {
            name: "Composite",
            polymorphicDiscriminator: FabricSpecificDetails.type.polymorphicDiscriminator,
            uberParent: "FabricSpecificDetails",
            className: "AzureFabricSpecificDetails",
            modelProperties: __assign({}, FabricSpecificDetails.type.modelProperties, { location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, containerIds: {
                    serializedName: "containerIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var FabricSpecificCreateNetworkMappingInput = {
        serializedName: "FabricSpecificCreateNetworkMappingInput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "instanceType",
                clientName: "instanceType"
            },
            uberParent: "FabricSpecificCreateNetworkMappingInput",
            className: "FabricSpecificCreateNetworkMappingInput",
            modelProperties: {
                instanceType: {
                    required: true,
                    serializedName: "instanceType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AzureToAzureCreateNetworkMappingInput = {
        serializedName: "AzureToAzure",
        type: {
            name: "Composite",
            polymorphicDiscriminator: FabricSpecificCreateNetworkMappingInput.type.polymorphicDiscriminator,
            uberParent: "FabricSpecificCreateNetworkMappingInput",
            className: "AzureToAzureCreateNetworkMappingInput",
            modelProperties: __assign({}, FabricSpecificCreateNetworkMappingInput.type.modelProperties, { primaryNetworkId: {
                    serializedName: "primaryNetworkId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var NetworkMappingFabricSpecificSettings = {
        serializedName: "NetworkMappingFabricSpecificSettings",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "instanceType",
                clientName: "instanceType"
            },
            uberParent: "NetworkMappingFabricSpecificSettings",
            className: "NetworkMappingFabricSpecificSettings",
            modelProperties: {
                instanceType: {
                    required: true,
                    serializedName: "instanceType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AzureToAzureNetworkMappingSettings = {
        serializedName: "AzureToAzure",
        type: {
            name: "Composite",
            polymorphicDiscriminator: NetworkMappingFabricSpecificSettings.type.polymorphicDiscriminator,
            uberParent: "NetworkMappingFabricSpecificSettings",
            className: "AzureToAzureNetworkMappingSettings",
            modelProperties: __assign({}, NetworkMappingFabricSpecificSettings.type.modelProperties, { primaryFabricLocation: {
                    serializedName: "primaryFabricLocation",
                    type: {
                        name: "String"
                    }
                }, recoveryFabricLocation: {
                    serializedName: "recoveryFabricLocation",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var FabricSpecificUpdateNetworkMappingInput = {
        serializedName: "FabricSpecificUpdateNetworkMappingInput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "instanceType",
                clientName: "instanceType"
            },
            uberParent: "FabricSpecificUpdateNetworkMappingInput",
            className: "FabricSpecificUpdateNetworkMappingInput",
            modelProperties: {
                instanceType: {
                    required: true,
                    serializedName: "instanceType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AzureToAzureUpdateNetworkMappingInput = {
        serializedName: "AzureToAzure",
        type: {
            name: "Composite",
            polymorphicDiscriminator: FabricSpecificUpdateNetworkMappingInput.type.polymorphicDiscriminator,
            uberParent: "FabricSpecificUpdateNetworkMappingInput",
            className: "AzureToAzureUpdateNetworkMappingInput",
            modelProperties: __assign({}, FabricSpecificUpdateNetworkMappingInput.type.modelProperties, { primaryNetworkId: {
                    serializedName: "primaryNetworkId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var AzureVmDiskDetails = {
        serializedName: "AzureVmDiskDetails",
        type: {
            name: "Composite",
            className: "AzureVmDiskDetails",
            modelProperties: {
                vhdType: {
                    serializedName: "vhdType",
                    type: {
                        name: "String"
                    }
                },
                vhdId: {
                    serializedName: "vhdId",
                    type: {
                        name: "String"
                    }
                },
                vhdName: {
                    serializedName: "vhdName",
                    type: {
                        name: "String"
                    }
                },
                maxSizeMB: {
                    serializedName: "maxSizeMB",
                    type: {
                        name: "String"
                    }
                },
                targetDiskLocation: {
                    serializedName: "targetDiskLocation",
                    type: {
                        name: "String"
                    }
                },
                targetDiskName: {
                    serializedName: "targetDiskName",
                    type: {
                        name: "String"
                    }
                },
                lunId: {
                    serializedName: "lunId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ComputeSizeErrorDetails = {
        serializedName: "ComputeSizeErrorDetails",
        type: {
            name: "Composite",
            className: "ComputeSizeErrorDetails",
            modelProperties: {
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                severity: {
                    serializedName: "severity",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ConfigurationSettings = {
        serializedName: "ConfigurationSettings",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "instanceType",
                clientName: "instanceType"
            },
            uberParent: "ConfigurationSettings",
            className: "ConfigurationSettings",
            modelProperties: {
                instanceType: {
                    required: true,
                    serializedName: "instanceType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ConfigureAlertRequestProperties = {
        serializedName: "ConfigureAlertRequestProperties",
        type: {
            name: "Composite",
            className: "ConfigureAlertRequestProperties",
            modelProperties: {
                sendToOwners: {
                    serializedName: "sendToOwners",
                    type: {
                        name: "String"
                    }
                },
                customEmailAddresses: {
                    serializedName: "customEmailAddresses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                locale: {
                    serializedName: "locale",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ConfigureAlertRequest = {
        serializedName: "ConfigureAlertRequest",
        type: {
            name: "Composite",
            className: "ConfigureAlertRequest",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "ConfigureAlertRequestProperties"
                    }
                }
            }
        }
    };
    var InconsistentVmDetails = {
        serializedName: "InconsistentVmDetails",
        type: {
            name: "Composite",
            className: "InconsistentVmDetails",
            modelProperties: {
                vmName: {
                    serializedName: "vmName",
                    type: {
                        name: "String"
                    }
                },
                cloudName: {
                    serializedName: "cloudName",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    serializedName: "details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                errorIds: {
                    serializedName: "errorIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ConsistencyCheckTaskDetails = {
        serializedName: "ConsistencyCheckTaskDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: TaskTypeDetails.type.polymorphicDiscriminator,
            uberParent: "TaskTypeDetails",
            className: "ConsistencyCheckTaskDetails",
            modelProperties: __assign({}, TaskTypeDetails.type.modelProperties, { vmDetails: {
                    serializedName: "vmDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InconsistentVmDetails"
                            }
                        }
                    }
                } })
        }
    };
    var CreateNetworkMappingInputProperties = {
        serializedName: "CreateNetworkMappingInputProperties",
        type: {
            name: "Composite",
            className: "CreateNetworkMappingInputProperties",
            modelProperties: {
                recoveryFabricName: {
                    serializedName: "recoveryFabricName",
                    type: {
                        name: "String"
                    }
                },
                recoveryNetworkId: {
                    serializedName: "recoveryNetworkId",
                    type: {
                        name: "String"
                    }
                },
                fabricSpecificDetails: {
                    serializedName: "fabricSpecificDetails",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "instanceType",
                            clientName: "instanceType"
                        },
                        uberParent: "FabricSpecificCreateNetworkMappingInput",
                        className: "FabricSpecificCreateNetworkMappingInput"
                    }
                }
            }
        }
    };
    var CreateNetworkMappingInput = {
        serializedName: "CreateNetworkMappingInput",
        type: {
            name: "Composite",
            className: "CreateNetworkMappingInput",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "CreateNetworkMappingInputProperties"
                    }
                }
            }
        }
    };
    var CreatePolicyInputProperties = {
        serializedName: "CreatePolicyInputProperties",
        type: {
            name: "Composite",
            className: "CreatePolicyInputProperties",
            modelProperties: {
                providerSpecificInput: {
                    serializedName: "providerSpecificInput",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "instanceType",
                            clientName: "instanceType"
                        },
                        uberParent: "PolicyProviderSpecificInput",
                        className: "PolicyProviderSpecificInput"
                    }
                }
            }
        }
    };
    var CreatePolicyInput = {
        serializedName: "CreatePolicyInput",
        type: {
            name: "Composite",
            className: "CreatePolicyInput",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "CreatePolicyInputProperties"
                    }
                }
            }
        }
    };
    var CreateProtectionContainerInputProperties = {
        serializedName: "CreateProtectionContainerInputProperties",
        type: {
            name: "Composite",
            className: "CreateProtectionContainerInputProperties",
            modelProperties: {
                providerSpecificInput: {
                    serializedName: "providerSpecificInput",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: {
                                    serializedName: "instanceType",
                                    clientName: "instanceType"
                                },
                                uberParent: "ReplicationProviderSpecificContainerCreationInput",
                                className: "ReplicationProviderSpecificContainerCreationInput"
                            }
                        }
                    }
                }
            }
        }
    };
    var CreateProtectionContainerInput = {
        serializedName: "CreateProtectionContainerInput",
        type: {
            name: "Composite",
            className: "CreateProtectionContainerInput",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "CreateProtectionContainerInputProperties"
                    }
                }
            }
        }
    };
    var CreateProtectionContainerMappingInputProperties = {
        serializedName: "CreateProtectionContainerMappingInputProperties",
        type: {
            name: "Composite",
            className: "CreateProtectionContainerMappingInputProperties",
            modelProperties: {
                targetProtectionContainerId: {
                    serializedName: "targetProtectionContainerId",
                    type: {
                        name: "String"
                    }
                },
                policyId: {
                    serializedName: "policyId",
                    type: {
                        name: "String"
                    }
                },
                providerSpecificInput: {
                    serializedName: "providerSpecificInput",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "instanceType",
                            clientName: "instanceType"
                        },
                        uberParent: "ReplicationProviderSpecificContainerMappingInput",
                        className: "ReplicationProviderSpecificContainerMappingInput"
                    }
                }
            }
        }
    };
    var CreateProtectionContainerMappingInput = {
        serializedName: "CreateProtectionContainerMappingInput",
        type: {
            name: "Composite",
            className: "CreateProtectionContainerMappingInput",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "CreateProtectionContainerMappingInputProperties"
                    }
                }
            }
        }
    };
    var RecoveryPlanProtectedItem = {
        serializedName: "RecoveryPlanProtectedItem",
        type: {
            name: "Composite",
            className: "RecoveryPlanProtectedItem",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                virtualMachineId: {
                    serializedName: "virtualMachineId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RecoveryPlanActionDetails = {
        serializedName: "RecoveryPlanActionDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "instanceType",
                clientName: "instanceType"
            },
            uberParent: "RecoveryPlanActionDetails",
            className: "RecoveryPlanActionDetails",
            modelProperties: {
                instanceType: {
                    required: true,
                    serializedName: "instanceType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RecoveryPlanAction = {
        serializedName: "RecoveryPlanAction",
        type: {
            name: "Composite",
            className: "RecoveryPlanAction",
            modelProperties: {
                actionName: {
                    required: true,
                    serializedName: "actionName",
                    type: {
                        name: "String"
                    }
                },
                failoverTypes: {
                    required: true,
                    serializedName: "failoverTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                failoverDirections: {
                    required: true,
                    serializedName: "failoverDirections",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                customDetails: {
                    required: true,
                    serializedName: "customDetails",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "instanceType",
                            clientName: "instanceType"
                        },
                        uberParent: "RecoveryPlanActionDetails",
                        className: "RecoveryPlanActionDetails"
                    }
                }
            }
        }
    };
    var RecoveryPlanGroup = {
        serializedName: "RecoveryPlanGroup",
        type: {
            name: "Composite",
            className: "RecoveryPlanGroup",
            modelProperties: {
                groupType: {
                    required: true,
                    serializedName: "groupType",
                    type: {
                        name: "String"
                    }
                },
                replicationProtectedItems: {
                    serializedName: "replicationProtectedItems",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RecoveryPlanProtectedItem"
                            }
                        }
                    }
                },
                startGroupActions: {
                    serializedName: "startGroupActions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RecoveryPlanAction"
                            }
                        }
                    }
                },
                endGroupActions: {
                    serializedName: "endGroupActions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RecoveryPlanAction"
                            }
                        }
                    }
                }
            }
        }
    };
    var CreateRecoveryPlanInputProperties = {
        serializedName: "CreateRecoveryPlanInputProperties",
        type: {
            name: "Composite",
            className: "CreateRecoveryPlanInputProperties",
            modelProperties: {
                primaryFabricId: {
                    required: true,
                    serializedName: "primaryFabricId",
                    type: {
                        name: "String"
                    }
                },
                recoveryFabricId: {
                    required: true,
                    serializedName: "recoveryFabricId",
                    type: {
                        name: "String"
                    }
                },
                failoverDeploymentModel: {
                    serializedName: "failoverDeploymentModel",
                    type: {
                        name: "String"
                    }
                },
                groups: {
                    required: true,
                    serializedName: "groups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RecoveryPlanGroup"
                            }
                        }
                    }
                }
            }
        }
    };
    var CreateRecoveryPlanInput = {
        serializedName: "CreateRecoveryPlanInput",
        type: {
            name: "Composite",
            className: "CreateRecoveryPlanInput",
            modelProperties: {
                properties: {
                    required: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "CreateRecoveryPlanInputProperties"
                    }
                }
            }
        }
    };
    var CurrentScenarioDetails = {
        serializedName: "CurrentScenarioDetails",
        type: {
            name: "Composite",
            className: "CurrentScenarioDetails",
            modelProperties: {
                scenarioName: {
                    serializedName: "scenarioName",
                    type: {
                        name: "String"
                    }
                },
                jobId: {
                    serializedName: "jobId",
                    type: {
                        name: "String"
                    }
                },
                startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var DataStore = {
        serializedName: "DataStore",
        type: {
            name: "Composite",
            className: "DataStore",
            modelProperties: {
                symbolicName: {
                    serializedName: "symbolicName",
                    type: {
                        name: "String"
                    }
                },
                uuid: {
                    serializedName: "uuid",
                    type: {
                        name: "String"
                    }
                },
                capacity: {
                    serializedName: "capacity",
                    type: {
                        name: "String"
                    }
                },
                freeSpace: {
                    serializedName: "freeSpace",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DisableProtectionProviderSpecificInput = {
        serializedName: "DisableProtectionProviderSpecificInput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "instanceType",
                clientName: "instanceType"
            },
            uberParent: "DisableProtectionProviderSpecificInput",
            className: "DisableProtectionProviderSpecificInput",
            modelProperties: {
                instanceType: {
                    required: true,
                    serializedName: "instanceType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DisableProtectionInputProperties = {
        serializedName: "DisableProtectionInputProperties",
        type: {
            name: "Composite",
            className: "DisableProtectionInputProperties",
            modelProperties: {
                disableProtectionReason: {
                    serializedName: "disableProtectionReason",
                    type: {
                        name: "String"
                    }
                },
                replicationProviderInput: {
                    serializedName: "replicationProviderInput",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "instanceType",
                            clientName: "instanceType"
                        },
                        uberParent: "DisableProtectionProviderSpecificInput",
                        className: "DisableProtectionProviderSpecificInput"
                    }
                }
            }
        }
    };
    var DisableProtectionInput = {
        serializedName: "DisableProtectionInput",
        type: {
            name: "Composite",
            className: "DisableProtectionInput",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "DisableProtectionInputProperties"
                    }
                }
            }
        }
    };
    var DiscoverProtectableItemRequestProperties = {
        serializedName: "DiscoverProtectableItemRequestProperties",
        type: {
            name: "Composite",
            className: "DiscoverProtectableItemRequestProperties",
            modelProperties: {
                friendlyName: {
                    serializedName: "friendlyName",
                    type: {
                        name: "String"
                    }
                },
                ipAddress: {
                    serializedName: "ipAddress",
                    type: {
                        name: "String"
                    }
                },
                osType: {
                    serializedName: "osType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DiscoverProtectableItemRequest = {
        serializedName: "DiscoverProtectableItemRequest",
        type: {
            name: "Composite",
            className: "DiscoverProtectableItemRequest",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "DiscoverProtectableItemRequestProperties"
                    }
                }
            }
        }
    };
    var DiskDetails = {
        serializedName: "DiskDetails",
        type: {
            name: "Composite",
            className: "DiskDetails",
            modelProperties: {
                maxSizeMB: {
                    serializedName: "maxSizeMB",
                    type: {
                        name: "Number"
                    }
                },
                vhdType: {
                    serializedName: "vhdType",
                    type: {
                        name: "String"
                    }
                },
                vhdId: {
                    serializedName: "vhdId",
                    type: {
                        name: "String"
                    }
                },
                vhdName: {
                    serializedName: "vhdName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DiskVolumeDetails = {
        serializedName: "DiskVolumeDetails",
        type: {
            name: "Composite",
            className: "DiskVolumeDetails",
            modelProperties: {
                label: {
                    serializedName: "label",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Display = {
        serializedName: "Display",
        type: {
            name: "Composite",
            className: "Display",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EnableProtectionInputProperties = {
        serializedName: "EnableProtectionInputProperties",
        type: {
            name: "Composite",
            className: "EnableProtectionInputProperties",
            modelProperties: {
                policyId: {
                    serializedName: "policyId",
                    type: {
                        name: "String"
                    }
                },
                protectableItemId: {
                    serializedName: "protectableItemId",
                    type: {
                        name: "String"
                    }
                },
                providerSpecificDetails: {
                    serializedName: "providerSpecificDetails",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "instanceType",
                            clientName: "instanceType"
                        },
                        uberParent: "EnableProtectionProviderSpecificInput",
                        className: "EnableProtectionProviderSpecificInput"
                    }
                }
            }
        }
    };
    var EnableProtectionInput = {
        serializedName: "EnableProtectionInput",
        type: {
            name: "Composite",
            className: "EnableProtectionInput",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "EnableProtectionInputProperties"
                    }
                }
            }
        }
    };
    var EncryptionDetails = {
        serializedName: "EncryptionDetails",
        type: {
            name: "Composite",
            className: "EncryptionDetails",
            modelProperties: {
                kekState: {
                    serializedName: "kekState",
                    type: {
                        name: "String"
                    }
                },
                kekCertThumbprint: {
                    serializedName: "kekCertThumbprint",
                    type: {
                        name: "String"
                    }
                },
                kekCertExpiryDate: {
                    serializedName: "kekCertExpiryDate",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var EventSpecificDetails = {
        serializedName: "EventSpecificDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "instanceType",
                clientName: "instanceType"
            },
            uberParent: "EventSpecificDetails",
            className: "EventSpecificDetails",
            modelProperties: {
                instanceType: {
                    required: true,
                    serializedName: "instanceType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InnerHealthError = {
        serializedName: "InnerHealthError",
        type: {
            name: "Composite",
            className: "InnerHealthError",
            modelProperties: {
                errorSource: {
                    serializedName: "errorSource",
                    type: {
                        name: "String"
                    }
                },
                errorType: {
                    serializedName: "errorType",
                    type: {
                        name: "String"
                    }
                },
                errorLevel: {
                    serializedName: "errorLevel",
                    type: {
                        name: "String"
                    }
                },
                errorCategory: {
                    serializedName: "errorCategory",
                    type: {
                        name: "String"
                    }
                },
                errorCode: {
                    serializedName: "errorCode",
                    type: {
                        name: "String"
                    }
                },
                summaryMessage: {
                    serializedName: "summaryMessage",
                    type: {
                        name: "String"
                    }
                },
                errorMessage: {
                    serializedName: "errorMessage",
                    type: {
                        name: "String"
                    }
                },
                possibleCauses: {
                    serializedName: "possibleCauses",
                    type: {
                        name: "String"
                    }
                },
                recommendedAction: {
                    serializedName: "recommendedAction",
                    type: {
                        name: "String"
                    }
                },
                creationTimeUtc: {
                    serializedName: "creationTimeUtc",
                    type: {
                        name: "DateTime"
                    }
                },
                recoveryProviderErrorMessage: {
                    serializedName: "recoveryProviderErrorMessage",
                    type: {
                        name: "String"
                    }
                },
                entityId: {
                    serializedName: "entityId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HealthError = {
        serializedName: "HealthError",
        type: {
            name: "Composite",
            className: "HealthError",
            modelProperties: {
                innerHealthErrors: {
                    serializedName: "innerHealthErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InnerHealthError"
                            }
                        }
                    }
                },
                errorSource: {
                    serializedName: "errorSource",
                    type: {
                        name: "String"
                    }
                },
                errorType: {
                    serializedName: "errorType",
                    type: {
                        name: "String"
                    }
                },
                errorLevel: {
                    serializedName: "errorLevel",
                    type: {
                        name: "String"
                    }
                },
                errorCategory: {
                    serializedName: "errorCategory",
                    type: {
                        name: "String"
                    }
                },
                errorCode: {
                    serializedName: "errorCode",
                    type: {
                        name: "String"
                    }
                },
                summaryMessage: {
                    serializedName: "summaryMessage",
                    type: {
                        name: "String"
                    }
                },
                errorMessage: {
                    serializedName: "errorMessage",
                    type: {
                        name: "String"
                    }
                },
                possibleCauses: {
                    serializedName: "possibleCauses",
                    type: {
                        name: "String"
                    }
                },
                recommendedAction: {
                    serializedName: "recommendedAction",
                    type: {
                        name: "String"
                    }
                },
                creationTimeUtc: {
                    serializedName: "creationTimeUtc",
                    type: {
                        name: "DateTime"
                    }
                },
                recoveryProviderErrorMessage: {
                    serializedName: "recoveryProviderErrorMessage",
                    type: {
                        name: "String"
                    }
                },
                entityId: {
                    serializedName: "entityId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventProperties = {
        serializedName: "EventProperties",
        type: {
            name: "Composite",
            className: "EventProperties",
            modelProperties: {
                eventCode: {
                    serializedName: "eventCode",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                eventType: {
                    serializedName: "eventType",
                    type: {
                        name: "String"
                    }
                },
                affectedObjectFriendlyName: {
                    serializedName: "affectedObjectFriendlyName",
                    type: {
                        name: "String"
                    }
                },
                severity: {
                    serializedName: "severity",
                    type: {
                        name: "String"
                    }
                },
                timeOfOccurrence: {
                    serializedName: "timeOfOccurrence",
                    type: {
                        name: "DateTime"
                    }
                },
                fabricId: {
                    serializedName: "fabricId",
                    type: {
                        name: "String"
                    }
                },
                providerSpecificDetails: {
                    serializedName: "providerSpecificDetails",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "instanceType",
                            clientName: "instanceType"
                        },
                        uberParent: "EventProviderSpecificDetails",
                        className: "EventProviderSpecificDetails"
                    }
                },
                eventSpecificDetails: {
                    serializedName: "eventSpecificDetails",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "instanceType",
                            clientName: "instanceType"
                        },
                        uberParent: "EventSpecificDetails",
                        className: "EventSpecificDetails"
                    }
                },
                healthErrors: {
                    serializedName: "healthErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HealthError"
                            }
                        }
                    }
                }
            }
        }
    };
    var Event = {
        serializedName: "Event",
        type: {
            name: "Composite",
            className: "Event",
            modelProperties: __assign({}, Resource.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "EventProperties"
                    }
                } })
        }
    };
    var EventQueryParameter = {
        serializedName: "EventQueryParameter",
        type: {
            name: "Composite",
            className: "EventQueryParameter",
            modelProperties: {
                eventCode: {
                    serializedName: "eventCode",
                    type: {
                        name: "String"
                    }
                },
                severity: {
                    serializedName: "severity",
                    type: {
                        name: "String"
                    }
                },
                eventType: {
                    serializedName: "eventType",
                    type: {
                        name: "String"
                    }
                },
                fabricName: {
                    serializedName: "fabricName",
                    type: {
                        name: "String"
                    }
                },
                affectedObjectFriendlyName: {
                    serializedName: "affectedObjectFriendlyName",
                    type: {
                        name: "String"
                    }
                },
                startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var ExportJobDetails = {
        serializedName: "ExportJobDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
            uberParent: "JobDetails",
            className: "ExportJobDetails",
            modelProperties: __assign({}, JobDetails.type.modelProperties, { blobUri: {
                    serializedName: "blobUri",
                    type: {
                        name: "String"
                    }
                }, sasToken: {
                    serializedName: "sasToken",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var FabricProperties = {
        serializedName: "FabricProperties",
        type: {
            name: "Composite",
            className: "FabricProperties",
            modelProperties: {
                friendlyName: {
                    serializedName: "friendlyName",
                    type: {
                        name: "String"
                    }
                },
                encryptionDetails: {
                    serializedName: "encryptionDetails",
                    type: {
                        name: "Composite",
                        className: "EncryptionDetails"
                    }
                },
                rolloverEncryptionDetails: {
                    serializedName: "rolloverEncryptionDetails",
                    type: {
                        name: "Composite",
                        className: "EncryptionDetails"
                    }
                },
                internalIdentifier: {
                    serializedName: "internalIdentifier",
                    type: {
                        name: "String"
                    }
                },
                bcdrState: {
                    serializedName: "bcdrState",
                    type: {
                        name: "String"
                    }
                },
                customDetails: {
                    serializedName: "customDetails",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "instanceType",
                            clientName: "instanceType"
                        },
                        uberParent: "FabricSpecificDetails",
                        className: "FabricSpecificDetails"
                    }
                },
                healthErrorDetails: {
                    serializedName: "healthErrorDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HealthError"
                            }
                        }
                    }
                },
                health: {
                    serializedName: "health",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Fabric = {
        serializedName: "Fabric",
        type: {
            name: "Composite",
            className: "Fabric",
            modelProperties: __assign({}, Resource.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "FabricProperties"
                    }
                } })
        }
    };
    var FabricCreationInputProperties = {
        serializedName: "FabricCreationInputProperties",
        type: {
            name: "Composite",
            className: "FabricCreationInputProperties",
            modelProperties: {
                customDetails: {
                    serializedName: "customDetails",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "instanceType",
                            clientName: "instanceType"
                        },
                        uberParent: "FabricSpecificCreationInput",
                        className: "FabricSpecificCreationInput"
                    }
                }
            }
        }
    };
    var FabricCreationInput = {
        serializedName: "FabricCreationInput",
        type: {
            name: "Composite",
            className: "FabricCreationInput",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "FabricCreationInputProperties"
                    }
                }
            }
        }
    };
    var JobEntity = {
        serializedName: "JobEntity",
        type: {
            name: "Composite",
            className: "JobEntity",
            modelProperties: {
                jobId: {
                    serializedName: "jobId",
                    type: {
                        name: "String"
                    }
                },
                jobFriendlyName: {
                    serializedName: "jobFriendlyName",
                    type: {
                        name: "String"
                    }
                },
                targetObjectId: {
                    serializedName: "targetObjectId",
                    type: {
                        name: "String"
                    }
                },
                targetObjectName: {
                    serializedName: "targetObjectName",
                    type: {
                        name: "String"
                    }
                },
                targetInstanceType: {
                    serializedName: "targetInstanceType",
                    type: {
                        name: "String"
                    }
                },
                jobScenarioName: {
                    serializedName: "jobScenarioName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FabricReplicationGroupTaskDetails = {
        serializedName: "FabricReplicationGroupTaskDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: TaskTypeDetails.type.polymorphicDiscriminator,
            uberParent: "TaskTypeDetails",
            className: "FabricReplicationGroupTaskDetails",
            modelProperties: __assign({}, TaskTypeDetails.type.modelProperties, { skippedReason: {
                    serializedName: "skippedReason",
                    type: {
                        name: "String"
                    }
                }, skippedReasonString: {
                    serializedName: "skippedReasonString",
                    type: {
                        name: "String"
                    }
                }, jobTask: {
                    serializedName: "jobTask",
                    type: {
                        name: "Composite",
                        className: "JobEntity"
                    }
                } })
        }
    };
    var FailoverReplicationProtectedItemDetails = {
        serializedName: "FailoverReplicationProtectedItemDetails",
        type: {
            name: "Composite",
            className: "FailoverReplicationProtectedItemDetails",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                friendlyName: {
                    serializedName: "friendlyName",
                    type: {
                        name: "String"
                    }
                },
                testVmName: {
                    serializedName: "testVmName",
                    type: {
                        name: "String"
                    }
                },
                testVmFriendlyName: {
                    serializedName: "testVmFriendlyName",
                    type: {
                        name: "String"
                    }
                },
                networkConnectionStatus: {
                    serializedName: "networkConnectionStatus",
                    type: {
                        name: "String"
                    }
                },
                networkFriendlyName: {
                    serializedName: "networkFriendlyName",
                    type: {
                        name: "String"
                    }
                },
                subnet: {
                    serializedName: "subnet",
                    type: {
                        name: "String"
                    }
                },
                recoveryPointId: {
                    serializedName: "recoveryPointId",
                    type: {
                        name: "String"
                    }
                },
                recoveryPointTime: {
                    serializedName: "recoveryPointTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var FailoverJobDetails = {
        serializedName: "FailoverJobDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
            uberParent: "JobDetails",
            className: "FailoverJobDetails",
            modelProperties: __assign({}, JobDetails.type.modelProperties, { protectedItemDetails: {
                    serializedName: "protectedItemDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FailoverReplicationProtectedItemDetails"
                            }
                        }
                    }
                } })
        }
    };
    var FailoverProcessServerRequestProperties = {
        serializedName: "FailoverProcessServerRequestProperties",
        type: {
            name: "Composite",
            className: "FailoverProcessServerRequestProperties",
            modelProperties: {
                containerName: {
                    serializedName: "containerName",
                    type: {
                        name: "String"
                    }
                },
                sourceProcessServerId: {
                    serializedName: "sourceProcessServerId",
                    type: {
                        name: "String"
                    }
                },
                targetProcessServerId: {
                    serializedName: "targetProcessServerId",
                    type: {
                        name: "String"
                    }
                },
                vmsToMigrate: {
                    serializedName: "vmsToMigrate",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                updateType: {
                    serializedName: "updateType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FailoverProcessServerRequest = {
        serializedName: "FailoverProcessServerRequest",
        type: {
            name: "Composite",
            className: "FailoverProcessServerRequest",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "FailoverProcessServerRequestProperties"
                    }
                }
            }
        }
    };
    var HealthErrorSummary = {
        serializedName: "HealthErrorSummary",
        type: {
            name: "Composite",
            className: "HealthErrorSummary",
            modelProperties: {
                summaryCode: {
                    serializedName: "summaryCode",
                    type: {
                        name: "String"
                    }
                },
                category: {
                    serializedName: "category",
                    type: {
                        name: "String"
                    }
                },
                severity: {
                    serializedName: "severity",
                    type: {
                        name: "String"
                    }
                },
                summaryMessage: {
                    serializedName: "summaryMessage",
                    type: {
                        name: "String"
                    }
                },
                affectedResourceType: {
                    serializedName: "affectedResourceType",
                    type: {
                        name: "String"
                    }
                },
                affectedResourceSubtype: {
                    serializedName: "affectedResourceSubtype",
                    type: {
                        name: "String"
                    }
                },
                affectedResourceCorrelationIds: {
                    serializedName: "affectedResourceCorrelationIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var HyperVReplica2012EventDetails = {
        serializedName: "HyperVReplica2012",
        type: {
            name: "Composite",
            polymorphicDiscriminator: EventProviderSpecificDetails.type.polymorphicDiscriminator,
            uberParent: "EventProviderSpecificDetails",
            className: "HyperVReplica2012EventDetails",
            modelProperties: __assign({}, EventProviderSpecificDetails.type.modelProperties, { containerName: {
                    serializedName: "containerName",
                    type: {
                        name: "String"
                    }
                }, fabricName: {
                    serializedName: "fabricName",
                    type: {
                        name: "String"
                    }
                }, remoteContainerName: {
                    serializedName: "remoteContainerName",
                    type: {
                        name: "String"
                    }
                }, remoteFabricName: {
                    serializedName: "remoteFabricName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var HyperVReplica2012R2EventDetails = {
        serializedName: "HyperVReplica2012R2",
        type: {
            name: "Composite",
            polymorphicDiscriminator: EventProviderSpecificDetails.type.polymorphicDiscriminator,
            uberParent: "EventProviderSpecificDetails",
            className: "HyperVReplica2012R2EventDetails",
            modelProperties: __assign({}, EventProviderSpecificDetails.type.modelProperties, { containerName: {
                    serializedName: "containerName",
                    type: {
                        name: "String"
                    }
                }, fabricName: {
                    serializedName: "fabricName",
                    type: {
                        name: "String"
                    }
                }, remoteContainerName: {
                    serializedName: "remoteContainerName",
                    type: {
                        name: "String"
                    }
                }, remoteFabricName: {
                    serializedName: "remoteFabricName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var HyperVReplicaAzureApplyRecoveryPointInput = {
        serializedName: "HyperVReplicaAzure",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ApplyRecoveryPointProviderSpecificInput.type.polymorphicDiscriminator,
            uberParent: "ApplyRecoveryPointProviderSpecificInput",
            className: "HyperVReplicaAzureApplyRecoveryPointInput",
            modelProperties: __assign({}, ApplyRecoveryPointProviderSpecificInput.type.modelProperties, { vaultLocation: {
                    serializedName: "vaultLocation",
                    type: {
                        name: "String"
                    }
                }, primaryKekCertificatePfx: {
                    serializedName: "primaryKekCertificatePfx",
                    type: {
                        name: "String"
                    }
                }, secondaryKekCertificatePfx: {
                    serializedName: "secondaryKekCertificatePfx",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var HyperVReplicaAzureEnableProtectionInput = {
        serializedName: "HyperVReplicaAzure",
        type: {
            name: "Composite",
            polymorphicDiscriminator: EnableProtectionProviderSpecificInput.type.polymorphicDiscriminator,
            uberParent: "EnableProtectionProviderSpecificInput",
            className: "HyperVReplicaAzureEnableProtectionInput",
            modelProperties: __assign({}, EnableProtectionProviderSpecificInput.type.modelProperties, { hvHostVmId: {
                    serializedName: "hvHostVmId",
                    type: {
                        name: "String"
                    }
                }, vmName: {
                    serializedName: "vmName",
                    type: {
                        name: "String"
                    }
                }, osType: {
                    serializedName: "osType",
                    type: {
                        name: "String"
                    }
                }, vhdId: {
                    serializedName: "vhdId",
                    type: {
                        name: "String"
                    }
                }, targetStorageAccountId: {
                    serializedName: "targetStorageAccountId",
                    type: {
                        name: "String"
                    }
                }, targetAzureNetworkId: {
                    serializedName: "targetAzureNetworkId",
                    type: {
                        name: "String"
                    }
                }, targetAzureSubnetId: {
                    serializedName: "targetAzureSubnetId",
                    type: {
                        name: "String"
                    }
                }, enableRdpOnTargetOption: {
                    serializedName: "enableRdpOnTargetOption",
                    type: {
                        name: "String"
                    }
                }, targetAzureVmName: {
                    serializedName: "targetAzureVmName",
                    type: {
                        name: "String"
                    }
                }, logStorageAccountId: {
                    serializedName: "logStorageAccountId",
                    type: {
                        name: "String"
                    }
                }, disksToInclude: {
                    serializedName: "disksToInclude",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, targetAzureV1ResourceGroupId: {
                    serializedName: "targetAzureV1ResourceGroupId",
                    type: {
                        name: "String"
                    }
                }, targetAzureV2ResourceGroupId: {
                    serializedName: "targetAzureV2ResourceGroupId",
                    type: {
                        name: "String"
                    }
                }, useManagedDisks: {
                    serializedName: "useManagedDisks",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var HyperVReplicaAzureEventDetails = {
        serializedName: "HyperVReplicaAzure",
        type: {
            name: "Composite",
            polymorphicDiscriminator: EventProviderSpecificDetails.type.polymorphicDiscriminator,
            uberParent: "EventProviderSpecificDetails",
            className: "HyperVReplicaAzureEventDetails",
            modelProperties: __assign({}, EventProviderSpecificDetails.type.modelProperties, { containerName: {
                    serializedName: "containerName",
                    type: {
                        name: "String"
                    }
                }, fabricName: {
                    serializedName: "fabricName",
                    type: {
                        name: "String"
                    }
                }, remoteContainerName: {
                    serializedName: "remoteContainerName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var HyperVReplicaAzureFailbackProviderInput = {
        serializedName: "HyperVReplicaAzureFailback",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProviderSpecificFailoverInput.type.polymorphicDiscriminator,
            uberParent: "ProviderSpecificFailoverInput",
            className: "HyperVReplicaAzureFailbackProviderInput",
            modelProperties: __assign({}, ProviderSpecificFailoverInput.type.modelProperties, { dataSyncOption: {
                    serializedName: "dataSyncOption",
                    type: {
                        name: "String"
                    }
                }, recoveryVmCreationOption: {
                    serializedName: "recoveryVmCreationOption",
                    type: {
                        name: "String"
                    }
                }, providerIdForAlternateRecovery: {
                    serializedName: "providerIdForAlternateRecovery",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var HyperVReplicaAzureFailoverProviderInput = {
        serializedName: "HyperVReplicaAzure",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProviderSpecificFailoverInput.type.polymorphicDiscriminator,
            uberParent: "ProviderSpecificFailoverInput",
            className: "HyperVReplicaAzureFailoverProviderInput",
            modelProperties: __assign({}, ProviderSpecificFailoverInput.type.modelProperties, { vaultLocation: {
                    serializedName: "vaultLocation",
                    type: {
                        name: "String"
                    }
                }, primaryKekCertificatePfx: {
                    serializedName: "primaryKekCertificatePfx",
                    type: {
                        name: "String"
                    }
                }, secondaryKekCertificatePfx: {
                    serializedName: "secondaryKekCertificatePfx",
                    type: {
                        name: "String"
                    }
                }, recoveryPointId: {
                    serializedName: "recoveryPointId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var HyperVReplicaAzurePolicyDetails = {
        serializedName: "HyperVReplicaAzure",
        type: {
            name: "Composite",
            polymorphicDiscriminator: PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
            uberParent: "PolicyProviderSpecificDetails",
            className: "HyperVReplicaAzurePolicyDetails",
            modelProperties: __assign({}, PolicyProviderSpecificDetails.type.modelProperties, { recoveryPointHistoryDurationInHours: {
                    serializedName: "recoveryPointHistoryDurationInHours",
                    type: {
                        name: "Number"
                    }
                }, applicationConsistentSnapshotFrequencyInHours: {
                    serializedName: "applicationConsistentSnapshotFrequencyInHours",
                    type: {
                        name: "Number"
                    }
                }, replicationInterval: {
                    serializedName: "replicationInterval",
                    type: {
                        name: "Number"
                    }
                }, onlineReplicationStartTime: {
                    serializedName: "onlineReplicationStartTime",
                    type: {
                        name: "String"
                    }
                }, encryption: {
                    serializedName: "encryption",
                    type: {
                        name: "String"
                    }
                }, activeStorageAccountId: {
                    serializedName: "activeStorageAccountId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var HyperVReplicaAzurePolicyInput = {
        serializedName: "HyperVReplicaAzure",
        type: {
            name: "Composite",
            polymorphicDiscriminator: PolicyProviderSpecificInput.type.polymorphicDiscriminator,
            uberParent: "PolicyProviderSpecificInput",
            className: "HyperVReplicaAzurePolicyInput",
            modelProperties: __assign({}, PolicyProviderSpecificInput.type.modelProperties, { recoveryPointHistoryDuration: {
                    serializedName: "recoveryPointHistoryDuration",
                    type: {
                        name: "Number"
                    }
                }, applicationConsistentSnapshotFrequencyInHours: {
                    serializedName: "applicationConsistentSnapshotFrequencyInHours",
                    type: {
                        name: "Number"
                    }
                }, replicationInterval: {
                    serializedName: "replicationInterval",
                    type: {
                        name: "Number"
                    }
                }, onlineReplicationStartTime: {
                    serializedName: "onlineReplicationStartTime",
                    type: {
                        name: "String"
                    }
                }, storageAccounts: {
                    serializedName: "storageAccounts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var InitialReplicationDetails = {
        serializedName: "InitialReplicationDetails",
        type: {
            name: "Composite",
            className: "InitialReplicationDetails",
            modelProperties: {
                initialReplicationType: {
                    serializedName: "initialReplicationType",
                    type: {
                        name: "String"
                    }
                },
                initialReplicationProgressPercentage: {
                    serializedName: "initialReplicationProgressPercentage",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OSDetails = {
        serializedName: "OSDetails",
        type: {
            name: "Composite",
            className: "OSDetails",
            modelProperties: {
                osType: {
                    serializedName: "osType",
                    type: {
                        name: "String"
                    }
                },
                productType: {
                    serializedName: "productType",
                    type: {
                        name: "String"
                    }
                },
                osEdition: {
                    serializedName: "osEdition",
                    type: {
                        name: "String"
                    }
                },
                oSVersion: {
                    serializedName: "oSVersion",
                    type: {
                        name: "String"
                    }
                },
                oSMajorVersion: {
                    serializedName: "oSMajorVersion",
                    type: {
                        name: "String"
                    }
                },
                oSMinorVersion: {
                    serializedName: "oSMinorVersion",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HyperVReplicaAzureReplicationDetails = {
        serializedName: "HyperVReplicaAzure",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ReplicationProviderSpecificSettings.type.polymorphicDiscriminator,
            uberParent: "ReplicationProviderSpecificSettings",
            className: "HyperVReplicaAzureReplicationDetails",
            modelProperties: __assign({}, ReplicationProviderSpecificSettings.type.modelProperties, { azureVmDiskDetails: {
                    serializedName: "azureVmDiskDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AzureVmDiskDetails"
                            }
                        }
                    }
                }, recoveryAzureVmName: {
                    serializedName: "recoveryAzureVmName",
                    type: {
                        name: "String"
                    }
                }, recoveryAzureVMSize: {
                    serializedName: "recoveryAzureVMSize",
                    type: {
                        name: "String"
                    }
                }, recoveryAzureStorageAccount: {
                    serializedName: "recoveryAzureStorageAccount",
                    type: {
                        name: "String"
                    }
                }, recoveryAzureLogStorageAccountId: {
                    serializedName: "recoveryAzureLogStorageAccountId",
                    type: {
                        name: "String"
                    }
                }, lastReplicatedTime: {
                    serializedName: "lastReplicatedTime",
                    type: {
                        name: "DateTime"
                    }
                }, rpoInSeconds: {
                    serializedName: "rpoInSeconds",
                    type: {
                        name: "Number"
                    }
                }, lastRpoCalculatedTime: {
                    serializedName: "lastRpoCalculatedTime",
                    type: {
                        name: "DateTime"
                    }
                }, vmId: {
                    serializedName: "vmId",
                    type: {
                        name: "String"
                    }
                }, vmProtectionState: {
                    serializedName: "vmProtectionState",
                    type: {
                        name: "String"
                    }
                }, vmProtectionStateDescription: {
                    serializedName: "vmProtectionStateDescription",
                    type: {
                        name: "String"
                    }
                }, initialReplicationDetails: {
                    serializedName: "initialReplicationDetails",
                    type: {
                        name: "Composite",
                        className: "InitialReplicationDetails"
                    }
                }, vmNics: {
                    serializedName: "vmNics",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VMNicDetails"
                            }
                        }
                    }
                }, selectedRecoveryAzureNetworkId: {
                    serializedName: "selectedRecoveryAzureNetworkId",
                    type: {
                        name: "String"
                    }
                }, selectedSourceNicId: {
                    serializedName: "selectedSourceNicId",
                    type: {
                        name: "String"
                    }
                }, encryption: {
                    serializedName: "encryption",
                    type: {
                        name: "String"
                    }
                }, oSDetails: {
                    serializedName: "oSDetails",
                    type: {
                        name: "Composite",
                        className: "OSDetails"
                    }
                }, sourceVmRamSizeInMB: {
                    serializedName: "sourceVmRamSizeInMB",
                    type: {
                        name: "Number"
                    }
                }, sourceVmCpuCount: {
                    serializedName: "sourceVmCpuCount",
                    type: {
                        name: "Number"
                    }
                }, enableRdpOnTargetOption: {
                    serializedName: "enableRdpOnTargetOption",
                    type: {
                        name: "String"
                    }
                }, recoveryAzureResourceGroupId: {
                    serializedName: "recoveryAzureResourceGroupId",
                    type: {
                        name: "String"
                    }
                }, recoveryAvailabilitySetId: {
                    serializedName: "recoveryAvailabilitySetId",
                    type: {
                        name: "String"
                    }
                }, useManagedDisks: {
                    serializedName: "useManagedDisks",
                    type: {
                        name: "String"
                    }
                }, licenseType: {
                    serializedName: "licenseType",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var HyperVReplicaAzureReprotectInput = {
        serializedName: "HyperVReplicaAzure",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ReverseReplicationProviderSpecificInput.type.polymorphicDiscriminator,
            uberParent: "ReverseReplicationProviderSpecificInput",
            className: "HyperVReplicaAzureReprotectInput",
            modelProperties: __assign({}, ReverseReplicationProviderSpecificInput.type.modelProperties, { hvHostVmId: {
                    serializedName: "hvHostVmId",
                    type: {
                        name: "String"
                    }
                }, vmName: {
                    serializedName: "vmName",
                    type: {
                        name: "String"
                    }
                }, osType: {
                    serializedName: "osType",
                    type: {
                        name: "String"
                    }
                }, vHDId: {
                    serializedName: "vHDId",
                    type: {
                        name: "String"
                    }
                }, storageAccountId: {
                    serializedName: "storageAccountId",
                    type: {
                        name: "String"
                    }
                }, logStorageAccountId: {
                    serializedName: "logStorageAccountId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var HyperVReplicaAzureUpdateReplicationProtectedItemInput = {
        serializedName: "HyperVReplicaAzure",
        type: {
            name: "Composite",
            polymorphicDiscriminator: UpdateReplicationProtectedItemProviderInput.type.polymorphicDiscriminator,
            uberParent: "UpdateReplicationProtectedItemProviderInput",
            className: "HyperVReplicaAzureUpdateReplicationProtectedItemInput",
            modelProperties: __assign({}, UpdateReplicationProtectedItemProviderInput.type.modelProperties, { recoveryAzureV1ResourceGroupId: {
                    serializedName: "recoveryAzureV1ResourceGroupId",
                    type: {
                        name: "String"
                    }
                }, recoveryAzureV2ResourceGroupId: {
                    serializedName: "recoveryAzureV2ResourceGroupId",
                    type: {
                        name: "String"
                    }
                }, useManagedDisks: {
                    serializedName: "useManagedDisks",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var HyperVReplicaBaseEventDetails = {
        serializedName: "HyperVReplicaBaseEventDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: EventProviderSpecificDetails.type.polymorphicDiscriminator,
            uberParent: "EventProviderSpecificDetails",
            className: "HyperVReplicaBaseEventDetails",
            modelProperties: __assign({}, EventProviderSpecificDetails.type.modelProperties, { containerName: {
                    serializedName: "containerName",
                    type: {
                        name: "String"
                    }
                }, fabricName: {
                    serializedName: "fabricName",
                    type: {
                        name: "String"
                    }
                }, remoteContainerName: {
                    serializedName: "remoteContainerName",
                    type: {
                        name: "String"
                    }
                }, remoteFabricName: {
                    serializedName: "remoteFabricName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var HyperVReplicaBasePolicyDetails = {
        serializedName: "HyperVReplicaBasePolicyDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
            uberParent: "PolicyProviderSpecificDetails",
            className: "HyperVReplicaBasePolicyDetails",
            modelProperties: __assign({}, PolicyProviderSpecificDetails.type.modelProperties, { recoveryPoints: {
                    serializedName: "recoveryPoints",
                    type: {
                        name: "Number"
                    }
                }, applicationConsistentSnapshotFrequencyInHours: {
                    serializedName: "applicationConsistentSnapshotFrequencyInHours",
                    type: {
                        name: "Number"
                    }
                }, compression: {
                    serializedName: "compression",
                    type: {
                        name: "String"
                    }
                }, initialReplicationMethod: {
                    serializedName: "initialReplicationMethod",
                    type: {
                        name: "String"
                    }
                }, onlineReplicationStartTime: {
                    serializedName: "onlineReplicationStartTime",
                    type: {
                        name: "String"
                    }
                }, offlineReplicationImportPath: {
                    serializedName: "offlineReplicationImportPath",
                    type: {
                        name: "String"
                    }
                }, offlineReplicationExportPath: {
                    serializedName: "offlineReplicationExportPath",
                    type: {
                        name: "String"
                    }
                }, replicationPort: {
                    serializedName: "replicationPort",
                    type: {
                        name: "Number"
                    }
                }, allowedAuthenticationType: {
                    serializedName: "allowedAuthenticationType",
                    type: {
                        name: "Number"
                    }
                }, replicaDeletionOption: {
                    serializedName: "replicaDeletionOption",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var HyperVReplicaBaseReplicationDetails = {
        serializedName: "HyperVReplicaBaseReplicationDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ReplicationProviderSpecificSettings.type.polymorphicDiscriminator,
            uberParent: "ReplicationProviderSpecificSettings",
            className: "HyperVReplicaBaseReplicationDetails",
            modelProperties: __assign({}, ReplicationProviderSpecificSettings.type.modelProperties, { lastReplicatedTime: {
                    serializedName: "lastReplicatedTime",
                    type: {
                        name: "DateTime"
                    }
                }, vmNics: {
                    serializedName: "vmNics",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VMNicDetails"
                            }
                        }
                    }
                }, vmId: {
                    serializedName: "vmId",
                    type: {
                        name: "String"
                    }
                }, vmProtectionState: {
                    serializedName: "vmProtectionState",
                    type: {
                        name: "String"
                    }
                }, vmProtectionStateDescription: {
                    serializedName: "vmProtectionStateDescription",
                    type: {
                        name: "String"
                    }
                }, initialReplicationDetails: {
                    serializedName: "initialReplicationDetails",
                    type: {
                        name: "Composite",
                        className: "InitialReplicationDetails"
                    }
                }, vMDiskDetails: {
                    serializedName: "vMDiskDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DiskDetails"
                            }
                        }
                    }
                } })
        }
    };
    var HyperVReplicaBluePolicyDetails = {
        serializedName: "HyperVReplica2012R2",
        type: {
            name: "Composite",
            polymorphicDiscriminator: PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
            uberParent: "PolicyProviderSpecificDetails",
            className: "HyperVReplicaBluePolicyDetails",
            modelProperties: __assign({}, PolicyProviderSpecificDetails.type.modelProperties, { replicationFrequencyInSeconds: {
                    serializedName: "replicationFrequencyInSeconds",
                    type: {
                        name: "Number"
                    }
                }, recoveryPoints: {
                    serializedName: "recoveryPoints",
                    type: {
                        name: "Number"
                    }
                }, applicationConsistentSnapshotFrequencyInHours: {
                    serializedName: "applicationConsistentSnapshotFrequencyInHours",
                    type: {
                        name: "Number"
                    }
                }, compression: {
                    serializedName: "compression",
                    type: {
                        name: "String"
                    }
                }, initialReplicationMethod: {
                    serializedName: "initialReplicationMethod",
                    type: {
                        name: "String"
                    }
                }, onlineReplicationStartTime: {
                    serializedName: "onlineReplicationStartTime",
                    type: {
                        name: "String"
                    }
                }, offlineReplicationImportPath: {
                    serializedName: "offlineReplicationImportPath",
                    type: {
                        name: "String"
                    }
                }, offlineReplicationExportPath: {
                    serializedName: "offlineReplicationExportPath",
                    type: {
                        name: "String"
                    }
                }, replicationPort: {
                    serializedName: "replicationPort",
                    type: {
                        name: "Number"
                    }
                }, allowedAuthenticationType: {
                    serializedName: "allowedAuthenticationType",
                    type: {
                        name: "Number"
                    }
                }, replicaDeletionOption: {
                    serializedName: "replicaDeletionOption",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var HyperVReplicaBluePolicyInput = {
        serializedName: "HyperVReplica2012R2",
        type: {
            name: "Composite",
            polymorphicDiscriminator: PolicyProviderSpecificInput.type.polymorphicDiscriminator,
            uberParent: "PolicyProviderSpecificInput",
            className: "HyperVReplicaBluePolicyInput",
            modelProperties: __assign({}, PolicyProviderSpecificInput.type.modelProperties, { replicationFrequencyInSeconds: {
                    serializedName: "replicationFrequencyInSeconds",
                    type: {
                        name: "Number"
                    }
                }, recoveryPoints: {
                    serializedName: "recoveryPoints",
                    type: {
                        name: "Number"
                    }
                }, applicationConsistentSnapshotFrequencyInHours: {
                    serializedName: "applicationConsistentSnapshotFrequencyInHours",
                    type: {
                        name: "Number"
                    }
                }, compression: {
                    serializedName: "compression",
                    type: {
                        name: "String"
                    }
                }, initialReplicationMethod: {
                    serializedName: "initialReplicationMethod",
                    type: {
                        name: "String"
                    }
                }, onlineReplicationStartTime: {
                    serializedName: "onlineReplicationStartTime",
                    type: {
                        name: "String"
                    }
                }, offlineReplicationImportPath: {
                    serializedName: "offlineReplicationImportPath",
                    type: {
                        name: "String"
                    }
                }, offlineReplicationExportPath: {
                    serializedName: "offlineReplicationExportPath",
                    type: {
                        name: "String"
                    }
                }, replicationPort: {
                    serializedName: "replicationPort",
                    type: {
                        name: "Number"
                    }
                }, allowedAuthenticationType: {
                    serializedName: "allowedAuthenticationType",
                    type: {
                        name: "Number"
                    }
                }, replicaDeletion: {
                    serializedName: "replicaDeletion",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var HyperVReplicaBlueReplicationDetails = {
        serializedName: "HyperVReplica2012R2",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ReplicationProviderSpecificSettings.type.polymorphicDiscriminator,
            uberParent: "ReplicationProviderSpecificSettings",
            className: "HyperVReplicaBlueReplicationDetails",
            modelProperties: __assign({}, ReplicationProviderSpecificSettings.type.modelProperties, { lastReplicatedTime: {
                    serializedName: "lastReplicatedTime",
                    type: {
                        name: "DateTime"
                    }
                }, vmNics: {
                    serializedName: "vmNics",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VMNicDetails"
                            }
                        }
                    }
                }, vmId: {
                    serializedName: "vmId",
                    type: {
                        name: "String"
                    }
                }, vmProtectionState: {
                    serializedName: "vmProtectionState",
                    type: {
                        name: "String"
                    }
                }, vmProtectionStateDescription: {
                    serializedName: "vmProtectionStateDescription",
                    type: {
                        name: "String"
                    }
                }, initialReplicationDetails: {
                    serializedName: "initialReplicationDetails",
                    type: {
                        name: "Composite",
                        className: "InitialReplicationDetails"
                    }
                }, vMDiskDetails: {
                    serializedName: "vMDiskDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DiskDetails"
                            }
                        }
                    }
                } })
        }
    };
    var HyperVReplicaPolicyDetails = {
        serializedName: "HyperVReplica2012",
        type: {
            name: "Composite",
            polymorphicDiscriminator: PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
            uberParent: "PolicyProviderSpecificDetails",
            className: "HyperVReplicaPolicyDetails",
            modelProperties: __assign({}, PolicyProviderSpecificDetails.type.modelProperties, { recoveryPoints: {
                    serializedName: "recoveryPoints",
                    type: {
                        name: "Number"
                    }
                }, applicationConsistentSnapshotFrequencyInHours: {
                    serializedName: "applicationConsistentSnapshotFrequencyInHours",
                    type: {
                        name: "Number"
                    }
                }, compression: {
                    serializedName: "compression",
                    type: {
                        name: "String"
                    }
                }, initialReplicationMethod: {
                    serializedName: "initialReplicationMethod",
                    type: {
                        name: "String"
                    }
                }, onlineReplicationStartTime: {
                    serializedName: "onlineReplicationStartTime",
                    type: {
                        name: "String"
                    }
                }, offlineReplicationImportPath: {
                    serializedName: "offlineReplicationImportPath",
                    type: {
                        name: "String"
                    }
                }, offlineReplicationExportPath: {
                    serializedName: "offlineReplicationExportPath",
                    type: {
                        name: "String"
                    }
                }, replicationPort: {
                    serializedName: "replicationPort",
                    type: {
                        name: "Number"
                    }
                }, allowedAuthenticationType: {
                    serializedName: "allowedAuthenticationType",
                    type: {
                        name: "Number"
                    }
                }, replicaDeletionOption: {
                    serializedName: "replicaDeletionOption",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var HyperVReplicaPolicyInput = {
        serializedName: "HyperVReplica2012",
        type: {
            name: "Composite",
            polymorphicDiscriminator: PolicyProviderSpecificInput.type.polymorphicDiscriminator,
            uberParent: "PolicyProviderSpecificInput",
            className: "HyperVReplicaPolicyInput",
            modelProperties: __assign({}, PolicyProviderSpecificInput.type.modelProperties, { recoveryPoints: {
                    serializedName: "recoveryPoints",
                    type: {
                        name: "Number"
                    }
                }, applicationConsistentSnapshotFrequencyInHours: {
                    serializedName: "applicationConsistentSnapshotFrequencyInHours",
                    type: {
                        name: "Number"
                    }
                }, compression: {
                    serializedName: "compression",
                    type: {
                        name: "String"
                    }
                }, initialReplicationMethod: {
                    serializedName: "initialReplicationMethod",
                    type: {
                        name: "String"
                    }
                }, onlineReplicationStartTime: {
                    serializedName: "onlineReplicationStartTime",
                    type: {
                        name: "String"
                    }
                }, offlineReplicationImportPath: {
                    serializedName: "offlineReplicationImportPath",
                    type: {
                        name: "String"
                    }
                }, offlineReplicationExportPath: {
                    serializedName: "offlineReplicationExportPath",
                    type: {
                        name: "String"
                    }
                }, replicationPort: {
                    serializedName: "replicationPort",
                    type: {
                        name: "Number"
                    }
                }, allowedAuthenticationType: {
                    serializedName: "allowedAuthenticationType",
                    type: {
                        name: "Number"
                    }
                }, replicaDeletion: {
                    serializedName: "replicaDeletion",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var HyperVReplicaReplicationDetails = {
        serializedName: "HyperVReplica2012",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ReplicationProviderSpecificSettings.type.polymorphicDiscriminator,
            uberParent: "ReplicationProviderSpecificSettings",
            className: "HyperVReplicaReplicationDetails",
            modelProperties: __assign({}, ReplicationProviderSpecificSettings.type.modelProperties, { lastReplicatedTime: {
                    serializedName: "lastReplicatedTime",
                    type: {
                        name: "DateTime"
                    }
                }, vmNics: {
                    serializedName: "vmNics",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VMNicDetails"
                            }
                        }
                    }
                }, vmId: {
                    serializedName: "vmId",
                    type: {
                        name: "String"
                    }
                }, vmProtectionState: {
                    serializedName: "vmProtectionState",
                    type: {
                        name: "String"
                    }
                }, vmProtectionStateDescription: {
                    serializedName: "vmProtectionStateDescription",
                    type: {
                        name: "String"
                    }
                }, initialReplicationDetails: {
                    serializedName: "initialReplicationDetails",
                    type: {
                        name: "Composite",
                        className: "InitialReplicationDetails"
                    }
                }, vMDiskDetails: {
                    serializedName: "vMDiskDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DiskDetails"
                            }
                        }
                    }
                } })
        }
    };
    var HyperVSiteDetails = {
        serializedName: "HyperVSite",
        type: {
            name: "Composite",
            polymorphicDiscriminator: FabricSpecificDetails.type.polymorphicDiscriminator,
            uberParent: "FabricSpecificDetails",
            className: "HyperVSiteDetails",
            modelProperties: __assign({}, FabricSpecificDetails.type.modelProperties)
        }
    };
    var HyperVVirtualMachineDetails = {
        serializedName: "HyperVVirtualMachine",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ConfigurationSettings.type.polymorphicDiscriminator,
            uberParent: "ConfigurationSettings",
            className: "HyperVVirtualMachineDetails",
            modelProperties: __assign({}, ConfigurationSettings.type.modelProperties, { sourceItemId: {
                    serializedName: "sourceItemId",
                    type: {
                        name: "String"
                    }
                }, generation: {
                    serializedName: "generation",
                    type: {
                        name: "String"
                    }
                }, osDetails: {
                    serializedName: "osDetails",
                    type: {
                        name: "Composite",
                        className: "OSDetails"
                    }
                }, diskDetails: {
                    serializedName: "diskDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DiskDetails"
                            }
                        }
                    }
                }, hasPhysicalDisk: {
                    serializedName: "hasPhysicalDisk",
                    type: {
                        name: "String"
                    }
                }, hasFibreChannelAdapter: {
                    serializedName: "hasFibreChannelAdapter",
                    type: {
                        name: "String"
                    }
                }, hasSharedVhd: {
                    serializedName: "hasSharedVhd",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var IdentityInformation = {
        serializedName: "IdentityInformation",
        type: {
            name: "Composite",
            className: "IdentityInformation",
            modelProperties: {
                identityProviderType: {
                    serializedName: "identityProviderType",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                applicationId: {
                    serializedName: "applicationId",
                    type: {
                        name: "String"
                    }
                },
                objectId: {
                    serializedName: "objectId",
                    type: {
                        name: "String"
                    }
                },
                audience: {
                    serializedName: "audience",
                    type: {
                        name: "String"
                    }
                },
                aadAuthority: {
                    serializedName: "aadAuthority",
                    type: {
                        name: "String"
                    }
                },
                certificateThumbprint: {
                    serializedName: "certificateThumbprint",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InlineWorkflowTaskDetails = {
        serializedName: "InlineWorkflowTaskDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: GroupTaskDetails.type.polymorphicDiscriminator,
            uberParent: "GroupTaskDetails",
            className: "InlineWorkflowTaskDetails",
            modelProperties: __assign({}, GroupTaskDetails.type.modelProperties, { workflowIds: {
                    serializedName: "workflowIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var InMageAgentDetails = {
        serializedName: "InMageAgentDetails",
        type: {
            name: "Composite",
            className: "InMageAgentDetails",
            modelProperties: {
                agentVersion: {
                    serializedName: "agentVersion",
                    type: {
                        name: "String"
                    }
                },
                agentUpdateStatus: {
                    serializedName: "agentUpdateStatus",
                    type: {
                        name: "String"
                    }
                },
                postUpdateRebootStatus: {
                    serializedName: "postUpdateRebootStatus",
                    type: {
                        name: "String"
                    }
                },
                agentExpiryDate: {
                    serializedName: "agentExpiryDate",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var InMageAgentVersionDetails = {
        serializedName: "InMageAgentVersionDetails",
        type: {
            name: "Composite",
            className: "InMageAgentVersionDetails",
            modelProperties: {
                postUpdateRebootStatus: {
                    serializedName: "postUpdateRebootStatus",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                },
                expiryDate: {
                    serializedName: "expiryDate",
                    type: {
                        name: "DateTime"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InMageAzureV2ApplyRecoveryPointInput = {
        serializedName: "InMageAzureV2",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ApplyRecoveryPointProviderSpecificInput.type.polymorphicDiscriminator,
            uberParent: "ApplyRecoveryPointProviderSpecificInput",
            className: "InMageAzureV2ApplyRecoveryPointInput",
            modelProperties: __assign({}, ApplyRecoveryPointProviderSpecificInput.type.modelProperties, { vaultLocation: {
                    serializedName: "vaultLocation",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var InMageAzureV2EnableProtectionInput = {
        serializedName: "InMageAzureV2",
        type: {
            name: "Composite",
            polymorphicDiscriminator: EnableProtectionProviderSpecificInput.type.polymorphicDiscriminator,
            uberParent: "EnableProtectionProviderSpecificInput",
            className: "InMageAzureV2EnableProtectionInput",
            modelProperties: __assign({}, EnableProtectionProviderSpecificInput.type.modelProperties, { masterTargetId: {
                    serializedName: "masterTargetId",
                    type: {
                        name: "String"
                    }
                }, processServerId: {
                    serializedName: "processServerId",
                    type: {
                        name: "String"
                    }
                }, storageAccountId: {
                    required: true,
                    serializedName: "storageAccountId",
                    type: {
                        name: "String"
                    }
                }, runAsAccountId: {
                    serializedName: "runAsAccountId",
                    type: {
                        name: "String"
                    }
                }, multiVmGroupId: {
                    serializedName: "multiVmGroupId",
                    type: {
                        name: "String"
                    }
                }, multiVmGroupName: {
                    serializedName: "multiVmGroupName",
                    type: {
                        name: "String"
                    }
                }, disksToInclude: {
                    serializedName: "disksToInclude",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, targetAzureNetworkId: {
                    serializedName: "targetAzureNetworkId",
                    type: {
                        name: "String"
                    }
                }, targetAzureSubnetId: {
                    serializedName: "targetAzureSubnetId",
                    type: {
                        name: "String"
                    }
                }, enableRdpOnTargetOption: {
                    serializedName: "enableRdpOnTargetOption",
                    type: {
                        name: "String"
                    }
                }, targetAzureVmName: {
                    serializedName: "targetAzureVmName",
                    type: {
                        name: "String"
                    }
                }, logStorageAccountId: {
                    serializedName: "logStorageAccountId",
                    type: {
                        name: "String"
                    }
                }, targetAzureV1ResourceGroupId: {
                    serializedName: "targetAzureV1ResourceGroupId",
                    type: {
                        name: "String"
                    }
                }, targetAzureV2ResourceGroupId: {
                    serializedName: "targetAzureV2ResourceGroupId",
                    type: {
                        name: "String"
                    }
                }, useManagedDisks: {
                    serializedName: "useManagedDisks",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var InMageAzureV2EventDetails = {
        serializedName: "InMageAzureV2",
        type: {
            name: "Composite",
            polymorphicDiscriminator: EventProviderSpecificDetails.type.polymorphicDiscriminator,
            uberParent: "EventProviderSpecificDetails",
            className: "InMageAzureV2EventDetails",
            modelProperties: __assign({}, EventProviderSpecificDetails.type.modelProperties, { eventType: {
                    serializedName: "eventType",
                    type: {
                        name: "String"
                    }
                }, category: {
                    serializedName: "category",
                    type: {
                        name: "String"
                    }
                }, component: {
                    serializedName: "component",
                    type: {
                        name: "String"
                    }
                }, correctiveAction: {
                    serializedName: "correctiveAction",
                    type: {
                        name: "String"
                    }
                }, details: {
                    serializedName: "details",
                    type: {
                        name: "String"
                    }
                }, summary: {
                    serializedName: "summary",
                    type: {
                        name: "String"
                    }
                }, siteName: {
                    serializedName: "siteName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var InMageAzureV2FailoverProviderInput = {
        serializedName: "InMageAzureV2",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProviderSpecificFailoverInput.type.polymorphicDiscriminator,
            uberParent: "ProviderSpecificFailoverInput",
            className: "InMageAzureV2FailoverProviderInput",
            modelProperties: __assign({}, ProviderSpecificFailoverInput.type.modelProperties, { vaultLocation: {
                    serializedName: "vaultLocation",
                    type: {
                        name: "String"
                    }
                }, recoveryPointId: {
                    serializedName: "recoveryPointId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var InMageAzureV2PolicyDetails = {
        serializedName: "InMageAzureV2",
        type: {
            name: "Composite",
            polymorphicDiscriminator: PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
            uberParent: "PolicyProviderSpecificDetails",
            className: "InMageAzureV2PolicyDetails",
            modelProperties: __assign({}, PolicyProviderSpecificDetails.type.modelProperties, { crashConsistentFrequencyInMinutes: {
                    serializedName: "crashConsistentFrequencyInMinutes",
                    type: {
                        name: "Number"
                    }
                }, recoveryPointThresholdInMinutes: {
                    serializedName: "recoveryPointThresholdInMinutes",
                    type: {
                        name: "Number"
                    }
                }, recoveryPointHistory: {
                    serializedName: "recoveryPointHistory",
                    type: {
                        name: "Number"
                    }
                }, appConsistentFrequencyInMinutes: {
                    serializedName: "appConsistentFrequencyInMinutes",
                    type: {
                        name: "Number"
                    }
                }, multiVmSyncStatus: {
                    serializedName: "multiVmSyncStatus",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var InMageAzureV2PolicyInput = {
        serializedName: "InMageAzureV2",
        type: {
            name: "Composite",
            polymorphicDiscriminator: PolicyProviderSpecificInput.type.polymorphicDiscriminator,
            uberParent: "PolicyProviderSpecificInput",
            className: "InMageAzureV2PolicyInput",
            modelProperties: __assign({}, PolicyProviderSpecificInput.type.modelProperties, { recoveryPointThresholdInMinutes: {
                    serializedName: "recoveryPointThresholdInMinutes",
                    type: {
                        name: "Number"
                    }
                }, recoveryPointHistory: {
                    serializedName: "recoveryPointHistory",
                    type: {
                        name: "Number"
                    }
                }, crashConsistentFrequencyInMinutes: {
                    serializedName: "crashConsistentFrequencyInMinutes",
                    type: {
                        name: "Number"
                    }
                }, appConsistentFrequencyInMinutes: {
                    serializedName: "appConsistentFrequencyInMinutes",
                    type: {
                        name: "Number"
                    }
                }, multiVmSyncStatus: {
                    required: true,
                    serializedName: "multiVmSyncStatus",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var InMageAzureV2ProtectedDiskDetails = {
        serializedName: "InMageAzureV2ProtectedDiskDetails",
        type: {
            name: "Composite",
            className: "InMageAzureV2ProtectedDiskDetails",
            modelProperties: {
                diskId: {
                    serializedName: "diskId",
                    type: {
                        name: "String"
                    }
                },
                diskName: {
                    serializedName: "diskName",
                    type: {
                        name: "String"
                    }
                },
                protectionStage: {
                    serializedName: "protectionStage",
                    type: {
                        name: "String"
                    }
                },
                healthErrorCode: {
                    serializedName: "healthErrorCode",
                    type: {
                        name: "String"
                    }
                },
                rpoInSeconds: {
                    serializedName: "rpoInSeconds",
                    type: {
                        name: "Number"
                    }
                },
                resyncRequired: {
                    serializedName: "resyncRequired",
                    type: {
                        name: "String"
                    }
                },
                resyncProgressPercentage: {
                    serializedName: "resyncProgressPercentage",
                    type: {
                        name: "Number"
                    }
                },
                resyncDurationInSeconds: {
                    serializedName: "resyncDurationInSeconds",
                    type: {
                        name: "Number"
                    }
                },
                diskCapacityInBytes: {
                    serializedName: "diskCapacityInBytes",
                    type: {
                        name: "Number"
                    }
                },
                fileSystemCapacityInBytes: {
                    serializedName: "fileSystemCapacityInBytes",
                    type: {
                        name: "Number"
                    }
                },
                sourceDataInMegaBytes: {
                    serializedName: "sourceDataInMegaBytes",
                    type: {
                        name: "Number"
                    }
                },
                psDataInMegaBytes: {
                    serializedName: "psDataInMegaBytes",
                    type: {
                        name: "Number"
                    }
                },
                targetDataInMegaBytes: {
                    serializedName: "targetDataInMegaBytes",
                    type: {
                        name: "Number"
                    }
                },
                diskResized: {
                    serializedName: "diskResized",
                    type: {
                        name: "String"
                    }
                },
                lastRpoCalculatedTime: {
                    serializedName: "lastRpoCalculatedTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var InMageAzureV2RecoveryPointDetails = {
        serializedName: "InMageAzureV2",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProviderSpecificRecoveryPointDetails.type.polymorphicDiscriminator,
            uberParent: "ProviderSpecificRecoveryPointDetails",
            className: "InMageAzureV2RecoveryPointDetails",
            modelProperties: __assign({}, ProviderSpecificRecoveryPointDetails.type.modelProperties, { isMultiVmSyncPoint: {
                    serializedName: "isMultiVmSyncPoint",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var InMageAzureV2ReplicationDetails = {
        serializedName: "InMageAzureV2",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ReplicationProviderSpecificSettings.type.polymorphicDiscriminator,
            uberParent: "ReplicationProviderSpecificSettings",
            className: "InMageAzureV2ReplicationDetails",
            modelProperties: __assign({}, ReplicationProviderSpecificSettings.type.modelProperties, { infrastructureVmId: {
                    serializedName: "infrastructureVmId",
                    type: {
                        name: "String"
                    }
                }, vCenterInfrastructureId: {
                    serializedName: "vCenterInfrastructureId",
                    type: {
                        name: "String"
                    }
                }, protectionStage: {
                    serializedName: "protectionStage",
                    type: {
                        name: "String"
                    }
                }, vmId: {
                    serializedName: "vmId",
                    type: {
                        name: "String"
                    }
                }, vmProtectionState: {
                    serializedName: "vmProtectionState",
                    type: {
                        name: "String"
                    }
                }, vmProtectionStateDescription: {
                    serializedName: "vmProtectionStateDescription",
                    type: {
                        name: "String"
                    }
                }, resyncProgressPercentage: {
                    serializedName: "resyncProgressPercentage",
                    type: {
                        name: "Number"
                    }
                }, rpoInSeconds: {
                    serializedName: "rpoInSeconds",
                    type: {
                        name: "Number"
                    }
                }, compressedDataRateInMB: {
                    serializedName: "compressedDataRateInMB",
                    type: {
                        name: "Number"
                    }
                }, uncompressedDataRateInMB: {
                    serializedName: "uncompressedDataRateInMB",
                    type: {
                        name: "Number"
                    }
                }, ipAddress: {
                    serializedName: "ipAddress",
                    type: {
                        name: "String"
                    }
                }, agentVersion: {
                    serializedName: "agentVersion",
                    type: {
                        name: "String"
                    }
                }, agentExpiryDate: {
                    serializedName: "agentExpiryDate",
                    type: {
                        name: "DateTime"
                    }
                }, isAgentUpdateRequired: {
                    serializedName: "isAgentUpdateRequired",
                    type: {
                        name: "String"
                    }
                }, isRebootAfterUpdateRequired: {
                    serializedName: "isRebootAfterUpdateRequired",
                    type: {
                        name: "String"
                    }
                }, lastHeartbeat: {
                    serializedName: "lastHeartbeat",
                    type: {
                        name: "DateTime"
                    }
                }, processServerId: {
                    serializedName: "processServerId",
                    type: {
                        name: "String"
                    }
                }, multiVmGroupId: {
                    serializedName: "multiVmGroupId",
                    type: {
                        name: "String"
                    }
                }, multiVmGroupName: {
                    serializedName: "multiVmGroupName",
                    type: {
                        name: "String"
                    }
                }, multiVmSyncStatus: {
                    serializedName: "multiVmSyncStatus",
                    type: {
                        name: "String"
                    }
                }, protectedDisks: {
                    serializedName: "protectedDisks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InMageAzureV2ProtectedDiskDetails"
                            }
                        }
                    }
                }, diskResized: {
                    serializedName: "diskResized",
                    type: {
                        name: "String"
                    }
                }, masterTargetId: {
                    serializedName: "masterTargetId",
                    type: {
                        name: "String"
                    }
                }, sourceVmCpuCount: {
                    serializedName: "sourceVmCpuCount",
                    type: {
                        name: "Number"
                    }
                }, sourceVmRamSizeInMB: {
                    serializedName: "sourceVmRamSizeInMB",
                    type: {
                        name: "Number"
                    }
                }, osType: {
                    serializedName: "osType",
                    type: {
                        name: "String"
                    }
                }, vhdName: {
                    serializedName: "vhdName",
                    type: {
                        name: "String"
                    }
                }, osDiskId: {
                    serializedName: "osDiskId",
                    type: {
                        name: "String"
                    }
                }, azureVMDiskDetails: {
                    serializedName: "azureVMDiskDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AzureVmDiskDetails"
                            }
                        }
                    }
                }, recoveryAzureVMName: {
                    serializedName: "recoveryAzureVMName",
                    type: {
                        name: "String"
                    }
                }, recoveryAzureVMSize: {
                    serializedName: "recoveryAzureVMSize",
                    type: {
                        name: "String"
                    }
                }, recoveryAzureStorageAccount: {
                    serializedName: "recoveryAzureStorageAccount",
                    type: {
                        name: "String"
                    }
                }, recoveryAzureLogStorageAccountId: {
                    serializedName: "recoveryAzureLogStorageAccountId",
                    type: {
                        name: "String"
                    }
                }, vmNics: {
                    serializedName: "vmNics",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VMNicDetails"
                            }
                        }
                    }
                }, selectedRecoveryAzureNetworkId: {
                    serializedName: "selectedRecoveryAzureNetworkId",
                    type: {
                        name: "String"
                    }
                }, selectedSourceNicId: {
                    serializedName: "selectedSourceNicId",
                    type: {
                        name: "String"
                    }
                }, discoveryType: {
                    serializedName: "discoveryType",
                    type: {
                        name: "String"
                    }
                }, enableRdpOnTargetOption: {
                    serializedName: "enableRdpOnTargetOption",
                    type: {
                        name: "String"
                    }
                }, datastores: {
                    serializedName: "datastores",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, targetVmId: {
                    serializedName: "targetVmId",
                    type: {
                        name: "String"
                    }
                }, recoveryAzureResourceGroupId: {
                    serializedName: "recoveryAzureResourceGroupId",
                    type: {
                        name: "String"
                    }
                }, recoveryAvailabilitySetId: {
                    serializedName: "recoveryAvailabilitySetId",
                    type: {
                        name: "String"
                    }
                }, useManagedDisks: {
                    serializedName: "useManagedDisks",
                    type: {
                        name: "String"
                    }
                }, licenseType: {
                    serializedName: "licenseType",
                    type: {
                        name: "String"
                    }
                }, validationErrors: {
                    serializedName: "validationErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HealthError"
                            }
                        }
                    }
                }, lastRpoCalculatedTime: {
                    serializedName: "lastRpoCalculatedTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastUpdateReceivedTime: {
                    serializedName: "lastUpdateReceivedTime",
                    type: {
                        name: "DateTime"
                    }
                }, replicaId: {
                    serializedName: "replicaId",
                    type: {
                        name: "String"
                    }
                }, osVersion: {
                    serializedName: "osVersion",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var InMageAzureV2ReprotectInput = {
        serializedName: "InMageAzureV2",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ReverseReplicationProviderSpecificInput.type.polymorphicDiscriminator,
            uberParent: "ReverseReplicationProviderSpecificInput",
            className: "InMageAzureV2ReprotectInput",
            modelProperties: __assign({}, ReverseReplicationProviderSpecificInput.type.modelProperties, { masterTargetId: {
                    serializedName: "masterTargetId",
                    type: {
                        name: "String"
                    }
                }, processServerId: {
                    serializedName: "processServerId",
                    type: {
                        name: "String"
                    }
                }, storageAccountId: {
                    serializedName: "storageAccountId",
                    type: {
                        name: "String"
                    }
                }, runAsAccountId: {
                    serializedName: "runAsAccountId",
                    type: {
                        name: "String"
                    }
                }, policyId: {
                    serializedName: "policyId",
                    type: {
                        name: "String"
                    }
                }, logStorageAccountId: {
                    serializedName: "logStorageAccountId",
                    type: {
                        name: "String"
                    }
                }, disksToInclude: {
                    serializedName: "disksToInclude",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var InMageAzureV2UpdateReplicationProtectedItemInput = {
        serializedName: "InMageAzureV2",
        type: {
            name: "Composite",
            polymorphicDiscriminator: UpdateReplicationProtectedItemProviderInput.type.polymorphicDiscriminator,
            uberParent: "UpdateReplicationProtectedItemProviderInput",
            className: "InMageAzureV2UpdateReplicationProtectedItemInput",
            modelProperties: __assign({}, UpdateReplicationProtectedItemProviderInput.type.modelProperties, { recoveryAzureV1ResourceGroupId: {
                    serializedName: "recoveryAzureV1ResourceGroupId",
                    type: {
                        name: "String"
                    }
                }, recoveryAzureV2ResourceGroupId: {
                    serializedName: "recoveryAzureV2ResourceGroupId",
                    type: {
                        name: "String"
                    }
                }, useManagedDisks: {
                    serializedName: "useManagedDisks",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var InMageBasePolicyDetails = {
        serializedName: "InMageBasePolicyDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
            uberParent: "PolicyProviderSpecificDetails",
            className: "InMageBasePolicyDetails",
            modelProperties: __assign({}, PolicyProviderSpecificDetails.type.modelProperties, { recoveryPointThresholdInMinutes: {
                    serializedName: "recoveryPointThresholdInMinutes",
                    type: {
                        name: "Number"
                    }
                }, recoveryPointHistory: {
                    serializedName: "recoveryPointHistory",
                    type: {
                        name: "Number"
                    }
                }, appConsistentFrequencyInMinutes: {
                    serializedName: "appConsistentFrequencyInMinutes",
                    type: {
                        name: "Number"
                    }
                }, multiVmSyncStatus: {
                    serializedName: "multiVmSyncStatus",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var InMageDisableProtectionProviderSpecificInput = {
        serializedName: "InMage",
        type: {
            name: "Composite",
            polymorphicDiscriminator: DisableProtectionProviderSpecificInput.type.polymorphicDiscriminator,
            uberParent: "DisableProtectionProviderSpecificInput",
            className: "InMageDisableProtectionProviderSpecificInput",
            modelProperties: __assign({}, DisableProtectionProviderSpecificInput.type.modelProperties, { replicaVmDeletionStatus: {
                    serializedName: "replicaVmDeletionStatus",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var InMageDiskDetails = {
        serializedName: "InMageDiskDetails",
        type: {
            name: "Composite",
            className: "InMageDiskDetails",
            modelProperties: {
                diskId: {
                    serializedName: "diskId",
                    type: {
                        name: "String"
                    }
                },
                diskName: {
                    serializedName: "diskName",
                    type: {
                        name: "String"
                    }
                },
                diskSizeInMB: {
                    serializedName: "diskSizeInMB",
                    type: {
                        name: "String"
                    }
                },
                diskType: {
                    serializedName: "diskType",
                    type: {
                        name: "String"
                    }
                },
                diskConfiguration: {
                    serializedName: "diskConfiguration",
                    type: {
                        name: "String"
                    }
                },
                volumeList: {
                    serializedName: "volumeList",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DiskVolumeDetails"
                            }
                        }
                    }
                }
            }
        }
    };
    var InMageVolumeExclusionOptions = {
        serializedName: "InMageVolumeExclusionOptions",
        type: {
            name: "Composite",
            className: "InMageVolumeExclusionOptions",
            modelProperties: {
                volumeLabel: {
                    serializedName: "volumeLabel",
                    type: {
                        name: "String"
                    }
                },
                onlyExcludeIfSingleVolume: {
                    serializedName: "onlyExcludeIfSingleVolume",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InMageDiskSignatureExclusionOptions = {
        serializedName: "InMageDiskSignatureExclusionOptions",
        type: {
            name: "Composite",
            className: "InMageDiskSignatureExclusionOptions",
            modelProperties: {
                diskSignature: {
                    serializedName: "diskSignature",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InMageDiskExclusionInput = {
        serializedName: "InMageDiskExclusionInput",
        type: {
            name: "Composite",
            className: "InMageDiskExclusionInput",
            modelProperties: {
                volumeOptions: {
                    serializedName: "volumeOptions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InMageVolumeExclusionOptions"
                            }
                        }
                    }
                },
                diskSignatureOptions: {
                    serializedName: "diskSignatureOptions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InMageDiskSignatureExclusionOptions"
                            }
                        }
                    }
                }
            }
        }
    };
    var InMageEnableProtectionInput = {
        serializedName: "InMage",
        type: {
            name: "Composite",
            polymorphicDiscriminator: EnableProtectionProviderSpecificInput.type.polymorphicDiscriminator,
            uberParent: "EnableProtectionProviderSpecificInput",
            className: "InMageEnableProtectionInput",
            modelProperties: __assign({}, EnableProtectionProviderSpecificInput.type.modelProperties, { vmFriendlyName: {
                    serializedName: "vmFriendlyName",
                    type: {
                        name: "String"
                    }
                }, masterTargetId: {
                    required: true,
                    serializedName: "masterTargetId",
                    type: {
                        name: "String"
                    }
                }, processServerId: {
                    required: true,
                    serializedName: "processServerId",
                    type: {
                        name: "String"
                    }
                }, retentionDrive: {
                    required: true,
                    serializedName: "retentionDrive",
                    type: {
                        name: "String"
                    }
                }, runAsAccountId: {
                    serializedName: "runAsAccountId",
                    type: {
                        name: "String"
                    }
                }, multiVmGroupId: {
                    required: true,
                    serializedName: "multiVmGroupId",
                    type: {
                        name: "String"
                    }
                }, multiVmGroupName: {
                    required: true,
                    serializedName: "multiVmGroupName",
                    type: {
                        name: "String"
                    }
                }, datastoreName: {
                    serializedName: "datastoreName",
                    type: {
                        name: "String"
                    }
                }, diskExclusionInput: {
                    serializedName: "diskExclusionInput",
                    type: {
                        name: "Composite",
                        className: "InMageDiskExclusionInput"
                    }
                }, disksToInclude: {
                    serializedName: "disksToInclude",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var InMageFailoverProviderInput = {
        serializedName: "InMage",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProviderSpecificFailoverInput.type.polymorphicDiscriminator,
            uberParent: "ProviderSpecificFailoverInput",
            className: "InMageFailoverProviderInput",
            modelProperties: __assign({}, ProviderSpecificFailoverInput.type.modelProperties, { recoveryPointType: {
                    serializedName: "recoveryPointType",
                    type: {
                        name: "String"
                    }
                }, recoveryPointId: {
                    serializedName: "recoveryPointId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var InMagePolicyDetails = {
        serializedName: "InMage",
        type: {
            name: "Composite",
            polymorphicDiscriminator: PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
            uberParent: "PolicyProviderSpecificDetails",
            className: "InMagePolicyDetails",
            modelProperties: __assign({}, PolicyProviderSpecificDetails.type.modelProperties, { recoveryPointThresholdInMinutes: {
                    serializedName: "recoveryPointThresholdInMinutes",
                    type: {
                        name: "Number"
                    }
                }, recoveryPointHistory: {
                    serializedName: "recoveryPointHistory",
                    type: {
                        name: "Number"
                    }
                }, appConsistentFrequencyInMinutes: {
                    serializedName: "appConsistentFrequencyInMinutes",
                    type: {
                        name: "Number"
                    }
                }, multiVmSyncStatus: {
                    serializedName: "multiVmSyncStatus",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var InMagePolicyInput = {
        serializedName: "InMage",
        type: {
            name: "Composite",
            polymorphicDiscriminator: PolicyProviderSpecificInput.type.polymorphicDiscriminator,
            uberParent: "PolicyProviderSpecificInput",
            className: "InMagePolicyInput",
            modelProperties: __assign({}, PolicyProviderSpecificInput.type.modelProperties, { recoveryPointThresholdInMinutes: {
                    serializedName: "recoveryPointThresholdInMinutes",
                    type: {
                        name: "Number"
                    }
                }, recoveryPointHistory: {
                    serializedName: "recoveryPointHistory",
                    type: {
                        name: "Number"
                    }
                }, appConsistentFrequencyInMinutes: {
                    serializedName: "appConsistentFrequencyInMinutes",
                    type: {
                        name: "Number"
                    }
                }, multiVmSyncStatus: {
                    required: true,
                    serializedName: "multiVmSyncStatus",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var InMageProtectedDiskDetails = {
        serializedName: "InMageProtectedDiskDetails",
        type: {
            name: "Composite",
            className: "InMageProtectedDiskDetails",
            modelProperties: {
                diskId: {
                    serializedName: "diskId",
                    type: {
                        name: "String"
                    }
                },
                diskName: {
                    serializedName: "diskName",
                    type: {
                        name: "String"
                    }
                },
                protectionStage: {
                    serializedName: "protectionStage",
                    type: {
                        name: "String"
                    }
                },
                healthErrorCode: {
                    serializedName: "healthErrorCode",
                    type: {
                        name: "String"
                    }
                },
                rpoInSeconds: {
                    serializedName: "rpoInSeconds",
                    type: {
                        name: "Number"
                    }
                },
                resyncRequired: {
                    serializedName: "resyncRequired",
                    type: {
                        name: "String"
                    }
                },
                resyncProgressPercentage: {
                    serializedName: "resyncProgressPercentage",
                    type: {
                        name: "Number"
                    }
                },
                resyncDurationInSeconds: {
                    serializedName: "resyncDurationInSeconds",
                    type: {
                        name: "Number"
                    }
                },
                diskCapacityInBytes: {
                    serializedName: "diskCapacityInBytes",
                    type: {
                        name: "Number"
                    }
                },
                fileSystemCapacityInBytes: {
                    serializedName: "fileSystemCapacityInBytes",
                    type: {
                        name: "Number"
                    }
                },
                sourceDataInMB: {
                    serializedName: "sourceDataInMB",
                    type: {
                        name: "Number"
                    }
                },
                psDataInMB: {
                    serializedName: "psDataInMB",
                    type: {
                        name: "Number"
                    }
                },
                targetDataInMB: {
                    serializedName: "targetDataInMB",
                    type: {
                        name: "Number"
                    }
                },
                diskResized: {
                    serializedName: "diskResized",
                    type: {
                        name: "String"
                    }
                },
                lastRpoCalculatedTime: {
                    serializedName: "lastRpoCalculatedTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var OSDiskDetails = {
        serializedName: "OSDiskDetails",
        type: {
            name: "Composite",
            className: "OSDiskDetails",
            modelProperties: {
                osVhdId: {
                    serializedName: "osVhdId",
                    type: {
                        name: "String"
                    }
                },
                osType: {
                    serializedName: "osType",
                    type: {
                        name: "String"
                    }
                },
                vhdName: {
                    serializedName: "vhdName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InMageReplicationDetails = {
        serializedName: "InMage",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ReplicationProviderSpecificSettings.type.polymorphicDiscriminator,
            uberParent: "ReplicationProviderSpecificSettings",
            className: "InMageReplicationDetails",
            modelProperties: __assign({}, ReplicationProviderSpecificSettings.type.modelProperties, { activeSiteType: {
                    serializedName: "activeSiteType",
                    type: {
                        name: "String"
                    }
                }, sourceVmCpuCount: {
                    serializedName: "sourceVmCpuCount",
                    type: {
                        name: "Number"
                    }
                }, sourceVmRamSizeInMB: {
                    serializedName: "sourceVmRamSizeInMB",
                    type: {
                        name: "Number"
                    }
                }, osDetails: {
                    serializedName: "osDetails",
                    type: {
                        name: "Composite",
                        className: "OSDiskDetails"
                    }
                }, protectionStage: {
                    serializedName: "protectionStage",
                    type: {
                        name: "String"
                    }
                }, vmId: {
                    serializedName: "vmId",
                    type: {
                        name: "String"
                    }
                }, vmProtectionState: {
                    serializedName: "vmProtectionState",
                    type: {
                        name: "String"
                    }
                }, vmProtectionStateDescription: {
                    serializedName: "vmProtectionStateDescription",
                    type: {
                        name: "String"
                    }
                }, resyncDetails: {
                    serializedName: "resyncDetails",
                    type: {
                        name: "Composite",
                        className: "InitialReplicationDetails"
                    }
                }, retentionWindowStart: {
                    serializedName: "retentionWindowStart",
                    type: {
                        name: "DateTime"
                    }
                }, retentionWindowEnd: {
                    serializedName: "retentionWindowEnd",
                    type: {
                        name: "DateTime"
                    }
                }, compressedDataRateInMB: {
                    serializedName: "compressedDataRateInMB",
                    type: {
                        name: "Number"
                    }
                }, uncompressedDataRateInMB: {
                    serializedName: "uncompressedDataRateInMB",
                    type: {
                        name: "Number"
                    }
                }, rpoInSeconds: {
                    serializedName: "rpoInSeconds",
                    type: {
                        name: "Number"
                    }
                }, protectedDisks: {
                    serializedName: "protectedDisks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InMageProtectedDiskDetails"
                            }
                        }
                    }
                }, ipAddress: {
                    serializedName: "ipAddress",
                    type: {
                        name: "String"
                    }
                }, lastHeartbeat: {
                    serializedName: "lastHeartbeat",
                    type: {
                        name: "DateTime"
                    }
                }, processServerId: {
                    serializedName: "processServerId",
                    type: {
                        name: "String"
                    }
                }, masterTargetId: {
                    serializedName: "masterTargetId",
                    type: {
                        name: "String"
                    }
                }, consistencyPoints: {
                    serializedName: "consistencyPoints",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "DateTime"
                            }
                        }
                    }
                }, diskResized: {
                    serializedName: "diskResized",
                    type: {
                        name: "String"
                    }
                }, rebootAfterUpdateStatus: {
                    serializedName: "rebootAfterUpdateStatus",
                    type: {
                        name: "String"
                    }
                }, multiVmGroupId: {
                    serializedName: "multiVmGroupId",
                    type: {
                        name: "String"
                    }
                }, multiVmGroupName: {
                    serializedName: "multiVmGroupName",
                    type: {
                        name: "String"
                    }
                }, multiVmSyncStatus: {
                    serializedName: "multiVmSyncStatus",
                    type: {
                        name: "String"
                    }
                }, agentDetails: {
                    serializedName: "agentDetails",
                    type: {
                        name: "Composite",
                        className: "InMageAgentDetails"
                    }
                }, vCenterInfrastructureId: {
                    serializedName: "vCenterInfrastructureId",
                    type: {
                        name: "String"
                    }
                }, infrastructureVmId: {
                    serializedName: "infrastructureVmId",
                    type: {
                        name: "String"
                    }
                }, vmNics: {
                    serializedName: "vmNics",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VMNicDetails"
                            }
                        }
                    }
                }, discoveryType: {
                    serializedName: "discoveryType",
                    type: {
                        name: "String"
                    }
                }, azureStorageAccountId: {
                    serializedName: "azureStorageAccountId",
                    type: {
                        name: "String"
                    }
                }, datastores: {
                    serializedName: "datastores",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, validationErrors: {
                    serializedName: "validationErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HealthError"
                            }
                        }
                    }
                }, lastRpoCalculatedTime: {
                    serializedName: "lastRpoCalculatedTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastUpdateReceivedTime: {
                    serializedName: "lastUpdateReceivedTime",
                    type: {
                        name: "DateTime"
                    }
                }, replicaId: {
                    serializedName: "replicaId",
                    type: {
                        name: "String"
                    }
                }, osVersion: {
                    serializedName: "osVersion",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var InMageReprotectInput = {
        serializedName: "InMage",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ReverseReplicationProviderSpecificInput.type.polymorphicDiscriminator,
            uberParent: "ReverseReplicationProviderSpecificInput",
            className: "InMageReprotectInput",
            modelProperties: __assign({}, ReverseReplicationProviderSpecificInput.type.modelProperties, { masterTargetId: {
                    required: true,
                    serializedName: "masterTargetId",
                    type: {
                        name: "String"
                    }
                }, processServerId: {
                    required: true,
                    serializedName: "processServerId",
                    type: {
                        name: "String"
                    }
                }, retentionDrive: {
                    required: true,
                    serializedName: "retentionDrive",
                    type: {
                        name: "String"
                    }
                }, runAsAccountId: {
                    serializedName: "runAsAccountId",
                    type: {
                        name: "String"
                    }
                }, datastoreName: {
                    serializedName: "datastoreName",
                    type: {
                        name: "String"
                    }
                }, diskExclusionInput: {
                    serializedName: "diskExclusionInput",
                    type: {
                        name: "Composite",
                        className: "InMageDiskExclusionInput"
                    }
                }, profileId: {
                    required: true,
                    serializedName: "profileId",
                    type: {
                        name: "String"
                    }
                }, disksToInclude: {
                    serializedName: "disksToInclude",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var JobProperties = {
        serializedName: "JobProperties",
        type: {
            name: "Composite",
            className: "JobProperties",
            modelProperties: {
                activityId: {
                    serializedName: "activityId",
                    type: {
                        name: "String"
                    }
                },
                scenarioName: {
                    serializedName: "scenarioName",
                    type: {
                        name: "String"
                    }
                },
                friendlyName: {
                    serializedName: "friendlyName",
                    type: {
                        name: "String"
                    }
                },
                state: {
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                },
                stateDescription: {
                    serializedName: "stateDescription",
                    type: {
                        name: "String"
                    }
                },
                tasks: {
                    serializedName: "tasks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ASRTask"
                            }
                        }
                    }
                },
                errors: {
                    serializedName: "errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobErrorDetails"
                            }
                        }
                    }
                },
                startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                allowedActions: {
                    serializedName: "allowedActions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                targetObjectId: {
                    serializedName: "targetObjectId",
                    type: {
                        name: "String"
                    }
                },
                targetObjectName: {
                    serializedName: "targetObjectName",
                    type: {
                        name: "String"
                    }
                },
                targetInstanceType: {
                    serializedName: "targetInstanceType",
                    type: {
                        name: "String"
                    }
                },
                customDetails: {
                    serializedName: "customDetails",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "instanceType",
                            clientName: "instanceType"
                        },
                        uberParent: "JobDetails",
                        className: "JobDetails"
                    }
                }
            }
        }
    };
    var Job = {
        serializedName: "Job",
        type: {
            name: "Composite",
            className: "Job",
            modelProperties: __assign({}, Resource.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "JobProperties"
                    }
                } })
        }
    };
    var JobQueryParameter = {
        serializedName: "JobQueryParameter",
        type: {
            name: "Composite",
            className: "JobQueryParameter",
            modelProperties: {
                startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "String"
                    }
                },
                endTime: {
                    serializedName: "endTime",
                    type: {
                        name: "String"
                    }
                },
                fabricId: {
                    serializedName: "fabricId",
                    type: {
                        name: "String"
                    }
                },
                affectedObjectTypes: {
                    serializedName: "affectedObjectTypes",
                    type: {
                        name: "String"
                    }
                },
                jobStatus: {
                    serializedName: "jobStatus",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobStatusEventDetails = {
        serializedName: "JobStatus",
        type: {
            name: "Composite",
            polymorphicDiscriminator: EventSpecificDetails.type.polymorphicDiscriminator,
            uberParent: "EventSpecificDetails",
            className: "JobStatusEventDetails",
            modelProperties: __assign({}, EventSpecificDetails.type.modelProperties, { jobId: {
                    serializedName: "jobId",
                    type: {
                        name: "String"
                    }
                }, jobFriendlyName: {
                    serializedName: "jobFriendlyName",
                    type: {
                        name: "String"
                    }
                }, jobStatus: {
                    serializedName: "jobStatus",
                    type: {
                        name: "String"
                    }
                }, affectedObjectType: {
                    serializedName: "affectedObjectType",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var JobTaskDetails = {
        serializedName: "JobTaskDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: TaskTypeDetails.type.polymorphicDiscriminator,
            uberParent: "TaskTypeDetails",
            className: "JobTaskDetails",
            modelProperties: __assign({}, TaskTypeDetails.type.modelProperties, { jobTask: {
                    serializedName: "jobTask",
                    type: {
                        name: "Composite",
                        className: "JobEntity"
                    }
                } })
        }
    };
    var LogicalNetworkProperties = {
        serializedName: "LogicalNetworkProperties",
        type: {
            name: "Composite",
            className: "LogicalNetworkProperties",
            modelProperties: {
                friendlyName: {
                    serializedName: "friendlyName",
                    type: {
                        name: "String"
                    }
                },
                networkVirtualizationStatus: {
                    serializedName: "networkVirtualizationStatus",
                    type: {
                        name: "String"
                    }
                },
                logicalNetworkUsage: {
                    serializedName: "logicalNetworkUsage",
                    type: {
                        name: "String"
                    }
                },
                logicalNetworkDefinitionsStatus: {
                    serializedName: "logicalNetworkDefinitionsStatus",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LogicalNetwork = {
        serializedName: "LogicalNetwork",
        type: {
            name: "Composite",
            className: "LogicalNetwork",
            modelProperties: __assign({}, Resource.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "LogicalNetworkProperties"
                    }
                } })
        }
    };
    var ManualActionTaskDetails = {
        serializedName: "ManualActionTaskDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: TaskTypeDetails.type.polymorphicDiscriminator,
            uberParent: "TaskTypeDetails",
            className: "ManualActionTaskDetails",
            modelProperties: __assign({}, TaskTypeDetails.type.modelProperties, { name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, instructions: {
                    serializedName: "instructions",
                    type: {
                        name: "String"
                    }
                }, observation: {
                    serializedName: "observation",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RetentionVolume = {
        serializedName: "RetentionVolume",
        type: {
            name: "Composite",
            className: "RetentionVolume",
            modelProperties: {
                volumeName: {
                    serializedName: "volumeName",
                    type: {
                        name: "String"
                    }
                },
                capacityInBytes: {
                    serializedName: "capacityInBytes",
                    type: {
                        name: "Number"
                    }
                },
                freeSpaceInBytes: {
                    serializedName: "freeSpaceInBytes",
                    type: {
                        name: "Number"
                    }
                },
                thresholdPercentage: {
                    serializedName: "thresholdPercentage",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var VersionDetails = {
        serializedName: "VersionDetails",
        type: {
            name: "Composite",
            className: "VersionDetails",
            modelProperties: {
                version: {
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                },
                expiryDate: {
                    serializedName: "expiryDate",
                    type: {
                        name: "DateTime"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MasterTargetServer = {
        serializedName: "MasterTargetServer",
        type: {
            name: "Composite",
            className: "MasterTargetServer",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                ipAddress: {
                    serializedName: "ipAddress",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                osType: {
                    serializedName: "osType",
                    type: {
                        name: "String"
                    }
                },
                agentVersion: {
                    serializedName: "agentVersion",
                    type: {
                        name: "String"
                    }
                },
                lastHeartbeat: {
                    serializedName: "lastHeartbeat",
                    type: {
                        name: "DateTime"
                    }
                },
                versionStatus: {
                    serializedName: "versionStatus",
                    type: {
                        name: "String"
                    }
                },
                retentionVolumes: {
                    serializedName: "retentionVolumes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RetentionVolume"
                            }
                        }
                    }
                },
                dataStores: {
                    serializedName: "dataStores",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DataStore"
                            }
                        }
                    }
                },
                validationErrors: {
                    serializedName: "validationErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HealthError"
                            }
                        }
                    }
                },
                healthErrors: {
                    serializedName: "healthErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HealthError"
                            }
                        }
                    }
                },
                diskCount: {
                    serializedName: "diskCount",
                    type: {
                        name: "Number"
                    }
                },
                osVersion: {
                    serializedName: "osVersion",
                    type: {
                        name: "String"
                    }
                },
                agentExpiryDate: {
                    serializedName: "agentExpiryDate",
                    type: {
                        name: "DateTime"
                    }
                },
                marsAgentVersion: {
                    serializedName: "marsAgentVersion",
                    type: {
                        name: "String"
                    }
                },
                marsAgentExpiryDate: {
                    serializedName: "marsAgentExpiryDate",
                    type: {
                        name: "DateTime"
                    }
                },
                agentVersionDetails: {
                    serializedName: "agentVersionDetails",
                    type: {
                        name: "Composite",
                        className: "VersionDetails"
                    }
                },
                marsAgentVersionDetails: {
                    serializedName: "marsAgentVersionDetails",
                    type: {
                        name: "Composite",
                        className: "VersionDetails"
                    }
                }
            }
        }
    };
    var MobilityServiceUpdate = {
        serializedName: "MobilityServiceUpdate",
        type: {
            name: "Composite",
            className: "MobilityServiceUpdate",
            modelProperties: {
                version: {
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                },
                rebootStatus: {
                    serializedName: "rebootStatus",
                    type: {
                        name: "String"
                    }
                },
                osType: {
                    serializedName: "osType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Subnet = {
        serializedName: "Subnet",
        type: {
            name: "Composite",
            className: "Subnet",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                friendlyName: {
                    serializedName: "friendlyName",
                    type: {
                        name: "String"
                    }
                },
                addressList: {
                    serializedName: "addressList",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var NetworkProperties = {
        serializedName: "NetworkProperties",
        type: {
            name: "Composite",
            className: "NetworkProperties",
            modelProperties: {
                fabricType: {
                    serializedName: "fabricType",
                    type: {
                        name: "String"
                    }
                },
                subnets: {
                    serializedName: "subnets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Subnet"
                            }
                        }
                    }
                },
                friendlyName: {
                    serializedName: "friendlyName",
                    type: {
                        name: "String"
                    }
                },
                networkType: {
                    serializedName: "networkType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Network = {
        serializedName: "Network",
        type: {
            name: "Composite",
            className: "Network",
            modelProperties: __assign({}, Resource.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "NetworkProperties"
                    }
                } })
        }
    };
    var NetworkMappingProperties = {
        serializedName: "NetworkMappingProperties",
        type: {
            name: "Composite",
            className: "NetworkMappingProperties",
            modelProperties: {
                state: {
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                },
                primaryNetworkFriendlyName: {
                    serializedName: "primaryNetworkFriendlyName",
                    type: {
                        name: "String"
                    }
                },
                primaryNetworkId: {
                    serializedName: "primaryNetworkId",
                    type: {
                        name: "String"
                    }
                },
                primaryFabricFriendlyName: {
                    serializedName: "primaryFabricFriendlyName",
                    type: {
                        name: "String"
                    }
                },
                recoveryNetworkFriendlyName: {
                    serializedName: "recoveryNetworkFriendlyName",
                    type: {
                        name: "String"
                    }
                },
                recoveryNetworkId: {
                    serializedName: "recoveryNetworkId",
                    type: {
                        name: "String"
                    }
                },
                recoveryFabricArmId: {
                    serializedName: "recoveryFabricArmId",
                    type: {
                        name: "String"
                    }
                },
                recoveryFabricFriendlyName: {
                    serializedName: "recoveryFabricFriendlyName",
                    type: {
                        name: "String"
                    }
                },
                fabricSpecificSettings: {
                    serializedName: "fabricSpecificSettings",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "instanceType",
                            clientName: "instanceType"
                        },
                        uberParent: "NetworkMappingFabricSpecificSettings",
                        className: "NetworkMappingFabricSpecificSettings"
                    }
                }
            }
        }
    };
    var NetworkMapping = {
        serializedName: "NetworkMapping",
        type: {
            name: "Composite",
            className: "NetworkMapping",
            modelProperties: __assign({}, Resource.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "NetworkMappingProperties"
                    }
                } })
        }
    };
    var OperationsDiscovery = {
        serializedName: "OperationsDiscovery",
        type: {
            name: "Composite",
            className: "OperationsDiscovery",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "Display"
                    }
                },
                origin: {
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var PlannedFailoverInputProperties = {
        serializedName: "PlannedFailoverInputProperties",
        type: {
            name: "Composite",
            className: "PlannedFailoverInputProperties",
            modelProperties: {
                failoverDirection: {
                    serializedName: "failoverDirection",
                    type: {
                        name: "String"
                    }
                },
                providerSpecificDetails: {
                    serializedName: "providerSpecificDetails",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "instanceType",
                            clientName: "instanceType"
                        },
                        uberParent: "ProviderSpecificFailoverInput",
                        className: "ProviderSpecificFailoverInput"
                    }
                }
            }
        }
    };
    var PlannedFailoverInput = {
        serializedName: "PlannedFailoverInput",
        type: {
            name: "Composite",
            className: "PlannedFailoverInput",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "PlannedFailoverInputProperties"
                    }
                }
            }
        }
    };
    var PolicyProperties = {
        serializedName: "PolicyProperties",
        type: {
            name: "Composite",
            className: "PolicyProperties",
            modelProperties: {
                friendlyName: {
                    serializedName: "friendlyName",
                    type: {
                        name: "String"
                    }
                },
                providerSpecificDetails: {
                    serializedName: "providerSpecificDetails",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "instanceType",
                            clientName: "instanceType"
                        },
                        uberParent: "PolicyProviderSpecificDetails",
                        className: "PolicyProviderSpecificDetails"
                    }
                }
            }
        }
    };
    var Policy = {
        serializedName: "Policy",
        type: {
            name: "Composite",
            className: "Policy",
            modelProperties: __assign({}, Resource.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "PolicyProperties"
                    }
                } })
        }
    };
    var ProcessServer = {
        serializedName: "ProcessServer",
        type: {
            name: "Composite",
            className: "ProcessServer",
            modelProperties: {
                friendlyName: {
                    serializedName: "friendlyName",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                ipAddress: {
                    serializedName: "ipAddress",
                    type: {
                        name: "String"
                    }
                },
                osType: {
                    serializedName: "osType",
                    type: {
                        name: "String"
                    }
                },
                agentVersion: {
                    serializedName: "agentVersion",
                    type: {
                        name: "String"
                    }
                },
                lastHeartbeat: {
                    serializedName: "lastHeartbeat",
                    type: {
                        name: "DateTime"
                    }
                },
                versionStatus: {
                    serializedName: "versionStatus",
                    type: {
                        name: "String"
                    }
                },
                mobilityServiceUpdates: {
                    serializedName: "mobilityServiceUpdates",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MobilityServiceUpdate"
                            }
                        }
                    }
                },
                hostId: {
                    serializedName: "hostId",
                    type: {
                        name: "String"
                    }
                },
                machineCount: {
                    serializedName: "machineCount",
                    type: {
                        name: "String"
                    }
                },
                replicationPairCount: {
                    serializedName: "replicationPairCount",
                    type: {
                        name: "String"
                    }
                },
                systemLoad: {
                    serializedName: "systemLoad",
                    type: {
                        name: "String"
                    }
                },
                systemLoadStatus: {
                    serializedName: "systemLoadStatus",
                    type: {
                        name: "String"
                    }
                },
                cpuLoad: {
                    serializedName: "cpuLoad",
                    type: {
                        name: "String"
                    }
                },
                cpuLoadStatus: {
                    serializedName: "cpuLoadStatus",
                    type: {
                        name: "String"
                    }
                },
                totalMemoryInBytes: {
                    serializedName: "totalMemoryInBytes",
                    type: {
                        name: "Number"
                    }
                },
                availableMemoryInBytes: {
                    serializedName: "availableMemoryInBytes",
                    type: {
                        name: "Number"
                    }
                },
                memoryUsageStatus: {
                    serializedName: "memoryUsageStatus",
                    type: {
                        name: "String"
                    }
                },
                totalSpaceInBytes: {
                    serializedName: "totalSpaceInBytes",
                    type: {
                        name: "Number"
                    }
                },
                availableSpaceInBytes: {
                    serializedName: "availableSpaceInBytes",
                    type: {
                        name: "Number"
                    }
                },
                spaceUsageStatus: {
                    serializedName: "spaceUsageStatus",
                    type: {
                        name: "String"
                    }
                },
                psServiceStatus: {
                    serializedName: "psServiceStatus",
                    type: {
                        name: "String"
                    }
                },
                sslCertExpiryDate: {
                    serializedName: "sslCertExpiryDate",
                    type: {
                        name: "DateTime"
                    }
                },
                sslCertExpiryRemainingDays: {
                    serializedName: "sslCertExpiryRemainingDays",
                    type: {
                        name: "Number"
                    }
                },
                osVersion: {
                    serializedName: "osVersion",
                    type: {
                        name: "String"
                    }
                },
                healthErrors: {
                    serializedName: "healthErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HealthError"
                            }
                        }
                    }
                },
                agentExpiryDate: {
                    serializedName: "agentExpiryDate",
                    type: {
                        name: "DateTime"
                    }
                },
                agentVersionDetails: {
                    serializedName: "agentVersionDetails",
                    type: {
                        name: "Composite",
                        className: "VersionDetails"
                    }
                }
            }
        }
    };
    var ProtectableItemProperties = {
        serializedName: "ProtectableItemProperties",
        type: {
            name: "Composite",
            className: "ProtectableItemProperties",
            modelProperties: {
                friendlyName: {
                    serializedName: "friendlyName",
                    type: {
                        name: "String"
                    }
                },
                protectionStatus: {
                    serializedName: "protectionStatus",
                    type: {
                        name: "String"
                    }
                },
                replicationProtectedItemId: {
                    serializedName: "replicationProtectedItemId",
                    type: {
                        name: "String"
                    }
                },
                recoveryServicesProviderId: {
                    serializedName: "recoveryServicesProviderId",
                    type: {
                        name: "String"
                    }
                },
                protectionReadinessErrors: {
                    serializedName: "protectionReadinessErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                supportedReplicationProviders: {
                    serializedName: "supportedReplicationProviders",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                customDetails: {
                    serializedName: "customDetails",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "instanceType",
                            clientName: "instanceType"
                        },
                        uberParent: "ConfigurationSettings",
                        className: "ConfigurationSettings"
                    }
                }
            }
        }
    };
    var ProtectableItem = {
        serializedName: "ProtectableItem",
        type: {
            name: "Composite",
            className: "ProtectableItem",
            modelProperties: __assign({}, Resource.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "ProtectableItemProperties"
                    }
                } })
        }
    };
    var ProtectableItemQueryParameter = {
        serializedName: "ProtectableItemQueryParameter",
        type: {
            name: "Composite",
            className: "ProtectableItemQueryParameter",
            modelProperties: {
                state: {
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProtectedItemsQueryParameter = {
        serializedName: "ProtectedItemsQueryParameter",
        type: {
            name: "Composite",
            className: "ProtectedItemsQueryParameter",
            modelProperties: {
                sourceFabricName: {
                    serializedName: "sourceFabricName",
                    type: {
                        name: "String"
                    }
                },
                recoveryPlanName: {
                    serializedName: "recoveryPlanName",
                    type: {
                        name: "String"
                    }
                },
                vCenterName: {
                    serializedName: "vCenterName",
                    type: {
                        name: "String"
                    }
                },
                instanceType: {
                    serializedName: "instanceType",
                    type: {
                        name: "String"
                    }
                },
                multiVmGroupCreateOption: {
                    serializedName: "multiVmGroupCreateOption",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProtectionContainerFabricSpecificDetails = {
        serializedName: "ProtectionContainerFabricSpecificDetails",
        type: {
            name: "Composite",
            className: "ProtectionContainerFabricSpecificDetails",
            modelProperties: {
                instanceType: {
                    readOnly: true,
                    serializedName: "instanceType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProtectionContainerProperties = {
        serializedName: "ProtectionContainerProperties",
        type: {
            name: "Composite",
            className: "ProtectionContainerProperties",
            modelProperties: {
                fabricFriendlyName: {
                    serializedName: "fabricFriendlyName",
                    type: {
                        name: "String"
                    }
                },
                friendlyName: {
                    serializedName: "friendlyName",
                    type: {
                        name: "String"
                    }
                },
                fabricType: {
                    serializedName: "fabricType",
                    type: {
                        name: "String"
                    }
                },
                protectedItemCount: {
                    serializedName: "protectedItemCount",
                    type: {
                        name: "Number"
                    }
                },
                pairingStatus: {
                    serializedName: "pairingStatus",
                    type: {
                        name: "String"
                    }
                },
                role: {
                    serializedName: "role",
                    type: {
                        name: "String"
                    }
                },
                fabricSpecificDetails: {
                    serializedName: "fabricSpecificDetails",
                    type: {
                        name: "Composite",
                        className: "ProtectionContainerFabricSpecificDetails"
                    }
                }
            }
        }
    };
    var ProtectionContainer = {
        serializedName: "ProtectionContainer",
        type: {
            name: "Composite",
            className: "ProtectionContainer",
            modelProperties: __assign({}, Resource.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "ProtectionContainerProperties"
                    }
                } })
        }
    };
    var ProtectionContainerMappingProperties = {
        serializedName: "ProtectionContainerMappingProperties",
        type: {
            name: "Composite",
            className: "ProtectionContainerMappingProperties",
            modelProperties: {
                targetProtectionContainerId: {
                    serializedName: "targetProtectionContainerId",
                    type: {
                        name: "String"
                    }
                },
                targetProtectionContainerFriendlyName: {
                    serializedName: "targetProtectionContainerFriendlyName",
                    type: {
                        name: "String"
                    }
                },
                providerSpecificDetails: {
                    serializedName: "providerSpecificDetails",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "instanceType",
                            clientName: "instanceType"
                        },
                        uberParent: "ProtectionContainerMappingProviderSpecificDetails",
                        className: "ProtectionContainerMappingProviderSpecificDetails"
                    }
                },
                health: {
                    serializedName: "health",
                    type: {
                        name: "String"
                    }
                },
                healthErrorDetails: {
                    serializedName: "healthErrorDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HealthError"
                            }
                        }
                    }
                },
                policyId: {
                    serializedName: "policyId",
                    type: {
                        name: "String"
                    }
                },
                state: {
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                },
                sourceProtectionContainerFriendlyName: {
                    serializedName: "sourceProtectionContainerFriendlyName",
                    type: {
                        name: "String"
                    }
                },
                sourceFabricFriendlyName: {
                    serializedName: "sourceFabricFriendlyName",
                    type: {
                        name: "String"
                    }
                },
                targetFabricFriendlyName: {
                    serializedName: "targetFabricFriendlyName",
                    type: {
                        name: "String"
                    }
                },
                policyFriendlyName: {
                    serializedName: "policyFriendlyName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProtectionContainerMapping = {
        serializedName: "ProtectionContainerMapping",
        type: {
            name: "Composite",
            className: "ProtectionContainerMapping",
            modelProperties: __assign({}, Resource.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "ProtectionContainerMappingProperties"
                    }
                } })
        }
    };
    var RcmAzureMigrationPolicyDetails = {
        serializedName: "RcmAzureMigration",
        type: {
            name: "Composite",
            polymorphicDiscriminator: PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
            uberParent: "PolicyProviderSpecificDetails",
            className: "RcmAzureMigrationPolicyDetails",
            modelProperties: __assign({}, PolicyProviderSpecificDetails.type.modelProperties, { recoveryPointThresholdInMinutes: {
                    serializedName: "recoveryPointThresholdInMinutes",
                    type: {
                        name: "Number"
                    }
                }, recoveryPointHistory: {
                    serializedName: "recoveryPointHistory",
                    type: {
                        name: "Number"
                    }
                }, appConsistentFrequencyInMinutes: {
                    serializedName: "appConsistentFrequencyInMinutes",
                    type: {
                        name: "Number"
                    }
                }, multiVmSyncStatus: {
                    serializedName: "multiVmSyncStatus",
                    type: {
                        name: "String"
                    }
                }, crashConsistentFrequencyInMinutes: {
                    serializedName: "crashConsistentFrequencyInMinutes",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var RecoveryPlanProperties = {
        serializedName: "RecoveryPlanProperties",
        type: {
            name: "Composite",
            className: "RecoveryPlanProperties",
            modelProperties: {
                friendlyName: {
                    serializedName: "friendlyName",
                    type: {
                        name: "String"
                    }
                },
                primaryFabricId: {
                    serializedName: "primaryFabricId",
                    type: {
                        name: "String"
                    }
                },
                primaryFabricFriendlyName: {
                    serializedName: "primaryFabricFriendlyName",
                    type: {
                        name: "String"
                    }
                },
                recoveryFabricId: {
                    serializedName: "recoveryFabricId",
                    type: {
                        name: "String"
                    }
                },
                recoveryFabricFriendlyName: {
                    serializedName: "recoveryFabricFriendlyName",
                    type: {
                        name: "String"
                    }
                },
                failoverDeploymentModel: {
                    serializedName: "failoverDeploymentModel",
                    type: {
                        name: "String"
                    }
                },
                replicationProviders: {
                    serializedName: "replicationProviders",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                allowedOperations: {
                    serializedName: "allowedOperations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                lastPlannedFailoverTime: {
                    serializedName: "lastPlannedFailoverTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastUnplannedFailoverTime: {
                    serializedName: "lastUnplannedFailoverTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastTestFailoverTime: {
                    serializedName: "lastTestFailoverTime",
                    type: {
                        name: "DateTime"
                    }
                },
                currentScenario: {
                    serializedName: "currentScenario",
                    type: {
                        name: "Composite",
                        className: "CurrentScenarioDetails"
                    }
                },
                currentScenarioStatus: {
                    serializedName: "currentScenarioStatus",
                    type: {
                        name: "String"
                    }
                },
                currentScenarioStatusDescription: {
                    serializedName: "currentScenarioStatusDescription",
                    type: {
                        name: "String"
                    }
                },
                groups: {
                    serializedName: "groups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RecoveryPlanGroup"
                            }
                        }
                    }
                }
            }
        }
    };
    var RecoveryPlan = {
        serializedName: "RecoveryPlan",
        type: {
            name: "Composite",
            className: "RecoveryPlan",
            modelProperties: __assign({}, Resource.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "RecoveryPlanProperties"
                    }
                } })
        }
    };
    var RecoveryPlanProviderSpecificFailoverInput = {
        serializedName: "RecoveryPlanProviderSpecificFailoverInput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "instanceType",
                clientName: "instanceType"
            },
            uberParent: "RecoveryPlanProviderSpecificFailoverInput",
            className: "RecoveryPlanProviderSpecificFailoverInput",
            modelProperties: {
                instanceType: {
                    required: true,
                    serializedName: "instanceType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RecoveryPlanA2AFailoverInput = {
        serializedName: "A2A",
        type: {
            name: "Composite",
            polymorphicDiscriminator: RecoveryPlanProviderSpecificFailoverInput.type.polymorphicDiscriminator,
            uberParent: "RecoveryPlanProviderSpecificFailoverInput",
            className: "RecoveryPlanA2AFailoverInput",
            modelProperties: __assign({}, RecoveryPlanProviderSpecificFailoverInput.type.modelProperties, { recoveryPointType: {
                    required: true,
                    serializedName: "recoveryPointType",
                    type: {
                        name: "String"
                    }
                }, cloudServiceCreationOption: {
                    serializedName: "cloudServiceCreationOption",
                    type: {
                        name: "String"
                    }
                }, multiVmSyncPointOption: {
                    serializedName: "multiVmSyncPointOption",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RecoveryPlanAutomationRunbookActionDetails = {
        serializedName: "AutomationRunbookActionDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: RecoveryPlanActionDetails.type.polymorphicDiscriminator,
            uberParent: "RecoveryPlanActionDetails",
            className: "RecoveryPlanAutomationRunbookActionDetails",
            modelProperties: __assign({}, RecoveryPlanActionDetails.type.modelProperties, { runbookId: {
                    serializedName: "runbookId",
                    type: {
                        name: "String"
                    }
                }, timeout: {
                    serializedName: "timeout",
                    type: {
                        name: "String"
                    }
                }, fabricLocation: {
                    required: true,
                    serializedName: "fabricLocation",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RecoveryPlanGroupTaskDetails = {
        serializedName: "RecoveryPlanGroupTaskDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: GroupTaskDetails.type.polymorphicDiscriminator,
            uberParent: "GroupTaskDetails",
            className: "RecoveryPlanGroupTaskDetails",
            modelProperties: __assign({}, GroupTaskDetails.type.modelProperties, { name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, groupId: {
                    serializedName: "groupId",
                    type: {
                        name: "String"
                    }
                }, rpGroupType: {
                    serializedName: "rpGroupType",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RecoveryPlanHyperVReplicaAzureFailbackInput = {
        serializedName: "HyperVReplicaAzureFailback",
        type: {
            name: "Composite",
            polymorphicDiscriminator: RecoveryPlanProviderSpecificFailoverInput.type.polymorphicDiscriminator,
            uberParent: "RecoveryPlanProviderSpecificFailoverInput",
            className: "RecoveryPlanHyperVReplicaAzureFailbackInput",
            modelProperties: __assign({}, RecoveryPlanProviderSpecificFailoverInput.type.modelProperties, { dataSyncOption: {
                    required: true,
                    serializedName: "dataSyncOption",
                    type: {
                        name: "String"
                    }
                }, recoveryVmCreationOption: {
                    required: true,
                    serializedName: "recoveryVmCreationOption",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RecoveryPlanHyperVReplicaAzureFailoverInput = {
        serializedName: "HyperVReplicaAzure",
        type: {
            name: "Composite",
            polymorphicDiscriminator: RecoveryPlanProviderSpecificFailoverInput.type.polymorphicDiscriminator,
            uberParent: "RecoveryPlanProviderSpecificFailoverInput",
            className: "RecoveryPlanHyperVReplicaAzureFailoverInput",
            modelProperties: __assign({}, RecoveryPlanProviderSpecificFailoverInput.type.modelProperties, { vaultLocation: {
                    required: true,
                    serializedName: "vaultLocation",
                    type: {
                        name: "String"
                    }
                }, primaryKekCertificatePfx: {
                    serializedName: "primaryKekCertificatePfx",
                    type: {
                        name: "String"
                    }
                }, secondaryKekCertificatePfx: {
                    serializedName: "secondaryKekCertificatePfx",
                    type: {
                        name: "String"
                    }
                }, recoveryPointType: {
                    serializedName: "recoveryPointType",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RecoveryPlanInMageAzureV2FailoverInput = {
        serializedName: "InMageAzureV2",
        type: {
            name: "Composite",
            polymorphicDiscriminator: RecoveryPlanProviderSpecificFailoverInput.type.polymorphicDiscriminator,
            uberParent: "RecoveryPlanProviderSpecificFailoverInput",
            className: "RecoveryPlanInMageAzureV2FailoverInput",
            modelProperties: __assign({}, RecoveryPlanProviderSpecificFailoverInput.type.modelProperties, { vaultLocation: {
                    required: true,
                    serializedName: "vaultLocation",
                    type: {
                        name: "String"
                    }
                }, recoveryPointType: {
                    required: true,
                    serializedName: "recoveryPointType",
                    type: {
                        name: "String"
                    }
                }, useMultiVmSyncPoint: {
                    serializedName: "useMultiVmSyncPoint",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RecoveryPlanInMageFailoverInput = {
        serializedName: "InMage",
        type: {
            name: "Composite",
            polymorphicDiscriminator: RecoveryPlanProviderSpecificFailoverInput.type.polymorphicDiscriminator,
            uberParent: "RecoveryPlanProviderSpecificFailoverInput",
            className: "RecoveryPlanInMageFailoverInput",
            modelProperties: __assign({}, RecoveryPlanProviderSpecificFailoverInput.type.modelProperties, { recoveryPointType: {
                    required: true,
                    serializedName: "recoveryPointType",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RecoveryPlanManualActionDetails = {
        serializedName: "ManualActionDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: RecoveryPlanActionDetails.type.polymorphicDiscriminator,
            uberParent: "RecoveryPlanActionDetails",
            className: "RecoveryPlanManualActionDetails",
            modelProperties: __assign({}, RecoveryPlanActionDetails.type.modelProperties, { description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RecoveryPlanPlannedFailoverInputProperties = {
        serializedName: "RecoveryPlanPlannedFailoverInputProperties",
        type: {
            name: "Composite",
            className: "RecoveryPlanPlannedFailoverInputProperties",
            modelProperties: {
                failoverDirection: {
                    required: true,
                    serializedName: "failoverDirection",
                    type: {
                        name: "String"
                    }
                },
                providerSpecificDetails: {
                    serializedName: "providerSpecificDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: {
                                    serializedName: "instanceType",
                                    clientName: "instanceType"
                                },
                                uberParent: "RecoveryPlanProviderSpecificFailoverInput",
                                className: "RecoveryPlanProviderSpecificFailoverInput"
                            }
                        }
                    }
                }
            }
        }
    };
    var RecoveryPlanPlannedFailoverInput = {
        serializedName: "RecoveryPlanPlannedFailoverInput",
        type: {
            name: "Composite",
            className: "RecoveryPlanPlannedFailoverInput",
            modelProperties: {
                properties: {
                    required: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "RecoveryPlanPlannedFailoverInputProperties"
                    }
                }
            }
        }
    };
    var RecoveryPlanScriptActionDetails = {
        serializedName: "ScriptActionDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: RecoveryPlanActionDetails.type.polymorphicDiscriminator,
            uberParent: "RecoveryPlanActionDetails",
            className: "RecoveryPlanScriptActionDetails",
            modelProperties: __assign({}, RecoveryPlanActionDetails.type.modelProperties, { path: {
                    required: true,
                    serializedName: "path",
                    type: {
                        name: "String"
                    }
                }, timeout: {
                    serializedName: "timeout",
                    type: {
                        name: "String"
                    }
                }, fabricLocation: {
                    required: true,
                    serializedName: "fabricLocation",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RecoveryPlanShutdownGroupTaskDetails = {
        serializedName: "RecoveryPlanShutdownGroupTaskDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: GroupTaskDetails.type.polymorphicDiscriminator,
            uberParent: "GroupTaskDetails",
            className: "RecoveryPlanShutdownGroupTaskDetails",
            modelProperties: __assign({}, GroupTaskDetails.type.modelProperties, { name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, groupId: {
                    serializedName: "groupId",
                    type: {
                        name: "String"
                    }
                }, rpGroupType: {
                    serializedName: "rpGroupType",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RecoveryPlanTestFailoverCleanupInputProperties = {
        serializedName: "RecoveryPlanTestFailoverCleanupInputProperties",
        type: {
            name: "Composite",
            className: "RecoveryPlanTestFailoverCleanupInputProperties",
            modelProperties: {
                comments: {
                    serializedName: "comments",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RecoveryPlanTestFailoverCleanupInput = {
        serializedName: "RecoveryPlanTestFailoverCleanupInput",
        type: {
            name: "Composite",
            className: "RecoveryPlanTestFailoverCleanupInput",
            modelProperties: {
                properties: {
                    required: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "RecoveryPlanTestFailoverCleanupInputProperties"
                    }
                }
            }
        }
    };
    var RecoveryPlanTestFailoverInputProperties = {
        serializedName: "RecoveryPlanTestFailoverInputProperties",
        type: {
            name: "Composite",
            className: "RecoveryPlanTestFailoverInputProperties",
            modelProperties: {
                failoverDirection: {
                    required: true,
                    serializedName: "failoverDirection",
                    type: {
                        name: "String"
                    }
                },
                networkType: {
                    required: true,
                    serializedName: "networkType",
                    type: {
                        name: "String"
                    }
                },
                networkId: {
                    serializedName: "networkId",
                    type: {
                        name: "String"
                    }
                },
                skipTestFailoverCleanup: {
                    serializedName: "skipTestFailoverCleanup",
                    type: {
                        name: "String"
                    }
                },
                providerSpecificDetails: {
                    serializedName: "providerSpecificDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: {
                                    serializedName: "instanceType",
                                    clientName: "instanceType"
                                },
                                uberParent: "RecoveryPlanProviderSpecificFailoverInput",
                                className: "RecoveryPlanProviderSpecificFailoverInput"
                            }
                        }
                    }
                }
            }
        }
    };
    var RecoveryPlanTestFailoverInput = {
        serializedName: "RecoveryPlanTestFailoverInput",
        type: {
            name: "Composite",
            className: "RecoveryPlanTestFailoverInput",
            modelProperties: {
                properties: {
                    required: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "RecoveryPlanTestFailoverInputProperties"
                    }
                }
            }
        }
    };
    var RecoveryPlanUnplannedFailoverInputProperties = {
        serializedName: "RecoveryPlanUnplannedFailoverInputProperties",
        type: {
            name: "Composite",
            className: "RecoveryPlanUnplannedFailoverInputProperties",
            modelProperties: {
                failoverDirection: {
                    required: true,
                    serializedName: "failoverDirection",
                    type: {
                        name: "String"
                    }
                },
                sourceSiteOperations: {
                    required: true,
                    serializedName: "sourceSiteOperations",
                    type: {
                        name: "String"
                    }
                },
                providerSpecificDetails: {
                    serializedName: "providerSpecificDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: {
                                    serializedName: "instanceType",
                                    clientName: "instanceType"
                                },
                                uberParent: "RecoveryPlanProviderSpecificFailoverInput",
                                className: "RecoveryPlanProviderSpecificFailoverInput"
                            }
                        }
                    }
                }
            }
        }
    };
    var RecoveryPlanUnplannedFailoverInput = {
        serializedName: "RecoveryPlanUnplannedFailoverInput",
        type: {
            name: "Composite",
            className: "RecoveryPlanUnplannedFailoverInput",
            modelProperties: {
                properties: {
                    required: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "RecoveryPlanUnplannedFailoverInputProperties"
                    }
                }
            }
        }
    };
    var RecoveryPointProperties = {
        serializedName: "RecoveryPointProperties",
        type: {
            name: "Composite",
            className: "RecoveryPointProperties",
            modelProperties: {
                recoveryPointTime: {
                    serializedName: "recoveryPointTime",
                    type: {
                        name: "DateTime"
                    }
                },
                recoveryPointType: {
                    serializedName: "recoveryPointType",
                    type: {
                        name: "String"
                    }
                },
                providerSpecificDetails: {
                    serializedName: "providerSpecificDetails",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "instanceType",
                            clientName: "instanceType"
                        },
                        uberParent: "ProviderSpecificRecoveryPointDetails",
                        className: "ProviderSpecificRecoveryPointDetails"
                    }
                }
            }
        }
    };
    var RecoveryPoint = {
        serializedName: "RecoveryPoint",
        type: {
            name: "Composite",
            className: "RecoveryPoint",
            modelProperties: __assign({}, Resource.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "RecoveryPointProperties"
                    }
                } })
        }
    };
    var RecoveryServicesProviderProperties = {
        serializedName: "RecoveryServicesProviderProperties",
        type: {
            name: "Composite",
            className: "RecoveryServicesProviderProperties",
            modelProperties: {
                fabricType: {
                    serializedName: "fabricType",
                    type: {
                        name: "String"
                    }
                },
                friendlyName: {
                    serializedName: "friendlyName",
                    type: {
                        name: "String"
                    }
                },
                providerVersion: {
                    serializedName: "providerVersion",
                    type: {
                        name: "String"
                    }
                },
                serverVersion: {
                    serializedName: "serverVersion",
                    type: {
                        name: "String"
                    }
                },
                providerVersionState: {
                    serializedName: "providerVersionState",
                    type: {
                        name: "String"
                    }
                },
                providerVersionExpiryDate: {
                    serializedName: "providerVersionExpiryDate",
                    type: {
                        name: "DateTime"
                    }
                },
                fabricFriendlyName: {
                    serializedName: "fabricFriendlyName",
                    type: {
                        name: "String"
                    }
                },
                lastHeartBeat: {
                    serializedName: "lastHeartBeat",
                    type: {
                        name: "DateTime"
                    }
                },
                connectionStatus: {
                    serializedName: "connectionStatus",
                    type: {
                        name: "String"
                    }
                },
                protectedItemCount: {
                    serializedName: "protectedItemCount",
                    type: {
                        name: "Number"
                    }
                },
                allowedScenarios: {
                    serializedName: "allowedScenarios",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                healthErrorDetails: {
                    serializedName: "healthErrorDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HealthError"
                            }
                        }
                    }
                },
                draIdentifier: {
                    serializedName: "draIdentifier",
                    type: {
                        name: "String"
                    }
                },
                identityDetails: {
                    serializedName: "identityDetails",
                    type: {
                        name: "Composite",
                        className: "IdentityInformation"
                    }
                },
                providerVersionDetails: {
                    serializedName: "providerVersionDetails",
                    type: {
                        name: "Composite",
                        className: "VersionDetails"
                    }
                }
            }
        }
    };
    var RecoveryServicesProvider = {
        serializedName: "RecoveryServicesProvider",
        type: {
            name: "Composite",
            className: "RecoveryServicesProvider",
            modelProperties: __assign({}, Resource.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "RecoveryServicesProviderProperties"
                    }
                } })
        }
    };
    var ReplicationProviderContainerUnmappingInput = {
        serializedName: "ReplicationProviderContainerUnmappingInput",
        type: {
            name: "Composite",
            className: "ReplicationProviderContainerUnmappingInput",
            modelProperties: {
                instanceType: {
                    serializedName: "instanceType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RemoveProtectionContainerMappingInputProperties = {
        serializedName: "RemoveProtectionContainerMappingInputProperties",
        type: {
            name: "Composite",
            className: "RemoveProtectionContainerMappingInputProperties",
            modelProperties: {
                providerSpecificInput: {
                    serializedName: "providerSpecificInput",
                    type: {
                        name: "Composite",
                        className: "ReplicationProviderContainerUnmappingInput"
                    }
                }
            }
        }
    };
    var RemoveProtectionContainerMappingInput = {
        serializedName: "RemoveProtectionContainerMappingInput",
        type: {
            name: "Composite",
            className: "RemoveProtectionContainerMappingInput",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "RemoveProtectionContainerMappingInputProperties"
                    }
                }
            }
        }
    };
    var RenewCertificateInputProperties = {
        serializedName: "RenewCertificateInputProperties",
        type: {
            name: "Composite",
            className: "RenewCertificateInputProperties",
            modelProperties: {
                renewCertificateType: {
                    serializedName: "renewCertificateType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RenewCertificateInput = {
        serializedName: "RenewCertificateInput",
        type: {
            name: "Composite",
            className: "RenewCertificateInput",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "RenewCertificateInputProperties"
                    }
                }
            }
        }
    };
    var ReplicationGroupDetails = {
        serializedName: "ReplicationGroupDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ConfigurationSettings.type.polymorphicDiscriminator,
            uberParent: "ConfigurationSettings",
            className: "ReplicationGroupDetails",
            modelProperties: __assign({}, ConfigurationSettings.type.modelProperties)
        }
    };
    var ReplicationProtectedItemProperties = {
        serializedName: "ReplicationProtectedItemProperties",
        type: {
            name: "Composite",
            className: "ReplicationProtectedItemProperties",
            modelProperties: {
                friendlyName: {
                    serializedName: "friendlyName",
                    type: {
                        name: "String"
                    }
                },
                protectedItemType: {
                    serializedName: "protectedItemType",
                    type: {
                        name: "String"
                    }
                },
                protectableItemId: {
                    serializedName: "protectableItemId",
                    type: {
                        name: "String"
                    }
                },
                recoveryServicesProviderId: {
                    serializedName: "recoveryServicesProviderId",
                    type: {
                        name: "String"
                    }
                },
                primaryFabricFriendlyName: {
                    serializedName: "primaryFabricFriendlyName",
                    type: {
                        name: "String"
                    }
                },
                primaryFabricProvider: {
                    serializedName: "primaryFabricProvider",
                    type: {
                        name: "String"
                    }
                },
                recoveryFabricFriendlyName: {
                    serializedName: "recoveryFabricFriendlyName",
                    type: {
                        name: "String"
                    }
                },
                recoveryFabricId: {
                    serializedName: "recoveryFabricId",
                    type: {
                        name: "String"
                    }
                },
                primaryProtectionContainerFriendlyName: {
                    serializedName: "primaryProtectionContainerFriendlyName",
                    type: {
                        name: "String"
                    }
                },
                recoveryProtectionContainerFriendlyName: {
                    serializedName: "recoveryProtectionContainerFriendlyName",
                    type: {
                        name: "String"
                    }
                },
                protectionState: {
                    serializedName: "protectionState",
                    type: {
                        name: "String"
                    }
                },
                protectionStateDescription: {
                    serializedName: "protectionStateDescription",
                    type: {
                        name: "String"
                    }
                },
                activeLocation: {
                    serializedName: "activeLocation",
                    type: {
                        name: "String"
                    }
                },
                testFailoverState: {
                    serializedName: "testFailoverState",
                    type: {
                        name: "String"
                    }
                },
                testFailoverStateDescription: {
                    serializedName: "testFailoverStateDescription",
                    type: {
                        name: "String"
                    }
                },
                allowedOperations: {
                    serializedName: "allowedOperations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                replicationHealth: {
                    serializedName: "replicationHealth",
                    type: {
                        name: "String"
                    }
                },
                failoverHealth: {
                    serializedName: "failoverHealth",
                    type: {
                        name: "String"
                    }
                },
                healthErrors: {
                    serializedName: "healthErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HealthError"
                            }
                        }
                    }
                },
                policyId: {
                    serializedName: "policyId",
                    type: {
                        name: "String"
                    }
                },
                policyFriendlyName: {
                    serializedName: "policyFriendlyName",
                    type: {
                        name: "String"
                    }
                },
                lastSuccessfulFailoverTime: {
                    serializedName: "lastSuccessfulFailoverTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastSuccessfulTestFailoverTime: {
                    serializedName: "lastSuccessfulTestFailoverTime",
                    type: {
                        name: "DateTime"
                    }
                },
                currentScenario: {
                    serializedName: "currentScenario",
                    type: {
                        name: "Composite",
                        className: "CurrentScenarioDetails"
                    }
                },
                failoverRecoveryPointId: {
                    serializedName: "failoverRecoveryPointId",
                    type: {
                        name: "String"
                    }
                },
                providerSpecificDetails: {
                    serializedName: "providerSpecificDetails",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "instanceType",
                            clientName: "instanceType"
                        },
                        uberParent: "ReplicationProviderSpecificSettings",
                        className: "ReplicationProviderSpecificSettings"
                    }
                },
                recoveryContainerId: {
                    serializedName: "recoveryContainerId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ReplicationProtectedItem = {
        serializedName: "ReplicationProtectedItem",
        type: {
            name: "Composite",
            className: "ReplicationProtectedItem",
            modelProperties: __assign({}, Resource.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "ReplicationProtectedItemProperties"
                    }
                } })
        }
    };
    var ResourceHealthSummary = {
        serializedName: "ResourceHealthSummary",
        type: {
            name: "Composite",
            className: "ResourceHealthSummary",
            modelProperties: {
                resourceCount: {
                    serializedName: "resourceCount",
                    type: {
                        name: "Number"
                    }
                },
                issues: {
                    serializedName: "issues",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HealthErrorSummary"
                            }
                        }
                    }
                }
            }
        }
    };
    var ResumeJobParamsProperties = {
        serializedName: "ResumeJobParamsProperties",
        type: {
            name: "Composite",
            className: "ResumeJobParamsProperties",
            modelProperties: {
                comments: {
                    serializedName: "comments",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResumeJobParams = {
        serializedName: "ResumeJobParams",
        type: {
            name: "Composite",
            className: "ResumeJobParams",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "ResumeJobParamsProperties"
                    }
                }
            }
        }
    };
    var ReverseReplicationInputProperties = {
        serializedName: "ReverseReplicationInputProperties",
        type: {
            name: "Composite",
            className: "ReverseReplicationInputProperties",
            modelProperties: {
                failoverDirection: {
                    serializedName: "failoverDirection",
                    type: {
                        name: "String"
                    }
                },
                providerSpecificDetails: {
                    serializedName: "providerSpecificDetails",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "instanceType",
                            clientName: "instanceType"
                        },
                        uberParent: "ReverseReplicationProviderSpecificInput",
                        className: "ReverseReplicationProviderSpecificInput"
                    }
                }
            }
        }
    };
    var ReverseReplicationInput = {
        serializedName: "ReverseReplicationInput",
        type: {
            name: "Composite",
            className: "ReverseReplicationInput",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "ReverseReplicationInputProperties"
                    }
                }
            }
        }
    };
    var RunAsAccount = {
        serializedName: "RunAsAccount",
        type: {
            name: "Composite",
            className: "RunAsAccount",
            modelProperties: {
                accountId: {
                    serializedName: "accountId",
                    type: {
                        name: "String"
                    }
                },
                accountName: {
                    serializedName: "accountName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SanEnableProtectionInput = {
        serializedName: "San",
        type: {
            name: "Composite",
            polymorphicDiscriminator: EnableProtectionProviderSpecificInput.type.polymorphicDiscriminator,
            uberParent: "EnableProtectionProviderSpecificInput",
            className: "SanEnableProtectionInput",
            modelProperties: __assign({}, EnableProtectionProviderSpecificInput.type.modelProperties)
        }
    };
    var ScriptActionTaskDetails = {
        serializedName: "ScriptActionTaskDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: TaskTypeDetails.type.polymorphicDiscriminator,
            uberParent: "TaskTypeDetails",
            className: "ScriptActionTaskDetails",
            modelProperties: __assign({}, TaskTypeDetails.type.modelProperties, { name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, path: {
                    serializedName: "path",
                    type: {
                        name: "String"
                    }
                }, output: {
                    serializedName: "output",
                    type: {
                        name: "String"
                    }
                }, isPrimarySideScript: {
                    serializedName: "isPrimarySideScript",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var StorageClassificationProperties = {
        serializedName: "StorageClassificationProperties",
        type: {
            name: "Composite",
            className: "StorageClassificationProperties",
            modelProperties: {
                friendlyName: {
                    serializedName: "friendlyName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StorageClassification = {
        serializedName: "StorageClassification",
        type: {
            name: "Composite",
            className: "StorageClassification",
            modelProperties: __assign({}, Resource.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "StorageClassificationProperties"
                    }
                } })
        }
    };
    var StorageClassificationMappingProperties = {
        serializedName: "StorageClassificationMappingProperties",
        type: {
            name: "Composite",
            className: "StorageClassificationMappingProperties",
            modelProperties: {
                targetStorageClassificationId: {
                    serializedName: "targetStorageClassificationId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StorageClassificationMapping = {
        serializedName: "StorageClassificationMapping",
        type: {
            name: "Composite",
            className: "StorageClassificationMapping",
            modelProperties: __assign({}, Resource.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "StorageClassificationMappingProperties"
                    }
                } })
        }
    };
    var StorageMappingInputProperties = {
        serializedName: "StorageMappingInputProperties",
        type: {
            name: "Composite",
            className: "StorageMappingInputProperties",
            modelProperties: {
                targetStorageClassificationId: {
                    serializedName: "targetStorageClassificationId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StorageClassificationMappingInput = {
        serializedName: "StorageClassificationMappingInput",
        type: {
            name: "Composite",
            className: "StorageClassificationMappingInput",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "StorageMappingInputProperties"
                    }
                }
            }
        }
    };
    var SwitchProtectionInputProperties = {
        serializedName: "SwitchProtectionInputProperties",
        type: {
            name: "Composite",
            className: "SwitchProtectionInputProperties",
            modelProperties: {
                replicationProtectedItemName: {
                    serializedName: "replicationProtectedItemName",
                    type: {
                        name: "String"
                    }
                },
                providerSpecificDetails: {
                    serializedName: "providerSpecificDetails",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "instanceType",
                            clientName: "instanceType"
                        },
                        uberParent: "SwitchProtectionProviderSpecificInput",
                        className: "SwitchProtectionProviderSpecificInput"
                    }
                }
            }
        }
    };
    var SwitchProtectionInput = {
        serializedName: "SwitchProtectionInput",
        type: {
            name: "Composite",
            className: "SwitchProtectionInput",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "SwitchProtectionInputProperties"
                    }
                }
            }
        }
    };
    var SwitchProtectionJobDetails = {
        serializedName: "SwitchProtectionJobDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
            uberParent: "JobDetails",
            className: "SwitchProtectionJobDetails",
            modelProperties: __assign({}, JobDetails.type.modelProperties, { newReplicationProtectedItemId: {
                    serializedName: "newReplicationProtectedItemId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var TargetComputeSizeProperties = {
        serializedName: "TargetComputeSizeProperties",
        type: {
            name: "Composite",
            className: "TargetComputeSizeProperties",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                friendlyName: {
                    serializedName: "friendlyName",
                    type: {
                        name: "String"
                    }
                },
                cpuCoresCount: {
                    serializedName: "cpuCoresCount",
                    type: {
                        name: "Number"
                    }
                },
                memoryInGB: {
                    serializedName: "memoryInGB",
                    type: {
                        name: "Number"
                    }
                },
                maxDataDiskCount: {
                    serializedName: "maxDataDiskCount",
                    type: {
                        name: "Number"
                    }
                },
                maxNicsCount: {
                    serializedName: "maxNicsCount",
                    type: {
                        name: "Number"
                    }
                },
                errors: {
                    serializedName: "errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ComputeSizeErrorDetails"
                            }
                        }
                    }
                },
                highIopsSupported: {
                    serializedName: "highIopsSupported",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TargetComputeSize = {
        serializedName: "TargetComputeSize",
        type: {
            name: "Composite",
            className: "TargetComputeSize",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "TargetComputeSizeProperties"
                    }
                }
            }
        }
    };
    var TestFailoverCleanupInputProperties = {
        serializedName: "TestFailoverCleanupInputProperties",
        type: {
            name: "Composite",
            className: "TestFailoverCleanupInputProperties",
            modelProperties: {
                comments: {
                    serializedName: "comments",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TestFailoverCleanupInput = {
        serializedName: "TestFailoverCleanupInput",
        type: {
            name: "Composite",
            className: "TestFailoverCleanupInput",
            modelProperties: {
                properties: {
                    required: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "TestFailoverCleanupInputProperties"
                    }
                }
            }
        }
    };
    var TestFailoverInputProperties = {
        serializedName: "TestFailoverInputProperties",
        type: {
            name: "Composite",
            className: "TestFailoverInputProperties",
            modelProperties: {
                failoverDirection: {
                    serializedName: "failoverDirection",
                    type: {
                        name: "String"
                    }
                },
                networkType: {
                    serializedName: "networkType",
                    type: {
                        name: "String"
                    }
                },
                networkId: {
                    serializedName: "networkId",
                    type: {
                        name: "String"
                    }
                },
                skipTestFailoverCleanup: {
                    serializedName: "skipTestFailoverCleanup",
                    type: {
                        name: "String"
                    }
                },
                providerSpecificDetails: {
                    serializedName: "providerSpecificDetails",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "instanceType",
                            clientName: "instanceType"
                        },
                        uberParent: "ProviderSpecificFailoverInput",
                        className: "ProviderSpecificFailoverInput"
                    }
                }
            }
        }
    };
    var TestFailoverInput = {
        serializedName: "TestFailoverInput",
        type: {
            name: "Composite",
            className: "TestFailoverInput",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "TestFailoverInputProperties"
                    }
                }
            }
        }
    };
    var TestFailoverJobDetails = {
        serializedName: "TestFailoverJobDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
            uberParent: "JobDetails",
            className: "TestFailoverJobDetails",
            modelProperties: __assign({}, JobDetails.type.modelProperties, { testFailoverStatus: {
                    serializedName: "testFailoverStatus",
                    type: {
                        name: "String"
                    }
                }, comments: {
                    serializedName: "comments",
                    type: {
                        name: "String"
                    }
                }, networkName: {
                    serializedName: "networkName",
                    type: {
                        name: "String"
                    }
                }, networkFriendlyName: {
                    serializedName: "networkFriendlyName",
                    type: {
                        name: "String"
                    }
                }, networkType: {
                    serializedName: "networkType",
                    type: {
                        name: "String"
                    }
                }, protectedItemDetails: {
                    serializedName: "protectedItemDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FailoverReplicationProtectedItemDetails"
                            }
                        }
                    }
                } })
        }
    };
    var UnplannedFailoverInputProperties = {
        serializedName: "UnplannedFailoverInputProperties",
        type: {
            name: "Composite",
            className: "UnplannedFailoverInputProperties",
            modelProperties: {
                failoverDirection: {
                    serializedName: "failoverDirection",
                    type: {
                        name: "String"
                    }
                },
                sourceSiteOperations: {
                    serializedName: "sourceSiteOperations",
                    type: {
                        name: "String"
                    }
                },
                providerSpecificDetails: {
                    serializedName: "providerSpecificDetails",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "instanceType",
                            clientName: "instanceType"
                        },
                        uberParent: "ProviderSpecificFailoverInput",
                        className: "ProviderSpecificFailoverInput"
                    }
                }
            }
        }
    };
    var UnplannedFailoverInput = {
        serializedName: "UnplannedFailoverInput",
        type: {
            name: "Composite",
            className: "UnplannedFailoverInput",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "UnplannedFailoverInputProperties"
                    }
                }
            }
        }
    };
    var UpdateMobilityServiceRequestProperties = {
        serializedName: "UpdateMobilityServiceRequestProperties",
        type: {
            name: "Composite",
            className: "UpdateMobilityServiceRequestProperties",
            modelProperties: {
                runAsAccountId: {
                    serializedName: "runAsAccountId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UpdateMobilityServiceRequest = {
        serializedName: "UpdateMobilityServiceRequest",
        type: {
            name: "Composite",
            className: "UpdateMobilityServiceRequest",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "UpdateMobilityServiceRequestProperties"
                    }
                }
            }
        }
    };
    var UpdateNetworkMappingInputProperties = {
        serializedName: "UpdateNetworkMappingInputProperties",
        type: {
            name: "Composite",
            className: "UpdateNetworkMappingInputProperties",
            modelProperties: {
                recoveryFabricName: {
                    serializedName: "recoveryFabricName",
                    type: {
                        name: "String"
                    }
                },
                recoveryNetworkId: {
                    serializedName: "recoveryNetworkId",
                    type: {
                        name: "String"
                    }
                },
                fabricSpecificDetails: {
                    serializedName: "fabricSpecificDetails",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "instanceType",
                            clientName: "instanceType"
                        },
                        uberParent: "FabricSpecificUpdateNetworkMappingInput",
                        className: "FabricSpecificUpdateNetworkMappingInput"
                    }
                }
            }
        }
    };
    var UpdateNetworkMappingInput = {
        serializedName: "UpdateNetworkMappingInput",
        type: {
            name: "Composite",
            className: "UpdateNetworkMappingInput",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "UpdateNetworkMappingInputProperties"
                    }
                }
            }
        }
    };
    var UpdatePolicyInputProperties = {
        serializedName: "UpdatePolicyInputProperties",
        type: {
            name: "Composite",
            className: "UpdatePolicyInputProperties",
            modelProperties: {
                replicationProviderSettings: {
                    serializedName: "replicationProviderSettings",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "instanceType",
                            clientName: "instanceType"
                        },
                        uberParent: "PolicyProviderSpecificInput",
                        className: "PolicyProviderSpecificInput"
                    }
                }
            }
        }
    };
    var UpdatePolicyInput = {
        serializedName: "UpdatePolicyInput",
        type: {
            name: "Composite",
            className: "UpdatePolicyInput",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "UpdatePolicyInputProperties"
                    }
                }
            }
        }
    };
    var UpdateProtectionContainerMappingInputProperties = {
        serializedName: "UpdateProtectionContainerMappingInputProperties",
        type: {
            name: "Composite",
            className: "UpdateProtectionContainerMappingInputProperties",
            modelProperties: {
                providerSpecificInput: {
                    serializedName: "providerSpecificInput",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "instanceType",
                            clientName: "instanceType"
                        },
                        uberParent: "ReplicationProviderSpecificUpdateContainerMappingInput",
                        className: "ReplicationProviderSpecificUpdateContainerMappingInput"
                    }
                }
            }
        }
    };
    var UpdateProtectionContainerMappingInput = {
        serializedName: "UpdateProtectionContainerMappingInput",
        type: {
            name: "Composite",
            className: "UpdateProtectionContainerMappingInput",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "UpdateProtectionContainerMappingInputProperties"
                    }
                }
            }
        }
    };
    var UpdateRecoveryPlanInputProperties = {
        serializedName: "UpdateRecoveryPlanInputProperties",
        type: {
            name: "Composite",
            className: "UpdateRecoveryPlanInputProperties",
            modelProperties: {
                groups: {
                    serializedName: "groups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RecoveryPlanGroup"
                            }
                        }
                    }
                }
            }
        }
    };
    var UpdateRecoveryPlanInput = {
        serializedName: "UpdateRecoveryPlanInput",
        type: {
            name: "Composite",
            className: "UpdateRecoveryPlanInput",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "UpdateRecoveryPlanInputProperties"
                    }
                }
            }
        }
    };
    var VMNicInputDetails = {
        serializedName: "VMNicInputDetails",
        type: {
            name: "Composite",
            className: "VMNicInputDetails",
            modelProperties: {
                nicId: {
                    serializedName: "nicId",
                    type: {
                        name: "String"
                    }
                },
                recoveryVMSubnetName: {
                    serializedName: "recoveryVMSubnetName",
                    type: {
                        name: "String"
                    }
                },
                replicaNicStaticIPAddress: {
                    serializedName: "replicaNicStaticIPAddress",
                    type: {
                        name: "String"
                    }
                },
                selectionType: {
                    serializedName: "selectionType",
                    type: {
                        name: "String"
                    }
                },
                enableAcceleratedNetworkingOnRecovery: {
                    serializedName: "enableAcceleratedNetworkingOnRecovery",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var UpdateReplicationProtectedItemInputProperties = {
        serializedName: "UpdateReplicationProtectedItemInputProperties",
        type: {
            name: "Composite",
            className: "UpdateReplicationProtectedItemInputProperties",
            modelProperties: {
                recoveryAzureVMName: {
                    serializedName: "recoveryAzureVMName",
                    type: {
                        name: "String"
                    }
                },
                recoveryAzureVMSize: {
                    serializedName: "recoveryAzureVMSize",
                    type: {
                        name: "String"
                    }
                },
                selectedRecoveryAzureNetworkId: {
                    serializedName: "selectedRecoveryAzureNetworkId",
                    type: {
                        name: "String"
                    }
                },
                selectedSourceNicId: {
                    serializedName: "selectedSourceNicId",
                    type: {
                        name: "String"
                    }
                },
                enableRdpOnTargetOption: {
                    serializedName: "enableRdpOnTargetOption",
                    type: {
                        name: "String"
                    }
                },
                vmNics: {
                    serializedName: "vmNics",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VMNicInputDetails"
                            }
                        }
                    }
                },
                licenseType: {
                    serializedName: "licenseType",
                    type: {
                        name: "String"
                    }
                },
                recoveryAvailabilitySetId: {
                    serializedName: "recoveryAvailabilitySetId",
                    type: {
                        name: "String"
                    }
                },
                providerSpecificDetails: {
                    serializedName: "providerSpecificDetails",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "instanceType",
                            clientName: "instanceType"
                        },
                        uberParent: "UpdateReplicationProtectedItemProviderInput",
                        className: "UpdateReplicationProtectedItemProviderInput"
                    }
                }
            }
        }
    };
    var UpdateReplicationProtectedItemInput = {
        serializedName: "UpdateReplicationProtectedItemInput",
        type: {
            name: "Composite",
            className: "UpdateReplicationProtectedItemInput",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "UpdateReplicationProtectedItemInputProperties"
                    }
                }
            }
        }
    };
    var UpdateVCenterRequestProperties = {
        serializedName: "UpdateVCenterRequestProperties",
        type: {
            name: "Composite",
            className: "UpdateVCenterRequestProperties",
            modelProperties: {
                friendlyName: {
                    serializedName: "friendlyName",
                    type: {
                        name: "String"
                    }
                },
                ipAddress: {
                    serializedName: "ipAddress",
                    type: {
                        name: "String"
                    }
                },
                processServerId: {
                    serializedName: "processServerId",
                    type: {
                        name: "String"
                    }
                },
                port: {
                    serializedName: "port",
                    type: {
                        name: "String"
                    }
                },
                runAsAccountId: {
                    serializedName: "runAsAccountId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UpdateVCenterRequest = {
        serializedName: "UpdateVCenterRequest",
        type: {
            name: "Composite",
            className: "UpdateVCenterRequest",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "UpdateVCenterRequestProperties"
                    }
                }
            }
        }
    };
    var VaultHealthProperties = {
        serializedName: "VaultHealthProperties",
        type: {
            name: "Composite",
            className: "VaultHealthProperties",
            modelProperties: {
                vaultErrors: {
                    serializedName: "vaultErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HealthError"
                            }
                        }
                    }
                },
                protectedItemsHealth: {
                    serializedName: "protectedItemsHealth",
                    type: {
                        name: "Composite",
                        className: "ResourceHealthSummary"
                    }
                },
                fabricsHealth: {
                    serializedName: "fabricsHealth",
                    type: {
                        name: "Composite",
                        className: "ResourceHealthSummary"
                    }
                },
                containersHealth: {
                    serializedName: "containersHealth",
                    type: {
                        name: "Composite",
                        className: "ResourceHealthSummary"
                    }
                }
            }
        }
    };
    var VaultHealthDetails = {
        serializedName: "VaultHealthDetails",
        type: {
            name: "Composite",
            className: "VaultHealthDetails",
            modelProperties: __assign({}, Resource.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "VaultHealthProperties"
                    }
                } })
        }
    };
    var VCenterProperties = {
        serializedName: "VCenterProperties",
        type: {
            name: "Composite",
            className: "VCenterProperties",
            modelProperties: {
                friendlyName: {
                    serializedName: "friendlyName",
                    type: {
                        name: "String"
                    }
                },
                internalId: {
                    serializedName: "internalId",
                    type: {
                        name: "String"
                    }
                },
                lastHeartbeat: {
                    serializedName: "lastHeartbeat",
                    type: {
                        name: "DateTime"
                    }
                },
                discoveryStatus: {
                    serializedName: "discoveryStatus",
                    type: {
                        name: "String"
                    }
                },
                processServerId: {
                    serializedName: "processServerId",
                    type: {
                        name: "String"
                    }
                },
                ipAddress: {
                    serializedName: "ipAddress",
                    type: {
                        name: "String"
                    }
                },
                infrastructureId: {
                    serializedName: "infrastructureId",
                    type: {
                        name: "String"
                    }
                },
                port: {
                    serializedName: "port",
                    type: {
                        name: "String"
                    }
                },
                runAsAccountId: {
                    serializedName: "runAsAccountId",
                    type: {
                        name: "String"
                    }
                },
                fabricArmResourceName: {
                    serializedName: "fabricArmResourceName",
                    type: {
                        name: "String"
                    }
                },
                healthErrors: {
                    serializedName: "healthErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HealthError"
                            }
                        }
                    }
                }
            }
        }
    };
    var VCenter = {
        serializedName: "VCenter",
        type: {
            name: "Composite",
            className: "VCenter",
            modelProperties: __assign({}, Resource.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "VCenterProperties"
                    }
                } })
        }
    };
    var VirtualMachineTaskDetails = {
        serializedName: "VirtualMachineTaskDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: TaskTypeDetails.type.polymorphicDiscriminator,
            uberParent: "TaskTypeDetails",
            className: "VirtualMachineTaskDetails",
            modelProperties: __assign({}, TaskTypeDetails.type.modelProperties, { skippedReason: {
                    serializedName: "skippedReason",
                    type: {
                        name: "String"
                    }
                }, skippedReasonString: {
                    serializedName: "skippedReasonString",
                    type: {
                        name: "String"
                    }
                }, jobTask: {
                    serializedName: "jobTask",
                    type: {
                        name: "Composite",
                        className: "JobEntity"
                    }
                } })
        }
    };
    var VmmDetails = {
        serializedName: "VMM",
        type: {
            name: "Composite",
            polymorphicDiscriminator: FabricSpecificDetails.type.polymorphicDiscriminator,
            uberParent: "FabricSpecificDetails",
            className: "VmmDetails",
            modelProperties: __assign({}, FabricSpecificDetails.type.modelProperties)
        }
    };
    var VmmToAzureCreateNetworkMappingInput = {
        serializedName: "VmmToAzure",
        type: {
            name: "Composite",
            polymorphicDiscriminator: FabricSpecificCreateNetworkMappingInput.type.polymorphicDiscriminator,
            uberParent: "FabricSpecificCreateNetworkMappingInput",
            className: "VmmToAzureCreateNetworkMappingInput",
            modelProperties: __assign({}, FabricSpecificCreateNetworkMappingInput.type.modelProperties)
        }
    };
    var VmmToAzureNetworkMappingSettings = {
        serializedName: "VmmToAzure",
        type: {
            name: "Composite",
            polymorphicDiscriminator: NetworkMappingFabricSpecificSettings.type.polymorphicDiscriminator,
            uberParent: "NetworkMappingFabricSpecificSettings",
            className: "VmmToAzureNetworkMappingSettings",
            modelProperties: __assign({}, NetworkMappingFabricSpecificSettings.type.modelProperties)
        }
    };
    var VmmToAzureUpdateNetworkMappingInput = {
        serializedName: "VmmToAzure",
        type: {
            name: "Composite",
            polymorphicDiscriminator: FabricSpecificUpdateNetworkMappingInput.type.polymorphicDiscriminator,
            uberParent: "FabricSpecificUpdateNetworkMappingInput",
            className: "VmmToAzureUpdateNetworkMappingInput",
            modelProperties: __assign({}, FabricSpecificUpdateNetworkMappingInput.type.modelProperties)
        }
    };
    var VmmToVmmCreateNetworkMappingInput = {
        serializedName: "VmmToVmm",
        type: {
            name: "Composite",
            polymorphicDiscriminator: FabricSpecificCreateNetworkMappingInput.type.polymorphicDiscriminator,
            uberParent: "FabricSpecificCreateNetworkMappingInput",
            className: "VmmToVmmCreateNetworkMappingInput",
            modelProperties: __assign({}, FabricSpecificCreateNetworkMappingInput.type.modelProperties)
        }
    };
    var VmmToVmmNetworkMappingSettings = {
        serializedName: "VmmToVmm",
        type: {
            name: "Composite",
            polymorphicDiscriminator: NetworkMappingFabricSpecificSettings.type.polymorphicDiscriminator,
            uberParent: "NetworkMappingFabricSpecificSettings",
            className: "VmmToVmmNetworkMappingSettings",
            modelProperties: __assign({}, NetworkMappingFabricSpecificSettings.type.modelProperties)
        }
    };
    var VmmToVmmUpdateNetworkMappingInput = {
        serializedName: "VmmToVmm",
        type: {
            name: "Composite",
            polymorphicDiscriminator: FabricSpecificUpdateNetworkMappingInput.type.polymorphicDiscriminator,
            uberParent: "FabricSpecificUpdateNetworkMappingInput",
            className: "VmmToVmmUpdateNetworkMappingInput",
            modelProperties: __assign({}, FabricSpecificUpdateNetworkMappingInput.type.modelProperties)
        }
    };
    var VmmVirtualMachineDetails = {
        serializedName: "VmmVirtualMachine",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ConfigurationSettings.type.polymorphicDiscriminator,
            uberParent: "ConfigurationSettings",
            className: "VmmVirtualMachineDetails",
            modelProperties: __assign({}, ConfigurationSettings.type.modelProperties, { sourceItemId: {
                    serializedName: "sourceItemId",
                    type: {
                        name: "String"
                    }
                }, generation: {
                    serializedName: "generation",
                    type: {
                        name: "String"
                    }
                }, osDetails: {
                    serializedName: "osDetails",
                    type: {
                        name: "Composite",
                        className: "OSDetails"
                    }
                }, diskDetails: {
                    serializedName: "diskDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DiskDetails"
                            }
                        }
                    }
                }, hasPhysicalDisk: {
                    serializedName: "hasPhysicalDisk",
                    type: {
                        name: "String"
                    }
                }, hasFibreChannelAdapter: {
                    serializedName: "hasFibreChannelAdapter",
                    type: {
                        name: "String"
                    }
                }, hasSharedVhd: {
                    serializedName: "hasSharedVhd",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VmNicUpdatesTaskDetails = {
        serializedName: "VmNicUpdatesTaskDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: TaskTypeDetails.type.polymorphicDiscriminator,
            uberParent: "TaskTypeDetails",
            className: "VmNicUpdatesTaskDetails",
            modelProperties: __assign({}, TaskTypeDetails.type.modelProperties, { vmId: {
                    serializedName: "vmId",
                    type: {
                        name: "String"
                    }
                }, nicId: {
                    serializedName: "nicId",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VMwareCbtPolicyCreationInput = {
        serializedName: "VMwareCbt",
        type: {
            name: "Composite",
            polymorphicDiscriminator: PolicyProviderSpecificInput.type.polymorphicDiscriminator,
            uberParent: "PolicyProviderSpecificInput",
            className: "VMwareCbtPolicyCreationInput",
            modelProperties: __assign({}, PolicyProviderSpecificInput.type.modelProperties, { recoveryPointHistory: {
                    serializedName: "recoveryPointHistory",
                    type: {
                        name: "Number"
                    }
                }, crashConsistentFrequencyInMinutes: {
                    serializedName: "crashConsistentFrequencyInMinutes",
                    type: {
                        name: "Number"
                    }
                }, appConsistentFrequencyInMinutes: {
                    serializedName: "appConsistentFrequencyInMinutes",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var VmwareCbtPolicyDetails = {
        serializedName: "VMwareCbt",
        type: {
            name: "Composite",
            polymorphicDiscriminator: PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
            uberParent: "PolicyProviderSpecificDetails",
            className: "VmwareCbtPolicyDetails",
            modelProperties: __assign({}, PolicyProviderSpecificDetails.type.modelProperties, { recoveryPointThresholdInMinutes: {
                    serializedName: "recoveryPointThresholdInMinutes",
                    type: {
                        name: "Number"
                    }
                }, recoveryPointHistory: {
                    serializedName: "recoveryPointHistory",
                    type: {
                        name: "Number"
                    }
                }, appConsistentFrequencyInMinutes: {
                    serializedName: "appConsistentFrequencyInMinutes",
                    type: {
                        name: "Number"
                    }
                }, crashConsistentFrequencyInMinutes: {
                    serializedName: "crashConsistentFrequencyInMinutes",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var VMwareDetails = {
        serializedName: "VMware",
        type: {
            name: "Composite",
            polymorphicDiscriminator: FabricSpecificDetails.type.polymorphicDiscriminator,
            uberParent: "FabricSpecificDetails",
            className: "VMwareDetails",
            modelProperties: __assign({}, FabricSpecificDetails.type.modelProperties, { processServers: {
                    serializedName: "processServers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ProcessServer"
                            }
                        }
                    }
                }, masterTargetServers: {
                    serializedName: "masterTargetServers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MasterTargetServer"
                            }
                        }
                    }
                }, runAsAccounts: {
                    serializedName: "runAsAccounts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RunAsAccount"
                            }
                        }
                    }
                }, replicationPairCount: {
                    serializedName: "replicationPairCount",
                    type: {
                        name: "String"
                    }
                }, processServerCount: {
                    serializedName: "processServerCount",
                    type: {
                        name: "String"
                    }
                }, agentCount: {
                    serializedName: "agentCount",
                    type: {
                        name: "String"
                    }
                }, protectedServers: {
                    serializedName: "protectedServers",
                    type: {
                        name: "String"
                    }
                }, systemLoad: {
                    serializedName: "systemLoad",
                    type: {
                        name: "String"
                    }
                }, systemLoadStatus: {
                    serializedName: "systemLoadStatus",
                    type: {
                        name: "String"
                    }
                }, cpuLoad: {
                    serializedName: "cpuLoad",
                    type: {
                        name: "String"
                    }
                }, cpuLoadStatus: {
                    serializedName: "cpuLoadStatus",
                    type: {
                        name: "String"
                    }
                }, totalMemoryInBytes: {
                    serializedName: "totalMemoryInBytes",
                    type: {
                        name: "Number"
                    }
                }, availableMemoryInBytes: {
                    serializedName: "availableMemoryInBytes",
                    type: {
                        name: "Number"
                    }
                }, memoryUsageStatus: {
                    serializedName: "memoryUsageStatus",
                    type: {
                        name: "String"
                    }
                }, totalSpaceInBytes: {
                    serializedName: "totalSpaceInBytes",
                    type: {
                        name: "Number"
                    }
                }, availableSpaceInBytes: {
                    serializedName: "availableSpaceInBytes",
                    type: {
                        name: "Number"
                    }
                }, spaceUsageStatus: {
                    serializedName: "spaceUsageStatus",
                    type: {
                        name: "String"
                    }
                }, webLoad: {
                    serializedName: "webLoad",
                    type: {
                        name: "String"
                    }
                }, webLoadStatus: {
                    serializedName: "webLoadStatus",
                    type: {
                        name: "String"
                    }
                }, databaseServerLoad: {
                    serializedName: "databaseServerLoad",
                    type: {
                        name: "String"
                    }
                }, databaseServerLoadStatus: {
                    serializedName: "databaseServerLoadStatus",
                    type: {
                        name: "String"
                    }
                }, csServiceStatus: {
                    serializedName: "csServiceStatus",
                    type: {
                        name: "String"
                    }
                }, ipAddress: {
                    serializedName: "ipAddress",
                    type: {
                        name: "String"
                    }
                }, agentVersion: {
                    serializedName: "agentVersion",
                    type: {
                        name: "String"
                    }
                }, hostName: {
                    serializedName: "hostName",
                    type: {
                        name: "String"
                    }
                }, lastHeartbeat: {
                    serializedName: "lastHeartbeat",
                    type: {
                        name: "DateTime"
                    }
                }, versionStatus: {
                    serializedName: "versionStatus",
                    type: {
                        name: "String"
                    }
                }, sslCertExpiryDate: {
                    serializedName: "sslCertExpiryDate",
                    type: {
                        name: "DateTime"
                    }
                }, sslCertExpiryRemainingDays: {
                    serializedName: "sslCertExpiryRemainingDays",
                    type: {
                        name: "Number"
                    }
                }, psTemplateVersion: {
                    serializedName: "psTemplateVersion",
                    type: {
                        name: "String"
                    }
                }, agentExpiryDate: {
                    serializedName: "agentExpiryDate",
                    type: {
                        name: "DateTime"
                    }
                }, agentVersionDetails: {
                    serializedName: "agentVersionDetails",
                    type: {
                        name: "Composite",
                        className: "VersionDetails"
                    }
                } })
        }
    };
    var VMwareV2FabricCreationInput = {
        serializedName: "VMwareV2",
        type: {
            name: "Composite",
            polymorphicDiscriminator: FabricSpecificCreationInput.type.polymorphicDiscriminator,
            uberParent: "FabricSpecificCreationInput",
            className: "VMwareV2FabricCreationInput",
            modelProperties: __assign({}, FabricSpecificCreationInput.type.modelProperties, { keyVaultUrl: {
                    serializedName: "keyVaultUrl",
                    type: {
                        name: "String"
                    }
                }, keyVaultResourceArmId: {
                    serializedName: "keyVaultResourceArmId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VMwareV2FabricSpecificDetails = {
        serializedName: "VMwareV2",
        type: {
            name: "Composite",
            polymorphicDiscriminator: FabricSpecificDetails.type.polymorphicDiscriminator,
            uberParent: "FabricSpecificDetails",
            className: "VMwareV2FabricSpecificDetails",
            modelProperties: __assign({}, FabricSpecificDetails.type.modelProperties, { srsServiceEndpoint: {
                    serializedName: "srsServiceEndpoint",
                    type: {
                        name: "String"
                    }
                }, rcmServiceEndpoint: {
                    serializedName: "rcmServiceEndpoint",
                    type: {
                        name: "String"
                    }
                }, keyVaultUrl: {
                    serializedName: "keyVaultUrl",
                    type: {
                        name: "String"
                    }
                }, keyVaultResourceArmId: {
                    serializedName: "keyVaultResourceArmId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VMwareVirtualMachineDetails = {
        serializedName: "VMwareVirtualMachine",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ConfigurationSettings.type.polymorphicDiscriminator,
            uberParent: "ConfigurationSettings",
            className: "VMwareVirtualMachineDetails",
            modelProperties: __assign({}, ConfigurationSettings.type.modelProperties, { agentGeneratedId: {
                    serializedName: "agentGeneratedId",
                    type: {
                        name: "String"
                    }
                }, agentInstalled: {
                    serializedName: "agentInstalled",
                    type: {
                        name: "String"
                    }
                }, osType: {
                    serializedName: "osType",
                    type: {
                        name: "String"
                    }
                }, agentVersion: {
                    serializedName: "agentVersion",
                    type: {
                        name: "String"
                    }
                }, ipAddress: {
                    serializedName: "ipAddress",
                    type: {
                        name: "String"
                    }
                }, poweredOn: {
                    serializedName: "poweredOn",
                    type: {
                        name: "String"
                    }
                }, vCenterInfrastructureId: {
                    serializedName: "vCenterInfrastructureId",
                    type: {
                        name: "String"
                    }
                }, discoveryType: {
                    serializedName: "discoveryType",
                    type: {
                        name: "String"
                    }
                }, diskDetails: {
                    serializedName: "diskDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InMageDiskDetails"
                            }
                        }
                    }
                }, validationErrors: {
                    serializedName: "validationErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HealthError"
                            }
                        }
                    }
                } })
        }
    };
    var OperationsDiscoveryCollection = {
        serializedName: "OperationsDiscoveryCollection",
        type: {
            name: "Composite",
            className: "OperationsDiscoveryCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OperationsDiscovery"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AlertCollection = {
        serializedName: "AlertCollection",
        type: {
            name: "Composite",
            className: "AlertCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Alert"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventCollection = {
        serializedName: "EventCollection",
        type: {
            name: "Composite",
            className: "EventCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Event"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FabricCollection = {
        serializedName: "FabricCollection",
        type: {
            name: "Composite",
            className: "FabricCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Fabric"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LogicalNetworkCollection = {
        serializedName: "LogicalNetworkCollection",
        type: {
            name: "Composite",
            className: "LogicalNetworkCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LogicalNetwork"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NetworkCollection = {
        serializedName: "NetworkCollection",
        type: {
            name: "Composite",
            className: "NetworkCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Network"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NetworkMappingCollection = {
        serializedName: "NetworkMappingCollection",
        type: {
            name: "Composite",
            className: "NetworkMappingCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkMapping"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProtectionContainerCollection = {
        serializedName: "ProtectionContainerCollection",
        type: {
            name: "Composite",
            className: "ProtectionContainerCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ProtectionContainer"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProtectableItemCollection = {
        serializedName: "ProtectableItemCollection",
        type: {
            name: "Composite",
            className: "ProtectableItemCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ProtectableItem"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ReplicationProtectedItemCollection = {
        serializedName: "ReplicationProtectedItemCollection",
        type: {
            name: "Composite",
            className: "ReplicationProtectedItemCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReplicationProtectedItem"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RecoveryPointCollection = {
        serializedName: "RecoveryPointCollection",
        type: {
            name: "Composite",
            className: "RecoveryPointCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RecoveryPoint"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TargetComputeSizeCollection = {
        serializedName: "TargetComputeSizeCollection",
        type: {
            name: "Composite",
            className: "TargetComputeSizeCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TargetComputeSize"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProtectionContainerMappingCollection = {
        serializedName: "ProtectionContainerMappingCollection",
        type: {
            name: "Composite",
            className: "ProtectionContainerMappingCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ProtectionContainerMapping"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RecoveryServicesProviderCollection = {
        serializedName: "RecoveryServicesProviderCollection",
        type: {
            name: "Composite",
            className: "RecoveryServicesProviderCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RecoveryServicesProvider"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StorageClassificationCollection = {
        serializedName: "StorageClassificationCollection",
        type: {
            name: "Composite",
            className: "StorageClassificationCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StorageClassification"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StorageClassificationMappingCollection = {
        serializedName: "StorageClassificationMappingCollection",
        type: {
            name: "Composite",
            className: "StorageClassificationMappingCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StorageClassificationMapping"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VCenterCollection = {
        serializedName: "VCenterCollection",
        type: {
            name: "Composite",
            className: "VCenterCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VCenter"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobCollection = {
        serializedName: "JobCollection",
        type: {
            name: "Composite",
            className: "JobCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Job"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PolicyCollection = {
        serializedName: "PolicyCollection",
        type: {
            name: "Composite",
            className: "PolicyCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Policy"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RecoveryPlanCollection = {
        serializedName: "RecoveryPlanCollection",
        type: {
            name: "Composite",
            className: "RecoveryPlanCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RecoveryPlan"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var discriminators = {
        'ApplyRecoveryPointProviderSpecificInput.A2A': A2AApplyRecoveryPointInput,
        'ReplicationProviderSpecificContainerCreationInput.A2A': A2AContainerCreationInput,
        'ReplicationProviderSpecificContainerMappingInput.A2A': A2AContainerMappingInput,
        'EnableProtectionProviderSpecificInput.A2A': A2AEnableProtectionInput,
        'EventProviderSpecificDetails.A2A': A2AEventDetails,
        'ProviderSpecificFailoverInput.A2A': A2AFailoverProviderInput,
        'PolicyProviderSpecificInput.A2A': A2APolicyCreationInput,
        'PolicyProviderSpecificDetails.A2A': A2APolicyDetails,
        'ProtectionContainerMappingProviderSpecificDetails.A2A': A2AProtectionContainerMappingDetails,
        'ProviderSpecificRecoveryPointDetails.A2A': A2ARecoveryPointDetails,
        'ReplicationProviderSpecificSettings.A2A': A2AReplicationDetails,
        'ReverseReplicationProviderSpecificInput.A2A': A2AReprotectInput,
        'SwitchProtectionProviderSpecificInput.A2A': A2ASwitchProtectionInput,
        'ReplicationProviderSpecificUpdateContainerMappingInput.A2A': A2AUpdateContainerMappingInput,
        'UpdateReplicationProtectedItemProviderInput.A2A': A2AUpdateReplicationProtectedItemInput,
        'ApplyRecoveryPointProviderSpecificInput': ApplyRecoveryPointProviderSpecificInput,
        'JobDetails.AsrJobDetails': AsrJobDetails,
        'TaskTypeDetails': TaskTypeDetails,
        'GroupTaskDetails': GroupTaskDetails,
        'TaskTypeDetails.AutomationRunbookTaskDetails': AutomationRunbookTaskDetails,
        'FabricSpecificCreationInput.Azure': AzureFabricCreationInput,
        'FabricSpecificDetails.Azure': AzureFabricSpecificDetails,
        'FabricSpecificCreateNetworkMappingInput.AzureToAzure': AzureToAzureCreateNetworkMappingInput,
        'NetworkMappingFabricSpecificSettings.AzureToAzure': AzureToAzureNetworkMappingSettings,
        'FabricSpecificUpdateNetworkMappingInput.AzureToAzure': AzureToAzureUpdateNetworkMappingInput,
        'ConfigurationSettings': ConfigurationSettings,
        'TaskTypeDetails.ConsistencyCheckTaskDetails': ConsistencyCheckTaskDetails,
        'FabricSpecificCreateNetworkMappingInput': FabricSpecificCreateNetworkMappingInput,
        'PolicyProviderSpecificInput': PolicyProviderSpecificInput,
        'ReplicationProviderSpecificContainerCreationInput': ReplicationProviderSpecificContainerCreationInput,
        'ReplicationProviderSpecificContainerMappingInput': ReplicationProviderSpecificContainerMappingInput,
        'RecoveryPlanActionDetails': RecoveryPlanActionDetails,
        'DisableProtectionProviderSpecificInput': DisableProtectionProviderSpecificInput,
        'EnableProtectionProviderSpecificInput': EnableProtectionProviderSpecificInput,
        'EventProviderSpecificDetails': EventProviderSpecificDetails,
        'EventSpecificDetails': EventSpecificDetails,
        'JobDetails.ExportJobDetails': ExportJobDetails,
        'FabricSpecificDetails': FabricSpecificDetails,
        'FabricSpecificCreationInput': FabricSpecificCreationInput,
        'TaskTypeDetails.FabricReplicationGroupTaskDetails': FabricReplicationGroupTaskDetails,
        'FabricSpecificUpdateNetworkMappingInput': FabricSpecificUpdateNetworkMappingInput,
        'JobDetails.FailoverJobDetails': FailoverJobDetails,
        'EventProviderSpecificDetails.HyperVReplica2012': HyperVReplica2012EventDetails,
        'EventProviderSpecificDetails.HyperVReplica2012R2': HyperVReplica2012R2EventDetails,
        'ApplyRecoveryPointProviderSpecificInput.HyperVReplicaAzure': HyperVReplicaAzureApplyRecoveryPointInput,
        'EnableProtectionProviderSpecificInput.HyperVReplicaAzure': HyperVReplicaAzureEnableProtectionInput,
        'EventProviderSpecificDetails.HyperVReplicaAzure': HyperVReplicaAzureEventDetails,
        'ProviderSpecificFailoverInput.HyperVReplicaAzureFailback': HyperVReplicaAzureFailbackProviderInput,
        'ProviderSpecificFailoverInput.HyperVReplicaAzure': HyperVReplicaAzureFailoverProviderInput,
        'PolicyProviderSpecificDetails.HyperVReplicaAzure': HyperVReplicaAzurePolicyDetails,
        'PolicyProviderSpecificInput.HyperVReplicaAzure': HyperVReplicaAzurePolicyInput,
        'ReplicationProviderSpecificSettings.HyperVReplicaAzure': HyperVReplicaAzureReplicationDetails,
        'ReverseReplicationProviderSpecificInput.HyperVReplicaAzure': HyperVReplicaAzureReprotectInput,
        'UpdateReplicationProtectedItemProviderInput.HyperVReplicaAzure': HyperVReplicaAzureUpdateReplicationProtectedItemInput,
        'EventProviderSpecificDetails.HyperVReplicaBaseEventDetails': HyperVReplicaBaseEventDetails,
        'PolicyProviderSpecificDetails.HyperVReplicaBasePolicyDetails': HyperVReplicaBasePolicyDetails,
        'ReplicationProviderSpecificSettings.HyperVReplicaBaseReplicationDetails': HyperVReplicaBaseReplicationDetails,
        'PolicyProviderSpecificDetails.HyperVReplica2012R2': HyperVReplicaBluePolicyDetails,
        'PolicyProviderSpecificInput.HyperVReplica2012R2': HyperVReplicaBluePolicyInput,
        'ReplicationProviderSpecificSettings.HyperVReplica2012R2': HyperVReplicaBlueReplicationDetails,
        'PolicyProviderSpecificDetails.HyperVReplica2012': HyperVReplicaPolicyDetails,
        'PolicyProviderSpecificInput.HyperVReplica2012': HyperVReplicaPolicyInput,
        'ReplicationProviderSpecificSettings.HyperVReplica2012': HyperVReplicaReplicationDetails,
        'FabricSpecificDetails.HyperVSite': HyperVSiteDetails,
        'ConfigurationSettings.HyperVVirtualMachine': HyperVVirtualMachineDetails,
        'GroupTaskDetails.InlineWorkflowTaskDetails': InlineWorkflowTaskDetails,
        'ApplyRecoveryPointProviderSpecificInput.InMageAzureV2': InMageAzureV2ApplyRecoveryPointInput,
        'EnableProtectionProviderSpecificInput.InMageAzureV2': InMageAzureV2EnableProtectionInput,
        'EventProviderSpecificDetails.InMageAzureV2': InMageAzureV2EventDetails,
        'ProviderSpecificFailoverInput.InMageAzureV2': InMageAzureV2FailoverProviderInput,
        'PolicyProviderSpecificDetails.InMageAzureV2': InMageAzureV2PolicyDetails,
        'PolicyProviderSpecificInput.InMageAzureV2': InMageAzureV2PolicyInput,
        'ProviderSpecificRecoveryPointDetails.InMageAzureV2': InMageAzureV2RecoveryPointDetails,
        'ReplicationProviderSpecificSettings.InMageAzureV2': InMageAzureV2ReplicationDetails,
        'ReverseReplicationProviderSpecificInput.InMageAzureV2': InMageAzureV2ReprotectInput,
        'UpdateReplicationProtectedItemProviderInput.InMageAzureV2': InMageAzureV2UpdateReplicationProtectedItemInput,
        'PolicyProviderSpecificDetails.InMageBasePolicyDetails': InMageBasePolicyDetails,
        'DisableProtectionProviderSpecificInput.InMage': InMageDisableProtectionProviderSpecificInput,
        'EnableProtectionProviderSpecificInput.InMage': InMageEnableProtectionInput,
        'ProviderSpecificFailoverInput.InMage': InMageFailoverProviderInput,
        'PolicyProviderSpecificDetails.InMage': InMagePolicyDetails,
        'PolicyProviderSpecificInput.InMage': InMagePolicyInput,
        'ReplicationProviderSpecificSettings.InMage': InMageReplicationDetails,
        'ReverseReplicationProviderSpecificInput.InMage': InMageReprotectInput,
        'JobDetails': JobDetails,
        'EventSpecificDetails.JobStatus': JobStatusEventDetails,
        'TaskTypeDetails.JobTaskDetails': JobTaskDetails,
        'TaskTypeDetails.ManualActionTaskDetails': ManualActionTaskDetails,
        'NetworkMappingFabricSpecificSettings': NetworkMappingFabricSpecificSettings,
        'ProviderSpecificFailoverInput': ProviderSpecificFailoverInput,
        'PolicyProviderSpecificDetails': PolicyProviderSpecificDetails,
        'ProtectionContainerMappingProviderSpecificDetails': ProtectionContainerMappingProviderSpecificDetails,
        'ProviderSpecificRecoveryPointDetails': ProviderSpecificRecoveryPointDetails,
        'PolicyProviderSpecificDetails.RcmAzureMigration': RcmAzureMigrationPolicyDetails,
        'RecoveryPlanProviderSpecificFailoverInput.A2A': RecoveryPlanA2AFailoverInput,
        'RecoveryPlanActionDetails.AutomationRunbookActionDetails': RecoveryPlanAutomationRunbookActionDetails,
        'GroupTaskDetails.RecoveryPlanGroupTaskDetails': RecoveryPlanGroupTaskDetails,
        'RecoveryPlanProviderSpecificFailoverInput.HyperVReplicaAzureFailback': RecoveryPlanHyperVReplicaAzureFailbackInput,
        'RecoveryPlanProviderSpecificFailoverInput.HyperVReplicaAzure': RecoveryPlanHyperVReplicaAzureFailoverInput,
        'RecoveryPlanProviderSpecificFailoverInput.InMageAzureV2': RecoveryPlanInMageAzureV2FailoverInput,
        'RecoveryPlanProviderSpecificFailoverInput.InMage': RecoveryPlanInMageFailoverInput,
        'RecoveryPlanActionDetails.ManualActionDetails': RecoveryPlanManualActionDetails,
        'RecoveryPlanProviderSpecificFailoverInput': RecoveryPlanProviderSpecificFailoverInput,
        'RecoveryPlanActionDetails.ScriptActionDetails': RecoveryPlanScriptActionDetails,
        'GroupTaskDetails.RecoveryPlanShutdownGroupTaskDetails': RecoveryPlanShutdownGroupTaskDetails,
        'ConfigurationSettings.ReplicationGroupDetails': ReplicationGroupDetails,
        'ReplicationProviderSpecificSettings': ReplicationProviderSpecificSettings,
        'ReplicationProviderSpecificUpdateContainerMappingInput': ReplicationProviderSpecificUpdateContainerMappingInput,
        'ReverseReplicationProviderSpecificInput': ReverseReplicationProviderSpecificInput,
        'EnableProtectionProviderSpecificInput.San': SanEnableProtectionInput,
        'TaskTypeDetails.ScriptActionTaskDetails': ScriptActionTaskDetails,
        'SwitchProtectionProviderSpecificInput': SwitchProtectionProviderSpecificInput,
        'JobDetails.SwitchProtectionJobDetails': SwitchProtectionJobDetails,
        'JobDetails.TestFailoverJobDetails': TestFailoverJobDetails,
        'UpdateReplicationProtectedItemProviderInput': UpdateReplicationProtectedItemProviderInput,
        'TaskTypeDetails.VirtualMachineTaskDetails': VirtualMachineTaskDetails,
        'FabricSpecificDetails.VMM': VmmDetails,
        'FabricSpecificCreateNetworkMappingInput.VmmToAzure': VmmToAzureCreateNetworkMappingInput,
        'NetworkMappingFabricSpecificSettings.VmmToAzure': VmmToAzureNetworkMappingSettings,
        'FabricSpecificUpdateNetworkMappingInput.VmmToAzure': VmmToAzureUpdateNetworkMappingInput,
        'FabricSpecificCreateNetworkMappingInput.VmmToVmm': VmmToVmmCreateNetworkMappingInput,
        'NetworkMappingFabricSpecificSettings.VmmToVmm': VmmToVmmNetworkMappingSettings,
        'FabricSpecificUpdateNetworkMappingInput.VmmToVmm': VmmToVmmUpdateNetworkMappingInput,
        'ConfigurationSettings.VmmVirtualMachine': VmmVirtualMachineDetails,
        'TaskTypeDetails.VmNicUpdatesTaskDetails': VmNicUpdatesTaskDetails,
        'PolicyProviderSpecificInput.VMwareCbt': VMwareCbtPolicyCreationInput,
        'PolicyProviderSpecificDetails.VMwareCbt': VmwareCbtPolicyDetails,
        'FabricSpecificDetails.VMware': VMwareDetails,
        'FabricSpecificCreationInput.VMwareV2': VMwareV2FabricCreationInput,
        'FabricSpecificDetails.VMwareV2': VMwareV2FabricSpecificDetails,
        'ConfigurationSettings.VMwareVirtualMachine': VMwareVirtualMachineDetails
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        ApplyRecoveryPointProviderSpecificInput: ApplyRecoveryPointProviderSpecificInput,
        A2AApplyRecoveryPointInput: A2AApplyRecoveryPointInput,
        ReplicationProviderSpecificContainerCreationInput: ReplicationProviderSpecificContainerCreationInput,
        A2AContainerCreationInput: A2AContainerCreationInput,
        ReplicationProviderSpecificContainerMappingInput: ReplicationProviderSpecificContainerMappingInput,
        A2AContainerMappingInput: A2AContainerMappingInput,
        A2AVmDiskInputDetails: A2AVmDiskInputDetails,
        A2AVmManagedDiskInputDetails: A2AVmManagedDiskInputDetails,
        DiskEncryptionKeyInfo: DiskEncryptionKeyInfo,
        KeyEncryptionKeyInfo: KeyEncryptionKeyInfo,
        DiskEncryptionInfo: DiskEncryptionInfo,
        EnableProtectionProviderSpecificInput: EnableProtectionProviderSpecificInput,
        A2AEnableProtectionInput: A2AEnableProtectionInput,
        EventProviderSpecificDetails: EventProviderSpecificDetails,
        A2AEventDetails: A2AEventDetails,
        ProviderSpecificFailoverInput: ProviderSpecificFailoverInput,
        A2AFailoverProviderInput: A2AFailoverProviderInput,
        PolicyProviderSpecificInput: PolicyProviderSpecificInput,
        A2APolicyCreationInput: A2APolicyCreationInput,
        PolicyProviderSpecificDetails: PolicyProviderSpecificDetails,
        A2APolicyDetails: A2APolicyDetails,
        A2AProtectedDiskDetails: A2AProtectedDiskDetails,
        A2AProtectedManagedDiskDetails: A2AProtectedManagedDiskDetails,
        ProtectionContainerMappingProviderSpecificDetails: ProtectionContainerMappingProviderSpecificDetails,
        A2AProtectionContainerMappingDetails: A2AProtectionContainerMappingDetails,
        ProviderSpecificRecoveryPointDetails: ProviderSpecificRecoveryPointDetails,
        A2ARecoveryPointDetails: A2ARecoveryPointDetails,
        VMNicDetails: VMNicDetails,
        RoleAssignment: RoleAssignment,
        InputEndpoint: InputEndpoint,
        AzureToAzureVmSyncedConfigDetails: AzureToAzureVmSyncedConfigDetails,
        ReplicationProviderSpecificSettings: ReplicationProviderSpecificSettings,
        A2AReplicationDetails: A2AReplicationDetails,
        ReverseReplicationProviderSpecificInput: ReverseReplicationProviderSpecificInput,
        A2AReprotectInput: A2AReprotectInput,
        SwitchProtectionProviderSpecificInput: SwitchProtectionProviderSpecificInput,
        A2ASwitchProtectionInput: A2ASwitchProtectionInput,
        ReplicationProviderSpecificUpdateContainerMappingInput: ReplicationProviderSpecificUpdateContainerMappingInput,
        A2AUpdateContainerMappingInput: A2AUpdateContainerMappingInput,
        A2AVmManagedDiskUpdateDetails: A2AVmManagedDiskUpdateDetails,
        UpdateReplicationProtectedItemProviderInput: UpdateReplicationProtectedItemProviderInput,
        A2AUpdateReplicationProtectedItemInput: A2AUpdateReplicationProtectedItemInput,
        AddVCenterRequestProperties: AddVCenterRequestProperties,
        AddVCenterRequest: AddVCenterRequest,
        AlertProperties: AlertProperties,
        Resource: Resource,
        Alert: Alert,
        ApplyRecoveryPointInputProperties: ApplyRecoveryPointInputProperties,
        ApplyRecoveryPointInput: ApplyRecoveryPointInput,
        JobDetails: JobDetails,
        AsrJobDetails: AsrJobDetails,
        TaskTypeDetails: TaskTypeDetails,
        GroupTaskDetails: GroupTaskDetails,
        ServiceError: ServiceError,
        ProviderError: ProviderError,
        JobErrorDetails: JobErrorDetails,
        ASRTask: ASRTask,
        AutomationRunbookTaskDetails: AutomationRunbookTaskDetails,
        FabricSpecificCreationInput: FabricSpecificCreationInput,
        AzureFabricCreationInput: AzureFabricCreationInput,
        FabricSpecificDetails: FabricSpecificDetails,
        AzureFabricSpecificDetails: AzureFabricSpecificDetails,
        FabricSpecificCreateNetworkMappingInput: FabricSpecificCreateNetworkMappingInput,
        AzureToAzureCreateNetworkMappingInput: AzureToAzureCreateNetworkMappingInput,
        NetworkMappingFabricSpecificSettings: NetworkMappingFabricSpecificSettings,
        AzureToAzureNetworkMappingSettings: AzureToAzureNetworkMappingSettings,
        FabricSpecificUpdateNetworkMappingInput: FabricSpecificUpdateNetworkMappingInput,
        AzureToAzureUpdateNetworkMappingInput: AzureToAzureUpdateNetworkMappingInput,
        AzureVmDiskDetails: AzureVmDiskDetails,
        ComputeSizeErrorDetails: ComputeSizeErrorDetails,
        ConfigurationSettings: ConfigurationSettings,
        ConfigureAlertRequestProperties: ConfigureAlertRequestProperties,
        ConfigureAlertRequest: ConfigureAlertRequest,
        InconsistentVmDetails: InconsistentVmDetails,
        ConsistencyCheckTaskDetails: ConsistencyCheckTaskDetails,
        CreateNetworkMappingInputProperties: CreateNetworkMappingInputProperties,
        CreateNetworkMappingInput: CreateNetworkMappingInput,
        CreatePolicyInputProperties: CreatePolicyInputProperties,
        CreatePolicyInput: CreatePolicyInput,
        CreateProtectionContainerInputProperties: CreateProtectionContainerInputProperties,
        CreateProtectionContainerInput: CreateProtectionContainerInput,
        CreateProtectionContainerMappingInputProperties: CreateProtectionContainerMappingInputProperties,
        CreateProtectionContainerMappingInput: CreateProtectionContainerMappingInput,
        RecoveryPlanProtectedItem: RecoveryPlanProtectedItem,
        RecoveryPlanActionDetails: RecoveryPlanActionDetails,
        RecoveryPlanAction: RecoveryPlanAction,
        RecoveryPlanGroup: RecoveryPlanGroup,
        CreateRecoveryPlanInputProperties: CreateRecoveryPlanInputProperties,
        CreateRecoveryPlanInput: CreateRecoveryPlanInput,
        CurrentScenarioDetails: CurrentScenarioDetails,
        DataStore: DataStore,
        DisableProtectionProviderSpecificInput: DisableProtectionProviderSpecificInput,
        DisableProtectionInputProperties: DisableProtectionInputProperties,
        DisableProtectionInput: DisableProtectionInput,
        DiscoverProtectableItemRequestProperties: DiscoverProtectableItemRequestProperties,
        DiscoverProtectableItemRequest: DiscoverProtectableItemRequest,
        DiskDetails: DiskDetails,
        DiskVolumeDetails: DiskVolumeDetails,
        Display: Display,
        EnableProtectionInputProperties: EnableProtectionInputProperties,
        EnableProtectionInput: EnableProtectionInput,
        EncryptionDetails: EncryptionDetails,
        EventSpecificDetails: EventSpecificDetails,
        InnerHealthError: InnerHealthError,
        HealthError: HealthError,
        EventProperties: EventProperties,
        Event: Event,
        EventQueryParameter: EventQueryParameter,
        ExportJobDetails: ExportJobDetails,
        FabricProperties: FabricProperties,
        Fabric: Fabric,
        FabricCreationInputProperties: FabricCreationInputProperties,
        FabricCreationInput: FabricCreationInput,
        JobEntity: JobEntity,
        FabricReplicationGroupTaskDetails: FabricReplicationGroupTaskDetails,
        FailoverReplicationProtectedItemDetails: FailoverReplicationProtectedItemDetails,
        FailoverJobDetails: FailoverJobDetails,
        FailoverProcessServerRequestProperties: FailoverProcessServerRequestProperties,
        FailoverProcessServerRequest: FailoverProcessServerRequest,
        HealthErrorSummary: HealthErrorSummary,
        HyperVReplica2012EventDetails: HyperVReplica2012EventDetails,
        HyperVReplica2012R2EventDetails: HyperVReplica2012R2EventDetails,
        HyperVReplicaAzureApplyRecoveryPointInput: HyperVReplicaAzureApplyRecoveryPointInput,
        HyperVReplicaAzureEnableProtectionInput: HyperVReplicaAzureEnableProtectionInput,
        HyperVReplicaAzureEventDetails: HyperVReplicaAzureEventDetails,
        HyperVReplicaAzureFailbackProviderInput: HyperVReplicaAzureFailbackProviderInput,
        HyperVReplicaAzureFailoverProviderInput: HyperVReplicaAzureFailoverProviderInput,
        HyperVReplicaAzurePolicyDetails: HyperVReplicaAzurePolicyDetails,
        HyperVReplicaAzurePolicyInput: HyperVReplicaAzurePolicyInput,
        InitialReplicationDetails: InitialReplicationDetails,
        OSDetails: OSDetails,
        HyperVReplicaAzureReplicationDetails: HyperVReplicaAzureReplicationDetails,
        HyperVReplicaAzureReprotectInput: HyperVReplicaAzureReprotectInput,
        HyperVReplicaAzureUpdateReplicationProtectedItemInput: HyperVReplicaAzureUpdateReplicationProtectedItemInput,
        HyperVReplicaBaseEventDetails: HyperVReplicaBaseEventDetails,
        HyperVReplicaBasePolicyDetails: HyperVReplicaBasePolicyDetails,
        HyperVReplicaBaseReplicationDetails: HyperVReplicaBaseReplicationDetails,
        HyperVReplicaBluePolicyDetails: HyperVReplicaBluePolicyDetails,
        HyperVReplicaBluePolicyInput: HyperVReplicaBluePolicyInput,
        HyperVReplicaBlueReplicationDetails: HyperVReplicaBlueReplicationDetails,
        HyperVReplicaPolicyDetails: HyperVReplicaPolicyDetails,
        HyperVReplicaPolicyInput: HyperVReplicaPolicyInput,
        HyperVReplicaReplicationDetails: HyperVReplicaReplicationDetails,
        HyperVSiteDetails: HyperVSiteDetails,
        HyperVVirtualMachineDetails: HyperVVirtualMachineDetails,
        IdentityInformation: IdentityInformation,
        InlineWorkflowTaskDetails: InlineWorkflowTaskDetails,
        InMageAgentDetails: InMageAgentDetails,
        InMageAgentVersionDetails: InMageAgentVersionDetails,
        InMageAzureV2ApplyRecoveryPointInput: InMageAzureV2ApplyRecoveryPointInput,
        InMageAzureV2EnableProtectionInput: InMageAzureV2EnableProtectionInput,
        InMageAzureV2EventDetails: InMageAzureV2EventDetails,
        InMageAzureV2FailoverProviderInput: InMageAzureV2FailoverProviderInput,
        InMageAzureV2PolicyDetails: InMageAzureV2PolicyDetails,
        InMageAzureV2PolicyInput: InMageAzureV2PolicyInput,
        InMageAzureV2ProtectedDiskDetails: InMageAzureV2ProtectedDiskDetails,
        InMageAzureV2RecoveryPointDetails: InMageAzureV2RecoveryPointDetails,
        InMageAzureV2ReplicationDetails: InMageAzureV2ReplicationDetails,
        InMageAzureV2ReprotectInput: InMageAzureV2ReprotectInput,
        InMageAzureV2UpdateReplicationProtectedItemInput: InMageAzureV2UpdateReplicationProtectedItemInput,
        InMageBasePolicyDetails: InMageBasePolicyDetails,
        InMageDisableProtectionProviderSpecificInput: InMageDisableProtectionProviderSpecificInput,
        InMageDiskDetails: InMageDiskDetails,
        InMageVolumeExclusionOptions: InMageVolumeExclusionOptions,
        InMageDiskSignatureExclusionOptions: InMageDiskSignatureExclusionOptions,
        InMageDiskExclusionInput: InMageDiskExclusionInput,
        InMageEnableProtectionInput: InMageEnableProtectionInput,
        InMageFailoverProviderInput: InMageFailoverProviderInput,
        InMagePolicyDetails: InMagePolicyDetails,
        InMagePolicyInput: InMagePolicyInput,
        InMageProtectedDiskDetails: InMageProtectedDiskDetails,
        OSDiskDetails: OSDiskDetails,
        InMageReplicationDetails: InMageReplicationDetails,
        InMageReprotectInput: InMageReprotectInput,
        JobProperties: JobProperties,
        Job: Job,
        JobQueryParameter: JobQueryParameter,
        JobStatusEventDetails: JobStatusEventDetails,
        JobTaskDetails: JobTaskDetails,
        LogicalNetworkProperties: LogicalNetworkProperties,
        LogicalNetwork: LogicalNetwork,
        ManualActionTaskDetails: ManualActionTaskDetails,
        RetentionVolume: RetentionVolume,
        VersionDetails: VersionDetails,
        MasterTargetServer: MasterTargetServer,
        MobilityServiceUpdate: MobilityServiceUpdate,
        Subnet: Subnet,
        NetworkProperties: NetworkProperties,
        Network: Network,
        NetworkMappingProperties: NetworkMappingProperties,
        NetworkMapping: NetworkMapping,
        OperationsDiscovery: OperationsDiscovery,
        PlannedFailoverInputProperties: PlannedFailoverInputProperties,
        PlannedFailoverInput: PlannedFailoverInput,
        PolicyProperties: PolicyProperties,
        Policy: Policy,
        ProcessServer: ProcessServer,
        ProtectableItemProperties: ProtectableItemProperties,
        ProtectableItem: ProtectableItem,
        ProtectableItemQueryParameter: ProtectableItemQueryParameter,
        ProtectedItemsQueryParameter: ProtectedItemsQueryParameter,
        ProtectionContainerFabricSpecificDetails: ProtectionContainerFabricSpecificDetails,
        ProtectionContainerProperties: ProtectionContainerProperties,
        ProtectionContainer: ProtectionContainer,
        ProtectionContainerMappingProperties: ProtectionContainerMappingProperties,
        ProtectionContainerMapping: ProtectionContainerMapping,
        RcmAzureMigrationPolicyDetails: RcmAzureMigrationPolicyDetails,
        RecoveryPlanProperties: RecoveryPlanProperties,
        RecoveryPlan: RecoveryPlan,
        RecoveryPlanProviderSpecificFailoverInput: RecoveryPlanProviderSpecificFailoverInput,
        RecoveryPlanA2AFailoverInput: RecoveryPlanA2AFailoverInput,
        RecoveryPlanAutomationRunbookActionDetails: RecoveryPlanAutomationRunbookActionDetails,
        RecoveryPlanGroupTaskDetails: RecoveryPlanGroupTaskDetails,
        RecoveryPlanHyperVReplicaAzureFailbackInput: RecoveryPlanHyperVReplicaAzureFailbackInput,
        RecoveryPlanHyperVReplicaAzureFailoverInput: RecoveryPlanHyperVReplicaAzureFailoverInput,
        RecoveryPlanInMageAzureV2FailoverInput: RecoveryPlanInMageAzureV2FailoverInput,
        RecoveryPlanInMageFailoverInput: RecoveryPlanInMageFailoverInput,
        RecoveryPlanManualActionDetails: RecoveryPlanManualActionDetails,
        RecoveryPlanPlannedFailoverInputProperties: RecoveryPlanPlannedFailoverInputProperties,
        RecoveryPlanPlannedFailoverInput: RecoveryPlanPlannedFailoverInput,
        RecoveryPlanScriptActionDetails: RecoveryPlanScriptActionDetails,
        RecoveryPlanShutdownGroupTaskDetails: RecoveryPlanShutdownGroupTaskDetails,
        RecoveryPlanTestFailoverCleanupInputProperties: RecoveryPlanTestFailoverCleanupInputProperties,
        RecoveryPlanTestFailoverCleanupInput: RecoveryPlanTestFailoverCleanupInput,
        RecoveryPlanTestFailoverInputProperties: RecoveryPlanTestFailoverInputProperties,
        RecoveryPlanTestFailoverInput: RecoveryPlanTestFailoverInput,
        RecoveryPlanUnplannedFailoverInputProperties: RecoveryPlanUnplannedFailoverInputProperties,
        RecoveryPlanUnplannedFailoverInput: RecoveryPlanUnplannedFailoverInput,
        RecoveryPointProperties: RecoveryPointProperties,
        RecoveryPoint: RecoveryPoint,
        RecoveryServicesProviderProperties: RecoveryServicesProviderProperties,
        RecoveryServicesProvider: RecoveryServicesProvider,
        ReplicationProviderContainerUnmappingInput: ReplicationProviderContainerUnmappingInput,
        RemoveProtectionContainerMappingInputProperties: RemoveProtectionContainerMappingInputProperties,
        RemoveProtectionContainerMappingInput: RemoveProtectionContainerMappingInput,
        RenewCertificateInputProperties: RenewCertificateInputProperties,
        RenewCertificateInput: RenewCertificateInput,
        ReplicationGroupDetails: ReplicationGroupDetails,
        ReplicationProtectedItemProperties: ReplicationProtectedItemProperties,
        ReplicationProtectedItem: ReplicationProtectedItem,
        ResourceHealthSummary: ResourceHealthSummary,
        ResumeJobParamsProperties: ResumeJobParamsProperties,
        ResumeJobParams: ResumeJobParams,
        ReverseReplicationInputProperties: ReverseReplicationInputProperties,
        ReverseReplicationInput: ReverseReplicationInput,
        RunAsAccount: RunAsAccount,
        SanEnableProtectionInput: SanEnableProtectionInput,
        ScriptActionTaskDetails: ScriptActionTaskDetails,
        StorageClassificationProperties: StorageClassificationProperties,
        StorageClassification: StorageClassification,
        StorageClassificationMappingProperties: StorageClassificationMappingProperties,
        StorageClassificationMapping: StorageClassificationMapping,
        StorageMappingInputProperties: StorageMappingInputProperties,
        StorageClassificationMappingInput: StorageClassificationMappingInput,
        SwitchProtectionInputProperties: SwitchProtectionInputProperties,
        SwitchProtectionInput: SwitchProtectionInput,
        SwitchProtectionJobDetails: SwitchProtectionJobDetails,
        TargetComputeSizeProperties: TargetComputeSizeProperties,
        TargetComputeSize: TargetComputeSize,
        TestFailoverCleanupInputProperties: TestFailoverCleanupInputProperties,
        TestFailoverCleanupInput: TestFailoverCleanupInput,
        TestFailoverInputProperties: TestFailoverInputProperties,
        TestFailoverInput: TestFailoverInput,
        TestFailoverJobDetails: TestFailoverJobDetails,
        UnplannedFailoverInputProperties: UnplannedFailoverInputProperties,
        UnplannedFailoverInput: UnplannedFailoverInput,
        UpdateMobilityServiceRequestProperties: UpdateMobilityServiceRequestProperties,
        UpdateMobilityServiceRequest: UpdateMobilityServiceRequest,
        UpdateNetworkMappingInputProperties: UpdateNetworkMappingInputProperties,
        UpdateNetworkMappingInput: UpdateNetworkMappingInput,
        UpdatePolicyInputProperties: UpdatePolicyInputProperties,
        UpdatePolicyInput: UpdatePolicyInput,
        UpdateProtectionContainerMappingInputProperties: UpdateProtectionContainerMappingInputProperties,
        UpdateProtectionContainerMappingInput: UpdateProtectionContainerMappingInput,
        UpdateRecoveryPlanInputProperties: UpdateRecoveryPlanInputProperties,
        UpdateRecoveryPlanInput: UpdateRecoveryPlanInput,
        VMNicInputDetails: VMNicInputDetails,
        UpdateReplicationProtectedItemInputProperties: UpdateReplicationProtectedItemInputProperties,
        UpdateReplicationProtectedItemInput: UpdateReplicationProtectedItemInput,
        UpdateVCenterRequestProperties: UpdateVCenterRequestProperties,
        UpdateVCenterRequest: UpdateVCenterRequest,
        VaultHealthProperties: VaultHealthProperties,
        VaultHealthDetails: VaultHealthDetails,
        VCenterProperties: VCenterProperties,
        VCenter: VCenter,
        VirtualMachineTaskDetails: VirtualMachineTaskDetails,
        VmmDetails: VmmDetails,
        VmmToAzureCreateNetworkMappingInput: VmmToAzureCreateNetworkMappingInput,
        VmmToAzureNetworkMappingSettings: VmmToAzureNetworkMappingSettings,
        VmmToAzureUpdateNetworkMappingInput: VmmToAzureUpdateNetworkMappingInput,
        VmmToVmmCreateNetworkMappingInput: VmmToVmmCreateNetworkMappingInput,
        VmmToVmmNetworkMappingSettings: VmmToVmmNetworkMappingSettings,
        VmmToVmmUpdateNetworkMappingInput: VmmToVmmUpdateNetworkMappingInput,
        VmmVirtualMachineDetails: VmmVirtualMachineDetails,
        VmNicUpdatesTaskDetails: VmNicUpdatesTaskDetails,
        VMwareCbtPolicyCreationInput: VMwareCbtPolicyCreationInput,
        VmwareCbtPolicyDetails: VmwareCbtPolicyDetails,
        VMwareDetails: VMwareDetails,
        VMwareV2FabricCreationInput: VMwareV2FabricCreationInput,
        VMwareV2FabricSpecificDetails: VMwareV2FabricSpecificDetails,
        VMwareVirtualMachineDetails: VMwareVirtualMachineDetails,
        OperationsDiscoveryCollection: OperationsDiscoveryCollection,
        AlertCollection: AlertCollection,
        EventCollection: EventCollection,
        FabricCollection: FabricCollection,
        LogicalNetworkCollection: LogicalNetworkCollection,
        NetworkCollection: NetworkCollection,
        NetworkMappingCollection: NetworkMappingCollection,
        ProtectionContainerCollection: ProtectionContainerCollection,
        ProtectableItemCollection: ProtectableItemCollection,
        ReplicationProtectedItemCollection: ReplicationProtectedItemCollection,
        RecoveryPointCollection: RecoveryPointCollection,
        TargetComputeSizeCollection: TargetComputeSizeCollection,
        ProtectionContainerMappingCollection: ProtectionContainerMappingCollection,
        RecoveryServicesProviderCollection: RecoveryServicesProviderCollection,
        StorageClassificationCollection: StorageClassificationCollection,
        StorageClassificationMappingCollection: StorageClassificationMappingCollection,
        VCenterCollection: VCenterCollection,
        JobCollection: JobCollection,
        PolicyCollection: PolicyCollection,
        RecoveryPlanCollection: RecoveryPlanCollection,
        discriminators: discriminators
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        OperationsDiscoveryCollection: OperationsDiscoveryCollection,
        OperationsDiscovery: OperationsDiscovery,
        Display: Display,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var alertSettingName = {
        parameterPath: "alertSettingName",
        mapper: {
            required: true,
            serializedName: "alertSettingName",
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var eventName = {
        parameterPath: "eventName",
        mapper: {
            required: true,
            serializedName: "eventName",
            type: {
                name: "String"
            }
        }
    };
    var fabricName = {
        parameterPath: "fabricName",
        mapper: {
            required: true,
            serializedName: "fabricName",
            type: {
                name: "String"
            }
        }
    };
    var filter = {
        parameterPath: [
            "options",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var jobName = {
        parameterPath: "jobName",
        mapper: {
            required: true,
            serializedName: "jobName",
            type: {
                name: "String"
            }
        }
    };
    var logicalNetworkName = {
        parameterPath: "logicalNetworkName",
        mapper: {
            required: true,
            serializedName: "logicalNetworkName",
            type: {
                name: "String"
            }
        }
    };
    var mappingName = {
        parameterPath: "mappingName",
        mapper: {
            required: true,
            serializedName: "mappingName",
            type: {
                name: "String"
            }
        }
    };
    var networkMappingName = {
        parameterPath: "networkMappingName",
        mapper: {
            required: true,
            serializedName: "networkMappingName",
            type: {
                name: "String"
            }
        }
    };
    var networkName = {
        parameterPath: "networkName",
        mapper: {
            required: true,
            serializedName: "networkName",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var policyName = {
        parameterPath: "policyName",
        mapper: {
            required: true,
            serializedName: "policyName",
            type: {
                name: "String"
            }
        }
    };
    var protectableItemName = {
        parameterPath: "protectableItemName",
        mapper: {
            required: true,
            serializedName: "protectableItemName",
            type: {
                name: "String"
            }
        }
    };
    var protectionContainerName = {
        parameterPath: "protectionContainerName",
        mapper: {
            required: true,
            serializedName: "protectionContainerName",
            type: {
                name: "String"
            }
        }
    };
    var providerName = {
        parameterPath: "providerName",
        mapper: {
            required: true,
            serializedName: "providerName",
            type: {
                name: "String"
            }
        }
    };
    var recoveryPlanName = {
        parameterPath: "recoveryPlanName",
        mapper: {
            required: true,
            serializedName: "recoveryPlanName",
            type: {
                name: "String"
            }
        }
    };
    var recoveryPointName = {
        parameterPath: "recoveryPointName",
        mapper: {
            required: true,
            serializedName: "recoveryPointName",
            type: {
                name: "String"
            }
        }
    };
    var replicatedProtectedItemName = {
        parameterPath: "replicatedProtectedItemName",
        mapper: {
            required: true,
            serializedName: "replicatedProtectedItemName",
            type: {
                name: "String"
            }
        }
    };
    var replicationProtectedItemName = {
        parameterPath: "replicationProtectedItemName",
        mapper: {
            required: true,
            serializedName: "replicationProtectedItemName",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var resourceName = {
        parameterPath: "resourceName",
        mapper: {
            required: true,
            serializedName: "resourceName",
            type: {
                name: "String"
            }
        }
    };
    var skipToken = {
        parameterPath: [
            "options",
            "skipToken"
        ],
        mapper: {
            serializedName: "skipToken",
            type: {
                name: "String"
            }
        }
    };
    var storageClassificationMappingName = {
        parameterPath: "storageClassificationMappingName",
        mapper: {
            required: true,
            serializedName: "storageClassificationMappingName",
            type: {
                name: "String"
            }
        }
    };
    var storageClassificationName = {
        parameterPath: "storageClassificationName",
        mapper: {
            required: true,
            serializedName: "storageClassificationName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var vCenterName = {
        parameterPath: "vCenterName",
        mapper: {
            required: true,
            serializedName: "vCenterName",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {SiteRecoveryManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/operations",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationsDiscoveryCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationsDiscoveryCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        AlertCollection: AlertCollection,
        Alert: Alert,
        Resource: Resource,
        BaseResource: BaseResource,
        AlertProperties: AlertProperties,
        CloudError: CloudError,
        ConfigureAlertRequest: ConfigureAlertRequest,
        ConfigureAlertRequestProperties: ConfigureAlertRequestProperties,
        Event: Event,
        EventProperties: EventProperties,
        EventProviderSpecificDetails: EventProviderSpecificDetails,
        EventSpecificDetails: EventSpecificDetails,
        HealthError: HealthError,
        InnerHealthError: InnerHealthError,
        Fabric: Fabric,
        FabricProperties: FabricProperties,
        EncryptionDetails: EncryptionDetails,
        FabricSpecificDetails: FabricSpecificDetails,
        HyperVReplica2012EventDetails: HyperVReplica2012EventDetails,
        HyperVReplica2012R2EventDetails: HyperVReplica2012R2EventDetails,
        HyperVReplicaAzureEventDetails: HyperVReplicaAzureEventDetails,
        HyperVReplicaBaseEventDetails: HyperVReplicaBaseEventDetails,
        HyperVSiteDetails: HyperVSiteDetails,
        InMageAzureV2EventDetails: InMageAzureV2EventDetails,
        Job: Job,
        JobProperties: JobProperties,
        ASRTask: ASRTask,
        TaskTypeDetails: TaskTypeDetails,
        GroupTaskDetails: GroupTaskDetails,
        JobErrorDetails: JobErrorDetails,
        ServiceError: ServiceError,
        ProviderError: ProviderError,
        JobDetails: JobDetails,
        JobStatusEventDetails: JobStatusEventDetails,
        JobTaskDetails: JobTaskDetails,
        JobEntity: JobEntity,
        LogicalNetwork: LogicalNetwork,
        LogicalNetworkProperties: LogicalNetworkProperties,
        ManualActionTaskDetails: ManualActionTaskDetails,
        Network: Network,
        NetworkProperties: NetworkProperties,
        Subnet: Subnet,
        NetworkMapping: NetworkMapping,
        NetworkMappingProperties: NetworkMappingProperties,
        NetworkMappingFabricSpecificSettings: NetworkMappingFabricSpecificSettings,
        Policy: Policy,
        PolicyProperties: PolicyProperties,
        PolicyProviderSpecificDetails: PolicyProviderSpecificDetails,
        ProtectableItem: ProtectableItem,
        ProtectableItemProperties: ProtectableItemProperties,
        ConfigurationSettings: ConfigurationSettings,
        ProtectionContainer: ProtectionContainer,
        ProtectionContainerProperties: ProtectionContainerProperties,
        ProtectionContainerFabricSpecificDetails: ProtectionContainerFabricSpecificDetails,
        ProtectionContainerMapping: ProtectionContainerMapping,
        ProtectionContainerMappingProperties: ProtectionContainerMappingProperties,
        ProtectionContainerMappingProviderSpecificDetails: ProtectionContainerMappingProviderSpecificDetails,
        RcmAzureMigrationPolicyDetails: RcmAzureMigrationPolicyDetails,
        RecoveryPlan: RecoveryPlan,
        RecoveryPlanProperties: RecoveryPlanProperties,
        CurrentScenarioDetails: CurrentScenarioDetails,
        RecoveryPlanGroup: RecoveryPlanGroup,
        RecoveryPlanProtectedItem: RecoveryPlanProtectedItem,
        RecoveryPlanAction: RecoveryPlanAction,
        RecoveryPlanActionDetails: RecoveryPlanActionDetails,
        RecoveryPlanAutomationRunbookActionDetails: RecoveryPlanAutomationRunbookActionDetails,
        RecoveryPlanGroupTaskDetails: RecoveryPlanGroupTaskDetails,
        RecoveryPlanManualActionDetails: RecoveryPlanManualActionDetails,
        RecoveryPlanScriptActionDetails: RecoveryPlanScriptActionDetails,
        RecoveryPlanShutdownGroupTaskDetails: RecoveryPlanShutdownGroupTaskDetails,
        RecoveryPoint: RecoveryPoint,
        RecoveryPointProperties: RecoveryPointProperties,
        ProviderSpecificRecoveryPointDetails: ProviderSpecificRecoveryPointDetails,
        RecoveryServicesProvider: RecoveryServicesProvider,
        RecoveryServicesProviderProperties: RecoveryServicesProviderProperties,
        IdentityInformation: IdentityInformation,
        VersionDetails: VersionDetails,
        ReplicationGroupDetails: ReplicationGroupDetails,
        ReplicationProtectedItem: ReplicationProtectedItem,
        ReplicationProtectedItemProperties: ReplicationProtectedItemProperties,
        ReplicationProviderSpecificSettings: ReplicationProviderSpecificSettings,
        ScriptActionTaskDetails: ScriptActionTaskDetails,
        StorageClassification: StorageClassification,
        StorageClassificationProperties: StorageClassificationProperties,
        StorageClassificationMapping: StorageClassificationMapping,
        StorageClassificationMappingProperties: StorageClassificationMappingProperties,
        SwitchProtectionJobDetails: SwitchProtectionJobDetails,
        TestFailoverJobDetails: TestFailoverJobDetails,
        FailoverReplicationProtectedItemDetails: FailoverReplicationProtectedItemDetails,
        VaultHealthDetails: VaultHealthDetails,
        VaultHealthProperties: VaultHealthProperties,
        ResourceHealthSummary: ResourceHealthSummary,
        HealthErrorSummary: HealthErrorSummary,
        VCenter: VCenter,
        VCenterProperties: VCenterProperties,
        VirtualMachineTaskDetails: VirtualMachineTaskDetails,
        VmmDetails: VmmDetails,
        VmmToAzureNetworkMappingSettings: VmmToAzureNetworkMappingSettings,
        VmmToVmmNetworkMappingSettings: VmmToVmmNetworkMappingSettings,
        VmmVirtualMachineDetails: VmmVirtualMachineDetails,
        OSDetails: OSDetails,
        DiskDetails: DiskDetails,
        VmNicUpdatesTaskDetails: VmNicUpdatesTaskDetails,
        VmwareCbtPolicyDetails: VmwareCbtPolicyDetails,
        VMwareDetails: VMwareDetails,
        ProcessServer: ProcessServer,
        MobilityServiceUpdate: MobilityServiceUpdate,
        MasterTargetServer: MasterTargetServer,
        RetentionVolume: RetentionVolume,
        DataStore: DataStore,
        RunAsAccount: RunAsAccount,
        VMwareV2FabricSpecificDetails: VMwareV2FabricSpecificDetails,
        VMwareVirtualMachineDetails: VMwareVirtualMachineDetails,
        InMageDiskDetails: InMageDiskDetails,
        DiskVolumeDetails: DiskVolumeDetails,
        A2AEventDetails: A2AEventDetails,
        A2APolicyDetails: A2APolicyDetails,
        A2AProtectionContainerMappingDetails: A2AProtectionContainerMappingDetails,
        A2ARecoveryPointDetails: A2ARecoveryPointDetails,
        A2AReplicationDetails: A2AReplicationDetails,
        A2AProtectedDiskDetails: A2AProtectedDiskDetails,
        A2AProtectedManagedDiskDetails: A2AProtectedManagedDiskDetails,
        VMNicDetails: VMNicDetails,
        AzureToAzureVmSyncedConfigDetails: AzureToAzureVmSyncedConfigDetails,
        RoleAssignment: RoleAssignment,
        InputEndpoint: InputEndpoint,
        AsrJobDetails: AsrJobDetails,
        AutomationRunbookTaskDetails: AutomationRunbookTaskDetails,
        AzureFabricSpecificDetails: AzureFabricSpecificDetails,
        AzureToAzureNetworkMappingSettings: AzureToAzureNetworkMappingSettings,
        ConsistencyCheckTaskDetails: ConsistencyCheckTaskDetails,
        InconsistentVmDetails: InconsistentVmDetails,
        ExportJobDetails: ExportJobDetails,
        FabricReplicationGroupTaskDetails: FabricReplicationGroupTaskDetails,
        FailoverJobDetails: FailoverJobDetails,
        HyperVReplicaAzurePolicyDetails: HyperVReplicaAzurePolicyDetails,
        HyperVReplicaAzureReplicationDetails: HyperVReplicaAzureReplicationDetails,
        AzureVmDiskDetails: AzureVmDiskDetails,
        InitialReplicationDetails: InitialReplicationDetails,
        HyperVReplicaBasePolicyDetails: HyperVReplicaBasePolicyDetails,
        HyperVReplicaBaseReplicationDetails: HyperVReplicaBaseReplicationDetails,
        HyperVReplicaBluePolicyDetails: HyperVReplicaBluePolicyDetails,
        HyperVReplicaBlueReplicationDetails: HyperVReplicaBlueReplicationDetails,
        HyperVReplicaPolicyDetails: HyperVReplicaPolicyDetails,
        HyperVReplicaReplicationDetails: HyperVReplicaReplicationDetails,
        HyperVVirtualMachineDetails: HyperVVirtualMachineDetails,
        InlineWorkflowTaskDetails: InlineWorkflowTaskDetails,
        InMageAzureV2PolicyDetails: InMageAzureV2PolicyDetails,
        InMageAzureV2RecoveryPointDetails: InMageAzureV2RecoveryPointDetails,
        InMageAzureV2ReplicationDetails: InMageAzureV2ReplicationDetails,
        InMageAzureV2ProtectedDiskDetails: InMageAzureV2ProtectedDiskDetails,
        InMageBasePolicyDetails: InMageBasePolicyDetails,
        InMagePolicyDetails: InMagePolicyDetails,
        InMageReplicationDetails: InMageReplicationDetails,
        OSDiskDetails: OSDiskDetails,
        InMageProtectedDiskDetails: InMageProtectedDiskDetails,
        InMageAgentDetails: InMageAgentDetails
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ReplicationAlertSettings. */
    var ReplicationAlertSettings = /** @class */ (function () {
        /**
         * Create a ReplicationAlertSettings.
         * @param {SiteRecoveryManagementClientContext} client Reference to the service client.
         */
        function ReplicationAlertSettings(client) {
            this.client = client;
        }
        ReplicationAlertSettings.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        ReplicationAlertSettings.prototype.get = function (alertSettingName$$1, options, callback) {
            return this.client.sendOperationRequest({
                alertSettingName: alertSettingName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        ReplicationAlertSettings.prototype.create = function (alertSettingName$$1, request, options, callback) {
            return this.client.sendOperationRequest({
                alertSettingName: alertSettingName$$1,
                request: request,
                options: options
            }, createOperationSpec, callback);
        };
        ReplicationAlertSettings.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return ReplicationAlertSettings;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationAlertSettings",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AlertCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationAlertSettings/{alertSettingName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            alertSettingName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Alert
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var createOperationSpec = {
        httpMethod: "PUT",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationAlertSettings/{alertSettingName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            alertSettingName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "request",
            mapper: __assign({}, ConfigureAlertRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Alert
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AlertCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        EventCollection: EventCollection,
        Event: Event,
        Resource: Resource,
        BaseResource: BaseResource,
        EventProperties: EventProperties,
        EventProviderSpecificDetails: EventProviderSpecificDetails,
        EventSpecificDetails: EventSpecificDetails,
        HealthError: HealthError,
        InnerHealthError: InnerHealthError,
        CloudError: CloudError,
        A2AEventDetails: A2AEventDetails,
        Alert: Alert,
        AlertProperties: AlertProperties,
        Fabric: Fabric,
        FabricProperties: FabricProperties,
        EncryptionDetails: EncryptionDetails,
        FabricSpecificDetails: FabricSpecificDetails,
        HyperVReplica2012EventDetails: HyperVReplica2012EventDetails,
        HyperVReplica2012R2EventDetails: HyperVReplica2012R2EventDetails,
        HyperVReplicaAzureEventDetails: HyperVReplicaAzureEventDetails,
        HyperVReplicaBaseEventDetails: HyperVReplicaBaseEventDetails,
        HyperVSiteDetails: HyperVSiteDetails,
        InMageAzureV2EventDetails: InMageAzureV2EventDetails,
        Job: Job,
        JobProperties: JobProperties,
        ASRTask: ASRTask,
        TaskTypeDetails: TaskTypeDetails,
        GroupTaskDetails: GroupTaskDetails,
        JobErrorDetails: JobErrorDetails,
        ServiceError: ServiceError,
        ProviderError: ProviderError,
        JobDetails: JobDetails,
        JobStatusEventDetails: JobStatusEventDetails,
        JobTaskDetails: JobTaskDetails,
        JobEntity: JobEntity,
        LogicalNetwork: LogicalNetwork,
        LogicalNetworkProperties: LogicalNetworkProperties,
        ManualActionTaskDetails: ManualActionTaskDetails,
        Network: Network,
        NetworkProperties: NetworkProperties,
        Subnet: Subnet,
        NetworkMapping: NetworkMapping,
        NetworkMappingProperties: NetworkMappingProperties,
        NetworkMappingFabricSpecificSettings: NetworkMappingFabricSpecificSettings,
        Policy: Policy,
        PolicyProperties: PolicyProperties,
        PolicyProviderSpecificDetails: PolicyProviderSpecificDetails,
        ProtectableItem: ProtectableItem,
        ProtectableItemProperties: ProtectableItemProperties,
        ConfigurationSettings: ConfigurationSettings,
        ProtectionContainer: ProtectionContainer,
        ProtectionContainerProperties: ProtectionContainerProperties,
        ProtectionContainerFabricSpecificDetails: ProtectionContainerFabricSpecificDetails,
        ProtectionContainerMapping: ProtectionContainerMapping,
        ProtectionContainerMappingProperties: ProtectionContainerMappingProperties,
        ProtectionContainerMappingProviderSpecificDetails: ProtectionContainerMappingProviderSpecificDetails,
        RcmAzureMigrationPolicyDetails: RcmAzureMigrationPolicyDetails,
        RecoveryPlan: RecoveryPlan,
        RecoveryPlanProperties: RecoveryPlanProperties,
        CurrentScenarioDetails: CurrentScenarioDetails,
        RecoveryPlanGroup: RecoveryPlanGroup,
        RecoveryPlanProtectedItem: RecoveryPlanProtectedItem,
        RecoveryPlanAction: RecoveryPlanAction,
        RecoveryPlanActionDetails: RecoveryPlanActionDetails,
        RecoveryPlanAutomationRunbookActionDetails: RecoveryPlanAutomationRunbookActionDetails,
        RecoveryPlanGroupTaskDetails: RecoveryPlanGroupTaskDetails,
        RecoveryPlanManualActionDetails: RecoveryPlanManualActionDetails,
        RecoveryPlanScriptActionDetails: RecoveryPlanScriptActionDetails,
        RecoveryPlanShutdownGroupTaskDetails: RecoveryPlanShutdownGroupTaskDetails,
        RecoveryPoint: RecoveryPoint,
        RecoveryPointProperties: RecoveryPointProperties,
        ProviderSpecificRecoveryPointDetails: ProviderSpecificRecoveryPointDetails,
        RecoveryServicesProvider: RecoveryServicesProvider,
        RecoveryServicesProviderProperties: RecoveryServicesProviderProperties,
        IdentityInformation: IdentityInformation,
        VersionDetails: VersionDetails,
        ReplicationGroupDetails: ReplicationGroupDetails,
        ReplicationProtectedItem: ReplicationProtectedItem,
        ReplicationProtectedItemProperties: ReplicationProtectedItemProperties,
        ReplicationProviderSpecificSettings: ReplicationProviderSpecificSettings,
        ScriptActionTaskDetails: ScriptActionTaskDetails,
        StorageClassification: StorageClassification,
        StorageClassificationProperties: StorageClassificationProperties,
        StorageClassificationMapping: StorageClassificationMapping,
        StorageClassificationMappingProperties: StorageClassificationMappingProperties,
        SwitchProtectionJobDetails: SwitchProtectionJobDetails,
        TestFailoverJobDetails: TestFailoverJobDetails,
        FailoverReplicationProtectedItemDetails: FailoverReplicationProtectedItemDetails,
        VaultHealthDetails: VaultHealthDetails,
        VaultHealthProperties: VaultHealthProperties,
        ResourceHealthSummary: ResourceHealthSummary,
        HealthErrorSummary: HealthErrorSummary,
        VCenter: VCenter,
        VCenterProperties: VCenterProperties,
        VirtualMachineTaskDetails: VirtualMachineTaskDetails,
        VmmDetails: VmmDetails,
        VmmToAzureNetworkMappingSettings: VmmToAzureNetworkMappingSettings,
        VmmToVmmNetworkMappingSettings: VmmToVmmNetworkMappingSettings,
        VmmVirtualMachineDetails: VmmVirtualMachineDetails,
        OSDetails: OSDetails,
        DiskDetails: DiskDetails,
        VmNicUpdatesTaskDetails: VmNicUpdatesTaskDetails,
        VmwareCbtPolicyDetails: VmwareCbtPolicyDetails,
        VMwareDetails: VMwareDetails,
        ProcessServer: ProcessServer,
        MobilityServiceUpdate: MobilityServiceUpdate,
        MasterTargetServer: MasterTargetServer,
        RetentionVolume: RetentionVolume,
        DataStore: DataStore,
        RunAsAccount: RunAsAccount,
        VMwareV2FabricSpecificDetails: VMwareV2FabricSpecificDetails,
        VMwareVirtualMachineDetails: VMwareVirtualMachineDetails,
        InMageDiskDetails: InMageDiskDetails,
        DiskVolumeDetails: DiskVolumeDetails,
        A2APolicyDetails: A2APolicyDetails,
        A2AProtectionContainerMappingDetails: A2AProtectionContainerMappingDetails,
        A2ARecoveryPointDetails: A2ARecoveryPointDetails,
        A2AReplicationDetails: A2AReplicationDetails,
        A2AProtectedDiskDetails: A2AProtectedDiskDetails,
        A2AProtectedManagedDiskDetails: A2AProtectedManagedDiskDetails,
        VMNicDetails: VMNicDetails,
        AzureToAzureVmSyncedConfigDetails: AzureToAzureVmSyncedConfigDetails,
        RoleAssignment: RoleAssignment,
        InputEndpoint: InputEndpoint,
        AsrJobDetails: AsrJobDetails,
        AutomationRunbookTaskDetails: AutomationRunbookTaskDetails,
        AzureFabricSpecificDetails: AzureFabricSpecificDetails,
        AzureToAzureNetworkMappingSettings: AzureToAzureNetworkMappingSettings,
        ConsistencyCheckTaskDetails: ConsistencyCheckTaskDetails,
        InconsistentVmDetails: InconsistentVmDetails,
        ExportJobDetails: ExportJobDetails,
        FabricReplicationGroupTaskDetails: FabricReplicationGroupTaskDetails,
        FailoverJobDetails: FailoverJobDetails,
        HyperVReplicaAzurePolicyDetails: HyperVReplicaAzurePolicyDetails,
        HyperVReplicaAzureReplicationDetails: HyperVReplicaAzureReplicationDetails,
        AzureVmDiskDetails: AzureVmDiskDetails,
        InitialReplicationDetails: InitialReplicationDetails,
        HyperVReplicaBasePolicyDetails: HyperVReplicaBasePolicyDetails,
        HyperVReplicaBaseReplicationDetails: HyperVReplicaBaseReplicationDetails,
        HyperVReplicaBluePolicyDetails: HyperVReplicaBluePolicyDetails,
        HyperVReplicaBlueReplicationDetails: HyperVReplicaBlueReplicationDetails,
        HyperVReplicaPolicyDetails: HyperVReplicaPolicyDetails,
        HyperVReplicaReplicationDetails: HyperVReplicaReplicationDetails,
        HyperVVirtualMachineDetails: HyperVVirtualMachineDetails,
        InlineWorkflowTaskDetails: InlineWorkflowTaskDetails,
        InMageAzureV2PolicyDetails: InMageAzureV2PolicyDetails,
        InMageAzureV2RecoveryPointDetails: InMageAzureV2RecoveryPointDetails,
        InMageAzureV2ReplicationDetails: InMageAzureV2ReplicationDetails,
        InMageAzureV2ProtectedDiskDetails: InMageAzureV2ProtectedDiskDetails,
        InMageBasePolicyDetails: InMageBasePolicyDetails,
        InMagePolicyDetails: InMagePolicyDetails,
        InMageReplicationDetails: InMageReplicationDetails,
        OSDiskDetails: OSDiskDetails,
        InMageProtectedDiskDetails: InMageProtectedDiskDetails,
        InMageAgentDetails: InMageAgentDetails
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ReplicationEvents. */
    var ReplicationEvents = /** @class */ (function () {
        /**
         * Create a ReplicationEvents.
         * @param {SiteRecoveryManagementClientContext} client Reference to the service client.
         */
        function ReplicationEvents(client) {
            this.client = client;
        }
        ReplicationEvents.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$2, callback);
        };
        ReplicationEvents.prototype.get = function (eventName$$1, options, callback) {
            return this.client.sendOperationRequest({
                eventName: eventName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        ReplicationEvents.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        return ReplicationEvents;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationEvents",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EventCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationEvents/{eventName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            eventName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Event
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EventCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        FabricCollection: FabricCollection,
        Fabric: Fabric,
        Resource: Resource,
        BaseResource: BaseResource,
        FabricProperties: FabricProperties,
        EncryptionDetails: EncryptionDetails,
        FabricSpecificDetails: FabricSpecificDetails,
        HealthError: HealthError,
        InnerHealthError: InnerHealthError,
        CloudError: CloudError,
        FabricCreationInput: FabricCreationInput,
        FabricCreationInputProperties: FabricCreationInputProperties,
        FabricSpecificCreationInput: FabricSpecificCreationInput,
        FailoverProcessServerRequest: FailoverProcessServerRequest,
        FailoverProcessServerRequestProperties: FailoverProcessServerRequestProperties,
        RenewCertificateInput: RenewCertificateInput,
        RenewCertificateInputProperties: RenewCertificateInputProperties,
        Alert: Alert,
        AlertProperties: AlertProperties,
        AzureFabricCreationInput: AzureFabricCreationInput,
        AzureFabricSpecificDetails: AzureFabricSpecificDetails,
        Event: Event,
        EventProperties: EventProperties,
        EventProviderSpecificDetails: EventProviderSpecificDetails,
        EventSpecificDetails: EventSpecificDetails,
        HyperVReplica2012EventDetails: HyperVReplica2012EventDetails,
        HyperVReplica2012R2EventDetails: HyperVReplica2012R2EventDetails,
        HyperVReplicaAzureEventDetails: HyperVReplicaAzureEventDetails,
        HyperVReplicaBaseEventDetails: HyperVReplicaBaseEventDetails,
        HyperVSiteDetails: HyperVSiteDetails,
        InMageAzureV2EventDetails: InMageAzureV2EventDetails,
        Job: Job,
        JobProperties: JobProperties,
        ASRTask: ASRTask,
        TaskTypeDetails: TaskTypeDetails,
        GroupTaskDetails: GroupTaskDetails,
        JobErrorDetails: JobErrorDetails,
        ServiceError: ServiceError,
        ProviderError: ProviderError,
        JobDetails: JobDetails,
        JobStatusEventDetails: JobStatusEventDetails,
        JobTaskDetails: JobTaskDetails,
        JobEntity: JobEntity,
        LogicalNetwork: LogicalNetwork,
        LogicalNetworkProperties: LogicalNetworkProperties,
        ManualActionTaskDetails: ManualActionTaskDetails,
        Network: Network,
        NetworkProperties: NetworkProperties,
        Subnet: Subnet,
        NetworkMapping: NetworkMapping,
        NetworkMappingProperties: NetworkMappingProperties,
        NetworkMappingFabricSpecificSettings: NetworkMappingFabricSpecificSettings,
        Policy: Policy,
        PolicyProperties: PolicyProperties,
        PolicyProviderSpecificDetails: PolicyProviderSpecificDetails,
        ProtectableItem: ProtectableItem,
        ProtectableItemProperties: ProtectableItemProperties,
        ConfigurationSettings: ConfigurationSettings,
        ProtectionContainer: ProtectionContainer,
        ProtectionContainerProperties: ProtectionContainerProperties,
        ProtectionContainerFabricSpecificDetails: ProtectionContainerFabricSpecificDetails,
        ProtectionContainerMapping: ProtectionContainerMapping,
        ProtectionContainerMappingProperties: ProtectionContainerMappingProperties,
        ProtectionContainerMappingProviderSpecificDetails: ProtectionContainerMappingProviderSpecificDetails,
        RcmAzureMigrationPolicyDetails: RcmAzureMigrationPolicyDetails,
        RecoveryPlan: RecoveryPlan,
        RecoveryPlanProperties: RecoveryPlanProperties,
        CurrentScenarioDetails: CurrentScenarioDetails,
        RecoveryPlanGroup: RecoveryPlanGroup,
        RecoveryPlanProtectedItem: RecoveryPlanProtectedItem,
        RecoveryPlanAction: RecoveryPlanAction,
        RecoveryPlanActionDetails: RecoveryPlanActionDetails,
        RecoveryPlanAutomationRunbookActionDetails: RecoveryPlanAutomationRunbookActionDetails,
        RecoveryPlanGroupTaskDetails: RecoveryPlanGroupTaskDetails,
        RecoveryPlanManualActionDetails: RecoveryPlanManualActionDetails,
        RecoveryPlanScriptActionDetails: RecoveryPlanScriptActionDetails,
        RecoveryPlanShutdownGroupTaskDetails: RecoveryPlanShutdownGroupTaskDetails,
        RecoveryPoint: RecoveryPoint,
        RecoveryPointProperties: RecoveryPointProperties,
        ProviderSpecificRecoveryPointDetails: ProviderSpecificRecoveryPointDetails,
        RecoveryServicesProvider: RecoveryServicesProvider,
        RecoveryServicesProviderProperties: RecoveryServicesProviderProperties,
        IdentityInformation: IdentityInformation,
        VersionDetails: VersionDetails,
        ReplicationGroupDetails: ReplicationGroupDetails,
        ReplicationProtectedItem: ReplicationProtectedItem,
        ReplicationProtectedItemProperties: ReplicationProtectedItemProperties,
        ReplicationProviderSpecificSettings: ReplicationProviderSpecificSettings,
        ScriptActionTaskDetails: ScriptActionTaskDetails,
        StorageClassification: StorageClassification,
        StorageClassificationProperties: StorageClassificationProperties,
        StorageClassificationMapping: StorageClassificationMapping,
        StorageClassificationMappingProperties: StorageClassificationMappingProperties,
        SwitchProtectionJobDetails: SwitchProtectionJobDetails,
        TestFailoverJobDetails: TestFailoverJobDetails,
        FailoverReplicationProtectedItemDetails: FailoverReplicationProtectedItemDetails,
        VaultHealthDetails: VaultHealthDetails,
        VaultHealthProperties: VaultHealthProperties,
        ResourceHealthSummary: ResourceHealthSummary,
        HealthErrorSummary: HealthErrorSummary,
        VCenter: VCenter,
        VCenterProperties: VCenterProperties,
        VirtualMachineTaskDetails: VirtualMachineTaskDetails,
        VmmDetails: VmmDetails,
        VmmToAzureNetworkMappingSettings: VmmToAzureNetworkMappingSettings,
        VmmToVmmNetworkMappingSettings: VmmToVmmNetworkMappingSettings,
        VmmVirtualMachineDetails: VmmVirtualMachineDetails,
        OSDetails: OSDetails,
        DiskDetails: DiskDetails,
        VmNicUpdatesTaskDetails: VmNicUpdatesTaskDetails,
        VmwareCbtPolicyDetails: VmwareCbtPolicyDetails,
        VMwareDetails: VMwareDetails,
        ProcessServer: ProcessServer,
        MobilityServiceUpdate: MobilityServiceUpdate,
        MasterTargetServer: MasterTargetServer,
        RetentionVolume: RetentionVolume,
        DataStore: DataStore,
        RunAsAccount: RunAsAccount,
        VMwareV2FabricCreationInput: VMwareV2FabricCreationInput,
        VMwareV2FabricSpecificDetails: VMwareV2FabricSpecificDetails,
        VMwareVirtualMachineDetails: VMwareVirtualMachineDetails,
        InMageDiskDetails: InMageDiskDetails,
        DiskVolumeDetails: DiskVolumeDetails,
        A2AEventDetails: A2AEventDetails,
        A2APolicyDetails: A2APolicyDetails,
        A2AProtectionContainerMappingDetails: A2AProtectionContainerMappingDetails,
        A2ARecoveryPointDetails: A2ARecoveryPointDetails,
        A2AReplicationDetails: A2AReplicationDetails,
        A2AProtectedDiskDetails: A2AProtectedDiskDetails,
        A2AProtectedManagedDiskDetails: A2AProtectedManagedDiskDetails,
        VMNicDetails: VMNicDetails,
        AzureToAzureVmSyncedConfigDetails: AzureToAzureVmSyncedConfigDetails,
        RoleAssignment: RoleAssignment,
        InputEndpoint: InputEndpoint,
        AsrJobDetails: AsrJobDetails,
        AutomationRunbookTaskDetails: AutomationRunbookTaskDetails,
        AzureToAzureNetworkMappingSettings: AzureToAzureNetworkMappingSettings,
        ConsistencyCheckTaskDetails: ConsistencyCheckTaskDetails,
        InconsistentVmDetails: InconsistentVmDetails,
        ExportJobDetails: ExportJobDetails,
        FabricReplicationGroupTaskDetails: FabricReplicationGroupTaskDetails,
        FailoverJobDetails: FailoverJobDetails,
        HyperVReplicaAzurePolicyDetails: HyperVReplicaAzurePolicyDetails,
        HyperVReplicaAzureReplicationDetails: HyperVReplicaAzureReplicationDetails,
        AzureVmDiskDetails: AzureVmDiskDetails,
        InitialReplicationDetails: InitialReplicationDetails,
        HyperVReplicaBasePolicyDetails: HyperVReplicaBasePolicyDetails,
        HyperVReplicaBaseReplicationDetails: HyperVReplicaBaseReplicationDetails,
        HyperVReplicaBluePolicyDetails: HyperVReplicaBluePolicyDetails,
        HyperVReplicaBlueReplicationDetails: HyperVReplicaBlueReplicationDetails,
        HyperVReplicaPolicyDetails: HyperVReplicaPolicyDetails,
        HyperVReplicaReplicationDetails: HyperVReplicaReplicationDetails,
        HyperVVirtualMachineDetails: HyperVVirtualMachineDetails,
        InlineWorkflowTaskDetails: InlineWorkflowTaskDetails,
        InMageAzureV2PolicyDetails: InMageAzureV2PolicyDetails,
        InMageAzureV2RecoveryPointDetails: InMageAzureV2RecoveryPointDetails,
        InMageAzureV2ReplicationDetails: InMageAzureV2ReplicationDetails,
        InMageAzureV2ProtectedDiskDetails: InMageAzureV2ProtectedDiskDetails,
        InMageBasePolicyDetails: InMageBasePolicyDetails,
        InMagePolicyDetails: InMagePolicyDetails,
        InMageReplicationDetails: InMageReplicationDetails,
        OSDiskDetails: OSDiskDetails,
        InMageProtectedDiskDetails: InMageProtectedDiskDetails,
        InMageAgentDetails: InMageAgentDetails
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ReplicationFabrics. */
    var ReplicationFabrics = /** @class */ (function () {
        /**
         * Create a ReplicationFabrics.
         * @param {SiteRecoveryManagementClientContext} client Reference to the service client.
         */
        function ReplicationFabrics(client) {
            this.client = client;
        }
        ReplicationFabrics.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$3, callback);
        };
        ReplicationFabrics.prototype.get = function (fabricName$$1, options, callback) {
            return this.client.sendOperationRequest({
                fabricName: fabricName$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        /**
         * The operation to create an Azure Site Recovery fabric (for e.g. Hyper-V site)
         * @summary Creates an Azure Site Recovery fabric.
         * @param fabricName Name of the ASR fabric.
         * @param input Fabric creation input.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationFabricsCreateResponse>
         */
        ReplicationFabrics.prototype.create = function (fabricName$$1, input, options) {
            return this.beginCreate(fabricName$$1, input, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to purge(force delete) an Azure Site Recovery fabric.
         * @summary Purges the site.
         * @param fabricName ASR fabric to purge.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ReplicationFabrics.prototype.purge = function (fabricName$$1, options) {
            return this.beginPurge(fabricName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to perform a consistency check on the fabric.
         * @summary Checks the consistency of the ASR fabric.
         * @param fabricName Fabric name.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationFabricsCheckConsistencyResponse>
         */
        ReplicationFabrics.prototype.checkConsistency = function (fabricName$$1, options) {
            return this.beginCheckConsistency(fabricName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to migrate an Azure Site Recovery fabric to AAD.
         * @summary Migrates the site to AAD.
         * @param fabricName ASR fabric to migrate.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ReplicationFabrics.prototype.migrateToAad = function (fabricName$$1, options) {
            return this.beginMigrateToAad(fabricName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to move replications from a process server to another process server.
         * @summary Perform failover of the process server.
         * @param fabricName The name of the fabric containing the process server.
         * @param failoverProcessServerRequest The input to the failover process server operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationFabricsReassociateGatewayResponse>
         */
        ReplicationFabrics.prototype.reassociateGateway = function (fabricName$$1, failoverProcessServerRequest, options) {
            return this.beginReassociateGateway(fabricName$$1, failoverProcessServerRequest, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to delete or remove an Azure Site Recovery fabric.
         * @summary Deletes the site.
         * @param fabricName ASR fabric to delete
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ReplicationFabrics.prototype.deleteMethod = function (fabricName$$1, options) {
            return this.beginDeleteMethod(fabricName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Renews the connection certificate for the ASR replication fabric.
         * @summary Renews certificate for the fabric.
         * @param fabricName fabric name to renew certs for.
         * @param renewCertificateParameter Renew certificate input.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationFabricsRenewCertificateResponse>
         */
        ReplicationFabrics.prototype.renewCertificate = function (fabricName$$1, renewCertificateParameter, options) {
            return this.beginRenewCertificate(fabricName$$1, renewCertificateParameter, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to create an Azure Site Recovery fabric (for e.g. Hyper-V site)
         * @summary Creates an Azure Site Recovery fabric.
         * @param fabricName Name of the ASR fabric.
         * @param input Fabric creation input.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationFabrics.prototype.beginCreate = function (fabricName$$1, input, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                input: input,
                options: options
            }, beginCreateOperationSpec, options);
        };
        /**
         * The operation to purge(force delete) an Azure Site Recovery fabric.
         * @summary Purges the site.
         * @param fabricName ASR fabric to purge.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationFabrics.prototype.beginPurge = function (fabricName$$1, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                options: options
            }, beginPurgeOperationSpec, options);
        };
        /**
         * The operation to perform a consistency check on the fabric.
         * @summary Checks the consistency of the ASR fabric.
         * @param fabricName Fabric name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationFabrics.prototype.beginCheckConsistency = function (fabricName$$1, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                options: options
            }, beginCheckConsistencyOperationSpec, options);
        };
        /**
         * The operation to migrate an Azure Site Recovery fabric to AAD.
         * @summary Migrates the site to AAD.
         * @param fabricName ASR fabric to migrate.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationFabrics.prototype.beginMigrateToAad = function (fabricName$$1, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                options: options
            }, beginMigrateToAadOperationSpec, options);
        };
        /**
         * The operation to move replications from a process server to another process server.
         * @summary Perform failover of the process server.
         * @param fabricName The name of the fabric containing the process server.
         * @param failoverProcessServerRequest The input to the failover process server operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationFabrics.prototype.beginReassociateGateway = function (fabricName$$1, failoverProcessServerRequest, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                failoverProcessServerRequest: failoverProcessServerRequest,
                options: options
            }, beginReassociateGatewayOperationSpec, options);
        };
        /**
         * The operation to delete or remove an Azure Site Recovery fabric.
         * @summary Deletes the site.
         * @param fabricName ASR fabric to delete
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationFabrics.prototype.beginDeleteMethod = function (fabricName$$1, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        /**
         * Renews the connection certificate for the ASR replication fabric.
         * @summary Renews certificate for the fabric.
         * @param fabricName fabric name to renew certs for.
         * @param renewCertificateParameter Renew certificate input.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationFabrics.prototype.beginRenewCertificate = function (fabricName$$1, renewCertificateParameter, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                renewCertificateParameter: renewCertificateParameter,
                options: options
            }, beginRenewCertificateOperationSpec, options);
        };
        ReplicationFabrics.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$3, callback);
        };
        return ReplicationFabrics;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FabricCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Fabric
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginCreateOperationSpec = {
        httpMethod: "PUT",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "input",
            mapper: __assign({}, FabricCreationInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Fabric
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginPurgeOperationSpec = {
        httpMethod: "DELETE",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginCheckConsistencyOperationSpec = {
        httpMethod: "POST",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/checkConsistency",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Fabric
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginMigrateToAadOperationSpec = {
        httpMethod: "POST",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/migratetoaad",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginReassociateGatewayOperationSpec = {
        httpMethod: "POST",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/reassociateGateway",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "failoverProcessServerRequest",
            mapper: __assign({}, FailoverProcessServerRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Fabric
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "POST",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/remove",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginRenewCertificateOperationSpec = {
        httpMethod: "POST",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/renewCertificate",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "renewCertificateParameter",
            mapper: __assign({}, RenewCertificateInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Fabric
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FabricCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        LogicalNetworkCollection: LogicalNetworkCollection,
        LogicalNetwork: LogicalNetwork,
        Resource: Resource,
        BaseResource: BaseResource,
        LogicalNetworkProperties: LogicalNetworkProperties,
        CloudError: CloudError,
        Alert: Alert,
        AlertProperties: AlertProperties,
        Event: Event,
        EventProperties: EventProperties,
        EventProviderSpecificDetails: EventProviderSpecificDetails,
        EventSpecificDetails: EventSpecificDetails,
        HealthError: HealthError,
        InnerHealthError: InnerHealthError,
        Fabric: Fabric,
        FabricProperties: FabricProperties,
        EncryptionDetails: EncryptionDetails,
        FabricSpecificDetails: FabricSpecificDetails,
        HyperVReplica2012EventDetails: HyperVReplica2012EventDetails,
        HyperVReplica2012R2EventDetails: HyperVReplica2012R2EventDetails,
        HyperVReplicaAzureEventDetails: HyperVReplicaAzureEventDetails,
        HyperVReplicaBaseEventDetails: HyperVReplicaBaseEventDetails,
        HyperVSiteDetails: HyperVSiteDetails,
        InMageAzureV2EventDetails: InMageAzureV2EventDetails,
        Job: Job,
        JobProperties: JobProperties,
        ASRTask: ASRTask,
        TaskTypeDetails: TaskTypeDetails,
        GroupTaskDetails: GroupTaskDetails,
        JobErrorDetails: JobErrorDetails,
        ServiceError: ServiceError,
        ProviderError: ProviderError,
        JobDetails: JobDetails,
        JobStatusEventDetails: JobStatusEventDetails,
        JobTaskDetails: JobTaskDetails,
        JobEntity: JobEntity,
        ManualActionTaskDetails: ManualActionTaskDetails,
        Network: Network,
        NetworkProperties: NetworkProperties,
        Subnet: Subnet,
        NetworkMapping: NetworkMapping,
        NetworkMappingProperties: NetworkMappingProperties,
        NetworkMappingFabricSpecificSettings: NetworkMappingFabricSpecificSettings,
        Policy: Policy,
        PolicyProperties: PolicyProperties,
        PolicyProviderSpecificDetails: PolicyProviderSpecificDetails,
        ProtectableItem: ProtectableItem,
        ProtectableItemProperties: ProtectableItemProperties,
        ConfigurationSettings: ConfigurationSettings,
        ProtectionContainer: ProtectionContainer,
        ProtectionContainerProperties: ProtectionContainerProperties,
        ProtectionContainerFabricSpecificDetails: ProtectionContainerFabricSpecificDetails,
        ProtectionContainerMapping: ProtectionContainerMapping,
        ProtectionContainerMappingProperties: ProtectionContainerMappingProperties,
        ProtectionContainerMappingProviderSpecificDetails: ProtectionContainerMappingProviderSpecificDetails,
        RcmAzureMigrationPolicyDetails: RcmAzureMigrationPolicyDetails,
        RecoveryPlan: RecoveryPlan,
        RecoveryPlanProperties: RecoveryPlanProperties,
        CurrentScenarioDetails: CurrentScenarioDetails,
        RecoveryPlanGroup: RecoveryPlanGroup,
        RecoveryPlanProtectedItem: RecoveryPlanProtectedItem,
        RecoveryPlanAction: RecoveryPlanAction,
        RecoveryPlanActionDetails: RecoveryPlanActionDetails,
        RecoveryPlanAutomationRunbookActionDetails: RecoveryPlanAutomationRunbookActionDetails,
        RecoveryPlanGroupTaskDetails: RecoveryPlanGroupTaskDetails,
        RecoveryPlanManualActionDetails: RecoveryPlanManualActionDetails,
        RecoveryPlanScriptActionDetails: RecoveryPlanScriptActionDetails,
        RecoveryPlanShutdownGroupTaskDetails: RecoveryPlanShutdownGroupTaskDetails,
        RecoveryPoint: RecoveryPoint,
        RecoveryPointProperties: RecoveryPointProperties,
        ProviderSpecificRecoveryPointDetails: ProviderSpecificRecoveryPointDetails,
        RecoveryServicesProvider: RecoveryServicesProvider,
        RecoveryServicesProviderProperties: RecoveryServicesProviderProperties,
        IdentityInformation: IdentityInformation,
        VersionDetails: VersionDetails,
        ReplicationGroupDetails: ReplicationGroupDetails,
        ReplicationProtectedItem: ReplicationProtectedItem,
        ReplicationProtectedItemProperties: ReplicationProtectedItemProperties,
        ReplicationProviderSpecificSettings: ReplicationProviderSpecificSettings,
        ScriptActionTaskDetails: ScriptActionTaskDetails,
        StorageClassification: StorageClassification,
        StorageClassificationProperties: StorageClassificationProperties,
        StorageClassificationMapping: StorageClassificationMapping,
        StorageClassificationMappingProperties: StorageClassificationMappingProperties,
        SwitchProtectionJobDetails: SwitchProtectionJobDetails,
        TestFailoverJobDetails: TestFailoverJobDetails,
        FailoverReplicationProtectedItemDetails: FailoverReplicationProtectedItemDetails,
        VaultHealthDetails: VaultHealthDetails,
        VaultHealthProperties: VaultHealthProperties,
        ResourceHealthSummary: ResourceHealthSummary,
        HealthErrorSummary: HealthErrorSummary,
        VCenter: VCenter,
        VCenterProperties: VCenterProperties,
        VirtualMachineTaskDetails: VirtualMachineTaskDetails,
        VmmDetails: VmmDetails,
        VmmToAzureNetworkMappingSettings: VmmToAzureNetworkMappingSettings,
        VmmToVmmNetworkMappingSettings: VmmToVmmNetworkMappingSettings,
        VmmVirtualMachineDetails: VmmVirtualMachineDetails,
        OSDetails: OSDetails,
        DiskDetails: DiskDetails,
        VmNicUpdatesTaskDetails: VmNicUpdatesTaskDetails,
        VmwareCbtPolicyDetails: VmwareCbtPolicyDetails,
        VMwareDetails: VMwareDetails,
        ProcessServer: ProcessServer,
        MobilityServiceUpdate: MobilityServiceUpdate,
        MasterTargetServer: MasterTargetServer,
        RetentionVolume: RetentionVolume,
        DataStore: DataStore,
        RunAsAccount: RunAsAccount,
        VMwareV2FabricSpecificDetails: VMwareV2FabricSpecificDetails,
        VMwareVirtualMachineDetails: VMwareVirtualMachineDetails,
        InMageDiskDetails: InMageDiskDetails,
        DiskVolumeDetails: DiskVolumeDetails,
        A2AEventDetails: A2AEventDetails,
        A2APolicyDetails: A2APolicyDetails,
        A2AProtectionContainerMappingDetails: A2AProtectionContainerMappingDetails,
        A2ARecoveryPointDetails: A2ARecoveryPointDetails,
        A2AReplicationDetails: A2AReplicationDetails,
        A2AProtectedDiskDetails: A2AProtectedDiskDetails,
        A2AProtectedManagedDiskDetails: A2AProtectedManagedDiskDetails,
        VMNicDetails: VMNicDetails,
        AzureToAzureVmSyncedConfigDetails: AzureToAzureVmSyncedConfigDetails,
        RoleAssignment: RoleAssignment,
        InputEndpoint: InputEndpoint,
        AsrJobDetails: AsrJobDetails,
        AutomationRunbookTaskDetails: AutomationRunbookTaskDetails,
        AzureFabricSpecificDetails: AzureFabricSpecificDetails,
        AzureToAzureNetworkMappingSettings: AzureToAzureNetworkMappingSettings,
        ConsistencyCheckTaskDetails: ConsistencyCheckTaskDetails,
        InconsistentVmDetails: InconsistentVmDetails,
        ExportJobDetails: ExportJobDetails,
        FabricReplicationGroupTaskDetails: FabricReplicationGroupTaskDetails,
        FailoverJobDetails: FailoverJobDetails,
        HyperVReplicaAzurePolicyDetails: HyperVReplicaAzurePolicyDetails,
        HyperVReplicaAzureReplicationDetails: HyperVReplicaAzureReplicationDetails,
        AzureVmDiskDetails: AzureVmDiskDetails,
        InitialReplicationDetails: InitialReplicationDetails,
        HyperVReplicaBasePolicyDetails: HyperVReplicaBasePolicyDetails,
        HyperVReplicaBaseReplicationDetails: HyperVReplicaBaseReplicationDetails,
        HyperVReplicaBluePolicyDetails: HyperVReplicaBluePolicyDetails,
        HyperVReplicaBlueReplicationDetails: HyperVReplicaBlueReplicationDetails,
        HyperVReplicaPolicyDetails: HyperVReplicaPolicyDetails,
        HyperVReplicaReplicationDetails: HyperVReplicaReplicationDetails,
        HyperVVirtualMachineDetails: HyperVVirtualMachineDetails,
        InlineWorkflowTaskDetails: InlineWorkflowTaskDetails,
        InMageAzureV2PolicyDetails: InMageAzureV2PolicyDetails,
        InMageAzureV2RecoveryPointDetails: InMageAzureV2RecoveryPointDetails,
        InMageAzureV2ReplicationDetails: InMageAzureV2ReplicationDetails,
        InMageAzureV2ProtectedDiskDetails: InMageAzureV2ProtectedDiskDetails,
        InMageBasePolicyDetails: InMageBasePolicyDetails,
        InMagePolicyDetails: InMagePolicyDetails,
        InMageReplicationDetails: InMageReplicationDetails,
        OSDiskDetails: OSDiskDetails,
        InMageProtectedDiskDetails: InMageProtectedDiskDetails,
        InMageAgentDetails: InMageAgentDetails
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ReplicationLogicalNetworks. */
    var ReplicationLogicalNetworks = /** @class */ (function () {
        /**
         * Create a ReplicationLogicalNetworks.
         * @param {SiteRecoveryManagementClientContext} client Reference to the service client.
         */
        function ReplicationLogicalNetworks(client) {
            this.client = client;
        }
        ReplicationLogicalNetworks.prototype.listByReplicationFabrics = function (fabricName$$1, options, callback) {
            return this.client.sendOperationRequest({
                fabricName: fabricName$$1,
                options: options
            }, listByReplicationFabricsOperationSpec, callback);
        };
        ReplicationLogicalNetworks.prototype.get = function (fabricName$$1, logicalNetworkName$$1, options, callback) {
            return this.client.sendOperationRequest({
                fabricName: fabricName$$1,
                logicalNetworkName: logicalNetworkName$$1,
                options: options
            }, getOperationSpec$3, callback);
        };
        ReplicationLogicalNetworks.prototype.listByReplicationFabricsNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByReplicationFabricsNextOperationSpec, callback);
        };
        return ReplicationLogicalNetworks;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var listByReplicationFabricsOperationSpec = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationLogicalNetworks",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LogicalNetworkCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationLogicalNetworks/{logicalNetworkName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            logicalNetworkName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LogicalNetwork
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listByReplicationFabricsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LogicalNetworkCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        NetworkCollection: NetworkCollection,
        Network: Network,
        Resource: Resource,
        BaseResource: BaseResource,
        NetworkProperties: NetworkProperties,
        Subnet: Subnet,
        CloudError: CloudError,
        Alert: Alert,
        AlertProperties: AlertProperties,
        Event: Event,
        EventProperties: EventProperties,
        EventProviderSpecificDetails: EventProviderSpecificDetails,
        EventSpecificDetails: EventSpecificDetails,
        HealthError: HealthError,
        InnerHealthError: InnerHealthError,
        Fabric: Fabric,
        FabricProperties: FabricProperties,
        EncryptionDetails: EncryptionDetails,
        FabricSpecificDetails: FabricSpecificDetails,
        HyperVReplica2012EventDetails: HyperVReplica2012EventDetails,
        HyperVReplica2012R2EventDetails: HyperVReplica2012R2EventDetails,
        HyperVReplicaAzureEventDetails: HyperVReplicaAzureEventDetails,
        HyperVReplicaBaseEventDetails: HyperVReplicaBaseEventDetails,
        HyperVSiteDetails: HyperVSiteDetails,
        InMageAzureV2EventDetails: InMageAzureV2EventDetails,
        Job: Job,
        JobProperties: JobProperties,
        ASRTask: ASRTask,
        TaskTypeDetails: TaskTypeDetails,
        GroupTaskDetails: GroupTaskDetails,
        JobErrorDetails: JobErrorDetails,
        ServiceError: ServiceError,
        ProviderError: ProviderError,
        JobDetails: JobDetails,
        JobStatusEventDetails: JobStatusEventDetails,
        JobTaskDetails: JobTaskDetails,
        JobEntity: JobEntity,
        LogicalNetwork: LogicalNetwork,
        LogicalNetworkProperties: LogicalNetworkProperties,
        ManualActionTaskDetails: ManualActionTaskDetails,
        NetworkMapping: NetworkMapping,
        NetworkMappingProperties: NetworkMappingProperties,
        NetworkMappingFabricSpecificSettings: NetworkMappingFabricSpecificSettings,
        Policy: Policy,
        PolicyProperties: PolicyProperties,
        PolicyProviderSpecificDetails: PolicyProviderSpecificDetails,
        ProtectableItem: ProtectableItem,
        ProtectableItemProperties: ProtectableItemProperties,
        ConfigurationSettings: ConfigurationSettings,
        ProtectionContainer: ProtectionContainer,
        ProtectionContainerProperties: ProtectionContainerProperties,
        ProtectionContainerFabricSpecificDetails: ProtectionContainerFabricSpecificDetails,
        ProtectionContainerMapping: ProtectionContainerMapping,
        ProtectionContainerMappingProperties: ProtectionContainerMappingProperties,
        ProtectionContainerMappingProviderSpecificDetails: ProtectionContainerMappingProviderSpecificDetails,
        RcmAzureMigrationPolicyDetails: RcmAzureMigrationPolicyDetails,
        RecoveryPlan: RecoveryPlan,
        RecoveryPlanProperties: RecoveryPlanProperties,
        CurrentScenarioDetails: CurrentScenarioDetails,
        RecoveryPlanGroup: RecoveryPlanGroup,
        RecoveryPlanProtectedItem: RecoveryPlanProtectedItem,
        RecoveryPlanAction: RecoveryPlanAction,
        RecoveryPlanActionDetails: RecoveryPlanActionDetails,
        RecoveryPlanAutomationRunbookActionDetails: RecoveryPlanAutomationRunbookActionDetails,
        RecoveryPlanGroupTaskDetails: RecoveryPlanGroupTaskDetails,
        RecoveryPlanManualActionDetails: RecoveryPlanManualActionDetails,
        RecoveryPlanScriptActionDetails: RecoveryPlanScriptActionDetails,
        RecoveryPlanShutdownGroupTaskDetails: RecoveryPlanShutdownGroupTaskDetails,
        RecoveryPoint: RecoveryPoint,
        RecoveryPointProperties: RecoveryPointProperties,
        ProviderSpecificRecoveryPointDetails: ProviderSpecificRecoveryPointDetails,
        RecoveryServicesProvider: RecoveryServicesProvider,
        RecoveryServicesProviderProperties: RecoveryServicesProviderProperties,
        IdentityInformation: IdentityInformation,
        VersionDetails: VersionDetails,
        ReplicationGroupDetails: ReplicationGroupDetails,
        ReplicationProtectedItem: ReplicationProtectedItem,
        ReplicationProtectedItemProperties: ReplicationProtectedItemProperties,
        ReplicationProviderSpecificSettings: ReplicationProviderSpecificSettings,
        ScriptActionTaskDetails: ScriptActionTaskDetails,
        StorageClassification: StorageClassification,
        StorageClassificationProperties: StorageClassificationProperties,
        StorageClassificationMapping: StorageClassificationMapping,
        StorageClassificationMappingProperties: StorageClassificationMappingProperties,
        SwitchProtectionJobDetails: SwitchProtectionJobDetails,
        TestFailoverJobDetails: TestFailoverJobDetails,
        FailoverReplicationProtectedItemDetails: FailoverReplicationProtectedItemDetails,
        VaultHealthDetails: VaultHealthDetails,
        VaultHealthProperties: VaultHealthProperties,
        ResourceHealthSummary: ResourceHealthSummary,
        HealthErrorSummary: HealthErrorSummary,
        VCenter: VCenter,
        VCenterProperties: VCenterProperties,
        VirtualMachineTaskDetails: VirtualMachineTaskDetails,
        VmmDetails: VmmDetails,
        VmmToAzureNetworkMappingSettings: VmmToAzureNetworkMappingSettings,
        VmmToVmmNetworkMappingSettings: VmmToVmmNetworkMappingSettings,
        VmmVirtualMachineDetails: VmmVirtualMachineDetails,
        OSDetails: OSDetails,
        DiskDetails: DiskDetails,
        VmNicUpdatesTaskDetails: VmNicUpdatesTaskDetails,
        VmwareCbtPolicyDetails: VmwareCbtPolicyDetails,
        VMwareDetails: VMwareDetails,
        ProcessServer: ProcessServer,
        MobilityServiceUpdate: MobilityServiceUpdate,
        MasterTargetServer: MasterTargetServer,
        RetentionVolume: RetentionVolume,
        DataStore: DataStore,
        RunAsAccount: RunAsAccount,
        VMwareV2FabricSpecificDetails: VMwareV2FabricSpecificDetails,
        VMwareVirtualMachineDetails: VMwareVirtualMachineDetails,
        InMageDiskDetails: InMageDiskDetails,
        DiskVolumeDetails: DiskVolumeDetails,
        A2AEventDetails: A2AEventDetails,
        A2APolicyDetails: A2APolicyDetails,
        A2AProtectionContainerMappingDetails: A2AProtectionContainerMappingDetails,
        A2ARecoveryPointDetails: A2ARecoveryPointDetails,
        A2AReplicationDetails: A2AReplicationDetails,
        A2AProtectedDiskDetails: A2AProtectedDiskDetails,
        A2AProtectedManagedDiskDetails: A2AProtectedManagedDiskDetails,
        VMNicDetails: VMNicDetails,
        AzureToAzureVmSyncedConfigDetails: AzureToAzureVmSyncedConfigDetails,
        RoleAssignment: RoleAssignment,
        InputEndpoint: InputEndpoint,
        AsrJobDetails: AsrJobDetails,
        AutomationRunbookTaskDetails: AutomationRunbookTaskDetails,
        AzureFabricSpecificDetails: AzureFabricSpecificDetails,
        AzureToAzureNetworkMappingSettings: AzureToAzureNetworkMappingSettings,
        ConsistencyCheckTaskDetails: ConsistencyCheckTaskDetails,
        InconsistentVmDetails: InconsistentVmDetails,
        ExportJobDetails: ExportJobDetails,
        FabricReplicationGroupTaskDetails: FabricReplicationGroupTaskDetails,
        FailoverJobDetails: FailoverJobDetails,
        HyperVReplicaAzurePolicyDetails: HyperVReplicaAzurePolicyDetails,
        HyperVReplicaAzureReplicationDetails: HyperVReplicaAzureReplicationDetails,
        AzureVmDiskDetails: AzureVmDiskDetails,
        InitialReplicationDetails: InitialReplicationDetails,
        HyperVReplicaBasePolicyDetails: HyperVReplicaBasePolicyDetails,
        HyperVReplicaBaseReplicationDetails: HyperVReplicaBaseReplicationDetails,
        HyperVReplicaBluePolicyDetails: HyperVReplicaBluePolicyDetails,
        HyperVReplicaBlueReplicationDetails: HyperVReplicaBlueReplicationDetails,
        HyperVReplicaPolicyDetails: HyperVReplicaPolicyDetails,
        HyperVReplicaReplicationDetails: HyperVReplicaReplicationDetails,
        HyperVVirtualMachineDetails: HyperVVirtualMachineDetails,
        InlineWorkflowTaskDetails: InlineWorkflowTaskDetails,
        InMageAzureV2PolicyDetails: InMageAzureV2PolicyDetails,
        InMageAzureV2RecoveryPointDetails: InMageAzureV2RecoveryPointDetails,
        InMageAzureV2ReplicationDetails: InMageAzureV2ReplicationDetails,
        InMageAzureV2ProtectedDiskDetails: InMageAzureV2ProtectedDiskDetails,
        InMageBasePolicyDetails: InMageBasePolicyDetails,
        InMagePolicyDetails: InMagePolicyDetails,
        InMageReplicationDetails: InMageReplicationDetails,
        OSDiskDetails: OSDiskDetails,
        InMageProtectedDiskDetails: InMageProtectedDiskDetails,
        InMageAgentDetails: InMageAgentDetails
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ReplicationNetworks. */
    var ReplicationNetworks = /** @class */ (function () {
        /**
         * Create a ReplicationNetworks.
         * @param {SiteRecoveryManagementClientContext} client Reference to the service client.
         */
        function ReplicationNetworks(client) {
            this.client = client;
        }
        ReplicationNetworks.prototype.listByReplicationFabrics = function (fabricName$$1, options, callback) {
            return this.client.sendOperationRequest({
                fabricName: fabricName$$1,
                options: options
            }, listByReplicationFabricsOperationSpec$1, callback);
        };
        ReplicationNetworks.prototype.get = function (fabricName$$1, networkName$$1, options, callback) {
            return this.client.sendOperationRequest({
                fabricName: fabricName$$1,
                networkName: networkName$$1,
                options: options
            }, getOperationSpec$4, callback);
        };
        ReplicationNetworks.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$4, callback);
        };
        ReplicationNetworks.prototype.listByReplicationFabricsNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByReplicationFabricsNextOperationSpec$1, callback);
        };
        ReplicationNetworks.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$4, callback);
        };
        return ReplicationNetworks;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var listByReplicationFabricsOperationSpec$1 = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationNetworks",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationNetworks/{networkName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            networkName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Network
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var listOperationSpec$4 = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationNetworks",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var listByReplicationFabricsNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var listNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        NetworkMappingCollection: NetworkMappingCollection,
        NetworkMapping: NetworkMapping,
        Resource: Resource,
        BaseResource: BaseResource,
        NetworkMappingProperties: NetworkMappingProperties,
        NetworkMappingFabricSpecificSettings: NetworkMappingFabricSpecificSettings,
        CloudError: CloudError,
        CreateNetworkMappingInput: CreateNetworkMappingInput,
        CreateNetworkMappingInputProperties: CreateNetworkMappingInputProperties,
        FabricSpecificCreateNetworkMappingInput: FabricSpecificCreateNetworkMappingInput,
        UpdateNetworkMappingInput: UpdateNetworkMappingInput,
        UpdateNetworkMappingInputProperties: UpdateNetworkMappingInputProperties,
        FabricSpecificUpdateNetworkMappingInput: FabricSpecificUpdateNetworkMappingInput,
        Alert: Alert,
        AlertProperties: AlertProperties,
        AzureToAzureCreateNetworkMappingInput: AzureToAzureCreateNetworkMappingInput,
        AzureToAzureNetworkMappingSettings: AzureToAzureNetworkMappingSettings,
        AzureToAzureUpdateNetworkMappingInput: AzureToAzureUpdateNetworkMappingInput,
        Event: Event,
        EventProperties: EventProperties,
        EventProviderSpecificDetails: EventProviderSpecificDetails,
        EventSpecificDetails: EventSpecificDetails,
        HealthError: HealthError,
        InnerHealthError: InnerHealthError,
        Fabric: Fabric,
        FabricProperties: FabricProperties,
        EncryptionDetails: EncryptionDetails,
        FabricSpecificDetails: FabricSpecificDetails,
        HyperVReplica2012EventDetails: HyperVReplica2012EventDetails,
        HyperVReplica2012R2EventDetails: HyperVReplica2012R2EventDetails,
        HyperVReplicaAzureEventDetails: HyperVReplicaAzureEventDetails,
        HyperVReplicaBaseEventDetails: HyperVReplicaBaseEventDetails,
        HyperVSiteDetails: HyperVSiteDetails,
        InMageAzureV2EventDetails: InMageAzureV2EventDetails,
        Job: Job,
        JobProperties: JobProperties,
        ASRTask: ASRTask,
        TaskTypeDetails: TaskTypeDetails,
        GroupTaskDetails: GroupTaskDetails,
        JobErrorDetails: JobErrorDetails,
        ServiceError: ServiceError,
        ProviderError: ProviderError,
        JobDetails: JobDetails,
        JobStatusEventDetails: JobStatusEventDetails,
        JobTaskDetails: JobTaskDetails,
        JobEntity: JobEntity,
        LogicalNetwork: LogicalNetwork,
        LogicalNetworkProperties: LogicalNetworkProperties,
        ManualActionTaskDetails: ManualActionTaskDetails,
        Network: Network,
        NetworkProperties: NetworkProperties,
        Subnet: Subnet,
        Policy: Policy,
        PolicyProperties: PolicyProperties,
        PolicyProviderSpecificDetails: PolicyProviderSpecificDetails,
        ProtectableItem: ProtectableItem,
        ProtectableItemProperties: ProtectableItemProperties,
        ConfigurationSettings: ConfigurationSettings,
        ProtectionContainer: ProtectionContainer,
        ProtectionContainerProperties: ProtectionContainerProperties,
        ProtectionContainerFabricSpecificDetails: ProtectionContainerFabricSpecificDetails,
        ProtectionContainerMapping: ProtectionContainerMapping,
        ProtectionContainerMappingProperties: ProtectionContainerMappingProperties,
        ProtectionContainerMappingProviderSpecificDetails: ProtectionContainerMappingProviderSpecificDetails,
        RcmAzureMigrationPolicyDetails: RcmAzureMigrationPolicyDetails,
        RecoveryPlan: RecoveryPlan,
        RecoveryPlanProperties: RecoveryPlanProperties,
        CurrentScenarioDetails: CurrentScenarioDetails,
        RecoveryPlanGroup: RecoveryPlanGroup,
        RecoveryPlanProtectedItem: RecoveryPlanProtectedItem,
        RecoveryPlanAction: RecoveryPlanAction,
        RecoveryPlanActionDetails: RecoveryPlanActionDetails,
        RecoveryPlanAutomationRunbookActionDetails: RecoveryPlanAutomationRunbookActionDetails,
        RecoveryPlanGroupTaskDetails: RecoveryPlanGroupTaskDetails,
        RecoveryPlanManualActionDetails: RecoveryPlanManualActionDetails,
        RecoveryPlanScriptActionDetails: RecoveryPlanScriptActionDetails,
        RecoveryPlanShutdownGroupTaskDetails: RecoveryPlanShutdownGroupTaskDetails,
        RecoveryPoint: RecoveryPoint,
        RecoveryPointProperties: RecoveryPointProperties,
        ProviderSpecificRecoveryPointDetails: ProviderSpecificRecoveryPointDetails,
        RecoveryServicesProvider: RecoveryServicesProvider,
        RecoveryServicesProviderProperties: RecoveryServicesProviderProperties,
        IdentityInformation: IdentityInformation,
        VersionDetails: VersionDetails,
        ReplicationGroupDetails: ReplicationGroupDetails,
        ReplicationProtectedItem: ReplicationProtectedItem,
        ReplicationProtectedItemProperties: ReplicationProtectedItemProperties,
        ReplicationProviderSpecificSettings: ReplicationProviderSpecificSettings,
        ScriptActionTaskDetails: ScriptActionTaskDetails,
        StorageClassification: StorageClassification,
        StorageClassificationProperties: StorageClassificationProperties,
        StorageClassificationMapping: StorageClassificationMapping,
        StorageClassificationMappingProperties: StorageClassificationMappingProperties,
        SwitchProtectionJobDetails: SwitchProtectionJobDetails,
        TestFailoverJobDetails: TestFailoverJobDetails,
        FailoverReplicationProtectedItemDetails: FailoverReplicationProtectedItemDetails,
        VaultHealthDetails: VaultHealthDetails,
        VaultHealthProperties: VaultHealthProperties,
        ResourceHealthSummary: ResourceHealthSummary,
        HealthErrorSummary: HealthErrorSummary,
        VCenter: VCenter,
        VCenterProperties: VCenterProperties,
        VirtualMachineTaskDetails: VirtualMachineTaskDetails,
        VmmDetails: VmmDetails,
        VmmToAzureCreateNetworkMappingInput: VmmToAzureCreateNetworkMappingInput,
        VmmToAzureNetworkMappingSettings: VmmToAzureNetworkMappingSettings,
        VmmToAzureUpdateNetworkMappingInput: VmmToAzureUpdateNetworkMappingInput,
        VmmToVmmCreateNetworkMappingInput: VmmToVmmCreateNetworkMappingInput,
        VmmToVmmNetworkMappingSettings: VmmToVmmNetworkMappingSettings,
        VmmToVmmUpdateNetworkMappingInput: VmmToVmmUpdateNetworkMappingInput,
        VmmVirtualMachineDetails: VmmVirtualMachineDetails,
        OSDetails: OSDetails,
        DiskDetails: DiskDetails,
        VmNicUpdatesTaskDetails: VmNicUpdatesTaskDetails,
        VmwareCbtPolicyDetails: VmwareCbtPolicyDetails,
        VMwareDetails: VMwareDetails,
        ProcessServer: ProcessServer,
        MobilityServiceUpdate: MobilityServiceUpdate,
        MasterTargetServer: MasterTargetServer,
        RetentionVolume: RetentionVolume,
        DataStore: DataStore,
        RunAsAccount: RunAsAccount,
        VMwareV2FabricSpecificDetails: VMwareV2FabricSpecificDetails,
        VMwareVirtualMachineDetails: VMwareVirtualMachineDetails,
        InMageDiskDetails: InMageDiskDetails,
        DiskVolumeDetails: DiskVolumeDetails,
        A2AEventDetails: A2AEventDetails,
        A2APolicyDetails: A2APolicyDetails,
        A2AProtectionContainerMappingDetails: A2AProtectionContainerMappingDetails,
        A2ARecoveryPointDetails: A2ARecoveryPointDetails,
        A2AReplicationDetails: A2AReplicationDetails,
        A2AProtectedDiskDetails: A2AProtectedDiskDetails,
        A2AProtectedManagedDiskDetails: A2AProtectedManagedDiskDetails,
        VMNicDetails: VMNicDetails,
        AzureToAzureVmSyncedConfigDetails: AzureToAzureVmSyncedConfigDetails,
        RoleAssignment: RoleAssignment,
        InputEndpoint: InputEndpoint,
        AsrJobDetails: AsrJobDetails,
        AutomationRunbookTaskDetails: AutomationRunbookTaskDetails,
        AzureFabricSpecificDetails: AzureFabricSpecificDetails,
        ConsistencyCheckTaskDetails: ConsistencyCheckTaskDetails,
        InconsistentVmDetails: InconsistentVmDetails,
        ExportJobDetails: ExportJobDetails,
        FabricReplicationGroupTaskDetails: FabricReplicationGroupTaskDetails,
        FailoverJobDetails: FailoverJobDetails,
        HyperVReplicaAzurePolicyDetails: HyperVReplicaAzurePolicyDetails,
        HyperVReplicaAzureReplicationDetails: HyperVReplicaAzureReplicationDetails,
        AzureVmDiskDetails: AzureVmDiskDetails,
        InitialReplicationDetails: InitialReplicationDetails,
        HyperVReplicaBasePolicyDetails: HyperVReplicaBasePolicyDetails,
        HyperVReplicaBaseReplicationDetails: HyperVReplicaBaseReplicationDetails,
        HyperVReplicaBluePolicyDetails: HyperVReplicaBluePolicyDetails,
        HyperVReplicaBlueReplicationDetails: HyperVReplicaBlueReplicationDetails,
        HyperVReplicaPolicyDetails: HyperVReplicaPolicyDetails,
        HyperVReplicaReplicationDetails: HyperVReplicaReplicationDetails,
        HyperVVirtualMachineDetails: HyperVVirtualMachineDetails,
        InlineWorkflowTaskDetails: InlineWorkflowTaskDetails,
        InMageAzureV2PolicyDetails: InMageAzureV2PolicyDetails,
        InMageAzureV2RecoveryPointDetails: InMageAzureV2RecoveryPointDetails,
        InMageAzureV2ReplicationDetails: InMageAzureV2ReplicationDetails,
        InMageAzureV2ProtectedDiskDetails: InMageAzureV2ProtectedDiskDetails,
        InMageBasePolicyDetails: InMageBasePolicyDetails,
        InMagePolicyDetails: InMagePolicyDetails,
        InMageReplicationDetails: InMageReplicationDetails,
        OSDiskDetails: OSDiskDetails,
        InMageProtectedDiskDetails: InMageProtectedDiskDetails,
        InMageAgentDetails: InMageAgentDetails
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ReplicationNetworkMappings. */
    var ReplicationNetworkMappings = /** @class */ (function () {
        /**
         * Create a ReplicationNetworkMappings.
         * @param {SiteRecoveryManagementClientContext} client Reference to the service client.
         */
        function ReplicationNetworkMappings(client) {
            this.client = client;
        }
        ReplicationNetworkMappings.prototype.listByReplicationNetworks = function (fabricName$$1, networkName$$1, options, callback) {
            return this.client.sendOperationRequest({
                fabricName: fabricName$$1,
                networkName: networkName$$1,
                options: options
            }, listByReplicationNetworksOperationSpec, callback);
        };
        ReplicationNetworkMappings.prototype.get = function (fabricName$$1, networkName$$1, networkMappingName$$1, options, callback) {
            return this.client.sendOperationRequest({
                fabricName: fabricName$$1,
                networkName: networkName$$1,
                networkMappingName: networkMappingName$$1,
                options: options
            }, getOperationSpec$5, callback);
        };
        /**
         * The operation to create an ASR network mapping.
         * @summary Creates network mapping.
         * @param fabricName Primary fabric name.
         * @param networkName Primary network name.
         * @param networkMappingName Network mapping name.
         * @param input Create network mapping input.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationNetworkMappingsCreateResponse>
         */
        ReplicationNetworkMappings.prototype.create = function (fabricName$$1, networkName$$1, networkMappingName$$1, input, options) {
            return this.beginCreate(fabricName$$1, networkName$$1, networkMappingName$$1, input, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to delete a network mapping.
         * @summary Delete network mapping.
         * @param fabricName Primary fabric name.
         * @param networkName Primary network name.
         * @param networkMappingName ARM Resource Name for network mapping.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ReplicationNetworkMappings.prototype.deleteMethod = function (fabricName$$1, networkName$$1, networkMappingName$$1, options) {
            return this.beginDeleteMethod(fabricName$$1, networkName$$1, networkMappingName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to update an ASR network mapping.
         * @summary Updates network mapping.
         * @param fabricName Primary fabric name.
         * @param networkName Primary network name.
         * @param networkMappingName Network mapping name.
         * @param input Update network mapping input.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationNetworkMappingsUpdateResponse>
         */
        ReplicationNetworkMappings.prototype.update = function (fabricName$$1, networkName$$1, networkMappingName$$1, input, options) {
            return this.beginUpdate(fabricName$$1, networkName$$1, networkMappingName$$1, input, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ReplicationNetworkMappings.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$5, callback);
        };
        /**
         * The operation to create an ASR network mapping.
         * @summary Creates network mapping.
         * @param fabricName Primary fabric name.
         * @param networkName Primary network name.
         * @param networkMappingName Network mapping name.
         * @param input Create network mapping input.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationNetworkMappings.prototype.beginCreate = function (fabricName$$1, networkName$$1, networkMappingName$$1, input, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                networkName: networkName$$1,
                networkMappingName: networkMappingName$$1,
                input: input,
                options: options
            }, beginCreateOperationSpec$1, options);
        };
        /**
         * The operation to delete a network mapping.
         * @summary Delete network mapping.
         * @param fabricName Primary fabric name.
         * @param networkName Primary network name.
         * @param networkMappingName ARM Resource Name for network mapping.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationNetworkMappings.prototype.beginDeleteMethod = function (fabricName$$1, networkName$$1, networkMappingName$$1, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                networkName: networkName$$1,
                networkMappingName: networkMappingName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$1, options);
        };
        /**
         * The operation to update an ASR network mapping.
         * @summary Updates network mapping.
         * @param fabricName Primary fabric name.
         * @param networkName Primary network name.
         * @param networkMappingName Network mapping name.
         * @param input Update network mapping input.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationNetworkMappings.prototype.beginUpdate = function (fabricName$$1, networkName$$1, networkMappingName$$1, input, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                networkName: networkName$$1,
                networkMappingName: networkMappingName$$1,
                input: input,
                options: options
            }, beginUpdateOperationSpec, options);
        };
        ReplicationNetworkMappings.prototype.listByReplicationNetworksNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByReplicationNetworksNextOperationSpec, callback);
        };
        ReplicationNetworkMappings.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$5, callback);
        };
        return ReplicationNetworkMappings;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var listByReplicationNetworksOperationSpec = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationNetworks/{networkName}/replicationNetworkMappings",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            networkName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkMappingCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var getOperationSpec$5 = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationNetworks/{networkName}/replicationNetworkMappings/{networkMappingName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            networkName,
            networkMappingName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkMapping
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listOperationSpec$5 = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationNetworkMappings",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkMappingCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var beginCreateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationNetworks/{networkName}/replicationNetworkMappings/{networkMappingName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            networkName,
            networkMappingName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "input",
            mapper: __assign({}, CreateNetworkMappingInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: NetworkMapping
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var beginDeleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationNetworks/{networkName}/replicationNetworkMappings/{networkMappingName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            networkName,
            networkMappingName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var beginUpdateOperationSpec = {
        httpMethod: "PATCH",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationNetworks/{networkName}/replicationNetworkMappings/{networkMappingName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            networkName,
            networkMappingName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "input",
            mapper: __assign({}, UpdateNetworkMappingInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: NetworkMapping
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listByReplicationNetworksNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkMappingCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listNextOperationSpec$5 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkMappingCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        ProtectionContainerCollection: ProtectionContainerCollection,
        ProtectionContainer: ProtectionContainer,
        Resource: Resource,
        BaseResource: BaseResource,
        ProtectionContainerProperties: ProtectionContainerProperties,
        ProtectionContainerFabricSpecificDetails: ProtectionContainerFabricSpecificDetails,
        CloudError: CloudError,
        CreateProtectionContainerInput: CreateProtectionContainerInput,
        CreateProtectionContainerInputProperties: CreateProtectionContainerInputProperties,
        ReplicationProviderSpecificContainerCreationInput: ReplicationProviderSpecificContainerCreationInput,
        DiscoverProtectableItemRequest: DiscoverProtectableItemRequest,
        DiscoverProtectableItemRequestProperties: DiscoverProtectableItemRequestProperties,
        SwitchProtectionInput: SwitchProtectionInput,
        SwitchProtectionInputProperties: SwitchProtectionInputProperties,
        SwitchProtectionProviderSpecificInput: SwitchProtectionProviderSpecificInput,
        A2AContainerCreationInput: A2AContainerCreationInput,
        A2ASwitchProtectionInput: A2ASwitchProtectionInput,
        A2AVmDiskInputDetails: A2AVmDiskInputDetails,
        A2AVmManagedDiskInputDetails: A2AVmManagedDiskInputDetails,
        DiskEncryptionInfo: DiskEncryptionInfo,
        DiskEncryptionKeyInfo: DiskEncryptionKeyInfo,
        KeyEncryptionKeyInfo: KeyEncryptionKeyInfo,
        Alert: Alert,
        AlertProperties: AlertProperties,
        Event: Event,
        EventProperties: EventProperties,
        EventProviderSpecificDetails: EventProviderSpecificDetails,
        EventSpecificDetails: EventSpecificDetails,
        HealthError: HealthError,
        InnerHealthError: InnerHealthError,
        Fabric: Fabric,
        FabricProperties: FabricProperties,
        EncryptionDetails: EncryptionDetails,
        FabricSpecificDetails: FabricSpecificDetails,
        HyperVReplica2012EventDetails: HyperVReplica2012EventDetails,
        HyperVReplica2012R2EventDetails: HyperVReplica2012R2EventDetails,
        HyperVReplicaAzureEventDetails: HyperVReplicaAzureEventDetails,
        HyperVReplicaBaseEventDetails: HyperVReplicaBaseEventDetails,
        HyperVSiteDetails: HyperVSiteDetails,
        InMageAzureV2EventDetails: InMageAzureV2EventDetails,
        Job: Job,
        JobProperties: JobProperties,
        ASRTask: ASRTask,
        TaskTypeDetails: TaskTypeDetails,
        GroupTaskDetails: GroupTaskDetails,
        JobErrorDetails: JobErrorDetails,
        ServiceError: ServiceError,
        ProviderError: ProviderError,
        JobDetails: JobDetails,
        JobStatusEventDetails: JobStatusEventDetails,
        JobTaskDetails: JobTaskDetails,
        JobEntity: JobEntity,
        LogicalNetwork: LogicalNetwork,
        LogicalNetworkProperties: LogicalNetworkProperties,
        ManualActionTaskDetails: ManualActionTaskDetails,
        Network: Network,
        NetworkProperties: NetworkProperties,
        Subnet: Subnet,
        NetworkMapping: NetworkMapping,
        NetworkMappingProperties: NetworkMappingProperties,
        NetworkMappingFabricSpecificSettings: NetworkMappingFabricSpecificSettings,
        Policy: Policy,
        PolicyProperties: PolicyProperties,
        PolicyProviderSpecificDetails: PolicyProviderSpecificDetails,
        ProtectableItem: ProtectableItem,
        ProtectableItemProperties: ProtectableItemProperties,
        ConfigurationSettings: ConfigurationSettings,
        ProtectionContainerMapping: ProtectionContainerMapping,
        ProtectionContainerMappingProperties: ProtectionContainerMappingProperties,
        ProtectionContainerMappingProviderSpecificDetails: ProtectionContainerMappingProviderSpecificDetails,
        RcmAzureMigrationPolicyDetails: RcmAzureMigrationPolicyDetails,
        RecoveryPlan: RecoveryPlan,
        RecoveryPlanProperties: RecoveryPlanProperties,
        CurrentScenarioDetails: CurrentScenarioDetails,
        RecoveryPlanGroup: RecoveryPlanGroup,
        RecoveryPlanProtectedItem: RecoveryPlanProtectedItem,
        RecoveryPlanAction: RecoveryPlanAction,
        RecoveryPlanActionDetails: RecoveryPlanActionDetails,
        RecoveryPlanAutomationRunbookActionDetails: RecoveryPlanAutomationRunbookActionDetails,
        RecoveryPlanGroupTaskDetails: RecoveryPlanGroupTaskDetails,
        RecoveryPlanManualActionDetails: RecoveryPlanManualActionDetails,
        RecoveryPlanScriptActionDetails: RecoveryPlanScriptActionDetails,
        RecoveryPlanShutdownGroupTaskDetails: RecoveryPlanShutdownGroupTaskDetails,
        RecoveryPoint: RecoveryPoint,
        RecoveryPointProperties: RecoveryPointProperties,
        ProviderSpecificRecoveryPointDetails: ProviderSpecificRecoveryPointDetails,
        RecoveryServicesProvider: RecoveryServicesProvider,
        RecoveryServicesProviderProperties: RecoveryServicesProviderProperties,
        IdentityInformation: IdentityInformation,
        VersionDetails: VersionDetails,
        ReplicationGroupDetails: ReplicationGroupDetails,
        ReplicationProtectedItem: ReplicationProtectedItem,
        ReplicationProtectedItemProperties: ReplicationProtectedItemProperties,
        ReplicationProviderSpecificSettings: ReplicationProviderSpecificSettings,
        ScriptActionTaskDetails: ScriptActionTaskDetails,
        StorageClassification: StorageClassification,
        StorageClassificationProperties: StorageClassificationProperties,
        StorageClassificationMapping: StorageClassificationMapping,
        StorageClassificationMappingProperties: StorageClassificationMappingProperties,
        SwitchProtectionJobDetails: SwitchProtectionJobDetails,
        TestFailoverJobDetails: TestFailoverJobDetails,
        FailoverReplicationProtectedItemDetails: FailoverReplicationProtectedItemDetails,
        VaultHealthDetails: VaultHealthDetails,
        VaultHealthProperties: VaultHealthProperties,
        ResourceHealthSummary: ResourceHealthSummary,
        HealthErrorSummary: HealthErrorSummary,
        VCenter: VCenter,
        VCenterProperties: VCenterProperties,
        VirtualMachineTaskDetails: VirtualMachineTaskDetails,
        VmmDetails: VmmDetails,
        VmmToAzureNetworkMappingSettings: VmmToAzureNetworkMappingSettings,
        VmmToVmmNetworkMappingSettings: VmmToVmmNetworkMappingSettings,
        VmmVirtualMachineDetails: VmmVirtualMachineDetails,
        OSDetails: OSDetails,
        DiskDetails: DiskDetails,
        VmNicUpdatesTaskDetails: VmNicUpdatesTaskDetails,
        VmwareCbtPolicyDetails: VmwareCbtPolicyDetails,
        VMwareDetails: VMwareDetails,
        ProcessServer: ProcessServer,
        MobilityServiceUpdate: MobilityServiceUpdate,
        MasterTargetServer: MasterTargetServer,
        RetentionVolume: RetentionVolume,
        DataStore: DataStore,
        RunAsAccount: RunAsAccount,
        VMwareV2FabricSpecificDetails: VMwareV2FabricSpecificDetails,
        VMwareVirtualMachineDetails: VMwareVirtualMachineDetails,
        InMageDiskDetails: InMageDiskDetails,
        DiskVolumeDetails: DiskVolumeDetails,
        A2AEventDetails: A2AEventDetails,
        A2APolicyDetails: A2APolicyDetails,
        A2AProtectionContainerMappingDetails: A2AProtectionContainerMappingDetails,
        A2ARecoveryPointDetails: A2ARecoveryPointDetails,
        A2AReplicationDetails: A2AReplicationDetails,
        A2AProtectedDiskDetails: A2AProtectedDiskDetails,
        A2AProtectedManagedDiskDetails: A2AProtectedManagedDiskDetails,
        VMNicDetails: VMNicDetails,
        AzureToAzureVmSyncedConfigDetails: AzureToAzureVmSyncedConfigDetails,
        RoleAssignment: RoleAssignment,
        InputEndpoint: InputEndpoint,
        AsrJobDetails: AsrJobDetails,
        AutomationRunbookTaskDetails: AutomationRunbookTaskDetails,
        AzureFabricSpecificDetails: AzureFabricSpecificDetails,
        AzureToAzureNetworkMappingSettings: AzureToAzureNetworkMappingSettings,
        ConsistencyCheckTaskDetails: ConsistencyCheckTaskDetails,
        InconsistentVmDetails: InconsistentVmDetails,
        ExportJobDetails: ExportJobDetails,
        FabricReplicationGroupTaskDetails: FabricReplicationGroupTaskDetails,
        FailoverJobDetails: FailoverJobDetails,
        HyperVReplicaAzurePolicyDetails: HyperVReplicaAzurePolicyDetails,
        HyperVReplicaAzureReplicationDetails: HyperVReplicaAzureReplicationDetails,
        AzureVmDiskDetails: AzureVmDiskDetails,
        InitialReplicationDetails: InitialReplicationDetails,
        HyperVReplicaBasePolicyDetails: HyperVReplicaBasePolicyDetails,
        HyperVReplicaBaseReplicationDetails: HyperVReplicaBaseReplicationDetails,
        HyperVReplicaBluePolicyDetails: HyperVReplicaBluePolicyDetails,
        HyperVReplicaBlueReplicationDetails: HyperVReplicaBlueReplicationDetails,
        HyperVReplicaPolicyDetails: HyperVReplicaPolicyDetails,
        HyperVReplicaReplicationDetails: HyperVReplicaReplicationDetails,
        HyperVVirtualMachineDetails: HyperVVirtualMachineDetails,
        InlineWorkflowTaskDetails: InlineWorkflowTaskDetails,
        InMageAzureV2PolicyDetails: InMageAzureV2PolicyDetails,
        InMageAzureV2RecoveryPointDetails: InMageAzureV2RecoveryPointDetails,
        InMageAzureV2ReplicationDetails: InMageAzureV2ReplicationDetails,
        InMageAzureV2ProtectedDiskDetails: InMageAzureV2ProtectedDiskDetails,
        InMageBasePolicyDetails: InMageBasePolicyDetails,
        InMagePolicyDetails: InMagePolicyDetails,
        InMageReplicationDetails: InMageReplicationDetails,
        OSDiskDetails: OSDiskDetails,
        InMageProtectedDiskDetails: InMageProtectedDiskDetails,
        InMageAgentDetails: InMageAgentDetails
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ReplicationProtectionContainers. */
    var ReplicationProtectionContainers = /** @class */ (function () {
        /**
         * Create a ReplicationProtectionContainers.
         * @param {SiteRecoveryManagementClientContext} client Reference to the service client.
         */
        function ReplicationProtectionContainers(client) {
            this.client = client;
        }
        ReplicationProtectionContainers.prototype.listByReplicationFabrics = function (fabricName$$1, options, callback) {
            return this.client.sendOperationRequest({
                fabricName: fabricName$$1,
                options: options
            }, listByReplicationFabricsOperationSpec$2, callback);
        };
        ReplicationProtectionContainers.prototype.get = function (fabricName$$1, protectionContainerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                fabricName: fabricName$$1,
                protectionContainerName: protectionContainerName$$1,
                options: options
            }, getOperationSpec$6, callback);
        };
        /**
         * Operation to create a protection container.
         * @summary Create a protection container.
         * @param fabricName Unique fabric ARM name.
         * @param protectionContainerName Unique protection container ARM name.
         * @param creationInput Creation input.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationProtectionContainersCreateResponse>
         */
        ReplicationProtectionContainers.prototype.create = function (fabricName$$1, protectionContainerName$$1, creationInput, options) {
            return this.beginCreate(fabricName$$1, protectionContainerName$$1, creationInput, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to a add a protectable item to a protection container(Add physical server.)
         * @summary Adds a protectable item to the replication protection container.
         * @param fabricName The name of the fabric.
         * @param protectionContainerName The name of the protection container.
         * @param discoverProtectableItemRequest The request object to add a protectable item.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationProtectionContainersDiscoverProtectableItemResponse>
         */
        ReplicationProtectionContainers.prototype.discoverProtectableItem = function (fabricName$$1, protectionContainerName$$1, discoverProtectableItemRequest, options) {
            return this.beginDiscoverProtectableItem(fabricName$$1, protectionContainerName$$1, discoverProtectableItemRequest, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Operation to remove a protection container.
         * @summary Removes a protection container.
         * @param fabricName Unique fabric ARM name.
         * @param protectionContainerName Unique protection container ARM name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ReplicationProtectionContainers.prototype.deleteMethod = function (fabricName$$1, protectionContainerName$$1, options) {
            return this.beginDeleteMethod(fabricName$$1, protectionContainerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Operation to switch protection from one container to another or one replication provider to
         * another.
         * @summary Switches protection from one container to another or one replication provider to
         * another.
         * @param fabricName Unique fabric name.
         * @param protectionContainerName Protection container name.
         * @param switchInput Switch protection input.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationProtectionContainersSwitchProtectionResponse>
         */
        ReplicationProtectionContainers.prototype.switchProtection = function (fabricName$$1, protectionContainerName$$1, switchInput, options) {
            return this.beginSwitchProtection(fabricName$$1, protectionContainerName$$1, switchInput, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ReplicationProtectionContainers.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$6, callback);
        };
        /**
         * Operation to create a protection container.
         * @summary Create a protection container.
         * @param fabricName Unique fabric ARM name.
         * @param protectionContainerName Unique protection container ARM name.
         * @param creationInput Creation input.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationProtectionContainers.prototype.beginCreate = function (fabricName$$1, protectionContainerName$$1, creationInput, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                protectionContainerName: protectionContainerName$$1,
                creationInput: creationInput,
                options: options
            }, beginCreateOperationSpec$2, options);
        };
        /**
         * The operation to a add a protectable item to a protection container(Add physical server.)
         * @summary Adds a protectable item to the replication protection container.
         * @param fabricName The name of the fabric.
         * @param protectionContainerName The name of the protection container.
         * @param discoverProtectableItemRequest The request object to add a protectable item.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationProtectionContainers.prototype.beginDiscoverProtectableItem = function (fabricName$$1, protectionContainerName$$1, discoverProtectableItemRequest, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                protectionContainerName: protectionContainerName$$1,
                discoverProtectableItemRequest: discoverProtectableItemRequest,
                options: options
            }, beginDiscoverProtectableItemOperationSpec, options);
        };
        /**
         * Operation to remove a protection container.
         * @summary Removes a protection container.
         * @param fabricName Unique fabric ARM name.
         * @param protectionContainerName Unique protection container ARM name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationProtectionContainers.prototype.beginDeleteMethod = function (fabricName$$1, protectionContainerName$$1, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                protectionContainerName: protectionContainerName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$2, options);
        };
        /**
         * Operation to switch protection from one container to another or one replication provider to
         * another.
         * @summary Switches protection from one container to another or one replication provider to
         * another.
         * @param fabricName Unique fabric name.
         * @param protectionContainerName Protection container name.
         * @param switchInput Switch protection input.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationProtectionContainers.prototype.beginSwitchProtection = function (fabricName$$1, protectionContainerName$$1, switchInput, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                protectionContainerName: protectionContainerName$$1,
                switchInput: switchInput,
                options: options
            }, beginSwitchProtectionOperationSpec, options);
        };
        ReplicationProtectionContainers.prototype.listByReplicationFabricsNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByReplicationFabricsNextOperationSpec$2, callback);
        };
        ReplicationProtectionContainers.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$6, callback);
        };
        return ReplicationProtectionContainers;
    }());
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers$7);
    var listByReplicationFabricsOperationSpec$2 = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProtectionContainerCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var getOperationSpec$6 = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            protectionContainerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProtectionContainer
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var listOperationSpec$6 = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationProtectionContainers",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProtectionContainerCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var beginCreateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            protectionContainerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "creationInput",
            mapper: __assign({}, CreateProtectionContainerInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ProtectionContainer
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var beginDiscoverProtectableItemOperationSpec = {
        httpMethod: "POST",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/discoverProtectableItem",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            protectionContainerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "discoverProtectableItemRequest",
            mapper: __assign({}, DiscoverProtectableItemRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ProtectionContainer
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var beginDeleteMethodOperationSpec$2 = {
        httpMethod: "POST",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/remove",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            protectionContainerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var beginSwitchProtectionOperationSpec = {
        httpMethod: "POST",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/switchprotection",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            protectionContainerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "switchInput",
            mapper: __assign({}, SwitchProtectionInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ProtectionContainer
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var listByReplicationFabricsNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProtectionContainerCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var listNextOperationSpec$6 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProtectionContainerCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$8 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        ProtectableItemCollection: ProtectableItemCollection,
        ProtectableItem: ProtectableItem,
        Resource: Resource,
        BaseResource: BaseResource,
        ProtectableItemProperties: ProtectableItemProperties,
        ConfigurationSettings: ConfigurationSettings,
        CloudError: CloudError,
        Alert: Alert,
        AlertProperties: AlertProperties,
        Event: Event,
        EventProperties: EventProperties,
        EventProviderSpecificDetails: EventProviderSpecificDetails,
        EventSpecificDetails: EventSpecificDetails,
        HealthError: HealthError,
        InnerHealthError: InnerHealthError,
        Fabric: Fabric,
        FabricProperties: FabricProperties,
        EncryptionDetails: EncryptionDetails,
        FabricSpecificDetails: FabricSpecificDetails,
        HyperVReplica2012EventDetails: HyperVReplica2012EventDetails,
        HyperVReplica2012R2EventDetails: HyperVReplica2012R2EventDetails,
        HyperVReplicaAzureEventDetails: HyperVReplicaAzureEventDetails,
        HyperVReplicaBaseEventDetails: HyperVReplicaBaseEventDetails,
        HyperVSiteDetails: HyperVSiteDetails,
        HyperVVirtualMachineDetails: HyperVVirtualMachineDetails,
        OSDetails: OSDetails,
        DiskDetails: DiskDetails,
        InMageAzureV2EventDetails: InMageAzureV2EventDetails,
        Job: Job,
        JobProperties: JobProperties,
        ASRTask: ASRTask,
        TaskTypeDetails: TaskTypeDetails,
        GroupTaskDetails: GroupTaskDetails,
        JobErrorDetails: JobErrorDetails,
        ServiceError: ServiceError,
        ProviderError: ProviderError,
        JobDetails: JobDetails,
        JobStatusEventDetails: JobStatusEventDetails,
        JobTaskDetails: JobTaskDetails,
        JobEntity: JobEntity,
        LogicalNetwork: LogicalNetwork,
        LogicalNetworkProperties: LogicalNetworkProperties,
        ManualActionTaskDetails: ManualActionTaskDetails,
        Network: Network,
        NetworkProperties: NetworkProperties,
        Subnet: Subnet,
        NetworkMapping: NetworkMapping,
        NetworkMappingProperties: NetworkMappingProperties,
        NetworkMappingFabricSpecificSettings: NetworkMappingFabricSpecificSettings,
        Policy: Policy,
        PolicyProperties: PolicyProperties,
        PolicyProviderSpecificDetails: PolicyProviderSpecificDetails,
        ProtectionContainer: ProtectionContainer,
        ProtectionContainerProperties: ProtectionContainerProperties,
        ProtectionContainerFabricSpecificDetails: ProtectionContainerFabricSpecificDetails,
        ProtectionContainerMapping: ProtectionContainerMapping,
        ProtectionContainerMappingProperties: ProtectionContainerMappingProperties,
        ProtectionContainerMappingProviderSpecificDetails: ProtectionContainerMappingProviderSpecificDetails,
        RcmAzureMigrationPolicyDetails: RcmAzureMigrationPolicyDetails,
        RecoveryPlan: RecoveryPlan,
        RecoveryPlanProperties: RecoveryPlanProperties,
        CurrentScenarioDetails: CurrentScenarioDetails,
        RecoveryPlanGroup: RecoveryPlanGroup,
        RecoveryPlanProtectedItem: RecoveryPlanProtectedItem,
        RecoveryPlanAction: RecoveryPlanAction,
        RecoveryPlanActionDetails: RecoveryPlanActionDetails,
        RecoveryPlanAutomationRunbookActionDetails: RecoveryPlanAutomationRunbookActionDetails,
        RecoveryPlanGroupTaskDetails: RecoveryPlanGroupTaskDetails,
        RecoveryPlanManualActionDetails: RecoveryPlanManualActionDetails,
        RecoveryPlanScriptActionDetails: RecoveryPlanScriptActionDetails,
        RecoveryPlanShutdownGroupTaskDetails: RecoveryPlanShutdownGroupTaskDetails,
        RecoveryPoint: RecoveryPoint,
        RecoveryPointProperties: RecoveryPointProperties,
        ProviderSpecificRecoveryPointDetails: ProviderSpecificRecoveryPointDetails,
        RecoveryServicesProvider: RecoveryServicesProvider,
        RecoveryServicesProviderProperties: RecoveryServicesProviderProperties,
        IdentityInformation: IdentityInformation,
        VersionDetails: VersionDetails,
        ReplicationGroupDetails: ReplicationGroupDetails,
        ReplicationProtectedItem: ReplicationProtectedItem,
        ReplicationProtectedItemProperties: ReplicationProtectedItemProperties,
        ReplicationProviderSpecificSettings: ReplicationProviderSpecificSettings,
        ScriptActionTaskDetails: ScriptActionTaskDetails,
        StorageClassification: StorageClassification,
        StorageClassificationProperties: StorageClassificationProperties,
        StorageClassificationMapping: StorageClassificationMapping,
        StorageClassificationMappingProperties: StorageClassificationMappingProperties,
        SwitchProtectionJobDetails: SwitchProtectionJobDetails,
        TestFailoverJobDetails: TestFailoverJobDetails,
        FailoverReplicationProtectedItemDetails: FailoverReplicationProtectedItemDetails,
        VaultHealthDetails: VaultHealthDetails,
        VaultHealthProperties: VaultHealthProperties,
        ResourceHealthSummary: ResourceHealthSummary,
        HealthErrorSummary: HealthErrorSummary,
        VCenter: VCenter,
        VCenterProperties: VCenterProperties,
        VirtualMachineTaskDetails: VirtualMachineTaskDetails,
        VmmDetails: VmmDetails,
        VmmToAzureNetworkMappingSettings: VmmToAzureNetworkMappingSettings,
        VmmToVmmNetworkMappingSettings: VmmToVmmNetworkMappingSettings,
        VmmVirtualMachineDetails: VmmVirtualMachineDetails,
        VmNicUpdatesTaskDetails: VmNicUpdatesTaskDetails,
        VmwareCbtPolicyDetails: VmwareCbtPolicyDetails,
        VMwareDetails: VMwareDetails,
        ProcessServer: ProcessServer,
        MobilityServiceUpdate: MobilityServiceUpdate,
        MasterTargetServer: MasterTargetServer,
        RetentionVolume: RetentionVolume,
        DataStore: DataStore,
        RunAsAccount: RunAsAccount,
        VMwareV2FabricSpecificDetails: VMwareV2FabricSpecificDetails,
        VMwareVirtualMachineDetails: VMwareVirtualMachineDetails,
        InMageDiskDetails: InMageDiskDetails,
        DiskVolumeDetails: DiskVolumeDetails,
        A2AEventDetails: A2AEventDetails,
        A2APolicyDetails: A2APolicyDetails,
        A2AProtectionContainerMappingDetails: A2AProtectionContainerMappingDetails,
        A2ARecoveryPointDetails: A2ARecoveryPointDetails,
        A2AReplicationDetails: A2AReplicationDetails,
        A2AProtectedDiskDetails: A2AProtectedDiskDetails,
        A2AProtectedManagedDiskDetails: A2AProtectedManagedDiskDetails,
        VMNicDetails: VMNicDetails,
        AzureToAzureVmSyncedConfigDetails: AzureToAzureVmSyncedConfigDetails,
        RoleAssignment: RoleAssignment,
        InputEndpoint: InputEndpoint,
        AsrJobDetails: AsrJobDetails,
        AutomationRunbookTaskDetails: AutomationRunbookTaskDetails,
        AzureFabricSpecificDetails: AzureFabricSpecificDetails,
        AzureToAzureNetworkMappingSettings: AzureToAzureNetworkMappingSettings,
        ConsistencyCheckTaskDetails: ConsistencyCheckTaskDetails,
        InconsistentVmDetails: InconsistentVmDetails,
        ExportJobDetails: ExportJobDetails,
        FabricReplicationGroupTaskDetails: FabricReplicationGroupTaskDetails,
        FailoverJobDetails: FailoverJobDetails,
        HyperVReplicaAzurePolicyDetails: HyperVReplicaAzurePolicyDetails,
        HyperVReplicaAzureReplicationDetails: HyperVReplicaAzureReplicationDetails,
        AzureVmDiskDetails: AzureVmDiskDetails,
        InitialReplicationDetails: InitialReplicationDetails,
        HyperVReplicaBasePolicyDetails: HyperVReplicaBasePolicyDetails,
        HyperVReplicaBaseReplicationDetails: HyperVReplicaBaseReplicationDetails,
        HyperVReplicaBluePolicyDetails: HyperVReplicaBluePolicyDetails,
        HyperVReplicaBlueReplicationDetails: HyperVReplicaBlueReplicationDetails,
        HyperVReplicaPolicyDetails: HyperVReplicaPolicyDetails,
        HyperVReplicaReplicationDetails: HyperVReplicaReplicationDetails,
        InlineWorkflowTaskDetails: InlineWorkflowTaskDetails,
        InMageAzureV2PolicyDetails: InMageAzureV2PolicyDetails,
        InMageAzureV2RecoveryPointDetails: InMageAzureV2RecoveryPointDetails,
        InMageAzureV2ReplicationDetails: InMageAzureV2ReplicationDetails,
        InMageAzureV2ProtectedDiskDetails: InMageAzureV2ProtectedDiskDetails,
        InMageBasePolicyDetails: InMageBasePolicyDetails,
        InMagePolicyDetails: InMagePolicyDetails,
        InMageReplicationDetails: InMageReplicationDetails,
        OSDiskDetails: OSDiskDetails,
        InMageProtectedDiskDetails: InMageProtectedDiskDetails,
        InMageAgentDetails: InMageAgentDetails
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ReplicationProtectableItems. */
    var ReplicationProtectableItems = /** @class */ (function () {
        /**
         * Create a ReplicationProtectableItems.
         * @param {SiteRecoveryManagementClientContext} client Reference to the service client.
         */
        function ReplicationProtectableItems(client) {
            this.client = client;
        }
        ReplicationProtectableItems.prototype.listByReplicationProtectionContainers = function (fabricName$$1, protectionContainerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                fabricName: fabricName$$1,
                protectionContainerName: protectionContainerName$$1,
                options: options
            }, listByReplicationProtectionContainersOperationSpec, callback);
        };
        ReplicationProtectableItems.prototype.get = function (fabricName$$1, protectionContainerName$$1, protectableItemName$$1, options, callback) {
            return this.client.sendOperationRequest({
                fabricName: fabricName$$1,
                protectionContainerName: protectionContainerName$$1,
                protectableItemName: protectableItemName$$1,
                options: options
            }, getOperationSpec$7, callback);
        };
        ReplicationProtectableItems.prototype.listByReplicationProtectionContainersNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByReplicationProtectionContainersNextOperationSpec, callback);
        };
        return ReplicationProtectableItems;
    }());
    // Operation Specifications
    var serializer$8 = new msRest.Serializer(Mappers$8);
    var listByReplicationProtectionContainersOperationSpec = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectableItems",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            protectionContainerName
        ],
        queryParameters: [
            apiVersion,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProtectableItemCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var getOperationSpec$7 = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectableItems/{protectableItemName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            protectionContainerName,
            protectableItemName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProtectableItem
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var listByReplicationProtectionContainersNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProtectableItemCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$9 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        ReplicationProtectedItemCollection: ReplicationProtectedItemCollection,
        ReplicationProtectedItem: ReplicationProtectedItem,
        Resource: Resource,
        BaseResource: BaseResource,
        ReplicationProtectedItemProperties: ReplicationProtectedItemProperties,
        HealthError: HealthError,
        InnerHealthError: InnerHealthError,
        CurrentScenarioDetails: CurrentScenarioDetails,
        ReplicationProviderSpecificSettings: ReplicationProviderSpecificSettings,
        CloudError: CloudError,
        EnableProtectionInput: EnableProtectionInput,
        EnableProtectionInputProperties: EnableProtectionInputProperties,
        EnableProtectionProviderSpecificInput: EnableProtectionProviderSpecificInput,
        UpdateReplicationProtectedItemInput: UpdateReplicationProtectedItemInput,
        UpdateReplicationProtectedItemInputProperties: UpdateReplicationProtectedItemInputProperties,
        VMNicInputDetails: VMNicInputDetails,
        UpdateReplicationProtectedItemProviderInput: UpdateReplicationProtectedItemProviderInput,
        ApplyRecoveryPointInput: ApplyRecoveryPointInput,
        ApplyRecoveryPointInputProperties: ApplyRecoveryPointInputProperties,
        ApplyRecoveryPointProviderSpecificInput: ApplyRecoveryPointProviderSpecificInput,
        PlannedFailoverInput: PlannedFailoverInput,
        PlannedFailoverInputProperties: PlannedFailoverInputProperties,
        ProviderSpecificFailoverInput: ProviderSpecificFailoverInput,
        DisableProtectionInput: DisableProtectionInput,
        DisableProtectionInputProperties: DisableProtectionInputProperties,
        DisableProtectionProviderSpecificInput: DisableProtectionProviderSpecificInput,
        ReverseReplicationInput: ReverseReplicationInput,
        ReverseReplicationInputProperties: ReverseReplicationInputProperties,
        ReverseReplicationProviderSpecificInput: ReverseReplicationProviderSpecificInput,
        TestFailoverInput: TestFailoverInput,
        TestFailoverInputProperties: TestFailoverInputProperties,
        TestFailoverCleanupInput: TestFailoverCleanupInput,
        TestFailoverCleanupInputProperties: TestFailoverCleanupInputProperties,
        UnplannedFailoverInput: UnplannedFailoverInput,
        UnplannedFailoverInputProperties: UnplannedFailoverInputProperties,
        UpdateMobilityServiceRequest: UpdateMobilityServiceRequest,
        UpdateMobilityServiceRequestProperties: UpdateMobilityServiceRequestProperties,
        A2AApplyRecoveryPointInput: A2AApplyRecoveryPointInput,
        A2AEnableProtectionInput: A2AEnableProtectionInput,
        A2AVmDiskInputDetails: A2AVmDiskInputDetails,
        A2AVmManagedDiskInputDetails: A2AVmManagedDiskInputDetails,
        DiskEncryptionInfo: DiskEncryptionInfo,
        DiskEncryptionKeyInfo: DiskEncryptionKeyInfo,
        KeyEncryptionKeyInfo: KeyEncryptionKeyInfo,
        A2AFailoverProviderInput: A2AFailoverProviderInput,
        A2AReplicationDetails: A2AReplicationDetails,
        A2AProtectedDiskDetails: A2AProtectedDiskDetails,
        A2AProtectedManagedDiskDetails: A2AProtectedManagedDiskDetails,
        VMNicDetails: VMNicDetails,
        AzureToAzureVmSyncedConfigDetails: AzureToAzureVmSyncedConfigDetails,
        RoleAssignment: RoleAssignment,
        InputEndpoint: InputEndpoint,
        A2AReprotectInput: A2AReprotectInput,
        A2AUpdateReplicationProtectedItemInput: A2AUpdateReplicationProtectedItemInput,
        A2AVmManagedDiskUpdateDetails: A2AVmManagedDiskUpdateDetails,
        Alert: Alert,
        AlertProperties: AlertProperties,
        Event: Event,
        EventProperties: EventProperties,
        EventProviderSpecificDetails: EventProviderSpecificDetails,
        EventSpecificDetails: EventSpecificDetails,
        Fabric: Fabric,
        FabricProperties: FabricProperties,
        EncryptionDetails: EncryptionDetails,
        FabricSpecificDetails: FabricSpecificDetails,
        HyperVReplica2012EventDetails: HyperVReplica2012EventDetails,
        HyperVReplica2012R2EventDetails: HyperVReplica2012R2EventDetails,
        HyperVReplicaAzureApplyRecoveryPointInput: HyperVReplicaAzureApplyRecoveryPointInput,
        HyperVReplicaAzureEnableProtectionInput: HyperVReplicaAzureEnableProtectionInput,
        HyperVReplicaAzureEventDetails: HyperVReplicaAzureEventDetails,
        HyperVReplicaAzureFailbackProviderInput: HyperVReplicaAzureFailbackProviderInput,
        HyperVReplicaAzureFailoverProviderInput: HyperVReplicaAzureFailoverProviderInput,
        HyperVReplicaAzureReplicationDetails: HyperVReplicaAzureReplicationDetails,
        AzureVmDiskDetails: AzureVmDiskDetails,
        InitialReplicationDetails: InitialReplicationDetails,
        OSDetails: OSDetails,
        HyperVReplicaAzureReprotectInput: HyperVReplicaAzureReprotectInput,
        HyperVReplicaAzureUpdateReplicationProtectedItemInput: HyperVReplicaAzureUpdateReplicationProtectedItemInput,
        HyperVReplicaBaseEventDetails: HyperVReplicaBaseEventDetails,
        HyperVReplicaBaseReplicationDetails: HyperVReplicaBaseReplicationDetails,
        DiskDetails: DiskDetails,
        HyperVReplicaBlueReplicationDetails: HyperVReplicaBlueReplicationDetails,
        HyperVReplicaReplicationDetails: HyperVReplicaReplicationDetails,
        HyperVSiteDetails: HyperVSiteDetails,
        InMageAzureV2ApplyRecoveryPointInput: InMageAzureV2ApplyRecoveryPointInput,
        InMageAzureV2EnableProtectionInput: InMageAzureV2EnableProtectionInput,
        InMageAzureV2EventDetails: InMageAzureV2EventDetails,
        InMageAzureV2FailoverProviderInput: InMageAzureV2FailoverProviderInput,
        InMageAzureV2ReplicationDetails: InMageAzureV2ReplicationDetails,
        InMageAzureV2ProtectedDiskDetails: InMageAzureV2ProtectedDiskDetails,
        InMageAzureV2ReprotectInput: InMageAzureV2ReprotectInput,
        InMageAzureV2UpdateReplicationProtectedItemInput: InMageAzureV2UpdateReplicationProtectedItemInput,
        InMageDisableProtectionProviderSpecificInput: InMageDisableProtectionProviderSpecificInput,
        InMageEnableProtectionInput: InMageEnableProtectionInput,
        InMageDiskExclusionInput: InMageDiskExclusionInput,
        InMageVolumeExclusionOptions: InMageVolumeExclusionOptions,
        InMageDiskSignatureExclusionOptions: InMageDiskSignatureExclusionOptions,
        InMageFailoverProviderInput: InMageFailoverProviderInput,
        InMageReplicationDetails: InMageReplicationDetails,
        OSDiskDetails: OSDiskDetails,
        InMageProtectedDiskDetails: InMageProtectedDiskDetails,
        InMageAgentDetails: InMageAgentDetails,
        InMageReprotectInput: InMageReprotectInput,
        Job: Job,
        JobProperties: JobProperties,
        ASRTask: ASRTask,
        TaskTypeDetails: TaskTypeDetails,
        GroupTaskDetails: GroupTaskDetails,
        JobErrorDetails: JobErrorDetails,
        ServiceError: ServiceError,
        ProviderError: ProviderError,
        JobDetails: JobDetails,
        JobStatusEventDetails: JobStatusEventDetails,
        JobTaskDetails: JobTaskDetails,
        JobEntity: JobEntity,
        LogicalNetwork: LogicalNetwork,
        LogicalNetworkProperties: LogicalNetworkProperties,
        ManualActionTaskDetails: ManualActionTaskDetails,
        Network: Network,
        NetworkProperties: NetworkProperties,
        Subnet: Subnet,
        NetworkMapping: NetworkMapping,
        NetworkMappingProperties: NetworkMappingProperties,
        NetworkMappingFabricSpecificSettings: NetworkMappingFabricSpecificSettings,
        Policy: Policy,
        PolicyProperties: PolicyProperties,
        PolicyProviderSpecificDetails: PolicyProviderSpecificDetails,
        ProtectableItem: ProtectableItem,
        ProtectableItemProperties: ProtectableItemProperties,
        ConfigurationSettings: ConfigurationSettings,
        ProtectionContainer: ProtectionContainer,
        ProtectionContainerProperties: ProtectionContainerProperties,
        ProtectionContainerFabricSpecificDetails: ProtectionContainerFabricSpecificDetails,
        ProtectionContainerMapping: ProtectionContainerMapping,
        ProtectionContainerMappingProperties: ProtectionContainerMappingProperties,
        ProtectionContainerMappingProviderSpecificDetails: ProtectionContainerMappingProviderSpecificDetails,
        RcmAzureMigrationPolicyDetails: RcmAzureMigrationPolicyDetails,
        RecoveryPlan: RecoveryPlan,
        RecoveryPlanProperties: RecoveryPlanProperties,
        RecoveryPlanGroup: RecoveryPlanGroup,
        RecoveryPlanProtectedItem: RecoveryPlanProtectedItem,
        RecoveryPlanAction: RecoveryPlanAction,
        RecoveryPlanActionDetails: RecoveryPlanActionDetails,
        RecoveryPlanAutomationRunbookActionDetails: RecoveryPlanAutomationRunbookActionDetails,
        RecoveryPlanGroupTaskDetails: RecoveryPlanGroupTaskDetails,
        RecoveryPlanManualActionDetails: RecoveryPlanManualActionDetails,
        RecoveryPlanScriptActionDetails: RecoveryPlanScriptActionDetails,
        RecoveryPlanShutdownGroupTaskDetails: RecoveryPlanShutdownGroupTaskDetails,
        RecoveryPoint: RecoveryPoint,
        RecoveryPointProperties: RecoveryPointProperties,
        ProviderSpecificRecoveryPointDetails: ProviderSpecificRecoveryPointDetails,
        RecoveryServicesProvider: RecoveryServicesProvider,
        RecoveryServicesProviderProperties: RecoveryServicesProviderProperties,
        IdentityInformation: IdentityInformation,
        VersionDetails: VersionDetails,
        ReplicationGroupDetails: ReplicationGroupDetails,
        SanEnableProtectionInput: SanEnableProtectionInput,
        ScriptActionTaskDetails: ScriptActionTaskDetails,
        StorageClassification: StorageClassification,
        StorageClassificationProperties: StorageClassificationProperties,
        StorageClassificationMapping: StorageClassificationMapping,
        StorageClassificationMappingProperties: StorageClassificationMappingProperties,
        SwitchProtectionJobDetails: SwitchProtectionJobDetails,
        TestFailoverJobDetails: TestFailoverJobDetails,
        FailoverReplicationProtectedItemDetails: FailoverReplicationProtectedItemDetails,
        VaultHealthDetails: VaultHealthDetails,
        VaultHealthProperties: VaultHealthProperties,
        ResourceHealthSummary: ResourceHealthSummary,
        HealthErrorSummary: HealthErrorSummary,
        VCenter: VCenter,
        VCenterProperties: VCenterProperties,
        VirtualMachineTaskDetails: VirtualMachineTaskDetails,
        VmmDetails: VmmDetails,
        VmmToAzureNetworkMappingSettings: VmmToAzureNetworkMappingSettings,
        VmmToVmmNetworkMappingSettings: VmmToVmmNetworkMappingSettings,
        VmmVirtualMachineDetails: VmmVirtualMachineDetails,
        VmNicUpdatesTaskDetails: VmNicUpdatesTaskDetails,
        VmwareCbtPolicyDetails: VmwareCbtPolicyDetails,
        VMwareDetails: VMwareDetails,
        ProcessServer: ProcessServer,
        MobilityServiceUpdate: MobilityServiceUpdate,
        MasterTargetServer: MasterTargetServer,
        RetentionVolume: RetentionVolume,
        DataStore: DataStore,
        RunAsAccount: RunAsAccount,
        VMwareV2FabricSpecificDetails: VMwareV2FabricSpecificDetails,
        VMwareVirtualMachineDetails: VMwareVirtualMachineDetails,
        InMageDiskDetails: InMageDiskDetails,
        DiskVolumeDetails: DiskVolumeDetails,
        A2AEventDetails: A2AEventDetails,
        A2APolicyDetails: A2APolicyDetails,
        A2AProtectionContainerMappingDetails: A2AProtectionContainerMappingDetails,
        A2ARecoveryPointDetails: A2ARecoveryPointDetails,
        AsrJobDetails: AsrJobDetails,
        AutomationRunbookTaskDetails: AutomationRunbookTaskDetails,
        AzureFabricSpecificDetails: AzureFabricSpecificDetails,
        AzureToAzureNetworkMappingSettings: AzureToAzureNetworkMappingSettings,
        ConsistencyCheckTaskDetails: ConsistencyCheckTaskDetails,
        InconsistentVmDetails: InconsistentVmDetails,
        ExportJobDetails: ExportJobDetails,
        FabricReplicationGroupTaskDetails: FabricReplicationGroupTaskDetails,
        FailoverJobDetails: FailoverJobDetails,
        HyperVReplicaAzurePolicyDetails: HyperVReplicaAzurePolicyDetails,
        HyperVReplicaBasePolicyDetails: HyperVReplicaBasePolicyDetails,
        HyperVReplicaBluePolicyDetails: HyperVReplicaBluePolicyDetails,
        HyperVReplicaPolicyDetails: HyperVReplicaPolicyDetails,
        HyperVVirtualMachineDetails: HyperVVirtualMachineDetails,
        InlineWorkflowTaskDetails: InlineWorkflowTaskDetails,
        InMageAzureV2PolicyDetails: InMageAzureV2PolicyDetails,
        InMageAzureV2RecoveryPointDetails: InMageAzureV2RecoveryPointDetails,
        InMageBasePolicyDetails: InMageBasePolicyDetails,
        InMagePolicyDetails: InMagePolicyDetails
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ReplicationProtectedItems. */
    var ReplicationProtectedItems = /** @class */ (function () {
        /**
         * Create a ReplicationProtectedItems.
         * @param {SiteRecoveryManagementClientContext} client Reference to the service client.
         */
        function ReplicationProtectedItems(client) {
            this.client = client;
        }
        ReplicationProtectedItems.prototype.listByReplicationProtectionContainers = function (fabricName$$1, protectionContainerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                fabricName: fabricName$$1,
                protectionContainerName: protectionContainerName$$1,
                options: options
            }, listByReplicationProtectionContainersOperationSpec$1, callback);
        };
        ReplicationProtectedItems.prototype.get = function (fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, options, callback) {
            return this.client.sendOperationRequest({
                fabricName: fabricName$$1,
                protectionContainerName: protectionContainerName$$1,
                replicatedProtectedItemName: replicatedProtectedItemName$$1,
                options: options
            }, getOperationSpec$8, callback);
        };
        /**
         * The operation to create an ASR replication protected item (Enable replication).
         * @summary Enables protection.
         * @param fabricName Name of the fabric.
         * @param protectionContainerName Protection container name.
         * @param replicatedProtectedItemName A name for the replication protected item.
         * @param input Enable Protection Input.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationProtectedItemsCreateResponse>
         */
        ReplicationProtectedItems.prototype.create = function (fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, input, options) {
            return this.beginCreate(fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, input, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to delete or purge a replication protected item. This operation will force delete
         * the replication protected item. Use the remove operation on replication protected item to
         * perform a clean disable replication for the item.
         * @summary Purges protection.
         * @param fabricName Fabric name.
         * @param protectionContainerName Protection container name.
         * @param replicatedProtectedItemName Replication protected item name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ReplicationProtectedItems.prototype.purge = function (fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, options) {
            return this.beginPurge(fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to update the recovery settings of an ASR replication protected item.
         * @summary Updates protection.
         * @param fabricName Fabric name.
         * @param protectionContainerName Protection container name.
         * @param replicatedProtectedItemName Replication protected item name.
         * @param updateProtectionInput Update protection input.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationProtectedItemsUpdateResponse>
         */
        ReplicationProtectedItems.prototype.update = function (fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, updateProtectionInput, options) {
            return this.beginUpdate(fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, updateProtectionInput, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to change the recovery point of a failed over replication protected item.
         * @summary Change or apply recovery point.
         * @param fabricName The ARM fabric name.
         * @param protectionContainerName The protection container name.
         * @param replicatedProtectedItemName The replicated protected item's name.
         * @param applyRecoveryPointInput The ApplyRecoveryPointInput.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationProtectedItemsApplyRecoveryPointResponse>
         */
        ReplicationProtectedItems.prototype.applyRecoveryPoint = function (fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, applyRecoveryPointInput, options) {
            return this.beginApplyRecoveryPoint(fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, applyRecoveryPointInput, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Operation to commit the failover of the replication protected item.
         * @summary Execute commit failover
         * @param fabricName Unique fabric name.
         * @param protectionContainerName Protection container name.
         * @param replicatedProtectedItemName Replication protected item name.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationProtectedItemsFailoverCommitResponse>
         */
        ReplicationProtectedItems.prototype.failoverCommit = function (fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, options) {
            return this.beginFailoverCommit(fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Operation to initiate a planned failover of the replication protected item.
         * @summary Execute planned failover
         * @param fabricName Unique fabric name.
         * @param protectionContainerName Protection container name.
         * @param replicatedProtectedItemName Replication protected item name.
         * @param failoverInput Disable protection input.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationProtectedItemsPlannedFailoverResponse>
         */
        ReplicationProtectedItems.prototype.plannedFailover = function (fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, failoverInput, options) {
            return this.beginPlannedFailover(fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, failoverInput, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to disable replication on a replication protected item. This will also remove the
         * item.
         * @summary Disables protection.
         * @param fabricName Fabric name.
         * @param protectionContainerName Protection container name.
         * @param replicatedProtectedItemName Replication protected item name.
         * @param disableProtectionInput Disable protection input.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ReplicationProtectedItems.prototype.deleteMethod = function (fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, disableProtectionInput, options) {
            return this.beginDeleteMethod(fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, disableProtectionInput, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to start resynchronize/repair replication for a replication protected item
         * requiring resynchronization.
         * @summary Resynchronize or repair replication.
         * @param fabricName The name of the fabric.
         * @param protectionContainerName The name of the container.
         * @param replicatedProtectedItemName The name of the replication protected item.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationProtectedItemsRepairReplicationResponse>
         */
        ReplicationProtectedItems.prototype.repairReplication = function (fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, options) {
            return this.beginRepairReplication(fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Operation to reprotect or reverse replicate a failed over replication protected item.
         * @summary Execute Reverse Replication\Reprotect
         * @param fabricName Unique fabric name.
         * @param protectionContainerName Protection container name.
         * @param replicatedProtectedItemName Replication protected item name.
         * @param rrInput Disable protection input.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationProtectedItemsReprotectResponse>
         */
        ReplicationProtectedItems.prototype.reprotect = function (fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, rrInput, options) {
            return this.beginReprotect(fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, rrInput, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Operation to perform a test failover of the replication protected item.
         * @summary Execute test failover
         * @param fabricName Unique fabric name.
         * @param protectionContainerName Protection container name.
         * @param replicatedProtectedItemName Replication protected item name.
         * @param failoverInput Test failover input.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationProtectedItemsTestFailoverResponse>
         */
        ReplicationProtectedItems.prototype.testFailover = function (fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, failoverInput, options) {
            return this.beginTestFailover(fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, failoverInput, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Operation to clean up the test failover of a replication protected item.
         * @summary Execute test failover cleanup.
         * @param fabricName Unique fabric name.
         * @param protectionContainerName Protection container name.
         * @param replicatedProtectedItemName Replication protected item name.
         * @param cleanupInput Test failover cleanup input.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationProtectedItemsTestFailoverCleanupResponse>
         */
        ReplicationProtectedItems.prototype.testFailoverCleanup = function (fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, cleanupInput, options) {
            return this.beginTestFailoverCleanup(fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, cleanupInput, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Operation to initiate a failover of the replication protected item.
         * @summary Execute unplanned failover
         * @param fabricName Unique fabric name.
         * @param protectionContainerName Protection container name.
         * @param replicatedProtectedItemName Replication protected item name.
         * @param failoverInput Disable protection input.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationProtectedItemsUnplannedFailoverResponse>
         */
        ReplicationProtectedItems.prototype.unplannedFailover = function (fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, failoverInput, options) {
            return this.beginUnplannedFailover(fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, failoverInput, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to update(push update) the installed mobility service software on a replication
         * protected item to the latest available version.
         * @summary Update the mobility service on a protected item.
         * @param fabricName The name of the fabric containing the protected item.
         * @param protectionContainerName The name of the container containing the protected item.
         * @param replicationProtectedItemName The name of the protected item on which the agent is to be
         * updated.
         * @param updateMobilityServiceRequest Request to update the mobility service on the protected
         * item.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationProtectedItemsUpdateMobilityServiceResponse>
         */
        ReplicationProtectedItems.prototype.updateMobilityService = function (fabricName$$1, protectionContainerName$$1, replicationProtectedItemName$$1, updateMobilityServiceRequest, options) {
            return this.beginUpdateMobilityService(fabricName$$1, protectionContainerName$$1, replicationProtectedItemName$$1, updateMobilityServiceRequest, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ReplicationProtectedItems.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$7, callback);
        };
        /**
         * The operation to create an ASR replication protected item (Enable replication).
         * @summary Enables protection.
         * @param fabricName Name of the fabric.
         * @param protectionContainerName Protection container name.
         * @param replicatedProtectedItemName A name for the replication protected item.
         * @param input Enable Protection Input.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationProtectedItems.prototype.beginCreate = function (fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, input, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                protectionContainerName: protectionContainerName$$1,
                replicatedProtectedItemName: replicatedProtectedItemName$$1,
                input: input,
                options: options
            }, beginCreateOperationSpec$3, options);
        };
        /**
         * The operation to delete or purge a replication protected item. This operation will force delete
         * the replication protected item. Use the remove operation on replication protected item to
         * perform a clean disable replication for the item.
         * @summary Purges protection.
         * @param fabricName Fabric name.
         * @param protectionContainerName Protection container name.
         * @param replicatedProtectedItemName Replication protected item name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationProtectedItems.prototype.beginPurge = function (fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                protectionContainerName: protectionContainerName$$1,
                replicatedProtectedItemName: replicatedProtectedItemName$$1,
                options: options
            }, beginPurgeOperationSpec$1, options);
        };
        /**
         * The operation to update the recovery settings of an ASR replication protected item.
         * @summary Updates protection.
         * @param fabricName Fabric name.
         * @param protectionContainerName Protection container name.
         * @param replicatedProtectedItemName Replication protected item name.
         * @param updateProtectionInput Update protection input.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationProtectedItems.prototype.beginUpdate = function (fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, updateProtectionInput, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                protectionContainerName: protectionContainerName$$1,
                replicatedProtectedItemName: replicatedProtectedItemName$$1,
                updateProtectionInput: updateProtectionInput,
                options: options
            }, beginUpdateOperationSpec$1, options);
        };
        /**
         * The operation to change the recovery point of a failed over replication protected item.
         * @summary Change or apply recovery point.
         * @param fabricName The ARM fabric name.
         * @param protectionContainerName The protection container name.
         * @param replicatedProtectedItemName The replicated protected item's name.
         * @param applyRecoveryPointInput The ApplyRecoveryPointInput.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationProtectedItems.prototype.beginApplyRecoveryPoint = function (fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, applyRecoveryPointInput, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                protectionContainerName: protectionContainerName$$1,
                replicatedProtectedItemName: replicatedProtectedItemName$$1,
                applyRecoveryPointInput: applyRecoveryPointInput,
                options: options
            }, beginApplyRecoveryPointOperationSpec, options);
        };
        /**
         * Operation to commit the failover of the replication protected item.
         * @summary Execute commit failover
         * @param fabricName Unique fabric name.
         * @param protectionContainerName Protection container name.
         * @param replicatedProtectedItemName Replication protected item name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationProtectedItems.prototype.beginFailoverCommit = function (fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                protectionContainerName: protectionContainerName$$1,
                replicatedProtectedItemName: replicatedProtectedItemName$$1,
                options: options
            }, beginFailoverCommitOperationSpec, options);
        };
        /**
         * Operation to initiate a planned failover of the replication protected item.
         * @summary Execute planned failover
         * @param fabricName Unique fabric name.
         * @param protectionContainerName Protection container name.
         * @param replicatedProtectedItemName Replication protected item name.
         * @param failoverInput Disable protection input.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationProtectedItems.prototype.beginPlannedFailover = function (fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, failoverInput, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                protectionContainerName: protectionContainerName$$1,
                replicatedProtectedItemName: replicatedProtectedItemName$$1,
                failoverInput: failoverInput,
                options: options
            }, beginPlannedFailoverOperationSpec, options);
        };
        /**
         * The operation to disable replication on a replication protected item. This will also remove the
         * item.
         * @summary Disables protection.
         * @param fabricName Fabric name.
         * @param protectionContainerName Protection container name.
         * @param replicatedProtectedItemName Replication protected item name.
         * @param disableProtectionInput Disable protection input.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationProtectedItems.prototype.beginDeleteMethod = function (fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, disableProtectionInput, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                protectionContainerName: protectionContainerName$$1,
                replicatedProtectedItemName: replicatedProtectedItemName$$1,
                disableProtectionInput: disableProtectionInput,
                options: options
            }, beginDeleteMethodOperationSpec$3, options);
        };
        /**
         * The operation to start resynchronize/repair replication for a replication protected item
         * requiring resynchronization.
         * @summary Resynchronize or repair replication.
         * @param fabricName The name of the fabric.
         * @param protectionContainerName The name of the container.
         * @param replicatedProtectedItemName The name of the replication protected item.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationProtectedItems.prototype.beginRepairReplication = function (fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                protectionContainerName: protectionContainerName$$1,
                replicatedProtectedItemName: replicatedProtectedItemName$$1,
                options: options
            }, beginRepairReplicationOperationSpec, options);
        };
        /**
         * Operation to reprotect or reverse replicate a failed over replication protected item.
         * @summary Execute Reverse Replication\Reprotect
         * @param fabricName Unique fabric name.
         * @param protectionContainerName Protection container name.
         * @param replicatedProtectedItemName Replication protected item name.
         * @param rrInput Disable protection input.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationProtectedItems.prototype.beginReprotect = function (fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, rrInput, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                protectionContainerName: protectionContainerName$$1,
                replicatedProtectedItemName: replicatedProtectedItemName$$1,
                rrInput: rrInput,
                options: options
            }, beginReprotectOperationSpec, options);
        };
        /**
         * Operation to perform a test failover of the replication protected item.
         * @summary Execute test failover
         * @param fabricName Unique fabric name.
         * @param protectionContainerName Protection container name.
         * @param replicatedProtectedItemName Replication protected item name.
         * @param failoverInput Test failover input.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationProtectedItems.prototype.beginTestFailover = function (fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, failoverInput, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                protectionContainerName: protectionContainerName$$1,
                replicatedProtectedItemName: replicatedProtectedItemName$$1,
                failoverInput: failoverInput,
                options: options
            }, beginTestFailoverOperationSpec, options);
        };
        /**
         * Operation to clean up the test failover of a replication protected item.
         * @summary Execute test failover cleanup.
         * @param fabricName Unique fabric name.
         * @param protectionContainerName Protection container name.
         * @param replicatedProtectedItemName Replication protected item name.
         * @param cleanupInput Test failover cleanup input.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationProtectedItems.prototype.beginTestFailoverCleanup = function (fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, cleanupInput, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                protectionContainerName: protectionContainerName$$1,
                replicatedProtectedItemName: replicatedProtectedItemName$$1,
                cleanupInput: cleanupInput,
                options: options
            }, beginTestFailoverCleanupOperationSpec, options);
        };
        /**
         * Operation to initiate a failover of the replication protected item.
         * @summary Execute unplanned failover
         * @param fabricName Unique fabric name.
         * @param protectionContainerName Protection container name.
         * @param replicatedProtectedItemName Replication protected item name.
         * @param failoverInput Disable protection input.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationProtectedItems.prototype.beginUnplannedFailover = function (fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, failoverInput, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                protectionContainerName: protectionContainerName$$1,
                replicatedProtectedItemName: replicatedProtectedItemName$$1,
                failoverInput: failoverInput,
                options: options
            }, beginUnplannedFailoverOperationSpec, options);
        };
        /**
         * The operation to update(push update) the installed mobility service software on a replication
         * protected item to the latest available version.
         * @summary Update the mobility service on a protected item.
         * @param fabricName The name of the fabric containing the protected item.
         * @param protectionContainerName The name of the container containing the protected item.
         * @param replicationProtectedItemName The name of the protected item on which the agent is to be
         * updated.
         * @param updateMobilityServiceRequest Request to update the mobility service on the protected
         * item.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationProtectedItems.prototype.beginUpdateMobilityService = function (fabricName$$1, protectionContainerName$$1, replicationProtectedItemName$$1, updateMobilityServiceRequest, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                protectionContainerName: protectionContainerName$$1,
                replicationProtectedItemName: replicationProtectedItemName$$1,
                updateMobilityServiceRequest: updateMobilityServiceRequest,
                options: options
            }, beginUpdateMobilityServiceOperationSpec, options);
        };
        ReplicationProtectedItems.prototype.listByReplicationProtectionContainersNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByReplicationProtectionContainersNextOperationSpec$1, callback);
        };
        ReplicationProtectedItems.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$7, callback);
        };
        return ReplicationProtectedItems;
    }());
    // Operation Specifications
    var serializer$9 = new msRest.Serializer(Mappers$9);
    var listByReplicationProtectionContainersOperationSpec$1 = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            protectionContainerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReplicationProtectedItemCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var getOperationSpec$8 = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            protectionContainerName,
            replicatedProtectedItemName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReplicationProtectedItem
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var listOperationSpec$7 = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationProtectedItems",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion,
            skipToken,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReplicationProtectedItemCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginCreateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            protectionContainerName,
            replicatedProtectedItemName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "input",
            mapper: __assign({}, EnableProtectionInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ReplicationProtectedItem
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginPurgeOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            protectionContainerName,
            replicatedProtectedItemName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginUpdateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            protectionContainerName,
            replicatedProtectedItemName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "updateProtectionInput",
            mapper: __assign({}, UpdateReplicationProtectedItemInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ReplicationProtectedItem
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginApplyRecoveryPointOperationSpec = {
        httpMethod: "POST",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/applyRecoveryPoint",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            protectionContainerName,
            replicatedProtectedItemName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "applyRecoveryPointInput",
            mapper: __assign({}, ApplyRecoveryPointInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ReplicationProtectedItem
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginFailoverCommitOperationSpec = {
        httpMethod: "POST",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/failoverCommit",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            protectionContainerName,
            replicatedProtectedItemName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReplicationProtectedItem
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginPlannedFailoverOperationSpec = {
        httpMethod: "POST",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/plannedFailover",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            protectionContainerName,
            replicatedProtectedItemName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "failoverInput",
            mapper: __assign({}, PlannedFailoverInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ReplicationProtectedItem
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginDeleteMethodOperationSpec$3 = {
        httpMethod: "POST",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/remove",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            protectionContainerName,
            replicatedProtectedItemName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "disableProtectionInput",
            mapper: __assign({}, DisableProtectionInput, { required: true })
        },
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginRepairReplicationOperationSpec = {
        httpMethod: "POST",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/repairReplication",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            protectionContainerName,
            replicatedProtectedItemName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReplicationProtectedItem
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginReprotectOperationSpec = {
        httpMethod: "POST",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/reProtect",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            protectionContainerName,
            replicatedProtectedItemName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "rrInput",
            mapper: __assign({}, ReverseReplicationInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ReplicationProtectedItem
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginTestFailoverOperationSpec = {
        httpMethod: "POST",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/testFailover",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            protectionContainerName,
            replicatedProtectedItemName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "failoverInput",
            mapper: __assign({}, TestFailoverInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ReplicationProtectedItem
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginTestFailoverCleanupOperationSpec = {
        httpMethod: "POST",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/testFailoverCleanup",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            protectionContainerName,
            replicatedProtectedItemName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "cleanupInput",
            mapper: __assign({}, TestFailoverCleanupInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ReplicationProtectedItem
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginUnplannedFailoverOperationSpec = {
        httpMethod: "POST",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/unplannedFailover",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            protectionContainerName,
            replicatedProtectedItemName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "failoverInput",
            mapper: __assign({}, UnplannedFailoverInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ReplicationProtectedItem
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginUpdateMobilityServiceOperationSpec = {
        httpMethod: "POST",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicationProtectedItemName}/updateMobilityService",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            protectionContainerName,
            replicationProtectedItemName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "updateMobilityServiceRequest",
            mapper: __assign({}, UpdateMobilityServiceRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ReplicationProtectedItem
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var listByReplicationProtectionContainersNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReplicationProtectedItemCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var listNextOperationSpec$7 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReplicationProtectedItemCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$a = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        RecoveryPointCollection: RecoveryPointCollection,
        RecoveryPoint: RecoveryPoint,
        Resource: Resource,
        BaseResource: BaseResource,
        RecoveryPointProperties: RecoveryPointProperties,
        ProviderSpecificRecoveryPointDetails: ProviderSpecificRecoveryPointDetails,
        CloudError: CloudError,
        A2ARecoveryPointDetails: A2ARecoveryPointDetails,
        Alert: Alert,
        AlertProperties: AlertProperties,
        Event: Event,
        EventProperties: EventProperties,
        EventProviderSpecificDetails: EventProviderSpecificDetails,
        EventSpecificDetails: EventSpecificDetails,
        HealthError: HealthError,
        InnerHealthError: InnerHealthError,
        Fabric: Fabric,
        FabricProperties: FabricProperties,
        EncryptionDetails: EncryptionDetails,
        FabricSpecificDetails: FabricSpecificDetails,
        HyperVReplica2012EventDetails: HyperVReplica2012EventDetails,
        HyperVReplica2012R2EventDetails: HyperVReplica2012R2EventDetails,
        HyperVReplicaAzureEventDetails: HyperVReplicaAzureEventDetails,
        HyperVReplicaBaseEventDetails: HyperVReplicaBaseEventDetails,
        HyperVSiteDetails: HyperVSiteDetails,
        InMageAzureV2EventDetails: InMageAzureV2EventDetails,
        InMageAzureV2RecoveryPointDetails: InMageAzureV2RecoveryPointDetails,
        Job: Job,
        JobProperties: JobProperties,
        ASRTask: ASRTask,
        TaskTypeDetails: TaskTypeDetails,
        GroupTaskDetails: GroupTaskDetails,
        JobErrorDetails: JobErrorDetails,
        ServiceError: ServiceError,
        ProviderError: ProviderError,
        JobDetails: JobDetails,
        JobStatusEventDetails: JobStatusEventDetails,
        JobTaskDetails: JobTaskDetails,
        JobEntity: JobEntity,
        LogicalNetwork: LogicalNetwork,
        LogicalNetworkProperties: LogicalNetworkProperties,
        ManualActionTaskDetails: ManualActionTaskDetails,
        Network: Network,
        NetworkProperties: NetworkProperties,
        Subnet: Subnet,
        NetworkMapping: NetworkMapping,
        NetworkMappingProperties: NetworkMappingProperties,
        NetworkMappingFabricSpecificSettings: NetworkMappingFabricSpecificSettings,
        Policy: Policy,
        PolicyProperties: PolicyProperties,
        PolicyProviderSpecificDetails: PolicyProviderSpecificDetails,
        ProtectableItem: ProtectableItem,
        ProtectableItemProperties: ProtectableItemProperties,
        ConfigurationSettings: ConfigurationSettings,
        ProtectionContainer: ProtectionContainer,
        ProtectionContainerProperties: ProtectionContainerProperties,
        ProtectionContainerFabricSpecificDetails: ProtectionContainerFabricSpecificDetails,
        ProtectionContainerMapping: ProtectionContainerMapping,
        ProtectionContainerMappingProperties: ProtectionContainerMappingProperties,
        ProtectionContainerMappingProviderSpecificDetails: ProtectionContainerMappingProviderSpecificDetails,
        RcmAzureMigrationPolicyDetails: RcmAzureMigrationPolicyDetails,
        RecoveryPlan: RecoveryPlan,
        RecoveryPlanProperties: RecoveryPlanProperties,
        CurrentScenarioDetails: CurrentScenarioDetails,
        RecoveryPlanGroup: RecoveryPlanGroup,
        RecoveryPlanProtectedItem: RecoveryPlanProtectedItem,
        RecoveryPlanAction: RecoveryPlanAction,
        RecoveryPlanActionDetails: RecoveryPlanActionDetails,
        RecoveryPlanAutomationRunbookActionDetails: RecoveryPlanAutomationRunbookActionDetails,
        RecoveryPlanGroupTaskDetails: RecoveryPlanGroupTaskDetails,
        RecoveryPlanManualActionDetails: RecoveryPlanManualActionDetails,
        RecoveryPlanScriptActionDetails: RecoveryPlanScriptActionDetails,
        RecoveryPlanShutdownGroupTaskDetails: RecoveryPlanShutdownGroupTaskDetails,
        RecoveryServicesProvider: RecoveryServicesProvider,
        RecoveryServicesProviderProperties: RecoveryServicesProviderProperties,
        IdentityInformation: IdentityInformation,
        VersionDetails: VersionDetails,
        ReplicationGroupDetails: ReplicationGroupDetails,
        ReplicationProtectedItem: ReplicationProtectedItem,
        ReplicationProtectedItemProperties: ReplicationProtectedItemProperties,
        ReplicationProviderSpecificSettings: ReplicationProviderSpecificSettings,
        ScriptActionTaskDetails: ScriptActionTaskDetails,
        StorageClassification: StorageClassification,
        StorageClassificationProperties: StorageClassificationProperties,
        StorageClassificationMapping: StorageClassificationMapping,
        StorageClassificationMappingProperties: StorageClassificationMappingProperties,
        SwitchProtectionJobDetails: SwitchProtectionJobDetails,
        TestFailoverJobDetails: TestFailoverJobDetails,
        FailoverReplicationProtectedItemDetails: FailoverReplicationProtectedItemDetails,
        VaultHealthDetails: VaultHealthDetails,
        VaultHealthProperties: VaultHealthProperties,
        ResourceHealthSummary: ResourceHealthSummary,
        HealthErrorSummary: HealthErrorSummary,
        VCenter: VCenter,
        VCenterProperties: VCenterProperties,
        VirtualMachineTaskDetails: VirtualMachineTaskDetails,
        VmmDetails: VmmDetails,
        VmmToAzureNetworkMappingSettings: VmmToAzureNetworkMappingSettings,
        VmmToVmmNetworkMappingSettings: VmmToVmmNetworkMappingSettings,
        VmmVirtualMachineDetails: VmmVirtualMachineDetails,
        OSDetails: OSDetails,
        DiskDetails: DiskDetails,
        VmNicUpdatesTaskDetails: VmNicUpdatesTaskDetails,
        VmwareCbtPolicyDetails: VmwareCbtPolicyDetails,
        VMwareDetails: VMwareDetails,
        ProcessServer: ProcessServer,
        MobilityServiceUpdate: MobilityServiceUpdate,
        MasterTargetServer: MasterTargetServer,
        RetentionVolume: RetentionVolume,
        DataStore: DataStore,
        RunAsAccount: RunAsAccount,
        VMwareV2FabricSpecificDetails: VMwareV2FabricSpecificDetails,
        VMwareVirtualMachineDetails: VMwareVirtualMachineDetails,
        InMageDiskDetails: InMageDiskDetails,
        DiskVolumeDetails: DiskVolumeDetails,
        A2AEventDetails: A2AEventDetails,
        A2APolicyDetails: A2APolicyDetails,
        A2AProtectionContainerMappingDetails: A2AProtectionContainerMappingDetails,
        A2AReplicationDetails: A2AReplicationDetails,
        A2AProtectedDiskDetails: A2AProtectedDiskDetails,
        A2AProtectedManagedDiskDetails: A2AProtectedManagedDiskDetails,
        VMNicDetails: VMNicDetails,
        AzureToAzureVmSyncedConfigDetails: AzureToAzureVmSyncedConfigDetails,
        RoleAssignment: RoleAssignment,
        InputEndpoint: InputEndpoint,
        AsrJobDetails: AsrJobDetails,
        AutomationRunbookTaskDetails: AutomationRunbookTaskDetails,
        AzureFabricSpecificDetails: AzureFabricSpecificDetails,
        AzureToAzureNetworkMappingSettings: AzureToAzureNetworkMappingSettings,
        ConsistencyCheckTaskDetails: ConsistencyCheckTaskDetails,
        InconsistentVmDetails: InconsistentVmDetails,
        ExportJobDetails: ExportJobDetails,
        FabricReplicationGroupTaskDetails: FabricReplicationGroupTaskDetails,
        FailoverJobDetails: FailoverJobDetails,
        HyperVReplicaAzurePolicyDetails: HyperVReplicaAzurePolicyDetails,
        HyperVReplicaAzureReplicationDetails: HyperVReplicaAzureReplicationDetails,
        AzureVmDiskDetails: AzureVmDiskDetails,
        InitialReplicationDetails: InitialReplicationDetails,
        HyperVReplicaBasePolicyDetails: HyperVReplicaBasePolicyDetails,
        HyperVReplicaBaseReplicationDetails: HyperVReplicaBaseReplicationDetails,
        HyperVReplicaBluePolicyDetails: HyperVReplicaBluePolicyDetails,
        HyperVReplicaBlueReplicationDetails: HyperVReplicaBlueReplicationDetails,
        HyperVReplicaPolicyDetails: HyperVReplicaPolicyDetails,
        HyperVReplicaReplicationDetails: HyperVReplicaReplicationDetails,
        HyperVVirtualMachineDetails: HyperVVirtualMachineDetails,
        InlineWorkflowTaskDetails: InlineWorkflowTaskDetails,
        InMageAzureV2PolicyDetails: InMageAzureV2PolicyDetails,
        InMageAzureV2ReplicationDetails: InMageAzureV2ReplicationDetails,
        InMageAzureV2ProtectedDiskDetails: InMageAzureV2ProtectedDiskDetails,
        InMageBasePolicyDetails: InMageBasePolicyDetails,
        InMagePolicyDetails: InMagePolicyDetails,
        InMageReplicationDetails: InMageReplicationDetails,
        OSDiskDetails: OSDiskDetails,
        InMageProtectedDiskDetails: InMageProtectedDiskDetails,
        InMageAgentDetails: InMageAgentDetails
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a RecoveryPoints. */
    var RecoveryPoints = /** @class */ (function () {
        /**
         * Create a RecoveryPoints.
         * @param {SiteRecoveryManagementClientContext} client Reference to the service client.
         */
        function RecoveryPoints(client) {
            this.client = client;
        }
        RecoveryPoints.prototype.listByReplicationProtectedItems = function (fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, options, callback) {
            return this.client.sendOperationRequest({
                fabricName: fabricName$$1,
                protectionContainerName: protectionContainerName$$1,
                replicatedProtectedItemName: replicatedProtectedItemName$$1,
                options: options
            }, listByReplicationProtectedItemsOperationSpec, callback);
        };
        RecoveryPoints.prototype.get = function (fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, recoveryPointName$$1, options, callback) {
            return this.client.sendOperationRequest({
                fabricName: fabricName$$1,
                protectionContainerName: protectionContainerName$$1,
                replicatedProtectedItemName: replicatedProtectedItemName$$1,
                recoveryPointName: recoveryPointName$$1,
                options: options
            }, getOperationSpec$9, callback);
        };
        RecoveryPoints.prototype.listByReplicationProtectedItemsNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByReplicationProtectedItemsNextOperationSpec, callback);
        };
        return RecoveryPoints;
    }());
    // Operation Specifications
    var serializer$a = new msRest.Serializer(Mappers$a);
    var listByReplicationProtectedItemsOperationSpec = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/recoveryPoints",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            protectionContainerName,
            replicatedProtectedItemName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecoveryPointCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var getOperationSpec$9 = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/recoveryPoints/{recoveryPointName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            protectionContainerName,
            replicatedProtectedItemName,
            recoveryPointName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecoveryPoint
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var listByReplicationProtectedItemsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecoveryPointCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$b = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        TargetComputeSizeCollection: TargetComputeSizeCollection,
        TargetComputeSize: TargetComputeSize,
        TargetComputeSizeProperties: TargetComputeSizeProperties,
        ComputeSizeErrorDetails: ComputeSizeErrorDetails,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a TargetComputeSizes. */
    var TargetComputeSizes = /** @class */ (function () {
        /**
         * Create a TargetComputeSizes.
         * @param {SiteRecoveryManagementClientContext} client Reference to the service client.
         */
        function TargetComputeSizes(client) {
            this.client = client;
        }
        TargetComputeSizes.prototype.listByReplicationProtectedItems = function (fabricName$$1, protectionContainerName$$1, replicatedProtectedItemName$$1, options, callback) {
            return this.client.sendOperationRequest({
                fabricName: fabricName$$1,
                protectionContainerName: protectionContainerName$$1,
                replicatedProtectedItemName: replicatedProtectedItemName$$1,
                options: options
            }, listByReplicationProtectedItemsOperationSpec$1, callback);
        };
        TargetComputeSizes.prototype.listByReplicationProtectedItemsNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByReplicationProtectedItemsNextOperationSpec$1, callback);
        };
        return TargetComputeSizes;
    }());
    // Operation Specifications
    var serializer$b = new msRest.Serializer(Mappers$b);
    var listByReplicationProtectedItemsOperationSpec$1 = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/targetComputeSizes",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            protectionContainerName,
            replicatedProtectedItemName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TargetComputeSizeCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var listByReplicationProtectedItemsNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TargetComputeSizeCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$c = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        ProtectionContainerMappingCollection: ProtectionContainerMappingCollection,
        ProtectionContainerMapping: ProtectionContainerMapping,
        Resource: Resource,
        BaseResource: BaseResource,
        ProtectionContainerMappingProperties: ProtectionContainerMappingProperties,
        ProtectionContainerMappingProviderSpecificDetails: ProtectionContainerMappingProviderSpecificDetails,
        HealthError: HealthError,
        InnerHealthError: InnerHealthError,
        CloudError: CloudError,
        CreateProtectionContainerMappingInput: CreateProtectionContainerMappingInput,
        CreateProtectionContainerMappingInputProperties: CreateProtectionContainerMappingInputProperties,
        ReplicationProviderSpecificContainerMappingInput: ReplicationProviderSpecificContainerMappingInput,
        UpdateProtectionContainerMappingInput: UpdateProtectionContainerMappingInput,
        UpdateProtectionContainerMappingInputProperties: UpdateProtectionContainerMappingInputProperties,
        ReplicationProviderSpecificUpdateContainerMappingInput: ReplicationProviderSpecificUpdateContainerMappingInput,
        RemoveProtectionContainerMappingInput: RemoveProtectionContainerMappingInput,
        RemoveProtectionContainerMappingInputProperties: RemoveProtectionContainerMappingInputProperties,
        ReplicationProviderContainerUnmappingInput: ReplicationProviderContainerUnmappingInput,
        A2AContainerMappingInput: A2AContainerMappingInput,
        A2AProtectionContainerMappingDetails: A2AProtectionContainerMappingDetails,
        A2AUpdateContainerMappingInput: A2AUpdateContainerMappingInput,
        Alert: Alert,
        AlertProperties: AlertProperties,
        Event: Event,
        EventProperties: EventProperties,
        EventProviderSpecificDetails: EventProviderSpecificDetails,
        EventSpecificDetails: EventSpecificDetails,
        Fabric: Fabric,
        FabricProperties: FabricProperties,
        EncryptionDetails: EncryptionDetails,
        FabricSpecificDetails: FabricSpecificDetails,
        HyperVReplica2012EventDetails: HyperVReplica2012EventDetails,
        HyperVReplica2012R2EventDetails: HyperVReplica2012R2EventDetails,
        HyperVReplicaAzureEventDetails: HyperVReplicaAzureEventDetails,
        HyperVReplicaBaseEventDetails: HyperVReplicaBaseEventDetails,
        HyperVSiteDetails: HyperVSiteDetails,
        InMageAzureV2EventDetails: InMageAzureV2EventDetails,
        Job: Job,
        JobProperties: JobProperties,
        ASRTask: ASRTask,
        TaskTypeDetails: TaskTypeDetails,
        GroupTaskDetails: GroupTaskDetails,
        JobErrorDetails: JobErrorDetails,
        ServiceError: ServiceError,
        ProviderError: ProviderError,
        JobDetails: JobDetails,
        JobStatusEventDetails: JobStatusEventDetails,
        JobTaskDetails: JobTaskDetails,
        JobEntity: JobEntity,
        LogicalNetwork: LogicalNetwork,
        LogicalNetworkProperties: LogicalNetworkProperties,
        ManualActionTaskDetails: ManualActionTaskDetails,
        Network: Network,
        NetworkProperties: NetworkProperties,
        Subnet: Subnet,
        NetworkMapping: NetworkMapping,
        NetworkMappingProperties: NetworkMappingProperties,
        NetworkMappingFabricSpecificSettings: NetworkMappingFabricSpecificSettings,
        Policy: Policy,
        PolicyProperties: PolicyProperties,
        PolicyProviderSpecificDetails: PolicyProviderSpecificDetails,
        ProtectableItem: ProtectableItem,
        ProtectableItemProperties: ProtectableItemProperties,
        ConfigurationSettings: ConfigurationSettings,
        ProtectionContainer: ProtectionContainer,
        ProtectionContainerProperties: ProtectionContainerProperties,
        ProtectionContainerFabricSpecificDetails: ProtectionContainerFabricSpecificDetails,
        RcmAzureMigrationPolicyDetails: RcmAzureMigrationPolicyDetails,
        RecoveryPlan: RecoveryPlan,
        RecoveryPlanProperties: RecoveryPlanProperties,
        CurrentScenarioDetails: CurrentScenarioDetails,
        RecoveryPlanGroup: RecoveryPlanGroup,
        RecoveryPlanProtectedItem: RecoveryPlanProtectedItem,
        RecoveryPlanAction: RecoveryPlanAction,
        RecoveryPlanActionDetails: RecoveryPlanActionDetails,
        RecoveryPlanAutomationRunbookActionDetails: RecoveryPlanAutomationRunbookActionDetails,
        RecoveryPlanGroupTaskDetails: RecoveryPlanGroupTaskDetails,
        RecoveryPlanManualActionDetails: RecoveryPlanManualActionDetails,
        RecoveryPlanScriptActionDetails: RecoveryPlanScriptActionDetails,
        RecoveryPlanShutdownGroupTaskDetails: RecoveryPlanShutdownGroupTaskDetails,
        RecoveryPoint: RecoveryPoint,
        RecoveryPointProperties: RecoveryPointProperties,
        ProviderSpecificRecoveryPointDetails: ProviderSpecificRecoveryPointDetails,
        RecoveryServicesProvider: RecoveryServicesProvider,
        RecoveryServicesProviderProperties: RecoveryServicesProviderProperties,
        IdentityInformation: IdentityInformation,
        VersionDetails: VersionDetails,
        ReplicationGroupDetails: ReplicationGroupDetails,
        ReplicationProtectedItem: ReplicationProtectedItem,
        ReplicationProtectedItemProperties: ReplicationProtectedItemProperties,
        ReplicationProviderSpecificSettings: ReplicationProviderSpecificSettings,
        ScriptActionTaskDetails: ScriptActionTaskDetails,
        StorageClassification: StorageClassification,
        StorageClassificationProperties: StorageClassificationProperties,
        StorageClassificationMapping: StorageClassificationMapping,
        StorageClassificationMappingProperties: StorageClassificationMappingProperties,
        SwitchProtectionJobDetails: SwitchProtectionJobDetails,
        TestFailoverJobDetails: TestFailoverJobDetails,
        FailoverReplicationProtectedItemDetails: FailoverReplicationProtectedItemDetails,
        VaultHealthDetails: VaultHealthDetails,
        VaultHealthProperties: VaultHealthProperties,
        ResourceHealthSummary: ResourceHealthSummary,
        HealthErrorSummary: HealthErrorSummary,
        VCenter: VCenter,
        VCenterProperties: VCenterProperties,
        VirtualMachineTaskDetails: VirtualMachineTaskDetails,
        VmmDetails: VmmDetails,
        VmmToAzureNetworkMappingSettings: VmmToAzureNetworkMappingSettings,
        VmmToVmmNetworkMappingSettings: VmmToVmmNetworkMappingSettings,
        VmmVirtualMachineDetails: VmmVirtualMachineDetails,
        OSDetails: OSDetails,
        DiskDetails: DiskDetails,
        VmNicUpdatesTaskDetails: VmNicUpdatesTaskDetails,
        VmwareCbtPolicyDetails: VmwareCbtPolicyDetails,
        VMwareDetails: VMwareDetails,
        ProcessServer: ProcessServer,
        MobilityServiceUpdate: MobilityServiceUpdate,
        MasterTargetServer: MasterTargetServer,
        RetentionVolume: RetentionVolume,
        DataStore: DataStore,
        RunAsAccount: RunAsAccount,
        VMwareV2FabricSpecificDetails: VMwareV2FabricSpecificDetails,
        VMwareVirtualMachineDetails: VMwareVirtualMachineDetails,
        InMageDiskDetails: InMageDiskDetails,
        DiskVolumeDetails: DiskVolumeDetails,
        A2AEventDetails: A2AEventDetails,
        A2APolicyDetails: A2APolicyDetails,
        A2ARecoveryPointDetails: A2ARecoveryPointDetails,
        A2AReplicationDetails: A2AReplicationDetails,
        A2AProtectedDiskDetails: A2AProtectedDiskDetails,
        A2AProtectedManagedDiskDetails: A2AProtectedManagedDiskDetails,
        VMNicDetails: VMNicDetails,
        AzureToAzureVmSyncedConfigDetails: AzureToAzureVmSyncedConfigDetails,
        RoleAssignment: RoleAssignment,
        InputEndpoint: InputEndpoint,
        AsrJobDetails: AsrJobDetails,
        AutomationRunbookTaskDetails: AutomationRunbookTaskDetails,
        AzureFabricSpecificDetails: AzureFabricSpecificDetails,
        AzureToAzureNetworkMappingSettings: AzureToAzureNetworkMappingSettings,
        ConsistencyCheckTaskDetails: ConsistencyCheckTaskDetails,
        InconsistentVmDetails: InconsistentVmDetails,
        ExportJobDetails: ExportJobDetails,
        FabricReplicationGroupTaskDetails: FabricReplicationGroupTaskDetails,
        FailoverJobDetails: FailoverJobDetails,
        HyperVReplicaAzurePolicyDetails: HyperVReplicaAzurePolicyDetails,
        HyperVReplicaAzureReplicationDetails: HyperVReplicaAzureReplicationDetails,
        AzureVmDiskDetails: AzureVmDiskDetails,
        InitialReplicationDetails: InitialReplicationDetails,
        HyperVReplicaBasePolicyDetails: HyperVReplicaBasePolicyDetails,
        HyperVReplicaBaseReplicationDetails: HyperVReplicaBaseReplicationDetails,
        HyperVReplicaBluePolicyDetails: HyperVReplicaBluePolicyDetails,
        HyperVReplicaBlueReplicationDetails: HyperVReplicaBlueReplicationDetails,
        HyperVReplicaPolicyDetails: HyperVReplicaPolicyDetails,
        HyperVReplicaReplicationDetails: HyperVReplicaReplicationDetails,
        HyperVVirtualMachineDetails: HyperVVirtualMachineDetails,
        InlineWorkflowTaskDetails: InlineWorkflowTaskDetails,
        InMageAzureV2PolicyDetails: InMageAzureV2PolicyDetails,
        InMageAzureV2RecoveryPointDetails: InMageAzureV2RecoveryPointDetails,
        InMageAzureV2ReplicationDetails: InMageAzureV2ReplicationDetails,
        InMageAzureV2ProtectedDiskDetails: InMageAzureV2ProtectedDiskDetails,
        InMageBasePolicyDetails: InMageBasePolicyDetails,
        InMagePolicyDetails: InMagePolicyDetails,
        InMageReplicationDetails: InMageReplicationDetails,
        OSDiskDetails: OSDiskDetails,
        InMageProtectedDiskDetails: InMageProtectedDiskDetails,
        InMageAgentDetails: InMageAgentDetails
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ReplicationProtectionContainerMappings. */
    var ReplicationProtectionContainerMappings = /** @class */ (function () {
        /**
         * Create a ReplicationProtectionContainerMappings.
         * @param {SiteRecoveryManagementClientContext} client Reference to the service client.
         */
        function ReplicationProtectionContainerMappings(client) {
            this.client = client;
        }
        ReplicationProtectionContainerMappings.prototype.listByReplicationProtectionContainers = function (fabricName$$1, protectionContainerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                fabricName: fabricName$$1,
                protectionContainerName: protectionContainerName$$1,
                options: options
            }, listByReplicationProtectionContainersOperationSpec$2, callback);
        };
        ReplicationProtectionContainerMappings.prototype.get = function (fabricName$$1, protectionContainerName$$1, mappingName$$1, options, callback) {
            return this.client.sendOperationRequest({
                fabricName: fabricName$$1,
                protectionContainerName: protectionContainerName$$1,
                mappingName: mappingName$$1,
                options: options
            }, getOperationSpec$a, callback);
        };
        /**
         * The operation to create a protection container mapping.
         * @summary Create protection container mapping.
         * @param fabricName Fabric name.
         * @param protectionContainerName Protection container name.
         * @param mappingName Protection container mapping name.
         * @param creationInput Mapping creation input.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationProtectionContainerMappingsCreateResponse>
         */
        ReplicationProtectionContainerMappings.prototype.create = function (fabricName$$1, protectionContainerName$$1, mappingName$$1, creationInput, options) {
            return this.beginCreate(fabricName$$1, protectionContainerName$$1, mappingName$$1, creationInput, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to purge(force delete) a protection container mapping
         * @summary Purge protection container mapping.
         * @param fabricName Fabric name.
         * @param protectionContainerName Protection container name.
         * @param mappingName Protection container mapping name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ReplicationProtectionContainerMappings.prototype.purge = function (fabricName$$1, protectionContainerName$$1, mappingName$$1, options) {
            return this.beginPurge(fabricName$$1, protectionContainerName$$1, mappingName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to update protection container mapping.
         * @summary Update protection container mapping.
         * @param fabricName Fabric name.
         * @param protectionContainerName Protection container name.
         * @param mappingName Protection container mapping name.
         * @param updateInput Mapping update input.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationProtectionContainerMappingsUpdateResponse>
         */
        ReplicationProtectionContainerMappings.prototype.update = function (fabricName$$1, protectionContainerName$$1, mappingName$$1, updateInput, options) {
            return this.beginUpdate(fabricName$$1, protectionContainerName$$1, mappingName$$1, updateInput, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to delete or remove a protection container mapping.
         * @summary Remove protection container mapping.
         * @param fabricName Fabric name.
         * @param protectionContainerName Protection container name.
         * @param mappingName Protection container mapping name.
         * @param removalInput Removal input.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ReplicationProtectionContainerMappings.prototype.deleteMethod = function (fabricName$$1, protectionContainerName$$1, mappingName$$1, removalInput, options) {
            return this.beginDeleteMethod(fabricName$$1, protectionContainerName$$1, mappingName$$1, removalInput, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ReplicationProtectionContainerMappings.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$8, callback);
        };
        /**
         * The operation to create a protection container mapping.
         * @summary Create protection container mapping.
         * @param fabricName Fabric name.
         * @param protectionContainerName Protection container name.
         * @param mappingName Protection container mapping name.
         * @param creationInput Mapping creation input.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationProtectionContainerMappings.prototype.beginCreate = function (fabricName$$1, protectionContainerName$$1, mappingName$$1, creationInput, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                protectionContainerName: protectionContainerName$$1,
                mappingName: mappingName$$1,
                creationInput: creationInput,
                options: options
            }, beginCreateOperationSpec$4, options);
        };
        /**
         * The operation to purge(force delete) a protection container mapping
         * @summary Purge protection container mapping.
         * @param fabricName Fabric name.
         * @param protectionContainerName Protection container name.
         * @param mappingName Protection container mapping name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationProtectionContainerMappings.prototype.beginPurge = function (fabricName$$1, protectionContainerName$$1, mappingName$$1, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                protectionContainerName: protectionContainerName$$1,
                mappingName: mappingName$$1,
                options: options
            }, beginPurgeOperationSpec$2, options);
        };
        /**
         * The operation to update protection container mapping.
         * @summary Update protection container mapping.
         * @param fabricName Fabric name.
         * @param protectionContainerName Protection container name.
         * @param mappingName Protection container mapping name.
         * @param updateInput Mapping update input.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationProtectionContainerMappings.prototype.beginUpdate = function (fabricName$$1, protectionContainerName$$1, mappingName$$1, updateInput, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                protectionContainerName: protectionContainerName$$1,
                mappingName: mappingName$$1,
                updateInput: updateInput,
                options: options
            }, beginUpdateOperationSpec$2, options);
        };
        /**
         * The operation to delete or remove a protection container mapping.
         * @summary Remove protection container mapping.
         * @param fabricName Fabric name.
         * @param protectionContainerName Protection container name.
         * @param mappingName Protection container mapping name.
         * @param removalInput Removal input.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationProtectionContainerMappings.prototype.beginDeleteMethod = function (fabricName$$1, protectionContainerName$$1, mappingName$$1, removalInput, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                protectionContainerName: protectionContainerName$$1,
                mappingName: mappingName$$1,
                removalInput: removalInput,
                options: options
            }, beginDeleteMethodOperationSpec$4, options);
        };
        ReplicationProtectionContainerMappings.prototype.listByReplicationProtectionContainersNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByReplicationProtectionContainersNextOperationSpec$2, callback);
        };
        ReplicationProtectionContainerMappings.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$8, callback);
        };
        return ReplicationProtectionContainerMappings;
    }());
    // Operation Specifications
    var serializer$c = new msRest.Serializer(Mappers$c);
    var listByReplicationProtectionContainersOperationSpec$2 = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionContainerMappings",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            protectionContainerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProtectionContainerMappingCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var getOperationSpec$a = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionContainerMappings/{mappingName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            protectionContainerName,
            mappingName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProtectionContainerMapping
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var listOperationSpec$8 = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationProtectionContainerMappings",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProtectionContainerMappingCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var beginCreateOperationSpec$4 = {
        httpMethod: "PUT",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionContainerMappings/{mappingName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            protectionContainerName,
            mappingName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "creationInput",
            mapper: __assign({}, CreateProtectionContainerMappingInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ProtectionContainerMapping
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var beginPurgeOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionContainerMappings/{mappingName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            protectionContainerName,
            mappingName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var beginUpdateOperationSpec$2 = {
        httpMethod: "PATCH",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionContainerMappings/{mappingName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            protectionContainerName,
            mappingName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "updateInput",
            mapper: __assign({}, UpdateProtectionContainerMappingInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ProtectionContainerMapping
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var beginDeleteMethodOperationSpec$4 = {
        httpMethod: "POST",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionContainerMappings/{mappingName}/remove",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            protectionContainerName,
            mappingName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "removalInput",
            mapper: __assign({}, RemoveProtectionContainerMappingInput, { required: true })
        },
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var listByReplicationProtectionContainersNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProtectionContainerMappingCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var listNextOperationSpec$8 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProtectionContainerMappingCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$d = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        RecoveryServicesProviderCollection: RecoveryServicesProviderCollection,
        RecoveryServicesProvider: RecoveryServicesProvider,
        Resource: Resource,
        BaseResource: BaseResource,
        RecoveryServicesProviderProperties: RecoveryServicesProviderProperties,
        HealthError: HealthError,
        InnerHealthError: InnerHealthError,
        IdentityInformation: IdentityInformation,
        VersionDetails: VersionDetails,
        CloudError: CloudError,
        Alert: Alert,
        AlertProperties: AlertProperties,
        Event: Event,
        EventProperties: EventProperties,
        EventProviderSpecificDetails: EventProviderSpecificDetails,
        EventSpecificDetails: EventSpecificDetails,
        Fabric: Fabric,
        FabricProperties: FabricProperties,
        EncryptionDetails: EncryptionDetails,
        FabricSpecificDetails: FabricSpecificDetails,
        HyperVReplica2012EventDetails: HyperVReplica2012EventDetails,
        HyperVReplica2012R2EventDetails: HyperVReplica2012R2EventDetails,
        HyperVReplicaAzureEventDetails: HyperVReplicaAzureEventDetails,
        HyperVReplicaBaseEventDetails: HyperVReplicaBaseEventDetails,
        HyperVSiteDetails: HyperVSiteDetails,
        InMageAzureV2EventDetails: InMageAzureV2EventDetails,
        Job: Job,
        JobProperties: JobProperties,
        ASRTask: ASRTask,
        TaskTypeDetails: TaskTypeDetails,
        GroupTaskDetails: GroupTaskDetails,
        JobErrorDetails: JobErrorDetails,
        ServiceError: ServiceError,
        ProviderError: ProviderError,
        JobDetails: JobDetails,
        JobStatusEventDetails: JobStatusEventDetails,
        JobTaskDetails: JobTaskDetails,
        JobEntity: JobEntity,
        LogicalNetwork: LogicalNetwork,
        LogicalNetworkProperties: LogicalNetworkProperties,
        ManualActionTaskDetails: ManualActionTaskDetails,
        Network: Network,
        NetworkProperties: NetworkProperties,
        Subnet: Subnet,
        NetworkMapping: NetworkMapping,
        NetworkMappingProperties: NetworkMappingProperties,
        NetworkMappingFabricSpecificSettings: NetworkMappingFabricSpecificSettings,
        Policy: Policy,
        PolicyProperties: PolicyProperties,
        PolicyProviderSpecificDetails: PolicyProviderSpecificDetails,
        ProtectableItem: ProtectableItem,
        ProtectableItemProperties: ProtectableItemProperties,
        ConfigurationSettings: ConfigurationSettings,
        ProtectionContainer: ProtectionContainer,
        ProtectionContainerProperties: ProtectionContainerProperties,
        ProtectionContainerFabricSpecificDetails: ProtectionContainerFabricSpecificDetails,
        ProtectionContainerMapping: ProtectionContainerMapping,
        ProtectionContainerMappingProperties: ProtectionContainerMappingProperties,
        ProtectionContainerMappingProviderSpecificDetails: ProtectionContainerMappingProviderSpecificDetails,
        RcmAzureMigrationPolicyDetails: RcmAzureMigrationPolicyDetails,
        RecoveryPlan: RecoveryPlan,
        RecoveryPlanProperties: RecoveryPlanProperties,
        CurrentScenarioDetails: CurrentScenarioDetails,
        RecoveryPlanGroup: RecoveryPlanGroup,
        RecoveryPlanProtectedItem: RecoveryPlanProtectedItem,
        RecoveryPlanAction: RecoveryPlanAction,
        RecoveryPlanActionDetails: RecoveryPlanActionDetails,
        RecoveryPlanAutomationRunbookActionDetails: RecoveryPlanAutomationRunbookActionDetails,
        RecoveryPlanGroupTaskDetails: RecoveryPlanGroupTaskDetails,
        RecoveryPlanManualActionDetails: RecoveryPlanManualActionDetails,
        RecoveryPlanScriptActionDetails: RecoveryPlanScriptActionDetails,
        RecoveryPlanShutdownGroupTaskDetails: RecoveryPlanShutdownGroupTaskDetails,
        RecoveryPoint: RecoveryPoint,
        RecoveryPointProperties: RecoveryPointProperties,
        ProviderSpecificRecoveryPointDetails: ProviderSpecificRecoveryPointDetails,
        ReplicationGroupDetails: ReplicationGroupDetails,
        ReplicationProtectedItem: ReplicationProtectedItem,
        ReplicationProtectedItemProperties: ReplicationProtectedItemProperties,
        ReplicationProviderSpecificSettings: ReplicationProviderSpecificSettings,
        ScriptActionTaskDetails: ScriptActionTaskDetails,
        StorageClassification: StorageClassification,
        StorageClassificationProperties: StorageClassificationProperties,
        StorageClassificationMapping: StorageClassificationMapping,
        StorageClassificationMappingProperties: StorageClassificationMappingProperties,
        SwitchProtectionJobDetails: SwitchProtectionJobDetails,
        TestFailoverJobDetails: TestFailoverJobDetails,
        FailoverReplicationProtectedItemDetails: FailoverReplicationProtectedItemDetails,
        VaultHealthDetails: VaultHealthDetails,
        VaultHealthProperties: VaultHealthProperties,
        ResourceHealthSummary: ResourceHealthSummary,
        HealthErrorSummary: HealthErrorSummary,
        VCenter: VCenter,
        VCenterProperties: VCenterProperties,
        VirtualMachineTaskDetails: VirtualMachineTaskDetails,
        VmmDetails: VmmDetails,
        VmmToAzureNetworkMappingSettings: VmmToAzureNetworkMappingSettings,
        VmmToVmmNetworkMappingSettings: VmmToVmmNetworkMappingSettings,
        VmmVirtualMachineDetails: VmmVirtualMachineDetails,
        OSDetails: OSDetails,
        DiskDetails: DiskDetails,
        VmNicUpdatesTaskDetails: VmNicUpdatesTaskDetails,
        VmwareCbtPolicyDetails: VmwareCbtPolicyDetails,
        VMwareDetails: VMwareDetails,
        ProcessServer: ProcessServer,
        MobilityServiceUpdate: MobilityServiceUpdate,
        MasterTargetServer: MasterTargetServer,
        RetentionVolume: RetentionVolume,
        DataStore: DataStore,
        RunAsAccount: RunAsAccount,
        VMwareV2FabricSpecificDetails: VMwareV2FabricSpecificDetails,
        VMwareVirtualMachineDetails: VMwareVirtualMachineDetails,
        InMageDiskDetails: InMageDiskDetails,
        DiskVolumeDetails: DiskVolumeDetails,
        A2AEventDetails: A2AEventDetails,
        A2APolicyDetails: A2APolicyDetails,
        A2AProtectionContainerMappingDetails: A2AProtectionContainerMappingDetails,
        A2ARecoveryPointDetails: A2ARecoveryPointDetails,
        A2AReplicationDetails: A2AReplicationDetails,
        A2AProtectedDiskDetails: A2AProtectedDiskDetails,
        A2AProtectedManagedDiskDetails: A2AProtectedManagedDiskDetails,
        VMNicDetails: VMNicDetails,
        AzureToAzureVmSyncedConfigDetails: AzureToAzureVmSyncedConfigDetails,
        RoleAssignment: RoleAssignment,
        InputEndpoint: InputEndpoint,
        AsrJobDetails: AsrJobDetails,
        AutomationRunbookTaskDetails: AutomationRunbookTaskDetails,
        AzureFabricSpecificDetails: AzureFabricSpecificDetails,
        AzureToAzureNetworkMappingSettings: AzureToAzureNetworkMappingSettings,
        ConsistencyCheckTaskDetails: ConsistencyCheckTaskDetails,
        InconsistentVmDetails: InconsistentVmDetails,
        ExportJobDetails: ExportJobDetails,
        FabricReplicationGroupTaskDetails: FabricReplicationGroupTaskDetails,
        FailoverJobDetails: FailoverJobDetails,
        HyperVReplicaAzurePolicyDetails: HyperVReplicaAzurePolicyDetails,
        HyperVReplicaAzureReplicationDetails: HyperVReplicaAzureReplicationDetails,
        AzureVmDiskDetails: AzureVmDiskDetails,
        InitialReplicationDetails: InitialReplicationDetails,
        HyperVReplicaBasePolicyDetails: HyperVReplicaBasePolicyDetails,
        HyperVReplicaBaseReplicationDetails: HyperVReplicaBaseReplicationDetails,
        HyperVReplicaBluePolicyDetails: HyperVReplicaBluePolicyDetails,
        HyperVReplicaBlueReplicationDetails: HyperVReplicaBlueReplicationDetails,
        HyperVReplicaPolicyDetails: HyperVReplicaPolicyDetails,
        HyperVReplicaReplicationDetails: HyperVReplicaReplicationDetails,
        HyperVVirtualMachineDetails: HyperVVirtualMachineDetails,
        InlineWorkflowTaskDetails: InlineWorkflowTaskDetails,
        InMageAzureV2PolicyDetails: InMageAzureV2PolicyDetails,
        InMageAzureV2RecoveryPointDetails: InMageAzureV2RecoveryPointDetails,
        InMageAzureV2ReplicationDetails: InMageAzureV2ReplicationDetails,
        InMageAzureV2ProtectedDiskDetails: InMageAzureV2ProtectedDiskDetails,
        InMageBasePolicyDetails: InMageBasePolicyDetails,
        InMagePolicyDetails: InMagePolicyDetails,
        InMageReplicationDetails: InMageReplicationDetails,
        OSDiskDetails: OSDiskDetails,
        InMageProtectedDiskDetails: InMageProtectedDiskDetails,
        InMageAgentDetails: InMageAgentDetails
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ReplicationRecoveryServicesProviders. */
    var ReplicationRecoveryServicesProviders = /** @class */ (function () {
        /**
         * Create a ReplicationRecoveryServicesProviders.
         * @param {SiteRecoveryManagementClientContext} client Reference to the service client.
         */
        function ReplicationRecoveryServicesProviders(client) {
            this.client = client;
        }
        ReplicationRecoveryServicesProviders.prototype.listByReplicationFabrics = function (fabricName$$1, options, callback) {
            return this.client.sendOperationRequest({
                fabricName: fabricName$$1,
                options: options
            }, listByReplicationFabricsOperationSpec$3, callback);
        };
        ReplicationRecoveryServicesProviders.prototype.get = function (fabricName$$1, providerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                fabricName: fabricName$$1,
                providerName: providerName$$1,
                options: options
            }, getOperationSpec$b, callback);
        };
        /**
         * The operation to purge(force delete) a recovery services provider from the vault.
         * @summary Purges recovery service provider from fabric
         * @param fabricName Fabric name.
         * @param providerName Recovery services provider name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ReplicationRecoveryServicesProviders.prototype.purge = function (fabricName$$1, providerName$$1, options) {
            return this.beginPurge(fabricName$$1, providerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to refresh the information from the recovery services provider.
         * @summary Refresh details from the recovery services provider.
         * @param fabricName Fabric name.
         * @param providerName Recovery services provider name.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationRecoveryServicesProvidersRefreshProviderResponse>
         */
        ReplicationRecoveryServicesProviders.prototype.refreshProvider = function (fabricName$$1, providerName$$1, options) {
            return this.beginRefreshProvider(fabricName$$1, providerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to removes/delete(unregister) a recovery services provider from the vault
         * @summary Deletes provider from fabric. Note: Deleting provider for any fabric other than
         * SingleHost is unsupported. To maintain backward compatibility for released clients the object
         * "deleteRspInput" is used (if the object is empty we assume that it is old client and continue
         * the old behavior).
         * @param fabricName Fabric name.
         * @param providerName Recovery services provider name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ReplicationRecoveryServicesProviders.prototype.deleteMethod = function (fabricName$$1, providerName$$1, options) {
            return this.beginDeleteMethod(fabricName$$1, providerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ReplicationRecoveryServicesProviders.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$9, callback);
        };
        /**
         * The operation to purge(force delete) a recovery services provider from the vault.
         * @summary Purges recovery service provider from fabric
         * @param fabricName Fabric name.
         * @param providerName Recovery services provider name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationRecoveryServicesProviders.prototype.beginPurge = function (fabricName$$1, providerName$$1, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                providerName: providerName$$1,
                options: options
            }, beginPurgeOperationSpec$3, options);
        };
        /**
         * The operation to refresh the information from the recovery services provider.
         * @summary Refresh details from the recovery services provider.
         * @param fabricName Fabric name.
         * @param providerName Recovery services provider name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationRecoveryServicesProviders.prototype.beginRefreshProvider = function (fabricName$$1, providerName$$1, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                providerName: providerName$$1,
                options: options
            }, beginRefreshProviderOperationSpec, options);
        };
        /**
         * The operation to removes/delete(unregister) a recovery services provider from the vault
         * @summary Deletes provider from fabric. Note: Deleting provider for any fabric other than
         * SingleHost is unsupported. To maintain backward compatibility for released clients the object
         * "deleteRspInput" is used (if the object is empty we assume that it is old client and continue
         * the old behavior).
         * @param fabricName Fabric name.
         * @param providerName Recovery services provider name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationRecoveryServicesProviders.prototype.beginDeleteMethod = function (fabricName$$1, providerName$$1, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                providerName: providerName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$5, options);
        };
        ReplicationRecoveryServicesProviders.prototype.listByReplicationFabricsNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByReplicationFabricsNextOperationSpec$3, callback);
        };
        ReplicationRecoveryServicesProviders.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$9, callback);
        };
        return ReplicationRecoveryServicesProviders;
    }());
    // Operation Specifications
    var serializer$d = new msRest.Serializer(Mappers$d);
    var listByReplicationFabricsOperationSpec$3 = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationRecoveryServicesProviders",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecoveryServicesProviderCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var getOperationSpec$b = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationRecoveryServicesProviders/{providerName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            providerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecoveryServicesProvider
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var listOperationSpec$9 = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryServicesProviders",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecoveryServicesProviderCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var beginPurgeOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationRecoveryServicesProviders/{providerName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            providerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var beginRefreshProviderOperationSpec = {
        httpMethod: "POST",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationRecoveryServicesProviders/{providerName}/refreshProvider",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            providerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecoveryServicesProvider
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var beginDeleteMethodOperationSpec$5 = {
        httpMethod: "POST",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationRecoveryServicesProviders/{providerName}/remove",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            providerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var listByReplicationFabricsNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecoveryServicesProviderCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var listNextOperationSpec$9 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecoveryServicesProviderCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$e = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        StorageClassificationCollection: StorageClassificationCollection,
        StorageClassification: StorageClassification,
        Resource: Resource,
        BaseResource: BaseResource,
        StorageClassificationProperties: StorageClassificationProperties,
        CloudError: CloudError,
        Alert: Alert,
        AlertProperties: AlertProperties,
        Event: Event,
        EventProperties: EventProperties,
        EventProviderSpecificDetails: EventProviderSpecificDetails,
        EventSpecificDetails: EventSpecificDetails,
        HealthError: HealthError,
        InnerHealthError: InnerHealthError,
        Fabric: Fabric,
        FabricProperties: FabricProperties,
        EncryptionDetails: EncryptionDetails,
        FabricSpecificDetails: FabricSpecificDetails,
        HyperVReplica2012EventDetails: HyperVReplica2012EventDetails,
        HyperVReplica2012R2EventDetails: HyperVReplica2012R2EventDetails,
        HyperVReplicaAzureEventDetails: HyperVReplicaAzureEventDetails,
        HyperVReplicaBaseEventDetails: HyperVReplicaBaseEventDetails,
        HyperVSiteDetails: HyperVSiteDetails,
        InMageAzureV2EventDetails: InMageAzureV2EventDetails,
        Job: Job,
        JobProperties: JobProperties,
        ASRTask: ASRTask,
        TaskTypeDetails: TaskTypeDetails,
        GroupTaskDetails: GroupTaskDetails,
        JobErrorDetails: JobErrorDetails,
        ServiceError: ServiceError,
        ProviderError: ProviderError,
        JobDetails: JobDetails,
        JobStatusEventDetails: JobStatusEventDetails,
        JobTaskDetails: JobTaskDetails,
        JobEntity: JobEntity,
        LogicalNetwork: LogicalNetwork,
        LogicalNetworkProperties: LogicalNetworkProperties,
        ManualActionTaskDetails: ManualActionTaskDetails,
        Network: Network,
        NetworkProperties: NetworkProperties,
        Subnet: Subnet,
        NetworkMapping: NetworkMapping,
        NetworkMappingProperties: NetworkMappingProperties,
        NetworkMappingFabricSpecificSettings: NetworkMappingFabricSpecificSettings,
        Policy: Policy,
        PolicyProperties: PolicyProperties,
        PolicyProviderSpecificDetails: PolicyProviderSpecificDetails,
        ProtectableItem: ProtectableItem,
        ProtectableItemProperties: ProtectableItemProperties,
        ConfigurationSettings: ConfigurationSettings,
        ProtectionContainer: ProtectionContainer,
        ProtectionContainerProperties: ProtectionContainerProperties,
        ProtectionContainerFabricSpecificDetails: ProtectionContainerFabricSpecificDetails,
        ProtectionContainerMapping: ProtectionContainerMapping,
        ProtectionContainerMappingProperties: ProtectionContainerMappingProperties,
        ProtectionContainerMappingProviderSpecificDetails: ProtectionContainerMappingProviderSpecificDetails,
        RcmAzureMigrationPolicyDetails: RcmAzureMigrationPolicyDetails,
        RecoveryPlan: RecoveryPlan,
        RecoveryPlanProperties: RecoveryPlanProperties,
        CurrentScenarioDetails: CurrentScenarioDetails,
        RecoveryPlanGroup: RecoveryPlanGroup,
        RecoveryPlanProtectedItem: RecoveryPlanProtectedItem,
        RecoveryPlanAction: RecoveryPlanAction,
        RecoveryPlanActionDetails: RecoveryPlanActionDetails,
        RecoveryPlanAutomationRunbookActionDetails: RecoveryPlanAutomationRunbookActionDetails,
        RecoveryPlanGroupTaskDetails: RecoveryPlanGroupTaskDetails,
        RecoveryPlanManualActionDetails: RecoveryPlanManualActionDetails,
        RecoveryPlanScriptActionDetails: RecoveryPlanScriptActionDetails,
        RecoveryPlanShutdownGroupTaskDetails: RecoveryPlanShutdownGroupTaskDetails,
        RecoveryPoint: RecoveryPoint,
        RecoveryPointProperties: RecoveryPointProperties,
        ProviderSpecificRecoveryPointDetails: ProviderSpecificRecoveryPointDetails,
        RecoveryServicesProvider: RecoveryServicesProvider,
        RecoveryServicesProviderProperties: RecoveryServicesProviderProperties,
        IdentityInformation: IdentityInformation,
        VersionDetails: VersionDetails,
        ReplicationGroupDetails: ReplicationGroupDetails,
        ReplicationProtectedItem: ReplicationProtectedItem,
        ReplicationProtectedItemProperties: ReplicationProtectedItemProperties,
        ReplicationProviderSpecificSettings: ReplicationProviderSpecificSettings,
        ScriptActionTaskDetails: ScriptActionTaskDetails,
        StorageClassificationMapping: StorageClassificationMapping,
        StorageClassificationMappingProperties: StorageClassificationMappingProperties,
        SwitchProtectionJobDetails: SwitchProtectionJobDetails,
        TestFailoverJobDetails: TestFailoverJobDetails,
        FailoverReplicationProtectedItemDetails: FailoverReplicationProtectedItemDetails,
        VaultHealthDetails: VaultHealthDetails,
        VaultHealthProperties: VaultHealthProperties,
        ResourceHealthSummary: ResourceHealthSummary,
        HealthErrorSummary: HealthErrorSummary,
        VCenter: VCenter,
        VCenterProperties: VCenterProperties,
        VirtualMachineTaskDetails: VirtualMachineTaskDetails,
        VmmDetails: VmmDetails,
        VmmToAzureNetworkMappingSettings: VmmToAzureNetworkMappingSettings,
        VmmToVmmNetworkMappingSettings: VmmToVmmNetworkMappingSettings,
        VmmVirtualMachineDetails: VmmVirtualMachineDetails,
        OSDetails: OSDetails,
        DiskDetails: DiskDetails,
        VmNicUpdatesTaskDetails: VmNicUpdatesTaskDetails,
        VmwareCbtPolicyDetails: VmwareCbtPolicyDetails,
        VMwareDetails: VMwareDetails,
        ProcessServer: ProcessServer,
        MobilityServiceUpdate: MobilityServiceUpdate,
        MasterTargetServer: MasterTargetServer,
        RetentionVolume: RetentionVolume,
        DataStore: DataStore,
        RunAsAccount: RunAsAccount,
        VMwareV2FabricSpecificDetails: VMwareV2FabricSpecificDetails,
        VMwareVirtualMachineDetails: VMwareVirtualMachineDetails,
        InMageDiskDetails: InMageDiskDetails,
        DiskVolumeDetails: DiskVolumeDetails,
        A2AEventDetails: A2AEventDetails,
        A2APolicyDetails: A2APolicyDetails,
        A2AProtectionContainerMappingDetails: A2AProtectionContainerMappingDetails,
        A2ARecoveryPointDetails: A2ARecoveryPointDetails,
        A2AReplicationDetails: A2AReplicationDetails,
        A2AProtectedDiskDetails: A2AProtectedDiskDetails,
        A2AProtectedManagedDiskDetails: A2AProtectedManagedDiskDetails,
        VMNicDetails: VMNicDetails,
        AzureToAzureVmSyncedConfigDetails: AzureToAzureVmSyncedConfigDetails,
        RoleAssignment: RoleAssignment,
        InputEndpoint: InputEndpoint,
        AsrJobDetails: AsrJobDetails,
        AutomationRunbookTaskDetails: AutomationRunbookTaskDetails,
        AzureFabricSpecificDetails: AzureFabricSpecificDetails,
        AzureToAzureNetworkMappingSettings: AzureToAzureNetworkMappingSettings,
        ConsistencyCheckTaskDetails: ConsistencyCheckTaskDetails,
        InconsistentVmDetails: InconsistentVmDetails,
        ExportJobDetails: ExportJobDetails,
        FabricReplicationGroupTaskDetails: FabricReplicationGroupTaskDetails,
        FailoverJobDetails: FailoverJobDetails,
        HyperVReplicaAzurePolicyDetails: HyperVReplicaAzurePolicyDetails,
        HyperVReplicaAzureReplicationDetails: HyperVReplicaAzureReplicationDetails,
        AzureVmDiskDetails: AzureVmDiskDetails,
        InitialReplicationDetails: InitialReplicationDetails,
        HyperVReplicaBasePolicyDetails: HyperVReplicaBasePolicyDetails,
        HyperVReplicaBaseReplicationDetails: HyperVReplicaBaseReplicationDetails,
        HyperVReplicaBluePolicyDetails: HyperVReplicaBluePolicyDetails,
        HyperVReplicaBlueReplicationDetails: HyperVReplicaBlueReplicationDetails,
        HyperVReplicaPolicyDetails: HyperVReplicaPolicyDetails,
        HyperVReplicaReplicationDetails: HyperVReplicaReplicationDetails,
        HyperVVirtualMachineDetails: HyperVVirtualMachineDetails,
        InlineWorkflowTaskDetails: InlineWorkflowTaskDetails,
        InMageAzureV2PolicyDetails: InMageAzureV2PolicyDetails,
        InMageAzureV2RecoveryPointDetails: InMageAzureV2RecoveryPointDetails,
        InMageAzureV2ReplicationDetails: InMageAzureV2ReplicationDetails,
        InMageAzureV2ProtectedDiskDetails: InMageAzureV2ProtectedDiskDetails,
        InMageBasePolicyDetails: InMageBasePolicyDetails,
        InMagePolicyDetails: InMagePolicyDetails,
        InMageReplicationDetails: InMageReplicationDetails,
        OSDiskDetails: OSDiskDetails,
        InMageProtectedDiskDetails: InMageProtectedDiskDetails,
        InMageAgentDetails: InMageAgentDetails
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ReplicationStorageClassifications. */
    var ReplicationStorageClassifications = /** @class */ (function () {
        /**
         * Create a ReplicationStorageClassifications.
         * @param {SiteRecoveryManagementClientContext} client Reference to the service client.
         */
        function ReplicationStorageClassifications(client) {
            this.client = client;
        }
        ReplicationStorageClassifications.prototype.listByReplicationFabrics = function (fabricName$$1, options, callback) {
            return this.client.sendOperationRequest({
                fabricName: fabricName$$1,
                options: options
            }, listByReplicationFabricsOperationSpec$4, callback);
        };
        ReplicationStorageClassifications.prototype.get = function (fabricName$$1, storageClassificationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                fabricName: fabricName$$1,
                storageClassificationName: storageClassificationName$$1,
                options: options
            }, getOperationSpec$c, callback);
        };
        ReplicationStorageClassifications.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$a, callback);
        };
        ReplicationStorageClassifications.prototype.listByReplicationFabricsNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByReplicationFabricsNextOperationSpec$4, callback);
        };
        ReplicationStorageClassifications.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$a, callback);
        };
        return ReplicationStorageClassifications;
    }());
    // Operation Specifications
    var serializer$e = new msRest.Serializer(Mappers$e);
    var listByReplicationFabricsOperationSpec$4 = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationStorageClassifications",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageClassificationCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var getOperationSpec$c = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationStorageClassifications/{storageClassificationName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            storageClassificationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageClassification
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var listOperationSpec$a = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationStorageClassifications",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageClassificationCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var listByReplicationFabricsNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageClassificationCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var listNextOperationSpec$a = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageClassificationCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$f = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        StorageClassificationMappingCollection: StorageClassificationMappingCollection,
        StorageClassificationMapping: StorageClassificationMapping,
        Resource: Resource,
        BaseResource: BaseResource,
        StorageClassificationMappingProperties: StorageClassificationMappingProperties,
        CloudError: CloudError,
        StorageClassificationMappingInput: StorageClassificationMappingInput,
        StorageMappingInputProperties: StorageMappingInputProperties,
        Alert: Alert,
        AlertProperties: AlertProperties,
        Event: Event,
        EventProperties: EventProperties,
        EventProviderSpecificDetails: EventProviderSpecificDetails,
        EventSpecificDetails: EventSpecificDetails,
        HealthError: HealthError,
        InnerHealthError: InnerHealthError,
        Fabric: Fabric,
        FabricProperties: FabricProperties,
        EncryptionDetails: EncryptionDetails,
        FabricSpecificDetails: FabricSpecificDetails,
        HyperVReplica2012EventDetails: HyperVReplica2012EventDetails,
        HyperVReplica2012R2EventDetails: HyperVReplica2012R2EventDetails,
        HyperVReplicaAzureEventDetails: HyperVReplicaAzureEventDetails,
        HyperVReplicaBaseEventDetails: HyperVReplicaBaseEventDetails,
        HyperVSiteDetails: HyperVSiteDetails,
        InMageAzureV2EventDetails: InMageAzureV2EventDetails,
        Job: Job,
        JobProperties: JobProperties,
        ASRTask: ASRTask,
        TaskTypeDetails: TaskTypeDetails,
        GroupTaskDetails: GroupTaskDetails,
        JobErrorDetails: JobErrorDetails,
        ServiceError: ServiceError,
        ProviderError: ProviderError,
        JobDetails: JobDetails,
        JobStatusEventDetails: JobStatusEventDetails,
        JobTaskDetails: JobTaskDetails,
        JobEntity: JobEntity,
        LogicalNetwork: LogicalNetwork,
        LogicalNetworkProperties: LogicalNetworkProperties,
        ManualActionTaskDetails: ManualActionTaskDetails,
        Network: Network,
        NetworkProperties: NetworkProperties,
        Subnet: Subnet,
        NetworkMapping: NetworkMapping,
        NetworkMappingProperties: NetworkMappingProperties,
        NetworkMappingFabricSpecificSettings: NetworkMappingFabricSpecificSettings,
        Policy: Policy,
        PolicyProperties: PolicyProperties,
        PolicyProviderSpecificDetails: PolicyProviderSpecificDetails,
        ProtectableItem: ProtectableItem,
        ProtectableItemProperties: ProtectableItemProperties,
        ConfigurationSettings: ConfigurationSettings,
        ProtectionContainer: ProtectionContainer,
        ProtectionContainerProperties: ProtectionContainerProperties,
        ProtectionContainerFabricSpecificDetails: ProtectionContainerFabricSpecificDetails,
        ProtectionContainerMapping: ProtectionContainerMapping,
        ProtectionContainerMappingProperties: ProtectionContainerMappingProperties,
        ProtectionContainerMappingProviderSpecificDetails: ProtectionContainerMappingProviderSpecificDetails,
        RcmAzureMigrationPolicyDetails: RcmAzureMigrationPolicyDetails,
        RecoveryPlan: RecoveryPlan,
        RecoveryPlanProperties: RecoveryPlanProperties,
        CurrentScenarioDetails: CurrentScenarioDetails,
        RecoveryPlanGroup: RecoveryPlanGroup,
        RecoveryPlanProtectedItem: RecoveryPlanProtectedItem,
        RecoveryPlanAction: RecoveryPlanAction,
        RecoveryPlanActionDetails: RecoveryPlanActionDetails,
        RecoveryPlanAutomationRunbookActionDetails: RecoveryPlanAutomationRunbookActionDetails,
        RecoveryPlanGroupTaskDetails: RecoveryPlanGroupTaskDetails,
        RecoveryPlanManualActionDetails: RecoveryPlanManualActionDetails,
        RecoveryPlanScriptActionDetails: RecoveryPlanScriptActionDetails,
        RecoveryPlanShutdownGroupTaskDetails: RecoveryPlanShutdownGroupTaskDetails,
        RecoveryPoint: RecoveryPoint,
        RecoveryPointProperties: RecoveryPointProperties,
        ProviderSpecificRecoveryPointDetails: ProviderSpecificRecoveryPointDetails,
        RecoveryServicesProvider: RecoveryServicesProvider,
        RecoveryServicesProviderProperties: RecoveryServicesProviderProperties,
        IdentityInformation: IdentityInformation,
        VersionDetails: VersionDetails,
        ReplicationGroupDetails: ReplicationGroupDetails,
        ReplicationProtectedItem: ReplicationProtectedItem,
        ReplicationProtectedItemProperties: ReplicationProtectedItemProperties,
        ReplicationProviderSpecificSettings: ReplicationProviderSpecificSettings,
        ScriptActionTaskDetails: ScriptActionTaskDetails,
        StorageClassification: StorageClassification,
        StorageClassificationProperties: StorageClassificationProperties,
        SwitchProtectionJobDetails: SwitchProtectionJobDetails,
        TestFailoverJobDetails: TestFailoverJobDetails,
        FailoverReplicationProtectedItemDetails: FailoverReplicationProtectedItemDetails,
        VaultHealthDetails: VaultHealthDetails,
        VaultHealthProperties: VaultHealthProperties,
        ResourceHealthSummary: ResourceHealthSummary,
        HealthErrorSummary: HealthErrorSummary,
        VCenter: VCenter,
        VCenterProperties: VCenterProperties,
        VirtualMachineTaskDetails: VirtualMachineTaskDetails,
        VmmDetails: VmmDetails,
        VmmToAzureNetworkMappingSettings: VmmToAzureNetworkMappingSettings,
        VmmToVmmNetworkMappingSettings: VmmToVmmNetworkMappingSettings,
        VmmVirtualMachineDetails: VmmVirtualMachineDetails,
        OSDetails: OSDetails,
        DiskDetails: DiskDetails,
        VmNicUpdatesTaskDetails: VmNicUpdatesTaskDetails,
        VmwareCbtPolicyDetails: VmwareCbtPolicyDetails,
        VMwareDetails: VMwareDetails,
        ProcessServer: ProcessServer,
        MobilityServiceUpdate: MobilityServiceUpdate,
        MasterTargetServer: MasterTargetServer,
        RetentionVolume: RetentionVolume,
        DataStore: DataStore,
        RunAsAccount: RunAsAccount,
        VMwareV2FabricSpecificDetails: VMwareV2FabricSpecificDetails,
        VMwareVirtualMachineDetails: VMwareVirtualMachineDetails,
        InMageDiskDetails: InMageDiskDetails,
        DiskVolumeDetails: DiskVolumeDetails,
        A2AEventDetails: A2AEventDetails,
        A2APolicyDetails: A2APolicyDetails,
        A2AProtectionContainerMappingDetails: A2AProtectionContainerMappingDetails,
        A2ARecoveryPointDetails: A2ARecoveryPointDetails,
        A2AReplicationDetails: A2AReplicationDetails,
        A2AProtectedDiskDetails: A2AProtectedDiskDetails,
        A2AProtectedManagedDiskDetails: A2AProtectedManagedDiskDetails,
        VMNicDetails: VMNicDetails,
        AzureToAzureVmSyncedConfigDetails: AzureToAzureVmSyncedConfigDetails,
        RoleAssignment: RoleAssignment,
        InputEndpoint: InputEndpoint,
        AsrJobDetails: AsrJobDetails,
        AutomationRunbookTaskDetails: AutomationRunbookTaskDetails,
        AzureFabricSpecificDetails: AzureFabricSpecificDetails,
        AzureToAzureNetworkMappingSettings: AzureToAzureNetworkMappingSettings,
        ConsistencyCheckTaskDetails: ConsistencyCheckTaskDetails,
        InconsistentVmDetails: InconsistentVmDetails,
        ExportJobDetails: ExportJobDetails,
        FabricReplicationGroupTaskDetails: FabricReplicationGroupTaskDetails,
        FailoverJobDetails: FailoverJobDetails,
        HyperVReplicaAzurePolicyDetails: HyperVReplicaAzurePolicyDetails,
        HyperVReplicaAzureReplicationDetails: HyperVReplicaAzureReplicationDetails,
        AzureVmDiskDetails: AzureVmDiskDetails,
        InitialReplicationDetails: InitialReplicationDetails,
        HyperVReplicaBasePolicyDetails: HyperVReplicaBasePolicyDetails,
        HyperVReplicaBaseReplicationDetails: HyperVReplicaBaseReplicationDetails,
        HyperVReplicaBluePolicyDetails: HyperVReplicaBluePolicyDetails,
        HyperVReplicaBlueReplicationDetails: HyperVReplicaBlueReplicationDetails,
        HyperVReplicaPolicyDetails: HyperVReplicaPolicyDetails,
        HyperVReplicaReplicationDetails: HyperVReplicaReplicationDetails,
        HyperVVirtualMachineDetails: HyperVVirtualMachineDetails,
        InlineWorkflowTaskDetails: InlineWorkflowTaskDetails,
        InMageAzureV2PolicyDetails: InMageAzureV2PolicyDetails,
        InMageAzureV2RecoveryPointDetails: InMageAzureV2RecoveryPointDetails,
        InMageAzureV2ReplicationDetails: InMageAzureV2ReplicationDetails,
        InMageAzureV2ProtectedDiskDetails: InMageAzureV2ProtectedDiskDetails,
        InMageBasePolicyDetails: InMageBasePolicyDetails,
        InMagePolicyDetails: InMagePolicyDetails,
        InMageReplicationDetails: InMageReplicationDetails,
        OSDiskDetails: OSDiskDetails,
        InMageProtectedDiskDetails: InMageProtectedDiskDetails,
        InMageAgentDetails: InMageAgentDetails
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ReplicationStorageClassificationMappings. */
    var ReplicationStorageClassificationMappings = /** @class */ (function () {
        /**
         * Create a ReplicationStorageClassificationMappings.
         * @param {SiteRecoveryManagementClientContext} client Reference to the service client.
         */
        function ReplicationStorageClassificationMappings(client) {
            this.client = client;
        }
        ReplicationStorageClassificationMappings.prototype.listByReplicationStorageClassifications = function (fabricName$$1, storageClassificationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                fabricName: fabricName$$1,
                storageClassificationName: storageClassificationName$$1,
                options: options
            }, listByReplicationStorageClassificationsOperationSpec, callback);
        };
        ReplicationStorageClassificationMappings.prototype.get = function (fabricName$$1, storageClassificationName$$1, storageClassificationMappingName$$1, options, callback) {
            return this.client.sendOperationRequest({
                fabricName: fabricName$$1,
                storageClassificationName: storageClassificationName$$1,
                storageClassificationMappingName: storageClassificationMappingName$$1,
                options: options
            }, getOperationSpec$d, callback);
        };
        /**
         * The operation to create a storage classification mapping.
         * @summary Create storage classification mapping.
         * @param fabricName Fabric name.
         * @param storageClassificationName Storage classification name.
         * @param storageClassificationMappingName Storage classification mapping name.
         * @param pairingInput Pairing input.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationStorageClassificationMappingsCreateResponse>
         */
        ReplicationStorageClassificationMappings.prototype.create = function (fabricName$$1, storageClassificationName$$1, storageClassificationMappingName$$1, pairingInput, options) {
            return this.beginCreate(fabricName$$1, storageClassificationName$$1, storageClassificationMappingName$$1, pairingInput, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to delete a storage classification mapping.
         * @summary Delete a storage classification mapping.
         * @param fabricName Fabric name.
         * @param storageClassificationName Storage classification name.
         * @param storageClassificationMappingName Storage classification mapping name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ReplicationStorageClassificationMappings.prototype.deleteMethod = function (fabricName$$1, storageClassificationName$$1, storageClassificationMappingName$$1, options) {
            return this.beginDeleteMethod(fabricName$$1, storageClassificationName$$1, storageClassificationMappingName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ReplicationStorageClassificationMappings.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$b, callback);
        };
        /**
         * The operation to create a storage classification mapping.
         * @summary Create storage classification mapping.
         * @param fabricName Fabric name.
         * @param storageClassificationName Storage classification name.
         * @param storageClassificationMappingName Storage classification mapping name.
         * @param pairingInput Pairing input.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationStorageClassificationMappings.prototype.beginCreate = function (fabricName$$1, storageClassificationName$$1, storageClassificationMappingName$$1, pairingInput, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                storageClassificationName: storageClassificationName$$1,
                storageClassificationMappingName: storageClassificationMappingName$$1,
                pairingInput: pairingInput,
                options: options
            }, beginCreateOperationSpec$5, options);
        };
        /**
         * The operation to delete a storage classification mapping.
         * @summary Delete a storage classification mapping.
         * @param fabricName Fabric name.
         * @param storageClassificationName Storage classification name.
         * @param storageClassificationMappingName Storage classification mapping name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationStorageClassificationMappings.prototype.beginDeleteMethod = function (fabricName$$1, storageClassificationName$$1, storageClassificationMappingName$$1, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                storageClassificationName: storageClassificationName$$1,
                storageClassificationMappingName: storageClassificationMappingName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$6, options);
        };
        ReplicationStorageClassificationMappings.prototype.listByReplicationStorageClassificationsNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByReplicationStorageClassificationsNextOperationSpec, callback);
        };
        ReplicationStorageClassificationMappings.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$b, callback);
        };
        return ReplicationStorageClassificationMappings;
    }());
    // Operation Specifications
    var serializer$f = new msRest.Serializer(Mappers$f);
    var listByReplicationStorageClassificationsOperationSpec = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationStorageClassifications/{storageClassificationName}/replicationStorageClassificationMappings",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            storageClassificationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageClassificationMappingCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };
    var getOperationSpec$d = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationStorageClassifications/{storageClassificationName}/replicationStorageClassificationMappings/{storageClassificationMappingName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            storageClassificationName,
            storageClassificationMappingName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageClassificationMapping
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };
    var listOperationSpec$b = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationStorageClassificationMappings",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageClassificationMappingCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };
    var beginCreateOperationSpec$5 = {
        httpMethod: "PUT",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationStorageClassifications/{storageClassificationName}/replicationStorageClassificationMappings/{storageClassificationMappingName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            storageClassificationName,
            storageClassificationMappingName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "pairingInput",
            mapper: __assign({}, StorageClassificationMappingInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: StorageClassificationMapping
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };
    var beginDeleteMethodOperationSpec$6 = {
        httpMethod: "DELETE",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationStorageClassifications/{storageClassificationName}/replicationStorageClassificationMappings/{storageClassificationMappingName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            storageClassificationName,
            storageClassificationMappingName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };
    var listByReplicationStorageClassificationsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageClassificationMappingCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };
    var listNextOperationSpec$b = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageClassificationMappingCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$g = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        VCenterCollection: VCenterCollection,
        VCenter: VCenter,
        Resource: Resource,
        BaseResource: BaseResource,
        VCenterProperties: VCenterProperties,
        HealthError: HealthError,
        InnerHealthError: InnerHealthError,
        CloudError: CloudError,
        AddVCenterRequest: AddVCenterRequest,
        AddVCenterRequestProperties: AddVCenterRequestProperties,
        UpdateVCenterRequest: UpdateVCenterRequest,
        UpdateVCenterRequestProperties: UpdateVCenterRequestProperties,
        Alert: Alert,
        AlertProperties: AlertProperties,
        Event: Event,
        EventProperties: EventProperties,
        EventProviderSpecificDetails: EventProviderSpecificDetails,
        EventSpecificDetails: EventSpecificDetails,
        Fabric: Fabric,
        FabricProperties: FabricProperties,
        EncryptionDetails: EncryptionDetails,
        FabricSpecificDetails: FabricSpecificDetails,
        HyperVReplica2012EventDetails: HyperVReplica2012EventDetails,
        HyperVReplica2012R2EventDetails: HyperVReplica2012R2EventDetails,
        HyperVReplicaAzureEventDetails: HyperVReplicaAzureEventDetails,
        HyperVReplicaBaseEventDetails: HyperVReplicaBaseEventDetails,
        HyperVSiteDetails: HyperVSiteDetails,
        InMageAzureV2EventDetails: InMageAzureV2EventDetails,
        Job: Job,
        JobProperties: JobProperties,
        ASRTask: ASRTask,
        TaskTypeDetails: TaskTypeDetails,
        GroupTaskDetails: GroupTaskDetails,
        JobErrorDetails: JobErrorDetails,
        ServiceError: ServiceError,
        ProviderError: ProviderError,
        JobDetails: JobDetails,
        JobStatusEventDetails: JobStatusEventDetails,
        JobTaskDetails: JobTaskDetails,
        JobEntity: JobEntity,
        LogicalNetwork: LogicalNetwork,
        LogicalNetworkProperties: LogicalNetworkProperties,
        ManualActionTaskDetails: ManualActionTaskDetails,
        Network: Network,
        NetworkProperties: NetworkProperties,
        Subnet: Subnet,
        NetworkMapping: NetworkMapping,
        NetworkMappingProperties: NetworkMappingProperties,
        NetworkMappingFabricSpecificSettings: NetworkMappingFabricSpecificSettings,
        Policy: Policy,
        PolicyProperties: PolicyProperties,
        PolicyProviderSpecificDetails: PolicyProviderSpecificDetails,
        ProtectableItem: ProtectableItem,
        ProtectableItemProperties: ProtectableItemProperties,
        ConfigurationSettings: ConfigurationSettings,
        ProtectionContainer: ProtectionContainer,
        ProtectionContainerProperties: ProtectionContainerProperties,
        ProtectionContainerFabricSpecificDetails: ProtectionContainerFabricSpecificDetails,
        ProtectionContainerMapping: ProtectionContainerMapping,
        ProtectionContainerMappingProperties: ProtectionContainerMappingProperties,
        ProtectionContainerMappingProviderSpecificDetails: ProtectionContainerMappingProviderSpecificDetails,
        RcmAzureMigrationPolicyDetails: RcmAzureMigrationPolicyDetails,
        RecoveryPlan: RecoveryPlan,
        RecoveryPlanProperties: RecoveryPlanProperties,
        CurrentScenarioDetails: CurrentScenarioDetails,
        RecoveryPlanGroup: RecoveryPlanGroup,
        RecoveryPlanProtectedItem: RecoveryPlanProtectedItem,
        RecoveryPlanAction: RecoveryPlanAction,
        RecoveryPlanActionDetails: RecoveryPlanActionDetails,
        RecoveryPlanAutomationRunbookActionDetails: RecoveryPlanAutomationRunbookActionDetails,
        RecoveryPlanGroupTaskDetails: RecoveryPlanGroupTaskDetails,
        RecoveryPlanManualActionDetails: RecoveryPlanManualActionDetails,
        RecoveryPlanScriptActionDetails: RecoveryPlanScriptActionDetails,
        RecoveryPlanShutdownGroupTaskDetails: RecoveryPlanShutdownGroupTaskDetails,
        RecoveryPoint: RecoveryPoint,
        RecoveryPointProperties: RecoveryPointProperties,
        ProviderSpecificRecoveryPointDetails: ProviderSpecificRecoveryPointDetails,
        RecoveryServicesProvider: RecoveryServicesProvider,
        RecoveryServicesProviderProperties: RecoveryServicesProviderProperties,
        IdentityInformation: IdentityInformation,
        VersionDetails: VersionDetails,
        ReplicationGroupDetails: ReplicationGroupDetails,
        ReplicationProtectedItem: ReplicationProtectedItem,
        ReplicationProtectedItemProperties: ReplicationProtectedItemProperties,
        ReplicationProviderSpecificSettings: ReplicationProviderSpecificSettings,
        ScriptActionTaskDetails: ScriptActionTaskDetails,
        StorageClassification: StorageClassification,
        StorageClassificationProperties: StorageClassificationProperties,
        StorageClassificationMapping: StorageClassificationMapping,
        StorageClassificationMappingProperties: StorageClassificationMappingProperties,
        SwitchProtectionJobDetails: SwitchProtectionJobDetails,
        TestFailoverJobDetails: TestFailoverJobDetails,
        FailoverReplicationProtectedItemDetails: FailoverReplicationProtectedItemDetails,
        VaultHealthDetails: VaultHealthDetails,
        VaultHealthProperties: VaultHealthProperties,
        ResourceHealthSummary: ResourceHealthSummary,
        HealthErrorSummary: HealthErrorSummary,
        VirtualMachineTaskDetails: VirtualMachineTaskDetails,
        VmmDetails: VmmDetails,
        VmmToAzureNetworkMappingSettings: VmmToAzureNetworkMappingSettings,
        VmmToVmmNetworkMappingSettings: VmmToVmmNetworkMappingSettings,
        VmmVirtualMachineDetails: VmmVirtualMachineDetails,
        OSDetails: OSDetails,
        DiskDetails: DiskDetails,
        VmNicUpdatesTaskDetails: VmNicUpdatesTaskDetails,
        VmwareCbtPolicyDetails: VmwareCbtPolicyDetails,
        VMwareDetails: VMwareDetails,
        ProcessServer: ProcessServer,
        MobilityServiceUpdate: MobilityServiceUpdate,
        MasterTargetServer: MasterTargetServer,
        RetentionVolume: RetentionVolume,
        DataStore: DataStore,
        RunAsAccount: RunAsAccount,
        VMwareV2FabricSpecificDetails: VMwareV2FabricSpecificDetails,
        VMwareVirtualMachineDetails: VMwareVirtualMachineDetails,
        InMageDiskDetails: InMageDiskDetails,
        DiskVolumeDetails: DiskVolumeDetails,
        A2AEventDetails: A2AEventDetails,
        A2APolicyDetails: A2APolicyDetails,
        A2AProtectionContainerMappingDetails: A2AProtectionContainerMappingDetails,
        A2ARecoveryPointDetails: A2ARecoveryPointDetails,
        A2AReplicationDetails: A2AReplicationDetails,
        A2AProtectedDiskDetails: A2AProtectedDiskDetails,
        A2AProtectedManagedDiskDetails: A2AProtectedManagedDiskDetails,
        VMNicDetails: VMNicDetails,
        AzureToAzureVmSyncedConfigDetails: AzureToAzureVmSyncedConfigDetails,
        RoleAssignment: RoleAssignment,
        InputEndpoint: InputEndpoint,
        AsrJobDetails: AsrJobDetails,
        AutomationRunbookTaskDetails: AutomationRunbookTaskDetails,
        AzureFabricSpecificDetails: AzureFabricSpecificDetails,
        AzureToAzureNetworkMappingSettings: AzureToAzureNetworkMappingSettings,
        ConsistencyCheckTaskDetails: ConsistencyCheckTaskDetails,
        InconsistentVmDetails: InconsistentVmDetails,
        ExportJobDetails: ExportJobDetails,
        FabricReplicationGroupTaskDetails: FabricReplicationGroupTaskDetails,
        FailoverJobDetails: FailoverJobDetails,
        HyperVReplicaAzurePolicyDetails: HyperVReplicaAzurePolicyDetails,
        HyperVReplicaAzureReplicationDetails: HyperVReplicaAzureReplicationDetails,
        AzureVmDiskDetails: AzureVmDiskDetails,
        InitialReplicationDetails: InitialReplicationDetails,
        HyperVReplicaBasePolicyDetails: HyperVReplicaBasePolicyDetails,
        HyperVReplicaBaseReplicationDetails: HyperVReplicaBaseReplicationDetails,
        HyperVReplicaBluePolicyDetails: HyperVReplicaBluePolicyDetails,
        HyperVReplicaBlueReplicationDetails: HyperVReplicaBlueReplicationDetails,
        HyperVReplicaPolicyDetails: HyperVReplicaPolicyDetails,
        HyperVReplicaReplicationDetails: HyperVReplicaReplicationDetails,
        HyperVVirtualMachineDetails: HyperVVirtualMachineDetails,
        InlineWorkflowTaskDetails: InlineWorkflowTaskDetails,
        InMageAzureV2PolicyDetails: InMageAzureV2PolicyDetails,
        InMageAzureV2RecoveryPointDetails: InMageAzureV2RecoveryPointDetails,
        InMageAzureV2ReplicationDetails: InMageAzureV2ReplicationDetails,
        InMageAzureV2ProtectedDiskDetails: InMageAzureV2ProtectedDiskDetails,
        InMageBasePolicyDetails: InMageBasePolicyDetails,
        InMagePolicyDetails: InMagePolicyDetails,
        InMageReplicationDetails: InMageReplicationDetails,
        OSDiskDetails: OSDiskDetails,
        InMageProtectedDiskDetails: InMageProtectedDiskDetails,
        InMageAgentDetails: InMageAgentDetails
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ReplicationvCenters. */
    var ReplicationvCenters = /** @class */ (function () {
        /**
         * Create a ReplicationvCenters.
         * @param {SiteRecoveryManagementClientContext} client Reference to the service client.
         */
        function ReplicationvCenters(client) {
            this.client = client;
        }
        ReplicationvCenters.prototype.listByReplicationFabrics = function (fabricName$$1, options, callback) {
            return this.client.sendOperationRequest({
                fabricName: fabricName$$1,
                options: options
            }, listByReplicationFabricsOperationSpec$5, callback);
        };
        ReplicationvCenters.prototype.get = function (fabricName$$1, vCenterName$$1, options, callback) {
            return this.client.sendOperationRequest({
                fabricName: fabricName$$1,
                vCenterName: vCenterName$$1,
                options: options
            }, getOperationSpec$e, callback);
        };
        /**
         * The operation to create a vCenter object..
         * @summary Add vCenter.
         * @param fabricName Fabric name.
         * @param vCenterName vCenter name.
         * @param addVCenterRequest The input to the add vCenter operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationvCentersCreateResponse>
         */
        ReplicationvCenters.prototype.create = function (fabricName$$1, vCenterName$$1, addVCenterRequest, options) {
            return this.beginCreate(fabricName$$1, vCenterName$$1, addVCenterRequest, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to remove(unregister) a registered vCenter server from the vault.
         * @summary Remove vCenter operation.
         * @param fabricName Fabric name.
         * @param vCenterName vCenter name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ReplicationvCenters.prototype.deleteMethod = function (fabricName$$1, vCenterName$$1, options) {
            return this.beginDeleteMethod(fabricName$$1, vCenterName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to update a registered vCenter.
         * @summary Update vCenter operation.
         * @param fabricName Fabric name.
         * @param vCenterName vCeneter name
         * @param updateVCenterRequest The input to the update vCenter operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationvCentersUpdateResponse>
         */
        ReplicationvCenters.prototype.update = function (fabricName$$1, vCenterName$$1, updateVCenterRequest, options) {
            return this.beginUpdate(fabricName$$1, vCenterName$$1, updateVCenterRequest, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ReplicationvCenters.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$c, callback);
        };
        /**
         * The operation to create a vCenter object..
         * @summary Add vCenter.
         * @param fabricName Fabric name.
         * @param vCenterName vCenter name.
         * @param addVCenterRequest The input to the add vCenter operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationvCenters.prototype.beginCreate = function (fabricName$$1, vCenterName$$1, addVCenterRequest, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                vCenterName: vCenterName$$1,
                addVCenterRequest: addVCenterRequest,
                options: options
            }, beginCreateOperationSpec$6, options);
        };
        /**
         * The operation to remove(unregister) a registered vCenter server from the vault.
         * @summary Remove vCenter operation.
         * @param fabricName Fabric name.
         * @param vCenterName vCenter name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationvCenters.prototype.beginDeleteMethod = function (fabricName$$1, vCenterName$$1, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                vCenterName: vCenterName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$7, options);
        };
        /**
         * The operation to update a registered vCenter.
         * @summary Update vCenter operation.
         * @param fabricName Fabric name.
         * @param vCenterName vCeneter name
         * @param updateVCenterRequest The input to the update vCenter operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationvCenters.prototype.beginUpdate = function (fabricName$$1, vCenterName$$1, updateVCenterRequest, options) {
            return this.client.sendLRORequest({
                fabricName: fabricName$$1,
                vCenterName: vCenterName$$1,
                updateVCenterRequest: updateVCenterRequest,
                options: options
            }, beginUpdateOperationSpec$3, options);
        };
        ReplicationvCenters.prototype.listByReplicationFabricsNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByReplicationFabricsNextOperationSpec$5, callback);
        };
        ReplicationvCenters.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$c, callback);
        };
        return ReplicationvCenters;
    }());
    // Operation Specifications
    var serializer$g = new msRest.Serializer(Mappers$g);
    var listByReplicationFabricsOperationSpec$5 = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationvCenters",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VCenterCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var getOperationSpec$e = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationvCenters/{vCenterName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            vCenterName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VCenter
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var listOperationSpec$c = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationvCenters",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VCenterCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var beginCreateOperationSpec$6 = {
        httpMethod: "PUT",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationvCenters/{vCenterName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            vCenterName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "addVCenterRequest",
            mapper: __assign({}, AddVCenterRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VCenter
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var beginDeleteMethodOperationSpec$7 = {
        httpMethod: "DELETE",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationvCenters/{vCenterName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            vCenterName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var beginUpdateOperationSpec$3 = {
        httpMethod: "PATCH",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationvCenters/{vCenterName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            fabricName,
            vCenterName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "updateVCenterRequest",
            mapper: __assign({}, UpdateVCenterRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VCenter
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var listByReplicationFabricsNextOperationSpec$5 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VCenterCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var listNextOperationSpec$c = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VCenterCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$h = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        JobCollection: JobCollection,
        Job: Job,
        Resource: Resource,
        BaseResource: BaseResource,
        JobProperties: JobProperties,
        ASRTask: ASRTask,
        TaskTypeDetails: TaskTypeDetails,
        GroupTaskDetails: GroupTaskDetails,
        JobErrorDetails: JobErrorDetails,
        ServiceError: ServiceError,
        ProviderError: ProviderError,
        JobDetails: JobDetails,
        CloudError: CloudError,
        ResumeJobParams: ResumeJobParams,
        ResumeJobParamsProperties: ResumeJobParamsProperties,
        JobQueryParameter: JobQueryParameter,
        Alert: Alert,
        AlertProperties: AlertProperties,
        AsrJobDetails: AsrJobDetails,
        AutomationRunbookTaskDetails: AutomationRunbookTaskDetails,
        ConsistencyCheckTaskDetails: ConsistencyCheckTaskDetails,
        InconsistentVmDetails: InconsistentVmDetails,
        Event: Event,
        EventProperties: EventProperties,
        EventProviderSpecificDetails: EventProviderSpecificDetails,
        EventSpecificDetails: EventSpecificDetails,
        HealthError: HealthError,
        InnerHealthError: InnerHealthError,
        ExportJobDetails: ExportJobDetails,
        Fabric: Fabric,
        FabricProperties: FabricProperties,
        EncryptionDetails: EncryptionDetails,
        FabricSpecificDetails: FabricSpecificDetails,
        FabricReplicationGroupTaskDetails: FabricReplicationGroupTaskDetails,
        JobEntity: JobEntity,
        FailoverJobDetails: FailoverJobDetails,
        FailoverReplicationProtectedItemDetails: FailoverReplicationProtectedItemDetails,
        HyperVReplica2012EventDetails: HyperVReplica2012EventDetails,
        HyperVReplica2012R2EventDetails: HyperVReplica2012R2EventDetails,
        HyperVReplicaAzureEventDetails: HyperVReplicaAzureEventDetails,
        HyperVReplicaBaseEventDetails: HyperVReplicaBaseEventDetails,
        HyperVSiteDetails: HyperVSiteDetails,
        InlineWorkflowTaskDetails: InlineWorkflowTaskDetails,
        InMageAzureV2EventDetails: InMageAzureV2EventDetails,
        JobStatusEventDetails: JobStatusEventDetails,
        JobTaskDetails: JobTaskDetails,
        LogicalNetwork: LogicalNetwork,
        LogicalNetworkProperties: LogicalNetworkProperties,
        ManualActionTaskDetails: ManualActionTaskDetails,
        Network: Network,
        NetworkProperties: NetworkProperties,
        Subnet: Subnet,
        NetworkMapping: NetworkMapping,
        NetworkMappingProperties: NetworkMappingProperties,
        NetworkMappingFabricSpecificSettings: NetworkMappingFabricSpecificSettings,
        Policy: Policy,
        PolicyProperties: PolicyProperties,
        PolicyProviderSpecificDetails: PolicyProviderSpecificDetails,
        ProtectableItem: ProtectableItem,
        ProtectableItemProperties: ProtectableItemProperties,
        ConfigurationSettings: ConfigurationSettings,
        ProtectionContainer: ProtectionContainer,
        ProtectionContainerProperties: ProtectionContainerProperties,
        ProtectionContainerFabricSpecificDetails: ProtectionContainerFabricSpecificDetails,
        ProtectionContainerMapping: ProtectionContainerMapping,
        ProtectionContainerMappingProperties: ProtectionContainerMappingProperties,
        ProtectionContainerMappingProviderSpecificDetails: ProtectionContainerMappingProviderSpecificDetails,
        RcmAzureMigrationPolicyDetails: RcmAzureMigrationPolicyDetails,
        RecoveryPlan: RecoveryPlan,
        RecoveryPlanProperties: RecoveryPlanProperties,
        CurrentScenarioDetails: CurrentScenarioDetails,
        RecoveryPlanGroup: RecoveryPlanGroup,
        RecoveryPlanProtectedItem: RecoveryPlanProtectedItem,
        RecoveryPlanAction: RecoveryPlanAction,
        RecoveryPlanActionDetails: RecoveryPlanActionDetails,
        RecoveryPlanAutomationRunbookActionDetails: RecoveryPlanAutomationRunbookActionDetails,
        RecoveryPlanGroupTaskDetails: RecoveryPlanGroupTaskDetails,
        RecoveryPlanManualActionDetails: RecoveryPlanManualActionDetails,
        RecoveryPlanScriptActionDetails: RecoveryPlanScriptActionDetails,
        RecoveryPlanShutdownGroupTaskDetails: RecoveryPlanShutdownGroupTaskDetails,
        RecoveryPoint: RecoveryPoint,
        RecoveryPointProperties: RecoveryPointProperties,
        ProviderSpecificRecoveryPointDetails: ProviderSpecificRecoveryPointDetails,
        RecoveryServicesProvider: RecoveryServicesProvider,
        RecoveryServicesProviderProperties: RecoveryServicesProviderProperties,
        IdentityInformation: IdentityInformation,
        VersionDetails: VersionDetails,
        ReplicationGroupDetails: ReplicationGroupDetails,
        ReplicationProtectedItem: ReplicationProtectedItem,
        ReplicationProtectedItemProperties: ReplicationProtectedItemProperties,
        ReplicationProviderSpecificSettings: ReplicationProviderSpecificSettings,
        ScriptActionTaskDetails: ScriptActionTaskDetails,
        StorageClassification: StorageClassification,
        StorageClassificationProperties: StorageClassificationProperties,
        StorageClassificationMapping: StorageClassificationMapping,
        StorageClassificationMappingProperties: StorageClassificationMappingProperties,
        SwitchProtectionJobDetails: SwitchProtectionJobDetails,
        TestFailoverJobDetails: TestFailoverJobDetails,
        VaultHealthDetails: VaultHealthDetails,
        VaultHealthProperties: VaultHealthProperties,
        ResourceHealthSummary: ResourceHealthSummary,
        HealthErrorSummary: HealthErrorSummary,
        VCenter: VCenter,
        VCenterProperties: VCenterProperties,
        VirtualMachineTaskDetails: VirtualMachineTaskDetails,
        VmmDetails: VmmDetails,
        VmmToAzureNetworkMappingSettings: VmmToAzureNetworkMappingSettings,
        VmmToVmmNetworkMappingSettings: VmmToVmmNetworkMappingSettings,
        VmmVirtualMachineDetails: VmmVirtualMachineDetails,
        OSDetails: OSDetails,
        DiskDetails: DiskDetails,
        VmNicUpdatesTaskDetails: VmNicUpdatesTaskDetails,
        VmwareCbtPolicyDetails: VmwareCbtPolicyDetails,
        VMwareDetails: VMwareDetails,
        ProcessServer: ProcessServer,
        MobilityServiceUpdate: MobilityServiceUpdate,
        MasterTargetServer: MasterTargetServer,
        RetentionVolume: RetentionVolume,
        DataStore: DataStore,
        RunAsAccount: RunAsAccount,
        VMwareV2FabricSpecificDetails: VMwareV2FabricSpecificDetails,
        VMwareVirtualMachineDetails: VMwareVirtualMachineDetails,
        InMageDiskDetails: InMageDiskDetails,
        DiskVolumeDetails: DiskVolumeDetails,
        A2AEventDetails: A2AEventDetails,
        A2APolicyDetails: A2APolicyDetails,
        A2AProtectionContainerMappingDetails: A2AProtectionContainerMappingDetails,
        A2ARecoveryPointDetails: A2ARecoveryPointDetails,
        A2AReplicationDetails: A2AReplicationDetails,
        A2AProtectedDiskDetails: A2AProtectedDiskDetails,
        A2AProtectedManagedDiskDetails: A2AProtectedManagedDiskDetails,
        VMNicDetails: VMNicDetails,
        AzureToAzureVmSyncedConfigDetails: AzureToAzureVmSyncedConfigDetails,
        RoleAssignment: RoleAssignment,
        InputEndpoint: InputEndpoint,
        AzureFabricSpecificDetails: AzureFabricSpecificDetails,
        AzureToAzureNetworkMappingSettings: AzureToAzureNetworkMappingSettings,
        HyperVReplicaAzurePolicyDetails: HyperVReplicaAzurePolicyDetails,
        HyperVReplicaAzureReplicationDetails: HyperVReplicaAzureReplicationDetails,
        AzureVmDiskDetails: AzureVmDiskDetails,
        InitialReplicationDetails: InitialReplicationDetails,
        HyperVReplicaBasePolicyDetails: HyperVReplicaBasePolicyDetails,
        HyperVReplicaBaseReplicationDetails: HyperVReplicaBaseReplicationDetails,
        HyperVReplicaBluePolicyDetails: HyperVReplicaBluePolicyDetails,
        HyperVReplicaBlueReplicationDetails: HyperVReplicaBlueReplicationDetails,
        HyperVReplicaPolicyDetails: HyperVReplicaPolicyDetails,
        HyperVReplicaReplicationDetails: HyperVReplicaReplicationDetails,
        HyperVVirtualMachineDetails: HyperVVirtualMachineDetails,
        InMageAzureV2PolicyDetails: InMageAzureV2PolicyDetails,
        InMageAzureV2RecoveryPointDetails: InMageAzureV2RecoveryPointDetails,
        InMageAzureV2ReplicationDetails: InMageAzureV2ReplicationDetails,
        InMageAzureV2ProtectedDiskDetails: InMageAzureV2ProtectedDiskDetails,
        InMageBasePolicyDetails: InMageBasePolicyDetails,
        InMagePolicyDetails: InMagePolicyDetails,
        InMageReplicationDetails: InMageReplicationDetails,
        OSDiskDetails: OSDiskDetails,
        InMageProtectedDiskDetails: InMageProtectedDiskDetails,
        InMageAgentDetails: InMageAgentDetails
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ReplicationJobs. */
    var ReplicationJobs = /** @class */ (function () {
        /**
         * Create a ReplicationJobs.
         * @param {SiteRecoveryManagementClientContext} client Reference to the service client.
         */
        function ReplicationJobs(client) {
            this.client = client;
        }
        ReplicationJobs.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$d, callback);
        };
        ReplicationJobs.prototype.get = function (jobName$$1, options, callback) {
            return this.client.sendOperationRequest({
                jobName: jobName$$1,
                options: options
            }, getOperationSpec$f, callback);
        };
        /**
         * The operation to cancel an Azure Site Recovery job.
         * @summary Cancels the specified job.
         * @param jobName Job indentifier.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationJobsCancelResponse>
         */
        ReplicationJobs.prototype.cancel = function (jobName$$1, options) {
            return this.beginCancel(jobName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to restart an Azure Site Recovery job.
         * @summary Restarts the specified job.
         * @param jobName Job identifier.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationJobsRestartResponse>
         */
        ReplicationJobs.prototype.restart = function (jobName$$1, options) {
            return this.beginRestart(jobName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to resume an Azure Site Recovery job
         * @summary Resumes the specified job.
         * @param jobName Job identifier.
         * @param resumeJobParams Resume rob comments.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationJobsResumeResponse>
         */
        ReplicationJobs.prototype.resume = function (jobName$$1, resumeJobParams, options) {
            return this.beginResume(jobName$$1, resumeJobParams, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to export the details of the Azure Site Recovery jobs of the vault.
         * @summary Exports the details of the Azure Site Recovery jobs of the vault.
         * @param jobQueryParameter job query filter.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationJobsExportMethodResponse>
         */
        ReplicationJobs.prototype.exportMethod = function (jobQueryParameter, options) {
            return this.beginExportMethod(jobQueryParameter, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to cancel an Azure Site Recovery job.
         * @summary Cancels the specified job.
         * @param jobName Job indentifier.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationJobs.prototype.beginCancel = function (jobName$$1, options) {
            return this.client.sendLRORequest({
                jobName: jobName$$1,
                options: options
            }, beginCancelOperationSpec, options);
        };
        /**
         * The operation to restart an Azure Site Recovery job.
         * @summary Restarts the specified job.
         * @param jobName Job identifier.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationJobs.prototype.beginRestart = function (jobName$$1, options) {
            return this.client.sendLRORequest({
                jobName: jobName$$1,
                options: options
            }, beginRestartOperationSpec, options);
        };
        /**
         * The operation to resume an Azure Site Recovery job
         * @summary Resumes the specified job.
         * @param jobName Job identifier.
         * @param resumeJobParams Resume rob comments.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationJobs.prototype.beginResume = function (jobName$$1, resumeJobParams, options) {
            return this.client.sendLRORequest({
                jobName: jobName$$1,
                resumeJobParams: resumeJobParams,
                options: options
            }, beginResumeOperationSpec, options);
        };
        /**
         * The operation to export the details of the Azure Site Recovery jobs of the vault.
         * @summary Exports the details of the Azure Site Recovery jobs of the vault.
         * @param jobQueryParameter job query filter.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationJobs.prototype.beginExportMethod = function (jobQueryParameter, options) {
            return this.client.sendLRORequest({
                jobQueryParameter: jobQueryParameter,
                options: options
            }, beginExportMethodOperationSpec, options);
        };
        ReplicationJobs.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$d, callback);
        };
        return ReplicationJobs;
    }());
    // Operation Specifications
    var serializer$h = new msRest.Serializer(Mappers$h);
    var listOperationSpec$d = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationJobs",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var getOperationSpec$f = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationJobs/{jobName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            jobName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Job
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var beginCancelOperationSpec = {
        httpMethod: "POST",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationJobs/{jobName}/cancel",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            jobName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Job
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var beginRestartOperationSpec = {
        httpMethod: "POST",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationJobs/{jobName}/restart",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            jobName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Job
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var beginResumeOperationSpec = {
        httpMethod: "POST",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationJobs/{jobName}/resume",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            jobName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "resumeJobParams",
            mapper: __assign({}, ResumeJobParams, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Job
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var beginExportMethodOperationSpec = {
        httpMethod: "POST",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationJobs/export",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "jobQueryParameter",
            mapper: __assign({}, JobQueryParameter, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Job
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var listNextOperationSpec$d = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$i = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        PolicyCollection: PolicyCollection,
        Policy: Policy,
        Resource: Resource,
        BaseResource: BaseResource,
        PolicyProperties: PolicyProperties,
        PolicyProviderSpecificDetails: PolicyProviderSpecificDetails,
        CloudError: CloudError,
        CreatePolicyInput: CreatePolicyInput,
        CreatePolicyInputProperties: CreatePolicyInputProperties,
        PolicyProviderSpecificInput: PolicyProviderSpecificInput,
        UpdatePolicyInput: UpdatePolicyInput,
        UpdatePolicyInputProperties: UpdatePolicyInputProperties,
        A2APolicyCreationInput: A2APolicyCreationInput,
        A2APolicyDetails: A2APolicyDetails,
        Alert: Alert,
        AlertProperties: AlertProperties,
        Event: Event,
        EventProperties: EventProperties,
        EventProviderSpecificDetails: EventProviderSpecificDetails,
        EventSpecificDetails: EventSpecificDetails,
        HealthError: HealthError,
        InnerHealthError: InnerHealthError,
        Fabric: Fabric,
        FabricProperties: FabricProperties,
        EncryptionDetails: EncryptionDetails,
        FabricSpecificDetails: FabricSpecificDetails,
        HyperVReplica2012EventDetails: HyperVReplica2012EventDetails,
        HyperVReplica2012R2EventDetails: HyperVReplica2012R2EventDetails,
        HyperVReplicaAzureEventDetails: HyperVReplicaAzureEventDetails,
        HyperVReplicaAzurePolicyDetails: HyperVReplicaAzurePolicyDetails,
        HyperVReplicaAzurePolicyInput: HyperVReplicaAzurePolicyInput,
        HyperVReplicaBaseEventDetails: HyperVReplicaBaseEventDetails,
        HyperVReplicaBasePolicyDetails: HyperVReplicaBasePolicyDetails,
        HyperVReplicaBluePolicyDetails: HyperVReplicaBluePolicyDetails,
        HyperVReplicaBluePolicyInput: HyperVReplicaBluePolicyInput,
        HyperVReplicaPolicyDetails: HyperVReplicaPolicyDetails,
        HyperVReplicaPolicyInput: HyperVReplicaPolicyInput,
        HyperVSiteDetails: HyperVSiteDetails,
        InMageAzureV2EventDetails: InMageAzureV2EventDetails,
        InMageAzureV2PolicyDetails: InMageAzureV2PolicyDetails,
        InMageAzureV2PolicyInput: InMageAzureV2PolicyInput,
        InMageBasePolicyDetails: InMageBasePolicyDetails,
        InMagePolicyDetails: InMagePolicyDetails,
        InMagePolicyInput: InMagePolicyInput,
        Job: Job,
        JobProperties: JobProperties,
        ASRTask: ASRTask,
        TaskTypeDetails: TaskTypeDetails,
        GroupTaskDetails: GroupTaskDetails,
        JobErrorDetails: JobErrorDetails,
        ServiceError: ServiceError,
        ProviderError: ProviderError,
        JobDetails: JobDetails,
        JobStatusEventDetails: JobStatusEventDetails,
        JobTaskDetails: JobTaskDetails,
        JobEntity: JobEntity,
        LogicalNetwork: LogicalNetwork,
        LogicalNetworkProperties: LogicalNetworkProperties,
        ManualActionTaskDetails: ManualActionTaskDetails,
        Network: Network,
        NetworkProperties: NetworkProperties,
        Subnet: Subnet,
        NetworkMapping: NetworkMapping,
        NetworkMappingProperties: NetworkMappingProperties,
        NetworkMappingFabricSpecificSettings: NetworkMappingFabricSpecificSettings,
        ProtectableItem: ProtectableItem,
        ProtectableItemProperties: ProtectableItemProperties,
        ConfigurationSettings: ConfigurationSettings,
        ProtectionContainer: ProtectionContainer,
        ProtectionContainerProperties: ProtectionContainerProperties,
        ProtectionContainerFabricSpecificDetails: ProtectionContainerFabricSpecificDetails,
        ProtectionContainerMapping: ProtectionContainerMapping,
        ProtectionContainerMappingProperties: ProtectionContainerMappingProperties,
        ProtectionContainerMappingProviderSpecificDetails: ProtectionContainerMappingProviderSpecificDetails,
        RcmAzureMigrationPolicyDetails: RcmAzureMigrationPolicyDetails,
        RecoveryPlan: RecoveryPlan,
        RecoveryPlanProperties: RecoveryPlanProperties,
        CurrentScenarioDetails: CurrentScenarioDetails,
        RecoveryPlanGroup: RecoveryPlanGroup,
        RecoveryPlanProtectedItem: RecoveryPlanProtectedItem,
        RecoveryPlanAction: RecoveryPlanAction,
        RecoveryPlanActionDetails: RecoveryPlanActionDetails,
        RecoveryPlanAutomationRunbookActionDetails: RecoveryPlanAutomationRunbookActionDetails,
        RecoveryPlanGroupTaskDetails: RecoveryPlanGroupTaskDetails,
        RecoveryPlanManualActionDetails: RecoveryPlanManualActionDetails,
        RecoveryPlanScriptActionDetails: RecoveryPlanScriptActionDetails,
        RecoveryPlanShutdownGroupTaskDetails: RecoveryPlanShutdownGroupTaskDetails,
        RecoveryPoint: RecoveryPoint,
        RecoveryPointProperties: RecoveryPointProperties,
        ProviderSpecificRecoveryPointDetails: ProviderSpecificRecoveryPointDetails,
        RecoveryServicesProvider: RecoveryServicesProvider,
        RecoveryServicesProviderProperties: RecoveryServicesProviderProperties,
        IdentityInformation: IdentityInformation,
        VersionDetails: VersionDetails,
        ReplicationGroupDetails: ReplicationGroupDetails,
        ReplicationProtectedItem: ReplicationProtectedItem,
        ReplicationProtectedItemProperties: ReplicationProtectedItemProperties,
        ReplicationProviderSpecificSettings: ReplicationProviderSpecificSettings,
        ScriptActionTaskDetails: ScriptActionTaskDetails,
        StorageClassification: StorageClassification,
        StorageClassificationProperties: StorageClassificationProperties,
        StorageClassificationMapping: StorageClassificationMapping,
        StorageClassificationMappingProperties: StorageClassificationMappingProperties,
        SwitchProtectionJobDetails: SwitchProtectionJobDetails,
        TestFailoverJobDetails: TestFailoverJobDetails,
        FailoverReplicationProtectedItemDetails: FailoverReplicationProtectedItemDetails,
        VaultHealthDetails: VaultHealthDetails,
        VaultHealthProperties: VaultHealthProperties,
        ResourceHealthSummary: ResourceHealthSummary,
        HealthErrorSummary: HealthErrorSummary,
        VCenter: VCenter,
        VCenterProperties: VCenterProperties,
        VirtualMachineTaskDetails: VirtualMachineTaskDetails,
        VmmDetails: VmmDetails,
        VmmToAzureNetworkMappingSettings: VmmToAzureNetworkMappingSettings,
        VmmToVmmNetworkMappingSettings: VmmToVmmNetworkMappingSettings,
        VmmVirtualMachineDetails: VmmVirtualMachineDetails,
        OSDetails: OSDetails,
        DiskDetails: DiskDetails,
        VmNicUpdatesTaskDetails: VmNicUpdatesTaskDetails,
        VMwareCbtPolicyCreationInput: VMwareCbtPolicyCreationInput,
        VmwareCbtPolicyDetails: VmwareCbtPolicyDetails,
        VMwareDetails: VMwareDetails,
        ProcessServer: ProcessServer,
        MobilityServiceUpdate: MobilityServiceUpdate,
        MasterTargetServer: MasterTargetServer,
        RetentionVolume: RetentionVolume,
        DataStore: DataStore,
        RunAsAccount: RunAsAccount,
        VMwareV2FabricSpecificDetails: VMwareV2FabricSpecificDetails,
        VMwareVirtualMachineDetails: VMwareVirtualMachineDetails,
        InMageDiskDetails: InMageDiskDetails,
        DiskVolumeDetails: DiskVolumeDetails,
        A2AEventDetails: A2AEventDetails,
        A2AProtectionContainerMappingDetails: A2AProtectionContainerMappingDetails,
        A2ARecoveryPointDetails: A2ARecoveryPointDetails,
        A2AReplicationDetails: A2AReplicationDetails,
        A2AProtectedDiskDetails: A2AProtectedDiskDetails,
        A2AProtectedManagedDiskDetails: A2AProtectedManagedDiskDetails,
        VMNicDetails: VMNicDetails,
        AzureToAzureVmSyncedConfigDetails: AzureToAzureVmSyncedConfigDetails,
        RoleAssignment: RoleAssignment,
        InputEndpoint: InputEndpoint,
        AsrJobDetails: AsrJobDetails,
        AutomationRunbookTaskDetails: AutomationRunbookTaskDetails,
        AzureFabricSpecificDetails: AzureFabricSpecificDetails,
        AzureToAzureNetworkMappingSettings: AzureToAzureNetworkMappingSettings,
        ConsistencyCheckTaskDetails: ConsistencyCheckTaskDetails,
        InconsistentVmDetails: InconsistentVmDetails,
        ExportJobDetails: ExportJobDetails,
        FabricReplicationGroupTaskDetails: FabricReplicationGroupTaskDetails,
        FailoverJobDetails: FailoverJobDetails,
        HyperVReplicaAzureReplicationDetails: HyperVReplicaAzureReplicationDetails,
        AzureVmDiskDetails: AzureVmDiskDetails,
        InitialReplicationDetails: InitialReplicationDetails,
        HyperVReplicaBaseReplicationDetails: HyperVReplicaBaseReplicationDetails,
        HyperVReplicaBlueReplicationDetails: HyperVReplicaBlueReplicationDetails,
        HyperVReplicaReplicationDetails: HyperVReplicaReplicationDetails,
        HyperVVirtualMachineDetails: HyperVVirtualMachineDetails,
        InlineWorkflowTaskDetails: InlineWorkflowTaskDetails,
        InMageAzureV2RecoveryPointDetails: InMageAzureV2RecoveryPointDetails,
        InMageAzureV2ReplicationDetails: InMageAzureV2ReplicationDetails,
        InMageAzureV2ProtectedDiskDetails: InMageAzureV2ProtectedDiskDetails,
        InMageReplicationDetails: InMageReplicationDetails,
        OSDiskDetails: OSDiskDetails,
        InMageProtectedDiskDetails: InMageProtectedDiskDetails,
        InMageAgentDetails: InMageAgentDetails
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ReplicationPolicies. */
    var ReplicationPolicies = /** @class */ (function () {
        /**
         * Create a ReplicationPolicies.
         * @param {SiteRecoveryManagementClientContext} client Reference to the service client.
         */
        function ReplicationPolicies(client) {
            this.client = client;
        }
        ReplicationPolicies.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$e, callback);
        };
        ReplicationPolicies.prototype.get = function (policyName$$1, options, callback) {
            return this.client.sendOperationRequest({
                policyName: policyName$$1,
                options: options
            }, getOperationSpec$g, callback);
        };
        /**
         * The operation to create a replication policy
         * @summary Creates the policy.
         * @param policyName Replication policy name
         * @param input Create policy input
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationPoliciesCreateResponse>
         */
        ReplicationPolicies.prototype.create = function (policyName$$1, input, options) {
            return this.beginCreate(policyName$$1, input, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to delete a replication policy.
         * @summary Delete the policy.
         * @param policyName Replication policy name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ReplicationPolicies.prototype.deleteMethod = function (policyName$$1, options) {
            return this.beginDeleteMethod(policyName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to update a replication policy.
         * @summary Updates the policy.
         * @param policyName Policy Id.
         * @param input Update Policy Input
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationPoliciesUpdateResponse>
         */
        ReplicationPolicies.prototype.update = function (policyName$$1, input, options) {
            return this.beginUpdate(policyName$$1, input, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to create a replication policy
         * @summary Creates the policy.
         * @param policyName Replication policy name
         * @param input Create policy input
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationPolicies.prototype.beginCreate = function (policyName$$1, input, options) {
            return this.client.sendLRORequest({
                policyName: policyName$$1,
                input: input,
                options: options
            }, beginCreateOperationSpec$7, options);
        };
        /**
         * The operation to delete a replication policy.
         * @summary Delete the policy.
         * @param policyName Replication policy name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationPolicies.prototype.beginDeleteMethod = function (policyName$$1, options) {
            return this.client.sendLRORequest({
                policyName: policyName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$8, options);
        };
        /**
         * The operation to update a replication policy.
         * @summary Updates the policy.
         * @param policyName Policy Id.
         * @param input Update Policy Input
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationPolicies.prototype.beginUpdate = function (policyName$$1, input, options) {
            return this.client.sendLRORequest({
                policyName: policyName$$1,
                input: input,
                options: options
            }, beginUpdateOperationSpec$4, options);
        };
        ReplicationPolicies.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$e, callback);
        };
        return ReplicationPolicies;
    }());
    // Operation Specifications
    var serializer$i = new msRest.Serializer(Mappers$i);
    var listOperationSpec$e = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationPolicies",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PolicyCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var getOperationSpec$g = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationPolicies/{policyName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            policyName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Policy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var beginCreateOperationSpec$7 = {
        httpMethod: "PUT",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationPolicies/{policyName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            policyName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "input",
            mapper: __assign({}, CreatePolicyInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Policy
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var beginDeleteMethodOperationSpec$8 = {
        httpMethod: "DELETE",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationPolicies/{policyName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            policyName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var beginUpdateOperationSpec$4 = {
        httpMethod: "PATCH",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationPolicies/{policyName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            policyName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "input",
            mapper: __assign({}, UpdatePolicyInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Policy
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var listNextOperationSpec$e = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PolicyCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$j = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        RecoveryPlanCollection: RecoveryPlanCollection,
        RecoveryPlan: RecoveryPlan,
        Resource: Resource,
        BaseResource: BaseResource,
        RecoveryPlanProperties: RecoveryPlanProperties,
        CurrentScenarioDetails: CurrentScenarioDetails,
        RecoveryPlanGroup: RecoveryPlanGroup,
        RecoveryPlanProtectedItem: RecoveryPlanProtectedItem,
        RecoveryPlanAction: RecoveryPlanAction,
        RecoveryPlanActionDetails: RecoveryPlanActionDetails,
        CloudError: CloudError,
        CreateRecoveryPlanInput: CreateRecoveryPlanInput,
        CreateRecoveryPlanInputProperties: CreateRecoveryPlanInputProperties,
        UpdateRecoveryPlanInput: UpdateRecoveryPlanInput,
        UpdateRecoveryPlanInputProperties: UpdateRecoveryPlanInputProperties,
        RecoveryPlanPlannedFailoverInput: RecoveryPlanPlannedFailoverInput,
        RecoveryPlanPlannedFailoverInputProperties: RecoveryPlanPlannedFailoverInputProperties,
        RecoveryPlanProviderSpecificFailoverInput: RecoveryPlanProviderSpecificFailoverInput,
        RecoveryPlanTestFailoverInput: RecoveryPlanTestFailoverInput,
        RecoveryPlanTestFailoverInputProperties: RecoveryPlanTestFailoverInputProperties,
        RecoveryPlanTestFailoverCleanupInput: RecoveryPlanTestFailoverCleanupInput,
        RecoveryPlanTestFailoverCleanupInputProperties: RecoveryPlanTestFailoverCleanupInputProperties,
        RecoveryPlanUnplannedFailoverInput: RecoveryPlanUnplannedFailoverInput,
        RecoveryPlanUnplannedFailoverInputProperties: RecoveryPlanUnplannedFailoverInputProperties,
        Alert: Alert,
        AlertProperties: AlertProperties,
        Event: Event,
        EventProperties: EventProperties,
        EventProviderSpecificDetails: EventProviderSpecificDetails,
        EventSpecificDetails: EventSpecificDetails,
        HealthError: HealthError,
        InnerHealthError: InnerHealthError,
        Fabric: Fabric,
        FabricProperties: FabricProperties,
        EncryptionDetails: EncryptionDetails,
        FabricSpecificDetails: FabricSpecificDetails,
        HyperVReplica2012EventDetails: HyperVReplica2012EventDetails,
        HyperVReplica2012R2EventDetails: HyperVReplica2012R2EventDetails,
        HyperVReplicaAzureEventDetails: HyperVReplicaAzureEventDetails,
        HyperVReplicaBaseEventDetails: HyperVReplicaBaseEventDetails,
        HyperVSiteDetails: HyperVSiteDetails,
        InMageAzureV2EventDetails: InMageAzureV2EventDetails,
        Job: Job,
        JobProperties: JobProperties,
        ASRTask: ASRTask,
        TaskTypeDetails: TaskTypeDetails,
        GroupTaskDetails: GroupTaskDetails,
        JobErrorDetails: JobErrorDetails,
        ServiceError: ServiceError,
        ProviderError: ProviderError,
        JobDetails: JobDetails,
        JobStatusEventDetails: JobStatusEventDetails,
        JobTaskDetails: JobTaskDetails,
        JobEntity: JobEntity,
        LogicalNetwork: LogicalNetwork,
        LogicalNetworkProperties: LogicalNetworkProperties,
        ManualActionTaskDetails: ManualActionTaskDetails,
        Network: Network,
        NetworkProperties: NetworkProperties,
        Subnet: Subnet,
        NetworkMapping: NetworkMapping,
        NetworkMappingProperties: NetworkMappingProperties,
        NetworkMappingFabricSpecificSettings: NetworkMappingFabricSpecificSettings,
        Policy: Policy,
        PolicyProperties: PolicyProperties,
        PolicyProviderSpecificDetails: PolicyProviderSpecificDetails,
        ProtectableItem: ProtectableItem,
        ProtectableItemProperties: ProtectableItemProperties,
        ConfigurationSettings: ConfigurationSettings,
        ProtectionContainer: ProtectionContainer,
        ProtectionContainerProperties: ProtectionContainerProperties,
        ProtectionContainerFabricSpecificDetails: ProtectionContainerFabricSpecificDetails,
        ProtectionContainerMapping: ProtectionContainerMapping,
        ProtectionContainerMappingProperties: ProtectionContainerMappingProperties,
        ProtectionContainerMappingProviderSpecificDetails: ProtectionContainerMappingProviderSpecificDetails,
        RcmAzureMigrationPolicyDetails: RcmAzureMigrationPolicyDetails,
        RecoveryPlanA2AFailoverInput: RecoveryPlanA2AFailoverInput,
        RecoveryPlanAutomationRunbookActionDetails: RecoveryPlanAutomationRunbookActionDetails,
        RecoveryPlanGroupTaskDetails: RecoveryPlanGroupTaskDetails,
        RecoveryPlanHyperVReplicaAzureFailbackInput: RecoveryPlanHyperVReplicaAzureFailbackInput,
        RecoveryPlanHyperVReplicaAzureFailoverInput: RecoveryPlanHyperVReplicaAzureFailoverInput,
        RecoveryPlanInMageAzureV2FailoverInput: RecoveryPlanInMageAzureV2FailoverInput,
        RecoveryPlanInMageFailoverInput: RecoveryPlanInMageFailoverInput,
        RecoveryPlanManualActionDetails: RecoveryPlanManualActionDetails,
        RecoveryPlanScriptActionDetails: RecoveryPlanScriptActionDetails,
        RecoveryPlanShutdownGroupTaskDetails: RecoveryPlanShutdownGroupTaskDetails,
        RecoveryPoint: RecoveryPoint,
        RecoveryPointProperties: RecoveryPointProperties,
        ProviderSpecificRecoveryPointDetails: ProviderSpecificRecoveryPointDetails,
        RecoveryServicesProvider: RecoveryServicesProvider,
        RecoveryServicesProviderProperties: RecoveryServicesProviderProperties,
        IdentityInformation: IdentityInformation,
        VersionDetails: VersionDetails,
        ReplicationGroupDetails: ReplicationGroupDetails,
        ReplicationProtectedItem: ReplicationProtectedItem,
        ReplicationProtectedItemProperties: ReplicationProtectedItemProperties,
        ReplicationProviderSpecificSettings: ReplicationProviderSpecificSettings,
        ScriptActionTaskDetails: ScriptActionTaskDetails,
        StorageClassification: StorageClassification,
        StorageClassificationProperties: StorageClassificationProperties,
        StorageClassificationMapping: StorageClassificationMapping,
        StorageClassificationMappingProperties: StorageClassificationMappingProperties,
        SwitchProtectionJobDetails: SwitchProtectionJobDetails,
        TestFailoverJobDetails: TestFailoverJobDetails,
        FailoverReplicationProtectedItemDetails: FailoverReplicationProtectedItemDetails,
        VaultHealthDetails: VaultHealthDetails,
        VaultHealthProperties: VaultHealthProperties,
        ResourceHealthSummary: ResourceHealthSummary,
        HealthErrorSummary: HealthErrorSummary,
        VCenter: VCenter,
        VCenterProperties: VCenterProperties,
        VirtualMachineTaskDetails: VirtualMachineTaskDetails,
        VmmDetails: VmmDetails,
        VmmToAzureNetworkMappingSettings: VmmToAzureNetworkMappingSettings,
        VmmToVmmNetworkMappingSettings: VmmToVmmNetworkMappingSettings,
        VmmVirtualMachineDetails: VmmVirtualMachineDetails,
        OSDetails: OSDetails,
        DiskDetails: DiskDetails,
        VmNicUpdatesTaskDetails: VmNicUpdatesTaskDetails,
        VmwareCbtPolicyDetails: VmwareCbtPolicyDetails,
        VMwareDetails: VMwareDetails,
        ProcessServer: ProcessServer,
        MobilityServiceUpdate: MobilityServiceUpdate,
        MasterTargetServer: MasterTargetServer,
        RetentionVolume: RetentionVolume,
        DataStore: DataStore,
        RunAsAccount: RunAsAccount,
        VMwareV2FabricSpecificDetails: VMwareV2FabricSpecificDetails,
        VMwareVirtualMachineDetails: VMwareVirtualMachineDetails,
        InMageDiskDetails: InMageDiskDetails,
        DiskVolumeDetails: DiskVolumeDetails,
        A2AEventDetails: A2AEventDetails,
        A2APolicyDetails: A2APolicyDetails,
        A2AProtectionContainerMappingDetails: A2AProtectionContainerMappingDetails,
        A2ARecoveryPointDetails: A2ARecoveryPointDetails,
        A2AReplicationDetails: A2AReplicationDetails,
        A2AProtectedDiskDetails: A2AProtectedDiskDetails,
        A2AProtectedManagedDiskDetails: A2AProtectedManagedDiskDetails,
        VMNicDetails: VMNicDetails,
        AzureToAzureVmSyncedConfigDetails: AzureToAzureVmSyncedConfigDetails,
        RoleAssignment: RoleAssignment,
        InputEndpoint: InputEndpoint,
        AsrJobDetails: AsrJobDetails,
        AutomationRunbookTaskDetails: AutomationRunbookTaskDetails,
        AzureFabricSpecificDetails: AzureFabricSpecificDetails,
        AzureToAzureNetworkMappingSettings: AzureToAzureNetworkMappingSettings,
        ConsistencyCheckTaskDetails: ConsistencyCheckTaskDetails,
        InconsistentVmDetails: InconsistentVmDetails,
        ExportJobDetails: ExportJobDetails,
        FabricReplicationGroupTaskDetails: FabricReplicationGroupTaskDetails,
        FailoverJobDetails: FailoverJobDetails,
        HyperVReplicaAzurePolicyDetails: HyperVReplicaAzurePolicyDetails,
        HyperVReplicaAzureReplicationDetails: HyperVReplicaAzureReplicationDetails,
        AzureVmDiskDetails: AzureVmDiskDetails,
        InitialReplicationDetails: InitialReplicationDetails,
        HyperVReplicaBasePolicyDetails: HyperVReplicaBasePolicyDetails,
        HyperVReplicaBaseReplicationDetails: HyperVReplicaBaseReplicationDetails,
        HyperVReplicaBluePolicyDetails: HyperVReplicaBluePolicyDetails,
        HyperVReplicaBlueReplicationDetails: HyperVReplicaBlueReplicationDetails,
        HyperVReplicaPolicyDetails: HyperVReplicaPolicyDetails,
        HyperVReplicaReplicationDetails: HyperVReplicaReplicationDetails,
        HyperVVirtualMachineDetails: HyperVVirtualMachineDetails,
        InlineWorkflowTaskDetails: InlineWorkflowTaskDetails,
        InMageAzureV2PolicyDetails: InMageAzureV2PolicyDetails,
        InMageAzureV2RecoveryPointDetails: InMageAzureV2RecoveryPointDetails,
        InMageAzureV2ReplicationDetails: InMageAzureV2ReplicationDetails,
        InMageAzureV2ProtectedDiskDetails: InMageAzureV2ProtectedDiskDetails,
        InMageBasePolicyDetails: InMageBasePolicyDetails,
        InMagePolicyDetails: InMagePolicyDetails,
        InMageReplicationDetails: InMageReplicationDetails,
        OSDiskDetails: OSDiskDetails,
        InMageProtectedDiskDetails: InMageProtectedDiskDetails,
        InMageAgentDetails: InMageAgentDetails
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ReplicationRecoveryPlans. */
    var ReplicationRecoveryPlans = /** @class */ (function () {
        /**
         * Create a ReplicationRecoveryPlans.
         * @param {SiteRecoveryManagementClientContext} client Reference to the service client.
         */
        function ReplicationRecoveryPlans(client) {
            this.client = client;
        }
        ReplicationRecoveryPlans.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$f, callback);
        };
        ReplicationRecoveryPlans.prototype.get = function (recoveryPlanName$$1, options, callback) {
            return this.client.sendOperationRequest({
                recoveryPlanName: recoveryPlanName$$1,
                options: options
            }, getOperationSpec$h, callback);
        };
        /**
         * The operation to create a recovery plan.
         * @summary Creates a recovery plan with the given details.
         * @param recoveryPlanName Recovery plan name.
         * @param input Recovery Plan creation input.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationRecoveryPlansCreateResponse>
         */
        ReplicationRecoveryPlans.prototype.create = function (recoveryPlanName$$1, input, options) {
            return this.beginCreate(recoveryPlanName$$1, input, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Delete a recovery plan.
         * @summary Deletes the specified recovery plan.
         * @param recoveryPlanName Recovery plan name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ReplicationRecoveryPlans.prototype.deleteMethod = function (recoveryPlanName$$1, options) {
            return this.beginDeleteMethod(recoveryPlanName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to update a recovery plan.
         * @summary Updates the given recovery plan.
         * @param recoveryPlanName Recovery plan name.
         * @param input Update recovery plan input
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationRecoveryPlansUpdateResponse>
         */
        ReplicationRecoveryPlans.prototype.update = function (recoveryPlanName$$1, input, options) {
            return this.beginUpdate(recoveryPlanName$$1, input, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to commit the fail over of a recovery plan.
         * @summary Execute commit failover of the recovery plan.
         * @param recoveryPlanName Recovery plan name.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationRecoveryPlansFailoverCommitResponse>
         */
        ReplicationRecoveryPlans.prototype.failoverCommit = function (recoveryPlanName$$1, options) {
            return this.beginFailoverCommit(recoveryPlanName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to start the planned failover of a recovery plan.
         * @summary Execute planned failover of the recovery plan.
         * @param recoveryPlanName Recovery plan name.
         * @param input Failover input.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationRecoveryPlansPlannedFailoverResponse>
         */
        ReplicationRecoveryPlans.prototype.plannedFailover = function (recoveryPlanName$$1, input, options) {
            return this.beginPlannedFailover(recoveryPlanName$$1, input, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to reprotect(reverse replicate) a recovery plan.
         * @summary Execute reprotect of the recovery plan.
         * @param recoveryPlanName Recovery plan name.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationRecoveryPlansReprotectResponse>
         */
        ReplicationRecoveryPlans.prototype.reprotect = function (recoveryPlanName$$1, options) {
            return this.beginReprotect(recoveryPlanName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to start the test failover of a recovery plan.
         * @summary Execute test failover of the recovery plan.
         * @param recoveryPlanName Recovery plan name.
         * @param input Failover input.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationRecoveryPlansTestFailoverResponse>
         */
        ReplicationRecoveryPlans.prototype.testFailover = function (recoveryPlanName$$1, input, options) {
            return this.beginTestFailover(recoveryPlanName$$1, input, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to cleanup test failover of a recovery plan.
         * @summary Execute test failover cleanup of the recovery plan.
         * @param recoveryPlanName Recovery plan name.
         * @param input Test failover cleanup input.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationRecoveryPlansTestFailoverCleanupResponse>
         */
        ReplicationRecoveryPlans.prototype.testFailoverCleanup = function (recoveryPlanName$$1, input, options) {
            return this.beginTestFailoverCleanup(recoveryPlanName$$1, input, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to start the failover of a recovery plan.
         * @summary Execute unplanned failover of the recovery plan.
         * @param recoveryPlanName Recovery plan name.
         * @param input Failover input.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationRecoveryPlansUnplannedFailoverResponse>
         */
        ReplicationRecoveryPlans.prototype.unplannedFailover = function (recoveryPlanName$$1, input, options) {
            return this.beginUnplannedFailover(recoveryPlanName$$1, input, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to create a recovery plan.
         * @summary Creates a recovery plan with the given details.
         * @param recoveryPlanName Recovery plan name.
         * @param input Recovery Plan creation input.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationRecoveryPlans.prototype.beginCreate = function (recoveryPlanName$$1, input, options) {
            return this.client.sendLRORequest({
                recoveryPlanName: recoveryPlanName$$1,
                input: input,
                options: options
            }, beginCreateOperationSpec$8, options);
        };
        /**
         * Delete a recovery plan.
         * @summary Deletes the specified recovery plan.
         * @param recoveryPlanName Recovery plan name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationRecoveryPlans.prototype.beginDeleteMethod = function (recoveryPlanName$$1, options) {
            return this.client.sendLRORequest({
                recoveryPlanName: recoveryPlanName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$9, options);
        };
        /**
         * The operation to update a recovery plan.
         * @summary Updates the given recovery plan.
         * @param recoveryPlanName Recovery plan name.
         * @param input Update recovery plan input
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationRecoveryPlans.prototype.beginUpdate = function (recoveryPlanName$$1, input, options) {
            return this.client.sendLRORequest({
                recoveryPlanName: recoveryPlanName$$1,
                input: input,
                options: options
            }, beginUpdateOperationSpec$5, options);
        };
        /**
         * The operation to commit the fail over of a recovery plan.
         * @summary Execute commit failover of the recovery plan.
         * @param recoveryPlanName Recovery plan name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationRecoveryPlans.prototype.beginFailoverCommit = function (recoveryPlanName$$1, options) {
            return this.client.sendLRORequest({
                recoveryPlanName: recoveryPlanName$$1,
                options: options
            }, beginFailoverCommitOperationSpec$1, options);
        };
        /**
         * The operation to start the planned failover of a recovery plan.
         * @summary Execute planned failover of the recovery plan.
         * @param recoveryPlanName Recovery plan name.
         * @param input Failover input.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationRecoveryPlans.prototype.beginPlannedFailover = function (recoveryPlanName$$1, input, options) {
            return this.client.sendLRORequest({
                recoveryPlanName: recoveryPlanName$$1,
                input: input,
                options: options
            }, beginPlannedFailoverOperationSpec$1, options);
        };
        /**
         * The operation to reprotect(reverse replicate) a recovery plan.
         * @summary Execute reprotect of the recovery plan.
         * @param recoveryPlanName Recovery plan name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationRecoveryPlans.prototype.beginReprotect = function (recoveryPlanName$$1, options) {
            return this.client.sendLRORequest({
                recoveryPlanName: recoveryPlanName$$1,
                options: options
            }, beginReprotectOperationSpec$1, options);
        };
        /**
         * The operation to start the test failover of a recovery plan.
         * @summary Execute test failover of the recovery plan.
         * @param recoveryPlanName Recovery plan name.
         * @param input Failover input.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationRecoveryPlans.prototype.beginTestFailover = function (recoveryPlanName$$1, input, options) {
            return this.client.sendLRORequest({
                recoveryPlanName: recoveryPlanName$$1,
                input: input,
                options: options
            }, beginTestFailoverOperationSpec$1, options);
        };
        /**
         * The operation to cleanup test failover of a recovery plan.
         * @summary Execute test failover cleanup of the recovery plan.
         * @param recoveryPlanName Recovery plan name.
         * @param input Test failover cleanup input.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationRecoveryPlans.prototype.beginTestFailoverCleanup = function (recoveryPlanName$$1, input, options) {
            return this.client.sendLRORequest({
                recoveryPlanName: recoveryPlanName$$1,
                input: input,
                options: options
            }, beginTestFailoverCleanupOperationSpec$1, options);
        };
        /**
         * The operation to start the failover of a recovery plan.
         * @summary Execute unplanned failover of the recovery plan.
         * @param recoveryPlanName Recovery plan name.
         * @param input Failover input.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationRecoveryPlans.prototype.beginUnplannedFailover = function (recoveryPlanName$$1, input, options) {
            return this.client.sendLRORequest({
                recoveryPlanName: recoveryPlanName$$1,
                input: input,
                options: options
            }, beginUnplannedFailoverOperationSpec$1, options);
        };
        ReplicationRecoveryPlans.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$f, callback);
        };
        return ReplicationRecoveryPlans;
    }());
    // Operation Specifications
    var serializer$j = new msRest.Serializer(Mappers$j);
    var listOperationSpec$f = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecoveryPlanCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$j
    };
    var getOperationSpec$h = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            recoveryPlanName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecoveryPlan
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$j
    };
    var beginCreateOperationSpec$8 = {
        httpMethod: "PUT",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            recoveryPlanName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "input",
            mapper: __assign({}, CreateRecoveryPlanInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: RecoveryPlan
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$j
    };
    var beginDeleteMethodOperationSpec$9 = {
        httpMethod: "DELETE",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            recoveryPlanName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$j
    };
    var beginUpdateOperationSpec$5 = {
        httpMethod: "PATCH",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            recoveryPlanName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "input",
            mapper: __assign({}, UpdateRecoveryPlanInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: RecoveryPlan
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$j
    };
    var beginFailoverCommitOperationSpec$1 = {
        httpMethod: "POST",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/failoverCommit",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            recoveryPlanName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecoveryPlan
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$j
    };
    var beginPlannedFailoverOperationSpec$1 = {
        httpMethod: "POST",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/plannedFailover",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            recoveryPlanName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "input",
            mapper: __assign({}, RecoveryPlanPlannedFailoverInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: RecoveryPlan
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$j
    };
    var beginReprotectOperationSpec$1 = {
        httpMethod: "POST",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/reProtect",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            recoveryPlanName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecoveryPlan
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$j
    };
    var beginTestFailoverOperationSpec$1 = {
        httpMethod: "POST",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/testFailover",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            recoveryPlanName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "input",
            mapper: __assign({}, RecoveryPlanTestFailoverInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: RecoveryPlan
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$j
    };
    var beginTestFailoverCleanupOperationSpec$1 = {
        httpMethod: "POST",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/testFailoverCleanup",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            recoveryPlanName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "input",
            mapper: __assign({}, RecoveryPlanTestFailoverCleanupInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: RecoveryPlan
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$j
    };
    var beginUnplannedFailoverOperationSpec$1 = {
        httpMethod: "POST",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/unplannedFailover",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId,
            recoveryPlanName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "input",
            mapper: __assign({}, RecoveryPlanUnplannedFailoverInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: RecoveryPlan
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$j
    };
    var listNextOperationSpec$f = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecoveryPlanCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$j
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$k = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        VaultHealthDetails: VaultHealthDetails,
        Resource: Resource,
        BaseResource: BaseResource,
        VaultHealthProperties: VaultHealthProperties,
        HealthError: HealthError,
        InnerHealthError: InnerHealthError,
        ResourceHealthSummary: ResourceHealthSummary,
        HealthErrorSummary: HealthErrorSummary,
        CloudError: CloudError,
        Alert: Alert,
        AlertProperties: AlertProperties,
        Event: Event,
        EventProperties: EventProperties,
        EventProviderSpecificDetails: EventProviderSpecificDetails,
        EventSpecificDetails: EventSpecificDetails,
        Fabric: Fabric,
        FabricProperties: FabricProperties,
        EncryptionDetails: EncryptionDetails,
        FabricSpecificDetails: FabricSpecificDetails,
        HyperVReplica2012EventDetails: HyperVReplica2012EventDetails,
        HyperVReplica2012R2EventDetails: HyperVReplica2012R2EventDetails,
        HyperVReplicaAzureEventDetails: HyperVReplicaAzureEventDetails,
        HyperVReplicaBaseEventDetails: HyperVReplicaBaseEventDetails,
        HyperVSiteDetails: HyperVSiteDetails,
        InMageAzureV2EventDetails: InMageAzureV2EventDetails,
        Job: Job,
        JobProperties: JobProperties,
        ASRTask: ASRTask,
        TaskTypeDetails: TaskTypeDetails,
        GroupTaskDetails: GroupTaskDetails,
        JobErrorDetails: JobErrorDetails,
        ServiceError: ServiceError,
        ProviderError: ProviderError,
        JobDetails: JobDetails,
        JobStatusEventDetails: JobStatusEventDetails,
        JobTaskDetails: JobTaskDetails,
        JobEntity: JobEntity,
        LogicalNetwork: LogicalNetwork,
        LogicalNetworkProperties: LogicalNetworkProperties,
        ManualActionTaskDetails: ManualActionTaskDetails,
        Network: Network,
        NetworkProperties: NetworkProperties,
        Subnet: Subnet,
        NetworkMapping: NetworkMapping,
        NetworkMappingProperties: NetworkMappingProperties,
        NetworkMappingFabricSpecificSettings: NetworkMappingFabricSpecificSettings,
        Policy: Policy,
        PolicyProperties: PolicyProperties,
        PolicyProviderSpecificDetails: PolicyProviderSpecificDetails,
        ProtectableItem: ProtectableItem,
        ProtectableItemProperties: ProtectableItemProperties,
        ConfigurationSettings: ConfigurationSettings,
        ProtectionContainer: ProtectionContainer,
        ProtectionContainerProperties: ProtectionContainerProperties,
        ProtectionContainerFabricSpecificDetails: ProtectionContainerFabricSpecificDetails,
        ProtectionContainerMapping: ProtectionContainerMapping,
        ProtectionContainerMappingProperties: ProtectionContainerMappingProperties,
        ProtectionContainerMappingProviderSpecificDetails: ProtectionContainerMappingProviderSpecificDetails,
        RcmAzureMigrationPolicyDetails: RcmAzureMigrationPolicyDetails,
        RecoveryPlan: RecoveryPlan,
        RecoveryPlanProperties: RecoveryPlanProperties,
        CurrentScenarioDetails: CurrentScenarioDetails,
        RecoveryPlanGroup: RecoveryPlanGroup,
        RecoveryPlanProtectedItem: RecoveryPlanProtectedItem,
        RecoveryPlanAction: RecoveryPlanAction,
        RecoveryPlanActionDetails: RecoveryPlanActionDetails,
        RecoveryPlanAutomationRunbookActionDetails: RecoveryPlanAutomationRunbookActionDetails,
        RecoveryPlanGroupTaskDetails: RecoveryPlanGroupTaskDetails,
        RecoveryPlanManualActionDetails: RecoveryPlanManualActionDetails,
        RecoveryPlanScriptActionDetails: RecoveryPlanScriptActionDetails,
        RecoveryPlanShutdownGroupTaskDetails: RecoveryPlanShutdownGroupTaskDetails,
        RecoveryPoint: RecoveryPoint,
        RecoveryPointProperties: RecoveryPointProperties,
        ProviderSpecificRecoveryPointDetails: ProviderSpecificRecoveryPointDetails,
        RecoveryServicesProvider: RecoveryServicesProvider,
        RecoveryServicesProviderProperties: RecoveryServicesProviderProperties,
        IdentityInformation: IdentityInformation,
        VersionDetails: VersionDetails,
        ReplicationGroupDetails: ReplicationGroupDetails,
        ReplicationProtectedItem: ReplicationProtectedItem,
        ReplicationProtectedItemProperties: ReplicationProtectedItemProperties,
        ReplicationProviderSpecificSettings: ReplicationProviderSpecificSettings,
        ScriptActionTaskDetails: ScriptActionTaskDetails,
        StorageClassification: StorageClassification,
        StorageClassificationProperties: StorageClassificationProperties,
        StorageClassificationMapping: StorageClassificationMapping,
        StorageClassificationMappingProperties: StorageClassificationMappingProperties,
        SwitchProtectionJobDetails: SwitchProtectionJobDetails,
        TestFailoverJobDetails: TestFailoverJobDetails,
        FailoverReplicationProtectedItemDetails: FailoverReplicationProtectedItemDetails,
        VCenter: VCenter,
        VCenterProperties: VCenterProperties,
        VirtualMachineTaskDetails: VirtualMachineTaskDetails,
        VmmDetails: VmmDetails,
        VmmToAzureNetworkMappingSettings: VmmToAzureNetworkMappingSettings,
        VmmToVmmNetworkMappingSettings: VmmToVmmNetworkMappingSettings,
        VmmVirtualMachineDetails: VmmVirtualMachineDetails,
        OSDetails: OSDetails,
        DiskDetails: DiskDetails,
        VmNicUpdatesTaskDetails: VmNicUpdatesTaskDetails,
        VmwareCbtPolicyDetails: VmwareCbtPolicyDetails,
        VMwareDetails: VMwareDetails,
        ProcessServer: ProcessServer,
        MobilityServiceUpdate: MobilityServiceUpdate,
        MasterTargetServer: MasterTargetServer,
        RetentionVolume: RetentionVolume,
        DataStore: DataStore,
        RunAsAccount: RunAsAccount,
        VMwareV2FabricSpecificDetails: VMwareV2FabricSpecificDetails,
        VMwareVirtualMachineDetails: VMwareVirtualMachineDetails,
        InMageDiskDetails: InMageDiskDetails,
        DiskVolumeDetails: DiskVolumeDetails,
        A2AEventDetails: A2AEventDetails,
        A2APolicyDetails: A2APolicyDetails,
        A2AProtectionContainerMappingDetails: A2AProtectionContainerMappingDetails,
        A2ARecoveryPointDetails: A2ARecoveryPointDetails,
        A2AReplicationDetails: A2AReplicationDetails,
        A2AProtectedDiskDetails: A2AProtectedDiskDetails,
        A2AProtectedManagedDiskDetails: A2AProtectedManagedDiskDetails,
        VMNicDetails: VMNicDetails,
        AzureToAzureVmSyncedConfigDetails: AzureToAzureVmSyncedConfigDetails,
        RoleAssignment: RoleAssignment,
        InputEndpoint: InputEndpoint,
        AsrJobDetails: AsrJobDetails,
        AutomationRunbookTaskDetails: AutomationRunbookTaskDetails,
        AzureFabricSpecificDetails: AzureFabricSpecificDetails,
        AzureToAzureNetworkMappingSettings: AzureToAzureNetworkMappingSettings,
        ConsistencyCheckTaskDetails: ConsistencyCheckTaskDetails,
        InconsistentVmDetails: InconsistentVmDetails,
        ExportJobDetails: ExportJobDetails,
        FabricReplicationGroupTaskDetails: FabricReplicationGroupTaskDetails,
        FailoverJobDetails: FailoverJobDetails,
        HyperVReplicaAzurePolicyDetails: HyperVReplicaAzurePolicyDetails,
        HyperVReplicaAzureReplicationDetails: HyperVReplicaAzureReplicationDetails,
        AzureVmDiskDetails: AzureVmDiskDetails,
        InitialReplicationDetails: InitialReplicationDetails,
        HyperVReplicaBasePolicyDetails: HyperVReplicaBasePolicyDetails,
        HyperVReplicaBaseReplicationDetails: HyperVReplicaBaseReplicationDetails,
        HyperVReplicaBluePolicyDetails: HyperVReplicaBluePolicyDetails,
        HyperVReplicaBlueReplicationDetails: HyperVReplicaBlueReplicationDetails,
        HyperVReplicaPolicyDetails: HyperVReplicaPolicyDetails,
        HyperVReplicaReplicationDetails: HyperVReplicaReplicationDetails,
        HyperVVirtualMachineDetails: HyperVVirtualMachineDetails,
        InlineWorkflowTaskDetails: InlineWorkflowTaskDetails,
        InMageAzureV2PolicyDetails: InMageAzureV2PolicyDetails,
        InMageAzureV2RecoveryPointDetails: InMageAzureV2RecoveryPointDetails,
        InMageAzureV2ReplicationDetails: InMageAzureV2ReplicationDetails,
        InMageAzureV2ProtectedDiskDetails: InMageAzureV2ProtectedDiskDetails,
        InMageBasePolicyDetails: InMageBasePolicyDetails,
        InMagePolicyDetails: InMagePolicyDetails,
        InMageReplicationDetails: InMageReplicationDetails,
        OSDiskDetails: OSDiskDetails,
        InMageProtectedDiskDetails: InMageProtectedDiskDetails,
        InMageAgentDetails: InMageAgentDetails
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ReplicationVaultHealth. */
    var ReplicationVaultHealth = /** @class */ (function () {
        /**
         * Create a ReplicationVaultHealth.
         * @param {SiteRecoveryManagementClientContext} client Reference to the service client.
         */
        function ReplicationVaultHealth(client) {
            this.client = client;
        }
        ReplicationVaultHealth.prototype.get = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, getOperationSpec$i, callback);
        };
        /**
         * @summary Refreshes health summary of the vault.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationVaultHealthRefreshResponse>
         */
        ReplicationVaultHealth.prototype.refresh = function (options) {
            return this.beginRefresh(options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * @summary Refreshes health summary of the vault.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationVaultHealth.prototype.beginRefresh = function (options) {
            return this.client.sendLRORequest({
                options: options
            }, beginRefreshOperationSpec, options);
        };
        return ReplicationVaultHealth;
    }());
    // Operation Specifications
    var serializer$k = new msRest.Serializer(Mappers$k);
    var getOperationSpec$i = {
        httpMethod: "GET",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationVaultHealth",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VaultHealthDetails
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$k
    };
    var beginRefreshOperationSpec = {
        httpMethod: "POST",
        path: "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationVaultHealth/default/refresh",
        urlParameters: [
            resourceName,
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VaultHealthDetails
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$k
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-recoveryservices-siterecovery";
    var packageVersion = "1.0.0";
    var SiteRecoveryManagementClientContext = /** @class */ (function (_super) {
        __extends(SiteRecoveryManagementClientContext, _super);
        /**
         * Initializes a new instance of the SiteRecoveryManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The subscription Id.
         * @param resourceGroupName The name of the resource group where the recovery services vault is
         * present.
         * @param resourceName The name of the recovery services vault.
         * @param [options] The parameter options
         */
        function SiteRecoveryManagementClientContext(credentials, subscriptionId, resourceGroupName, resourceName, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (resourceGroupName == undefined) {
                throw new Error('\'resourceGroupName\' cannot be null.');
            }
            if (resourceName == undefined) {
                throw new Error('\'resourceName\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2018-01-10';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.resourceGroupName = resourceGroupName;
            _this.resourceName = resourceName;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return SiteRecoveryManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var SiteRecoveryManagementClient = /** @class */ (function (_super) {
        __extends(SiteRecoveryManagementClient, _super);
        /**
         * Initializes a new instance of the SiteRecoveryManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The subscription Id.
         * @param resourceGroupName The name of the resource group where the recovery services vault is
         * present.
         * @param resourceName The name of the recovery services vault.
         * @param [options] The parameter options
         */
        function SiteRecoveryManagementClient(credentials, subscriptionId, resourceGroupName, resourceName, options) {
            var _this = _super.call(this, credentials, subscriptionId, resourceGroupName, resourceName, options) || this;
            _this.operations = new Operations(_this);
            _this.replicationAlertSettings = new ReplicationAlertSettings(_this);
            _this.replicationEvents = new ReplicationEvents(_this);
            _this.replicationFabrics = new ReplicationFabrics(_this);
            _this.replicationLogicalNetworks = new ReplicationLogicalNetworks(_this);
            _this.replicationNetworks = new ReplicationNetworks(_this);
            _this.replicationNetworkMappings = new ReplicationNetworkMappings(_this);
            _this.replicationProtectionContainers = new ReplicationProtectionContainers(_this);
            _this.replicationProtectableItems = new ReplicationProtectableItems(_this);
            _this.replicationProtectedItems = new ReplicationProtectedItems(_this);
            _this.recoveryPoints = new RecoveryPoints(_this);
            _this.targetComputeSizes = new TargetComputeSizes(_this);
            _this.replicationProtectionContainerMappings = new ReplicationProtectionContainerMappings(_this);
            _this.replicationRecoveryServicesProviders = new ReplicationRecoveryServicesProviders(_this);
            _this.replicationStorageClassifications = new ReplicationStorageClassifications(_this);
            _this.replicationStorageClassificationMappings = new ReplicationStorageClassificationMappings(_this);
            _this.replicationvCenters = new ReplicationvCenters(_this);
            _this.replicationJobs = new ReplicationJobs(_this);
            _this.replicationPolicies = new ReplicationPolicies(_this);
            _this.replicationRecoveryPlans = new ReplicationRecoveryPlans(_this);
            _this.replicationVaultHealth = new ReplicationVaultHealth(_this);
            return _this;
        }
        return SiteRecoveryManagementClient;
    }(SiteRecoveryManagementClientContext));

    exports.SiteRecoveryManagementClient = SiteRecoveryManagementClient;
    exports.SiteRecoveryManagementClientContext = SiteRecoveryManagementClientContext;
    exports.SiteRecoveryManagementModels = index;
    exports.SiteRecoveryManagementMappers = mappers;
    exports.Operations = Operations;
    exports.ReplicationAlertSettings = ReplicationAlertSettings;
    exports.ReplicationEvents = ReplicationEvents;
    exports.ReplicationFabrics = ReplicationFabrics;
    exports.ReplicationLogicalNetworks = ReplicationLogicalNetworks;
    exports.ReplicationNetworks = ReplicationNetworks;
    exports.ReplicationNetworkMappings = ReplicationNetworkMappings;
    exports.ReplicationProtectionContainers = ReplicationProtectionContainers;
    exports.ReplicationProtectableItems = ReplicationProtectableItems;
    exports.ReplicationProtectedItems = ReplicationProtectedItems;
    exports.RecoveryPoints = RecoveryPoints;
    exports.TargetComputeSizes = TargetComputeSizes;
    exports.ReplicationProtectionContainerMappings = ReplicationProtectionContainerMappings;
    exports.ReplicationRecoveryServicesProviders = ReplicationRecoveryServicesProviders;
    exports.ReplicationStorageClassifications = ReplicationStorageClassifications;
    exports.ReplicationStorageClassificationMappings = ReplicationStorageClassificationMappings;
    exports.ReplicationvCenters = ReplicationvCenters;
    exports.ReplicationJobs = ReplicationJobs;
    exports.ReplicationPolicies = ReplicationPolicies;
    exports.ReplicationRecoveryPlans = ReplicationRecoveryPlans;
    exports.ReplicationVaultHealth = ReplicationVaultHealth;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-recoveryservices-siterecovery.js.map
