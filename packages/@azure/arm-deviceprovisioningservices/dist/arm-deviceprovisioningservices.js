/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmDeviceprovisioningservices = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for IotDpsSku.
     * Possible values include: 'S1'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: IotDpsSku = <IotDpsSku>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var IotDpsSku;
    (function (IotDpsSku) {
        IotDpsSku["S1"] = "S1";
    })(IotDpsSku || (IotDpsSku = {}));
    /**
     * Defines values for State.
     * Possible values include: 'Activating', 'Active', 'Deleting', 'Deleted',
     * 'ActivationFailed', 'DeletionFailed', 'Transitioning', 'Suspending',
     * 'Suspended', 'Resuming', 'FailingOver', 'FailoverFailed'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: State = <State>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var State;
    (function (State) {
        State["Activating"] = "Activating";
        State["Active"] = "Active";
        State["Deleting"] = "Deleting";
        State["Deleted"] = "Deleted";
        State["ActivationFailed"] = "ActivationFailed";
        State["DeletionFailed"] = "DeletionFailed";
        State["Transitioning"] = "Transitioning";
        State["Suspending"] = "Suspending";
        State["Suspended"] = "Suspended";
        State["Resuming"] = "Resuming";
        State["FailingOver"] = "FailingOver";
        State["FailoverFailed"] = "FailoverFailed";
    })(State || (State = {}));
    /**
     * Defines values for AllocationPolicy.
     * Possible values include: 'Hashed', 'GeoLatency', 'Static'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: AllocationPolicy =
     * <AllocationPolicy>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var AllocationPolicy;
    (function (AllocationPolicy) {
        AllocationPolicy["Hashed"] = "Hashed";
        AllocationPolicy["GeoLatency"] = "GeoLatency";
        AllocationPolicy["Static"] = "Static";
    })(AllocationPolicy || (AllocationPolicy = {}));
    /**
     * Defines values for AccessRightsDescription.
     * Possible values include: 'ServiceConfig', 'EnrollmentRead',
     * 'EnrollmentWrite', 'DeviceConnect', 'RegistrationStatusRead',
     * 'RegistrationStatusWrite'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: AccessRightsDescription =
     * <AccessRightsDescription>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var AccessRightsDescription;
    (function (AccessRightsDescription) {
        AccessRightsDescription["ServiceConfig"] = "ServiceConfig";
        AccessRightsDescription["EnrollmentRead"] = "EnrollmentRead";
        AccessRightsDescription["EnrollmentWrite"] = "EnrollmentWrite";
        AccessRightsDescription["DeviceConnect"] = "DeviceConnect";
        AccessRightsDescription["RegistrationStatusRead"] = "RegistrationStatusRead";
        AccessRightsDescription["RegistrationStatusWrite"] = "RegistrationStatusWrite";
    })(AccessRightsDescription || (AccessRightsDescription = {}));
    /**
     * Defines values for NameUnavailabilityReason.
     * Possible values include: 'Invalid', 'AlreadyExists'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: NameUnavailabilityReason =
     * <NameUnavailabilityReason>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var NameUnavailabilityReason;
    (function (NameUnavailabilityReason) {
        NameUnavailabilityReason["Invalid"] = "Invalid";
        NameUnavailabilityReason["AlreadyExists"] = "AlreadyExists";
    })(NameUnavailabilityReason || (NameUnavailabilityReason = {}));
    /**
     * Defines values for CertificatePurpose.
     * Possible values include: 'clientAuthentication', 'serverAuthentication'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: CertificatePurpose =
     * <CertificatePurpose>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var CertificatePurpose;
    (function (CertificatePurpose) {
        CertificatePurpose["ClientAuthentication"] = "clientAuthentication";
        CertificatePurpose["ServerAuthentication"] = "serverAuthentication";
    })(CertificatePurpose || (CertificatePurpose = {}));

    var index = /*#__PURE__*/Object.freeze({
        get IotDpsSku () { return IotDpsSku; },
        get State () { return State; },
        get AllocationPolicy () { return AllocationPolicy; },
        get AccessRightsDescription () { return AccessRightsDescription; },
        get NameUnavailabilityReason () { return NameUnavailabilityReason; },
        get CertificatePurpose () { return CertificatePurpose; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var ErrorMesssage = {
        serializedName: "ErrorMesssage",
        type: {
            name: "Composite",
            className: "ErrorMesssage",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    serializedName: "details",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AsyncOperationResult = {
        serializedName: "AsyncOperationResult",
        type: {
            name: "Composite",
            className: "AsyncOperationResult",
            modelProperties: {
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorMesssage"
                    }
                }
            }
        }
    };
    var CertificateProperties = {
        serializedName: "CertificateProperties",
        type: {
            name: "Composite",
            className: "CertificateProperties",
            modelProperties: {
                subject: {
                    readOnly: true,
                    serializedName: "subject",
                    type: {
                        name: "String"
                    }
                },
                expiry: {
                    readOnly: true,
                    serializedName: "expiry",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                thumbprint: {
                    readOnly: true,
                    serializedName: "thumbprint",
                    type: {
                        name: "String"
                    }
                },
                isVerified: {
                    readOnly: true,
                    serializedName: "isVerified",
                    type: {
                        name: "Boolean"
                    }
                },
                created: {
                    readOnly: true,
                    serializedName: "created",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                updated: {
                    readOnly: true,
                    serializedName: "updated",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var CertificateResponse = {
        serializedName: "CertificateResponse",
        type: {
            name: "Composite",
            className: "CertificateResponse",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "CertificateProperties"
                    }
                },
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CertificateListDescription = {
        serializedName: "CertificateListDescription",
        type: {
            name: "Composite",
            className: "CertificateListDescription",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CertificateResponse"
                            }
                        }
                    }
                }
            }
        }
    };
    var CertificateBodyDescription = {
        serializedName: "CertificateBodyDescription",
        type: {
            name: "Composite",
            className: "CertificateBodyDescription",
            modelProperties: {
                certificate: {
                    serializedName: "certificate",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IotDpsSkuInfo = {
        serializedName: "IotDpsSkuInfo",
        type: {
            name: "Composite",
            className: "IotDpsSkuInfo",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    readOnly: true,
                    serializedName: "tier",
                    type: {
                        name: "String"
                    }
                },
                capacity: {
                    serializedName: "capacity",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var IotHubDefinitionDescription = {
        serializedName: "IotHubDefinitionDescription",
        type: {
            name: "Composite",
            className: "IotHubDefinitionDescription",
            modelProperties: {
                applyAllocationPolicy: {
                    serializedName: "applyAllocationPolicy",
                    type: {
                        name: "Boolean"
                    }
                },
                allocationWeight: {
                    serializedName: "allocationWeight",
                    type: {
                        name: "Number"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                connectionString: {
                    required: true,
                    serializedName: "connectionString",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SharedAccessSignatureAuthorizationRuleAccessRightsDescription = {
        serializedName: "SharedAccessSignatureAuthorizationRule_AccessRightsDescription_",
        type: {
            name: "Composite",
            className: "SharedAccessSignatureAuthorizationRuleAccessRightsDescription",
            modelProperties: {
                keyName: {
                    required: true,
                    serializedName: "keyName",
                    type: {
                        name: "String"
                    }
                },
                primaryKey: {
                    serializedName: "primaryKey",
                    type: {
                        name: "String"
                    }
                },
                secondaryKey: {
                    serializedName: "secondaryKey",
                    type: {
                        name: "String"
                    }
                },
                rights: {
                    required: true,
                    serializedName: "rights",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IotDpsPropertiesDescription = {
        serializedName: "IotDpsPropertiesDescription",
        type: {
            name: "Composite",
            className: "IotDpsPropertiesDescription",
            modelProperties: {
                state: {
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                },
                provisioningState: {
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                iotHubs: {
                    serializedName: "iotHubs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IotHubDefinitionDescription"
                            }
                        }
                    }
                },
                allocationPolicy: {
                    serializedName: "allocationPolicy",
                    type: {
                        name: "String"
                    }
                },
                serviceOperationsHostName: {
                    readOnly: true,
                    serializedName: "serviceOperationsHostName",
                    type: {
                        name: "String"
                    }
                },
                deviceProvisioningHostName: {
                    readOnly: true,
                    serializedName: "deviceProvisioningHostName",
                    type: {
                        name: "String"
                    }
                },
                idScope: {
                    readOnly: true,
                    serializedName: "idScope",
                    type: {
                        name: "String"
                    }
                },
                authorizationPolicies: {
                    serializedName: "authorizationPolicies",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SharedAccessSignatureAuthorizationRuleAccessRightsDescription"
                            }
                        }
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    constraints: {
                        Pattern: /^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$/
                    },
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ProvisioningServiceDescription = {
        serializedName: "ProvisioningServiceDescription",
        type: {
            name: "Composite",
            className: "ProvisioningServiceDescription",
            modelProperties: __assign({}, Resource.type.modelProperties, { etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }, properties: {
                    required: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "IotDpsPropertiesDescription"
                    }
                }, sku: {
                    required: true,
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "IotDpsSkuInfo"
                    }
                } })
        }
    };
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    readOnly: true,
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    readOnly: true,
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    readOnly: true,
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                }
            }
        }
    };
    var ErrorDetails = {
        serializedName: "ErrorDetails",
        type: {
            name: "Composite",
            className: "ErrorDetails",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                httpStatusCode: {
                    readOnly: true,
                    serializedName: "httpStatusCode",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    readOnly: true,
                    serializedName: "details",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IotDpsSkuDefinition = {
        serializedName: "IotDpsSkuDefinition",
        type: {
            name: "Composite",
            className: "IotDpsSkuDefinition",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationInputs = {
        serializedName: "OperationInputs",
        type: {
            name: "Composite",
            className: "OperationInputs",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NameAvailabilityInfo = {
        serializedName: "NameAvailabilityInfo",
        type: {
            name: "Composite",
            className: "NameAvailabilityInfo",
            modelProperties: {
                nameAvailable: {
                    serializedName: "nameAvailable",
                    type: {
                        name: "Boolean"
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TagsResource = {
        serializedName: "TagsResource",
        type: {
            name: "Composite",
            className: "TagsResource",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var VerificationCodeResponseProperties = {
        serializedName: "VerificationCodeResponse_properties",
        type: {
            name: "Composite",
            className: "VerificationCodeResponseProperties",
            modelProperties: {
                verificationCode: {
                    serializedName: "verificationCode",
                    type: {
                        name: "String"
                    }
                },
                subject: {
                    serializedName: "subject",
                    type: {
                        name: "String"
                    }
                },
                expiry: {
                    serializedName: "expiry",
                    type: {
                        name: "String"
                    }
                },
                thumbprint: {
                    serializedName: "thumbprint",
                    type: {
                        name: "String"
                    }
                },
                isVerified: {
                    serializedName: "isVerified",
                    type: {
                        name: "Boolean"
                    }
                },
                created: {
                    serializedName: "created",
                    type: {
                        name: "String"
                    }
                },
                updated: {
                    serializedName: "updated",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VerificationCodeResponse = {
        serializedName: "VerificationCodeResponse",
        type: {
            name: "Composite",
            className: "VerificationCodeResponse",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "VerificationCodeResponseProperties"
                    }
                }
            }
        }
    };
    var VerificationCodeRequest = {
        serializedName: "VerificationCodeRequest",
        type: {
            name: "Composite",
            className: "VerificationCodeRequest",
            modelProperties: {
                certificate: {
                    serializedName: "certificate",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProvisioningServiceDescriptionListResult = {
        serializedName: "ProvisioningServiceDescriptionListResult",
        type: {
            name: "Composite",
            className: "ProvisioningServiceDescriptionListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ProvisioningServiceDescription"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IotDpsSkuDefinitionListResult = {
        serializedName: "IotDpsSkuDefinitionListResult",
        type: {
            name: "Composite",
            className: "IotDpsSkuDefinitionListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IotDpsSkuDefinition"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SharedAccessSignatureAuthorizationRuleListResult = {
        serializedName: "SharedAccessSignatureAuthorizationRuleListResult",
        type: {
            name: "Composite",
            className: "SharedAccessSignatureAuthorizationRuleListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SharedAccessSignatureAuthorizationRuleAccessRightsDescription"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        ErrorMesssage: ErrorMesssage,
        AsyncOperationResult: AsyncOperationResult,
        CertificateProperties: CertificateProperties,
        CertificateResponse: CertificateResponse,
        CertificateListDescription: CertificateListDescription,
        CertificateBodyDescription: CertificateBodyDescription,
        IotDpsSkuInfo: IotDpsSkuInfo,
        IotHubDefinitionDescription: IotHubDefinitionDescription,
        SharedAccessSignatureAuthorizationRuleAccessRightsDescription: SharedAccessSignatureAuthorizationRuleAccessRightsDescription,
        IotDpsPropertiesDescription: IotDpsPropertiesDescription,
        Resource: Resource,
        ProvisioningServiceDescription: ProvisioningServiceDescription,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        ErrorDetails: ErrorDetails,
        IotDpsSkuDefinition: IotDpsSkuDefinition,
        OperationInputs: OperationInputs,
        NameAvailabilityInfo: NameAvailabilityInfo,
        TagsResource: TagsResource,
        VerificationCodeResponseProperties: VerificationCodeResponseProperties,
        VerificationCodeResponse: VerificationCodeResponse,
        VerificationCodeRequest: VerificationCodeRequest,
        OperationListResult: OperationListResult,
        ProvisioningServiceDescriptionListResult: ProvisioningServiceDescriptionListResult,
        IotDpsSkuDefinitionListResult: IotDpsSkuDefinitionListResult,
        SharedAccessSignatureAuthorizationRuleListResult: SharedAccessSignatureAuthorizationRuleListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        OperationListResult: OperationListResult,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        ErrorDetails: ErrorDetails
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var asyncinfo = {
        parameterPath: "asyncinfo",
        mapper: {
            required: true,
            serializedName: "asyncinfo",
            defaultValue: 'true',
            type: {
                name: "String"
            }
        }
    };
    var certificatecreated = {
        parameterPath: [
            "options",
            "certificatecreated"
        ],
        mapper: {
            serializedName: "certificate.created",
            type: {
                name: "DateTime"
            }
        }
    };
    var certificatehasPrivateKey = {
        parameterPath: [
            "options",
            "certificatehasPrivateKey"
        ],
        mapper: {
            serializedName: "certificate.hasPrivateKey",
            type: {
                name: "Boolean"
            }
        }
    };
    var certificateisVerified = {
        parameterPath: [
            "options",
            "certificateisVerified"
        ],
        mapper: {
            serializedName: "certificate.isVerified",
            type: {
                name: "Boolean"
            }
        }
    };
    var certificatelastUpdated = {
        parameterPath: [
            "options",
            "certificatelastUpdated"
        ],
        mapper: {
            serializedName: "certificate.lastUpdated",
            type: {
                name: "DateTime"
            }
        }
    };
    var certificatename = {
        parameterPath: [
            "options",
            "certificatename"
        ],
        mapper: {
            serializedName: "certificate.name",
            type: {
                name: "String"
            }
        }
    };
    var certificateName0 = {
        parameterPath: "certificateName",
        mapper: {
            required: true,
            serializedName: "certificateName",
            type: {
                name: "String"
            }
        }
    };
    var certificateName1 = {
        parameterPath: "certificateName",
        mapper: {
            required: true,
            serializedName: "certificateName",
            constraints: {
                MaxLength: 256
            },
            type: {
                name: "String"
            }
        }
    };
    var certificatenonce = {
        parameterPath: [
            "options",
            "certificatenonce"
        ],
        mapper: {
            serializedName: "certificate.nonce",
            type: {
                name: "String"
            }
        }
    };
    var certificatepurpose = {
        parameterPath: [
            "options",
            "certificatepurpose"
        ],
        mapper: {
            serializedName: "certificate.purpose",
            type: {
                name: "String"
            }
        }
    };
    var certificaterawBytes = {
        parameterPath: [
            "options",
            "certificaterawBytes"
        ],
        mapper: {
            serializedName: "certificate.rawBytes",
            type: {
                name: "ByteArray"
            }
        }
    };
    var ifMatch0 = {
        parameterPath: [
            "options",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch1 = {
        parameterPath: "ifMatch",
        mapper: {
            required: true,
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var keyName = {
        parameterPath: "keyName",
        mapper: {
            required: true,
            serializedName: "keyName",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var operationId = {
        parameterPath: "operationId",
        mapper: {
            required: true,
            serializedName: "operationId",
            type: {
                name: "String"
            }
        }
    };
    var provisioningServiceName = {
        parameterPath: "provisioningServiceName",
        mapper: {
            required: true,
            serializedName: "provisioningServiceName",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {IotDpsClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Devices/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        CertificateResponse: CertificateResponse,
        BaseResource: BaseResource,
        CertificateProperties: CertificateProperties,
        ErrorDetails: ErrorDetails,
        CertificateBodyDescription: CertificateBodyDescription,
        CertificateListDescription: CertificateListDescription,
        VerificationCodeResponse: VerificationCodeResponse,
        VerificationCodeResponseProperties: VerificationCodeResponseProperties,
        VerificationCodeRequest: VerificationCodeRequest,
        Resource: Resource,
        ProvisioningServiceDescription: ProvisioningServiceDescription,
        IotDpsPropertiesDescription: IotDpsPropertiesDescription,
        IotHubDefinitionDescription: IotHubDefinitionDescription,
        SharedAccessSignatureAuthorizationRuleAccessRightsDescription: SharedAccessSignatureAuthorizationRuleAccessRightsDescription,
        IotDpsSkuInfo: IotDpsSkuInfo
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DpsCertificate. */
    var DpsCertificate = /** @class */ (function () {
        /**
         * Create a DpsCertificate.
         * @param {IotDpsClientContext} client Reference to the service client.
         */
        function DpsCertificate(client) {
            this.client = client;
        }
        DpsCertificate.prototype.get = function (certificateName, resourceGroupName$$1, provisioningServiceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                certificateName: certificateName,
                resourceGroupName: resourceGroupName$$1,
                provisioningServiceName: provisioningServiceName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        DpsCertificate.prototype.createOrUpdate = function (resourceGroupName$$1, provisioningServiceName$$1, certificateName, certificateDescription, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                provisioningServiceName: provisioningServiceName$$1,
                certificateName: certificateName,
                certificateDescription: certificateDescription,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        DpsCertificate.prototype.deleteMethod = function (resourceGroupName$$1, ifMatch, provisioningServiceName$$1, certificateName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                ifMatch: ifMatch,
                provisioningServiceName: provisioningServiceName$$1,
                certificateName: certificateName,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        DpsCertificate.prototype.list = function (resourceGroupName$$1, provisioningServiceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                provisioningServiceName: provisioningServiceName$$1,
                options: options
            }, listOperationSpec$1, callback);
        };
        DpsCertificate.prototype.generateVerificationCode = function (certificateName, ifMatch, resourceGroupName$$1, provisioningServiceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                certificateName: certificateName,
                ifMatch: ifMatch,
                resourceGroupName: resourceGroupName$$1,
                provisioningServiceName: provisioningServiceName$$1,
                options: options
            }, generateVerificationCodeOperationSpec, callback);
        };
        DpsCertificate.prototype.verifyCertificate = function (certificateName, ifMatch, request, resourceGroupName$$1, provisioningServiceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                certificateName: certificateName,
                ifMatch: ifMatch,
                request: request,
                resourceGroupName: resourceGroupName$$1,
                provisioningServiceName: provisioningServiceName$$1,
                options: options
            }, verifyCertificateOperationSpec, callback);
        };
        return DpsCertificate;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}",
        urlParameters: [
            certificateName0,
            subscriptionId,
            resourceGroupName,
            provisioningServiceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CertificateResponse
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            provisioningServiceName,
            certificateName1
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "certificateDescription",
            mapper: __assign({}, CertificateBodyDescription, { required: true })
        },
        responses: {
            200: {
                bodyMapper: CertificateResponse
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            provisioningServiceName,
            certificateName0
        ],
        queryParameters: [
            certificatename,
            certificaterawBytes,
            certificateisVerified,
            certificatepurpose,
            certificatecreated,
            certificatelastUpdated,
            certificatehasPrivateKey,
            certificatenonce,
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            provisioningServiceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CertificateListDescription
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };
    var generateVerificationCodeOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}/generateVerificationCode",
        urlParameters: [
            certificateName0,
            subscriptionId,
            resourceGroupName,
            provisioningServiceName
        ],
        queryParameters: [
            certificatename,
            certificaterawBytes,
            certificateisVerified,
            certificatepurpose,
            certificatecreated,
            certificatelastUpdated,
            certificatehasPrivateKey,
            certificatenonce,
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VerificationCodeResponse
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };
    var verifyCertificateOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}/verify",
        urlParameters: [
            certificateName0,
            subscriptionId,
            resourceGroupName,
            provisioningServiceName
        ],
        queryParameters: [
            certificatename,
            certificaterawBytes,
            certificateisVerified,
            certificatepurpose,
            certificatecreated,
            certificatelastUpdated,
            certificatehasPrivateKey,
            certificatenonce,
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "request",
            mapper: __assign({}, VerificationCodeRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: CertificateResponse
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        ProvisioningServiceDescription: ProvisioningServiceDescription,
        Resource: Resource,
        BaseResource: BaseResource,
        IotDpsPropertiesDescription: IotDpsPropertiesDescription,
        IotHubDefinitionDescription: IotHubDefinitionDescription,
        SharedAccessSignatureAuthorizationRuleAccessRightsDescription: SharedAccessSignatureAuthorizationRuleAccessRightsDescription,
        IotDpsSkuInfo: IotDpsSkuInfo,
        ErrorDetails: ErrorDetails,
        TagsResource: TagsResource,
        CloudError: CloudError,
        ProvisioningServiceDescriptionListResult: ProvisioningServiceDescriptionListResult,
        AsyncOperationResult: AsyncOperationResult,
        ErrorMesssage: ErrorMesssage,
        IotDpsSkuDefinitionListResult: IotDpsSkuDefinitionListResult,
        IotDpsSkuDefinition: IotDpsSkuDefinition,
        OperationInputs: OperationInputs,
        NameAvailabilityInfo: NameAvailabilityInfo,
        SharedAccessSignatureAuthorizationRuleListResult: SharedAccessSignatureAuthorizationRuleListResult,
        CertificateResponse: CertificateResponse,
        CertificateProperties: CertificateProperties,
        VerificationCodeResponse: VerificationCodeResponse,
        VerificationCodeResponseProperties: VerificationCodeResponseProperties
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a IotDpsResource. */
    var IotDpsResource = /** @class */ (function () {
        /**
         * Create a IotDpsResource.
         * @param {IotDpsClientContext} client Reference to the service client.
         */
        function IotDpsResource(client) {
            this.client = client;
        }
        IotDpsResource.prototype.get = function (provisioningServiceName$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                provisioningServiceName: provisioningServiceName$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        /**
         * Create or update the metadata of the provisioning service. The usual pattern to modify a
         * property is to retrieve the provisioning service metadata and security metadata, and then
         * combine them with the modified values in a new body to update the provisioning service.
         * @summary Create or update the metadata of the provisioning service.
         * @param resourceGroupName Resource group identifier.
         * @param provisioningServiceName Name of provisioning service to create or update.
         * @param iotDpsDescription Description of the provisioning service to create or update.
         * @param [options] The optional parameters
         * @returns Promise<Models.IotDpsResourceCreateOrUpdateResponse>
         */
        IotDpsResource.prototype.createOrUpdate = function (resourceGroupName$$1, provisioningServiceName$$1, iotDpsDescription, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, provisioningServiceName$$1, iotDpsDescription, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Update an existing provisioning service's tags. to update other fields use the CreateOrUpdate
         * method
         * @summary Update an existing provisioning service's tags.
         * @param resourceGroupName Resource group identifier.
         * @param provisioningServiceName Name of provisioning service to create or update.
         * @param provisioningServiceTags Updated tag information to set into the provisioning service
         * instance.
         * @param [options] The optional parameters
         * @returns Promise<Models.IotDpsResourceUpdateResponse>
         */
        IotDpsResource.prototype.update = function (resourceGroupName$$1, provisioningServiceName$$1, provisioningServiceTags, options) {
            return this.beginUpdate(resourceGroupName$$1, provisioningServiceName$$1, provisioningServiceTags, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the Provisioning Service.
         * @summary Delete the Provisioning Service
         * @param provisioningServiceName Name of provisioning service to delete.
         * @param resourceGroupName Resource group identifier.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        IotDpsResource.prototype.deleteMethod = function (provisioningServiceName$$1, resourceGroupName$$1, options) {
            return this.beginDeleteMethod(provisioningServiceName$$1, resourceGroupName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        IotDpsResource.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec, callback);
        };
        IotDpsResource.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        IotDpsResource.prototype.getOperationResult = function (operationId$$1, resourceGroupName$$1, provisioningServiceName$$1, asyncinfo$$1, options, callback) {
            return this.client.sendOperationRequest({
                operationId: operationId$$1,
                resourceGroupName: resourceGroupName$$1,
                provisioningServiceName: provisioningServiceName$$1,
                asyncinfo: asyncinfo$$1,
                options: options
            }, getOperationResultOperationSpec, callback);
        };
        IotDpsResource.prototype.listValidSkus = function (provisioningServiceName$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                provisioningServiceName: provisioningServiceName$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listValidSkusOperationSpec, callback);
        };
        IotDpsResource.prototype.checkProvisioningServiceNameAvailability = function (argumentsParameter, options, callback) {
            return this.client.sendOperationRequest({
                argumentsParameter: argumentsParameter,
                options: options
            }, checkProvisioningServiceNameAvailabilityOperationSpec, callback);
        };
        IotDpsResource.prototype.listKeys = function (provisioningServiceName$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                provisioningServiceName: provisioningServiceName$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listKeysOperationSpec, callback);
        };
        IotDpsResource.prototype.listKeysForKeyName = function (provisioningServiceName$$1, keyName$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                provisioningServiceName: provisioningServiceName$$1,
                keyName: keyName$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listKeysForKeyNameOperationSpec, callback);
        };
        /**
         * Create or update the metadata of the provisioning service. The usual pattern to modify a
         * property is to retrieve the provisioning service metadata and security metadata, and then
         * combine them with the modified values in a new body to update the provisioning service.
         * @summary Create or update the metadata of the provisioning service.
         * @param resourceGroupName Resource group identifier.
         * @param provisioningServiceName Name of provisioning service to create or update.
         * @param iotDpsDescription Description of the provisioning service to create or update.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        IotDpsResource.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, provisioningServiceName$$1, iotDpsDescription, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                provisioningServiceName: provisioningServiceName$$1,
                iotDpsDescription: iotDpsDescription,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * Update an existing provisioning service's tags. to update other fields use the CreateOrUpdate
         * method
         * @summary Update an existing provisioning service's tags.
         * @param resourceGroupName Resource group identifier.
         * @param provisioningServiceName Name of provisioning service to create or update.
         * @param provisioningServiceTags Updated tag information to set into the provisioning service
         * instance.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        IotDpsResource.prototype.beginUpdate = function (resourceGroupName$$1, provisioningServiceName$$1, provisioningServiceTags, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                provisioningServiceName: provisioningServiceName$$1,
                provisioningServiceTags: provisioningServiceTags,
                options: options
            }, beginUpdateOperationSpec, options);
        };
        /**
         * Deletes the Provisioning Service.
         * @summary Delete the Provisioning Service
         * @param provisioningServiceName Name of provisioning service to delete.
         * @param resourceGroupName Resource group identifier.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        IotDpsResource.prototype.beginDeleteMethod = function (provisioningServiceName$$1, resourceGroupName$$1, options) {
            return this.client.sendLRORequest({
                provisioningServiceName: provisioningServiceName$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        IotDpsResource.prototype.listBySubscriptionNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listBySubscriptionNextOperationSpec, callback);
        };
        IotDpsResource.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        IotDpsResource.prototype.listValidSkusNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listValidSkusNextOperationSpec, callback);
        };
        IotDpsResource.prototype.listKeysNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listKeysNextOperationSpec, callback);
        };
        return IotDpsResource;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}",
        urlParameters: [
            provisioningServiceName,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProvisioningServiceDescription
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$2
    };
    var listBySubscriptionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Devices/provisioningServices",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProvisioningServiceDescriptionListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$2
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProvisioningServiceDescriptionListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$2
    };
    var getOperationResultOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/operationresults/{operationId}",
        urlParameters: [
            operationId,
            subscriptionId,
            resourceGroupName,
            provisioningServiceName
        ],
        queryParameters: [
            asyncinfo,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AsyncOperationResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$2
    };
    var listValidSkusOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/skus",
        urlParameters: [
            provisioningServiceName,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IotDpsSkuDefinitionListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$2
    };
    var checkProvisioningServiceNameAvailabilityOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Devices/checkProvisioningServiceNameAvailability",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "argumentsParameter",
            mapper: __assign({}, OperationInputs, { required: true })
        },
        responses: {
            200: {
                bodyMapper: NameAvailabilityInfo
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$2
    };
    var listKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/listkeys",
        urlParameters: [
            provisioningServiceName,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SharedAccessSignatureAuthorizationRuleListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$2
    };
    var listKeysForKeyNameOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/keys/{keyName}/listkeys",
        urlParameters: [
            provisioningServiceName,
            keyName,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SharedAccessSignatureAuthorizationRuleAccessRightsDescription
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$2
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            provisioningServiceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "iotDpsDescription",
            mapper: __assign({}, ProvisioningServiceDescription, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ProvisioningServiceDescription
            },
            201: {
                bodyMapper: ProvisioningServiceDescription
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$2
    };
    var beginUpdateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            provisioningServiceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "provisioningServiceTags",
            mapper: __assign({}, TagsResource, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ProvisioningServiceDescription
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}",
        urlParameters: [
            provisioningServiceName,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            404: {},
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$2
    };
    var listBySubscriptionNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProvisioningServiceDescriptionListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$2
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProvisioningServiceDescriptionListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$2
    };
    var listValidSkusNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IotDpsSkuDefinitionListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$2
    };
    var listKeysNextOperationSpec = {
        httpMethod: "POST",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SharedAccessSignatureAuthorizationRuleListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-deviceprovisioningservices";
    var packageVersion = "1.0.0";
    var IotDpsClientContext = /** @class */ (function (_super) {
        __extends(IotDpsClientContext, _super);
        /**
         * Initializes a new instance of the IotDpsClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The subscription identifier.
         * @param [options] The parameter options
         */
        function IotDpsClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2018-01-22';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return IotDpsClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var IotDpsClient = /** @class */ (function (_super) {
        __extends(IotDpsClient, _super);
        /**
         * Initializes a new instance of the IotDpsClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The subscription identifier.
         * @param [options] The parameter options
         */
        function IotDpsClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.operations = new Operations(_this);
            _this.dpsCertificate = new DpsCertificate(_this);
            _this.iotDpsResource = new IotDpsResource(_this);
            return _this;
        }
        return IotDpsClient;
    }(IotDpsClientContext));

    exports.IotDpsClient = IotDpsClient;
    exports.IotDpsClientContext = IotDpsClientContext;
    exports.IotDpsModels = index;
    exports.IotDpsMappers = mappers;
    exports.Operations = Operations;
    exports.DpsCertificate = DpsCertificate;
    exports.IotDpsResource = IotDpsResource;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-deviceprovisioningservices.js.map
