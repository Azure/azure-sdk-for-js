/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/dpsCertificateMappers";
import * as Parameters from "../models/parameters";
import { IotDpsClientContext } from "../iotDpsClientContext";

/** Class representing a DpsCertificate. */
export class DpsCertificate {
  private readonly client: IotDpsClientContext;

  /**
   * Create a DpsCertificate.
   * @param {IotDpsClientContext} client Reference to the service client.
   */
  constructor(client: IotDpsClientContext) {
    this.client = client;
  }

  /**
   * Get the certificate from the provisioning service.
   * @param certificateName Name of the certificate to retrieve.
   * @param resourceGroupName Resource group identifier.
   * @param provisioningServiceName Name of the provisioning service the certificate is associated
   * with.
   * @param [options] The optional parameters
   * @returns Promise<Models.DpsCertificateGetResponse>
   */
  get(certificateName: string, resourceGroupName: string, provisioningServiceName: string, options?: Models.DpsCertificateGetOptionalParams): Promise<Models.DpsCertificateGetResponse>;
  /**
   * @param certificateName Name of the certificate to retrieve.
   * @param resourceGroupName Resource group identifier.
   * @param provisioningServiceName Name of the provisioning service the certificate is associated
   * with.
   * @param callback The callback
   */
  get(certificateName: string, resourceGroupName: string, provisioningServiceName: string, callback: msRest.ServiceCallback<Models.CertificateResponse>): void;
  /**
   * @param certificateName Name of the certificate to retrieve.
   * @param resourceGroupName Resource group identifier.
   * @param provisioningServiceName Name of the provisioning service the certificate is associated
   * with.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(certificateName: string, resourceGroupName: string, provisioningServiceName: string, options: Models.DpsCertificateGetOptionalParams, callback: msRest.ServiceCallback<Models.CertificateResponse>): void;
  get(certificateName: string, resourceGroupName: string, provisioningServiceName: string, options?: Models.DpsCertificateGetOptionalParams | msRest.ServiceCallback<Models.CertificateResponse>, callback?: msRest.ServiceCallback<Models.CertificateResponse>): Promise<Models.DpsCertificateGetResponse> {
    return this.client.sendOperationRequest(
      {
        certificateName,
        resourceGroupName,
        provisioningServiceName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.DpsCertificateGetResponse>;
  }

  /**
   * Add new certificate or update an existing certificate.
   * @summary Upload the certificate to the provisioning service.
   * @param resourceGroupName Resource group identifier.
   * @param provisioningServiceName The name of the provisioning service.
   * @param certificateName The name of the certificate create or update.
   * @param certificateDescription The certificate body.
   * @param [options] The optional parameters
   * @returns Promise<Models.DpsCertificateCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, provisioningServiceName: string, certificateName: string, certificateDescription: Models.CertificateBodyDescription, options?: Models.DpsCertificateCreateOrUpdateOptionalParams): Promise<Models.DpsCertificateCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName Resource group identifier.
   * @param provisioningServiceName The name of the provisioning service.
   * @param certificateName The name of the certificate create or update.
   * @param certificateDescription The certificate body.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, provisioningServiceName: string, certificateName: string, certificateDescription: Models.CertificateBodyDescription, callback: msRest.ServiceCallback<Models.CertificateResponse>): void;
  /**
   * @param resourceGroupName Resource group identifier.
   * @param provisioningServiceName The name of the provisioning service.
   * @param certificateName The name of the certificate create or update.
   * @param certificateDescription The certificate body.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, provisioningServiceName: string, certificateName: string, certificateDescription: Models.CertificateBodyDescription, options: Models.DpsCertificateCreateOrUpdateOptionalParams, callback: msRest.ServiceCallback<Models.CertificateResponse>): void;
  createOrUpdate(resourceGroupName: string, provisioningServiceName: string, certificateName: string, certificateDescription: Models.CertificateBodyDescription, options?: Models.DpsCertificateCreateOrUpdateOptionalParams | msRest.ServiceCallback<Models.CertificateResponse>, callback?: msRest.ServiceCallback<Models.CertificateResponse>): Promise<Models.DpsCertificateCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        provisioningServiceName,
        certificateName,
        certificateDescription,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.DpsCertificateCreateOrUpdateResponse>;
  }

  /**
   * Deletes the specified certificate assosciated with the Provisioning Service
   * @summary Delete the Provisioning Service Certificate.
   * @param resourceGroupName Resource group identifier.
   * @param ifMatch ETag of the certificate
   * @param provisioningServiceName The name of the provisioning service.
   * @param certificateName This is a mandatory field, and is the logical name of the certificate
   * that the provisioning service will access by.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, ifMatch: string, provisioningServiceName: string, certificateName: string, options?: Models.DpsCertificateDeleteMethodOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Resource group identifier.
   * @param ifMatch ETag of the certificate
   * @param provisioningServiceName The name of the provisioning service.
   * @param certificateName This is a mandatory field, and is the logical name of the certificate
   * that the provisioning service will access by.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, ifMatch: string, provisioningServiceName: string, certificateName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Resource group identifier.
   * @param ifMatch ETag of the certificate
   * @param provisioningServiceName The name of the provisioning service.
   * @param certificateName This is a mandatory field, and is the logical name of the certificate
   * that the provisioning service will access by.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, ifMatch: string, provisioningServiceName: string, certificateName: string, options: Models.DpsCertificateDeleteMethodOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, ifMatch: string, provisioningServiceName: string, certificateName: string, options?: Models.DpsCertificateDeleteMethodOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        ifMatch,
        provisioningServiceName,
        certificateName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Get all the certificates tied to the provisioning service.
   * @param resourceGroupName Name of resource group.
   * @param provisioningServiceName Name of provisioning service to retrieve certificates for.
   * @param [options] The optional parameters
   * @returns Promise<Models.DpsCertificateListResponse>
   */
  list(resourceGroupName: string, provisioningServiceName: string, options?: msRest.RequestOptionsBase): Promise<Models.DpsCertificateListResponse>;
  /**
   * @param resourceGroupName Name of resource group.
   * @param provisioningServiceName Name of provisioning service to retrieve certificates for.
   * @param callback The callback
   */
  list(resourceGroupName: string, provisioningServiceName: string, callback: msRest.ServiceCallback<Models.CertificateListDescription>): void;
  /**
   * @param resourceGroupName Name of resource group.
   * @param provisioningServiceName Name of provisioning service to retrieve certificates for.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, provisioningServiceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateListDescription>): void;
  list(resourceGroupName: string, provisioningServiceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CertificateListDescription>, callback?: msRest.ServiceCallback<Models.CertificateListDescription>): Promise<Models.DpsCertificateListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        provisioningServiceName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.DpsCertificateListResponse>;
  }

  /**
   * Generate verification code for Proof of Possession.
   * @param certificateName The mandatory logical name of the certificate, that the provisioning
   * service uses to access.
   * @param ifMatch ETag of the certificate. This is required to update an existing certificate, and
   * ignored while creating a brand new certificate.
   * @param resourceGroupName name of resource group.
   * @param provisioningServiceName Name of provisioning service.
   * @param [options] The optional parameters
   * @returns Promise<Models.DpsCertificateGenerateVerificationCodeResponse>
   */
  generateVerificationCode(certificateName: string, ifMatch: string, resourceGroupName: string, provisioningServiceName: string, options?: Models.DpsCertificateGenerateVerificationCodeOptionalParams): Promise<Models.DpsCertificateGenerateVerificationCodeResponse>;
  /**
   * @param certificateName The mandatory logical name of the certificate, that the provisioning
   * service uses to access.
   * @param ifMatch ETag of the certificate. This is required to update an existing certificate, and
   * ignored while creating a brand new certificate.
   * @param resourceGroupName name of resource group.
   * @param provisioningServiceName Name of provisioning service.
   * @param callback The callback
   */
  generateVerificationCode(certificateName: string, ifMatch: string, resourceGroupName: string, provisioningServiceName: string, callback: msRest.ServiceCallback<Models.VerificationCodeResponse>): void;
  /**
   * @param certificateName The mandatory logical name of the certificate, that the provisioning
   * service uses to access.
   * @param ifMatch ETag of the certificate. This is required to update an existing certificate, and
   * ignored while creating a brand new certificate.
   * @param resourceGroupName name of resource group.
   * @param provisioningServiceName Name of provisioning service.
   * @param options The optional parameters
   * @param callback The callback
   */
  generateVerificationCode(certificateName: string, ifMatch: string, resourceGroupName: string, provisioningServiceName: string, options: Models.DpsCertificateGenerateVerificationCodeOptionalParams, callback: msRest.ServiceCallback<Models.VerificationCodeResponse>): void;
  generateVerificationCode(certificateName: string, ifMatch: string, resourceGroupName: string, provisioningServiceName: string, options?: Models.DpsCertificateGenerateVerificationCodeOptionalParams | msRest.ServiceCallback<Models.VerificationCodeResponse>, callback?: msRest.ServiceCallback<Models.VerificationCodeResponse>): Promise<Models.DpsCertificateGenerateVerificationCodeResponse> {
    return this.client.sendOperationRequest(
      {
        certificateName,
        ifMatch,
        resourceGroupName,
        provisioningServiceName,
        options
      },
      generateVerificationCodeOperationSpec,
      callback) as Promise<Models.DpsCertificateGenerateVerificationCodeResponse>;
  }

  /**
   * Verifies the certificate's private key possession by providing the leaf cert issued by the
   * verifying pre uploaded certificate.
   * @summary Verify certificate's private key possession.
   * @param certificateName The mandatory logical name of the certificate, that the provisioning
   * service uses to access.
   * @param ifMatch ETag of the certificate.
   * @param request The name of the certificate
   * @param resourceGroupName Resource group name.
   * @param provisioningServiceName Provisioning service name.
   * @param [options] The optional parameters
   * @returns Promise<Models.DpsCertificateVerifyCertificateResponse>
   */
  verifyCertificate(certificateName: string, ifMatch: string, request: Models.VerificationCodeRequest, resourceGroupName: string, provisioningServiceName: string, options?: Models.DpsCertificateVerifyCertificateOptionalParams): Promise<Models.DpsCertificateVerifyCertificateResponse>;
  /**
   * @param certificateName The mandatory logical name of the certificate, that the provisioning
   * service uses to access.
   * @param ifMatch ETag of the certificate.
   * @param request The name of the certificate
   * @param resourceGroupName Resource group name.
   * @param provisioningServiceName Provisioning service name.
   * @param callback The callback
   */
  verifyCertificate(certificateName: string, ifMatch: string, request: Models.VerificationCodeRequest, resourceGroupName: string, provisioningServiceName: string, callback: msRest.ServiceCallback<Models.CertificateResponse>): void;
  /**
   * @param certificateName The mandatory logical name of the certificate, that the provisioning
   * service uses to access.
   * @param ifMatch ETag of the certificate.
   * @param request The name of the certificate
   * @param resourceGroupName Resource group name.
   * @param provisioningServiceName Provisioning service name.
   * @param options The optional parameters
   * @param callback The callback
   */
  verifyCertificate(certificateName: string, ifMatch: string, request: Models.VerificationCodeRequest, resourceGroupName: string, provisioningServiceName: string, options: Models.DpsCertificateVerifyCertificateOptionalParams, callback: msRest.ServiceCallback<Models.CertificateResponse>): void;
  verifyCertificate(certificateName: string, ifMatch: string, request: Models.VerificationCodeRequest, resourceGroupName: string, provisioningServiceName: string, options?: Models.DpsCertificateVerifyCertificateOptionalParams | msRest.ServiceCallback<Models.CertificateResponse>, callback?: msRest.ServiceCallback<Models.CertificateResponse>): Promise<Models.DpsCertificateVerifyCertificateResponse> {
    return this.client.sendOperationRequest(
      {
        certificateName,
        ifMatch,
        request,
        resourceGroupName,
        provisioningServiceName,
        options
      },
      verifyCertificateOperationSpec,
      callback) as Promise<Models.DpsCertificateVerifyCertificateResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}",
  urlParameters: [
    Parameters.certificateName0,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.provisioningServiceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch0,
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CertificateResponse
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.provisioningServiceName,
    Parameters.certificateName1
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch0,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "certificateDescription",
    mapper: {
      ...Mappers.CertificateBodyDescription,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CertificateResponse
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.provisioningServiceName,
    Parameters.certificateName0
  ],
  queryParameters: [
    Parameters.certificatename,
    Parameters.certificaterawBytes,
    Parameters.certificateisVerified,
    Parameters.certificatepurpose,
    Parameters.certificatecreated,
    Parameters.certificatelastUpdated,
    Parameters.certificatehasPrivateKey,
    Parameters.certificatenonce,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch1,
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.provisioningServiceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CertificateListDescription
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const generateVerificationCodeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}/generateVerificationCode",
  urlParameters: [
    Parameters.certificateName0,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.provisioningServiceName
  ],
  queryParameters: [
    Parameters.certificatename,
    Parameters.certificaterawBytes,
    Parameters.certificateisVerified,
    Parameters.certificatepurpose,
    Parameters.certificatecreated,
    Parameters.certificatelastUpdated,
    Parameters.certificatehasPrivateKey,
    Parameters.certificatenonce,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch1,
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VerificationCodeResponse
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const verifyCertificateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}/verify",
  urlParameters: [
    Parameters.certificateName0,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.provisioningServiceName
  ],
  queryParameters: [
    Parameters.certificatename,
    Parameters.certificaterawBytes,
    Parameters.certificateisVerified,
    Parameters.certificatepurpose,
    Parameters.certificatecreated,
    Parameters.certificatelastUpdated,
    Parameters.certificatehasPrivateKey,
    Parameters.certificatenonce,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch1,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.VerificationCodeRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CertificateResponse
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};
