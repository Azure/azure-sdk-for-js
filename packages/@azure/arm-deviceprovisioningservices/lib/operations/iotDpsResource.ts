/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/iotDpsResourceMappers";
import * as Parameters from "../models/parameters";
import { IotDpsClientContext } from "../iotDpsClientContext";

/** Class representing a IotDpsResource. */
export class IotDpsResource {
  private readonly client: IotDpsClientContext;

  /**
   * Create a IotDpsResource.
   * @param {IotDpsClientContext} client Reference to the service client.
   */
  constructor(client: IotDpsClientContext) {
    this.client = client;
  }

  /**
   * Get the metadata of the provisioning service without SAS keys.
   * @summary Get the non-security related metadata of the provisioning service.
   * @param provisioningServiceName Name of the provisioning service to retrieve.
   * @param resourceGroupName Resource group name.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotDpsResourceGetResponse>
   */
  get(provisioningServiceName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.IotDpsResourceGetResponse>;
  /**
   * @param provisioningServiceName Name of the provisioning service to retrieve.
   * @param resourceGroupName Resource group name.
   * @param callback The callback
   */
  get(provisioningServiceName: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.ProvisioningServiceDescription>): void;
  /**
   * @param provisioningServiceName Name of the provisioning service to retrieve.
   * @param resourceGroupName Resource group name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(provisioningServiceName: string, resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProvisioningServiceDescription>): void;
  get(provisioningServiceName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProvisioningServiceDescription>, callback?: msRest.ServiceCallback<Models.ProvisioningServiceDescription>): Promise<Models.IotDpsResourceGetResponse> {
    return this.client.sendOperationRequest(
      {
        provisioningServiceName,
        resourceGroupName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.IotDpsResourceGetResponse>;
  }

  /**
   * Create or update the metadata of the provisioning service. The usual pattern to modify a
   * property is to retrieve the provisioning service metadata and security metadata, and then
   * combine them with the modified values in a new body to update the provisioning service.
   * @summary Create or update the metadata of the provisioning service.
   * @param resourceGroupName Resource group identifier.
   * @param provisioningServiceName Name of provisioning service to create or update.
   * @param iotDpsDescription Description of the provisioning service to create or update.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotDpsResourceCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, provisioningServiceName: string, iotDpsDescription: Models.ProvisioningServiceDescription, options?: msRest.RequestOptionsBase): Promise<Models.IotDpsResourceCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,provisioningServiceName,iotDpsDescription,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.IotDpsResourceCreateOrUpdateResponse>;
  }

  /**
   * Update an existing provisioning service's tags. to update other fields use the CreateOrUpdate
   * method
   * @summary Update an existing provisioning service's tags.
   * @param resourceGroupName Resource group identifier.
   * @param provisioningServiceName Name of provisioning service to create or update.
   * @param provisioningServiceTags Updated tag information to set into the provisioning service
   * instance.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotDpsResourceUpdateResponse>
   */
  update(resourceGroupName: string, provisioningServiceName: string, provisioningServiceTags: Models.TagsResource, options?: msRest.RequestOptionsBase): Promise<Models.IotDpsResourceUpdateResponse> {
    return this.beginUpdate(resourceGroupName,provisioningServiceName,provisioningServiceTags,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.IotDpsResourceUpdateResponse>;
  }

  /**
   * Deletes the Provisioning Service.
   * @summary Delete the Provisioning Service
   * @param provisioningServiceName Name of provisioning service to delete.
   * @param resourceGroupName Resource group identifier.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(provisioningServiceName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(provisioningServiceName,resourceGroupName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * List all the provisioning services for a given subscription id.
   * @summary Get all the provisioning services in a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotDpsResourceListBySubscriptionResponse>
   */
  listBySubscription(options?: msRest.RequestOptionsBase): Promise<Models.IotDpsResourceListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.ProvisioningServiceDescriptionListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProvisioningServiceDescriptionListResult>): void;
  listBySubscription(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProvisioningServiceDescriptionListResult>, callback?: msRest.ServiceCallback<Models.ProvisioningServiceDescriptionListResult>): Promise<Models.IotDpsResourceListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.IotDpsResourceListBySubscriptionResponse>;
  }

  /**
   * Get a list of all provisioning services in the given resource group.
   * @param resourceGroupName Resource group identifier.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotDpsResourceListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.IotDpsResourceListByResourceGroupResponse>;
  /**
   * @param resourceGroupName Resource group identifier.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.ProvisioningServiceDescriptionListResult>): void;
  /**
   * @param resourceGroupName Resource group identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProvisioningServiceDescriptionListResult>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProvisioningServiceDescriptionListResult>, callback?: msRest.ServiceCallback<Models.ProvisioningServiceDescriptionListResult>): Promise<Models.IotDpsResourceListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.IotDpsResourceListByResourceGroupResponse>;
  }

  /**
   * Gets the status of a long running operation, such as create, update or delete a provisioning
   * service.
   * @param operationId Operation id corresponding to long running operation. Use this to poll for
   * the status.
   * @param resourceGroupName Resource group identifier.
   * @param provisioningServiceName Name of provisioning service that the operation is running on.
   * @param asyncinfo Async header used to poll on the status of the operation, obtained while
   * creating the long running operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotDpsResourceGetOperationResultResponse>
   */
  getOperationResult(operationId: string, resourceGroupName: string, provisioningServiceName: string, asyncinfo: string, options?: msRest.RequestOptionsBase): Promise<Models.IotDpsResourceGetOperationResultResponse>;
  /**
   * @param operationId Operation id corresponding to long running operation. Use this to poll for
   * the status.
   * @param resourceGroupName Resource group identifier.
   * @param provisioningServiceName Name of provisioning service that the operation is running on.
   * @param asyncinfo Async header used to poll on the status of the operation, obtained while
   * creating the long running operation.
   * @param callback The callback
   */
  getOperationResult(operationId: string, resourceGroupName: string, provisioningServiceName: string, asyncinfo: string, callback: msRest.ServiceCallback<Models.AsyncOperationResult>): void;
  /**
   * @param operationId Operation id corresponding to long running operation. Use this to poll for
   * the status.
   * @param resourceGroupName Resource group identifier.
   * @param provisioningServiceName Name of provisioning service that the operation is running on.
   * @param asyncinfo Async header used to poll on the status of the operation, obtained while
   * creating the long running operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getOperationResult(operationId: string, resourceGroupName: string, provisioningServiceName: string, asyncinfo: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AsyncOperationResult>): void;
  getOperationResult(operationId: string, resourceGroupName: string, provisioningServiceName: string, asyncinfo: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AsyncOperationResult>, callback?: msRest.ServiceCallback<Models.AsyncOperationResult>): Promise<Models.IotDpsResourceGetOperationResultResponse> {
    return this.client.sendOperationRequest(
      {
        operationId,
        resourceGroupName,
        provisioningServiceName,
        asyncinfo,
        options
      },
      getOperationResultOperationSpec,
      callback) as Promise<Models.IotDpsResourceGetOperationResultResponse>;
  }

  /**
   * Gets the list of valid SKUs and tiers for a provisioning service.
   * @summary Get the list of valid SKUs for a provisioning service.
   * @param provisioningServiceName Name of provisioning service.
   * @param resourceGroupName Name of resource group.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotDpsResourceListValidSkusResponse>
   */
  listValidSkus(provisioningServiceName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.IotDpsResourceListValidSkusResponse>;
  /**
   * @param provisioningServiceName Name of provisioning service.
   * @param resourceGroupName Name of resource group.
   * @param callback The callback
   */
  listValidSkus(provisioningServiceName: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.IotDpsSkuDefinitionListResult>): void;
  /**
   * @param provisioningServiceName Name of provisioning service.
   * @param resourceGroupName Name of resource group.
   * @param options The optional parameters
   * @param callback The callback
   */
  listValidSkus(provisioningServiceName: string, resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IotDpsSkuDefinitionListResult>): void;
  listValidSkus(provisioningServiceName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IotDpsSkuDefinitionListResult>, callback?: msRest.ServiceCallback<Models.IotDpsSkuDefinitionListResult>): Promise<Models.IotDpsResourceListValidSkusResponse> {
    return this.client.sendOperationRequest(
      {
        provisioningServiceName,
        resourceGroupName,
        options
      },
      listValidSkusOperationSpec,
      callback) as Promise<Models.IotDpsResourceListValidSkusResponse>;
  }

  /**
   * Check if a provisioning service name is available. This will validate if the name is
   * syntactically valid and if the name is usable
   * @summary Check if a provisioning service name is available.
   * @param argumentsParameter Set the name parameter in the OperationInputs structure to the name of
   * the provisioning service to check.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotDpsResourceCheckProvisioningServiceNameAvailabilityResponse>
   */
  checkProvisioningServiceNameAvailability(argumentsParameter: Models.OperationInputs, options?: msRest.RequestOptionsBase): Promise<Models.IotDpsResourceCheckProvisioningServiceNameAvailabilityResponse>;
  /**
   * @param argumentsParameter Set the name parameter in the OperationInputs structure to the name of
   * the provisioning service to check.
   * @param callback The callback
   */
  checkProvisioningServiceNameAvailability(argumentsParameter: Models.OperationInputs, callback: msRest.ServiceCallback<Models.NameAvailabilityInfo>): void;
  /**
   * @param argumentsParameter Set the name parameter in the OperationInputs structure to the name of
   * the provisioning service to check.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkProvisioningServiceNameAvailability(argumentsParameter: Models.OperationInputs, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NameAvailabilityInfo>): void;
  checkProvisioningServiceNameAvailability(argumentsParameter: Models.OperationInputs, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NameAvailabilityInfo>, callback?: msRest.ServiceCallback<Models.NameAvailabilityInfo>): Promise<Models.IotDpsResourceCheckProvisioningServiceNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      {
        argumentsParameter,
        options
      },
      checkProvisioningServiceNameAvailabilityOperationSpec,
      callback) as Promise<Models.IotDpsResourceCheckProvisioningServiceNameAvailabilityResponse>;
  }

  /**
   * List the primary and secondary keys for a provisioning service.
   * @summary Get the security metadata for a provisioning service.
   * @param provisioningServiceName The provisioning service name to get the shared access keys for.
   * @param resourceGroupName resource group name
   * @param [options] The optional parameters
   * @returns Promise<Models.IotDpsResourceListKeysResponse>
   */
  listKeys(provisioningServiceName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.IotDpsResourceListKeysResponse>;
  /**
   * @param provisioningServiceName The provisioning service name to get the shared access keys for.
   * @param resourceGroupName resource group name
   * @param callback The callback
   */
  listKeys(provisioningServiceName: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.SharedAccessSignatureAuthorizationRuleListResult>): void;
  /**
   * @param provisioningServiceName The provisioning service name to get the shared access keys for.
   * @param resourceGroupName resource group name
   * @param options The optional parameters
   * @param callback The callback
   */
  listKeys(provisioningServiceName: string, resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SharedAccessSignatureAuthorizationRuleListResult>): void;
  listKeys(provisioningServiceName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SharedAccessSignatureAuthorizationRuleListResult>, callback?: msRest.ServiceCallback<Models.SharedAccessSignatureAuthorizationRuleListResult>): Promise<Models.IotDpsResourceListKeysResponse> {
    return this.client.sendOperationRequest(
      {
        provisioningServiceName,
        resourceGroupName,
        options
      },
      listKeysOperationSpec,
      callback) as Promise<Models.IotDpsResourceListKeysResponse>;
  }

  /**
   * List primary and secondary keys for a specific key name
   * @summary Get a shared access policy by name from a provisioning service.
   * @param provisioningServiceName Name of the provisioning service.
   * @param keyName Logical key name to get key-values for.
   * @param resourceGroupName The name of the resource group that contains the provisioning service.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotDpsResourceListKeysForKeyNameResponse>
   */
  listKeysForKeyName(provisioningServiceName: string, keyName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.IotDpsResourceListKeysForKeyNameResponse>;
  /**
   * @param provisioningServiceName Name of the provisioning service.
   * @param keyName Logical key name to get key-values for.
   * @param resourceGroupName The name of the resource group that contains the provisioning service.
   * @param callback The callback
   */
  listKeysForKeyName(provisioningServiceName: string, keyName: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.SharedAccessSignatureAuthorizationRuleAccessRightsDescription>): void;
  /**
   * @param provisioningServiceName Name of the provisioning service.
   * @param keyName Logical key name to get key-values for.
   * @param resourceGroupName The name of the resource group that contains the provisioning service.
   * @param options The optional parameters
   * @param callback The callback
   */
  listKeysForKeyName(provisioningServiceName: string, keyName: string, resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SharedAccessSignatureAuthorizationRuleAccessRightsDescription>): void;
  listKeysForKeyName(provisioningServiceName: string, keyName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SharedAccessSignatureAuthorizationRuleAccessRightsDescription>, callback?: msRest.ServiceCallback<Models.SharedAccessSignatureAuthorizationRuleAccessRightsDescription>): Promise<Models.IotDpsResourceListKeysForKeyNameResponse> {
    return this.client.sendOperationRequest(
      {
        provisioningServiceName,
        keyName,
        resourceGroupName,
        options
      },
      listKeysForKeyNameOperationSpec,
      callback) as Promise<Models.IotDpsResourceListKeysForKeyNameResponse>;
  }

  /**
   * Create or update the metadata of the provisioning service. The usual pattern to modify a
   * property is to retrieve the provisioning service metadata and security metadata, and then
   * combine them with the modified values in a new body to update the provisioning service.
   * @summary Create or update the metadata of the provisioning service.
   * @param resourceGroupName Resource group identifier.
   * @param provisioningServiceName Name of provisioning service to create or update.
   * @param iotDpsDescription Description of the provisioning service to create or update.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, provisioningServiceName: string, iotDpsDescription: Models.ProvisioningServiceDescription, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        provisioningServiceName,
        iotDpsDescription,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Update an existing provisioning service's tags. to update other fields use the CreateOrUpdate
   * method
   * @summary Update an existing provisioning service's tags.
   * @param resourceGroupName Resource group identifier.
   * @param provisioningServiceName Name of provisioning service to create or update.
   * @param provisioningServiceTags Updated tag information to set into the provisioning service
   * instance.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(resourceGroupName: string, provisioningServiceName: string, provisioningServiceTags: Models.TagsResource, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        provisioningServiceName,
        provisioningServiceTags,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Deletes the Provisioning Service.
   * @summary Delete the Provisioning Service
   * @param provisioningServiceName Name of provisioning service to delete.
   * @param resourceGroupName Resource group identifier.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(provisioningServiceName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        provisioningServiceName,
        resourceGroupName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * List all the provisioning services for a given subscription id.
   * @summary Get all the provisioning services in a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotDpsResourceListBySubscriptionNextResponse>
   */
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.IotDpsResourceListBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProvisioningServiceDescriptionListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProvisioningServiceDescriptionListResult>): void;
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProvisioningServiceDescriptionListResult>, callback?: msRest.ServiceCallback<Models.ProvisioningServiceDescriptionListResult>): Promise<Models.IotDpsResourceListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBySubscriptionNextOperationSpec,
      callback) as Promise<Models.IotDpsResourceListBySubscriptionNextResponse>;
  }

  /**
   * Get a list of all provisioning services in the given resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotDpsResourceListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.IotDpsResourceListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProvisioningServiceDescriptionListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProvisioningServiceDescriptionListResult>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProvisioningServiceDescriptionListResult>, callback?: msRest.ServiceCallback<Models.ProvisioningServiceDescriptionListResult>): Promise<Models.IotDpsResourceListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.IotDpsResourceListByResourceGroupNextResponse>;
  }

  /**
   * Gets the list of valid SKUs and tiers for a provisioning service.
   * @summary Get the list of valid SKUs for a provisioning service.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotDpsResourceListValidSkusNextResponse>
   */
  listValidSkusNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.IotDpsResourceListValidSkusNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listValidSkusNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.IotDpsSkuDefinitionListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listValidSkusNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IotDpsSkuDefinitionListResult>): void;
  listValidSkusNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IotDpsSkuDefinitionListResult>, callback?: msRest.ServiceCallback<Models.IotDpsSkuDefinitionListResult>): Promise<Models.IotDpsResourceListValidSkusNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listValidSkusNextOperationSpec,
      callback) as Promise<Models.IotDpsResourceListValidSkusNextResponse>;
  }

  /**
   * List the primary and secondary keys for a provisioning service.
   * @summary Get the security metadata for a provisioning service.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotDpsResourceListKeysNextResponse>
   */
  listKeysNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.IotDpsResourceListKeysNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listKeysNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SharedAccessSignatureAuthorizationRuleListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listKeysNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SharedAccessSignatureAuthorizationRuleListResult>): void;
  listKeysNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SharedAccessSignatureAuthorizationRuleListResult>, callback?: msRest.ServiceCallback<Models.SharedAccessSignatureAuthorizationRuleListResult>): Promise<Models.IotDpsResourceListKeysNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listKeysNextOperationSpec,
      callback) as Promise<Models.IotDpsResourceListKeysNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}",
  urlParameters: [
    Parameters.provisioningServiceName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProvisioningServiceDescription
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Devices/provisioningServices",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProvisioningServiceDescriptionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProvisioningServiceDescriptionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const getOperationResultOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/operationresults/{operationId}",
  urlParameters: [
    Parameters.operationId,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.provisioningServiceName
  ],
  queryParameters: [
    Parameters.asyncinfo,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AsyncOperationResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const listValidSkusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/skus",
  urlParameters: [
    Parameters.provisioningServiceName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IotDpsSkuDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const checkProvisioningServiceNameAvailabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Devices/checkProvisioningServiceNameAvailability",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "argumentsParameter",
    mapper: {
      ...Mappers.OperationInputs,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.NameAvailabilityInfo
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const listKeysOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/listkeys",
  urlParameters: [
    Parameters.provisioningServiceName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SharedAccessSignatureAuthorizationRuleListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const listKeysForKeyNameOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/keys/{keyName}/listkeys",
  urlParameters: [
    Parameters.provisioningServiceName,
    Parameters.keyName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SharedAccessSignatureAuthorizationRuleAccessRightsDescription
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.provisioningServiceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "iotDpsDescription",
    mapper: {
      ...Mappers.ProvisioningServiceDescription,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ProvisioningServiceDescription
    },
    201: {
      bodyMapper: Mappers.ProvisioningServiceDescription
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.provisioningServiceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "provisioningServiceTags",
    mapper: {
      ...Mappers.TagsResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ProvisioningServiceDescription
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}",
  urlParameters: [
    Parameters.provisioningServiceName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const listBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProvisioningServiceDescriptionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProvisioningServiceDescriptionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const listValidSkusNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IotDpsSkuDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const listKeysNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SharedAccessSignatureAuthorizationRuleListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};
