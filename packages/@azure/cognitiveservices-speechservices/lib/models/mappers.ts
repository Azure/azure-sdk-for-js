/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";


export const Dataset: msRest.CompositeMapper = {
  serializedName: "Dataset",
  type: {
    name: "Composite",
    className: "Dataset",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "Uuid"
        }
      },
      dataImportKind: {
        required: true,
        serializedName: "dataImportKind",
        type: {
          name: "String"
        }
      },
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      locale: {
        serializedName: "locale",
        type: {
          name: "String"
        }
      },
      createdDateTime: {
        required: true,
        serializedName: "createdDateTime",
        type: {
          name: "DateTime"
        }
      },
      lastActionDateTime: {
        required: true,
        serializedName: "lastActionDateTime",
        type: {
          name: "DateTime"
        }
      },
      status: {
        required: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Model: msRest.CompositeMapper = {
  serializedName: "Model",
  type: {
    name: "Composite",
    className: "Model",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "Uuid"
        }
      },
      baseModel: {
        serializedName: "baseModel",
        type: {
          name: "Composite",
          className: "Model"
        }
      },
      datasets: {
        serializedName: "datasets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Dataset"
            }
          }
        }
      },
      modelKind: {
        required: true,
        serializedName: "modelKind",
        type: {
          name: "String"
        }
      },
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      locale: {
        serializedName: "locale",
        type: {
          name: "String"
        }
      },
      createdDateTime: {
        required: true,
        serializedName: "createdDateTime",
        type: {
          name: "DateTime"
        }
      },
      lastActionDateTime: {
        required: true,
        serializedName: "lastActionDateTime",
        type: {
          name: "DateTime"
        }
      },
      status: {
        required: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Test: msRest.CompositeMapper = {
  serializedName: "Test",
  type: {
    name: "Composite",
    className: "Test",
    modelProperties: {
      dataset: {
        serializedName: "dataset",
        type: {
          name: "Composite",
          className: "Dataset"
        }
      },
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "Uuid"
        }
      },
      wordErrorRate: {
        required: true,
        serializedName: "wordErrorRate",
        type: {
          name: "Number"
        }
      },
      resultsUrl: {
        serializedName: "resultsUrl",
        type: {
          name: "String"
        }
      },
      createdDateTime: {
        required: true,
        serializedName: "createdDateTime",
        type: {
          name: "DateTime"
        }
      },
      lastActionDateTime: {
        required: true,
        serializedName: "lastActionDateTime",
        type: {
          name: "DateTime"
        }
      },
      status: {
        required: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      modelsProperty: {
        required: true,
        serializedName: "models",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Model"
            }
          }
        }
      },
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ErrorDetail: msRest.CompositeMapper = {
  serializedName: "ErrorDetail",
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        required: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        required: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InnerError: msRest.CompositeMapper = {
  serializedName: "InnerError",
  type: {
    name: "Composite",
    className: "InnerError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      innererror: {
        serializedName: "innererror",
        type: {
          name: "Composite",
          className: "InnerError"
        }
      }
    }
  }
};

export const ErrorContent: msRest.CompositeMapper = {
  serializedName: "ErrorContent",
  type: {
    name: "Composite",
    className: "ErrorContent",
    modelProperties: {
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      innererror: {
        serializedName: "innererror",
        type: {
          name: "Composite",
          className: "InnerError"
        }
      },
      code: {
        required: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        required: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatasetIdentity: msRest.CompositeMapper = {
  serializedName: "DatasetIdentity",
  type: {
    name: "Composite",
    className: "DatasetIdentity",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const ModelIdentity: msRest.CompositeMapper = {
  serializedName: "ModelIdentity",
  type: {
    name: "Composite",
    className: "ModelIdentity",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const TestDefinition: msRest.CompositeMapper = {
  serializedName: "TestDefinition",
  type: {
    name: "Composite",
    className: "TestDefinition",
    modelProperties: {
      dataset: {
        required: true,
        serializedName: "dataset",
        type: {
          name: "Composite",
          className: "DatasetIdentity"
        }
      },
      modelsProperty: {
        required: true,
        serializedName: "models",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ModelIdentity"
            }
          }
        }
      },
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const TestUpdate: msRest.CompositeMapper = {
  serializedName: "TestUpdate",
  type: {
    name: "Composite",
    className: "TestUpdate",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatasetUpdate: msRest.CompositeMapper = {
  serializedName: "DatasetUpdate",
  type: {
    name: "Composite",
    className: "DatasetUpdate",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Endpoint: msRest.CompositeMapper = {
  serializedName: "Endpoint",
  type: {
    name: "Composite",
    className: "Endpoint",
    modelProperties: {
      concurrentRecognitions: {
        serializedName: "concurrentRecognitions",
        type: {
          name: "Number"
        }
      },
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "Uuid"
        }
      },
      endpointKind: {
        required: true,
        serializedName: "endpointKind",
        type: {
          name: "String"
        }
      },
      endpointUrls: {
        required: true,
        serializedName: "endpointUrls",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      createdDateTime: {
        required: true,
        serializedName: "createdDateTime",
        type: {
          name: "DateTime"
        }
      },
      lastActionDateTime: {
        required: true,
        serializedName: "lastActionDateTime",
        type: {
          name: "DateTime"
        }
      },
      status: {
        required: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      modelsProperty: {
        required: true,
        serializedName: "models",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Model"
            }
          }
        }
      },
      contentLoggingEnabled: {
        serializedName: "contentLoggingEnabled",
        type: {
          name: "Boolean"
        }
      },
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      locale: {
        serializedName: "locale",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SpeechEndpointDefinition: msRest.CompositeMapper = {
  serializedName: "SpeechEndpointDefinition",
  type: {
    name: "Composite",
    className: "SpeechEndpointDefinition",
    modelProperties: {
      concurrentRecognitions: {
        serializedName: "concurrentRecognitions",
        constraints: {
          InclusiveMaximum: 20,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      modelsProperty: {
        required: true,
        serializedName: "models",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ModelIdentity"
            }
          }
        }
      },
      contentLoggingEnabled: {
        serializedName: "contentLoggingEnabled",
        type: {
          name: "Boolean"
        }
      },
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      locale: {
        serializedName: "locale",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EndpointUpdate: msRest.CompositeMapper = {
  serializedName: "EndpointUpdate",
  type: {
    name: "Composite",
    className: "EndpointUpdate",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EndpointData: msRest.CompositeMapper = {
  serializedName: "EndpointData",
  type: {
    name: "Composite",
    className: "EndpointData",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "Uuid"
        }
      },
      dataUrl: {
        serializedName: "dataUrl",
        type: {
          name: "String"
        }
      },
      createdDateTime: {
        required: true,
        serializedName: "createdDateTime",
        type: {
          name: "DateTime"
        }
      },
      lastActionDateTime: {
        required: true,
        serializedName: "lastActionDateTime",
        type: {
          name: "DateTime"
        }
      },
      status: {
        required: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      startDate: {
        required: true,
        serializedName: "startDate",
        type: {
          name: "DateTime"
        }
      },
      endDate: {
        required: true,
        serializedName: "endDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const EndpointDataDefinition: msRest.CompositeMapper = {
  serializedName: "EndpointDataDefinition",
  type: {
    name: "Composite",
    className: "EndpointDataDefinition",
    modelProperties: {
      startDate: {
        required: true,
        serializedName: "startDate",
        type: {
          name: "DateTime"
        }
      },
      endDate: {
        required: true,
        serializedName: "endDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const SpeechModelDefinition: msRest.CompositeMapper = {
  serializedName: "SpeechModelDefinition",
  type: {
    name: "Composite",
    className: "SpeechModelDefinition",
    modelProperties: {
      text: {
        serializedName: "text",
        type: {
          name: "String"
        }
      },
      baseModel: {
        serializedName: "baseModel",
        type: {
          name: "Composite",
          className: "ModelIdentity"
        }
      },
      datasets: {
        serializedName: "datasets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatasetIdentity"
            }
          }
        }
      },
      modelKind: {
        required: true,
        serializedName: "modelKind",
        type: {
          name: "String"
        }
      },
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      locale: {
        serializedName: "locale",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ModelUpdate: msRest.CompositeMapper = {
  serializedName: "ModelUpdate",
  type: {
    name: "Composite",
    className: "ModelUpdate",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WebHookConfigurationSecret: msRest.CompositeMapper = {
  serializedName: "WebHookConfigurationSecret",
  type: {
    name: "Composite",
    className: "WebHookConfigurationSecret",
    modelProperties: {
      secret: {
        serializedName: "secret",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WebHookUpdate: msRest.CompositeMapper = {
  serializedName: "WebHookUpdate",
  type: {
    name: "Composite",
    className: "WebHookUpdate",
    modelProperties: {
      configuration: {
        required: true,
        serializedName: "configuration",
        type: {
          name: "Composite",
          className: "WebHookConfigurationSecret"
        }
      },
      active: {
        required: true,
        serializedName: "active",
        type: {
          name: "Boolean"
        }
      },
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Transcription: msRest.CompositeMapper = {
  serializedName: "Transcription",
  type: {
    name: "Composite",
    className: "Transcription",
    modelProperties: {
      recordingsUrl: {
        required: true,
        serializedName: "recordingsUrl",
        type: {
          name: "String"
        }
      },
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "Uuid"
        }
      },
      modelsProperty: {
        required: true,
        serializedName: "models",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Model"
            }
          }
        }
      },
      locale: {
        serializedName: "locale",
        type: {
          name: "String"
        }
      },
      resultsUrls: {
        serializedName: "resultsUrls",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      statusMessage: {
        serializedName: "statusMessage",
        type: {
          name: "String"
        }
      },
      createdDateTime: {
        required: true,
        serializedName: "createdDateTime",
        type: {
          name: "DateTime"
        }
      },
      lastActionDateTime: {
        required: true,
        serializedName: "lastActionDateTime",
        type: {
          name: "DateTime"
        }
      },
      status: {
        required: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const TranscriptionDefinition: msRest.CompositeMapper = {
  serializedName: "TranscriptionDefinition",
  type: {
    name: "Composite",
    className: "TranscriptionDefinition",
    modelProperties: {
      recordingsUrl: {
        required: true,
        serializedName: "recordingsUrl",
        type: {
          name: "String"
        }
      },
      modelsProperty: {
        serializedName: "models",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ModelIdentity"
            }
          }
        }
      },
      locale: {
        serializedName: "locale",
        type: {
          name: "String"
        }
      },
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const TranscriptionUpdate: msRest.CompositeMapper = {
  serializedName: "TranscriptionUpdate",
  type: {
    name: "Composite",
    className: "TranscriptionUpdate",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EndpointDefinition: msRest.CompositeMapper = {
  serializedName: "EndpointDefinition",
  type: {
    name: "Composite",
    className: "EndpointDefinition",
    modelProperties: {
      concurrentRecognitions: {
        serializedName: "concurrentRecognitions",
        constraints: {
          InclusiveMaximum: 20,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      modelsProperty: {
        required: true,
        serializedName: "models",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ModelIdentity"
            }
          }
        }
      },
      contentLoggingEnabled: {
        serializedName: "contentLoggingEnabled",
        type: {
          name: "Boolean"
        }
      },
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      locale: {
        serializedName: "locale",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ModelDefinition: msRest.CompositeMapper = {
  serializedName: "ModelDefinition",
  type: {
    name: "Composite",
    className: "ModelDefinition",
    modelProperties: {
      text: {
        serializedName: "text",
        type: {
          name: "String"
        }
      },
      baseModel: {
        serializedName: "baseModel",
        type: {
          name: "Composite",
          className: "ModelIdentity"
        }
      },
      datasets: {
        serializedName: "datasets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatasetIdentity"
            }
          }
        }
      },
      modelKind: {
        required: true,
        serializedName: "modelKind",
        type: {
          name: "String"
        }
      },
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      locale: {
        serializedName: "locale",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Component: msRest.CompositeMapper = {
  serializedName: "Component",
  type: {
    name: "Composite",
    className: "Component",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HealthStatusResponse: msRest.CompositeMapper = {
  serializedName: "HealthStatusResponse",
  type: {
    name: "Composite",
    className: "HealthStatusResponse",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      components: {
        serializedName: "components",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Component"
            }
          }
        }
      }
    }
  }
};

export const DatasetDefinition: msRest.CompositeMapper = {
  serializedName: "DatasetDefinition",
  type: {
    name: "Composite",
    className: "DatasetDefinition",
    modelProperties: {
      dataImportKind: {
        required: true,
        serializedName: "dataImportKind",
        type: {
          name: "String"
        }
      },
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      locale: {
        serializedName: "locale",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VoiceTest: msRest.CompositeMapper = {
  serializedName: "VoiceTest",
  type: {
    name: "Composite",
    className: "VoiceTest",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "Uuid"
        }
      },
      audioUri: {
        serializedName: "audioUri",
        type: {
          name: "String"
        }
      },
      textUri: {
        required: true,
        serializedName: "textUri",
        type: {
          name: "String"
        }
      },
      createdDateTime: {
        required: true,
        serializedName: "createdDateTime",
        type: {
          name: "DateTime"
        }
      },
      lastActionDateTime: {
        required: true,
        serializedName: "lastActionDateTime",
        type: {
          name: "DateTime"
        }
      },
      status: {
        required: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      model: {
        required: true,
        serializedName: "model",
        type: {
          name: "Composite",
          className: "Model"
        }
      },
      voiceTestKind: {
        required: true,
        serializedName: "voiceTestKind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VoiceTestDefinition: msRest.CompositeMapper = {
  serializedName: "VoiceTestDefinition",
  type: {
    name: "Composite",
    className: "VoiceTestDefinition",
    modelProperties: {
      text: {
        required: true,
        serializedName: "text",
        type: {
          name: "String"
        }
      },
      model: {
        required: true,
        serializedName: "model",
        type: {
          name: "Composite",
          className: "ModelIdentity"
        }
      },
      voiceTestKind: {
        required: true,
        serializedName: "voiceTestKind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IReadOnlyDictionary2: msRest.CompositeMapper = {
  serializedName: "IReadOnlyDictionary_2",
  type: {
    name: "Composite",
    className: "IReadOnlyDictionary2",
    modelProperties: {
      none: {
        serializedName: "None",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      language: {
        serializedName: "Language",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      acoustic: {
        serializedName: "Acoustic",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      pronunciation: {
        serializedName: "Pronunciation",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      customVoice: {
        serializedName: "CustomVoice",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      languageGeneration: {
        serializedName: "LanguageGeneration",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const GetSupportedLocalesForModelsOKResponse: msRest.CompositeMapper = {
  serializedName: "GetSupportedLocalesForModelsOKResponse",
  type: {
    name: "Composite",
    className: "GetSupportedLocalesForModelsOKResponse",
    modelProperties: {
      none: {
        serializedName: "None",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      acoustic: {
        serializedName: "Acoustic",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      language: {
        serializedName: "Language",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      acousticAndLanguage: {
        serializedName: "AcousticAndLanguage",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      customVoice: {
        serializedName: "CustomVoice",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      languageGeneration: {
        serializedName: "LanguageGeneration",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      sentiment: {
        serializedName: "Sentiment",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      languageIdentification: {
        serializedName: "LanguageIdentification",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const GetAccuracyTestsHeaders: msRest.CompositeMapper = {
  serializedName: "getaccuracytests-headers",
  type: {
    name: "Composite",
    className: "GetAccuracyTestsHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CreateAccuracyTestHeaders: msRest.CompositeMapper = {
  serializedName: "createaccuracytest-headers",
  type: {
    name: "Composite",
    className: "CreateAccuracyTestHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GetAccuracyTestHeaders: msRest.CompositeMapper = {
  serializedName: "getaccuracytest-headers",
  type: {
    name: "Composite",
    className: "GetAccuracyTestHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeleteAccuracyTestHeaders: msRest.CompositeMapper = {
  serializedName: "deleteaccuracytest-headers",
  type: {
    name: "Composite",
    className: "DeleteAccuracyTestHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UpdateAccuracyTestHeaders: msRest.CompositeMapper = {
  serializedName: "updateaccuracytest-headers",
  type: {
    name: "Composite",
    className: "UpdateAccuracyTestHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GetDatasetsHeaders: msRest.CompositeMapper = {
  serializedName: "getdatasets-headers",
  type: {
    name: "Composite",
    className: "GetDatasetsHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GetDatasetHeaders: msRest.CompositeMapper = {
  serializedName: "getdataset-headers",
  type: {
    name: "Composite",
    className: "GetDatasetHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeleteDatasetHeaders: msRest.CompositeMapper = {
  serializedName: "deletedataset-headers",
  type: {
    name: "Composite",
    className: "DeleteDatasetHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UpdateDatasetHeaders: msRest.CompositeMapper = {
  serializedName: "updatedataset-headers",
  type: {
    name: "Composite",
    className: "UpdateDatasetHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GetSupportedLocalesForDatasetsHeaders: msRest.CompositeMapper = {
  serializedName: "getsupportedlocalesfordatasets-headers",
  type: {
    name: "Composite",
    className: "GetSupportedLocalesForDatasetsHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UploadDatasetHeaders: msRest.CompositeMapper = {
  serializedName: "uploaddataset-headers",
  type: {
    name: "Composite",
    className: "UploadDatasetHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GetEndpointsHeaders: msRest.CompositeMapper = {
  serializedName: "getendpoints-headers",
  type: {
    name: "Composite",
    className: "GetEndpointsHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CreateEndpointHeaders: msRest.CompositeMapper = {
  serializedName: "createendpoint-headers",
  type: {
    name: "Composite",
    className: "CreateEndpointHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GetEndpointHeaders: msRest.CompositeMapper = {
  serializedName: "getendpoint-headers",
  type: {
    name: "Composite",
    className: "GetEndpointHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeleteEndpointHeaders: msRest.CompositeMapper = {
  serializedName: "deleteendpoint-headers",
  type: {
    name: "Composite",
    className: "DeleteEndpointHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UpdateEndpointHeaders: msRest.CompositeMapper = {
  serializedName: "updateendpoint-headers",
  type: {
    name: "Composite",
    className: "UpdateEndpointHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GetSupportedLocalesForEndpointsHeaders: msRest.CompositeMapper = {
  serializedName: "getsupportedlocalesforendpoints-headers",
  type: {
    name: "Composite",
    className: "GetSupportedLocalesForEndpointsHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GetEndpointDataExportsHeaders: msRest.CompositeMapper = {
  serializedName: "getendpointdataexports-headers",
  type: {
    name: "Composite",
    className: "GetEndpointDataExportsHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateEndpointDataExportHeaders: msRest.CompositeMapper = {
  serializedName: "createendpointdataexport-headers",
  type: {
    name: "Composite",
    className: "CreateEndpointDataExportHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeleteEndpointDataHeaders: msRest.CompositeMapper = {
  serializedName: "deleteendpointdata-headers",
  type: {
    name: "Composite",
    className: "DeleteEndpointDataHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GetEndpointDataExportHeaders: msRest.CompositeMapper = {
  serializedName: "getendpointdataexport-headers",
  type: {
    name: "Composite",
    className: "GetEndpointDataExportHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DeleteEndpointDataExportHeaders: msRest.CompositeMapper = {
  serializedName: "deleteendpointdataexport-headers",
  type: {
    name: "Composite",
    className: "DeleteEndpointDataExportHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GetModelsHeaders: msRest.CompositeMapper = {
  serializedName: "getmodels-headers",
  type: {
    name: "Composite",
    className: "GetModelsHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CreateModelHeaders: msRest.CompositeMapper = {
  serializedName: "createmodel-headers",
  type: {
    name: "Composite",
    className: "CreateModelHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GetModelHeaders: msRest.CompositeMapper = {
  serializedName: "getmodel-headers",
  type: {
    name: "Composite",
    className: "GetModelHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeleteModelHeaders: msRest.CompositeMapper = {
  serializedName: "deletemodel-headers",
  type: {
    name: "Composite",
    className: "DeleteModelHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UpdateModelHeaders: msRest.CompositeMapper = {
  serializedName: "updatemodel-headers",
  type: {
    name: "Composite",
    className: "UpdateModelHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GetSupportedLocalesForModelsHeaders: msRest.CompositeMapper = {
  serializedName: "getsupportedlocalesformodels-headers",
  type: {
    name: "Composite",
    className: "GetSupportedLocalesForModelsHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GetTranscriptionsHeaders: msRest.CompositeMapper = {
  serializedName: "gettranscriptions-headers",
  type: {
    name: "Composite",
    className: "GetTranscriptionsHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CreateTranscriptionHeaders: msRest.CompositeMapper = {
  serializedName: "createtranscription-headers",
  type: {
    name: "Composite",
    className: "CreateTranscriptionHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GetTranscriptionHeaders: msRest.CompositeMapper = {
  serializedName: "gettranscription-headers",
  type: {
    name: "Composite",
    className: "GetTranscriptionHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeleteTranscriptionHeaders: msRest.CompositeMapper = {
  serializedName: "deletetranscription-headers",
  type: {
    name: "Composite",
    className: "DeleteTranscriptionHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UpdateTranscriptionHeaders: msRest.CompositeMapper = {
  serializedName: "updatetranscription-headers",
  type: {
    name: "Composite",
    className: "UpdateTranscriptionHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GetSupportedLocalesForTranscriptionsHeaders: msRest.CompositeMapper = {
  serializedName: "getsupportedlocalesfortranscriptions-headers",
  type: {
    name: "Composite",
    className: "GetSupportedLocalesForTranscriptionsHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GetLanguageGenerationEndpointsHeaders: msRest.CompositeMapper = {
  serializedName: "getlanguagegenerationendpoints-headers",
  type: {
    name: "Composite",
    className: "GetLanguageGenerationEndpointsHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CreateLanguageGenerationEndpointHeaders: msRest.CompositeMapper = {
  serializedName: "createlanguagegenerationendpoint-headers",
  type: {
    name: "Composite",
    className: "CreateLanguageGenerationEndpointHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GetLanguageGenerationEndpointHeaders: msRest.CompositeMapper = {
  serializedName: "getlanguagegenerationendpoint-headers",
  type: {
    name: "Composite",
    className: "GetLanguageGenerationEndpointHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeleteLanguageGenerationEndpointHeaders: msRest.CompositeMapper = {
  serializedName: "deletelanguagegenerationendpoint-headers",
  type: {
    name: "Composite",
    className: "DeleteLanguageGenerationEndpointHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UpdateLanguageGenerationEndpointHeaders: msRest.CompositeMapper = {
  serializedName: "updatelanguagegenerationendpoint-headers",
  type: {
    name: "Composite",
    className: "UpdateLanguageGenerationEndpointHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GetSupportedLocalesForLanguageGenerationEndpointsHeaders: msRest.CompositeMapper = {
  serializedName: "getsupportedlocalesforlanguagegenerationendpoints-headers",
  type: {
    name: "Composite",
    className: "GetSupportedLocalesForLanguageGenerationEndpointsHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GetLanguageGenerationModelsHeaders: msRest.CompositeMapper = {
  serializedName: "getlanguagegenerationmodels-headers",
  type: {
    name: "Composite",
    className: "GetLanguageGenerationModelsHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CreateLanguageGenerationModelHeaders: msRest.CompositeMapper = {
  serializedName: "createlanguagegenerationmodel-headers",
  type: {
    name: "Composite",
    className: "CreateLanguageGenerationModelHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GetLanguageGenerationModelHeaders: msRest.CompositeMapper = {
  serializedName: "getlanguagegenerationmodel-headers",
  type: {
    name: "Composite",
    className: "GetLanguageGenerationModelHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeleteLanguageGenerationModelHeaders: msRest.CompositeMapper = {
  serializedName: "deletelanguagegenerationmodel-headers",
  type: {
    name: "Composite",
    className: "DeleteLanguageGenerationModelHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UpdateLanguageGenerationModelHeaders: msRest.CompositeMapper = {
  serializedName: "updatelanguagegenerationmodel-headers",
  type: {
    name: "Composite",
    className: "UpdateLanguageGenerationModelHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GetSupportedLocalesForLanguageGenerationModelsHeaders: msRest.CompositeMapper = {
  serializedName: "getsupportedlocalesforlanguagegenerationmodels-headers",
  type: {
    name: "Composite",
    className: "GetSupportedLocalesForLanguageGenerationModelsHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GetHealthStatusHeaders: msRest.CompositeMapper = {
  serializedName: "gethealthstatus-headers",
  type: {
    name: "Composite",
    className: "GetHealthStatusHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GetVoiceDatasetsHeaders: msRest.CompositeMapper = {
  serializedName: "getvoicedatasets-headers",
  type: {
    name: "Composite",
    className: "GetVoiceDatasetsHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GetSupportedLocalesForVoiceDatasetsHeaders: msRest.CompositeMapper = {
  serializedName: "getsupportedlocalesforvoicedatasets-headers",
  type: {
    name: "Composite",
    className: "GetSupportedLocalesForVoiceDatasetsHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UploadVoiceDatasetHeaders: msRest.CompositeMapper = {
  serializedName: "uploadvoicedataset-headers",
  type: {
    name: "Composite",
    className: "UploadVoiceDatasetHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeleteVoiceDatasetHeaders: msRest.CompositeMapper = {
  serializedName: "deletevoicedataset-headers",
  type: {
    name: "Composite",
    className: "DeleteVoiceDatasetHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UpdateVoiceDatasetHeaders: msRest.CompositeMapper = {
  serializedName: "updatevoicedataset-headers",
  type: {
    name: "Composite",
    className: "UpdateVoiceDatasetHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GetVoiceDeploymentsHeaders: msRest.CompositeMapper = {
  serializedName: "getvoicedeployments-headers",
  type: {
    name: "Composite",
    className: "GetVoiceDeploymentsHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CreateVoiceDeploymentHeaders: msRest.CompositeMapper = {
  serializedName: "createvoicedeployment-headers",
  type: {
    name: "Composite",
    className: "CreateVoiceDeploymentHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GetVoiceDeploymentHeaders: msRest.CompositeMapper = {
  serializedName: "getvoicedeployment-headers",
  type: {
    name: "Composite",
    className: "GetVoiceDeploymentHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeleteDeploymentHeaders: msRest.CompositeMapper = {
  serializedName: "deletedeployment-headers",
  type: {
    name: "Composite",
    className: "DeleteDeploymentHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UpdateVoiceEndpointHeaders: msRest.CompositeMapper = {
  serializedName: "updatevoiceendpoint-headers",
  type: {
    name: "Composite",
    className: "UpdateVoiceEndpointHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GetSupportedLocalesForVoiceEndpointsHeaders: msRest.CompositeMapper = {
  serializedName: "getsupportedlocalesforvoiceendpoints-headers",
  type: {
    name: "Composite",
    className: "GetSupportedLocalesForVoiceEndpointsHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GetVoiceModelsHeaders: msRest.CompositeMapper = {
  serializedName: "getvoicemodels-headers",
  type: {
    name: "Composite",
    className: "GetVoiceModelsHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CreateVoiceModelHeaders: msRest.CompositeMapper = {
  serializedName: "createvoicemodel-headers",
  type: {
    name: "Composite",
    className: "CreateVoiceModelHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GetVoiceModelHeaders: msRest.CompositeMapper = {
  serializedName: "getvoicemodel-headers",
  type: {
    name: "Composite",
    className: "GetVoiceModelHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeleteVoiceModelHeaders: msRest.CompositeMapper = {
  serializedName: "deletevoicemodel-headers",
  type: {
    name: "Composite",
    className: "DeleteVoiceModelHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UpdateVoiceModelHeaders: msRest.CompositeMapper = {
  serializedName: "updatevoicemodel-headers",
  type: {
    name: "Composite",
    className: "UpdateVoiceModelHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GetSupportedLocalesForVoiceModelsHeaders: msRest.CompositeMapper = {
  serializedName: "getsupportedlocalesforvoicemodels-headers",
  type: {
    name: "Composite",
    className: "GetSupportedLocalesForVoiceModelsHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GetVoiceTestHeaders: msRest.CompositeMapper = {
  serializedName: "getvoicetest-headers",
  type: {
    name: "Composite",
    className: "GetVoiceTestHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeleteVoiceTestHeaders: msRest.CompositeMapper = {
  serializedName: "deletevoicetest-headers",
  type: {
    name: "Composite",
    className: "DeleteVoiceTestHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CreateVoiceTestHeaders: msRest.CompositeMapper = {
  serializedName: "createvoicetest-headers",
  type: {
    name: "Composite",
    className: "CreateVoiceTestHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};
