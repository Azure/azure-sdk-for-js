/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";


export const IReadOnlyDictionary: msRest.CompositeMapper = {
  serializedName: "IReadOnlyDictionary",
  type: {
    name: "Composite",
    className: "IReadOnlyDictionary",
    modelProperties: {
      none: {
        serializedName: "none",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      language: {
        serializedName: "language",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      acoustic: {
        serializedName: "acoustic",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      pronunciation: {
        serializedName: "pronunciation",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      customVoice: {
        serializedName: "customVoice",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      languageGeneration: {
        serializedName: "languageGeneration",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const Dataset: msRest.CompositeMapper = {
  serializedName: "Dataset",
  type: {
    name: "Composite",
    className: "Dataset",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "Uuid"
        }
      },
      dataImportKind: {
        required: true,
        serializedName: "dataImportKind",
        type: {
          name: "String"
        }
      },
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      locale: {
        serializedName: "locale",
        type: {
          name: "String"
        }
      },
      createdDateTime: {
        required: true,
        serializedName: "createdDateTime",
        type: {
          name: "DateTime"
        }
      },
      lastActionDateTime: {
        required: true,
        serializedName: "lastActionDateTime",
        type: {
          name: "DateTime"
        }
      },
      status: {
        required: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Model: msRest.CompositeMapper = {
  serializedName: "Model",
  type: {
    name: "Composite",
    className: "Model",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "Uuid"
        }
      },
      baseModel: {
        serializedName: "baseModel",
        type: {
          name: "Composite",
          className: "Model"
        }
      },
      datasets: {
        serializedName: "datasets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Dataset"
            }
          }
        }
      },
      modelKind: {
        required: true,
        serializedName: "modelKind",
        type: {
          name: "String"
        }
      },
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      locale: {
        serializedName: "locale",
        type: {
          name: "String"
        }
      },
      createdDateTime: {
        required: true,
        serializedName: "createdDateTime",
        type: {
          name: "DateTime"
        }
      },
      lastActionDateTime: {
        required: true,
        serializedName: "lastActionDateTime",
        type: {
          name: "DateTime"
        }
      },
      status: {
        required: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Test: msRest.CompositeMapper = {
  serializedName: "Test",
  type: {
    name: "Composite",
    className: "Test",
    modelProperties: {
      dataset: {
        serializedName: "dataset",
        type: {
          name: "Composite",
          className: "Dataset"
        }
      },
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "Uuid"
        }
      },
      wordErrorRate: {
        required: true,
        serializedName: "wordErrorRate",
        type: {
          name: "Number"
        }
      },
      resultsUrl: {
        serializedName: "resultsUrl",
        type: {
          name: "String"
        }
      },
      createdDateTime: {
        required: true,
        serializedName: "createdDateTime",
        type: {
          name: "DateTime"
        }
      },
      lastActionDateTime: {
        required: true,
        serializedName: "lastActionDateTime",
        type: {
          name: "DateTime"
        }
      },
      status: {
        required: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      modelsProperty: {
        required: true,
        serializedName: "models",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Model"
            }
          }
        }
      },
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ErrorDetail: msRest.CompositeMapper = {
  serializedName: "ErrorDetail",
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        required: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        required: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InnerError: msRest.CompositeMapper = {
  serializedName: "InnerError",
  type: {
    name: "Composite",
    className: "InnerError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      innererror: {
        serializedName: "innererror",
        type: {
          name: "Composite",
          className: "InnerError"
        }
      }
    }
  }
};

export const ErrorContent: msRest.CompositeMapper = {
  serializedName: "ErrorContent",
  type: {
    name: "Composite",
    className: "ErrorContent",
    modelProperties: {
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      innererror: {
        serializedName: "innererror",
        type: {
          name: "Composite",
          className: "InnerError"
        }
      },
      code: {
        required: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        required: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatasetIdentity: msRest.CompositeMapper = {
  serializedName: "DatasetIdentity",
  type: {
    name: "Composite",
    className: "DatasetIdentity",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const ModelIdentity: msRest.CompositeMapper = {
  serializedName: "ModelIdentity",
  type: {
    name: "Composite",
    className: "ModelIdentity",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const TestDefinition: msRest.CompositeMapper = {
  serializedName: "TestDefinition",
  type: {
    name: "Composite",
    className: "TestDefinition",
    modelProperties: {
      dataset: {
        required: true,
        serializedName: "dataset",
        type: {
          name: "Composite",
          className: "DatasetIdentity"
        }
      },
      modelsProperty: {
        required: true,
        serializedName: "models",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ModelIdentity"
            }
          }
        }
      },
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const TestUpdate: msRest.CompositeMapper = {
  serializedName: "TestUpdate",
  type: {
    name: "Composite",
    className: "TestUpdate",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatasetUpdate: msRest.CompositeMapper = {
  serializedName: "DatasetUpdate",
  type: {
    name: "Composite",
    className: "DatasetUpdate",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Endpoint: msRest.CompositeMapper = {
  serializedName: "Endpoint",
  type: {
    name: "Composite",
    className: "Endpoint",
    modelProperties: {
      concurrentRecognitions: {
        serializedName: "concurrentRecognitions",
        type: {
          name: "Number"
        }
      },
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "Uuid"
        }
      },
      endpointKind: {
        required: true,
        serializedName: "endpointKind",
        type: {
          name: "String"
        }
      },
      endpointUrls: {
        required: true,
        serializedName: "endpointUrls",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      createdDateTime: {
        required: true,
        serializedName: "createdDateTime",
        type: {
          name: "DateTime"
        }
      },
      lastActionDateTime: {
        required: true,
        serializedName: "lastActionDateTime",
        type: {
          name: "DateTime"
        }
      },
      status: {
        required: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      modelsProperty: {
        required: true,
        serializedName: "models",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Model"
            }
          }
        }
      },
      contentLoggingEnabled: {
        serializedName: "contentLoggingEnabled",
        type: {
          name: "Boolean"
        }
      },
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      locale: {
        serializedName: "locale",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SpeechEndpointDefinition: msRest.CompositeMapper = {
  serializedName: "SpeechEndpointDefinition",
  type: {
    name: "Composite",
    className: "SpeechEndpointDefinition",
    modelProperties: {
      concurrentRecognitions: {
        serializedName: "concurrentRecognitions",
        constraints: {
          InclusiveMaximum: 20,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      modelsProperty: {
        required: true,
        serializedName: "models",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ModelIdentity"
            }
          }
        }
      },
      contentLoggingEnabled: {
        serializedName: "contentLoggingEnabled",
        type: {
          name: "Boolean"
        }
      },
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      locale: {
        serializedName: "locale",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EndpointUpdate: msRest.CompositeMapper = {
  serializedName: "EndpointUpdate",
  type: {
    name: "Composite",
    className: "EndpointUpdate",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EndpointData: msRest.CompositeMapper = {
  serializedName: "EndpointData",
  type: {
    name: "Composite",
    className: "EndpointData",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "Uuid"
        }
      },
      dataUrl: {
        serializedName: "dataUrl",
        type: {
          name: "String"
        }
      },
      createdDateTime: {
        required: true,
        serializedName: "createdDateTime",
        type: {
          name: "DateTime"
        }
      },
      lastActionDateTime: {
        required: true,
        serializedName: "lastActionDateTime",
        type: {
          name: "DateTime"
        }
      },
      status: {
        required: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      startDate: {
        required: true,
        serializedName: "startDate",
        type: {
          name: "DateTime"
        }
      },
      endDate: {
        required: true,
        serializedName: "endDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const EndpointDataDefinition: msRest.CompositeMapper = {
  serializedName: "EndpointDataDefinition",
  type: {
    name: "Composite",
    className: "EndpointDataDefinition",
    modelProperties: {
      startDate: {
        required: true,
        serializedName: "startDate",
        type: {
          name: "DateTime"
        }
      },
      endDate: {
        required: true,
        serializedName: "endDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const SpeechModelDefinition: msRest.CompositeMapper = {
  serializedName: "SpeechModelDefinition",
  type: {
    name: "Composite",
    className: "SpeechModelDefinition",
    modelProperties: {
      text: {
        serializedName: "text",
        type: {
          name: "String"
        }
      },
      baseModel: {
        serializedName: "baseModel",
        type: {
          name: "Composite",
          className: "ModelIdentity"
        }
      },
      datasets: {
        serializedName: "datasets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatasetIdentity"
            }
          }
        }
      },
      modelKind: {
        required: true,
        serializedName: "modelKind",
        type: {
          name: "String"
        }
      },
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      locale: {
        serializedName: "locale",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ModelUpdate: msRest.CompositeMapper = {
  serializedName: "ModelUpdate",
  type: {
    name: "Composite",
    className: "ModelUpdate",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WebHookConfigurationSecret: msRest.CompositeMapper = {
  serializedName: "WebHookConfigurationSecret",
  type: {
    name: "Composite",
    className: "WebHookConfigurationSecret",
    modelProperties: {
      secret: {
        serializedName: "secret",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WebHookUpdate: msRest.CompositeMapper = {
  serializedName: "WebHookUpdate",
  type: {
    name: "Composite",
    className: "WebHookUpdate",
    modelProperties: {
      configuration: {
        required: true,
        serializedName: "configuration",
        type: {
          name: "Composite",
          className: "WebHookConfigurationSecret"
        }
      },
      active: {
        required: true,
        serializedName: "active",
        type: {
          name: "Boolean"
        }
      },
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Transcription: msRest.CompositeMapper = {
  serializedName: "Transcription",
  type: {
    name: "Composite",
    className: "Transcription",
    modelProperties: {
      recordingsUrl: {
        required: true,
        serializedName: "recordingsUrl",
        type: {
          name: "String"
        }
      },
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "Uuid"
        }
      },
      modelsProperty: {
        required: true,
        serializedName: "models",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Model"
            }
          }
        }
      },
      locale: {
        serializedName: "locale",
        type: {
          name: "String"
        }
      },
      resultsUrls: {
        serializedName: "resultsUrls",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      statusMessage: {
        serializedName: "statusMessage",
        type: {
          name: "String"
        }
      },
      createdDateTime: {
        required: true,
        serializedName: "createdDateTime",
        type: {
          name: "DateTime"
        }
      },
      lastActionDateTime: {
        required: true,
        serializedName: "lastActionDateTime",
        type: {
          name: "DateTime"
        }
      },
      status: {
        required: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const TranscriptionDefinition: msRest.CompositeMapper = {
  serializedName: "TranscriptionDefinition",
  type: {
    name: "Composite",
    className: "TranscriptionDefinition",
    modelProperties: {
      recordingsUrl: {
        required: true,
        serializedName: "recordingsUrl",
        type: {
          name: "String"
        }
      },
      modelsProperty: {
        serializedName: "models",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ModelIdentity"
            }
          }
        }
      },
      locale: {
        serializedName: "locale",
        type: {
          name: "String"
        }
      },
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const TranscriptionUpdate: msRest.CompositeMapper = {
  serializedName: "TranscriptionUpdate",
  type: {
    name: "Composite",
    className: "TranscriptionUpdate",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EndpointDefinition: msRest.CompositeMapper = {
  serializedName: "EndpointDefinition",
  type: {
    name: "Composite",
    className: "EndpointDefinition",
    modelProperties: {
      concurrentRecognitions: {
        serializedName: "concurrentRecognitions",
        constraints: {
          InclusiveMaximum: 20,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      modelsProperty: {
        required: true,
        serializedName: "models",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ModelIdentity"
            }
          }
        }
      },
      contentLoggingEnabled: {
        serializedName: "contentLoggingEnabled",
        type: {
          name: "Boolean"
        }
      },
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      locale: {
        serializedName: "locale",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ModelDefinition: msRest.CompositeMapper = {
  serializedName: "ModelDefinition",
  type: {
    name: "Composite",
    className: "ModelDefinition",
    modelProperties: {
      text: {
        serializedName: "text",
        type: {
          name: "String"
        }
      },
      baseModel: {
        serializedName: "baseModel",
        type: {
          name: "Composite",
          className: "ModelIdentity"
        }
      },
      datasets: {
        serializedName: "datasets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatasetIdentity"
            }
          }
        }
      },
      modelKind: {
        required: true,
        serializedName: "modelKind",
        type: {
          name: "String"
        }
      },
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      locale: {
        serializedName: "locale",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Component: msRest.CompositeMapper = {
  serializedName: "Component",
  type: {
    name: "Composite",
    className: "Component",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HealthStatusResponse: msRest.CompositeMapper = {
  serializedName: "HealthStatusResponse",
  type: {
    name: "Composite",
    className: "HealthStatusResponse",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      components: {
        serializedName: "components",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Component"
            }
          }
        }
      }
    }
  }
};

export const DatasetDefinition: msRest.CompositeMapper = {
  serializedName: "DatasetDefinition",
  type: {
    name: "Composite",
    className: "DatasetDefinition",
    modelProperties: {
      dataImportKind: {
        required: true,
        serializedName: "dataImportKind",
        type: {
          name: "String"
        }
      },
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      locale: {
        serializedName: "locale",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VoiceTest: msRest.CompositeMapper = {
  serializedName: "VoiceTest",
  type: {
    name: "Composite",
    className: "VoiceTest",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "Uuid"
        }
      },
      audioUri: {
        serializedName: "audioUri",
        type: {
          name: "String"
        }
      },
      textUri: {
        required: true,
        serializedName: "textUri",
        type: {
          name: "String"
        }
      },
      createdDateTime: {
        required: true,
        serializedName: "createdDateTime",
        type: {
          name: "DateTime"
        }
      },
      lastActionDateTime: {
        required: true,
        serializedName: "lastActionDateTime",
        type: {
          name: "DateTime"
        }
      },
      status: {
        required: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      model: {
        required: true,
        serializedName: "model",
        type: {
          name: "Composite",
          className: "Model"
        }
      },
      voiceTestKind: {
        required: true,
        serializedName: "voiceTestKind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VoiceTestDefinition: msRest.CompositeMapper = {
  serializedName: "VoiceTestDefinition",
  type: {
    name: "Composite",
    className: "VoiceTestDefinition",
    modelProperties: {
      text: {
        required: true,
        serializedName: "text",
        type: {
          name: "String"
        }
      },
      model: {
        required: true,
        serializedName: "model",
        type: {
          name: "Composite",
          className: "ModelIdentity"
        }
      },
      voiceTestKind: {
        required: true,
        serializedName: "voiceTestKind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AccuracyTestsListHeaders: msRest.CompositeMapper = {
  serializedName: "accuracytests-list-headers",
  type: {
    name: "Composite",
    className: "AccuracyTestsListHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AccuracyTestCreateHeaders: msRest.CompositeMapper = {
  serializedName: "accuracytest-create-headers",
  type: {
    name: "Composite",
    className: "AccuracyTestCreateHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AccuracyTestGetHeaders: msRest.CompositeMapper = {
  serializedName: "accuracytest-get-headers",
  type: {
    name: "Composite",
    className: "AccuracyTestGetHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AccuracyTestDeleteHeaders: msRest.CompositeMapper = {
  serializedName: "accuracytest-delete-headers",
  type: {
    name: "Composite",
    className: "AccuracyTestDeleteHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AccuracyTestUpdateHeaders: msRest.CompositeMapper = {
  serializedName: "accuracytest-update-headers",
  type: {
    name: "Composite",
    className: "AccuracyTestUpdateHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DatasetsGetHeaders: msRest.CompositeMapper = {
  serializedName: "datasets-get-headers",
  type: {
    name: "Composite",
    className: "DatasetsGetHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DatasetGetHeaders: msRest.CompositeMapper = {
  serializedName: "dataset-get-headers",
  type: {
    name: "Composite",
    className: "DatasetGetHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatasetDeleteHeaders: msRest.CompositeMapper = {
  serializedName: "dataset-delete-headers",
  type: {
    name: "Composite",
    className: "DatasetDeleteHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DatasetUpdateHeaders: msRest.CompositeMapper = {
  serializedName: "dataset-update-headers",
  type: {
    name: "Composite",
    className: "DatasetUpdateHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SupportedLocalesForDatasetsGetHeaders: msRest.CompositeMapper = {
  serializedName: "supportedlocalesfordatasets-get-headers",
  type: {
    name: "Composite",
    className: "SupportedLocalesForDatasetsGetHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DatasetUploadHeaders: msRest.CompositeMapper = {
  serializedName: "dataset-upload-headers",
  type: {
    name: "Composite",
    className: "DatasetUploadHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EndpointsGetHeaders: msRest.CompositeMapper = {
  serializedName: "endpoints-get-headers",
  type: {
    name: "Composite",
    className: "EndpointsGetHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const EndpointCreateHeaders: msRest.CompositeMapper = {
  serializedName: "endpoint-create-headers",
  type: {
    name: "Composite",
    className: "EndpointCreateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EndpointGetHeaders: msRest.CompositeMapper = {
  serializedName: "endpoint-get-headers",
  type: {
    name: "Composite",
    className: "EndpointGetHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EndpointDeleteHeaders: msRest.CompositeMapper = {
  serializedName: "endpoint-delete-headers",
  type: {
    name: "Composite",
    className: "EndpointDeleteHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const EndpointUpdateHeaders: msRest.CompositeMapper = {
  serializedName: "endpoint-update-headers",
  type: {
    name: "Composite",
    className: "EndpointUpdateHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SupportedLocalesForEndpointsGetHeaders: msRest.CompositeMapper = {
  serializedName: "supportedlocalesforendpoints-get-headers",
  type: {
    name: "Composite",
    className: "SupportedLocalesForEndpointsGetHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const EndpointDataExportsGetHeaders: msRest.CompositeMapper = {
  serializedName: "endpointdataexports-get-headers",
  type: {
    name: "Composite",
    className: "EndpointDataExportsGetHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EndpointDataExportCreateHeaders: msRest.CompositeMapper = {
  serializedName: "endpointdataexport-create-headers",
  type: {
    name: "Composite",
    className: "EndpointDataExportCreateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EndpointDataDeleteHeaders: msRest.CompositeMapper = {
  serializedName: "endpointdata-delete-headers",
  type: {
    name: "Composite",
    className: "EndpointDataDeleteHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const EndpointDataExportGetHeaders: msRest.CompositeMapper = {
  serializedName: "endpointdataexport-get-headers",
  type: {
    name: "Composite",
    className: "EndpointDataExportGetHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const EndpointDataExportDeleteHeaders: msRest.CompositeMapper = {
  serializedName: "endpointdataexport-delete-headers",
  type: {
    name: "Composite",
    className: "EndpointDataExportDeleteHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ModelsGetHeaders: msRest.CompositeMapper = {
  serializedName: "models-get-headers",
  type: {
    name: "Composite",
    className: "ModelsGetHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ModelCreateHeaders: msRest.CompositeMapper = {
  serializedName: "model-create-headers",
  type: {
    name: "Composite",
    className: "ModelCreateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ModelGetHeaders: msRest.CompositeMapper = {
  serializedName: "model-get-headers",
  type: {
    name: "Composite",
    className: "ModelGetHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ModelDeleteHeaders: msRest.CompositeMapper = {
  serializedName: "model-delete-headers",
  type: {
    name: "Composite",
    className: "ModelDeleteHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ModelUpdateHeaders: msRest.CompositeMapper = {
  serializedName: "model-update-headers",
  type: {
    name: "Composite",
    className: "ModelUpdateHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SupportedLocalesForModelsGetHeaders: msRest.CompositeMapper = {
  serializedName: "supportedlocalesformodels-get-headers",
  type: {
    name: "Composite",
    className: "SupportedLocalesForModelsGetHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const TranscriptionsGetHeaders: msRest.CompositeMapper = {
  serializedName: "transcriptions-get-headers",
  type: {
    name: "Composite",
    className: "TranscriptionsGetHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const TranscriptionCreateHeaders: msRest.CompositeMapper = {
  serializedName: "transcription-create-headers",
  type: {
    name: "Composite",
    className: "TranscriptionCreateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TranscriptionGetHeaders: msRest.CompositeMapper = {
  serializedName: "transcription-get-headers",
  type: {
    name: "Composite",
    className: "TranscriptionGetHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TranscriptionDeleteHeaders: msRest.CompositeMapper = {
  serializedName: "transcription-delete-headers",
  type: {
    name: "Composite",
    className: "TranscriptionDeleteHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const TranscriptionUpdateHeaders: msRest.CompositeMapper = {
  serializedName: "transcription-update-headers",
  type: {
    name: "Composite",
    className: "TranscriptionUpdateHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SupportedLocalesForTranscriptionsGetHeaders: msRest.CompositeMapper = {
  serializedName: "supportedlocalesfortranscriptions-get-headers",
  type: {
    name: "Composite",
    className: "SupportedLocalesForTranscriptionsGetHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const LanguageGenerationEndpointsGetHeaders: msRest.CompositeMapper = {
  serializedName: "languagegenerationendpoints-get-headers",
  type: {
    name: "Composite",
    className: "LanguageGenerationEndpointsGetHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const LanguageGenerationEndpointCreateHeaders: msRest.CompositeMapper = {
  serializedName: "languagegenerationendpoint-create-headers",
  type: {
    name: "Composite",
    className: "LanguageGenerationEndpointCreateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LanguageGenerationEndpointGetHeaders: msRest.CompositeMapper = {
  serializedName: "languagegenerationendpoint-get-headers",
  type: {
    name: "Composite",
    className: "LanguageGenerationEndpointGetHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LanguageGenerationEndpointDeleteHeaders: msRest.CompositeMapper = {
  serializedName: "languagegenerationendpoint-delete-headers",
  type: {
    name: "Composite",
    className: "LanguageGenerationEndpointDeleteHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const LanguageGenerationEndpointUpdateHeaders: msRest.CompositeMapper = {
  serializedName: "languagegenerationendpoint-update-headers",
  type: {
    name: "Composite",
    className: "LanguageGenerationEndpointUpdateHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SupportedLocalesForLanguageGenerationEndpointsGetHeaders: msRest.CompositeMapper = {
  serializedName: "supportedlocalesforlanguagegenerationendpoints-get-headers",
  type: {
    name: "Composite",
    className: "SupportedLocalesForLanguageGenerationEndpointsGetHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const LanguageGenerationModelsGetHeaders: msRest.CompositeMapper = {
  serializedName: "languagegenerationmodels-get-headers",
  type: {
    name: "Composite",
    className: "LanguageGenerationModelsGetHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const LanguageGenerationModelCreateHeaders: msRest.CompositeMapper = {
  serializedName: "languagegenerationmodel-create-headers",
  type: {
    name: "Composite",
    className: "LanguageGenerationModelCreateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LanguageGenerationModelGetHeaders: msRest.CompositeMapper = {
  serializedName: "languagegenerationmodel-get-headers",
  type: {
    name: "Composite",
    className: "LanguageGenerationModelGetHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LanguageGenerationModelDeleteHeaders: msRest.CompositeMapper = {
  serializedName: "languagegenerationmodel-delete-headers",
  type: {
    name: "Composite",
    className: "LanguageGenerationModelDeleteHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const LanguageGenerationModelUpdateHeaders: msRest.CompositeMapper = {
  serializedName: "languagegenerationmodel-update-headers",
  type: {
    name: "Composite",
    className: "LanguageGenerationModelUpdateHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SupportedLocalesForLanguageGenerationModelsGetHeaders: msRest.CompositeMapper = {
  serializedName: "supportedlocalesforlanguagegenerationmodels-get-headers",
  type: {
    name: "Composite",
    className: "SupportedLocalesForLanguageGenerationModelsGetHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const HealthStatusGetHeaders: msRest.CompositeMapper = {
  serializedName: "healthstatus-get-headers",
  type: {
    name: "Composite",
    className: "HealthStatusGetHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VoiceDatasetsGetHeaders: msRest.CompositeMapper = {
  serializedName: "voicedatasets-get-headers",
  type: {
    name: "Composite",
    className: "VoiceDatasetsGetHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SupportedLocalesForVoiceDatasetsGetHeaders: msRest.CompositeMapper = {
  serializedName: "supportedlocalesforvoicedatasets-get-headers",
  type: {
    name: "Composite",
    className: "SupportedLocalesForVoiceDatasetsGetHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VoiceDatasetUploadHeaders: msRest.CompositeMapper = {
  serializedName: "voicedataset-upload-headers",
  type: {
    name: "Composite",
    className: "VoiceDatasetUploadHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VoiceDatasetDeleteHeaders: msRest.CompositeMapper = {
  serializedName: "voicedataset-delete-headers",
  type: {
    name: "Composite",
    className: "VoiceDatasetDeleteHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VoiceDatasetUpdateHeaders: msRest.CompositeMapper = {
  serializedName: "voicedataset-update-headers",
  type: {
    name: "Composite",
    className: "VoiceDatasetUpdateHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VoiceDeploymentsGetHeaders: msRest.CompositeMapper = {
  serializedName: "voicedeployments-get-headers",
  type: {
    name: "Composite",
    className: "VoiceDeploymentsGetHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VoiceDeploymentCreateHeaders: msRest.CompositeMapper = {
  serializedName: "voicedeployment-create-headers",
  type: {
    name: "Composite",
    className: "VoiceDeploymentCreateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VoiceDeploymentGetHeaders: msRest.CompositeMapper = {
  serializedName: "voicedeployment-get-headers",
  type: {
    name: "Composite",
    className: "VoiceDeploymentGetHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeploymentDeleteHeaders: msRest.CompositeMapper = {
  serializedName: "deployment-delete-headers",
  type: {
    name: "Composite",
    className: "DeploymentDeleteHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VoiceEndpointUpdateHeaders: msRest.CompositeMapper = {
  serializedName: "voiceendpoint-update-headers",
  type: {
    name: "Composite",
    className: "VoiceEndpointUpdateHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SupportedLocalesForVoiceEndpointsGetHeaders: msRest.CompositeMapper = {
  serializedName: "supportedlocalesforvoiceendpoints-get-headers",
  type: {
    name: "Composite",
    className: "SupportedLocalesForVoiceEndpointsGetHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VoiceModelsGetHeaders: msRest.CompositeMapper = {
  serializedName: "voicemodels-get-headers",
  type: {
    name: "Composite",
    className: "VoiceModelsGetHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VoiceModelCreateHeaders: msRest.CompositeMapper = {
  serializedName: "voicemodel-create-headers",
  type: {
    name: "Composite",
    className: "VoiceModelCreateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VoiceModelGetHeaders: msRest.CompositeMapper = {
  serializedName: "voicemodel-get-headers",
  type: {
    name: "Composite",
    className: "VoiceModelGetHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VoiceModelDeleteHeaders: msRest.CompositeMapper = {
  serializedName: "voicemodel-delete-headers",
  type: {
    name: "Composite",
    className: "VoiceModelDeleteHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VoiceModelUpdateHeaders: msRest.CompositeMapper = {
  serializedName: "voicemodel-update-headers",
  type: {
    name: "Composite",
    className: "VoiceModelUpdateHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SupportedLocalesForVoiceModelsGetHeaders: msRest.CompositeMapper = {
  serializedName: "supportedlocalesforvoicemodels-get-headers",
  type: {
    name: "Composite",
    className: "SupportedLocalesForVoiceModelsGetHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VoiceTestGetHeaders: msRest.CompositeMapper = {
  serializedName: "voicetest-get-headers",
  type: {
    name: "Composite",
    className: "VoiceTestGetHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VoiceTestDeleteHeaders: msRest.CompositeMapper = {
  serializedName: "voicetest-delete-headers",
  type: {
    name: "Composite",
    className: "VoiceTestDeleteHeaders",
    modelProperties: {
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VoiceTestCreateHeaders: msRest.CompositeMapper = {
  serializedName: "voicetest-create-headers",
  type: {
    name: "Composite",
    className: "VoiceTestCreateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      xRateLimitLimit: {
        serializedName: "x-ratelimit-limit",
        type: {
          name: "Number"
        }
      },
      xRateLimitRemaining: {
        serializedName: "x-ratelimit-remaining",
        type: {
          name: "Number"
        }
      },
      xRateLimitReset: {
        serializedName: "x-ratelimit-reset",
        type: {
          name: "String"
        }
      }
    }
  }
};
