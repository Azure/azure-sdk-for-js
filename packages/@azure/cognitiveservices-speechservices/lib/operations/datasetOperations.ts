/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/datasetOperationsMappers";
import * as Parameters from "../models/parameters";
import { SpeechServicesAPIv20Context } from "../speechServicesAPIv20Context";

/** Class representing a DatasetOperations. */
export class DatasetOperations {
  private readonly client: SpeechServicesAPIv20Context;

  /**
   * Create a DatasetOperations.
   * @param {SpeechServicesAPIv20Context} client Reference to the service client.
   */
  constructor(client: SpeechServicesAPIv20Context) {
    this.client = client;
  }

  /**
   * @summary Gets the dataset identified by the given ID.
   * @param id The identifier of the dataset.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatasetGetResponse>
   */
  get(id: string, options?: msRest.RequestOptionsBase): Promise<Models.DatasetGetResponse>;
  /**
   * @param id The identifier of the dataset.
   * @param callback The callback
   */
  get(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The identifier of the dataset.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  get(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.DatasetGetResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.DatasetGetResponse>;
  }

  /**
   * @summary Deletes the specified dataset.
   * @param id The identifier of the dataset.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatasetDeleteResponse>
   */
  deleteMethod(id: string, options?: msRest.RequestOptionsBase): Promise<Models.DatasetDeleteResponse>;
  /**
   * @param id The identifier of the dataset.
   * @param callback The callback
   */
  deleteMethod(id: string, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  /**
   * @param id The identifier of the dataset.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  deleteMethod(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ErrorContent>, callback?: msRest.ServiceCallback<Models.ErrorContent>): Promise<Models.DatasetDeleteResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      deleteMethodOperationSpec,
      callback) as Promise<Models.DatasetDeleteResponse>;
  }

  /**
   * @summary Updates the mutable details of the dataset identified by its ID.
   * @param id The identifier of the dataset.
   * @param datasetUpdate The updated values for the dataset.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatasetUpdateResponse>
   */
  update(id: string, datasetUpdate: Models.DatasetUpdate, options?: msRest.RequestOptionsBase): Promise<Models.DatasetUpdateResponse>;
  /**
   * @param id The identifier of the dataset.
   * @param datasetUpdate The updated values for the dataset.
   * @param callback The callback
   */
  update(id: string, datasetUpdate: Models.DatasetUpdate, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The identifier of the dataset.
   * @param datasetUpdate The updated values for the dataset.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(id: string, datasetUpdate: Models.DatasetUpdate, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  update(id: string, datasetUpdate: Models.DatasetUpdate, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.DatasetUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        datasetUpdate,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.DatasetUpdateResponse>;
  }

  /**
   * @summary Uploads data and creates a new dataset.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatasetUploadResponse>
   */
  upload(options?: Models.DatasetUploadOptionalParams): Promise<Models.DatasetUploadResponse>;
  /**
   * @param callback The callback
   */
  upload(callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  upload(options: Models.DatasetUploadOptionalParams, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  upload(options?: Models.DatasetUploadOptionalParams | msRest.ServiceCallback<Models.ErrorContent>, callback?: msRest.ServiceCallback<Models.ErrorContent>): Promise<Models.DatasetUploadResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      uploadOperationSpec,
      callback) as Promise<Models.DatasetUploadResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/speechtotext/v2.0/datasets/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Dataset,
      headersMapper: Mappers.DatasetGetHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DatasetGetHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DatasetGetHeaders
    },
    404: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DatasetGetHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DatasetGetHeaders
    },
    default: {}
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/speechtotext/v2.0/datasets/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    204: {
      headersMapper: Mappers.DatasetDeleteHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DatasetDeleteHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DatasetDeleteHeaders
    },
    405: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DatasetDeleteHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DatasetDeleteHeaders
    },
    default: {}
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/speechtotext/v2.0/datasets/{id}",
  urlParameters: [
    Parameters.id
  ],
  requestBody: {
    parameterPath: "datasetUpdate",
    mapper: {
      ...Mappers.DatasetUpdate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Dataset,
      headersMapper: Mappers.DatasetUpdateHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DatasetUpdateHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DatasetUpdateHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DatasetUpdateHeaders
    },
    409: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DatasetUpdateHeaders
    },
    415: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DatasetUpdateHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DatasetUpdateHeaders
    },
    default: {}
  },
  serializer
};

const uploadOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/speechtotext/v2.0/datasets/upload",
  formDataParameters: [
    Parameters.name,
    Parameters.description,
    Parameters.locale,
    Parameters.dataImportKind,
    Parameters.properties,
    Parameters.audiodata,
    Parameters.transcriptions,
    Parameters.languagedata
  ],
  contentType: "multipart/form-data",
  responses: {
    202: {
      headersMapper: Mappers.DatasetUploadHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DatasetUploadHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DatasetUploadHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DatasetUploadHeaders
    },
    415: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DatasetUploadHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DatasetUploadHeaders
    },
    default: {}
  },
  serializer
};
