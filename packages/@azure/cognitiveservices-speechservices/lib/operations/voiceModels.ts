/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/voiceModelsMappers";
import { SpeechServicesAPIv20Context } from "../speechServicesAPIv20Context";

/** Class representing a VoiceModels. */
export class VoiceModels {
  private readonly client: SpeechServicesAPIv20Context;

  /**
   * Create a VoiceModels.
   * @param {SpeechServicesAPIv20Context} client Reference to the service client.
   */
  constructor(client: SpeechServicesAPIv20Context) {
    this.client = client;
  }

  /**
   * @summary Gets a list of voice model details.
   * @param [options] The optional parameters
   * @returns Promise<Models.VoiceModelsGetResponse>
   */
  get(options?: msRest.RequestOptionsBase): Promise<Models.VoiceModelsGetResponse>;
  /**
   * @param callback The callback
   */
  get(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  get(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.VoiceModelsGetResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getOperationSpec,
      callback) as Promise<Models.VoiceModelsGetResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/texttospeech/v2.0/models",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Model"
            }
          }
        }
      },
      headersMapper: Mappers.VoiceModelsGetHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.VoiceModelsGetHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.VoiceModelsGetHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.VoiceModelsGetHeaders
    },
    default: {}
  },
  serializer
};
