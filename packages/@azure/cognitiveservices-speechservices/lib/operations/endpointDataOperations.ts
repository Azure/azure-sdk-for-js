/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/endpointDataOperationsMappers";
import * as Parameters from "../models/parameters";
import { SpeechServicesAPIv20Context } from "../speechServicesAPIv20Context";

/** Class representing a EndpointDataOperations. */
export class EndpointDataOperations {
  private readonly client: SpeechServicesAPIv20Context;

  /**
   * Create a EndpointDataOperations.
   * @param {SpeechServicesAPIv20Context} client Reference to the service client.
   */
  constructor(client: SpeechServicesAPIv20Context) {
    this.client = client;
  }

  /**
   * Deletion will happen in the background and can take up to a day.
   * @summary Deletes the transcriptions and captured audio files associated with the endpoint
   * identified by the given ID.
   * @param endpointId The identifier of the endpoint.
   * @param [options] The optional parameters
   * @returns Promise<Models.EndpointDataDeleteResponse>
   */
  deleteMethod(endpointId: string, options?: msRest.RequestOptionsBase): Promise<Models.EndpointDataDeleteResponse>;
  /**
   * @param endpointId The identifier of the endpoint.
   * @param callback The callback
   */
  deleteMethod(endpointId: string, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  /**
   * @param endpointId The identifier of the endpoint.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(endpointId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  deleteMethod(endpointId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ErrorContent>, callback?: msRest.ServiceCallback<Models.ErrorContent>): Promise<Models.EndpointDataDeleteResponse> {
    return this.client.sendOperationRequest(
      {
        endpointId,
        options
      },
      deleteMethodOperationSpec,
      callback) as Promise<Models.EndpointDataDeleteResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/speechtotext/v2.0/endpoints/{endpointId}/data",
  urlParameters: [
    Parameters.endpointId
  ],
  responses: {
    204: {
      headersMapper: Mappers.EndpointDataDeleteHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.EndpointDataDeleteHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.EndpointDataDeleteHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.EndpointDataDeleteHeaders
    },
    default: {}
  },
  serializer
};
