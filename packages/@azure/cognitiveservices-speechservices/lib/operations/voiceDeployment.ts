/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/voiceDeploymentMappers";
import * as Parameters from "../models/parameters";
import { SpeechServicesAPIv20Context } from "../speechServicesAPIv20Context";

/** Class representing a VoiceDeployment. */
export class VoiceDeployment {
  private readonly client: SpeechServicesAPIv20Context;

  /**
   * Create a VoiceDeployment.
   * @param {SpeechServicesAPIv20Context} client Reference to the service client.
   */
  constructor(client: SpeechServicesAPIv20Context) {
    this.client = client;
  }

  /**
   * @summary Creates a new voice endpoint object.
   * @param endpoint
   * @param [options] The optional parameters
   * @returns Promise<Models.VoiceDeploymentCreateResponse>
   */
  create(endpoint: Models.EndpointDefinition, options?: msRest.RequestOptionsBase): Promise<Models.VoiceDeploymentCreateResponse>;
  /**
   * @param endpoint
   * @param callback The callback
   */
  create(endpoint: Models.EndpointDefinition, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  /**
   * @param endpoint
   * @param options The optional parameters
   * @param callback The callback
   */
  create(endpoint: Models.EndpointDefinition, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  create(endpoint: Models.EndpointDefinition, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ErrorContent>, callback?: msRest.ServiceCallback<Models.ErrorContent>): Promise<Models.VoiceDeploymentCreateResponse> {
    return this.client.sendOperationRequest(
      {
        endpoint,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.VoiceDeploymentCreateResponse>;
  }

  /**
   * @summary Gets the details of a Custom Voice endpoint.
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.VoiceDeploymentGetResponse>
   */
  get(id: string, options?: msRest.RequestOptionsBase): Promise<Models.VoiceDeploymentGetResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  get(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  get(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  get(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.VoiceDeploymentGetResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.VoiceDeploymentGetResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/texttospeech/v2.0/endpoints",
  requestBody: {
    parameterPath: "endpoint",
    mapper: {
      ...Mappers.EndpointDefinition,
      required: true
    }
  },
  responses: {
    201: {
      headersMapper: Mappers.VoiceDeploymentCreateHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.VoiceDeploymentCreateHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.VoiceDeploymentCreateHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.VoiceDeploymentCreateHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.VoiceDeploymentCreateHeaders
    },
    default: {}
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/texttospeech/v2.0/endpoints/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Endpoint,
      headersMapper: Mappers.VoiceDeploymentGetHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.VoiceDeploymentGetHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.VoiceDeploymentGetHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.VoiceDeploymentGetHeaders
    },
    default: {}
  },
  serializer
};
