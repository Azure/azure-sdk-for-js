/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { SpeechServicesAPIv20Context } from "./speechServicesAPIv20Context";

class SpeechServicesAPIv20 extends SpeechServicesAPIv20Context {
  /**
   * Initializes a new instance of the SpeechServicesAPIv20 class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials, options?: Models.SpeechServicesAPIv20Options) {
    super(credentials, options);
  }

  /**
   * @summary Gets the list of accuracy tests for the authenticated subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAccuracyTestsResponse>
   */
  getAccuracyTests(options?: msRest.RequestOptionsBase): Promise<Models.GetAccuracyTestsResponse>;
  /**
   * @param callback The callback
   */
  getAccuracyTests(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAccuracyTests(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getAccuracyTests(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetAccuracyTestsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAccuracyTestsOperationSpec,
      callback) as Promise<Models.GetAccuracyTestsResponse>;
  }

  /**
   * @summary Creates a new accuracy test.
   * @param testDefinition The details of the new accuracy test.
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateAccuracyTestResponse>
   */
  createAccuracyTest(testDefinition: Models.TestDefinition, options?: msRest.RequestOptionsBase): Promise<Models.CreateAccuracyTestResponse>;
  /**
   * @param testDefinition The details of the new accuracy test.
   * @param callback The callback
   */
  createAccuracyTest(testDefinition: Models.TestDefinition, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  /**
   * @param testDefinition The details of the new accuracy test.
   * @param options The optional parameters
   * @param callback The callback
   */
  createAccuracyTest(testDefinition: Models.TestDefinition, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  createAccuracyTest(testDefinition: Models.TestDefinition, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ErrorContent>, callback?: msRest.ServiceCallback<Models.ErrorContent>): Promise<Models.CreateAccuracyTestResponse> {
    return this.sendOperationRequest(
      {
        testDefinition,
        options
      },
      createAccuracyTestOperationSpec,
      callback) as Promise<Models.CreateAccuracyTestResponse>;
  }

  /**
   * @summary Gets the accuracy test identified by the given ID.
   * @param id The identifier of the accuracy test.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAccuracyTestResponse>
   */
  getAccuracyTest(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetAccuracyTestResponse>;
  /**
   * @param id The identifier of the accuracy test.
   * @param callback The callback
   */
  getAccuracyTest(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The identifier of the accuracy test.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAccuracyTest(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getAccuracyTest(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetAccuracyTestResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getAccuracyTestOperationSpec,
      callback) as Promise<Models.GetAccuracyTestResponse>;
  }

  /**
   * @summary Deletes the accuracy test identified by the given ID.
   * @param id The identifier of the accuracy test.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteAccuracyTestResponse>
   */
  deleteAccuracyTest(id: string, options?: msRest.RequestOptionsBase): Promise<Models.DeleteAccuracyTestResponse>;
  /**
   * @param id The identifier of the accuracy test.
   * @param callback The callback
   */
  deleteAccuracyTest(id: string, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  /**
   * @param id The identifier of the accuracy test.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAccuracyTest(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  deleteAccuracyTest(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ErrorContent>, callback?: msRest.ServiceCallback<Models.ErrorContent>): Promise<Models.DeleteAccuracyTestResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      deleteAccuracyTestOperationSpec,
      callback) as Promise<Models.DeleteAccuracyTestResponse>;
  }

  /**
   * @summary Updates the mutable details of the test identified by its id.
   * @param id The identifier of the accuracy test.
   * @param testUpdate The object containing the updated fields of the test.
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateAccuracyTestResponse>
   */
  updateAccuracyTest(id: string, testUpdate: Models.TestUpdate, options?: msRest.RequestOptionsBase): Promise<Models.UpdateAccuracyTestResponse>;
  /**
   * @param id The identifier of the accuracy test.
   * @param testUpdate The object containing the updated fields of the test.
   * @param callback The callback
   */
  updateAccuracyTest(id: string, testUpdate: Models.TestUpdate, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The identifier of the accuracy test.
   * @param testUpdate The object containing the updated fields of the test.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateAccuracyTest(id: string, testUpdate: Models.TestUpdate, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  updateAccuracyTest(id: string, testUpdate: Models.TestUpdate, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.UpdateAccuracyTestResponse> {
    return this.sendOperationRequest(
      {
        id,
        testUpdate,
        options
      },
      updateAccuracyTestOperationSpec,
      callback) as Promise<Models.UpdateAccuracyTestResponse>;
  }

  /**
   * @summary Gets a list of datasets for the authenticated subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDatasetsResponse>
   */
  getDatasets(options?: msRest.RequestOptionsBase): Promise<Models.GetDatasetsResponse>;
  /**
   * @param callback The callback
   */
  getDatasets(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDatasets(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getDatasets(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetDatasetsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getDatasetsOperationSpec,
      callback) as Promise<Models.GetDatasetsResponse>;
  }

  /**
   * @summary Gets the dataset identified by the given ID.
   * @param id The identifier of the dataset.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDatasetResponse>
   */
  getDataset(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetDatasetResponse>;
  /**
   * @param id The identifier of the dataset.
   * @param callback The callback
   */
  getDataset(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The identifier of the dataset.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDataset(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getDataset(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetDatasetResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getDatasetOperationSpec,
      callback) as Promise<Models.GetDatasetResponse>;
  }

  /**
   * @summary Deletes the specified dataset.
   * @param id The identifier of the dataset.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteDatasetResponse>
   */
  deleteDataset(id: string, options?: msRest.RequestOptionsBase): Promise<Models.DeleteDatasetResponse>;
  /**
   * @param id The identifier of the dataset.
   * @param callback The callback
   */
  deleteDataset(id: string, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  /**
   * @param id The identifier of the dataset.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteDataset(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  deleteDataset(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ErrorContent>, callback?: msRest.ServiceCallback<Models.ErrorContent>): Promise<Models.DeleteDatasetResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      deleteDatasetOperationSpec,
      callback) as Promise<Models.DeleteDatasetResponse>;
  }

  /**
   * @summary Updates the mutable details of the dataset identified by its ID.
   * @param id The identifier of the dataset.
   * @param datasetUpdate The updated values for the dataset.
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateDatasetResponse>
   */
  updateDataset(id: string, datasetUpdate: Models.DatasetUpdate, options?: msRest.RequestOptionsBase): Promise<Models.UpdateDatasetResponse>;
  /**
   * @param id The identifier of the dataset.
   * @param datasetUpdate The updated values for the dataset.
   * @param callback The callback
   */
  updateDataset(id: string, datasetUpdate: Models.DatasetUpdate, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The identifier of the dataset.
   * @param datasetUpdate The updated values for the dataset.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateDataset(id: string, datasetUpdate: Models.DatasetUpdate, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  updateDataset(id: string, datasetUpdate: Models.DatasetUpdate, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.UpdateDatasetResponse> {
    return this.sendOperationRequest(
      {
        id,
        datasetUpdate,
        options
      },
      updateDatasetOperationSpec,
      callback) as Promise<Models.UpdateDatasetResponse>;
  }

  /**
   * @summary Gets a list of supported locales for data imports.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSupportedLocalesForDatasetsResponse>
   */
  getSupportedLocalesForDatasets(options?: msRest.RequestOptionsBase): Promise<Models.GetSupportedLocalesForDatasetsResponse>;
  /**
   * @param callback The callback
   */
  getSupportedLocalesForDatasets(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getSupportedLocalesForDatasets(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getSupportedLocalesForDatasets(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetSupportedLocalesForDatasetsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getSupportedLocalesForDatasetsOperationSpec,
      callback) as Promise<Models.GetSupportedLocalesForDatasetsResponse>;
  }

  /**
   * @summary Uploads data and creates a new dataset.
   * @param [options] The optional parameters
   * @returns Promise<Models.UploadDatasetResponse>
   */
  uploadDataset(options?: Models.SpeechServicesAPIv20UploadDatasetOptionalParams): Promise<Models.UploadDatasetResponse>;
  /**
   * @param callback The callback
   */
  uploadDataset(callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  uploadDataset(options: Models.SpeechServicesAPIv20UploadDatasetOptionalParams, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  uploadDataset(options?: Models.SpeechServicesAPIv20UploadDatasetOptionalParams | msRest.ServiceCallback<Models.ErrorContent>, callback?: msRest.ServiceCallback<Models.ErrorContent>): Promise<Models.UploadDatasetResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      uploadDatasetOperationSpec,
      callback) as Promise<Models.UploadDatasetResponse>;
  }

  /**
   * @summary Gets the list of endpoints for the authenticated subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetEndpointsResponse>
   */
  getEndpoints(options?: msRest.RequestOptionsBase): Promise<Models.GetEndpointsResponse>;
  /**
   * @param callback The callback
   */
  getEndpoints(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getEndpoints(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getEndpoints(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetEndpointsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getEndpointsOperationSpec,
      callback) as Promise<Models.GetEndpointsResponse>;
  }

  /**
   * @summary Creates a new endpoint.
   * @param endpointDefinition The details of the endpoint.
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateEndpointResponse>
   */
  createEndpoint(endpointDefinition: Models.SpeechEndpointDefinition, options?: msRest.RequestOptionsBase): Promise<Models.CreateEndpointResponse>;
  /**
   * @param endpointDefinition The details of the endpoint.
   * @param callback The callback
   */
  createEndpoint(endpointDefinition: Models.SpeechEndpointDefinition, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  /**
   * @param endpointDefinition The details of the endpoint.
   * @param options The optional parameters
   * @param callback The callback
   */
  createEndpoint(endpointDefinition: Models.SpeechEndpointDefinition, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  createEndpoint(endpointDefinition: Models.SpeechEndpointDefinition, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ErrorContent>, callback?: msRest.ServiceCallback<Models.ErrorContent>): Promise<Models.CreateEndpointResponse> {
    return this.sendOperationRequest(
      {
        endpointDefinition,
        options
      },
      createEndpointOperationSpec,
      callback) as Promise<Models.CreateEndpointResponse>;
  }

  /**
   * @summary Gets the endpoint identified by the given ID.
   * @param id The identifier of the endpoint.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetEndpointResponse>
   */
  getEndpoint(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetEndpointResponse>;
  /**
   * @param id The identifier of the endpoint.
   * @param callback The callback
   */
  getEndpoint(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The identifier of the endpoint.
   * @param options The optional parameters
   * @param callback The callback
   */
  getEndpoint(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getEndpoint(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetEndpointResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getEndpointOperationSpec,
      callback) as Promise<Models.GetEndpointResponse>;
  }

  /**
   * @summary Deletes the endpoint identified by the given ID.
   * @param id The identifier of the endpoint.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteEndpointResponse>
   */
  deleteEndpoint(id: string, options?: msRest.RequestOptionsBase): Promise<Models.DeleteEndpointResponse>;
  /**
   * @param id The identifier of the endpoint.
   * @param callback The callback
   */
  deleteEndpoint(id: string, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  /**
   * @param id The identifier of the endpoint.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteEndpoint(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  deleteEndpoint(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ErrorContent>, callback?: msRest.ServiceCallback<Models.ErrorContent>): Promise<Models.DeleteEndpointResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      deleteEndpointOperationSpec,
      callback) as Promise<Models.DeleteEndpointResponse>;
  }

  /**
   * @summary Updates the metadata of the endpoint identified by the given ID.
   * @param id The identifier of the endpoint.
   * @param endpointUpdate The updated values for the endpoint.
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateEndpointResponse>
   */
  updateEndpoint(id: string, endpointUpdate: Models.EndpointUpdate, options?: msRest.RequestOptionsBase): Promise<Models.UpdateEndpointResponse>;
  /**
   * @param id The identifier of the endpoint.
   * @param endpointUpdate The updated values for the endpoint.
   * @param callback The callback
   */
  updateEndpoint(id: string, endpointUpdate: Models.EndpointUpdate, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The identifier of the endpoint.
   * @param endpointUpdate The updated values for the endpoint.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateEndpoint(id: string, endpointUpdate: Models.EndpointUpdate, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  updateEndpoint(id: string, endpointUpdate: Models.EndpointUpdate, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.UpdateEndpointResponse> {
    return this.sendOperationRequest(
      {
        id,
        endpointUpdate,
        options
      },
      updateEndpointOperationSpec,
      callback) as Promise<Models.UpdateEndpointResponse>;
  }

  /**
   * @summary Gets a list of supported locales for endpoint creations.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSupportedLocalesForEndpointsResponse>
   */
  getSupportedLocalesForEndpoints(options?: msRest.RequestOptionsBase): Promise<Models.GetSupportedLocalesForEndpointsResponse>;
  /**
   * @param callback The callback
   */
  getSupportedLocalesForEndpoints(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getSupportedLocalesForEndpoints(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getSupportedLocalesForEndpoints(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetSupportedLocalesForEndpointsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getSupportedLocalesForEndpointsOperationSpec,
      callback) as Promise<Models.GetSupportedLocalesForEndpointsResponse>;
  }

  /**
   * @summary Gets the list of endpoint data export tasks for the authenticated user.
   * @param endpointId The identifier of the endpoint.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetEndpointDataExportsResponse>
   */
  getEndpointDataExports(endpointId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetEndpointDataExportsResponse>;
  /**
   * @param endpointId The identifier of the endpoint.
   * @param callback The callback
   */
  getEndpointDataExports(endpointId: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param endpointId The identifier of the endpoint.
   * @param options The optional parameters
   * @param callback The callback
   */
  getEndpointDataExports(endpointId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getEndpointDataExports(endpointId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetEndpointDataExportsResponse> {
    return this.sendOperationRequest(
      {
        endpointId,
        options
      },
      getEndpointDataExportsOperationSpec,
      callback) as Promise<Models.GetEndpointDataExportsResponse>;
  }

  /**
   * @summary Create a new endpoint data export task.
   * @param endpointId The identifier of the endpoint.
   * @param endpointDataDefinition The details of the new endpoint data export.
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateEndpointDataExportResponse>
   */
  createEndpointDataExport(endpointId: string, endpointDataDefinition: Models.EndpointDataDefinition, options?: msRest.RequestOptionsBase): Promise<Models.CreateEndpointDataExportResponse>;
  /**
   * @param endpointId The identifier of the endpoint.
   * @param endpointDataDefinition The details of the new endpoint data export.
   * @param callback The callback
   */
  createEndpointDataExport(endpointId: string, endpointDataDefinition: Models.EndpointDataDefinition, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  /**
   * @param endpointId The identifier of the endpoint.
   * @param endpointDataDefinition The details of the new endpoint data export.
   * @param options The optional parameters
   * @param callback The callback
   */
  createEndpointDataExport(endpointId: string, endpointDataDefinition: Models.EndpointDataDefinition, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  createEndpointDataExport(endpointId: string, endpointDataDefinition: Models.EndpointDataDefinition, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ErrorContent>, callback?: msRest.ServiceCallback<Models.ErrorContent>): Promise<Models.CreateEndpointDataExportResponse> {
    return this.sendOperationRequest(
      {
        endpointId,
        endpointDataDefinition,
        options
      },
      createEndpointDataExportOperationSpec,
      callback) as Promise<Models.CreateEndpointDataExportResponse>;
  }

  /**
   * Deletion will happen in the background and can take up to a day.
   * @summary Deletes the transcriptions and captured audio files associated with the endpoint
   * identified by the given ID.
   * @param endpointId The identifier of the endpoint.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteEndpointDataResponse>
   */
  deleteEndpointData(endpointId: string, options?: msRest.RequestOptionsBase): Promise<Models.DeleteEndpointDataResponse>;
  /**
   * @param endpointId The identifier of the endpoint.
   * @param callback The callback
   */
  deleteEndpointData(endpointId: string, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  /**
   * @param endpointId The identifier of the endpoint.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteEndpointData(endpointId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  deleteEndpointData(endpointId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ErrorContent>, callback?: msRest.ServiceCallback<Models.ErrorContent>): Promise<Models.DeleteEndpointDataResponse> {
    return this.sendOperationRequest(
      {
        endpointId,
        options
      },
      deleteEndpointDataOperationSpec,
      callback) as Promise<Models.DeleteEndpointDataResponse>;
  }

  /**
   * @summary Gets the specified endpoint data export task for the authenticated user.
   * @param endpointId The identifier of the endpoint.
   * @param id The identifier of the data export.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetEndpointDataExportResponse>
   */
  getEndpointDataExport(endpointId: string, id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetEndpointDataExportResponse>;
  /**
   * @param endpointId The identifier of the endpoint.
   * @param id The identifier of the data export.
   * @param callback The callback
   */
  getEndpointDataExport(endpointId: string, id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param endpointId The identifier of the endpoint.
   * @param id The identifier of the data export.
   * @param options The optional parameters
   * @param callback The callback
   */
  getEndpointDataExport(endpointId: string, id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getEndpointDataExport(endpointId: string, id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetEndpointDataExportResponse> {
    return this.sendOperationRequest(
      {
        endpointId,
        id,
        options
      },
      getEndpointDataExportOperationSpec,
      callback) as Promise<Models.GetEndpointDataExportResponse>;
  }

  /**
   * @summary Deletes the endpoint data export task identified by the given ID.
   * @param endpointId The identifier of the endpoint.
   * @param id The identifier of the endpoint data export.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteEndpointDataExportResponse>
   */
  deleteEndpointDataExport(endpointId: string, id: string, options?: msRest.RequestOptionsBase): Promise<Models.DeleteEndpointDataExportResponse>;
  /**
   * @param endpointId The identifier of the endpoint.
   * @param id The identifier of the endpoint data export.
   * @param callback The callback
   */
  deleteEndpointDataExport(endpointId: string, id: string, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  /**
   * @param endpointId The identifier of the endpoint.
   * @param id The identifier of the endpoint data export.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteEndpointDataExport(endpointId: string, id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  deleteEndpointDataExport(endpointId: string, id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ErrorContent>, callback?: msRest.ServiceCallback<Models.ErrorContent>): Promise<Models.DeleteEndpointDataExportResponse> {
    return this.sendOperationRequest(
      {
        endpointId,
        id,
        options
      },
      deleteEndpointDataExportOperationSpec,
      callback) as Promise<Models.DeleteEndpointDataExportResponse>;
  }

  /**
   * @summary Gets the list of models for the authenticated subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetModelsResponse>
   */
  getModels(options?: msRest.RequestOptionsBase): Promise<Models.GetModelsResponse>;
  /**
   * @param callback The callback
   */
  getModels(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getModels(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getModels(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetModelsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getModelsOperationSpec,
      callback) as Promise<Models.GetModelsResponse>;
  }

  /**
   * @summary Creates a new model.
   * @param modelDefinition The details of the new model.
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateModelResponse>
   */
  createModel(modelDefinition: Models.SpeechModelDefinition, options?: msRest.RequestOptionsBase): Promise<Models.CreateModelResponse>;
  /**
   * @param modelDefinition The details of the new model.
   * @param callback The callback
   */
  createModel(modelDefinition: Models.SpeechModelDefinition, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  /**
   * @param modelDefinition The details of the new model.
   * @param options The optional parameters
   * @param callback The callback
   */
  createModel(modelDefinition: Models.SpeechModelDefinition, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  createModel(modelDefinition: Models.SpeechModelDefinition, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ErrorContent>, callback?: msRest.ServiceCallback<Models.ErrorContent>): Promise<Models.CreateModelResponse> {
    return this.sendOperationRequest(
      {
        modelDefinition,
        options
      },
      createModelOperationSpec,
      callback) as Promise<Models.CreateModelResponse>;
  }

  /**
   * @summary Gets the model identified by the given ID.
   * @param id The identifier of the model.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetModelResponse>
   */
  getModel(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetModelResponse>;
  /**
   * @param id The identifier of the model.
   * @param callback The callback
   */
  getModel(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The identifier of the model.
   * @param options The optional parameters
   * @param callback The callback
   */
  getModel(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getModel(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetModelResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getModelOperationSpec,
      callback) as Promise<Models.GetModelResponse>;
  }

  /**
   * @summary Deletes the model identified by the given ID.
   * @param id The identifier of the model.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteModelResponse>
   */
  deleteModel(id: string, options?: msRest.RequestOptionsBase): Promise<Models.DeleteModelResponse>;
  /**
   * @param id The identifier of the model.
   * @param callback The callback
   */
  deleteModel(id: string, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  /**
   * @param id The identifier of the model.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteModel(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  deleteModel(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ErrorContent>, callback?: msRest.ServiceCallback<Models.ErrorContent>): Promise<Models.DeleteModelResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      deleteModelOperationSpec,
      callback) as Promise<Models.DeleteModelResponse>;
  }

  /**
   * @summary Updates the metadata of the model identified by the given ID.
   * @param id The identifier of the model.
   * @param modelUpdate The updated values for the model.
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateModelResponse>
   */
  updateModel(id: string, modelUpdate: Models.ModelUpdate, options?: msRest.RequestOptionsBase): Promise<Models.UpdateModelResponse>;
  /**
   * @param id The identifier of the model.
   * @param modelUpdate The updated values for the model.
   * @param callback The callback
   */
  updateModel(id: string, modelUpdate: Models.ModelUpdate, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The identifier of the model.
   * @param modelUpdate The updated values for the model.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateModel(id: string, modelUpdate: Models.ModelUpdate, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  updateModel(id: string, modelUpdate: Models.ModelUpdate, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.UpdateModelResponse> {
    return this.sendOperationRequest(
      {
        id,
        modelUpdate,
        options
      },
      updateModelOperationSpec,
      callback) as Promise<Models.UpdateModelResponse>;
  }

  /**
   * @summary Gets a list of supported locales for model adaptation.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSupportedLocalesForModelsResponse>
   */
  getSupportedLocalesForModels(options?: msRest.RequestOptionsBase): Promise<Models.GetSupportedLocalesForModelsResponse>;
  /**
   * @param callback The callback
   */
  getSupportedLocalesForModels(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getSupportedLocalesForModels(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getSupportedLocalesForModels(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetSupportedLocalesForModelsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getSupportedLocalesForModelsOperationSpec,
      callback) as Promise<Models.GetSupportedLocalesForModelsResponse>;
  }

  /**
   * @summary Gets a list of transcriptions for the authenticated subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetTranscriptionsResponse>
   */
  getTranscriptions(options?: msRest.RequestOptionsBase): Promise<Models.GetTranscriptionsResponse>;
  /**
   * @param callback The callback
   */
  getTranscriptions(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getTranscriptions(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getTranscriptions(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetTranscriptionsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getTranscriptionsOperationSpec,
      callback) as Promise<Models.GetTranscriptionsResponse>;
  }

  /**
   * @summary Creates a new transcription.
   * @param transcription The details of the new transcription.
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateTranscriptionResponse>
   */
  createTranscription(transcription: Models.TranscriptionDefinition, options?: msRest.RequestOptionsBase): Promise<Models.CreateTranscriptionResponse>;
  /**
   * @param transcription The details of the new transcription.
   * @param callback The callback
   */
  createTranscription(transcription: Models.TranscriptionDefinition, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  /**
   * @param transcription The details of the new transcription.
   * @param options The optional parameters
   * @param callback The callback
   */
  createTranscription(transcription: Models.TranscriptionDefinition, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  createTranscription(transcription: Models.TranscriptionDefinition, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ErrorContent>, callback?: msRest.ServiceCallback<Models.ErrorContent>): Promise<Models.CreateTranscriptionResponse> {
    return this.sendOperationRequest(
      {
        transcription,
        options
      },
      createTranscriptionOperationSpec,
      callback) as Promise<Models.CreateTranscriptionResponse>;
  }

  /**
   * @summary Gets the transcription identified by the given ID.
   * @param id The identifier of the transcription.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetTranscriptionResponse>
   */
  getTranscription(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetTranscriptionResponse>;
  /**
   * @param id The identifier of the transcription.
   * @param callback The callback
   */
  getTranscription(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The identifier of the transcription.
   * @param options The optional parameters
   * @param callback The callback
   */
  getTranscription(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getTranscription(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetTranscriptionResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getTranscriptionOperationSpec,
      callback) as Promise<Models.GetTranscriptionResponse>;
  }

  /**
   * @summary Deletes the specified transcription task.
   * @param id The identifier of the transcription.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteTranscriptionResponse>
   */
  deleteTranscription(id: string, options?: msRest.RequestOptionsBase): Promise<Models.DeleteTranscriptionResponse>;
  /**
   * @param id The identifier of the transcription.
   * @param callback The callback
   */
  deleteTranscription(id: string, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  /**
   * @param id The identifier of the transcription.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteTranscription(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  deleteTranscription(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ErrorContent>, callback?: msRest.ServiceCallback<Models.ErrorContent>): Promise<Models.DeleteTranscriptionResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      deleteTranscriptionOperationSpec,
      callback) as Promise<Models.DeleteTranscriptionResponse>;
  }

  /**
   * @summary Updates the mutable details of the transcription identified by its ID.
   * @param id The identifier of the transcription.
   * @param transcriptionUpdate The updated values for the transcription.
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateTranscriptionResponse>
   */
  updateTranscription(id: string, transcriptionUpdate: Models.TranscriptionUpdate, options?: msRest.RequestOptionsBase): Promise<Models.UpdateTranscriptionResponse>;
  /**
   * @param id The identifier of the transcription.
   * @param transcriptionUpdate The updated values for the transcription.
   * @param callback The callback
   */
  updateTranscription(id: string, transcriptionUpdate: Models.TranscriptionUpdate, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The identifier of the transcription.
   * @param transcriptionUpdate The updated values for the transcription.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateTranscription(id: string, transcriptionUpdate: Models.TranscriptionUpdate, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  updateTranscription(id: string, transcriptionUpdate: Models.TranscriptionUpdate, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.UpdateTranscriptionResponse> {
    return this.sendOperationRequest(
      {
        id,
        transcriptionUpdate,
        options
      },
      updateTranscriptionOperationSpec,
      callback) as Promise<Models.UpdateTranscriptionResponse>;
  }

  /**
   * @summary Gets a list of supported locales for offline transcriptions.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSupportedLocalesForTranscriptionsResponse>
   */
  getSupportedLocalesForTranscriptions(options?: msRest.RequestOptionsBase): Promise<Models.GetSupportedLocalesForTranscriptionsResponse>;
  /**
   * @param callback The callback
   */
  getSupportedLocalesForTranscriptions(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getSupportedLocalesForTranscriptions(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getSupportedLocalesForTranscriptions(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetSupportedLocalesForTranscriptionsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getSupportedLocalesForTranscriptionsOperationSpec,
      callback) as Promise<Models.GetSupportedLocalesForTranscriptionsResponse>;
  }

  /**
   * @summary Gets all language generation endpoint of a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetLanguageGenerationEndpointsResponse>
   */
  getLanguageGenerationEndpoints(options?: msRest.RequestOptionsBase): Promise<Models.GetLanguageGenerationEndpointsResponse>;
  /**
   * @param callback The callback
   */
  getLanguageGenerationEndpoints(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getLanguageGenerationEndpoints(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getLanguageGenerationEndpoints(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetLanguageGenerationEndpointsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getLanguageGenerationEndpointsOperationSpec,
      callback) as Promise<Models.GetLanguageGenerationEndpointsResponse>;
  }

  /**
   * @summary Creates a new language generation endpoint.
   * @param endpointDefinition
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateLanguageGenerationEndpointResponse>
   */
  createLanguageGenerationEndpoint(endpointDefinition: Models.EndpointDefinition, options?: msRest.RequestOptionsBase): Promise<Models.CreateLanguageGenerationEndpointResponse>;
  /**
   * @param endpointDefinition
   * @param callback The callback
   */
  createLanguageGenerationEndpoint(endpointDefinition: Models.EndpointDefinition, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  /**
   * @param endpointDefinition
   * @param options The optional parameters
   * @param callback The callback
   */
  createLanguageGenerationEndpoint(endpointDefinition: Models.EndpointDefinition, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  createLanguageGenerationEndpoint(endpointDefinition: Models.EndpointDefinition, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ErrorContent>, callback?: msRest.ServiceCallback<Models.ErrorContent>): Promise<Models.CreateLanguageGenerationEndpointResponse> {
    return this.sendOperationRequest(
      {
        endpointDefinition,
        options
      },
      createLanguageGenerationEndpointOperationSpec,
      callback) as Promise<Models.CreateLanguageGenerationEndpointResponse>;
  }

  /**
   * @summary Gets the specified deployed language generation endpoint.
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.GetLanguageGenerationEndpointResponse>
   */
  getLanguageGenerationEndpoint(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetLanguageGenerationEndpointResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  getLanguageGenerationEndpoint(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getLanguageGenerationEndpoint(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getLanguageGenerationEndpoint(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetLanguageGenerationEndpointResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getLanguageGenerationEndpointOperationSpec,
      callback) as Promise<Models.GetLanguageGenerationEndpointResponse>;
  }

  /**
   * @summary Deletes the language generation model endpoint with the given id.
   * @param id The identifier of the language generation model endpoint.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteLanguageGenerationEndpointResponse>
   */
  deleteLanguageGenerationEndpoint(id: string, options?: msRest.RequestOptionsBase): Promise<Models.DeleteLanguageGenerationEndpointResponse>;
  /**
   * @param id The identifier of the language generation model endpoint.
   * @param callback The callback
   */
  deleteLanguageGenerationEndpoint(id: string, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  /**
   * @param id The identifier of the language generation model endpoint.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteLanguageGenerationEndpoint(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  deleteLanguageGenerationEndpoint(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ErrorContent>, callback?: msRest.ServiceCallback<Models.ErrorContent>): Promise<Models.DeleteLanguageGenerationEndpointResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      deleteLanguageGenerationEndpointOperationSpec,
      callback) as Promise<Models.DeleteLanguageGenerationEndpointResponse>;
  }

  /**
   * @summary Updates the mutable details of the language generation endpoint identified by its id.
   * @param id The identifier of the language generation model endpoint.
   * @param endpointUpdate The object contains the updated fields of the endpoint.
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateLanguageGenerationEndpointResponse>
   */
  updateLanguageGenerationEndpoint(id: string, endpointUpdate: Models.EndpointUpdate, options?: msRest.RequestOptionsBase): Promise<Models.UpdateLanguageGenerationEndpointResponse>;
  /**
   * @param id The identifier of the language generation model endpoint.
   * @param endpointUpdate The object contains the updated fields of the endpoint.
   * @param callback The callback
   */
  updateLanguageGenerationEndpoint(id: string, endpointUpdate: Models.EndpointUpdate, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The identifier of the language generation model endpoint.
   * @param endpointUpdate The object contains the updated fields of the endpoint.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateLanguageGenerationEndpoint(id: string, endpointUpdate: Models.EndpointUpdate, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  updateLanguageGenerationEndpoint(id: string, endpointUpdate: Models.EndpointUpdate, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.UpdateLanguageGenerationEndpointResponse> {
    return this.sendOperationRequest(
      {
        id,
        endpointUpdate,
        options
      },
      updateLanguageGenerationEndpointOperationSpec,
      callback) as Promise<Models.UpdateLanguageGenerationEndpointResponse>;
  }

  /**
   * @summary Gets a list of supported locales for language generation endpoint creation.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSupportedLocalesForLanguageGenerationEndpointsResponse>
   */
  getSupportedLocalesForLanguageGenerationEndpoints(options?: msRest.RequestOptionsBase): Promise<Models.GetSupportedLocalesForLanguageGenerationEndpointsResponse>;
  /**
   * @param callback The callback
   */
  getSupportedLocalesForLanguageGenerationEndpoints(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getSupportedLocalesForLanguageGenerationEndpoints(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getSupportedLocalesForLanguageGenerationEndpoints(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetSupportedLocalesForLanguageGenerationEndpointsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getSupportedLocalesForLanguageGenerationEndpointsOperationSpec,
      callback) as Promise<Models.GetSupportedLocalesForLanguageGenerationEndpointsResponse>;
  }

  /**
   * @summary Gets all language generation model of a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetLanguageGenerationModelsResponse>
   */
  getLanguageGenerationModels(options?: msRest.RequestOptionsBase): Promise<Models.GetLanguageGenerationModelsResponse>;
  /**
   * @param callback The callback
   */
  getLanguageGenerationModels(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getLanguageGenerationModels(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getLanguageGenerationModels(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetLanguageGenerationModelsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getLanguageGenerationModelsOperationSpec,
      callback) as Promise<Models.GetLanguageGenerationModelsResponse>;
  }

  /**
   * @summary Creates a new language generation model.
   * @param modelDefinition
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateLanguageGenerationModelResponse>
   */
  createLanguageGenerationModel(modelDefinition: Models.ModelDefinition, options?: msRest.RequestOptionsBase): Promise<Models.CreateLanguageGenerationModelResponse>;
  /**
   * @param modelDefinition
   * @param callback The callback
   */
  createLanguageGenerationModel(modelDefinition: Models.ModelDefinition, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  /**
   * @param modelDefinition
   * @param options The optional parameters
   * @param callback The callback
   */
  createLanguageGenerationModel(modelDefinition: Models.ModelDefinition, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  createLanguageGenerationModel(modelDefinition: Models.ModelDefinition, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ErrorContent>, callback?: msRest.ServiceCallback<Models.ErrorContent>): Promise<Models.CreateLanguageGenerationModelResponse> {
    return this.sendOperationRequest(
      {
        modelDefinition,
        options
      },
      createLanguageGenerationModelOperationSpec,
      callback) as Promise<Models.CreateLanguageGenerationModelResponse>;
  }

  /**
   * @summary Gets the specified language generation model.
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.GetLanguageGenerationModelResponse>
   */
  getLanguageGenerationModel(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetLanguageGenerationModelResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  getLanguageGenerationModel(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getLanguageGenerationModel(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getLanguageGenerationModel(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetLanguageGenerationModelResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getLanguageGenerationModelOperationSpec,
      callback) as Promise<Models.GetLanguageGenerationModelResponse>;
  }

  /**
   * @summary Deletes the language generation model with the given id.
   * @param id The identifier of the language generation model.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteLanguageGenerationModelResponse>
   */
  deleteLanguageGenerationModel(id: string, options?: msRest.RequestOptionsBase): Promise<Models.DeleteLanguageGenerationModelResponse>;
  /**
   * @param id The identifier of the language generation model.
   * @param callback The callback
   */
  deleteLanguageGenerationModel(id: string, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  /**
   * @param id The identifier of the language generation model.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteLanguageGenerationModel(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  deleteLanguageGenerationModel(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ErrorContent>, callback?: msRest.ServiceCallback<Models.ErrorContent>): Promise<Models.DeleteLanguageGenerationModelResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      deleteLanguageGenerationModelOperationSpec,
      callback) as Promise<Models.DeleteLanguageGenerationModelResponse>;
  }

  /**
   * @summary Updates the mutable details of the language generation model identified by its id.
   * @param id The route parameter identifies the language generation model to change.
   * @param modelUpdate The object contains the updated fields of the model.
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateLanguageGenerationModelResponse>
   */
  updateLanguageGenerationModel(id: string, modelUpdate: Models.ModelUpdate, options?: msRest.RequestOptionsBase): Promise<Models.UpdateLanguageGenerationModelResponse>;
  /**
   * @param id The route parameter identifies the language generation model to change.
   * @param modelUpdate The object contains the updated fields of the model.
   * @param callback The callback
   */
  updateLanguageGenerationModel(id: string, modelUpdate: Models.ModelUpdate, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The route parameter identifies the language generation model to change.
   * @param modelUpdate The object contains the updated fields of the model.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateLanguageGenerationModel(id: string, modelUpdate: Models.ModelUpdate, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  updateLanguageGenerationModel(id: string, modelUpdate: Models.ModelUpdate, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.UpdateLanguageGenerationModelResponse> {
    return this.sendOperationRequest(
      {
        id,
        modelUpdate,
        options
      },
      updateLanguageGenerationModelOperationSpec,
      callback) as Promise<Models.UpdateLanguageGenerationModelResponse>;
  }

  /**
   * @summary Gets a list of supported locales for language generation model creation.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSupportedLocalesForLanguageGenerationModelsResponse>
   */
  getSupportedLocalesForLanguageGenerationModels(options?: msRest.RequestOptionsBase): Promise<Models.GetSupportedLocalesForLanguageGenerationModelsResponse>;
  /**
   * @param callback The callback
   */
  getSupportedLocalesForLanguageGenerationModels(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getSupportedLocalesForLanguageGenerationModels(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getSupportedLocalesForLanguageGenerationModels(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetSupportedLocalesForLanguageGenerationModelsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getSupportedLocalesForLanguageGenerationModelsOperationSpec,
      callback) as Promise<Models.GetSupportedLocalesForLanguageGenerationModelsResponse>;
  }

  /**
   * @summary The action returns the health of the different components of the serivce.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetHealthStatusResponse>
   */
  getHealthStatus(options?: msRest.RequestOptionsBase): Promise<Models.GetHealthStatusResponse>;
  /**
   * @param callback The callback
   */
  getHealthStatus(callback: msRest.ServiceCallback<Models.HealthStatusResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getHealthStatus(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HealthStatusResponse>): void;
  getHealthStatus(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HealthStatusResponse>, callback?: msRest.ServiceCallback<Models.HealthStatusResponse>): Promise<Models.GetHealthStatusResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getHealthStatusOperationSpec,
      callback) as Promise<Models.GetHealthStatusResponse>;
  }

  /**
   * @summary Gets all voice datasets of a user.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetVoiceDatasetsResponse>
   */
  getVoiceDatasets(options?: msRest.RequestOptionsBase): Promise<Models.GetVoiceDatasetsResponse>;
  /**
   * @param callback The callback
   */
  getVoiceDatasets(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getVoiceDatasets(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getVoiceDatasets(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetVoiceDatasetsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getVoiceDatasetsOperationSpec,
      callback) as Promise<Models.GetVoiceDatasetsResponse>;
  }

  /**
   * @summary Gets a list of supported locales for custom voice data imports.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSupportedLocalesForVoiceDatasetsResponse>
   */
  getSupportedLocalesForVoiceDatasets(options?: msRest.RequestOptionsBase): Promise<Models.GetSupportedLocalesForVoiceDatasetsResponse>;
  /**
   * @param callback The callback
   */
  getSupportedLocalesForVoiceDatasets(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getSupportedLocalesForVoiceDatasets(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getSupportedLocalesForVoiceDatasets(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetSupportedLocalesForVoiceDatasetsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getSupportedLocalesForVoiceDatasetsOperationSpec,
      callback) as Promise<Models.GetSupportedLocalesForVoiceDatasetsResponse>;
  }

  /**
   * @summary Uploads data and creates a new voice data object.
   * @param [options] The optional parameters
   * @returns Promise<Models.UploadVoiceDatasetResponse>
   */
  uploadVoiceDataset(options?: Models.SpeechServicesAPIv20UploadVoiceDatasetOptionalParams): Promise<Models.UploadVoiceDatasetResponse>;
  /**
   * @param callback The callback
   */
  uploadVoiceDataset(callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  uploadVoiceDataset(options: Models.SpeechServicesAPIv20UploadVoiceDatasetOptionalParams, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  uploadVoiceDataset(options?: Models.SpeechServicesAPIv20UploadVoiceDatasetOptionalParams | msRest.ServiceCallback<Models.ErrorContent>, callback?: msRest.ServiceCallback<Models.ErrorContent>): Promise<Models.UploadVoiceDatasetResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      uploadVoiceDatasetOperationSpec,
      callback) as Promise<Models.UploadVoiceDatasetResponse>;
  }

  /**
   * @summary Deletes the voice dataset with the given id.
   * @param id The identifier of the voice dataset
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteVoiceDatasetResponse>
   */
  deleteVoiceDataset(id: string, options?: msRest.RequestOptionsBase): Promise<Models.DeleteVoiceDatasetResponse>;
  /**
   * @param id The identifier of the voice dataset
   * @param callback The callback
   */
  deleteVoiceDataset(id: string, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  /**
   * @param id The identifier of the voice dataset
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteVoiceDataset(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  deleteVoiceDataset(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ErrorContent>, callback?: msRest.ServiceCallback<Models.ErrorContent>): Promise<Models.DeleteVoiceDatasetResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      deleteVoiceDatasetOperationSpec,
      callback) as Promise<Models.DeleteVoiceDatasetResponse>;
  }

  /**
   * @summary Updates the mutable details of the voice dataset identified by its ID.
   * @param id The identifier of the voice dataset.
   * @param datasetUpdate The updated values for the voice dataset.
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateVoiceDatasetResponse>
   */
  updateVoiceDataset(id: string, datasetUpdate: Models.DatasetUpdate, options?: msRest.RequestOptionsBase): Promise<Models.UpdateVoiceDatasetResponse>;
  /**
   * @param id The identifier of the voice dataset.
   * @param datasetUpdate The updated values for the voice dataset.
   * @param callback The callback
   */
  updateVoiceDataset(id: string, datasetUpdate: Models.DatasetUpdate, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The identifier of the voice dataset.
   * @param datasetUpdate The updated values for the voice dataset.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateVoiceDataset(id: string, datasetUpdate: Models.DatasetUpdate, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  updateVoiceDataset(id: string, datasetUpdate: Models.DatasetUpdate, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.UpdateVoiceDatasetResponse> {
    return this.sendOperationRequest(
      {
        id,
        datasetUpdate,
        options
      },
      updateVoiceDatasetOperationSpec,
      callback) as Promise<Models.UpdateVoiceDatasetResponse>;
  }

  /**
   * @summary Gets a list of voice endpoint details.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetVoiceDeploymentsResponse>
   */
  getVoiceDeployments(options?: msRest.RequestOptionsBase): Promise<Models.GetVoiceDeploymentsResponse>;
  /**
   * @param callback The callback
   */
  getVoiceDeployments(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getVoiceDeployments(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getVoiceDeployments(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetVoiceDeploymentsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getVoiceDeploymentsOperationSpec,
      callback) as Promise<Models.GetVoiceDeploymentsResponse>;
  }

  /**
   * @summary Creates a new voice endpoint object.
   * @param endpoint
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateVoiceDeploymentResponse>
   */
  createVoiceDeployment(endpoint: Models.EndpointDefinition, options?: msRest.RequestOptionsBase): Promise<Models.CreateVoiceDeploymentResponse>;
  /**
   * @param endpoint
   * @param callback The callback
   */
  createVoiceDeployment(endpoint: Models.EndpointDefinition, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  /**
   * @param endpoint
   * @param options The optional parameters
   * @param callback The callback
   */
  createVoiceDeployment(endpoint: Models.EndpointDefinition, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  createVoiceDeployment(endpoint: Models.EndpointDefinition, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ErrorContent>, callback?: msRest.ServiceCallback<Models.ErrorContent>): Promise<Models.CreateVoiceDeploymentResponse> {
    return this.sendOperationRequest(
      {
        endpoint,
        options
      },
      createVoiceDeploymentOperationSpec,
      callback) as Promise<Models.CreateVoiceDeploymentResponse>;
  }

  /**
   * @summary Gets the details of a Custom Voice endpoint.
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.GetVoiceDeploymentResponse>
   */
  getVoiceDeployment(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetVoiceDeploymentResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  getVoiceDeployment(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getVoiceDeployment(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getVoiceDeployment(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetVoiceDeploymentResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getVoiceDeploymentOperationSpec,
      callback) as Promise<Models.GetVoiceDeploymentResponse>;
  }

  /**
   * @summary Delete the specified voice endpoint.
   * @param id The id of voice endpoint.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteDeploymentResponse>
   */
  deleteDeployment(id: string, options?: msRest.RequestOptionsBase): Promise<Models.DeleteDeploymentResponse>;
  /**
   * @param id The id of voice endpoint.
   * @param callback The callback
   */
  deleteDeployment(id: string, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  /**
   * @param id The id of voice endpoint.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteDeployment(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  deleteDeployment(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ErrorContent>, callback?: msRest.ServiceCallback<Models.ErrorContent>): Promise<Models.DeleteDeploymentResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      deleteDeploymentOperationSpec,
      callback) as Promise<Models.DeleteDeploymentResponse>;
  }

  /**
   * @summary Updates the name and description of the endpoint identified by the given ID.
   * @param id The identifier of the endpoint.
   * @param endpointUpdate The updated values for the endpoint.
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateVoiceEndpointResponse>
   */
  updateVoiceEndpoint(id: string, endpointUpdate: Models.EndpointUpdate, options?: msRest.RequestOptionsBase): Promise<Models.UpdateVoiceEndpointResponse>;
  /**
   * @param id The identifier of the endpoint.
   * @param endpointUpdate The updated values for the endpoint.
   * @param callback The callback
   */
  updateVoiceEndpoint(id: string, endpointUpdate: Models.EndpointUpdate, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The identifier of the endpoint.
   * @param endpointUpdate The updated values for the endpoint.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateVoiceEndpoint(id: string, endpointUpdate: Models.EndpointUpdate, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  updateVoiceEndpoint(id: string, endpointUpdate: Models.EndpointUpdate, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.UpdateVoiceEndpointResponse> {
    return this.sendOperationRequest(
      {
        id,
        endpointUpdate,
        options
      },
      updateVoiceEndpointOperationSpec,
      callback) as Promise<Models.UpdateVoiceEndpointResponse>;
  }

  /**
   * @summary Gets a list of supported locales for custom voice Endpoints.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSupportedLocalesForVoiceEndpointsResponse>
   */
  getSupportedLocalesForVoiceEndpoints(options?: msRest.RequestOptionsBase): Promise<Models.GetSupportedLocalesForVoiceEndpointsResponse>;
  /**
   * @param callback The callback
   */
  getSupportedLocalesForVoiceEndpoints(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getSupportedLocalesForVoiceEndpoints(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getSupportedLocalesForVoiceEndpoints(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetSupportedLocalesForVoiceEndpointsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getSupportedLocalesForVoiceEndpointsOperationSpec,
      callback) as Promise<Models.GetSupportedLocalesForVoiceEndpointsResponse>;
  }

  /**
   * @summary Gets a list of voice model details.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetVoiceModelsResponse>
   */
  getVoiceModels(options?: msRest.RequestOptionsBase): Promise<Models.GetVoiceModelsResponse>;
  /**
   * @param callback The callback
   */
  getVoiceModels(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getVoiceModels(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getVoiceModels(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetVoiceModelsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getVoiceModelsOperationSpec,
      callback) as Promise<Models.GetVoiceModelsResponse>;
  }

  /**
   * @summary Creates a new voice model object.
   * @param modelDefinition
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateVoiceModelResponse>
   */
  createVoiceModel(modelDefinition: Models.ModelDefinition, options?: msRest.RequestOptionsBase): Promise<Models.CreateVoiceModelResponse>;
  /**
   * @param modelDefinition
   * @param callback The callback
   */
  createVoiceModel(modelDefinition: Models.ModelDefinition, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  /**
   * @param modelDefinition
   * @param options The optional parameters
   * @param callback The callback
   */
  createVoiceModel(modelDefinition: Models.ModelDefinition, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  createVoiceModel(modelDefinition: Models.ModelDefinition, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ErrorContent>, callback?: msRest.ServiceCallback<Models.ErrorContent>): Promise<Models.CreateVoiceModelResponse> {
    return this.sendOperationRequest(
      {
        modelDefinition,
        options
      },
      createVoiceModelOperationSpec,
      callback) as Promise<Models.CreateVoiceModelResponse>;
  }

  /**
   * @summary Gets specified voice model details.
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.GetVoiceModelResponse>
   */
  getVoiceModel(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetVoiceModelResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  getVoiceModel(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getVoiceModel(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getVoiceModel(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetVoiceModelResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getVoiceModelOperationSpec,
      callback) as Promise<Models.GetVoiceModelResponse>;
  }

  /**
   * @summary Deletes the voice model with the given id.
   * @param id The identifier of the voice model
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteVoiceModelResponse>
   */
  deleteVoiceModel(id: string, options?: msRest.RequestOptionsBase): Promise<Models.DeleteVoiceModelResponse>;
  /**
   * @param id The identifier of the voice model
   * @param callback The callback
   */
  deleteVoiceModel(id: string, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  /**
   * @param id The identifier of the voice model
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteVoiceModel(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  deleteVoiceModel(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ErrorContent>, callback?: msRest.ServiceCallback<Models.ErrorContent>): Promise<Models.DeleteVoiceModelResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      deleteVoiceModelOperationSpec,
      callback) as Promise<Models.DeleteVoiceModelResponse>;
  }

  /**
   * @summary Updates the metadata of the voice model identified by the given ID.
   * @param id The identifier of the voice model.
   * @param modelUpdate The updated values for the voice model.
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateVoiceModelResponse>
   */
  updateVoiceModel(id: string, modelUpdate: Models.ModelUpdate, options?: msRest.RequestOptionsBase): Promise<Models.UpdateVoiceModelResponse>;
  /**
   * @param id The identifier of the voice model.
   * @param modelUpdate The updated values for the voice model.
   * @param callback The callback
   */
  updateVoiceModel(id: string, modelUpdate: Models.ModelUpdate, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The identifier of the voice model.
   * @param modelUpdate The updated values for the voice model.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateVoiceModel(id: string, modelUpdate: Models.ModelUpdate, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  updateVoiceModel(id: string, modelUpdate: Models.ModelUpdate, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.UpdateVoiceModelResponse> {
    return this.sendOperationRequest(
      {
        id,
        modelUpdate,
        options
      },
      updateVoiceModelOperationSpec,
      callback) as Promise<Models.UpdateVoiceModelResponse>;
  }

  /**
   * @summary Gets a list of supported locales for custom voice Models.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSupportedLocalesForVoiceModelsResponse>
   */
  getSupportedLocalesForVoiceModels(options?: msRest.RequestOptionsBase): Promise<Models.GetSupportedLocalesForVoiceModelsResponse>;
  /**
   * @param callback The callback
   */
  getSupportedLocalesForVoiceModels(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getSupportedLocalesForVoiceModels(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getSupportedLocalesForVoiceModels(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetSupportedLocalesForVoiceModelsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getSupportedLocalesForVoiceModelsOperationSpec,
      callback) as Promise<Models.GetSupportedLocalesForVoiceModelsResponse>;
  }

  /**
   * @summary Gets detail of the specified voice test.
   * @param id The identifier of the voice test.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetVoiceTestResponse>
   */
  getVoiceTest(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetVoiceTestResponse>;
  /**
   * @param id The identifier of the voice test.
   * @param callback The callback
   */
  getVoiceTest(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id The identifier of the voice test.
   * @param options The optional parameters
   * @param callback The callback
   */
  getVoiceTest(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getVoiceTest(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GetVoiceTestResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getVoiceTestOperationSpec,
      callback) as Promise<Models.GetVoiceTestResponse>;
  }

  /**
   * @summary Deletes the specified voice test.
   * @param id The identifier of the voice test.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteVoiceTestResponse>
   */
  deleteVoiceTest(id: string, options?: msRest.RequestOptionsBase): Promise<Models.DeleteVoiceTestResponse>;
  /**
   * @param id The identifier of the voice test.
   * @param callback The callback
   */
  deleteVoiceTest(id: string, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  /**
   * @param id The identifier of the voice test.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteVoiceTest(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  deleteVoiceTest(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ErrorContent>, callback?: msRest.ServiceCallback<Models.ErrorContent>): Promise<Models.DeleteVoiceTestResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      deleteVoiceTestOperationSpec,
      callback) as Promise<Models.DeleteVoiceTestResponse>;
  }

  /**
   * @summary Creates a new voice test.
   * @param voiceTestDefinition
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateVoiceTestResponse>
   */
  createVoiceTest(voiceTestDefinition: Models.VoiceTestDefinition, options?: msRest.RequestOptionsBase): Promise<Models.CreateVoiceTestResponse>;
  /**
   * @param voiceTestDefinition
   * @param callback The callback
   */
  createVoiceTest(voiceTestDefinition: Models.VoiceTestDefinition, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  /**
   * @param voiceTestDefinition
   * @param options The optional parameters
   * @param callback The callback
   */
  createVoiceTest(voiceTestDefinition: Models.VoiceTestDefinition, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ErrorContent>): void;
  createVoiceTest(voiceTestDefinition: Models.VoiceTestDefinition, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ErrorContent>, callback?: msRest.ServiceCallback<Models.ErrorContent>): Promise<Models.CreateVoiceTestResponse> {
    return this.sendOperationRequest(
      {
        voiceTestDefinition,
        options
      },
      createVoiceTestOperationSpec,
      callback) as Promise<Models.CreateVoiceTestResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getAccuracyTestsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/speechtotext/v2.0/accuracytests",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Test"
            }
          }
        }
      },
      headersMapper: Mappers.GetAccuracyTestsHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetAccuracyTestsHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetAccuracyTestsHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetAccuracyTestsHeaders
    },
    default: {}
  },
  serializer
};

const createAccuracyTestOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/speechtotext/v2.0/accuracytests",
  requestBody: {
    parameterPath: "testDefinition",
    mapper: {
      ...Mappers.TestDefinition,
      required: true
    }
  },
  responses: {
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateAccuracyTestHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateAccuracyTestHeaders
    },
    415: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateAccuracyTestHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateAccuracyTestHeaders
    },
    default: {}
  },
  serializer
};

const getAccuracyTestOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/speechtotext/v2.0/accuracytests/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Test,
      headersMapper: Mappers.GetAccuracyTestHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetAccuracyTestHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetAccuracyTestHeaders
    },
    404: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetAccuracyTestHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetAccuracyTestHeaders
    },
    default: {}
  },
  serializer
};

const deleteAccuracyTestOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/speechtotext/v2.0/accuracytests/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    204: {
      headersMapper: Mappers.DeleteAccuracyTestHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteAccuracyTestHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteAccuracyTestHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteAccuracyTestHeaders
    },
    default: {}
  },
  serializer
};

const updateAccuracyTestOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/speechtotext/v2.0/accuracytests/{id}",
  urlParameters: [
    Parameters.id
  ],
  requestBody: {
    parameterPath: "testUpdate",
    mapper: {
      ...Mappers.TestUpdate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Test,
      headersMapper: Mappers.UpdateAccuracyTestHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateAccuracyTestHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateAccuracyTestHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateAccuracyTestHeaders
    },
    409: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateAccuracyTestHeaders
    },
    415: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateAccuracyTestHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateAccuracyTestHeaders
    },
    default: {}
  },
  serializer
};

const getDatasetsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/speechtotext/v2.0/datasets",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Dataset"
            }
          }
        }
      },
      headersMapper: Mappers.GetDatasetsHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetDatasetsHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetDatasetsHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetDatasetsHeaders
    },
    default: {}
  },
  serializer
};

const getDatasetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/speechtotext/v2.0/datasets/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Dataset,
      headersMapper: Mappers.GetDatasetHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetDatasetHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetDatasetHeaders
    },
    404: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetDatasetHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetDatasetHeaders
    },
    default: {}
  },
  serializer
};

const deleteDatasetOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/speechtotext/v2.0/datasets/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    204: {
      headersMapper: Mappers.DeleteDatasetHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteDatasetHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteDatasetHeaders
    },
    405: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteDatasetHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteDatasetHeaders
    },
    default: {}
  },
  serializer
};

const updateDatasetOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/speechtotext/v2.0/datasets/{id}",
  urlParameters: [
    Parameters.id
  ],
  requestBody: {
    parameterPath: "datasetUpdate",
    mapper: {
      ...Mappers.DatasetUpdate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Dataset,
      headersMapper: Mappers.UpdateDatasetHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateDatasetHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateDatasetHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateDatasetHeaders
    },
    409: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateDatasetHeaders
    },
    415: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateDatasetHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateDatasetHeaders
    },
    default: {}
  },
  serializer
};

const getSupportedLocalesForDatasetsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/speechtotext/v2.0/datasets/locales",
  responses: {
    200: {
      bodyMapper: Mappers.GetSupportedLocalesForDatasetsOKResponse,
      headersMapper: Mappers.GetSupportedLocalesForDatasetsHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetSupportedLocalesForDatasetsHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetSupportedLocalesForDatasetsHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetSupportedLocalesForDatasetsHeaders
    },
    default: {}
  },
  serializer
};

const uploadDatasetOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/speechtotext/v2.0/datasets/upload",
  formDataParameters: [
    Parameters.name,
    Parameters.description,
    Parameters.locale,
    Parameters.dataImportKind,
    Parameters.properties,
    Parameters.audiodata,
    Parameters.transcriptions,
    Parameters.languagedata
  ],
  contentType: "multipart/form-data",
  responses: {
    202: {
      headersMapper: Mappers.UploadDatasetHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UploadDatasetHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UploadDatasetHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UploadDatasetHeaders
    },
    415: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UploadDatasetHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UploadDatasetHeaders
    },
    default: {}
  },
  serializer
};

const getEndpointsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/speechtotext/v2.0/endpoints",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Endpoint"
            }
          }
        }
      },
      headersMapper: Mappers.GetEndpointsHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetEndpointsHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetEndpointsHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetEndpointsHeaders
    },
    default: {}
  },
  serializer
};

const createEndpointOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/speechtotext/v2.0/endpoints",
  requestBody: {
    parameterPath: "endpointDefinition",
    mapper: {
      ...Mappers.SpeechEndpointDefinition,
      required: true
    }
  },
  responses: {
    202: {
      headersMapper: Mappers.CreateEndpointHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateEndpointHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateEndpointHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateEndpointHeaders
    },
    415: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateEndpointHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateEndpointHeaders
    },
    503: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateEndpointHeaders
    },
    default: {}
  },
  serializer
};

const getEndpointOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/speechtotext/v2.0/endpoints/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Endpoint,
      headersMapper: Mappers.GetEndpointHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetEndpointHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetEndpointHeaders
    },
    404: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetEndpointHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetEndpointHeaders
    },
    default: {}
  },
  serializer
};

const deleteEndpointOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/speechtotext/v2.0/endpoints/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    204: {
      headersMapper: Mappers.DeleteEndpointHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteEndpointHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteEndpointHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteEndpointHeaders
    },
    default: {}
  },
  serializer
};

const updateEndpointOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/speechtotext/v2.0/endpoints/{id}",
  urlParameters: [
    Parameters.id
  ],
  requestBody: {
    parameterPath: "endpointUpdate",
    mapper: {
      ...Mappers.EndpointUpdate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Endpoint,
      headersMapper: Mappers.UpdateEndpointHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateEndpointHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateEndpointHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateEndpointHeaders
    },
    409: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateEndpointHeaders
    },
    415: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateEndpointHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateEndpointHeaders
    },
    default: {}
  },
  serializer
};

const getSupportedLocalesForEndpointsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/speechtotext/v2.0/endpoints/locales",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      headersMapper: Mappers.GetSupportedLocalesForEndpointsHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetSupportedLocalesForEndpointsHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetSupportedLocalesForEndpointsHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetSupportedLocalesForEndpointsHeaders
    },
    default: {}
  },
  serializer
};

const getEndpointDataExportsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/speechtotext/v2.0/endpoints/{endpointId}/data",
  urlParameters: [
    Parameters.endpointId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EndpointData"
            }
          }
        }
      },
      headersMapper: Mappers.GetEndpointDataExportsHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetEndpointDataExportsHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetEndpointDataExportsHeaders
    },
    404: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetEndpointDataExportsHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetEndpointDataExportsHeaders
    },
    default: {}
  },
  serializer
};

const createEndpointDataExportOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/speechtotext/v2.0/endpoints/{endpointId}/data",
  urlParameters: [
    Parameters.endpointId
  ],
  requestBody: {
    parameterPath: "endpointDataDefinition",
    mapper: {
      ...Mappers.EndpointDataDefinition,
      required: true
    }
  },
  responses: {
    202: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateEndpointDataExportHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateEndpointDataExportHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateEndpointDataExportHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateEndpointDataExportHeaders
    },
    404: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateEndpointDataExportHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateEndpointDataExportHeaders
    },
    default: {}
  },
  serializer
};

const deleteEndpointDataOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/speechtotext/v2.0/endpoints/{endpointId}/data",
  urlParameters: [
    Parameters.endpointId
  ],
  responses: {
    204: {
      headersMapper: Mappers.DeleteEndpointDataHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteEndpointDataHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteEndpointDataHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteEndpointDataHeaders
    },
    default: {}
  },
  serializer
};

const getEndpointDataExportOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/speechtotext/v2.0/endpoints/{endpointId}/data/{id}",
  urlParameters: [
    Parameters.endpointId,
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EndpointData,
      headersMapper: Mappers.GetEndpointDataExportHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetEndpointDataExportHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetEndpointDataExportHeaders
    },
    404: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetEndpointDataExportHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetEndpointDataExportHeaders
    },
    default: {}
  },
  serializer
};

const deleteEndpointDataExportOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/speechtotext/v2.0/endpoints/{endpointId}/data/{id}",
  urlParameters: [
    Parameters.endpointId,
    Parameters.id
  ],
  responses: {
    204: {
      headersMapper: Mappers.DeleteEndpointDataExportHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteEndpointDataExportHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteEndpointDataExportHeaders
    },
    405: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteEndpointDataExportHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteEndpointDataExportHeaders
    },
    default: {}
  },
  serializer
};

const getModelsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/speechtotext/v2.0/models",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Model"
            }
          }
        }
      },
      headersMapper: Mappers.GetModelsHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetModelsHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetModelsHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetModelsHeaders
    },
    default: {}
  },
  serializer
};

const createModelOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/speechtotext/v2.0/models",
  requestBody: {
    parameterPath: "modelDefinition",
    mapper: {
      ...Mappers.SpeechModelDefinition,
      required: true
    }
  },
  responses: {
    202: {
      headersMapper: Mappers.CreateModelHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateModelHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateModelHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateModelHeaders
    },
    415: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateModelHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateModelHeaders
    },
    default: {}
  },
  serializer
};

const getModelOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/speechtotext/v2.0/models/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Model,
      headersMapper: Mappers.GetModelHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetModelHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetModelHeaders
    },
    404: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetModelHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetModelHeaders
    },
    default: {}
  },
  serializer
};

const deleteModelOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/speechtotext/v2.0/models/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    204: {
      headersMapper: Mappers.DeleteModelHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteModelHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteModelHeaders
    },
    405: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteModelHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteModelHeaders
    },
    default: {}
  },
  serializer
};

const updateModelOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/speechtotext/v2.0/models/{id}",
  urlParameters: [
    Parameters.id
  ],
  requestBody: {
    parameterPath: "modelUpdate",
    mapper: {
      ...Mappers.ModelUpdate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Model,
      headersMapper: Mappers.UpdateModelHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateModelHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateModelHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateModelHeaders
    },
    409: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateModelHeaders
    },
    415: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateModelHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateModelHeaders
    },
    default: {}
  },
  serializer
};

const getSupportedLocalesForModelsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/speechtotext/v2.0/models/locales",
  responses: {
    200: {
      bodyMapper: Mappers.GetSupportedLocalesForModelsOKResponse,
      headersMapper: Mappers.GetSupportedLocalesForModelsHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetSupportedLocalesForModelsHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetSupportedLocalesForModelsHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetSupportedLocalesForModelsHeaders
    },
    default: {}
  },
  serializer
};

const getTranscriptionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/speechtotext/v2.0/transcriptions",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Transcription"
            }
          }
        }
      },
      headersMapper: Mappers.GetTranscriptionsHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetTranscriptionsHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetTranscriptionsHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetTranscriptionsHeaders
    },
    default: {}
  },
  serializer
};

const createTranscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/speechtotext/v2.0/transcriptions",
  requestBody: {
    parameterPath: "transcription",
    mapper: {
      ...Mappers.TranscriptionDefinition,
      required: true
    }
  },
  responses: {
    202: {
      headersMapper: Mappers.CreateTranscriptionHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateTranscriptionHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateTranscriptionHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateTranscriptionHeaders
    },
    415: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateTranscriptionHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateTranscriptionHeaders
    },
    503: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateTranscriptionHeaders
    },
    default: {}
  },
  serializer
};

const getTranscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/speechtotext/v2.0/transcriptions/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Transcription,
      headersMapper: Mappers.GetTranscriptionHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetTranscriptionHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetTranscriptionHeaders
    },
    404: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetTranscriptionHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetTranscriptionHeaders
    },
    default: {}
  },
  serializer
};

const deleteTranscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/speechtotext/v2.0/transcriptions/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    204: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteTranscriptionHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteTranscriptionHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteTranscriptionHeaders
    },
    405: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteTranscriptionHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteTranscriptionHeaders
    },
    default: {}
  },
  serializer
};

const updateTranscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/speechtotext/v2.0/transcriptions/{id}",
  urlParameters: [
    Parameters.id
  ],
  requestBody: {
    parameterPath: "transcriptionUpdate",
    mapper: {
      ...Mappers.TranscriptionUpdate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Transcription,
      headersMapper: Mappers.UpdateTranscriptionHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateTranscriptionHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateTranscriptionHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateTranscriptionHeaders
    },
    409: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateTranscriptionHeaders
    },
    415: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateTranscriptionHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateTranscriptionHeaders
    },
    default: {}
  },
  serializer
};

const getSupportedLocalesForTranscriptionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/speechtotext/v2.0/transcriptions/locales",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      headersMapper: Mappers.GetSupportedLocalesForTranscriptionsHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetSupportedLocalesForTranscriptionsHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetSupportedLocalesForTranscriptionsHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetSupportedLocalesForTranscriptionsHeaders
    },
    default: {}
  },
  serializer
};

const getLanguageGenerationEndpointsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/languagegeneration/v2.0/Endpoints",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Endpoint"
            }
          }
        }
      },
      headersMapper: Mappers.GetLanguageGenerationEndpointsHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetLanguageGenerationEndpointsHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetLanguageGenerationEndpointsHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetLanguageGenerationEndpointsHeaders
    },
    default: {}
  },
  serializer
};

const createLanguageGenerationEndpointOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/languagegeneration/v2.0/Endpoints",
  requestBody: {
    parameterPath: "endpointDefinition",
    mapper: {
      ...Mappers.EndpointDefinition,
      required: true
    }
  },
  responses: {
    202: {
      headersMapper: Mappers.CreateLanguageGenerationEndpointHeaders
    },
    204: {
      headersMapper: Mappers.CreateLanguageGenerationEndpointHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateLanguageGenerationEndpointHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateLanguageGenerationEndpointHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateLanguageGenerationEndpointHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateLanguageGenerationEndpointHeaders
    },
    default: {}
  },
  serializer
};

const getLanguageGenerationEndpointOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/languagegeneration/v2.0/Endpoints/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Endpoint,
      headersMapper: Mappers.GetLanguageGenerationEndpointHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetLanguageGenerationEndpointHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetLanguageGenerationEndpointHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetLanguageGenerationEndpointHeaders
    },
    default: {}
  },
  serializer
};

const deleteLanguageGenerationEndpointOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/languagegeneration/v2.0/Endpoints/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    204: {
      headersMapper: Mappers.DeleteLanguageGenerationEndpointHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteLanguageGenerationEndpointHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteLanguageGenerationEndpointHeaders
    },
    405: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteLanguageGenerationEndpointHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteLanguageGenerationEndpointHeaders
    },
    default: {}
  },
  serializer
};

const updateLanguageGenerationEndpointOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/languagegeneration/v2.0/Endpoints/{id}",
  urlParameters: [
    Parameters.id
  ],
  requestBody: {
    parameterPath: "endpointUpdate",
    mapper: {
      ...Mappers.EndpointUpdate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Endpoint,
      headersMapper: Mappers.UpdateLanguageGenerationEndpointHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateLanguageGenerationEndpointHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateLanguageGenerationEndpointHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateLanguageGenerationEndpointHeaders
    },
    409: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateLanguageGenerationEndpointHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateLanguageGenerationEndpointHeaders
    },
    default: {}
  },
  serializer
};

const getSupportedLocalesForLanguageGenerationEndpointsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/languagegeneration/v2.0/Endpoints/locales",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      headersMapper: Mappers.GetSupportedLocalesForLanguageGenerationEndpointsHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetSupportedLocalesForLanguageGenerationEndpointsHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetSupportedLocalesForLanguageGenerationEndpointsHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetSupportedLocalesForLanguageGenerationEndpointsHeaders
    },
    default: {}
  },
  serializer
};

const getLanguageGenerationModelsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/languagegeneration/v2.0/Models",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Model"
            }
          }
        }
      },
      headersMapper: Mappers.GetLanguageGenerationModelsHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetLanguageGenerationModelsHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetLanguageGenerationModelsHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetLanguageGenerationModelsHeaders
    },
    default: {}
  },
  serializer
};

const createLanguageGenerationModelOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/languagegeneration/v2.0/Models",
  requestBody: {
    parameterPath: "modelDefinition",
    mapper: {
      ...Mappers.ModelDefinition,
      required: true
    }
  },
  responses: {
    202: {
      headersMapper: Mappers.CreateLanguageGenerationModelHeaders
    },
    204: {
      headersMapper: Mappers.CreateLanguageGenerationModelHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateLanguageGenerationModelHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateLanguageGenerationModelHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateLanguageGenerationModelHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateLanguageGenerationModelHeaders
    },
    default: {}
  },
  serializer
};

const getLanguageGenerationModelOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/languagegeneration/v2.0/Models/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Model,
      headersMapper: Mappers.GetLanguageGenerationModelHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetLanguageGenerationModelHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetLanguageGenerationModelHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetLanguageGenerationModelHeaders
    },
    default: {}
  },
  serializer
};

const deleteLanguageGenerationModelOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/languagegeneration/v2.0/Models/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    204: {
      headersMapper: Mappers.DeleteLanguageGenerationModelHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteLanguageGenerationModelHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteLanguageGenerationModelHeaders
    },
    405: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteLanguageGenerationModelHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteLanguageGenerationModelHeaders
    },
    default: {}
  },
  serializer
};

const updateLanguageGenerationModelOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/languagegeneration/v2.0/Models/{id}",
  urlParameters: [
    Parameters.id
  ],
  requestBody: {
    parameterPath: "modelUpdate",
    mapper: {
      ...Mappers.ModelUpdate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Model,
      headersMapper: Mappers.UpdateLanguageGenerationModelHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateLanguageGenerationModelHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateLanguageGenerationModelHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateLanguageGenerationModelHeaders
    },
    409: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateLanguageGenerationModelHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateLanguageGenerationModelHeaders
    },
    default: {}
  },
  serializer
};

const getSupportedLocalesForLanguageGenerationModelsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/languagegeneration/v2.0/Models/locales",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      headersMapper: Mappers.GetSupportedLocalesForLanguageGenerationModelsHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetSupportedLocalesForLanguageGenerationModelsHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetSupportedLocalesForLanguageGenerationModelsHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetSupportedLocalesForLanguageGenerationModelsHeaders
    },
    default: {}
  },
  serializer
};

const getHealthStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/common/v2.0/healthstatus",
  responses: {
    200: {
      bodyMapper: Mappers.HealthStatusResponse,
      headersMapper: Mappers.GetHealthStatusHeaders
    },
    default: {}
  },
  serializer
};

const getVoiceDatasetsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/texttospeech/v2.0/datasets",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Dataset"
            }
          }
        }
      },
      headersMapper: Mappers.GetVoiceDatasetsHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetVoiceDatasetsHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetVoiceDatasetsHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetVoiceDatasetsHeaders
    },
    default: {}
  },
  serializer
};

const getSupportedLocalesForVoiceDatasetsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/texttospeech/v2.0/datasets/locales",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      headersMapper: Mappers.GetSupportedLocalesForVoiceDatasetsHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetSupportedLocalesForVoiceDatasetsHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetSupportedLocalesForVoiceDatasetsHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetSupportedLocalesForVoiceDatasetsHeaders
    },
    default: {}
  },
  serializer
};

const uploadVoiceDatasetOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/texttospeech/v2.0/datasets/upload",
  formDataParameters: [
    Parameters.name,
    Parameters.description,
    Parameters.locale,
    Parameters.dataImportKind,
    Parameters.properties,
    Parameters.audiodata,
    Parameters.transcriptions
  ],
  contentType: "multipart/form-data",
  responses: {
    202: {
      headersMapper: Mappers.UploadVoiceDatasetHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UploadVoiceDatasetHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UploadVoiceDatasetHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UploadVoiceDatasetHeaders
    },
    415: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UploadVoiceDatasetHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UploadVoiceDatasetHeaders
    },
    default: {}
  },
  serializer
};

const deleteVoiceDatasetOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/texttospeech/v2.0/datasets/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    204: {
      headersMapper: Mappers.DeleteVoiceDatasetHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteVoiceDatasetHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteVoiceDatasetHeaders
    },
    405: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteVoiceDatasetHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteVoiceDatasetHeaders
    },
    default: {}
  },
  serializer
};

const updateVoiceDatasetOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/texttospeech/v2.0/datasets/{id}",
  urlParameters: [
    Parameters.id
  ],
  requestBody: {
    parameterPath: "datasetUpdate",
    mapper: {
      ...Mappers.DatasetUpdate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Dataset,
      headersMapper: Mappers.UpdateVoiceDatasetHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateVoiceDatasetHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateVoiceDatasetHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateVoiceDatasetHeaders
    },
    409: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateVoiceDatasetHeaders
    },
    415: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateVoiceDatasetHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateVoiceDatasetHeaders
    },
    default: {}
  },
  serializer
};

const getVoiceDeploymentsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/texttospeech/v2.0/endpoints",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Endpoint"
            }
          }
        }
      },
      headersMapper: Mappers.GetVoiceDeploymentsHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetVoiceDeploymentsHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetVoiceDeploymentsHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetVoiceDeploymentsHeaders
    },
    default: {}
  },
  serializer
};

const createVoiceDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/texttospeech/v2.0/endpoints",
  requestBody: {
    parameterPath: "endpoint",
    mapper: {
      ...Mappers.EndpointDefinition,
      required: true
    }
  },
  responses: {
    202: {
      headersMapper: Mappers.CreateVoiceDeploymentHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateVoiceDeploymentHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateVoiceDeploymentHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateVoiceDeploymentHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateVoiceDeploymentHeaders
    },
    default: {}
  },
  serializer
};

const getVoiceDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/texttospeech/v2.0/endpoints/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Endpoint,
      headersMapper: Mappers.GetVoiceDeploymentHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetVoiceDeploymentHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetVoiceDeploymentHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetVoiceDeploymentHeaders
    },
    default: {}
  },
  serializer
};

const deleteDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/texttospeech/v2.0/endpoints/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    204: {
      headersMapper: Mappers.DeleteDeploymentHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteDeploymentHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteDeploymentHeaders
    },
    405: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteDeploymentHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteDeploymentHeaders
    },
    default: {}
  },
  serializer
};

const updateVoiceEndpointOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/texttospeech/v2.0/endpoints/{id}",
  urlParameters: [
    Parameters.id
  ],
  requestBody: {
    parameterPath: "endpointUpdate",
    mapper: {
      ...Mappers.EndpointUpdate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Endpoint,
      headersMapper: Mappers.UpdateVoiceEndpointHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateVoiceEndpointHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateVoiceEndpointHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateVoiceEndpointHeaders
    },
    409: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateVoiceEndpointHeaders
    },
    415: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateVoiceEndpointHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateVoiceEndpointHeaders
    },
    default: {}
  },
  serializer
};

const getSupportedLocalesForVoiceEndpointsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/texttospeech/v2.0/endpoints/locales",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      headersMapper: Mappers.GetSupportedLocalesForVoiceEndpointsHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetSupportedLocalesForVoiceEndpointsHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetSupportedLocalesForVoiceEndpointsHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetSupportedLocalesForVoiceEndpointsHeaders
    },
    default: {}
  },
  serializer
};

const getVoiceModelsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/texttospeech/v2.0/models",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Model"
            }
          }
        }
      },
      headersMapper: Mappers.GetVoiceModelsHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetVoiceModelsHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetVoiceModelsHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetVoiceModelsHeaders
    },
    default: {}
  },
  serializer
};

const createVoiceModelOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/texttospeech/v2.0/models",
  requestBody: {
    parameterPath: "modelDefinition",
    mapper: {
      ...Mappers.ModelDefinition,
      required: true
    }
  },
  responses: {
    202: {
      headersMapper: Mappers.CreateVoiceModelHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateVoiceModelHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateVoiceModelHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateVoiceModelHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateVoiceModelHeaders
    },
    default: {}
  },
  serializer
};

const getVoiceModelOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/texttospeech/v2.0/models/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Model,
      headersMapper: Mappers.GetVoiceModelHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetVoiceModelHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetVoiceModelHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetVoiceModelHeaders
    },
    default: {}
  },
  serializer
};

const deleteVoiceModelOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/texttospeech/v2.0/models/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    204: {
      headersMapper: Mappers.DeleteVoiceModelHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteVoiceModelHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteVoiceModelHeaders
    },
    405: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteVoiceModelHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteVoiceModelHeaders
    },
    default: {}
  },
  serializer
};

const updateVoiceModelOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/texttospeech/v2.0/models/{id}",
  urlParameters: [
    Parameters.id
  ],
  requestBody: {
    parameterPath: "modelUpdate",
    mapper: {
      ...Mappers.ModelUpdate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Model,
      headersMapper: Mappers.UpdateVoiceModelHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateVoiceModelHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateVoiceModelHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateVoiceModelHeaders
    },
    409: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateVoiceModelHeaders
    },
    415: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateVoiceModelHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.UpdateVoiceModelHeaders
    },
    default: {}
  },
  serializer
};

const getSupportedLocalesForVoiceModelsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/texttospeech/v2.0/models/locales",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      headersMapper: Mappers.GetSupportedLocalesForVoiceModelsHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetSupportedLocalesForVoiceModelsHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetSupportedLocalesForVoiceModelsHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetSupportedLocalesForVoiceModelsHeaders
    },
    default: {}
  },
  serializer
};

const getVoiceTestOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/texttospeech/v2.0/tests/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VoiceTest,
      headersMapper: Mappers.GetVoiceTestHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetVoiceTestHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetVoiceTestHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.GetVoiceTestHeaders
    },
    default: {}
  },
  serializer
};

const deleteVoiceTestOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/texttospeech/v2.0/tests/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    204: {
      headersMapper: Mappers.DeleteVoiceTestHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteVoiceTestHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteVoiceTestHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteVoiceTestHeaders
    },
    405: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteVoiceTestHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.DeleteVoiceTestHeaders
    },
    default: {}
  },
  serializer
};

const createVoiceTestOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/texttospeech/v2.0/tests",
  requestBody: {
    parameterPath: "voiceTestDefinition",
    mapper: {
      ...Mappers.VoiceTestDefinition,
      required: true
    }
  },
  responses: {
    202: {
      headersMapper: Mappers.CreateVoiceTestHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateVoiceTestHeaders
    },
    401: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateVoiceTestHeaders
    },
    403: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateVoiceTestHeaders
    },
    429: {
      bodyMapper: Mappers.ErrorContent,
      headersMapper: Mappers.CreateVoiceTestHeaders
    },
    default: {}
  },
  serializer
};

export {
  SpeechServicesAPIv20,
  SpeechServicesAPIv20Context,
  Models as SpeechServicesAPIv20Models,
  Mappers as SpeechServicesAPIv20Mappers
};
