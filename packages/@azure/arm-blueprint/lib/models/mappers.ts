/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const AzureResourceBase: msRest.CompositeMapper = {
  serializedName: "AzureResourceBase",
  type: {
    name: "Composite",
    className: "AzureResourceBase",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Blueprint: msRest.CompositeMapper = {
  serializedName: "Blueprint",
  type: {
    name: "Composite",
    className: "Blueprint",
    modelProperties: {
      ...AzureResourceBase.type.modelProperties,
      displayName: {
        serializedName: "properties.displayName",
        constraints: {
          MaxLength: 256
        },
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        constraints: {
          MaxLength: 500
        },
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "Composite",
          className: "BlueprintStatus"
        }
      },
      targetScope: {
        serializedName: "properties.targetScope",
        type: {
          name: "Enum",
          allowedValues: [
            "subscription",
            "managementGroup"
          ]
        }
      },
      parameters: {
        serializedName: "properties.parameters",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "ParameterDefinition"
            }
          }
        }
      },
      resourceGroups: {
        serializedName: "properties.resourceGroups",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "ResourceGroupDefinition"
            }
          }
        }
      },
      versions: {
        serializedName: "properties.versions",
        type: {
          name: "Object"
        }
      },
      layout: {
        serializedName: "properties.layout",
        type: {
          name: "Object"
        }
      }
    }
  }
};

export const Artifact: msRest.CompositeMapper = {
  serializedName: "Artifact",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    uberParent: "Artifact",
    className: "Artifact",
    modelProperties: {
      ...AzureResourceBase.type.modelProperties,
      kind: {
        required: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PublishedBlueprint: msRest.CompositeMapper = {
  serializedName: "PublishedBlueprint",
  type: {
    name: "Composite",
    className: "PublishedBlueprint",
    modelProperties: {
      ...AzureResourceBase.type.modelProperties,
      displayName: {
        serializedName: "properties.displayName",
        constraints: {
          MaxLength: 256
        },
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        constraints: {
          MaxLength: 500
        },
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "Composite",
          className: "BlueprintStatus"
        }
      },
      targetScope: {
        serializedName: "properties.targetScope",
        type: {
          name: "Enum",
          allowedValues: [
            "subscription",
            "managementGroup"
          ]
        }
      },
      parameters: {
        serializedName: "properties.parameters",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "ParameterDefinition"
            }
          }
        }
      },
      resourceGroups: {
        serializedName: "properties.resourceGroups",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "ResourceGroupDefinition"
            }
          }
        }
      },
      blueprintName: {
        serializedName: "properties.blueprintName",
        type: {
          name: "String"
        }
      },
      changeNotes: {
        serializedName: "properties.changeNotes",
        constraints: {
          MaxLength: 500
        },
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceProviderOperationDisplay: msRest.CompositeMapper = {
  serializedName: "ResourceProviderOperation_display",
  type: {
    name: "Composite",
    className: "ResourceProviderOperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceProviderOperation: msRest.CompositeMapper = {
  serializedName: "ResourceProviderOperation",
  type: {
    name: "Composite",
    className: "ResourceProviderOperation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "ResourceProviderOperationDisplay"
        }
      }
    }
  }
};

export const ResourceProviderOperationList: msRest.CompositeMapper = {
  serializedName: "ResourceProviderOperationList",
  type: {
    name: "Composite",
    className: "ResourceProviderOperationList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceProviderOperation"
            }
          }
        }
      }
    }
  }
};

export const BlueprintResourceStatusBase: msRest.CompositeMapper = {
  serializedName: "BlueprintResourceStatusBase",
  type: {
    name: "Composite",
    className: "BlueprintResourceStatusBase",
    modelProperties: {
      timeCreated: {
        readOnly: true,
        serializedName: "timeCreated",
        type: {
          name: "String"
        }
      },
      lastModified: {
        readOnly: true,
        serializedName: "lastModified",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BlueprintStatus: msRest.CompositeMapper = {
  serializedName: "BlueprintStatus",
  type: {
    name: "Composite",
    className: "BlueprintStatus",
    modelProperties: {
      ...BlueprintResourceStatusBase.type.modelProperties
    }
  }
};

export const ParameterDefinitionMetadata: msRest.CompositeMapper = {
  serializedName: "ParameterDefinitionMetadata",
  type: {
    name: "Composite",
    className: "ParameterDefinitionMetadata",
    modelProperties: {
      displayName: {
        serializedName: "displayName",
        constraints: {
          MaxLength: 256
        },
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        constraints: {
          MaxLength: 500
        },
        type: {
          name: "String"
        }
      },
      strongType: {
        serializedName: "strongType",
        constraints: {
          MaxLength: 64
        },
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ParameterDefinition: msRest.CompositeMapper = {
  serializedName: "ParameterDefinition",
  type: {
    name: "Composite",
    className: "ParameterDefinition",
    modelProperties: {
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "metadata.displayName",
        constraints: {
          MaxLength: 256
        },
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "metadata.description",
        constraints: {
          MaxLength: 500
        },
        type: {
          name: "String"
        }
      },
      strongType: {
        serializedName: "metadata.strongType",
        constraints: {
          MaxLength: 64
        },
        type: {
          name: "String"
        }
      },
      defaultValue: {
        serializedName: "defaultValue",
        type: {
          name: "Object"
        }
      },
      allowedValues: {
        serializedName: "allowedValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Object"
            }
          }
        }
      }
    }
  }
};

export const ResourceGroupDefinition: msRest.CompositeMapper = {
  serializedName: "ResourceGroupDefinition",
  type: {
    name: "Composite",
    className: "ResourceGroupDefinition",
    modelProperties: {
      name: {
        serializedName: "name",
        constraints: {
          MaxLength: 90,
          MinLength: 1
        },
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        constraints: {
          MaxLength: 90
        },
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "metadata.displayName",
        constraints: {
          MaxLength: 256
        },
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "metadata.description",
        constraints: {
          MaxLength: 500
        },
        type: {
          name: "String"
        }
      },
      strongType: {
        serializedName: "metadata.strongType",
        constraints: {
          MaxLength: 64
        },
        type: {
          name: "String"
        }
      },
      dependsOn: {
        serializedName: "dependsOn",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ParameterValueBase: msRest.CompositeMapper = {
  serializedName: "ParameterValueBase",
  type: {
    name: "Composite",
    className: "ParameterValueBase",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TemplateArtifactProperties: msRest.CompositeMapper = {
  serializedName: "TemplateArtifactProperties",
  type: {
    name: "Composite",
    className: "TemplateArtifactProperties",
    modelProperties: {
      displayName: {
        serializedName: "displayName",
        constraints: {
          MaxLength: 256
        },
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        constraints: {
          MaxLength: 500
        },
        type: {
          name: "String"
        }
      },
      dependsOn: {
        serializedName: "dependsOn",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      template: {
        required: true,
        serializedName: "template",
        type: {
          name: "Object"
        }
      },
      resourceGroup: {
        serializedName: "resourceGroup",
        type: {
          name: "String"
        }
      },
      parameters: {
        required: true,
        serializedName: "parameters",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "ParameterValueBase"
            }
          }
        }
      }
    }
  }
};

export const TemplateArtifact: msRest.CompositeMapper = {
  serializedName: "template",
  type: {
    name: "Composite",
    className: "TemplateArtifact",
    modelProperties: {
      ...Artifact.type.modelProperties,
      displayName: {
        serializedName: "properties.displayName",
        constraints: {
          MaxLength: 256
        },
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        constraints: {
          MaxLength: 500
        },
        type: {
          name: "String"
        }
      },
      dependsOn: {
        serializedName: "properties.dependsOn",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      template: {
        required: true,
        serializedName: "properties.template",
        type: {
          name: "Object"
        }
      },
      resourceGroup: {
        serializedName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      },
      parameters: {
        required: true,
        serializedName: "properties.parameters",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "ParameterValueBase"
            }
          }
        }
      }
    }
  }
};

export const RoleAssignmentArtifactProperties: msRest.CompositeMapper = {
  serializedName: "RoleAssignmentArtifactProperties",
  type: {
    name: "Composite",
    className: "RoleAssignmentArtifactProperties",
    modelProperties: {
      displayName: {
        serializedName: "displayName",
        constraints: {
          MaxLength: 256
        },
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        constraints: {
          MaxLength: 500
        },
        type: {
          name: "String"
        }
      },
      dependsOn: {
        serializedName: "dependsOn",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      roleDefinitionId: {
        required: true,
        serializedName: "roleDefinitionId",
        type: {
          name: "String"
        }
      },
      principalIds: {
        required: true,
        serializedName: "principalIds",
        type: {
          name: "Object"
        }
      },
      resourceGroup: {
        serializedName: "resourceGroup",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoleAssignmentArtifact: msRest.CompositeMapper = {
  serializedName: "roleAssignment",
  type: {
    name: "Composite",
    className: "RoleAssignmentArtifact",
    modelProperties: {
      ...Artifact.type.modelProperties,
      displayName: {
        serializedName: "properties.displayName",
        constraints: {
          MaxLength: 256
        },
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        constraints: {
          MaxLength: 500
        },
        type: {
          name: "String"
        }
      },
      dependsOn: {
        serializedName: "properties.dependsOn",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      roleDefinitionId: {
        required: true,
        serializedName: "properties.roleDefinitionId",
        type: {
          name: "String"
        }
      },
      principalIds: {
        required: true,
        serializedName: "properties.principalIds",
        type: {
          name: "Object"
        }
      },
      resourceGroup: {
        serializedName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PolicyAssignmentArtifactProperties: msRest.CompositeMapper = {
  serializedName: "PolicyAssignmentArtifactProperties",
  type: {
    name: "Composite",
    className: "PolicyAssignmentArtifactProperties",
    modelProperties: {
      displayName: {
        serializedName: "displayName",
        constraints: {
          MaxLength: 256
        },
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        constraints: {
          MaxLength: 500
        },
        type: {
          name: "String"
        }
      },
      dependsOn: {
        serializedName: "dependsOn",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      policyDefinitionId: {
        required: true,
        serializedName: "policyDefinitionId",
        type: {
          name: "String"
        }
      },
      parameters: {
        required: true,
        serializedName: "parameters",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "ParameterValueBase"
            }
          }
        }
      },
      resourceGroup: {
        serializedName: "resourceGroup",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PolicyAssignmentArtifact: msRest.CompositeMapper = {
  serializedName: "policyAssignment",
  type: {
    name: "Composite",
    className: "PolicyAssignmentArtifact",
    modelProperties: {
      ...Artifact.type.modelProperties,
      displayName: {
        serializedName: "properties.displayName",
        constraints: {
          MaxLength: 256
        },
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        constraints: {
          MaxLength: 500
        },
        type: {
          name: "String"
        }
      },
      dependsOn: {
        serializedName: "properties.dependsOn",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      policyDefinitionId: {
        required: true,
        serializedName: "properties.policyDefinitionId",
        type: {
          name: "String"
        }
      },
      parameters: {
        required: true,
        serializedName: "properties.parameters",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "ParameterValueBase"
            }
          }
        }
      },
      resourceGroup: {
        serializedName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ParameterValue: msRest.CompositeMapper = {
  serializedName: "ParameterValue",
  type: {
    name: "Composite",
    className: "ParameterValue",
    modelProperties: {
      ...ParameterValueBase.type.modelProperties,
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "Object"
        }
      }
    }
  }
};

export const KeyVaultReference: msRest.CompositeMapper = {
  serializedName: "keyVaultReference",
  type: {
    name: "Composite",
    className: "KeyVaultReference",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecretValueReference: msRest.CompositeMapper = {
  serializedName: "SecretValueReference",
  type: {
    name: "Composite",
    className: "SecretValueReference",
    modelProperties: {
      keyVault: {
        required: true,
        serializedName: "keyVault",
        type: {
          name: "Composite",
          className: "KeyVaultReference"
        }
      },
      secretName: {
        required: true,
        serializedName: "secretName",
        type: {
          name: "String"
        }
      },
      secretVersion: {
        serializedName: "secretVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecretReferenceParameterValue: msRest.CompositeMapper = {
  serializedName: "SecretReferenceParameterValue",
  type: {
    name: "Composite",
    className: "SecretReferenceParameterValue",
    modelProperties: {
      ...ParameterValueBase.type.modelProperties,
      reference: {
        required: true,
        serializedName: "reference",
        type: {
          name: "Composite",
          className: "SecretValueReference"
        }
      }
    }
  }
};

export const ResourceGroupValue: msRest.CompositeMapper = {
  serializedName: "ResourceGroupValue",
  type: {
    name: "Composite",
    className: "ResourceGroupValue",
    modelProperties: {
      name: {
        serializedName: "name",
        constraints: {
          MaxLength: 90,
          MinLength: 1
        },
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UserAssignedIdentity: msRest.CompositeMapper = {
  serializedName: "UserAssignedIdentity",
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedServiceIdentity: msRest.CompositeMapper = {
  serializedName: "ManagedServiceIdentity",
  type: {
    name: "Composite",
    className: "ManagedServiceIdentity",
    modelProperties: {
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      principalId: {
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "UserAssignedIdentity"
            }
          }
        }
      }
    }
  }
};

export const AssignmentStatus: msRest.CompositeMapper = {
  serializedName: "AssignmentStatus",
  type: {
    name: "Composite",
    className: "AssignmentStatus",
    modelProperties: {
      ...BlueprintResourceStatusBase.type.modelProperties
    }
  }
};

export const AssignmentLockSettings: msRest.CompositeMapper = {
  serializedName: "AssignmentLockSettings",
  type: {
    name: "Composite",
    className: "AssignmentLockSettings",
    modelProperties: {
      mode: {
        serializedName: "mode",
        type: {
          name: "String"
        }
      },
      excludedPrincipals: {
        serializedName: "excludedPrincipals",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const AssignmentProperties: msRest.CompositeMapper = {
  serializedName: "AssignmentProperties",
  type: {
    name: "Composite",
    className: "AssignmentProperties",
    modelProperties: {
      ...BlueprintResourcePropertiesBase.type.modelProperties,
      blueprintId: {
        serializedName: "blueprintId",
        type: {
          name: "String"
        }
      },
      parameters: {
        required: true,
        serializedName: "parameters",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "ParameterValueBase"
            }
          }
        }
      },
      resourceGroups: {
        required: true,
        serializedName: "resourceGroups",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "ResourceGroupValue"
            }
          }
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Composite",
          className: "AssignmentStatus"
        }
      },
      locks: {
        serializedName: "locks",
        type: {
          name: "Composite",
          className: "AssignmentLockSettings"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: msRest.CompositeMapper = {
  serializedName: "TrackedResource",
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...AzureResourceBase.type.modelProperties,
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Assignment: msRest.CompositeMapper = {
  serializedName: "Assignment",
  type: {
    name: "Composite",
    className: "Assignment",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        required: true,
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        constraints: {
          MaxLength: 256
        },
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        constraints: {
          MaxLength: 500
        },
        type: {
          name: "String"
        }
      },
      blueprintId: {
        serializedName: "properties.blueprintId",
        type: {
          name: "String"
        }
      },
      parameters: {
        required: true,
        serializedName: "properties.parameters",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "ParameterValueBase"
            }
          }
        }
      },
      resourceGroups: {
        required: true,
        serializedName: "properties.resourceGroups",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "ResourceGroupValue"
            }
          }
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "Composite",
          className: "AssignmentStatus"
        }
      },
      locks: {
        serializedName: "properties.locks",
        type: {
          name: "Composite",
          className: "AssignmentLockSettings"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WhoIsBlueprintContract: msRest.CompositeMapper = {
  serializedName: "WhoIsBlueprintContract",
  type: {
    name: "Composite",
    className: "WhoIsBlueprintContract",
    modelProperties: {
      objectId: {
        serializedName: "objectId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureResourceManagerError: msRest.CompositeMapper = {
  serializedName: "AzureResourceManagerError",
  type: {
    name: "Composite",
    className: "AzureResourceManagerError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AssignmentJobCreatedResource: msRest.CompositeMapper = {
  serializedName: "AssignmentJobCreatedResource",
  type: {
    name: "Composite",
    className: "AssignmentJobCreatedResource",
    modelProperties: {
      ...AzureResourceBase.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const AssignmentDeploymentJobResult: msRest.CompositeMapper = {
  serializedName: "AssignmentDeploymentJobResult",
  type: {
    name: "Composite",
    className: "AssignmentDeploymentJobResult",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "AzureResourceManagerError"
        }
      },
      resources: {
        serializedName: "resources",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AssignmentJobCreatedResource"
            }
          }
        }
      }
    }
  }
};

export const AssignmentDeploymentJob: msRest.CompositeMapper = {
  serializedName: "AssignmentDeploymentJob",
  type: {
    name: "Composite",
    className: "AssignmentDeploymentJob",
    modelProperties: {
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      action: {
        serializedName: "action",
        type: {
          name: "String"
        }
      },
      jobId: {
        serializedName: "jobId",
        type: {
          name: "String"
        }
      },
      jobState: {
        serializedName: "jobState",
        type: {
          name: "String"
        }
      },
      result: {
        serializedName: "result",
        type: {
          name: "Composite",
          className: "AssignmentDeploymentJobResult"
        }
      },
      history: {
        serializedName: "history",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AssignmentDeploymentJobResult"
            }
          }
        }
      },
      requestUri: {
        serializedName: "requestUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AssignmentOperationProperties: msRest.CompositeMapper = {
  serializedName: "AssignmentOperationProperties",
  type: {
    name: "Composite",
    className: "AssignmentOperationProperties",
    modelProperties: {
      blueprintVersion: {
        serializedName: "blueprintVersion",
        type: {
          name: "String"
        }
      },
      assignmentState: {
        serializedName: "assignmentState",
        type: {
          name: "String"
        }
      },
      timeCreated: {
        serializedName: "timeCreated",
        type: {
          name: "String"
        }
      },
      timeStarted: {
        serializedName: "timeStarted",
        type: {
          name: "String"
        }
      },
      timeFinished: {
        serializedName: "timeFinished",
        type: {
          name: "String"
        }
      },
      deployments: {
        serializedName: "deployments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AssignmentDeploymentJob"
            }
          }
        }
      }
    }
  }
};

export const AssignmentOperation: msRest.CompositeMapper = {
  serializedName: "AssignmentOperation",
  type: {
    name: "Composite",
    className: "AssignmentOperation",
    modelProperties: {
      ...AzureResourceBase.type.modelProperties,
      blueprintVersion: {
        serializedName: "properties.blueprintVersion",
        type: {
          name: "String"
        }
      },
      assignmentState: {
        serializedName: "properties.assignmentState",
        type: {
          name: "String"
        }
      },
      timeCreated: {
        serializedName: "properties.timeCreated",
        type: {
          name: "String"
        }
      },
      timeStarted: {
        serializedName: "properties.timeStarted",
        type: {
          name: "String"
        }
      },
      timeFinished: {
        serializedName: "properties.timeFinished",
        type: {
          name: "String"
        }
      },
      deployments: {
        serializedName: "properties.deployments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AssignmentDeploymentJob"
            }
          }
        }
      }
    }
  }
};

export const BlueprintList: msRest.CompositeMapper = {
  serializedName: "BlueprintList",
  type: {
    name: "Composite",
    className: "BlueprintList",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Blueprint"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ArtifactList: msRest.CompositeMapper = {
  serializedName: "ArtifactList",
  type: {
    name: "Composite",
    className: "ArtifactList",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Artifact"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PublishedBlueprintList: msRest.CompositeMapper = {
  serializedName: "PublishedBlueprintList",
  type: {
    name: "Composite",
    className: "PublishedBlueprintList",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PublishedBlueprint"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AssignmentList: msRest.CompositeMapper = {
  serializedName: "AssignmentList",
  type: {
    name: "Composite",
    className: "AssignmentList",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Assignment"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AssignmentOperationList: msRest.CompositeMapper = {
  serializedName: "AssignmentOperationList",
  type: {
    name: "Composite",
    className: "AssignmentOperationList",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AssignmentOperation"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const discriminators = {
  'BaseResource.Artifact' : Artifact,
  'BaseResource.template' : TemplateArtifact,
  'BaseResource.roleAssignment' : RoleAssignmentArtifact,
  'BaseResource.policyAssignment' : PolicyAssignmentArtifact
};
