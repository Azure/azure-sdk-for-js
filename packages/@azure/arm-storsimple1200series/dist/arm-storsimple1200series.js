/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmStorsimple1200series = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for AlertScope.
     * Possible values include: 'Resource', 'Device'
     * @readonly
     * @enum {string}
     */
    var AlertScope;
    (function (AlertScope) {
        AlertScope["Resource"] = "Resource";
        AlertScope["Device"] = "Device";
    })(AlertScope || (AlertScope = {}));
    /**
     * Defines values for AlertSourceType.
     * Possible values include: 'Resource', 'Device'
     * @readonly
     * @enum {string}
     */
    var AlertSourceType;
    (function (AlertSourceType) {
        AlertSourceType["Resource"] = "Resource";
        AlertSourceType["Device"] = "Device";
    })(AlertSourceType || (AlertSourceType = {}));
    /**
     * Defines values for AlertSeverity.
     * Possible values include: 'Informational', 'Warning', 'Critical'
     * @readonly
     * @enum {string}
     */
    var AlertSeverity;
    (function (AlertSeverity) {
        AlertSeverity["Informational"] = "Informational";
        AlertSeverity["Warning"] = "Warning";
        AlertSeverity["Critical"] = "Critical";
    })(AlertSeverity || (AlertSeverity = {}));
    /**
     * Defines values for AlertStatus.
     * Possible values include: 'Active', 'Cleared'
     * @readonly
     * @enum {string}
     */
    var AlertStatus;
    (function (AlertStatus) {
        AlertStatus["Active"] = "Active";
        AlertStatus["Cleared"] = "Cleared";
    })(AlertStatus || (AlertStatus = {}));
    /**
     * Defines values for AlertEmailNotificationStatus.
     * Possible values include: 'Enabled', 'Disabled'
     * @readonly
     * @enum {string}
     */
    var AlertEmailNotificationStatus;
    (function (AlertEmailNotificationStatus) {
        AlertEmailNotificationStatus["Enabled"] = "Enabled";
        AlertEmailNotificationStatus["Disabled"] = "Disabled";
    })(AlertEmailNotificationStatus || (AlertEmailNotificationStatus = {}));
    /**
     * Defines values for ServiceOwnersAlertNotificationStatus.
     * Possible values include: 'Enabled', 'Disabled'
     * @readonly
     * @enum {string}
     */
    var ServiceOwnersAlertNotificationStatus;
    (function (ServiceOwnersAlertNotificationStatus) {
        ServiceOwnersAlertNotificationStatus["Enabled"] = "Enabled";
        ServiceOwnersAlertNotificationStatus["Disabled"] = "Disabled";
    })(ServiceOwnersAlertNotificationStatus || (ServiceOwnersAlertNotificationStatus = {}));
    /**
     * Defines values for EncryptionAlgorithm.
     * Possible values include: 'None', 'AES256', 'RSAES_PKCS1_v_1_5'
     * @readonly
     * @enum {string}
     */
    var EncryptionAlgorithm;
    (function (EncryptionAlgorithm) {
        EncryptionAlgorithm["None"] = "None";
        EncryptionAlgorithm["AES256"] = "AES256";
        EncryptionAlgorithm["RSAESPKCS1V15"] = "RSAES_PKCS1_v_1_5";
    })(EncryptionAlgorithm || (EncryptionAlgorithm = {}));
    /**
     * Defines values for InitiatedBy.
     * Possible values include: 'Manual', 'Scheduled'
     * @readonly
     * @enum {string}
     */
    var InitiatedBy;
    (function (InitiatedBy) {
        InitiatedBy["Manual"] = "Manual";
        InitiatedBy["Scheduled"] = "Scheduled";
    })(InitiatedBy || (InitiatedBy = {}));
    /**
     * Defines values for DataPolicy.
     * Possible values include: 'Invalid', 'Local', 'Tiered', 'Cloud'
     * @readonly
     * @enum {string}
     */
    var DataPolicy;
    (function (DataPolicy) {
        DataPolicy["Invalid"] = "Invalid";
        DataPolicy["Local"] = "Local";
        DataPolicy["Tiered"] = "Tiered";
        DataPolicy["Cloud"] = "Cloud";
    })(DataPolicy || (DataPolicy = {}));
    /**
     * Defines values for ShareStatus.
     * Possible values include: 'Online', 'Offline'
     * @readonly
     * @enum {string}
     */
    var ShareStatus;
    (function (ShareStatus) {
        ShareStatus["Online"] = "Online";
        ShareStatus["Offline"] = "Offline";
    })(ShareStatus || (ShareStatus = {}));
    /**
     * Defines values for MonitoringStatus.
     * Possible values include: 'Enabled', 'Disabled'
     * @readonly
     * @enum {string}
     */
    var MonitoringStatus;
    (function (MonitoringStatus) {
        MonitoringStatus["Enabled"] = "Enabled";
        MonitoringStatus["Disabled"] = "Disabled";
    })(MonitoringStatus || (MonitoringStatus = {}));
    /**
     * Defines values for DiskStatus.
     * Possible values include: 'Online', 'Offline'
     * @readonly
     * @enum {string}
     */
    var DiskStatus;
    (function (DiskStatus) {
        DiskStatus["Online"] = "Online";
        DiskStatus["Offline"] = "Offline";
    })(DiskStatus || (DiskStatus = {}));
    /**
     * Defines values for DeviceOperation.
     * Possible values include: 'None', 'Delete', 'DeleteWithWarning', 'DRSource',
     * 'DRTarget', 'Browsable', 'ReadOnlyForDR', 'Deactivate'
     * @readonly
     * @enum {string}
     */
    var DeviceOperation;
    (function (DeviceOperation) {
        DeviceOperation["None"] = "None";
        DeviceOperation["Delete"] = "Delete";
        DeviceOperation["DeleteWithWarning"] = "DeleteWithWarning";
        DeviceOperation["DRSource"] = "DRSource";
        DeviceOperation["DRTarget"] = "DRTarget";
        DeviceOperation["Browsable"] = "Browsable";
        DeviceOperation["ReadOnlyForDR"] = "ReadOnlyForDR";
        DeviceOperation["Deactivate"] = "Deactivate";
    })(DeviceOperation || (DeviceOperation = {}));
    /**
     * Defines values for SupportedDeviceCapabilities.
     * Possible values include: 'Invalid', 'FileServer', 'IscsiServer'
     * @readonly
     * @enum {string}
     */
    var SupportedDeviceCapabilities;
    (function (SupportedDeviceCapabilities) {
        SupportedDeviceCapabilities["Invalid"] = "Invalid";
        SupportedDeviceCapabilities["FileServer"] = "FileServer";
        SupportedDeviceCapabilities["IscsiServer"] = "IscsiServer";
    })(SupportedDeviceCapabilities || (SupportedDeviceCapabilities = {}));
    /**
     * Defines values for DeviceConfigurationStatus.
     * Possible values include: 'Complete', 'Pending'
     * @readonly
     * @enum {string}
     */
    var DeviceConfigurationStatus;
    (function (DeviceConfigurationStatus) {
        DeviceConfigurationStatus["Complete"] = "Complete";
        DeviceConfigurationStatus["Pending"] = "Pending";
    })(DeviceConfigurationStatus || (DeviceConfigurationStatus = {}));
    /**
     * Defines values for DeviceStatus.
     * Possible values include: 'Unknown', 'Online', 'Offline',
     * 'RequiresAttention', 'MaintenanceMode', 'Creating', 'Provisioning',
     * 'Deleted', 'ReadyToSetup', 'Deactivated', 'Deactivating'
     * @readonly
     * @enum {string}
     */
    var DeviceStatus;
    (function (DeviceStatus) {
        DeviceStatus["Unknown"] = "Unknown";
        DeviceStatus["Online"] = "Online";
        DeviceStatus["Offline"] = "Offline";
        DeviceStatus["RequiresAttention"] = "RequiresAttention";
        DeviceStatus["MaintenanceMode"] = "MaintenanceMode";
        DeviceStatus["Creating"] = "Creating";
        DeviceStatus["Provisioning"] = "Provisioning";
        DeviceStatus["Deleted"] = "Deleted";
        DeviceStatus["ReadyToSetup"] = "ReadyToSetup";
        DeviceStatus["Deactivated"] = "Deactivated";
        DeviceStatus["Deactivating"] = "Deactivating";
    })(DeviceStatus || (DeviceStatus = {}));
    /**
     * Defines values for DeviceType.
     * Possible values include: 'Invalid', 'Appliance', 'VirtualAppliance',
     * 'Series9000OnPremVirtualAppliance', 'Series9000VirtualAppliance',
     * 'Series9000PhysicalAppliance'
     * @readonly
     * @enum {string}
     */
    var DeviceType;
    (function (DeviceType) {
        DeviceType["Invalid"] = "Invalid";
        DeviceType["Appliance"] = "Appliance";
        DeviceType["VirtualAppliance"] = "VirtualAppliance";
        DeviceType["Series9000OnPremVirtualAppliance"] = "Series9000OnPremVirtualAppliance";
        DeviceType["Series9000VirtualAppliance"] = "Series9000VirtualAppliance";
        DeviceType["Series9000PhysicalAppliance"] = "Series9000PhysicalAppliance";
    })(DeviceType || (DeviceType = {}));
    /**
     * Defines values for EncryptionStatus.
     * Possible values include: 'Enabled', 'Disabled'
     * @readonly
     * @enum {string}
     */
    var EncryptionStatus;
    (function (EncryptionStatus) {
        EncryptionStatus["Enabled"] = "Enabled";
        EncryptionStatus["Disabled"] = "Disabled";
    })(EncryptionStatus || (EncryptionStatus = {}));
    /**
     * Defines values for KeyRolloverStatus.
     * Possible values include: 'Required', 'NotRequired'
     * @readonly
     * @enum {string}
     */
    var KeyRolloverStatus;
    (function (KeyRolloverStatus) {
        KeyRolloverStatus["Required"] = "Required";
        KeyRolloverStatus["NotRequired"] = "NotRequired";
    })(KeyRolloverStatus || (KeyRolloverStatus = {}));
    /**
     * Defines values for JobStatus.
     * Possible values include: 'Invalid', 'Running', 'Succeeded', 'Failed',
     * 'Canceled', 'Paused', 'Scheduled'
     * @readonly
     * @enum {string}
     */
    var JobStatus;
    (function (JobStatus) {
        JobStatus["Invalid"] = "Invalid";
        JobStatus["Running"] = "Running";
        JobStatus["Succeeded"] = "Succeeded";
        JobStatus["Failed"] = "Failed";
        JobStatus["Canceled"] = "Canceled";
        JobStatus["Paused"] = "Paused";
        JobStatus["Scheduled"] = "Scheduled";
    })(JobStatus || (JobStatus = {}));
    /**
     * Defines values for JobType.
     * Possible values include: 'Backup', 'Clone', 'Failover', 'DownloadUpdates',
     * 'InstallUpdates'
     * @readonly
     * @enum {string}
     */
    var JobType;
    (function (JobType) {
        JobType["Backup"] = "Backup";
        JobType["Clone"] = "Clone";
        JobType["Failover"] = "Failover";
        JobType["DownloadUpdates"] = "DownloadUpdates";
        JobType["InstallUpdates"] = "InstallUpdates";
    })(JobType || (JobType = {}));
    /**
     * Defines values for TargetType.
     * Possible values include: 'FileServer', 'DiskServer'
     * @readonly
     * @enum {string}
     */
    var TargetType;
    (function (TargetType) {
        TargetType["FileServer"] = "FileServer";
        TargetType["DiskServer"] = "DiskServer";
    })(TargetType || (TargetType = {}));
    /**
     * Defines values for DownloadPhase.
     * Possible values include: 'Unknown', 'Initializing', 'Downloading',
     * 'Verifying'
     * @readonly
     * @enum {string}
     */
    var DownloadPhase;
    (function (DownloadPhase) {
        DownloadPhase["Unknown"] = "Unknown";
        DownloadPhase["Initializing"] = "Initializing";
        DownloadPhase["Downloading"] = "Downloading";
        DownloadPhase["Verifying"] = "Verifying";
    })(DownloadPhase || (DownloadPhase = {}));
    /**
     * Defines values for ManagerType.
     * Possible values include: 'GardaV1', 'HelsinkiV1'
     * @readonly
     * @enum {string}
     */
    var ManagerType;
    (function (ManagerType) {
        ManagerType["GardaV1"] = "GardaV1";
        ManagerType["HelsinkiV1"] = "HelsinkiV1";
    })(ManagerType || (ManagerType = {}));
    /**
     * Defines values for MetricUnit.
     * Possible values include: 'Bytes', 'BytesPerSecond', 'Count',
     * 'CountPerSecond', 'Percent', 'Seconds'
     * @readonly
     * @enum {string}
     */
    var MetricUnit;
    (function (MetricUnit) {
        MetricUnit["Bytes"] = "Bytes";
        MetricUnit["BytesPerSecond"] = "BytesPerSecond";
        MetricUnit["Count"] = "Count";
        MetricUnit["CountPerSecond"] = "CountPerSecond";
        MetricUnit["Percent"] = "Percent";
        MetricUnit["Seconds"] = "Seconds";
    })(MetricUnit || (MetricUnit = {}));
    /**
     * Defines values for MetricAggregationType.
     * Possible values include: 'Average', 'Last', 'Maximum', 'Minimum', 'None',
     * 'Total'
     * @readonly
     * @enum {string}
     */
    var MetricAggregationType;
    (function (MetricAggregationType) {
        MetricAggregationType["Average"] = "Average";
        MetricAggregationType["Last"] = "Last";
        MetricAggregationType["Maximum"] = "Maximum";
        MetricAggregationType["Minimum"] = "Minimum";
        MetricAggregationType["None"] = "None";
        MetricAggregationType["Total"] = "Total";
    })(MetricAggregationType || (MetricAggregationType = {}));
    /**
     * Defines values for DhcpStatus.
     * Possible values include: 'Enabled', 'Disabled'
     * @readonly
     * @enum {string}
     */
    var DhcpStatus;
    (function (DhcpStatus) {
        DhcpStatus["Enabled"] = "Enabled";
        DhcpStatus["Disabled"] = "Disabled";
    })(DhcpStatus || (DhcpStatus = {}));
    /**
     * Defines values for AuthType.
     * Possible values include: 'Invalid', 'AccessControlService',
     * 'AzureActiveDirectory'
     * @readonly
     * @enum {string}
     */
    var AuthType;
    (function (AuthType) {
        AuthType["Invalid"] = "Invalid";
        AuthType["AccessControlService"] = "AccessControlService";
        AuthType["AzureActiveDirectory"] = "AzureActiveDirectory";
    })(AuthType || (AuthType = {}));
    /**
     * Defines values for CloudType.
     * Possible values include: 'Azure', 'S3', 'S3_RRS', 'OpenStack', 'HP'
     * @readonly
     * @enum {string}
     */
    var CloudType;
    (function (CloudType) {
        CloudType["Azure"] = "Azure";
        CloudType["S3"] = "S3";
        CloudType["S3RRS"] = "S3_RRS";
        CloudType["OpenStack"] = "OpenStack";
        CloudType["HP"] = "HP";
    })(CloudType || (CloudType = {}));
    /**
     * Defines values for SslStatus.
     * Possible values include: 'Enabled', 'Disabled'
     * @readonly
     * @enum {string}
     */
    var SslStatus;
    (function (SslStatus) {
        SslStatus["Enabled"] = "Enabled";
        SslStatus["Disabled"] = "Disabled";
    })(SslStatus || (SslStatus = {}));
    /**
     * Defines values for UpdateOperation.
     * Possible values include: 'Idle', 'Scanning', 'Downloading', 'Installing'
     * @readonly
     * @enum {string}
     */
    var UpdateOperation;
    (function (UpdateOperation) {
        UpdateOperation["Idle"] = "Idle";
        UpdateOperation["Scanning"] = "Scanning";
        UpdateOperation["Downloading"] = "Downloading";
        UpdateOperation["Installing"] = "Installing";
    })(UpdateOperation || (UpdateOperation = {}));
    /**
     * Defines values for ContractVersions.
     * Possible values include: 'InvalidVersion', 'V2011_09', 'V2012_02',
     * 'V2012_05', 'V2012_12', 'V2013_04', 'V2013_10', 'V2013_11', 'V2014_04',
     * 'V2014_06', 'V2014_07', 'V2014_09', 'V2014_10', 'V2014_12', 'V2015_01',
     * 'V2015_02', 'V2015_04', 'V2015_05', 'V2015_06', 'V2015_07', 'V2015_08',
     * 'V2015_10', 'V2015_12', 'V2016_01', 'V2016_02', 'V2016_04', 'V2016_05',
     * 'V2016_07', 'V2016_08'
     * @readonly
     * @enum {string}
     */
    var ContractVersions;
    (function (ContractVersions) {
        ContractVersions["InvalidVersion"] = "InvalidVersion";
        ContractVersions["V201109"] = "V2011_09";
        ContractVersions["V201202"] = "V2012_02";
        ContractVersions["V201205"] = "V2012_05";
        ContractVersions["V201212"] = "V2012_12";
        ContractVersions["V201304"] = "V2013_04";
        ContractVersions["V201310"] = "V2013_10";
        ContractVersions["V201311"] = "V2013_11";
        ContractVersions["V201404"] = "V2014_04";
        ContractVersions["V201406"] = "V2014_06";
        ContractVersions["V201407"] = "V2014_07";
        ContractVersions["V201409"] = "V2014_09";
        ContractVersions["V201410"] = "V2014_10";
        ContractVersions["V201412"] = "V2014_12";
        ContractVersions["V201501"] = "V2015_01";
        ContractVersions["V201502"] = "V2015_02";
        ContractVersions["V201504"] = "V2015_04";
        ContractVersions["V201505"] = "V2015_05";
        ContractVersions["V201506"] = "V2015_06";
        ContractVersions["V201507"] = "V2015_07";
        ContractVersions["V201508"] = "V2015_08";
        ContractVersions["V201510"] = "V2015_10";
        ContractVersions["V201512"] = "V2015_12";
        ContractVersions["V201601"] = "V2016_01";
        ContractVersions["V201602"] = "V2016_02";
        ContractVersions["V201604"] = "V2016_04";
        ContractVersions["V201605"] = "V2016_05";
        ContractVersions["V201607"] = "V2016_07";
        ContractVersions["V201608"] = "V2016_08";
    })(ContractVersions || (ContractVersions = {}));

    var index = /*#__PURE__*/Object.freeze({
        get AlertScope () { return AlertScope; },
        get AlertSourceType () { return AlertSourceType; },
        get AlertSeverity () { return AlertSeverity; },
        get AlertStatus () { return AlertStatus; },
        get AlertEmailNotificationStatus () { return AlertEmailNotificationStatus; },
        get ServiceOwnersAlertNotificationStatus () { return ServiceOwnersAlertNotificationStatus; },
        get EncryptionAlgorithm () { return EncryptionAlgorithm; },
        get InitiatedBy () { return InitiatedBy; },
        get DataPolicy () { return DataPolicy; },
        get ShareStatus () { return ShareStatus; },
        get MonitoringStatus () { return MonitoringStatus; },
        get DiskStatus () { return DiskStatus; },
        get DeviceOperation () { return DeviceOperation; },
        get SupportedDeviceCapabilities () { return SupportedDeviceCapabilities; },
        get DeviceConfigurationStatus () { return DeviceConfigurationStatus; },
        get DeviceStatus () { return DeviceStatus; },
        get DeviceType () { return DeviceType; },
        get EncryptionStatus () { return EncryptionStatus; },
        get KeyRolloverStatus () { return KeyRolloverStatus; },
        get JobStatus () { return JobStatus; },
        get JobType () { return JobType; },
        get TargetType () { return TargetType; },
        get DownloadPhase () { return DownloadPhase; },
        get ManagerType () { return ManagerType; },
        get MetricUnit () { return MetricUnit; },
        get MetricAggregationType () { return MetricAggregationType; },
        get DhcpStatus () { return DhcpStatus; },
        get AuthType () { return AuthType; },
        get CloudType () { return CloudType; },
        get SslStatus () { return SslStatus; },
        get UpdateOperation () { return UpdateOperation; },
        get ContractVersions () { return ContractVersions; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var BaseModel = {
        serializedName: "BaseModel",
        type: {
            name: "Composite",
            className: "BaseModel",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AccessControlRecord = {
        serializedName: "AccessControlRecord",
        type: {
            name: "Composite",
            className: "AccessControlRecord",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { initiatorName: {
                    required: true,
                    serializedName: "properties.initiatorName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var AlertSource = {
        serializedName: "AlertSource",
        type: {
            name: "Composite",
            className: "AlertSource",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                timeZone: {
                    serializedName: "timeZone",
                    type: {
                        name: "String"
                    }
                },
                alertSourceType: {
                    serializedName: "alertSourceType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Resource",
                            "Device"
                        ]
                    }
                }
            }
        }
    };
    var AlertErrorDetails = {
        serializedName: "AlertErrorDetails",
        type: {
            name: "Composite",
            className: "AlertErrorDetails",
            modelProperties: {
                errorCode: {
                    serializedName: "errorCode",
                    type: {
                        name: "String"
                    }
                },
                errorMessage: {
                    serializedName: "errorMessage",
                    type: {
                        name: "String"
                    }
                },
                occurences: {
                    serializedName: "occurences",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Alert = {
        serializedName: "Alert",
        type: {
            name: "Composite",
            className: "Alert",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { title: {
                    required: true,
                    serializedName: "properties.title",
                    type: {
                        name: "String"
                    }
                }, scope: {
                    required: true,
                    serializedName: "properties.scope",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Resource",
                            "Device"
                        ]
                    }
                }, alertType: {
                    required: true,
                    serializedName: "properties.alertType",
                    type: {
                        name: "String"
                    }
                }, appearedAtTime: {
                    required: true,
                    serializedName: "properties.appearedAtTime",
                    type: {
                        name: "DateTime"
                    }
                }, appearedAtSourceTime: {
                    required: true,
                    serializedName: "properties.appearedAtSourceTime",
                    type: {
                        name: "DateTime"
                    }
                }, clearedAtTime: {
                    serializedName: "properties.clearedAtTime",
                    type: {
                        name: "DateTime"
                    }
                }, clearedAtSourceTime: {
                    serializedName: "properties.clearedAtSourceTime",
                    type: {
                        name: "DateTime"
                    }
                }, source: {
                    required: true,
                    serializedName: "properties.source",
                    type: {
                        name: "Composite",
                        className: "AlertSource"
                    }
                }, recommendation: {
                    serializedName: "properties.recommendation",
                    type: {
                        name: "String"
                    }
                }, resolutionReason: {
                    serializedName: "properties.resolutionReason",
                    type: {
                        name: "String"
                    }
                }, severity: {
                    required: true,
                    serializedName: "properties.severity",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Informational",
                            "Warning",
                            "Critical"
                        ]
                    }
                }, status: {
                    required: true,
                    serializedName: "properties.status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Active",
                            "Cleared"
                        ]
                    }
                }, errorDetails: {
                    serializedName: "properties.errorDetails",
                    type: {
                        name: "Composite",
                        className: "AlertErrorDetails"
                    }
                }, detailedInformation: {
                    serializedName: "properties.detailedInformation",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var AlertFilter = {
        serializedName: "AlertFilter",
        type: {
            name: "Composite",
            className: "AlertFilter",
            modelProperties: {
                status: {
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Active",
                            "Cleared"
                        ]
                    }
                },
                severity: {
                    serializedName: "severity",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Informational",
                            "Warning",
                            "Critical"
                        ]
                    }
                },
                sourceType: {
                    serializedName: "sourceType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Resource",
                            "Device"
                        ]
                    }
                },
                sourceName: {
                    serializedName: "sourceName",
                    type: {
                        name: "String"
                    }
                },
                appearedOnTime: {
                    serializedName: "appearedOnTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var AlertSettings = {
        serializedName: "AlertSettings",
        type: {
            name: "Composite",
            className: "AlertSettings",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { emailNotification: {
                    required: true,
                    serializedName: "properties.emailNotification",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, notificationToServiceOwners: {
                    required: true,
                    serializedName: "properties.notificationToServiceOwners",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, alertNotificationCulture: {
                    required: true,
                    serializedName: "properties.alertNotificationCulture",
                    type: {
                        name: "String"
                    }
                }, additionalRecipientEmailList: {
                    serializedName: "properties.additionalRecipientEmailList",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var AsymmetricEncryptedSecret = {
        serializedName: "AsymmetricEncryptedSecret",
        type: {
            name: "Composite",
            className: "AsymmetricEncryptedSecret",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                encryptionCertificateThumbprint: {
                    serializedName: "encryptionCertificateThumbprint",
                    type: {
                        name: "String"
                    }
                },
                encryptionAlgorithm: {
                    required: true,
                    serializedName: "encryptionAlgorithm",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "AES256",
                            "RSAES_PKCS1_v_1_5"
                        ]
                    }
                }
            }
        }
    };
    var AvailableProviderOperationDisplay = {
        serializedName: "AvailableProviderOperationDisplay",
        type: {
            name: "Composite",
            className: "AvailableProviderOperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AvailableProviderOperation = {
        serializedName: "AvailableProviderOperation",
        type: {
            name: "Composite",
            className: "AvailableProviderOperation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "AvailableProviderOperationDisplay"
                    }
                },
                origin: {
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var BackupElement = {
        serializedName: "BackupElement",
        type: {
            name: "Composite",
            className: "BackupElement",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { sizeInBytes: {
                    required: true,
                    serializedName: "properties.sizeInBytes",
                    type: {
                        name: "Number"
                    }
                }, endpointName: {
                    required: true,
                    serializedName: "properties.endpointName",
                    type: {
                        name: "String"
                    }
                }, dataPolicy: {
                    required: true,
                    serializedName: "properties.dataPolicy",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Invalid",
                            "Local",
                            "Tiered",
                            "Cloud"
                        ]
                    }
                } })
        }
    };
    var Backup = {
        serializedName: "Backup",
        type: {
            name: "Composite",
            className: "Backup",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { targetId: {
                    serializedName: "properties.targetId",
                    type: {
                        name: "String"
                    }
                }, targetType: {
                    serializedName: "properties.targetType",
                    type: {
                        name: "String"
                    }
                }, sizeInBytes: {
                    required: true,
                    serializedName: "properties.sizeInBytes",
                    type: {
                        name: "Number"
                    }
                }, createdTime: {
                    serializedName: "properties.createdTime",
                    type: {
                        name: "DateTime"
                    }
                }, expirationTime: {
                    serializedName: "properties.expirationTime",
                    type: {
                        name: "DateTime"
                    }
                }, initiatedBy: {
                    required: true,
                    serializedName: "properties.initiatedBy",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Manual",
                            "Scheduled"
                        ]
                    }
                }, deviceId: {
                    required: true,
                    serializedName: "properties.deviceId",
                    type: {
                        name: "String"
                    }
                }, elements: {
                    required: true,
                    serializedName: "properties.elements",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BackupElement"
                            }
                        }
                    }
                } })
        }
    };
    var BackupFilter = {
        serializedName: "BackupFilter",
        type: {
            name: "Composite",
            className: "BackupFilter",
            modelProperties: {
                initiatedBy: {
                    serializedName: "initiatedBy",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Manual",
                            "Scheduled"
                        ]
                    }
                },
                createdTime: {
                    serializedName: "createdTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var Time = {
        serializedName: "Time",
        type: {
            name: "Composite",
            className: "Time",
            modelProperties: {
                hour: {
                    required: true,
                    serializedName: "hour",
                    constraints: {
                        InclusiveMaximum: 23,
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                },
                minute: {
                    required: true,
                    serializedName: "minute",
                    constraints: {
                        InclusiveMaximum: 59,
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var BackupScheduleGroup = {
        serializedName: "BackupScheduleGroup",
        type: {
            name: "Composite",
            className: "BackupScheduleGroup",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { startTime: {
                    required: true,
                    serializedName: "properties.startTime",
                    type: {
                        name: "Composite",
                        className: "Time"
                    }
                } })
        }
    };
    var ChapSettings = {
        serializedName: "ChapSettings",
        type: {
            name: "Composite",
            className: "ChapSettings",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { password: {
                    required: true,
                    serializedName: "properties.password",
                    type: {
                        name: "Composite",
                        className: "AsymmetricEncryptedSecret"
                    }
                } })
        }
    };
    var ClearAlertRequest = {
        serializedName: "ClearAlertRequest",
        type: {
            name: "Composite",
            className: "ClearAlertRequest",
            modelProperties: {
                resolutionMessage: {
                    serializedName: "resolutionMessage",
                    type: {
                        name: "String"
                    }
                },
                alerts: {
                    required: true,
                    serializedName: "alerts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var FileShare = {
        serializedName: "FileShare",
        type: {
            name: "Composite",
            className: "FileShare",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, shareStatus: {
                    required: true,
                    serializedName: "properties.shareStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Online",
                            "Offline"
                        ]
                    }
                }, dataPolicy: {
                    required: true,
                    serializedName: "properties.dataPolicy",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Invalid",
                            "Local",
                            "Tiered",
                            "Cloud"
                        ]
                    }
                }, adminUser: {
                    required: true,
                    serializedName: "properties.adminUser",
                    type: {
                        name: "String"
                    }
                }, provisionedCapacityInBytes: {
                    required: true,
                    serializedName: "properties.provisionedCapacityInBytes",
                    type: {
                        name: "Number"
                    }
                }, usedCapacityInBytes: {
                    readOnly: true,
                    serializedName: "properties.usedCapacityInBytes",
                    type: {
                        name: "Number"
                    }
                }, localUsedCapacityInBytes: {
                    readOnly: true,
                    serializedName: "properties.localUsedCapacityInBytes",
                    type: {
                        name: "Number"
                    }
                }, monitoringStatus: {
                    required: true,
                    serializedName: "properties.monitoringStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                } })
        }
    };
    var ISCSIDisk = {
        serializedName: "ISCSIDisk",
        type: {
            name: "Composite",
            className: "ISCSIDisk",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, diskStatus: {
                    required: true,
                    serializedName: "properties.diskStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Online",
                            "Offline"
                        ]
                    }
                }, accessControlRecords: {
                    required: true,
                    serializedName: "properties.accessControlRecords",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, dataPolicy: {
                    required: true,
                    serializedName: "properties.dataPolicy",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Invalid",
                            "Local",
                            "Tiered",
                            "Cloud"
                        ]
                    }
                }, provisionedCapacityInBytes: {
                    required: true,
                    serializedName: "properties.provisionedCapacityInBytes",
                    type: {
                        name: "Number"
                    }
                }, usedCapacityInBytes: {
                    readOnly: true,
                    serializedName: "properties.usedCapacityInBytes",
                    type: {
                        name: "Number"
                    }
                }, localUsedCapacityInBytes: {
                    readOnly: true,
                    serializedName: "properties.localUsedCapacityInBytes",
                    type: {
                        name: "Number"
                    }
                }, monitoringStatus: {
                    required: true,
                    serializedName: "properties.monitoringStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                } })
        }
    };
    var CloneRequest = {
        serializedName: "CloneRequest",
        type: {
            name: "Composite",
            className: "CloneRequest",
            modelProperties: {
                targetDeviceId: {
                    required: true,
                    serializedName: "properties.targetDeviceId",
                    type: {
                        name: "String"
                    }
                },
                targetAccessPointId: {
                    required: true,
                    serializedName: "properties.targetAccessPointId",
                    type: {
                        name: "String"
                    }
                },
                newEndpointName: {
                    required: true,
                    serializedName: "properties.newEndpointName",
                    type: {
                        name: "String"
                    }
                },
                share: {
                    serializedName: "properties.share",
                    type: {
                        name: "Composite",
                        className: "FileShare"
                    }
                },
                disk: {
                    serializedName: "properties.disk",
                    type: {
                        name: "Composite",
                        className: "ISCSIDisk"
                    }
                }
            }
        }
    };
    var DeviceDetails = {
        serializedName: "DeviceDetails",
        type: {
            name: "Composite",
            className: "DeviceDetails",
            modelProperties: {
                endpointCount: {
                    serializedName: "endpointCount",
                    type: {
                        name: "Number"
                    }
                },
                totalStorageInBytes: {
                    serializedName: "totalStorageInBytes",
                    type: {
                        name: "Number"
                    }
                },
                totalLocalStorageInBytes: {
                    serializedName: "totalLocalStorageInBytes",
                    type: {
                        name: "Number"
                    }
                },
                provisionedStorageInBytes: {
                    serializedName: "provisionedStorageInBytes",
                    type: {
                        name: "Number"
                    }
                },
                provisionedLocalStorageInBytes: {
                    serializedName: "provisionedLocalStorageInBytes",
                    type: {
                        name: "Number"
                    }
                },
                usingStorageInBytes: {
                    serializedName: "usingStorageInBytes",
                    type: {
                        name: "Number"
                    }
                },
                usingLocalStorageInBytes: {
                    serializedName: "usingLocalStorageInBytes",
                    type: {
                        name: "Number"
                    }
                },
                totalBackupSizeInBytes: {
                    serializedName: "totalBackupSizeInBytes",
                    type: {
                        name: "Number"
                    }
                },
                availableStorageInBytes: {
                    serializedName: "availableStorageInBytes",
                    type: {
                        name: "Number"
                    }
                },
                availableLocalStorageInBytes: {
                    serializedName: "availableLocalStorageInBytes",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Device = {
        serializedName: "Device",
        type: {
            name: "Composite",
            className: "Device",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { activationTime: {
                    serializedName: "properties.activationTime",
                    type: {
                        name: "DateTime"
                    }
                }, allowedDeviceOperations: {
                    serializedName: "properties.allowedDeviceOperations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Enum",
                                allowedValues: [
                                    "None",
                                    "Delete",
                                    "DeleteWithWarning",
                                    "DRSource",
                                    "DRTarget",
                                    "Browsable",
                                    "ReadOnlyForDR",
                                    "Deactivate"
                                ]
                            }
                        }
                    }
                }, culture: {
                    serializedName: "properties.culture",
                    type: {
                        name: "String"
                    }
                }, deviceCapabilities: {
                    serializedName: "properties.deviceCapabilities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Enum",
                                allowedValues: [
                                    "Invalid",
                                    "FileServer",
                                    "IscsiServer"
                                ]
                            }
                        }
                    }
                }, deviceDescription: {
                    serializedName: "properties.deviceDescription",
                    type: {
                        name: "String"
                    }
                }, domainName: {
                    serializedName: "properties.domainName",
                    type: {
                        name: "String"
                    }
                }, deviceSoftwareVersion: {
                    serializedName: "properties.deviceSoftwareVersion",
                    type: {
                        name: "String"
                    }
                }, friendlySoftwareName: {
                    serializedName: "properties.friendlySoftwareName",
                    type: {
                        name: "String"
                    }
                }, deviceConfigurationStatus: {
                    serializedName: "properties.deviceConfigurationStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Complete",
                            "Pending"
                        ]
                    }
                }, modelDescription: {
                    serializedName: "properties.modelDescription",
                    type: {
                        name: "String"
                    }
                }, status: {
                    serializedName: "properties.status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Unknown",
                            "Online",
                            "Offline",
                            "RequiresAttention",
                            "MaintenanceMode",
                            "Creating",
                            "Provisioning",
                            "Deleted",
                            "ReadyToSetup",
                            "Deactivated",
                            "Deactivating"
                        ]
                    }
                }, deviceType: {
                    serializedName: "properties.type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Invalid",
                            "Appliance",
                            "VirtualAppliance",
                            "Series9000OnPremVirtualAppliance",
                            "Series9000VirtualAppliance",
                            "Series9000PhysicalAppliance"
                        ]
                    }
                }, details: {
                    serializedName: "properties.details",
                    type: {
                        name: "Composite",
                        className: "DeviceDetails"
                    }
                } })
        }
    };
    var DevicePatch = {
        serializedName: "DevicePatch",
        type: {
            name: "Composite",
            className: "DevicePatch",
            modelProperties: {
                deviceDescription: {
                    serializedName: "deviceDescription",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EncryptionSettings = {
        serializedName: "EncryptionSettings",
        type: {
            name: "Composite",
            className: "EncryptionSettings",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { encryptionStatus: {
                    required: true,
                    serializedName: "properties.encryptionStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, keyRolloverStatus: {
                    required: true,
                    serializedName: "properties.keyRolloverStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Required",
                            "NotRequired"
                        ]
                    }
                } })
        }
    };
    var Message = {
        serializedName: "Message",
        type: {
            name: "Composite",
            className: "Message",
            modelProperties: {
                language: {
                    serializedName: "language",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Item = {
        serializedName: "Item",
        type: {
            name: "Composite",
            className: "Item",
            modelProperties: {
                key: {
                    required: true,
                    serializedName: "key",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorModel = {
        serializedName: "Error",
        type: {
            name: "Composite",
            className: "ErrorModel",
            modelProperties: {
                errorCode: {
                    required: true,
                    serializedName: "errorCode",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    required: true,
                    serializedName: "message",
                    type: {
                        name: "Composite",
                        className: "Message"
                    }
                },
                values: {
                    serializedName: "values",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Item"
                            }
                        }
                    }
                }
            }
        }
    };
    var FailoverRequest = {
        serializedName: "FailoverRequest",
        type: {
            name: "Composite",
            className: "FailoverRequest",
            modelProperties: {
                accesspointIds: {
                    serializedName: "accesspointIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                targetDeviceId: {
                    serializedName: "targetDeviceId",
                    type: {
                        name: "String"
                    }
                },
                skipValidation: {
                    serializedName: "skipValidation",
                    type: {
                        name: "Boolean"
                    }
                },
                keepSourceDevice: {
                    serializedName: "keepSourceDevice",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var FileServer = {
        serializedName: "FileServer",
        type: {
            name: "Composite",
            className: "FileServer",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { domainName: {
                    required: true,
                    serializedName: "properties.domainName",
                    type: {
                        name: "String"
                    }
                }, storageDomainId: {
                    required: true,
                    serializedName: "properties.storageDomainId",
                    type: {
                        name: "String"
                    }
                }, backupScheduleGroupId: {
                    required: true,
                    serializedName: "properties.backupScheduleGroupId",
                    type: {
                        name: "String"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var IPConfig = {
        serializedName: "IPConfig",
        type: {
            name: "Composite",
            className: "IPConfig",
            modelProperties: {
                ipAddress: {
                    required: true,
                    serializedName: "ipAddress",
                    type: {
                        name: "String"
                    }
                },
                prefixLength: {
                    serializedName: "prefixLength",
                    type: {
                        name: "Number"
                    }
                },
                gateway: {
                    required: true,
                    serializedName: "gateway",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ISCSIServer = {
        serializedName: "ISCSIServer",
        type: {
            name: "Composite",
            className: "ISCSIServer",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { storageDomainId: {
                    required: true,
                    serializedName: "properties.storageDomainId",
                    type: {
                        name: "String"
                    }
                }, backupScheduleGroupId: {
                    required: true,
                    serializedName: "properties.backupScheduleGroupId",
                    type: {
                        name: "String"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, chapId: {
                    serializedName: "properties.chapId",
                    type: {
                        name: "String"
                    }
                }, reverseChapId: {
                    serializedName: "properties.reverseChapId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var JobErrorItem = {
        serializedName: "JobErrorItem",
        type: {
            name: "Composite",
            className: "JobErrorItem",
            modelProperties: {
                recommendations: {
                    serializedName: "recommendations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                code: {
                    required: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    required: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobErrorDetails = {
        serializedName: "JobErrorDetails",
        type: {
            name: "Composite",
            className: "JobErrorDetails",
            modelProperties: {
                errorDetails: {
                    serializedName: "errorDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobErrorItem"
                            }
                        }
                    }
                },
                code: {
                    required: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    required: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobStage = {
        serializedName: "JobStage",
        type: {
            name: "Composite",
            className: "JobStage",
            modelProperties: {
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                stageStatus: {
                    required: true,
                    serializedName: "stageStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Invalid",
                            "Running",
                            "Succeeded",
                            "Failed",
                            "Canceled",
                            "Paused",
                            "Scheduled"
                        ]
                    }
                },
                detail: {
                    serializedName: "detail",
                    type: {
                        name: "String"
                    }
                },
                errorCode: {
                    serializedName: "errorCode",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobStats = {
        serializedName: "JobStats",
        type: {
            name: "Composite",
            className: "JobStats",
            modelProperties: {
                completedWorkItemCount: {
                    serializedName: "completedWorkItemCount",
                    type: {
                        name: "Number"
                    }
                },
                totalWorkItemCount: {
                    serializedName: "totalWorkItemCount",
                    type: {
                        name: "Number"
                    }
                },
                estimatedTimeRemaining: {
                    serializedName: "estimatedTimeRemaining",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var UpdateDownloadProgress = {
        serializedName: "UpdateDownloadProgress",
        type: {
            name: "Composite",
            className: "UpdateDownloadProgress",
            modelProperties: {
                downloadPhase: {
                    serializedName: "downloadPhase",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Unknown",
                            "Initializing",
                            "Downloading",
                            "Verifying"
                        ]
                    }
                },
                percentComplete: {
                    serializedName: "percentComplete",
                    type: {
                        name: "Number"
                    }
                },
                totalBytesToDownload: {
                    serializedName: "totalBytesToDownload",
                    type: {
                        name: "Number"
                    }
                },
                totalBytesDownloaded: {
                    serializedName: "totalBytesDownloaded",
                    type: {
                        name: "Number"
                    }
                },
                numberOfUpdatesToDownload: {
                    serializedName: "numberOfUpdatesToDownload",
                    type: {
                        name: "Number"
                    }
                },
                numberOfUpdatesDownloaded: {
                    serializedName: "numberOfUpdatesDownloaded",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var UpdateInstallProgress = {
        serializedName: "UpdateInstallProgress",
        type: {
            name: "Composite",
            className: "UpdateInstallProgress",
            modelProperties: {
                percentComplete: {
                    serializedName: "percentComplete",
                    type: {
                        name: "Number"
                    }
                },
                numberOfUpdatesToInstall: {
                    serializedName: "numberOfUpdatesToInstall",
                    type: {
                        name: "Number"
                    }
                },
                numberOfUpdatesInstalled: {
                    serializedName: "numberOfUpdatesInstalled",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Job = {
        serializedName: "Job",
        type: {
            name: "Composite",
            className: "Job",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { status: {
                    required: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Invalid",
                            "Running",
                            "Succeeded",
                            "Failed",
                            "Canceled",
                            "Paused",
                            "Scheduled"
                        ]
                    }
                }, startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                }, endTime: {
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                }, percentComplete: {
                    required: true,
                    serializedName: "percentComplete",
                    type: {
                        name: "Number"
                    }
                }, error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "JobErrorDetails"
                    }
                }, jobType: {
                    required: true,
                    serializedName: "properties.jobType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Backup",
                            "Clone",
                            "Failover",
                            "DownloadUpdates",
                            "InstallUpdates"
                        ]
                    }
                }, targetId: {
                    serializedName: "properties.targetId",
                    type: {
                        name: "String"
                    }
                }, entityId: {
                    serializedName: "properties.entityId",
                    type: {
                        name: "String"
                    }
                }, entityType: {
                    serializedName: "properties.entityType",
                    type: {
                        name: "String"
                    }
                }, jobStages: {
                    serializedName: "properties.jobStages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobStage"
                            }
                        }
                    }
                }, deviceId: {
                    serializedName: "properties.deviceId",
                    type: {
                        name: "String"
                    }
                }, isCancellable: {
                    serializedName: "properties.isCancellable",
                    type: {
                        name: "Boolean"
                    }
                }, stats: {
                    serializedName: "properties.stats",
                    type: {
                        name: "Composite",
                        className: "JobStats"
                    }
                }, targetType: {
                    serializedName: "properties.targetType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "FileServer",
                            "DiskServer"
                        ]
                    }
                }, sourceDeviceId: {
                    serializedName: "properties.sourceDeviceId",
                    type: {
                        name: "String"
                    }
                }, backupPointInTime: {
                    serializedName: "properties.backupPointInTime",
                    type: {
                        name: "DateTime"
                    }
                }, downloadProgress: {
                    serializedName: "properties.downloadProgress",
                    type: {
                        name: "Composite",
                        className: "UpdateDownloadProgress"
                    }
                }, installProgress: {
                    serializedName: "properties.installProgress",
                    type: {
                        name: "Composite",
                        className: "UpdateInstallProgress"
                    }
                } })
        }
    };
    var JobFilter = {
        serializedName: "JobFilter",
        type: {
            name: "Composite",
            className: "JobFilter",
            modelProperties: {
                jobType: {
                    required: true,
                    serializedName: "jobType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Backup",
                            "Clone",
                            "Failover",
                            "DownloadUpdates",
                            "InstallUpdates"
                        ]
                    }
                },
                status: {
                    required: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Invalid",
                            "Running",
                            "Succeeded",
                            "Failed",
                            "Canceled",
                            "Paused",
                            "Scheduled"
                        ]
                    }
                },
                startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var ManagerIntrinsicSettings = {
        serializedName: "ManagerIntrinsicSettings",
        type: {
            name: "Composite",
            className: "ManagerIntrinsicSettings",
            modelProperties: {
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "GardaV1",
                            "HelsinkiV1"
                        ]
                    }
                }
            }
        }
    };
    var ManagerSku = {
        serializedName: "ManagerSku",
        type: {
            name: "Composite",
            className: "ManagerSku",
            modelProperties: {
                name: {
                    required: true,
                    isConstant: true,
                    serializedName: "name",
                    defaultValue: 'Standard',
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var Manager = {
        serializedName: "Manager",
        type: {
            name: "Composite",
            className: "Manager",
            modelProperties: __assign({}, Resource.type.modelProperties, { cisIntrinsicSettings: {
                    serializedName: "properties.cisIntrinsicSettings",
                    type: {
                        name: "Composite",
                        className: "ManagerIntrinsicSettings"
                    }
                }, sku: {
                    isConstant: true,
                    serializedName: "properties.sku",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "ManagerSku"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ManagerExtendedInfo = {
        serializedName: "ManagerExtendedInfo",
        type: {
            name: "Composite",
            className: "ManagerExtendedInfo",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { version: {
                    serializedName: "properties.version",
                    type: {
                        name: "String"
                    }
                }, integrityKey: {
                    required: true,
                    serializedName: "properties.integrityKey",
                    type: {
                        name: "String"
                    }
                }, encryptionKey: {
                    serializedName: "properties.encryptionKey",
                    type: {
                        name: "String"
                    }
                }, encryptionKeyThumbprint: {
                    serializedName: "properties.encryptionKeyThumbprint",
                    type: {
                        name: "String"
                    }
                }, portalCertificateThumbprint: {
                    serializedName: "properties.portalCertificateThumbprint",
                    type: {
                        name: "String"
                    }
                }, algorithm: {
                    required: true,
                    serializedName: "properties.algorithm",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ManagerPatch = {
        serializedName: "ManagerPatch",
        type: {
            name: "Composite",
            className: "ManagerPatch",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var MetricAvailablity = {
        serializedName: "MetricAvailablity",
        type: {
            name: "Composite",
            className: "MetricAvailablity",
            modelProperties: {
                timeGrain: {
                    required: true,
                    serializedName: "timeGrain",
                    type: {
                        name: "String"
                    }
                },
                retention: {
                    required: true,
                    serializedName: "retention",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MetricData = {
        serializedName: "MetricData",
        type: {
            name: "Composite",
            className: "MetricData",
            modelProperties: {
                timeStamp: {
                    required: true,
                    serializedName: "timeStamp",
                    type: {
                        name: "DateTime"
                    }
                },
                sum: {
                    required: true,
                    serializedName: "sum",
                    type: {
                        name: "Number"
                    }
                },
                count: {
                    required: true,
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                },
                average: {
                    required: true,
                    serializedName: "average",
                    type: {
                        name: "Number"
                    }
                },
                minimum: {
                    required: true,
                    serializedName: "minimum",
                    type: {
                        name: "Number"
                    }
                },
                maximum: {
                    required: true,
                    serializedName: "maximum",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var MetricName = {
        serializedName: "MetricName",
        type: {
            name: "Composite",
            className: "MetricName",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                localizedValue: {
                    required: true,
                    serializedName: "localizedValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MetricDimension = {
        serializedName: "MetricDimension",
        type: {
            name: "Composite",
            className: "MetricDimension",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MetricDefinition = {
        serializedName: "MetricDefinition",
        type: {
            name: "Composite",
            className: "MetricDefinition",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "MetricName"
                    }
                },
                unit: {
                    required: true,
                    serializedName: "unit",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Bytes",
                            "BytesPerSecond",
                            "Count",
                            "CountPerSecond",
                            "Percent",
                            "Seconds"
                        ]
                    }
                },
                primaryAggregationType: {
                    required: true,
                    serializedName: "primaryAggregationType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Average",
                            "Last",
                            "Maximum",
                            "Minimum",
                            "None",
                            "Total"
                        ]
                    }
                },
                resourceId: {
                    required: true,
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                },
                metricAvailabilities: {
                    required: true,
                    serializedName: "metricAvailabilities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricAvailablity"
                            }
                        }
                    }
                },
                dimensions: {
                    required: true,
                    serializedName: "dimensions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricDimension"
                            }
                        }
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MetricNameFilter = {
        serializedName: "MetricNameFilter",
        type: {
            name: "Composite",
            className: "MetricNameFilter",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MetricFilter = {
        serializedName: "MetricFilter",
        type: {
            name: "Composite",
            className: "MetricFilter",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "MetricNameFilter"
                    }
                },
                startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                timeGrain: {
                    serializedName: "timeGrain",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Metrics = {
        serializedName: "Metrics",
        type: {
            name: "Composite",
            className: "Metrics",
            modelProperties: {
                resourceId: {
                    required: true,
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                },
                startTime: {
                    required: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    required: true,
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                timeGrain: {
                    required: true,
                    serializedName: "timeGrain",
                    type: {
                        name: "String"
                    }
                },
                primaryAggregation: {
                    required: true,
                    serializedName: "primaryAggregation",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Average",
                            "Last",
                            "Maximum",
                            "Minimum",
                            "None",
                            "Total"
                        ]
                    }
                },
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "MetricName"
                    }
                },
                dimensions: {
                    required: true,
                    serializedName: "dimensions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricDimension"
                            }
                        }
                    }
                },
                unit: {
                    required: true,
                    serializedName: "unit",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Bytes",
                            "BytesPerSecond",
                            "Count",
                            "CountPerSecond",
                            "Percent",
                            "Seconds"
                        ]
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                values: {
                    required: true,
                    serializedName: "values",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricData"
                            }
                        }
                    }
                }
            }
        }
    };
    var NetworkAdapter = {
        serializedName: "NetworkAdapter",
        type: {
            name: "Composite",
            className: "NetworkAdapter",
            modelProperties: {
                networkAdapterName: {
                    required: true,
                    serializedName: "networkAdapterName",
                    type: {
                        name: "String"
                    }
                },
                iPv4Info: {
                    serializedName: "iPv4Info",
                    type: {
                        name: "Composite",
                        className: "IPConfig"
                    }
                },
                iPv6Info: {
                    serializedName: "iPv6Info",
                    type: {
                        name: "Composite",
                        className: "IPConfig"
                    }
                },
                dhcpStatus: {
                    required: true,
                    serializedName: "dhcpStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                },
                linkSpeed: {
                    serializedName: "linkSpeed",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var NodeNetwork = {
        serializedName: "NodeNetwork",
        type: {
            name: "Composite",
            className: "NodeNetwork",
            modelProperties: {
                networkAdapters: {
                    required: true,
                    serializedName: "networkAdapters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkAdapter"
                            }
                        }
                    }
                }
            }
        }
    };
    var NetworkSettings = {
        serializedName: "NetworkSettings",
        type: {
            name: "Composite",
            className: "NetworkSettings",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { primaryDnsServer: {
                    required: true,
                    serializedName: "properties.primaryDnsServer",
                    type: {
                        name: "String"
                    }
                }, secondaryDnsServer: {
                    serializedName: "properties.secondaryDnsServer",
                    type: {
                        name: "String"
                    }
                }, nodeNetworks: {
                    required: true,
                    serializedName: "properties.nodeNetworks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NodeNetwork"
                            }
                        }
                    }
                } })
        }
    };
    var SecuritySettings = {
        serializedName: "SecuritySettings",
        type: {
            name: "Composite",
            className: "SecuritySettings",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { deviceAdminPassword: {
                    required: true,
                    serializedName: "properties.deviceAdminPassword",
                    type: {
                        name: "Composite",
                        className: "AsymmetricEncryptedSecret"
                    }
                } })
        }
    };
    var SendTestAlertEmailRequest = {
        serializedName: "SendTestAlertEmailRequest",
        type: {
            name: "Composite",
            className: "SendTestAlertEmailRequest",
            modelProperties: {
                emailList: {
                    required: true,
                    serializedName: "emailList",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var StorageAccountCredential = {
        serializedName: "StorageAccountCredential",
        type: {
            name: "Composite",
            className: "StorageAccountCredential",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { cloudType: {
                    required: true,
                    serializedName: "properties.cloudType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Azure",
                            "S3",
                            "S3_RRS",
                            "OpenStack",
                            "HP"
                        ]
                    }
                }, endPoint: {
                    required: true,
                    serializedName: "properties.endPoint",
                    type: {
                        name: "String"
                    }
                }, login: {
                    required: true,
                    serializedName: "properties.login",
                    type: {
                        name: "String"
                    }
                }, location: {
                    serializedName: "properties.location",
                    type: {
                        name: "String"
                    }
                }, enableSSL: {
                    required: true,
                    serializedName: "properties.enableSSL",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, accessKey: {
                    serializedName: "properties.accessKey",
                    type: {
                        name: "Composite",
                        className: "AsymmetricEncryptedSecret"
                    }
                } })
        }
    };
    var StorageDomain = {
        serializedName: "StorageDomain",
        type: {
            name: "Composite",
            className: "StorageDomain",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { storageAccountCredentialIds: {
                    required: true,
                    serializedName: "properties.storageAccountCredentialIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, encryptionKey: {
                    serializedName: "properties.encryptionKey",
                    type: {
                        name: "Composite",
                        className: "AsymmetricEncryptedSecret"
                    }
                }, encryptionStatus: {
                    required: true,
                    serializedName: "properties.encryptionStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                } })
        }
    };
    var SymmetricEncryptedSecret = {
        serializedName: "SymmetricEncryptedSecret",
        type: {
            name: "Composite",
            className: "SymmetricEncryptedSecret",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                valueCertificateThumbprint: {
                    serializedName: "valueCertificateThumbprint",
                    type: {
                        name: "String"
                    }
                },
                encryptionAlgorithm: {
                    required: true,
                    serializedName: "encryptionAlgorithm",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "AES256",
                            "RSAES_PKCS1_v_1_5"
                        ]
                    }
                }
            }
        }
    };
    var TimeSettings = {
        serializedName: "TimeSettings",
        type: {
            name: "Composite",
            className: "TimeSettings",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { timeZone: {
                    required: true,
                    serializedName: "properties.timeZone",
                    type: {
                        name: "String"
                    }
                }, primaryTimeServer: {
                    required: true,
                    serializedName: "properties.primaryTimeServer",
                    type: {
                        name: "String"
                    }
                }, secondaryTimeServer: {
                    serializedName: "properties.secondaryTimeServer",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Updates = {
        serializedName: "Updates",
        type: {
            name: "Composite",
            className: "Updates",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { deviceVersion: {
                    serializedName: "properties.deviceVersion",
                    type: {
                        name: "String"
                    }
                }, deviceLastScannedTime: {
                    serializedName: "properties.deviceLastScannedTime",
                    type: {
                        name: "DateTime"
                    }
                }, regularUpdatesAvailable: {
                    serializedName: "properties.regularUpdatesAvailable",
                    type: {
                        name: "Boolean"
                    }
                }, rebootRequiredForInstall: {
                    serializedName: "properties.rebootRequiredForInstall",
                    type: {
                        name: "Boolean"
                    }
                }, totalItemsPendingForDownload: {
                    serializedName: "properties.totalItemsPendingForDownload",
                    type: {
                        name: "Number"
                    }
                }, totalItemsPendingForInstall: {
                    serializedName: "properties.totalItemsPendingForInstall",
                    type: {
                        name: "Number"
                    }
                }, status: {
                    serializedName: "properties.status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Idle",
                            "Scanning",
                            "Downloading",
                            "Installing"
                        ]
                    }
                }, lastCompletedScanTime: {
                    serializedName: "properties.lastCompletedScanTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastCompletedDownloadJobTime: {
                    serializedName: "properties.lastCompletedDownloadJobTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastCompletedInstallJobTime: {
                    serializedName: "properties.lastCompletedInstallJobTime",
                    type: {
                        name: "DateTime"
                    }
                }, inProgressDownloadJobId: {
                    serializedName: "properties.inProgressDownloadJobId",
                    type: {
                        name: "String"
                    }
                }, inProgressInstallJobId: {
                    serializedName: "properties.inProgressInstallJobId",
                    type: {
                        name: "String"
                    }
                }, inProgressScanStartedTime: {
                    serializedName: "properties.inProgressScanStartedTime",
                    type: {
                        name: "DateTime"
                    }
                }, inProgressDownloadJobStartedTime: {
                    serializedName: "properties.inProgressDownloadJobStartedTime",
                    type: {
                        name: "DateTime"
                    }
                }, inProgressInstallJobStartedTime: {
                    serializedName: "properties.inProgressInstallJobStartedTime",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var UploadCertificateRequest = {
        serializedName: "UploadCertificateRequest",
        type: {
            name: "Composite",
            className: "UploadCertificateRequest",
            modelProperties: {
                authType: {
                    serializedName: "properties.authType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Invalid",
                            "AccessControlService",
                            "AzureActiveDirectory"
                        ]
                    }
                },
                certificate: {
                    required: true,
                    serializedName: "properties.certificate",
                    type: {
                        name: "String"
                    }
                },
                contractVersion: {
                    readOnly: true,
                    serializedName: "contractVersion",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "InvalidVersion",
                            "V2011_09",
                            "V2012_02",
                            "V2012_05",
                            "V2012_12",
                            "V2013_04",
                            "V2013_10",
                            "V2013_11",
                            "V2014_04",
                            "V2014_06",
                            "V2014_07",
                            "V2014_09",
                            "V2014_10",
                            "V2014_12",
                            "V2015_01",
                            "V2015_02",
                            "V2015_04",
                            "V2015_05",
                            "V2015_06",
                            "V2015_07",
                            "V2015_08",
                            "V2015_10",
                            "V2015_12",
                            "V2016_01",
                            "V2016_02",
                            "V2016_04",
                            "V2016_05",
                            "V2016_07",
                            "V2016_08"
                        ]
                    }
                }
            }
        }
    };
    var UploadCertificateResponse = {
        serializedName: "UploadCertificateResponse",
        type: {
            name: "Composite",
            className: "UploadCertificateResponse",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { authType: {
                    serializedName: "properties.authType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Invalid",
                            "AccessControlService",
                            "AzureActiveDirectory"
                        ]
                    }
                }, certificate: {
                    required: true,
                    serializedName: "properties.certificate",
                    type: {
                        name: "String"
                    }
                }, resourceId: {
                    required: true,
                    serializedName: "properties.resourceId",
                    type: {
                        name: "Number"
                    }
                }, aadAuthority: {
                    required: true,
                    serializedName: "properties.aadAuthority",
                    type: {
                        name: "String"
                    }
                }, aadTenantId: {
                    required: true,
                    serializedName: "properties.aadTenantId",
                    type: {
                        name: "String"
                    }
                }, servicePrincipalClientId: {
                    required: true,
                    serializedName: "properties.servicePrincipalClientId",
                    type: {
                        name: "String"
                    }
                }, servicePrincipalObjectId: {
                    required: true,
                    serializedName: "properties.servicePrincipalObjectId",
                    type: {
                        name: "String"
                    }
                }, azureManagementEndpointAudience: {
                    required: true,
                    serializedName: "properties.azureManagementEndpointAudience",
                    type: {
                        name: "String"
                    }
                }, subject: {
                    required: true,
                    serializedName: "properties.subject",
                    type: {
                        name: "String"
                    }
                }, validFrom: {
                    required: true,
                    serializedName: "properties.validFrom",
                    type: {
                        name: "DateTime"
                    }
                }, validTo: {
                    required: true,
                    serializedName: "properties.validTo",
                    type: {
                        name: "DateTime"
                    }
                }, thumbprint: {
                    required: true,
                    serializedName: "properties.thumbprint",
                    type: {
                        name: "String"
                    }
                }, friendlyName: {
                    required: true,
                    serializedName: "properties.friendlyName",
                    type: {
                        name: "String"
                    }
                }, issuer: {
                    required: true,
                    serializedName: "properties.issuer",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ManagerList = {
        serializedName: "ManagerList",
        type: {
            name: "Composite",
            className: "ManagerList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Manager"
                            }
                        }
                    }
                }
            }
        }
    };
    var MetricList = {
        serializedName: "MetricList",
        type: {
            name: "Composite",
            className: "MetricList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Metrics"
                            }
                        }
                    }
                }
            }
        }
    };
    var MetricDefinitionList = {
        serializedName: "MetricDefinitionList",
        type: {
            name: "Composite",
            className: "MetricDefinitionList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricDefinition"
                            }
                        }
                    }
                }
            }
        }
    };
    var AvailableProviderOperations = {
        serializedName: "AvailableProviderOperations",
        type: {
            name: "Composite",
            className: "AvailableProviderOperations",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AvailableProviderOperation"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AccessControlRecordList = {
        serializedName: "AccessControlRecordList",
        type: {
            name: "Composite",
            className: "AccessControlRecordList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AccessControlRecord"
                            }
                        }
                    }
                }
            }
        }
    };
    var AlertList = {
        serializedName: "AlertList",
        type: {
            name: "Composite",
            className: "AlertList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Alert"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BackupList = {
        serializedName: "BackupList",
        type: {
            name: "Composite",
            className: "BackupList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Backup"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DeviceList = {
        serializedName: "DeviceList",
        type: {
            name: "Composite",
            className: "DeviceList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Device"
                            }
                        }
                    }
                }
            }
        }
    };
    var BackupScheduleGroupList = {
        serializedName: "BackupScheduleGroupList",
        type: {
            name: "Composite",
            className: "BackupScheduleGroupList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BackupScheduleGroup"
                            }
                        }
                    }
                }
            }
        }
    };
    var ChapSettingsList = {
        serializedName: "ChapSettingsList",
        type: {
            name: "Composite",
            className: "ChapSettingsList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ChapSettings"
                            }
                        }
                    }
                }
            }
        }
    };
    var ISCSIDiskList = {
        serializedName: "ISCSIDiskList",
        type: {
            name: "Composite",
            className: "ISCSIDiskList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ISCSIDisk"
                            }
                        }
                    }
                }
            }
        }
    };
    var FileServerList = {
        serializedName: "FileServerList",
        type: {
            name: "Composite",
            className: "FileServerList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FileServer"
                            }
                        }
                    }
                }
            }
        }
    };
    var FileShareList = {
        serializedName: "FileShareList",
        type: {
            name: "Composite",
            className: "FileShareList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FileShare"
                            }
                        }
                    }
                }
            }
        }
    };
    var ISCSIServerList = {
        serializedName: "ISCSIServerList",
        type: {
            name: "Composite",
            className: "ISCSIServerList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ISCSIServer"
                            }
                        }
                    }
                }
            }
        }
    };
    var JobList = {
        serializedName: "JobList",
        type: {
            name: "Composite",
            className: "JobList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Job"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StorageAccountCredentialList = {
        serializedName: "StorageAccountCredentialList",
        type: {
            name: "Composite",
            className: "StorageAccountCredentialList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StorageAccountCredential"
                            }
                        }
                    }
                }
            }
        }
    };
    var StorageDomainList = {
        serializedName: "StorageDomainList",
        type: {
            name: "Composite",
            className: "StorageDomainList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StorageDomain"
                            }
                        }
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        BaseModel: BaseModel,
        AccessControlRecord: AccessControlRecord,
        AlertSource: AlertSource,
        AlertErrorDetails: AlertErrorDetails,
        Alert: Alert,
        AlertFilter: AlertFilter,
        AlertSettings: AlertSettings,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        AvailableProviderOperationDisplay: AvailableProviderOperationDisplay,
        AvailableProviderOperation: AvailableProviderOperation,
        BackupElement: BackupElement,
        Backup: Backup,
        BackupFilter: BackupFilter,
        Time: Time,
        BackupScheduleGroup: BackupScheduleGroup,
        ChapSettings: ChapSettings,
        ClearAlertRequest: ClearAlertRequest,
        FileShare: FileShare,
        ISCSIDisk: ISCSIDisk,
        CloneRequest: CloneRequest,
        DeviceDetails: DeviceDetails,
        Device: Device,
        DevicePatch: DevicePatch,
        EncryptionSettings: EncryptionSettings,
        Message: Message,
        Item: Item,
        ErrorModel: ErrorModel,
        FailoverRequest: FailoverRequest,
        FileServer: FileServer,
        IPConfig: IPConfig,
        ISCSIServer: ISCSIServer,
        JobErrorItem: JobErrorItem,
        JobErrorDetails: JobErrorDetails,
        JobStage: JobStage,
        JobStats: JobStats,
        UpdateDownloadProgress: UpdateDownloadProgress,
        UpdateInstallProgress: UpdateInstallProgress,
        Job: Job,
        JobFilter: JobFilter,
        ManagerIntrinsicSettings: ManagerIntrinsicSettings,
        ManagerSku: ManagerSku,
        Resource: Resource,
        Manager: Manager,
        ManagerExtendedInfo: ManagerExtendedInfo,
        ManagerPatch: ManagerPatch,
        MetricAvailablity: MetricAvailablity,
        MetricData: MetricData,
        MetricName: MetricName,
        MetricDimension: MetricDimension,
        MetricDefinition: MetricDefinition,
        MetricNameFilter: MetricNameFilter,
        MetricFilter: MetricFilter,
        Metrics: Metrics,
        NetworkAdapter: NetworkAdapter,
        NodeNetwork: NodeNetwork,
        NetworkSettings: NetworkSettings,
        SecuritySettings: SecuritySettings,
        SendTestAlertEmailRequest: SendTestAlertEmailRequest,
        StorageAccountCredential: StorageAccountCredential,
        StorageDomain: StorageDomain,
        SymmetricEncryptedSecret: SymmetricEncryptedSecret,
        TimeSettings: TimeSettings,
        Updates: Updates,
        UploadCertificateRequest: UploadCertificateRequest,
        UploadCertificateResponse: UploadCertificateResponse,
        ManagerList: ManagerList,
        MetricList: MetricList,
        MetricDefinitionList: MetricDefinitionList,
        AvailableProviderOperations: AvailableProviderOperations,
        AccessControlRecordList: AccessControlRecordList,
        AlertList: AlertList,
        BackupList: BackupList,
        DeviceList: DeviceList,
        BackupScheduleGroupList: BackupScheduleGroupList,
        ChapSettingsList: ChapSettingsList,
        ISCSIDiskList: ISCSIDiskList,
        FileServerList: FileServerList,
        FileShareList: FileShareList,
        ISCSIServerList: ISCSIServerList,
        JobList: JobList,
        StorageAccountCredentialList: StorageAccountCredentialList,
        StorageDomainList: StorageDomainList
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        ManagerList: ManagerList,
        Manager: Manager,
        Resource: Resource,
        BaseResource: BaseResource,
        ManagerIntrinsicSettings: ManagerIntrinsicSettings,
        ManagerSku: ManagerSku,
        ErrorModel: ErrorModel,
        Message: Message,
        Item: Item,
        ManagerPatch: ManagerPatch,
        UploadCertificateRequest: UploadCertificateRequest,
        UploadCertificateResponse: UploadCertificateResponse,
        BaseModel: BaseModel,
        EncryptionSettings: EncryptionSettings,
        ManagerExtendedInfo: ManagerExtendedInfo,
        SymmetricEncryptedSecret: SymmetricEncryptedSecret,
        MetricList: MetricList,
        Metrics: Metrics,
        MetricName: MetricName,
        MetricDimension: MetricDimension,
        MetricData: MetricData,
        MetricDefinitionList: MetricDefinitionList,
        MetricDefinition: MetricDefinition,
        MetricAvailablity: MetricAvailablity,
        AccessControlRecord: AccessControlRecord,
        Alert: Alert,
        AlertSource: AlertSource,
        AlertErrorDetails: AlertErrorDetails,
        AlertSettings: AlertSettings,
        BackupElement: BackupElement,
        Backup: Backup,
        BackupScheduleGroup: BackupScheduleGroup,
        Time: Time,
        ChapSettings: ChapSettings,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        FileShare: FileShare,
        ISCSIDisk: ISCSIDisk,
        Device: Device,
        DeviceDetails: DeviceDetails,
        FileServer: FileServer,
        ISCSIServer: ISCSIServer,
        Job: Job,
        JobErrorDetails: JobErrorDetails,
        JobErrorItem: JobErrorItem,
        JobStage: JobStage,
        JobStats: JobStats,
        UpdateDownloadProgress: UpdateDownloadProgress,
        UpdateInstallProgress: UpdateInstallProgress,
        NetworkSettings: NetworkSettings,
        NodeNetwork: NodeNetwork,
        NetworkAdapter: NetworkAdapter,
        IPConfig: IPConfig,
        SecuritySettings: SecuritySettings,
        StorageAccountCredential: StorageAccountCredential,
        StorageDomain: StorageDomain,
        TimeSettings: TimeSettings,
        Updates: Updates
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var accessControlRecordName = {
        parameterPath: "accessControlRecordName",
        mapper: {
            required: true,
            serializedName: "accessControlRecordName",
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var backupName = {
        parameterPath: "backupName",
        mapper: {
            required: true,
            serializedName: "backupName",
            type: {
                name: "String"
            }
        }
    };
    var certificateName = {
        parameterPath: "certificateName",
        mapper: {
            required: true,
            serializedName: "certificateName",
            type: {
                name: "String"
            }
        }
    };
    var chapUserName = {
        parameterPath: "chapUserName",
        mapper: {
            required: true,
            serializedName: "chapUserName",
            type: {
                name: "String"
            }
        }
    };
    var credentialName = {
        parameterPath: "credentialName",
        mapper: {
            required: true,
            serializedName: "credentialName",
            type: {
                name: "String"
            }
        }
    };
    var deviceName = {
        parameterPath: "deviceName",
        mapper: {
            required: true,
            serializedName: "deviceName",
            type: {
                name: "String"
            }
        }
    };
    var diskName = {
        parameterPath: "diskName",
        mapper: {
            required: true,
            serializedName: "diskName",
            type: {
                name: "String"
            }
        }
    };
    var elementName = {
        parameterPath: "elementName",
        mapper: {
            required: true,
            serializedName: "elementName",
            type: {
                name: "String"
            }
        }
    };
    var expand = {
        parameterPath: [
            "options",
            "expand"
        ],
        mapper: {
            serializedName: "$expand",
            type: {
                name: "String"
            }
        }
    };
    var fileServerName = {
        parameterPath: "fileServerName",
        mapper: {
            required: true,
            serializedName: "fileServerName",
            type: {
                name: "String"
            }
        }
    };
    var filter = {
        parameterPath: [
            "options",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var forFailover = {
        parameterPath: [
            "options",
            "forFailover"
        ],
        mapper: {
            serializedName: "forFailover",
            type: {
                name: "Boolean"
            }
        }
    };
    var ifMatch = {
        parameterPath: "ifMatch",
        mapper: {
            required: true,
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var iscsiServerName = {
        parameterPath: "iscsiServerName",
        mapper: {
            required: true,
            serializedName: "iscsiServerName",
            type: {
                name: "String"
            }
        }
    };
    var jobName = {
        parameterPath: "jobName",
        mapper: {
            required: true,
            serializedName: "jobName",
            type: {
                name: "String"
            }
        }
    };
    var managerName = {
        parameterPath: "managerName",
        mapper: {
            required: true,
            serializedName: "managerName",
            constraints: {
                MaxLength: 50,
                MinLength: 2
            },
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var scheduleGroupName = {
        parameterPath: "scheduleGroupName",
        mapper: {
            required: true,
            serializedName: "scheduleGroupName",
            type: {
                name: "String"
            }
        }
    };
    var shareName = {
        parameterPath: "shareName",
        mapper: {
            required: true,
            serializedName: "shareName",
            type: {
                name: "String"
            }
        }
    };
    var storageDomainName = {
        parameterPath: "storageDomainName",
        mapper: {
            required: true,
            serializedName: "storageDomainName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Managers. */
    var Managers = /** @class */ (function () {
        /**
         * Create a Managers.
         * @param {StorSimpleManagementClientContext} client Reference to the service client.
         */
        function Managers(client) {
            this.client = client;
        }
        Managers.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Managers.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Managers.prototype.get = function (resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        Managers.prototype.createOrUpdate = function (manager, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                manager: manager,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        Managers.prototype.deleteMethod = function (resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        Managers.prototype.update = function (parameters, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                parameters: parameters,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, updateOperationSpec, callback);
        };
        Managers.prototype.uploadRegistrationCertificate = function (certificateName$$1, uploadCertificateRequestrequest, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                certificateName: certificateName$$1,
                uploadCertificateRequestrequest: uploadCertificateRequestrequest,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, uploadRegistrationCertificateOperationSpec, callback);
        };
        Managers.prototype.getEncryptionSettings = function (resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getEncryptionSettingsOperationSpec, callback);
        };
        Managers.prototype.getExtendedInfo = function (resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getExtendedInfoOperationSpec, callback);
        };
        Managers.prototype.createExtendedInfo = function (managerExtendedInfo, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                managerExtendedInfo: managerExtendedInfo,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, createExtendedInfoOperationSpec, callback);
        };
        Managers.prototype.deleteExtendedInfo = function (resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, deleteExtendedInfoOperationSpec, callback);
        };
        Managers.prototype.updateExtendedInfo = function (managerExtendedInfo, resourceGroupName$$1, managerName$$1, ifMatch$$1, options, callback) {
            return this.client.sendOperationRequest({
                managerExtendedInfo: managerExtendedInfo,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                ifMatch: ifMatch$$1,
                options: options
            }, updateExtendedInfoOperationSpec, callback);
        };
        Managers.prototype.getEncryptionKey = function (resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getEncryptionKeyOperationSpec, callback);
        };
        Managers.prototype.listMetrics = function (resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listMetricsOperationSpec, callback);
        };
        Managers.prototype.listMetricDefinition = function (resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listMetricDefinitionOperationSpec, callback);
        };
        return Managers;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.StorSimple/managers",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagerList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagerList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Manager
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "manager",
            mapper: __assign({}, Manager, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Manager
            },
            201: {
                bodyMapper: Manager
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ManagerPatch, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Manager
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var uploadRegistrationCertificateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/certificates/{certificateName}",
        urlParameters: [
            certificateName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "uploadCertificateRequestrequest",
            mapper: __assign({}, UploadCertificateRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: UploadCertificateResponse
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var getEncryptionSettingsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/encryptionSettings/default",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EncryptionSettings
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var getExtendedInfoOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/extendedInformation/vaultExtendedInfo",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagerExtendedInfo
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var createExtendedInfoOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/extendedInformation/vaultExtendedInfo",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "managerExtendedInfo",
            mapper: __assign({}, ManagerExtendedInfo, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ManagerExtendedInfo
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var deleteExtendedInfoOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/extendedInformation/vaultExtendedInfo",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var updateExtendedInfoOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/extendedInformation/vaultExtendedInfo",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "managerExtendedInfo",
            mapper: __assign({}, ManagerExtendedInfo, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ManagerExtendedInfo
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var getEncryptionKeyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/getEncryptionKey",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SymmetricEncryptedSecret
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var listMetricsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/metrics",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var listMetricDefinitionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/metricsDefinitions",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricDefinitionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        AvailableProviderOperations: AvailableProviderOperations,
        AvailableProviderOperation: AvailableProviderOperation,
        AvailableProviderOperationDisplay: AvailableProviderOperationDisplay,
        ErrorModel: ErrorModel,
        Message: Message,
        Item: Item
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a AvailableProviderOperationsOperations. */
    var AvailableProviderOperationsOperations = /** @class */ (function () {
        /**
         * Create a AvailableProviderOperationsOperations.
         * @param {StorSimpleManagementClientContext} client Reference to the service client.
         */
        function AvailableProviderOperationsOperations(client) {
            this.client = client;
        }
        AvailableProviderOperationsOperations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        AvailableProviderOperationsOperations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return AvailableProviderOperationsOperations;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.StorSimple/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AvailableProviderOperations
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AvailableProviderOperations
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        AccessControlRecordList: AccessControlRecordList,
        AccessControlRecord: AccessControlRecord,
        BaseModel: BaseModel,
        ErrorModel: ErrorModel,
        Message: Message,
        Item: Item,
        Alert: Alert,
        AlertSource: AlertSource,
        AlertErrorDetails: AlertErrorDetails,
        AlertSettings: AlertSettings,
        BackupElement: BackupElement,
        Backup: Backup,
        BackupScheduleGroup: BackupScheduleGroup,
        Time: Time,
        ChapSettings: ChapSettings,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        FileShare: FileShare,
        ISCSIDisk: ISCSIDisk,
        Device: Device,
        DeviceDetails: DeviceDetails,
        EncryptionSettings: EncryptionSettings,
        FileServer: FileServer,
        ISCSIServer: ISCSIServer,
        Job: Job,
        JobErrorDetails: JobErrorDetails,
        JobErrorItem: JobErrorItem,
        JobStage: JobStage,
        JobStats: JobStats,
        UpdateDownloadProgress: UpdateDownloadProgress,
        UpdateInstallProgress: UpdateInstallProgress,
        ManagerExtendedInfo: ManagerExtendedInfo,
        NetworkSettings: NetworkSettings,
        NodeNetwork: NodeNetwork,
        NetworkAdapter: NetworkAdapter,
        IPConfig: IPConfig,
        SecuritySettings: SecuritySettings,
        StorageAccountCredential: StorageAccountCredential,
        StorageDomain: StorageDomain,
        TimeSettings: TimeSettings,
        Updates: Updates,
        UploadCertificateResponse: UploadCertificateResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a AccessControlRecords. */
    var AccessControlRecords = /** @class */ (function () {
        /**
         * Create a AccessControlRecords.
         * @param {StorSimpleManagementClientContext} client Reference to the service client.
         */
        function AccessControlRecords(client) {
            this.client = client;
        }
        AccessControlRecords.prototype.listByManager = function (resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listByManagerOperationSpec, callback);
        };
        AccessControlRecords.prototype.get = function (accessControlRecordName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                accessControlRecordName: accessControlRecordName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        /**
         * Creates or Updates an access control record.
         * @param accessControlRecordName The name of the access control record.
         * @param accessControlRecord The access control record to be added or updated.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<Models.AccessControlRecordsCreateOrUpdateResponse>
         */
        AccessControlRecords.prototype.createOrUpdate = function (accessControlRecordName$$1, accessControlRecord, resourceGroupName$$1, managerName$$1, options) {
            return this.beginCreateOrUpdate(accessControlRecordName$$1, accessControlRecord, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the access control record.
         * @param accessControlRecordName The name of the access control record to delete.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        AccessControlRecords.prototype.deleteMethod = function (accessControlRecordName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.beginDeleteMethod(accessControlRecordName$$1, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or Updates an access control record.
         * @param accessControlRecordName The name of the access control record.
         * @param accessControlRecord The access control record to be added or updated.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        AccessControlRecords.prototype.beginCreateOrUpdate = function (accessControlRecordName$$1, accessControlRecord, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                accessControlRecordName: accessControlRecordName$$1,
                accessControlRecord: accessControlRecord,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * Deletes the access control record.
         * @param accessControlRecordName The name of the access control record to delete.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        AccessControlRecords.prototype.beginDeleteMethod = function (accessControlRecordName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                accessControlRecordName: accessControlRecordName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        return AccessControlRecords;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listByManagerOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/accessControlRecords",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AccessControlRecordList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/accessControlRecords/{accessControlRecordName}",
        urlParameters: [
            accessControlRecordName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AccessControlRecord
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$2
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/accessControlRecords/{accessControlRecordName}",
        urlParameters: [
            accessControlRecordName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "accessControlRecord",
            mapper: __assign({}, AccessControlRecord, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AccessControlRecord
            },
            202: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$2
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/accessControlRecords/{accessControlRecordName}",
        urlParameters: [
            accessControlRecordName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        AlertList: AlertList,
        Alert: Alert,
        BaseModel: BaseModel,
        AlertSource: AlertSource,
        AlertErrorDetails: AlertErrorDetails,
        ErrorModel: ErrorModel,
        Message: Message,
        Item: Item,
        ClearAlertRequest: ClearAlertRequest,
        SendTestAlertEmailRequest: SendTestAlertEmailRequest,
        AccessControlRecord: AccessControlRecord,
        AlertSettings: AlertSettings,
        BackupElement: BackupElement,
        Backup: Backup,
        BackupScheduleGroup: BackupScheduleGroup,
        Time: Time,
        ChapSettings: ChapSettings,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        FileShare: FileShare,
        ISCSIDisk: ISCSIDisk,
        Device: Device,
        DeviceDetails: DeviceDetails,
        EncryptionSettings: EncryptionSettings,
        FileServer: FileServer,
        ISCSIServer: ISCSIServer,
        Job: Job,
        JobErrorDetails: JobErrorDetails,
        JobErrorItem: JobErrorItem,
        JobStage: JobStage,
        JobStats: JobStats,
        UpdateDownloadProgress: UpdateDownloadProgress,
        UpdateInstallProgress: UpdateInstallProgress,
        ManagerExtendedInfo: ManagerExtendedInfo,
        NetworkSettings: NetworkSettings,
        NodeNetwork: NodeNetwork,
        NetworkAdapter: NetworkAdapter,
        IPConfig: IPConfig,
        SecuritySettings: SecuritySettings,
        StorageAccountCredential: StorageAccountCredential,
        StorageDomain: StorageDomain,
        TimeSettings: TimeSettings,
        Updates: Updates,
        UploadCertificateResponse: UploadCertificateResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Alerts. */
    var Alerts = /** @class */ (function () {
        /**
         * Create a Alerts.
         * @param {StorSimpleManagementClientContext} client Reference to the service client.
         */
        function Alerts(client) {
            this.client = client;
        }
        Alerts.prototype.listByManager = function (resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listByManagerOperationSpec$1, callback);
        };
        Alerts.prototype.clear = function (request, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                request: request,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, clearOperationSpec, callback);
        };
        Alerts.prototype.sendTestEmail = function (deviceName$$1, request, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                request: request,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, sendTestEmailOperationSpec, callback);
        };
        Alerts.prototype.listByManagerNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByManagerNextOperationSpec, callback);
        };
        return Alerts;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listByManagerOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/alerts",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AlertList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$3
    };
    var clearOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/clearAlerts",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "request",
            mapper: __assign({}, ClearAlertRequest, { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$3
    };
    var sendTestEmailOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/sendTestAlertEmail",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "request",
            mapper: __assign({}, SendTestAlertEmailRequest, { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$3
    };
    var listByManagerNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AlertList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        BackupList: BackupList,
        Backup: Backup,
        BaseModel: BaseModel,
        BackupElement: BackupElement,
        ErrorModel: ErrorModel,
        Message: Message,
        Item: Item,
        CloneRequest: CloneRequest,
        FileShare: FileShare,
        ISCSIDisk: ISCSIDisk,
        AccessControlRecord: AccessControlRecord,
        Alert: Alert,
        AlertSource: AlertSource,
        AlertErrorDetails: AlertErrorDetails,
        AlertSettings: AlertSettings,
        BackupScheduleGroup: BackupScheduleGroup,
        Time: Time,
        ChapSettings: ChapSettings,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        Device: Device,
        DeviceDetails: DeviceDetails,
        EncryptionSettings: EncryptionSettings,
        FileServer: FileServer,
        ISCSIServer: ISCSIServer,
        Job: Job,
        JobErrorDetails: JobErrorDetails,
        JobErrorItem: JobErrorItem,
        JobStage: JobStage,
        JobStats: JobStats,
        UpdateDownloadProgress: UpdateDownloadProgress,
        UpdateInstallProgress: UpdateInstallProgress,
        ManagerExtendedInfo: ManagerExtendedInfo,
        NetworkSettings: NetworkSettings,
        NodeNetwork: NodeNetwork,
        NetworkAdapter: NetworkAdapter,
        IPConfig: IPConfig,
        SecuritySettings: SecuritySettings,
        StorageAccountCredential: StorageAccountCredential,
        StorageDomain: StorageDomain,
        TimeSettings: TimeSettings,
        Updates: Updates,
        UploadCertificateResponse: UploadCertificateResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Backups. */
    var Backups = /** @class */ (function () {
        /**
         * Create a Backups.
         * @param {StorSimpleManagementClientContext} client Reference to the service client.
         */
        function Backups(client) {
            this.client = client;
        }
        Backups.prototype.listByManager = function (resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listByManagerOperationSpec$2, callback);
        };
        Backups.prototype.listByDevice = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listByDeviceOperationSpec, callback);
        };
        /**
         * Deletes the backup.
         * @param deviceName The device name.
         * @param backupName The backup name.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Backups.prototype.deleteMethod = function (deviceName$$1, backupName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.beginDeleteMethod(deviceName$$1, backupName$$1, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Clones the given backup element to a new disk or share with given details.
         * @param deviceName The device name.
         * @param backupName The backup name.
         * @param elementName The backup element name.
         * @param cloneRequest The clone request.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Backups.prototype.clone = function (deviceName$$1, backupName$$1, elementName$$1, cloneRequest, resourceGroupName$$1, managerName$$1, options) {
            return this.beginClone(deviceName$$1, backupName$$1, elementName$$1, cloneRequest, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the backup.
         * @param deviceName The device name.
         * @param backupName The backup name.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Backups.prototype.beginDeleteMethod = function (deviceName$$1, backupName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                backupName: backupName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$1, options);
        };
        /**
         * Clones the given backup element to a new disk or share with given details.
         * @param deviceName The device name.
         * @param backupName The backup name.
         * @param elementName The backup element name.
         * @param cloneRequest The clone request.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Backups.prototype.beginClone = function (deviceName$$1, backupName$$1, elementName$$1, cloneRequest, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                backupName: backupName$$1,
                elementName: elementName$$1,
                cloneRequest: cloneRequest,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginCloneOperationSpec, options);
        };
        Backups.prototype.listByManagerNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByManagerNextOperationSpec$1, callback);
        };
        Backups.prototype.listByDeviceNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByDeviceNextOperationSpec, callback);
        };
        return Backups;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var listByManagerOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/backups",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackupList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$4
    };
    var listByDeviceOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backups",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            forFailover,
            apiVersion,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackupList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$4
    };
    var beginDeleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backups/{backupName}",
        urlParameters: [
            deviceName,
            backupName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$4
    };
    var beginCloneOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backups/{backupName}/elements/{elementName}/clone",
        urlParameters: [
            deviceName,
            backupName,
            elementName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "cloneRequest",
            mapper: __assign({}, CloneRequest, { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$4
    };
    var listByManagerNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackupList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$4
    };
    var listByDeviceNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackupList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        DeviceList: DeviceList,
        Device: Device,
        BaseModel: BaseModel,
        DeviceDetails: DeviceDetails,
        ErrorModel: ErrorModel,
        Message: Message,
        Item: Item,
        DevicePatch: DevicePatch,
        AlertSettings: AlertSettings,
        FailoverRequest: FailoverRequest,
        MetricList: MetricList,
        Metrics: Metrics,
        MetricName: MetricName,
        MetricDimension: MetricDimension,
        MetricData: MetricData,
        MetricDefinitionList: MetricDefinitionList,
        MetricDefinition: MetricDefinition,
        MetricAvailablity: MetricAvailablity,
        NetworkSettings: NetworkSettings,
        NodeNetwork: NodeNetwork,
        NetworkAdapter: NetworkAdapter,
        IPConfig: IPConfig,
        SecuritySettings: SecuritySettings,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        TimeSettings: TimeSettings,
        Updates: Updates,
        AccessControlRecord: AccessControlRecord,
        Alert: Alert,
        AlertSource: AlertSource,
        AlertErrorDetails: AlertErrorDetails,
        BackupElement: BackupElement,
        Backup: Backup,
        BackupScheduleGroup: BackupScheduleGroup,
        Time: Time,
        ChapSettings: ChapSettings,
        FileShare: FileShare,
        ISCSIDisk: ISCSIDisk,
        EncryptionSettings: EncryptionSettings,
        FileServer: FileServer,
        ISCSIServer: ISCSIServer,
        Job: Job,
        JobErrorDetails: JobErrorDetails,
        JobErrorItem: JobErrorItem,
        JobStage: JobStage,
        JobStats: JobStats,
        UpdateDownloadProgress: UpdateDownloadProgress,
        UpdateInstallProgress: UpdateInstallProgress,
        ManagerExtendedInfo: ManagerExtendedInfo,
        StorageAccountCredential: StorageAccountCredential,
        StorageDomain: StorageDomain,
        UploadCertificateResponse: UploadCertificateResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Devices. */
    var Devices = /** @class */ (function () {
        /**
         * Create a Devices.
         * @param {StorSimpleManagementClientContext} client Reference to the service client.
         */
        function Devices(client) {
            this.client = client;
        }
        Devices.prototype.listByManager = function (resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listByManagerOperationSpec$3, callback);
        };
        Devices.prototype.get = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        /**
         * Deletes the device.
         * @param deviceName The device name.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Devices.prototype.deleteMethod = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.beginDeleteMethod(deviceName$$1, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Patches the device.
         * @param deviceName The device Name.
         * @param devicePatch Patch representation of the device.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<Models.DevicesPatchResponse>
         */
        Devices.prototype.patch = function (deviceName$$1, devicePatch, resourceGroupName$$1, managerName$$1, options) {
            return this.beginPatch(deviceName$$1, devicePatch, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Devices.prototype.getAlertSettings = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getAlertSettingsOperationSpec, callback);
        };
        /**
         * Creates or updates the alert settings
         * @param deviceName The device name.
         * @param alertSettings The alert settings.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<Models.DevicesCreateOrUpdateAlertSettingsResponse>
         */
        Devices.prototype.createOrUpdateAlertSettings = function (deviceName$$1, alertSettings, resourceGroupName$$1, managerName$$1, options) {
            return this.beginCreateOrUpdateAlertSettings(deviceName$$1, alertSettings, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deactivates the device.
         * @param deviceName The device name.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Devices.prototype.deactivate = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.beginDeactivate(deviceName$$1, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Downloads udpates on the device.
         * @param deviceName The device name.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Devices.prototype.downloadUpdates = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.beginDownloadUpdates(deviceName$$1, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Fails over the device to another device.
         * @param deviceName The device name.
         * @param failoverRequest The failover request.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Devices.prototype.failover = function (deviceName$$1, failoverRequest, resourceGroupName$$1, managerName$$1, options) {
            return this.beginFailover(deviceName$$1, failoverRequest, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Devices.prototype.listFailoverTarget = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listFailoverTargetOperationSpec, callback);
        };
        /**
         * Installs the updates on the device.
         * @param deviceName The device name.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Devices.prototype.installUpdates = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.beginInstallUpdates(deviceName$$1, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Devices.prototype.listMetrics = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listMetricsOperationSpec$1, callback);
        };
        Devices.prototype.listMetricDefinition = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listMetricDefinitionOperationSpec$1, callback);
        };
        Devices.prototype.getNetworkSettings = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getNetworkSettingsOperationSpec, callback);
        };
        /**
         * Scans for updates on the device.
         * @param deviceName The device name.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Devices.prototype.scanForUpdates = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.beginScanForUpdates(deviceName$$1, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates the security settings.
         * @param deviceName The device name.
         * @param securitySettings The security settings.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Devices.prototype.createOrUpdateSecuritySettings = function (deviceName$$1, securitySettings, resourceGroupName$$1, managerName$$1, options) {
            return this.beginCreateOrUpdateSecuritySettings(deviceName$$1, securitySettings, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Devices.prototype.getTimeSettings = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getTimeSettingsOperationSpec, callback);
        };
        Devices.prototype.getUpdateSummary = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getUpdateSummaryOperationSpec, callback);
        };
        /**
         * Deletes the device.
         * @param deviceName The device name.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Devices.prototype.beginDeleteMethod = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$2, options);
        };
        /**
         * Patches the device.
         * @param deviceName The device Name.
         * @param devicePatch Patch representation of the device.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Devices.prototype.beginPatch = function (deviceName$$1, devicePatch, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                devicePatch: devicePatch,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginPatchOperationSpec, options);
        };
        /**
         * Creates or updates the alert settings
         * @param deviceName The device name.
         * @param alertSettings The alert settings.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Devices.prototype.beginCreateOrUpdateAlertSettings = function (deviceName$$1, alertSettings, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                alertSettings: alertSettings,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginCreateOrUpdateAlertSettingsOperationSpec, options);
        };
        /**
         * Deactivates the device.
         * @param deviceName The device name.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Devices.prototype.beginDeactivate = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginDeactivateOperationSpec, options);
        };
        /**
         * Downloads udpates on the device.
         * @param deviceName The device name.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Devices.prototype.beginDownloadUpdates = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginDownloadUpdatesOperationSpec, options);
        };
        /**
         * Fails over the device to another device.
         * @param deviceName The device name.
         * @param failoverRequest The failover request.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Devices.prototype.beginFailover = function (deviceName$$1, failoverRequest, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                failoverRequest: failoverRequest,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginFailoverOperationSpec, options);
        };
        /**
         * Installs the updates on the device.
         * @param deviceName The device name.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Devices.prototype.beginInstallUpdates = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginInstallUpdatesOperationSpec, options);
        };
        /**
         * Scans for updates on the device.
         * @param deviceName The device name.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Devices.prototype.beginScanForUpdates = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginScanForUpdatesOperationSpec, options);
        };
        /**
         * Creates or updates the security settings.
         * @param deviceName The device name.
         * @param securitySettings The security settings.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Devices.prototype.beginCreateOrUpdateSecuritySettings = function (deviceName$$1, securitySettings, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                securitySettings: securitySettings,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginCreateOrUpdateSecuritySettingsOperationSpec, options);
        };
        return Devices;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var listByManagerOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion,
            expand
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeviceList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$5
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion,
            expand
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Device
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$5
    };
    var getAlertSettingsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/alertSettings/default",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AlertSettings
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$5
    };
    var listFailoverTargetOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/failoverTargets",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion,
            expand
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeviceList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$5
    };
    var listMetricsOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/metrics",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$5
    };
    var listMetricDefinitionOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/metricsDefinitions",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricDefinitionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$5
    };
    var getNetworkSettingsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/networkSettings/default",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkSettings
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$5
    };
    var getTimeSettingsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/timeSettings/default",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TimeSettings
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$5
    };
    var getUpdateSummaryOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/updateSummary/default",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Updates
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$5
    };
    var beginDeleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$5
    };
    var beginPatchOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "devicePatch",
            mapper: __assign({}, DevicePatch, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Device
            },
            202: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$5
    };
    var beginCreateOrUpdateAlertSettingsOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/alertSettings/default",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "alertSettings",
            mapper: __assign({}, AlertSettings, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AlertSettings
            },
            202: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$5
    };
    var beginDeactivateOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/deactivate",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$5
    };
    var beginDownloadUpdatesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/download",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$5
    };
    var beginFailoverOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/failover",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "failoverRequest",
            mapper: __assign({}, FailoverRequest, { required: true })
        },
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$5
    };
    var beginInstallUpdatesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/install",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$5
    };
    var beginScanForUpdatesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/scanForUpdates",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$5
    };
    var beginCreateOrUpdateSecuritySettingsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/securitySettings/default/update",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "securitySettings",
            mapper: __assign({}, SecuritySettings, { required: true })
        },
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        BackupScheduleGroupList: BackupScheduleGroupList,
        BackupScheduleGroup: BackupScheduleGroup,
        BaseModel: BaseModel,
        Time: Time,
        ErrorModel: ErrorModel,
        Message: Message,
        Item: Item,
        AccessControlRecord: AccessControlRecord,
        Alert: Alert,
        AlertSource: AlertSource,
        AlertErrorDetails: AlertErrorDetails,
        AlertSettings: AlertSettings,
        BackupElement: BackupElement,
        Backup: Backup,
        ChapSettings: ChapSettings,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        FileShare: FileShare,
        ISCSIDisk: ISCSIDisk,
        Device: Device,
        DeviceDetails: DeviceDetails,
        EncryptionSettings: EncryptionSettings,
        FileServer: FileServer,
        ISCSIServer: ISCSIServer,
        Job: Job,
        JobErrorDetails: JobErrorDetails,
        JobErrorItem: JobErrorItem,
        JobStage: JobStage,
        JobStats: JobStats,
        UpdateDownloadProgress: UpdateDownloadProgress,
        UpdateInstallProgress: UpdateInstallProgress,
        ManagerExtendedInfo: ManagerExtendedInfo,
        NetworkSettings: NetworkSettings,
        NodeNetwork: NodeNetwork,
        NetworkAdapter: NetworkAdapter,
        IPConfig: IPConfig,
        SecuritySettings: SecuritySettings,
        StorageAccountCredential: StorageAccountCredential,
        StorageDomain: StorageDomain,
        TimeSettings: TimeSettings,
        Updates: Updates,
        UploadCertificateResponse: UploadCertificateResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a BackupScheduleGroups. */
    var BackupScheduleGroups = /** @class */ (function () {
        /**
         * Create a BackupScheduleGroups.
         * @param {StorSimpleManagementClientContext} client Reference to the service client.
         */
        function BackupScheduleGroups(client) {
            this.client = client;
        }
        BackupScheduleGroups.prototype.listByDevice = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listByDeviceOperationSpec$1, callback);
        };
        BackupScheduleGroups.prototype.get = function (deviceName$$1, scheduleGroupName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                scheduleGroupName: scheduleGroupName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getOperationSpec$3, callback);
        };
        /**
         * Creates or Updates the backup schedule Group.
         * @param deviceName The name of the device.
         * @param scheduleGroupName The name of the schedule group.
         * @param scheduleGroup The schedule group to be created
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<Models.BackupScheduleGroupsCreateOrUpdateResponse>
         */
        BackupScheduleGroups.prototype.createOrUpdate = function (deviceName$$1, scheduleGroupName$$1, scheduleGroup, resourceGroupName$$1, managerName$$1, options) {
            return this.beginCreateOrUpdate(deviceName$$1, scheduleGroupName$$1, scheduleGroup, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the backup schedule group.
         * @param deviceName The name of the device.
         * @param scheduleGroupName The name of the schedule group.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        BackupScheduleGroups.prototype.deleteMethod = function (deviceName$$1, scheduleGroupName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.beginDeleteMethod(deviceName$$1, scheduleGroupName$$1, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or Updates the backup schedule Group.
         * @param deviceName The name of the device.
         * @param scheduleGroupName The name of the schedule group.
         * @param scheduleGroup The schedule group to be created
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        BackupScheduleGroups.prototype.beginCreateOrUpdate = function (deviceName$$1, scheduleGroupName$$1, scheduleGroup, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                scheduleGroupName: scheduleGroupName$$1,
                scheduleGroup: scheduleGroup,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginCreateOrUpdateOperationSpec$1, options);
        };
        /**
         * Deletes the backup schedule group.
         * @param deviceName The name of the device.
         * @param scheduleGroupName The name of the schedule group.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        BackupScheduleGroups.prototype.beginDeleteMethod = function (deviceName$$1, scheduleGroupName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                scheduleGroupName: scheduleGroupName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$3, options);
        };
        return BackupScheduleGroups;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var listByDeviceOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backupScheduleGroups",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackupScheduleGroupList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$6
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backupScheduleGroups/{scheduleGroupName}",
        urlParameters: [
            deviceName,
            scheduleGroupName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackupScheduleGroup
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$6
    };
    var beginCreateOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backupScheduleGroups/{scheduleGroupName}",
        urlParameters: [
            deviceName,
            scheduleGroupName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "scheduleGroup",
            mapper: __assign({}, BackupScheduleGroup, { required: true })
        },
        responses: {
            200: {
                bodyMapper: BackupScheduleGroup
            },
            202: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$6
    };
    var beginDeleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backupScheduleGroups/{scheduleGroupName}",
        urlParameters: [
            deviceName,
            scheduleGroupName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        ChapSettingsList: ChapSettingsList,
        ChapSettings: ChapSettings,
        BaseModel: BaseModel,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        ErrorModel: ErrorModel,
        Message: Message,
        Item: Item,
        AccessControlRecord: AccessControlRecord,
        Alert: Alert,
        AlertSource: AlertSource,
        AlertErrorDetails: AlertErrorDetails,
        AlertSettings: AlertSettings,
        BackupElement: BackupElement,
        Backup: Backup,
        BackupScheduleGroup: BackupScheduleGroup,
        Time: Time,
        FileShare: FileShare,
        ISCSIDisk: ISCSIDisk,
        Device: Device,
        DeviceDetails: DeviceDetails,
        EncryptionSettings: EncryptionSettings,
        FileServer: FileServer,
        ISCSIServer: ISCSIServer,
        Job: Job,
        JobErrorDetails: JobErrorDetails,
        JobErrorItem: JobErrorItem,
        JobStage: JobStage,
        JobStats: JobStats,
        UpdateDownloadProgress: UpdateDownloadProgress,
        UpdateInstallProgress: UpdateInstallProgress,
        ManagerExtendedInfo: ManagerExtendedInfo,
        NetworkSettings: NetworkSettings,
        NodeNetwork: NodeNetwork,
        NetworkAdapter: NetworkAdapter,
        IPConfig: IPConfig,
        SecuritySettings: SecuritySettings,
        StorageAccountCredential: StorageAccountCredential,
        StorageDomain: StorageDomain,
        TimeSettings: TimeSettings,
        Updates: Updates,
        UploadCertificateResponse: UploadCertificateResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ChapSettingsOperations. */
    var ChapSettingsOperations = /** @class */ (function () {
        /**
         * Create a ChapSettingsOperations.
         * @param {StorSimpleManagementClientContext} client Reference to the service client.
         */
        function ChapSettingsOperations(client) {
            this.client = client;
        }
        ChapSettingsOperations.prototype.listByDevice = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listByDeviceOperationSpec$2, callback);
        };
        ChapSettingsOperations.prototype.get = function (deviceName$$1, chapUserName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                chapUserName: chapUserName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getOperationSpec$4, callback);
        };
        /**
         * Creates or updates the chap setting.
         * @param deviceName The device name.
         * @param chapUserName The chap user name.
         * @param chapSetting The chap setting to be added or updated.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<Models.ChapSettingsCreateOrUpdateResponse>
         */
        ChapSettingsOperations.prototype.createOrUpdate = function (deviceName$$1, chapUserName$$1, chapSetting, resourceGroupName$$1, managerName$$1, options) {
            return this.beginCreateOrUpdate(deviceName$$1, chapUserName$$1, chapSetting, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the chap setting.
         * @param deviceName The device name.
         * @param chapUserName The chap user name.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ChapSettingsOperations.prototype.deleteMethod = function (deviceName$$1, chapUserName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.beginDeleteMethod(deviceName$$1, chapUserName$$1, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates the chap setting.
         * @param deviceName The device name.
         * @param chapUserName The chap user name.
         * @param chapSetting The chap setting to be added or updated.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ChapSettingsOperations.prototype.beginCreateOrUpdate = function (deviceName$$1, chapUserName$$1, chapSetting, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                chapUserName: chapUserName$$1,
                chapSetting: chapSetting,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginCreateOrUpdateOperationSpec$2, options);
        };
        /**
         * Deletes the chap setting.
         * @param deviceName The device name.
         * @param chapUserName The chap user name.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ChapSettingsOperations.prototype.beginDeleteMethod = function (deviceName$$1, chapUserName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                chapUserName: chapUserName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$4, options);
        };
        return ChapSettingsOperations;
    }());
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers$7);
    var listByDeviceOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/chapSettings",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ChapSettingsList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$7
    };
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/chapSettings/{chapUserName}",
        urlParameters: [
            deviceName,
            chapUserName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ChapSettings
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$7
    };
    var beginCreateOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/chapSettings/{chapUserName}",
        urlParameters: [
            deviceName,
            chapUserName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "chapSetting",
            mapper: __assign({}, ChapSettings, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ChapSettings
            },
            202: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$7
    };
    var beginDeleteMethodOperationSpec$4 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/chapSettings/{chapUserName}",
        urlParameters: [
            deviceName,
            chapUserName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$7
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$8 = /*#__PURE__*/Object.freeze({
        ISCSIDiskList: ISCSIDiskList,
        ISCSIDisk: ISCSIDisk,
        BaseModel: BaseModel,
        ErrorModel: ErrorModel,
        Message: Message,
        Item: Item,
        MetricList: MetricList,
        Metrics: Metrics,
        MetricName: MetricName,
        MetricDimension: MetricDimension,
        MetricData: MetricData,
        MetricDefinitionList: MetricDefinitionList,
        MetricDefinition: MetricDefinition,
        MetricAvailablity: MetricAvailablity,
        AccessControlRecord: AccessControlRecord,
        Alert: Alert,
        AlertSource: AlertSource,
        AlertErrorDetails: AlertErrorDetails,
        AlertSettings: AlertSettings,
        BackupElement: BackupElement,
        Backup: Backup,
        BackupScheduleGroup: BackupScheduleGroup,
        Time: Time,
        ChapSettings: ChapSettings,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        FileShare: FileShare,
        Device: Device,
        DeviceDetails: DeviceDetails,
        EncryptionSettings: EncryptionSettings,
        FileServer: FileServer,
        ISCSIServer: ISCSIServer,
        Job: Job,
        JobErrorDetails: JobErrorDetails,
        JobErrorItem: JobErrorItem,
        JobStage: JobStage,
        JobStats: JobStats,
        UpdateDownloadProgress: UpdateDownloadProgress,
        UpdateInstallProgress: UpdateInstallProgress,
        ManagerExtendedInfo: ManagerExtendedInfo,
        NetworkSettings: NetworkSettings,
        NodeNetwork: NodeNetwork,
        NetworkAdapter: NetworkAdapter,
        IPConfig: IPConfig,
        SecuritySettings: SecuritySettings,
        StorageAccountCredential: StorageAccountCredential,
        StorageDomain: StorageDomain,
        TimeSettings: TimeSettings,
        Updates: Updates,
        UploadCertificateResponse: UploadCertificateResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a IscsiDisks. */
    var IscsiDisks = /** @class */ (function () {
        /**
         * Create a IscsiDisks.
         * @param {StorSimpleManagementClientContext} client Reference to the service client.
         */
        function IscsiDisks(client) {
            this.client = client;
        }
        IscsiDisks.prototype.listByDevice = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listByDeviceOperationSpec$3, callback);
        };
        IscsiDisks.prototype.listByIscsiServer = function (deviceName$$1, iscsiServerName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                iscsiServerName: iscsiServerName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listByIscsiServerOperationSpec, callback);
        };
        IscsiDisks.prototype.get = function (deviceName$$1, iscsiServerName$$1, diskName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                iscsiServerName: iscsiServerName$$1,
                diskName: diskName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getOperationSpec$5, callback);
        };
        /**
         * Creates or updates the iscsi disk.
         * @param deviceName The device name.
         * @param iscsiServerName The iscsi server name.
         * @param diskName The disk name.
         * @param iscsiDisk The iscsi disk.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<Models.IscsiDisksCreateOrUpdateResponse>
         */
        IscsiDisks.prototype.createOrUpdate = function (deviceName$$1, iscsiServerName$$1, diskName$$1, iscsiDisk, resourceGroupName$$1, managerName$$1, options) {
            return this.beginCreateOrUpdate(deviceName$$1, iscsiServerName$$1, diskName$$1, iscsiDisk, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the iscsi disk.
         * @param deviceName The device name.
         * @param iscsiServerName The iscsi server name.
         * @param diskName The disk name.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        IscsiDisks.prototype.deleteMethod = function (deviceName$$1, iscsiServerName$$1, diskName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.beginDeleteMethod(deviceName$$1, iscsiServerName$$1, diskName$$1, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        IscsiDisks.prototype.listMetrics = function (deviceName$$1, iscsiServerName$$1, diskName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                iscsiServerName: iscsiServerName$$1,
                diskName: diskName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listMetricsOperationSpec$2, callback);
        };
        IscsiDisks.prototype.listMetricDefinition = function (deviceName$$1, iscsiServerName$$1, diskName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                iscsiServerName: iscsiServerName$$1,
                diskName: diskName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listMetricDefinitionOperationSpec$2, callback);
        };
        /**
         * Creates or updates the iscsi disk.
         * @param deviceName The device name.
         * @param iscsiServerName The iscsi server name.
         * @param diskName The disk name.
         * @param iscsiDisk The iscsi disk.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        IscsiDisks.prototype.beginCreateOrUpdate = function (deviceName$$1, iscsiServerName$$1, diskName$$1, iscsiDisk, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                iscsiServerName: iscsiServerName$$1,
                diskName: diskName$$1,
                iscsiDisk: iscsiDisk,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginCreateOrUpdateOperationSpec$3, options);
        };
        /**
         * Deletes the iscsi disk.
         * @param deviceName The device name.
         * @param iscsiServerName The iscsi server name.
         * @param diskName The disk name.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        IscsiDisks.prototype.beginDeleteMethod = function (deviceName$$1, iscsiServerName$$1, diskName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                iscsiServerName: iscsiServerName$$1,
                diskName: diskName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$5, options);
        };
        return IscsiDisks;
    }());
    // Operation Specifications
    var serializer$8 = new msRest.Serializer(Mappers$8);
    var listByDeviceOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/disks",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ISCSIDiskList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$8
    };
    var listByIscsiServerOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/iscsiservers/{iscsiServerName}/disks",
        urlParameters: [
            deviceName,
            iscsiServerName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ISCSIDiskList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$8
    };
    var getOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/iscsiservers/{iscsiServerName}/disks/{diskName}",
        urlParameters: [
            deviceName,
            iscsiServerName,
            diskName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ISCSIDisk
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$8
    };
    var listMetricsOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/iscsiservers/{iscsiServerName}/disks/{diskName}/metrics",
        urlParameters: [
            deviceName,
            iscsiServerName,
            diskName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$8
    };
    var listMetricDefinitionOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/iscsiservers/{iscsiServerName}/disks/{diskName}/metricsDefinitions",
        urlParameters: [
            deviceName,
            iscsiServerName,
            diskName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricDefinitionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$8
    };
    var beginCreateOrUpdateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/iscsiservers/{iscsiServerName}/disks/{diskName}",
        urlParameters: [
            deviceName,
            iscsiServerName,
            diskName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "iscsiDisk",
            mapper: __assign({}, ISCSIDisk, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ISCSIDisk
            },
            202: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$8
    };
    var beginDeleteMethodOperationSpec$5 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/iscsiservers/{iscsiServerName}/disks/{diskName}",
        urlParameters: [
            deviceName,
            iscsiServerName,
            diskName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$8
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$9 = /*#__PURE__*/Object.freeze({
        FileServerList: FileServerList,
        FileServer: FileServer,
        BaseModel: BaseModel,
        ErrorModel: ErrorModel,
        Message: Message,
        Item: Item,
        MetricList: MetricList,
        Metrics: Metrics,
        MetricName: MetricName,
        MetricDimension: MetricDimension,
        MetricData: MetricData,
        MetricDefinitionList: MetricDefinitionList,
        MetricDefinition: MetricDefinition,
        MetricAvailablity: MetricAvailablity,
        AccessControlRecord: AccessControlRecord,
        Alert: Alert,
        AlertSource: AlertSource,
        AlertErrorDetails: AlertErrorDetails,
        AlertSettings: AlertSettings,
        BackupElement: BackupElement,
        Backup: Backup,
        BackupScheduleGroup: BackupScheduleGroup,
        Time: Time,
        ChapSettings: ChapSettings,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        FileShare: FileShare,
        ISCSIDisk: ISCSIDisk,
        Device: Device,
        DeviceDetails: DeviceDetails,
        EncryptionSettings: EncryptionSettings,
        ISCSIServer: ISCSIServer,
        Job: Job,
        JobErrorDetails: JobErrorDetails,
        JobErrorItem: JobErrorItem,
        JobStage: JobStage,
        JobStats: JobStats,
        UpdateDownloadProgress: UpdateDownloadProgress,
        UpdateInstallProgress: UpdateInstallProgress,
        ManagerExtendedInfo: ManagerExtendedInfo,
        NetworkSettings: NetworkSettings,
        NodeNetwork: NodeNetwork,
        NetworkAdapter: NetworkAdapter,
        IPConfig: IPConfig,
        SecuritySettings: SecuritySettings,
        StorageAccountCredential: StorageAccountCredential,
        StorageDomain: StorageDomain,
        TimeSettings: TimeSettings,
        Updates: Updates,
        UploadCertificateResponse: UploadCertificateResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a FileServers. */
    var FileServers = /** @class */ (function () {
        /**
         * Create a FileServers.
         * @param {StorSimpleManagementClientContext} client Reference to the service client.
         */
        function FileServers(client) {
            this.client = client;
        }
        FileServers.prototype.listByDevice = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listByDeviceOperationSpec$4, callback);
        };
        FileServers.prototype.get = function (deviceName$$1, fileServerName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                fileServerName: fileServerName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getOperationSpec$6, callback);
        };
        /**
         * Creates or updates the file server.
         * @param deviceName The device name.
         * @param fileServerName The file server name.
         * @param fileServer The file server.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<Models.FileServersCreateOrUpdateResponse>
         */
        FileServers.prototype.createOrUpdate = function (deviceName$$1, fileServerName$$1, fileServer, resourceGroupName$$1, managerName$$1, options) {
            return this.beginCreateOrUpdate(deviceName$$1, fileServerName$$1, fileServer, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the file server.
         * @param deviceName The device name.
         * @param fileServerName The file server name.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        FileServers.prototype.deleteMethod = function (deviceName$$1, fileServerName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.beginDeleteMethod(deviceName$$1, fileServerName$$1, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Backup the file server now.
         * @param deviceName The device name.
         * @param fileServerName The file server name.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        FileServers.prototype.backupNow = function (deviceName$$1, fileServerName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.beginBackupNow(deviceName$$1, fileServerName$$1, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        FileServers.prototype.listMetrics = function (deviceName$$1, fileServerName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                fileServerName: fileServerName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listMetricsOperationSpec$3, callback);
        };
        FileServers.prototype.listMetricDefinition = function (deviceName$$1, fileServerName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                fileServerName: fileServerName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listMetricDefinitionOperationSpec$3, callback);
        };
        FileServers.prototype.listByManager = function (resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listByManagerOperationSpec$4, callback);
        };
        /**
         * Creates or updates the file server.
         * @param deviceName The device name.
         * @param fileServerName The file server name.
         * @param fileServer The file server.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        FileServers.prototype.beginCreateOrUpdate = function (deviceName$$1, fileServerName$$1, fileServer, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                fileServerName: fileServerName$$1,
                fileServer: fileServer,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginCreateOrUpdateOperationSpec$4, options);
        };
        /**
         * Deletes the file server.
         * @param deviceName The device name.
         * @param fileServerName The file server name.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        FileServers.prototype.beginDeleteMethod = function (deviceName$$1, fileServerName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                fileServerName: fileServerName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$6, options);
        };
        /**
         * Backup the file server now.
         * @param deviceName The device name.
         * @param fileServerName The file server name.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        FileServers.prototype.beginBackupNow = function (deviceName$$1, fileServerName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                fileServerName: fileServerName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginBackupNowOperationSpec, options);
        };
        return FileServers;
    }());
    // Operation Specifications
    var serializer$9 = new msRest.Serializer(Mappers$9);
    var listByDeviceOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/fileservers",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FileServerList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$9
    };
    var getOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/fileservers/{fileServerName}",
        urlParameters: [
            deviceName,
            fileServerName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FileServer
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$9
    };
    var listMetricsOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/fileservers/{fileServerName}/metrics",
        urlParameters: [
            deviceName,
            fileServerName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$9
    };
    var listMetricDefinitionOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/fileservers/{fileServerName}/metricsDefinitions",
        urlParameters: [
            deviceName,
            fileServerName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricDefinitionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$9
    };
    var listByManagerOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/fileservers",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FileServerList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$9
    };
    var beginCreateOrUpdateOperationSpec$4 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/fileservers/{fileServerName}",
        urlParameters: [
            deviceName,
            fileServerName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "fileServer",
            mapper: __assign({}, FileServer, { required: true })
        },
        responses: {
            200: {
                bodyMapper: FileServer
            },
            202: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$9
    };
    var beginDeleteMethodOperationSpec$6 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/fileservers/{fileServerName}",
        urlParameters: [
            deviceName,
            fileServerName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$9
    };
    var beginBackupNowOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/fileservers/{fileServerName}/backup",
        urlParameters: [
            deviceName,
            fileServerName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$9
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$a = /*#__PURE__*/Object.freeze({
        FileShareList: FileShareList,
        FileShare: FileShare,
        BaseModel: BaseModel,
        ErrorModel: ErrorModel,
        Message: Message,
        Item: Item,
        MetricList: MetricList,
        Metrics: Metrics,
        MetricName: MetricName,
        MetricDimension: MetricDimension,
        MetricData: MetricData,
        MetricDefinitionList: MetricDefinitionList,
        MetricDefinition: MetricDefinition,
        MetricAvailablity: MetricAvailablity,
        AccessControlRecord: AccessControlRecord,
        Alert: Alert,
        AlertSource: AlertSource,
        AlertErrorDetails: AlertErrorDetails,
        AlertSettings: AlertSettings,
        BackupElement: BackupElement,
        Backup: Backup,
        BackupScheduleGroup: BackupScheduleGroup,
        Time: Time,
        ChapSettings: ChapSettings,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        ISCSIDisk: ISCSIDisk,
        Device: Device,
        DeviceDetails: DeviceDetails,
        EncryptionSettings: EncryptionSettings,
        FileServer: FileServer,
        ISCSIServer: ISCSIServer,
        Job: Job,
        JobErrorDetails: JobErrorDetails,
        JobErrorItem: JobErrorItem,
        JobStage: JobStage,
        JobStats: JobStats,
        UpdateDownloadProgress: UpdateDownloadProgress,
        UpdateInstallProgress: UpdateInstallProgress,
        ManagerExtendedInfo: ManagerExtendedInfo,
        NetworkSettings: NetworkSettings,
        NodeNetwork: NodeNetwork,
        NetworkAdapter: NetworkAdapter,
        IPConfig: IPConfig,
        SecuritySettings: SecuritySettings,
        StorageAccountCredential: StorageAccountCredential,
        StorageDomain: StorageDomain,
        TimeSettings: TimeSettings,
        Updates: Updates,
        UploadCertificateResponse: UploadCertificateResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a FileShares. */
    var FileShares = /** @class */ (function () {
        /**
         * Create a FileShares.
         * @param {StorSimpleManagementClientContext} client Reference to the service client.
         */
        function FileShares(client) {
            this.client = client;
        }
        FileShares.prototype.listByFileServer = function (deviceName$$1, fileServerName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                fileServerName: fileServerName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listByFileServerOperationSpec, callback);
        };
        FileShares.prototype.get = function (deviceName$$1, fileServerName$$1, shareName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                fileServerName: fileServerName$$1,
                shareName: shareName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getOperationSpec$7, callback);
        };
        /**
         * Creates or updates the file share.
         * @param deviceName The device name.
         * @param fileServerName The file server name.
         * @param shareName The file share name.
         * @param fileShare The file share.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<Models.FileSharesCreateOrUpdateResponse>
         */
        FileShares.prototype.createOrUpdate = function (deviceName$$1, fileServerName$$1, shareName$$1, fileShare, resourceGroupName$$1, managerName$$1, options) {
            return this.beginCreateOrUpdate(deviceName$$1, fileServerName$$1, shareName$$1, fileShare, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the file share.
         * @param deviceName The device name.
         * @param fileServerName The file server name.
         * @param shareName The file share Name
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        FileShares.prototype.deleteMethod = function (deviceName$$1, fileServerName$$1, shareName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.beginDeleteMethod(deviceName$$1, fileServerName$$1, shareName$$1, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        FileShares.prototype.listMetrics = function (deviceName$$1, fileServerName$$1, shareName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                fileServerName: fileServerName$$1,
                shareName: shareName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listMetricsOperationSpec$4, callback);
        };
        FileShares.prototype.listMetricDefinition = function (deviceName$$1, fileServerName$$1, shareName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                fileServerName: fileServerName$$1,
                shareName: shareName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listMetricDefinitionOperationSpec$4, callback);
        };
        FileShares.prototype.listByDevice = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listByDeviceOperationSpec$5, callback);
        };
        /**
         * Creates or updates the file share.
         * @param deviceName The device name.
         * @param fileServerName The file server name.
         * @param shareName The file share name.
         * @param fileShare The file share.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        FileShares.prototype.beginCreateOrUpdate = function (deviceName$$1, fileServerName$$1, shareName$$1, fileShare, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                fileServerName: fileServerName$$1,
                shareName: shareName$$1,
                fileShare: fileShare,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginCreateOrUpdateOperationSpec$5, options);
        };
        /**
         * Deletes the file share.
         * @param deviceName The device name.
         * @param fileServerName The file server name.
         * @param shareName The file share Name
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        FileShares.prototype.beginDeleteMethod = function (deviceName$$1, fileServerName$$1, shareName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                fileServerName: fileServerName$$1,
                shareName: shareName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$7, options);
        };
        return FileShares;
    }());
    // Operation Specifications
    var serializer$a = new msRest.Serializer(Mappers$a);
    var listByFileServerOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/fileservers/{fileServerName}/shares",
        urlParameters: [
            deviceName,
            fileServerName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FileShareList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$a
    };
    var getOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/fileservers/{fileServerName}/shares/{shareName}",
        urlParameters: [
            deviceName,
            fileServerName,
            shareName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FileShare
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$a
    };
    var listMetricsOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/fileservers/{fileServerName}/shares/{shareName}/metrics",
        urlParameters: [
            deviceName,
            fileServerName,
            shareName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$a
    };
    var listMetricDefinitionOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/fileservers/{fileServerName}/shares/{shareName}/metricsDefinitions",
        urlParameters: [
            deviceName,
            fileServerName,
            shareName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricDefinitionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$a
    };
    var listByDeviceOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/shares",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FileShareList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$a
    };
    var beginCreateOrUpdateOperationSpec$5 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/fileservers/{fileServerName}/shares/{shareName}",
        urlParameters: [
            deviceName,
            fileServerName,
            shareName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "fileShare",
            mapper: __assign({}, FileShare, { required: true })
        },
        responses: {
            200: {
                bodyMapper: FileShare
            },
            202: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$a
    };
    var beginDeleteMethodOperationSpec$7 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/fileservers/{fileServerName}/shares/{shareName}",
        urlParameters: [
            deviceName,
            fileServerName,
            shareName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$a
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$b = /*#__PURE__*/Object.freeze({
        ISCSIServerList: ISCSIServerList,
        ISCSIServer: ISCSIServer,
        BaseModel: BaseModel,
        ErrorModel: ErrorModel,
        Message: Message,
        Item: Item,
        MetricList: MetricList,
        Metrics: Metrics,
        MetricName: MetricName,
        MetricDimension: MetricDimension,
        MetricData: MetricData,
        MetricDefinitionList: MetricDefinitionList,
        MetricDefinition: MetricDefinition,
        MetricAvailablity: MetricAvailablity,
        AccessControlRecord: AccessControlRecord,
        Alert: Alert,
        AlertSource: AlertSource,
        AlertErrorDetails: AlertErrorDetails,
        AlertSettings: AlertSettings,
        BackupElement: BackupElement,
        Backup: Backup,
        BackupScheduleGroup: BackupScheduleGroup,
        Time: Time,
        ChapSettings: ChapSettings,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        FileShare: FileShare,
        ISCSIDisk: ISCSIDisk,
        Device: Device,
        DeviceDetails: DeviceDetails,
        EncryptionSettings: EncryptionSettings,
        FileServer: FileServer,
        Job: Job,
        JobErrorDetails: JobErrorDetails,
        JobErrorItem: JobErrorItem,
        JobStage: JobStage,
        JobStats: JobStats,
        UpdateDownloadProgress: UpdateDownloadProgress,
        UpdateInstallProgress: UpdateInstallProgress,
        ManagerExtendedInfo: ManagerExtendedInfo,
        NetworkSettings: NetworkSettings,
        NodeNetwork: NodeNetwork,
        NetworkAdapter: NetworkAdapter,
        IPConfig: IPConfig,
        SecuritySettings: SecuritySettings,
        StorageAccountCredential: StorageAccountCredential,
        StorageDomain: StorageDomain,
        TimeSettings: TimeSettings,
        Updates: Updates,
        UploadCertificateResponse: UploadCertificateResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a IscsiServers. */
    var IscsiServers = /** @class */ (function () {
        /**
         * Create a IscsiServers.
         * @param {StorSimpleManagementClientContext} client Reference to the service client.
         */
        function IscsiServers(client) {
            this.client = client;
        }
        IscsiServers.prototype.listByDevice = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listByDeviceOperationSpec$6, callback);
        };
        IscsiServers.prototype.get = function (deviceName$$1, iscsiServerName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                iscsiServerName: iscsiServerName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getOperationSpec$8, callback);
        };
        /**
         * Creates or updates the iscsi server.
         * @param deviceName The device name.
         * @param iscsiServerName The iscsi server name.
         * @param iscsiServer The iscsi server.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<Models.IscsiServersCreateOrUpdateResponse>
         */
        IscsiServers.prototype.createOrUpdate = function (deviceName$$1, iscsiServerName$$1, iscsiServer, resourceGroupName$$1, managerName$$1, options) {
            return this.beginCreateOrUpdate(deviceName$$1, iscsiServerName$$1, iscsiServer, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the iscsi server.
         * @param deviceName The device name.
         * @param iscsiServerName The iscsi server name.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        IscsiServers.prototype.deleteMethod = function (deviceName$$1, iscsiServerName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.beginDeleteMethod(deviceName$$1, iscsiServerName$$1, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Backup the iscsi server now.
         * @param deviceName The device name.
         * @param iscsiServerName The iscsi server name.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        IscsiServers.prototype.backupNow = function (deviceName$$1, iscsiServerName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.beginBackupNow(deviceName$$1, iscsiServerName$$1, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        IscsiServers.prototype.listMetrics = function (deviceName$$1, iscsiServerName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                iscsiServerName: iscsiServerName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listMetricsOperationSpec$5, callback);
        };
        IscsiServers.prototype.listMetricDefinition = function (deviceName$$1, iscsiServerName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                iscsiServerName: iscsiServerName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listMetricDefinitionOperationSpec$5, callback);
        };
        IscsiServers.prototype.listByManager = function (resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listByManagerOperationSpec$5, callback);
        };
        /**
         * Creates or updates the iscsi server.
         * @param deviceName The device name.
         * @param iscsiServerName The iscsi server name.
         * @param iscsiServer The iscsi server.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        IscsiServers.prototype.beginCreateOrUpdate = function (deviceName$$1, iscsiServerName$$1, iscsiServer, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                iscsiServerName: iscsiServerName$$1,
                iscsiServer: iscsiServer,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginCreateOrUpdateOperationSpec$6, options);
        };
        /**
         * Deletes the iscsi server.
         * @param deviceName The device name.
         * @param iscsiServerName The iscsi server name.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        IscsiServers.prototype.beginDeleteMethod = function (deviceName$$1, iscsiServerName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                iscsiServerName: iscsiServerName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$8, options);
        };
        /**
         * Backup the iscsi server now.
         * @param deviceName The device name.
         * @param iscsiServerName The iscsi server name.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        IscsiServers.prototype.beginBackupNow = function (deviceName$$1, iscsiServerName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                iscsiServerName: iscsiServerName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginBackupNowOperationSpec$1, options);
        };
        return IscsiServers;
    }());
    // Operation Specifications
    var serializer$b = new msRest.Serializer(Mappers$b);
    var listByDeviceOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/iscsiservers",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ISCSIServerList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$b
    };
    var getOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/iscsiservers/{iscsiServerName}",
        urlParameters: [
            deviceName,
            iscsiServerName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ISCSIServer
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$b
    };
    var listMetricsOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/iscsiservers/{iscsiServerName}/metrics",
        urlParameters: [
            deviceName,
            iscsiServerName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$b
    };
    var listMetricDefinitionOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/iscsiservers/{iscsiServerName}/metricsDefinitions",
        urlParameters: [
            deviceName,
            iscsiServerName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricDefinitionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$b
    };
    var listByManagerOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/iscsiservers",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ISCSIServerList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$b
    };
    var beginCreateOrUpdateOperationSpec$6 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/iscsiservers/{iscsiServerName}",
        urlParameters: [
            deviceName,
            iscsiServerName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "iscsiServer",
            mapper: __assign({}, ISCSIServer, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ISCSIServer
            },
            202: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$b
    };
    var beginDeleteMethodOperationSpec$8 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/iscsiservers/{iscsiServerName}",
        urlParameters: [
            deviceName,
            iscsiServerName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$b
    };
    var beginBackupNowOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/iscsiservers/{iscsiServerName}/backup",
        urlParameters: [
            deviceName,
            iscsiServerName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$b
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$c = /*#__PURE__*/Object.freeze({
        JobList: JobList,
        Job: Job,
        BaseModel: BaseModel,
        JobErrorDetails: JobErrorDetails,
        JobErrorItem: JobErrorItem,
        JobStage: JobStage,
        JobStats: JobStats,
        UpdateDownloadProgress: UpdateDownloadProgress,
        UpdateInstallProgress: UpdateInstallProgress,
        ErrorModel: ErrorModel,
        Message: Message,
        Item: Item,
        AccessControlRecord: AccessControlRecord,
        Alert: Alert,
        AlertSource: AlertSource,
        AlertErrorDetails: AlertErrorDetails,
        AlertSettings: AlertSettings,
        BackupElement: BackupElement,
        Backup: Backup,
        BackupScheduleGroup: BackupScheduleGroup,
        Time: Time,
        ChapSettings: ChapSettings,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        FileShare: FileShare,
        ISCSIDisk: ISCSIDisk,
        Device: Device,
        DeviceDetails: DeviceDetails,
        EncryptionSettings: EncryptionSettings,
        FileServer: FileServer,
        ISCSIServer: ISCSIServer,
        ManagerExtendedInfo: ManagerExtendedInfo,
        NetworkSettings: NetworkSettings,
        NodeNetwork: NodeNetwork,
        NetworkAdapter: NetworkAdapter,
        IPConfig: IPConfig,
        SecuritySettings: SecuritySettings,
        StorageAccountCredential: StorageAccountCredential,
        StorageDomain: StorageDomain,
        TimeSettings: TimeSettings,
        Updates: Updates,
        UploadCertificateResponse: UploadCertificateResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Jobs. */
    var Jobs = /** @class */ (function () {
        /**
         * Create a Jobs.
         * @param {StorSimpleManagementClientContext} client Reference to the service client.
         */
        function Jobs(client) {
            this.client = client;
        }
        Jobs.prototype.listByDevice = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listByDeviceOperationSpec$7, callback);
        };
        Jobs.prototype.get = function (deviceName$$1, jobName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                jobName: jobName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getOperationSpec$9, callback);
        };
        Jobs.prototype.listByManager = function (resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listByManagerOperationSpec$6, callback);
        };
        Jobs.prototype.listByDeviceNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByDeviceNextOperationSpec$1, callback);
        };
        Jobs.prototype.listByManagerNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByManagerNextOperationSpec$2, callback);
        };
        return Jobs;
    }());
    // Operation Specifications
    var serializer$c = new msRest.Serializer(Mappers$c);
    var listByDeviceOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/jobs",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$c
    };
    var getOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/jobs/{jobName}",
        urlParameters: [
            deviceName,
            jobName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Job
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$c
    };
    var listByManagerOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/jobs",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$c
    };
    var listByDeviceNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$c
    };
    var listByManagerNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$c
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$d = /*#__PURE__*/Object.freeze({
        StorageAccountCredentialList: StorageAccountCredentialList,
        StorageAccountCredential: StorageAccountCredential,
        BaseModel: BaseModel,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        ErrorModel: ErrorModel,
        Message: Message,
        Item: Item,
        AccessControlRecord: AccessControlRecord,
        Alert: Alert,
        AlertSource: AlertSource,
        AlertErrorDetails: AlertErrorDetails,
        AlertSettings: AlertSettings,
        BackupElement: BackupElement,
        Backup: Backup,
        BackupScheduleGroup: BackupScheduleGroup,
        Time: Time,
        ChapSettings: ChapSettings,
        FileShare: FileShare,
        ISCSIDisk: ISCSIDisk,
        Device: Device,
        DeviceDetails: DeviceDetails,
        EncryptionSettings: EncryptionSettings,
        FileServer: FileServer,
        ISCSIServer: ISCSIServer,
        Job: Job,
        JobErrorDetails: JobErrorDetails,
        JobErrorItem: JobErrorItem,
        JobStage: JobStage,
        JobStats: JobStats,
        UpdateDownloadProgress: UpdateDownloadProgress,
        UpdateInstallProgress: UpdateInstallProgress,
        ManagerExtendedInfo: ManagerExtendedInfo,
        NetworkSettings: NetworkSettings,
        NodeNetwork: NodeNetwork,
        NetworkAdapter: NetworkAdapter,
        IPConfig: IPConfig,
        SecuritySettings: SecuritySettings,
        StorageDomain: StorageDomain,
        TimeSettings: TimeSettings,
        Updates: Updates,
        UploadCertificateResponse: UploadCertificateResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a StorageAccountCredentials. */
    var StorageAccountCredentials = /** @class */ (function () {
        /**
         * Create a StorageAccountCredentials.
         * @param {StorSimpleManagementClientContext} client Reference to the service client.
         */
        function StorageAccountCredentials(client) {
            this.client = client;
        }
        StorageAccountCredentials.prototype.listByManager = function (resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listByManagerOperationSpec$7, callback);
        };
        StorageAccountCredentials.prototype.get = function (credentialName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                credentialName: credentialName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getOperationSpec$a, callback);
        };
        /**
         * Creates or updates the storage account credential
         * @param credentialName The credential name.
         * @param storageAccount The storage account credential to be added or updated.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<Models.StorageAccountCredentialsCreateOrUpdateResponse>
         */
        StorageAccountCredentials.prototype.createOrUpdate = function (credentialName$$1, storageAccount, resourceGroupName$$1, managerName$$1, options) {
            return this.beginCreateOrUpdate(credentialName$$1, storageAccount, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the storage account credential
         * @param credentialName The name of the storage account credential.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        StorageAccountCredentials.prototype.deleteMethod = function (credentialName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.beginDeleteMethod(credentialName$$1, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates the storage account credential
         * @param credentialName The credential name.
         * @param storageAccount The storage account credential to be added or updated.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        StorageAccountCredentials.prototype.beginCreateOrUpdate = function (credentialName$$1, storageAccount, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                credentialName: credentialName$$1,
                storageAccount: storageAccount,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginCreateOrUpdateOperationSpec$7, options);
        };
        /**
         * Deletes the storage account credential
         * @param credentialName The name of the storage account credential.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        StorageAccountCredentials.prototype.beginDeleteMethod = function (credentialName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                credentialName: credentialName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$9, options);
        };
        return StorageAccountCredentials;
    }());
    // Operation Specifications
    var serializer$d = new msRest.Serializer(Mappers$d);
    var listByManagerOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/storageAccountCredentials",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageAccountCredentialList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$d
    };
    var getOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/storageAccountCredentials/{credentialName}",
        urlParameters: [
            credentialName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageAccountCredential
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$d
    };
    var beginCreateOrUpdateOperationSpec$7 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/storageAccountCredentials/{credentialName}",
        urlParameters: [
            credentialName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "storageAccount",
            mapper: __assign({}, StorageAccountCredential, { required: true })
        },
        responses: {
            200: {
                bodyMapper: StorageAccountCredential
            },
            202: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$d
    };
    var beginDeleteMethodOperationSpec$9 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/storageAccountCredentials/{credentialName}",
        urlParameters: [
            credentialName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$d
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$e = /*#__PURE__*/Object.freeze({
        StorageDomainList: StorageDomainList,
        StorageDomain: StorageDomain,
        BaseModel: BaseModel,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        ErrorModel: ErrorModel,
        Message: Message,
        Item: Item,
        AccessControlRecord: AccessControlRecord,
        Alert: Alert,
        AlertSource: AlertSource,
        AlertErrorDetails: AlertErrorDetails,
        AlertSettings: AlertSettings,
        BackupElement: BackupElement,
        Backup: Backup,
        BackupScheduleGroup: BackupScheduleGroup,
        Time: Time,
        ChapSettings: ChapSettings,
        FileShare: FileShare,
        ISCSIDisk: ISCSIDisk,
        Device: Device,
        DeviceDetails: DeviceDetails,
        EncryptionSettings: EncryptionSettings,
        FileServer: FileServer,
        ISCSIServer: ISCSIServer,
        Job: Job,
        JobErrorDetails: JobErrorDetails,
        JobErrorItem: JobErrorItem,
        JobStage: JobStage,
        JobStats: JobStats,
        UpdateDownloadProgress: UpdateDownloadProgress,
        UpdateInstallProgress: UpdateInstallProgress,
        ManagerExtendedInfo: ManagerExtendedInfo,
        NetworkSettings: NetworkSettings,
        NodeNetwork: NodeNetwork,
        NetworkAdapter: NetworkAdapter,
        IPConfig: IPConfig,
        SecuritySettings: SecuritySettings,
        StorageAccountCredential: StorageAccountCredential,
        TimeSettings: TimeSettings,
        Updates: Updates,
        UploadCertificateResponse: UploadCertificateResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a StorageDomains. */
    var StorageDomains = /** @class */ (function () {
        /**
         * Create a StorageDomains.
         * @param {StorSimpleManagementClientContext} client Reference to the service client.
         */
        function StorageDomains(client) {
            this.client = client;
        }
        StorageDomains.prototype.listByManager = function (resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listByManagerOperationSpec$8, callback);
        };
        StorageDomains.prototype.get = function (storageDomainName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                storageDomainName: storageDomainName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getOperationSpec$b, callback);
        };
        /**
         * Creates or updates the storage domain.
         * @param storageDomainName The storage domain name.
         * @param storageDomain The storageDomain.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<Models.StorageDomainsCreateOrUpdateResponse>
         */
        StorageDomains.prototype.createOrUpdate = function (storageDomainName$$1, storageDomain, resourceGroupName$$1, managerName$$1, options) {
            return this.beginCreateOrUpdate(storageDomainName$$1, storageDomain, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the storage domain.
         * @param storageDomainName The storage domain name.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        StorageDomains.prototype.deleteMethod = function (storageDomainName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.beginDeleteMethod(storageDomainName$$1, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates the storage domain.
         * @param storageDomainName The storage domain name.
         * @param storageDomain The storageDomain.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        StorageDomains.prototype.beginCreateOrUpdate = function (storageDomainName$$1, storageDomain, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                storageDomainName: storageDomainName$$1,
                storageDomain: storageDomain,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginCreateOrUpdateOperationSpec$8, options);
        };
        /**
         * Deletes the storage domain.
         * @param storageDomainName The storage domain name.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        StorageDomains.prototype.beginDeleteMethod = function (storageDomainName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                storageDomainName: storageDomainName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$a, options);
        };
        return StorageDomains;
    }());
    // Operation Specifications
    var serializer$e = new msRest.Serializer(Mappers$e);
    var listByManagerOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/storageDomains",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageDomainList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$e
    };
    var getOperationSpec$b = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/storageDomains/{storageDomainName}",
        urlParameters: [
            storageDomainName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageDomain
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$e
    };
    var beginCreateOrUpdateOperationSpec$8 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/storageDomains/{storageDomainName}",
        urlParameters: [
            storageDomainName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "storageDomain",
            mapper: __assign({}, StorageDomain, { required: true })
        },
        responses: {
            200: {
                bodyMapper: StorageDomain
            },
            202: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$e
    };
    var beginDeleteMethodOperationSpec$a = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/storageDomains/{storageDomainName}",
        urlParameters: [
            storageDomainName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$e
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-storsimple1200series";
    var packageVersion = "1.0.0";
    var StorSimpleManagementClientContext = /** @class */ (function (_super) {
        __extends(StorSimpleManagementClientContext, _super);
        /**
         * Initializes a new instance of the StorSimpleManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The subscription id
         * @param [options] The parameter options
         */
        function StorSimpleManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2016-10-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return StorSimpleManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var StorSimpleManagementClient = /** @class */ (function (_super) {
        __extends(StorSimpleManagementClient, _super);
        /**
         * Initializes a new instance of the StorSimpleManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The subscription id
         * @param [options] The parameter options
         */
        function StorSimpleManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.managers = new Managers(_this);
            _this.availableProviderOperations = new AvailableProviderOperationsOperations(_this);
            _this.accessControlRecords = new AccessControlRecords(_this);
            _this.alerts = new Alerts(_this);
            _this.backups = new Backups(_this);
            _this.devices = new Devices(_this);
            _this.backupScheduleGroups = new BackupScheduleGroups(_this);
            _this.chapSettings = new ChapSettingsOperations(_this);
            _this.iscsiDisks = new IscsiDisks(_this);
            _this.fileServers = new FileServers(_this);
            _this.fileShares = new FileShares(_this);
            _this.iscsiServers = new IscsiServers(_this);
            _this.jobs = new Jobs(_this);
            _this.storageAccountCredentials = new StorageAccountCredentials(_this);
            _this.storageDomains = new StorageDomains(_this);
            return _this;
        }
        return StorSimpleManagementClient;
    }(StorSimpleManagementClientContext));

    exports.StorSimpleManagementClient = StorSimpleManagementClient;
    exports.StorSimpleManagementClientContext = StorSimpleManagementClientContext;
    exports.StorSimpleManagementModels = index;
    exports.StorSimpleManagementMappers = mappers;
    exports.Managers = Managers;
    exports.AvailableProviderOperationsOperations = AvailableProviderOperationsOperations;
    exports.AccessControlRecords = AccessControlRecords;
    exports.Alerts = Alerts;
    exports.Backups = Backups;
    exports.Devices = Devices;
    exports.BackupScheduleGroups = BackupScheduleGroups;
    exports.ChapSettingsOperations = ChapSettingsOperations;
    exports.IscsiDisks = IscsiDisks;
    exports.FileServers = FileServers;
    exports.FileShares = FileShares;
    exports.IscsiServers = IscsiServers;
    exports.Jobs = Jobs;
    exports.StorageAccountCredentials = StorageAccountCredentials;
    exports.StorageDomains = StorageDomains;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-storsimple1200series.js.map
