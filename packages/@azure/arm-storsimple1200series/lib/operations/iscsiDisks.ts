/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/iscsiDisksMappers";
import * as Parameters from "../models/parameters";
import { StorSimpleManagementClientContext } from "../storSimpleManagementClientContext";

/** Class representing a IscsiDisks. */
export class IscsiDisks {
  private readonly client: StorSimpleManagementClientContext;

  /**
   * Create a IscsiDisks.
   * @param {StorSimpleManagementClientContext} client Reference to the service client.
   */
  constructor(client: StorSimpleManagementClientContext) {
    this.client = client;
  }

  /**
   * Retrieves all the iscsi disks in a device.
   * @param deviceName The device name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param [options] The optional parameters
   * @returns Promise<Models.IscsiDisksListByDeviceResponse>
   */
  listByDevice(deviceName: string, resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase): Promise<Models.IscsiDisksListByDeviceResponse>;
  /**
   * @param deviceName The device name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param callback The callback
   */
  listByDevice(deviceName: string, resourceGroupName: string, managerName: string, callback: msRest.ServiceCallback<Models.ISCSIDiskList>): void;
  /**
   * @param deviceName The device name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The optional parameters
   * @param callback The callback
   */
  listByDevice(deviceName: string, resourceGroupName: string, managerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ISCSIDiskList>): void;
  listByDevice(deviceName: string, resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ISCSIDiskList>, callback?: msRest.ServiceCallback<Models.ISCSIDiskList>): Promise<Models.IscsiDisksListByDeviceResponse> {
    return this.client.sendOperationRequest(
      {
        deviceName,
        resourceGroupName,
        managerName,
        options
      },
      listByDeviceOperationSpec,
      callback) as Promise<Models.IscsiDisksListByDeviceResponse>;
  }

  /**
   * Retrieves all the disks in a iscsi server.
   * @param deviceName The device name.
   * @param iscsiServerName The iscsi server name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param [options] The optional parameters
   * @returns Promise<Models.IscsiDisksListByIscsiServerResponse>
   */
  listByIscsiServer(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase): Promise<Models.IscsiDisksListByIscsiServerResponse>;
  /**
   * @param deviceName The device name.
   * @param iscsiServerName The iscsi server name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param callback The callback
   */
  listByIscsiServer(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, callback: msRest.ServiceCallback<Models.ISCSIDiskList>): void;
  /**
   * @param deviceName The device name.
   * @param iscsiServerName The iscsi server name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The optional parameters
   * @param callback The callback
   */
  listByIscsiServer(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ISCSIDiskList>): void;
  listByIscsiServer(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ISCSIDiskList>, callback?: msRest.ServiceCallback<Models.ISCSIDiskList>): Promise<Models.IscsiDisksListByIscsiServerResponse> {
    return this.client.sendOperationRequest(
      {
        deviceName,
        iscsiServerName,
        resourceGroupName,
        managerName,
        options
      },
      listByIscsiServerOperationSpec,
      callback) as Promise<Models.IscsiDisksListByIscsiServerResponse>;
  }

  /**
   * Returns the properties of the specified iscsi disk name.
   * @param deviceName The device name.
   * @param iscsiServerName The iscsi server name.
   * @param diskName The disk name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param [options] The optional parameters
   * @returns Promise<Models.IscsiDisksGetResponse>
   */
  get(deviceName: string, iscsiServerName: string, diskName: string, resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase): Promise<Models.IscsiDisksGetResponse>;
  /**
   * @param deviceName The device name.
   * @param iscsiServerName The iscsi server name.
   * @param diskName The disk name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param callback The callback
   */
  get(deviceName: string, iscsiServerName: string, diskName: string, resourceGroupName: string, managerName: string, callback: msRest.ServiceCallback<Models.ISCSIDisk>): void;
  /**
   * @param deviceName The device name.
   * @param iscsiServerName The iscsi server name.
   * @param diskName The disk name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The optional parameters
   * @param callback The callback
   */
  get(deviceName: string, iscsiServerName: string, diskName: string, resourceGroupName: string, managerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ISCSIDisk>): void;
  get(deviceName: string, iscsiServerName: string, diskName: string, resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ISCSIDisk>, callback?: msRest.ServiceCallback<Models.ISCSIDisk>): Promise<Models.IscsiDisksGetResponse> {
    return this.client.sendOperationRequest(
      {
        deviceName,
        iscsiServerName,
        diskName,
        resourceGroupName,
        managerName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.IscsiDisksGetResponse>;
  }

  /**
   * Creates or updates the iscsi disk.
   * @param deviceName The device name.
   * @param iscsiServerName The iscsi server name.
   * @param diskName The disk name.
   * @param iscsiDisk The iscsi disk.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param [options] The optional parameters
   * @returns Promise<Models.IscsiDisksCreateOrUpdateResponse>
   */
  createOrUpdate(deviceName: string, iscsiServerName: string, diskName: string, iscsiDisk: Models.ISCSIDisk, resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase): Promise<Models.IscsiDisksCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(deviceName,iscsiServerName,diskName,iscsiDisk,resourceGroupName,managerName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.IscsiDisksCreateOrUpdateResponse>;
  }

  /**
   * Deletes the iscsi disk.
   * @param deviceName The device name.
   * @param iscsiServerName The iscsi server name.
   * @param diskName The disk name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(deviceName: string, iscsiServerName: string, diskName: string, resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(deviceName,iscsiServerName,diskName,resourceGroupName,managerName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Gets the iscsi disk metrics
   * @param deviceName The device name.
   * @param iscsiServerName The iscsi server name.
   * @param diskName The iscsi disk name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param [options] The optional parameters
   * @returns Promise<Models.IscsiDisksListMetricsResponse>
   */
  listMetrics(deviceName: string, iscsiServerName: string, diskName: string, resourceGroupName: string, managerName: string, options?: Models.IscsiDisksListMetricsOptionalParams): Promise<Models.IscsiDisksListMetricsResponse>;
  /**
   * @param deviceName The device name.
   * @param iscsiServerName The iscsi server name.
   * @param diskName The iscsi disk name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param callback The callback
   */
  listMetrics(deviceName: string, iscsiServerName: string, diskName: string, resourceGroupName: string, managerName: string, callback: msRest.ServiceCallback<Models.MetricList>): void;
  /**
   * @param deviceName The device name.
   * @param iscsiServerName The iscsi server name.
   * @param diskName The iscsi disk name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The optional parameters
   * @param callback The callback
   */
  listMetrics(deviceName: string, iscsiServerName: string, diskName: string, resourceGroupName: string, managerName: string, options: Models.IscsiDisksListMetricsOptionalParams, callback: msRest.ServiceCallback<Models.MetricList>): void;
  listMetrics(deviceName: string, iscsiServerName: string, diskName: string, resourceGroupName: string, managerName: string, options?: Models.IscsiDisksListMetricsOptionalParams | msRest.ServiceCallback<Models.MetricList>, callback?: msRest.ServiceCallback<Models.MetricList>): Promise<Models.IscsiDisksListMetricsResponse> {
    return this.client.sendOperationRequest(
      {
        deviceName,
        iscsiServerName,
        diskName,
        resourceGroupName,
        managerName,
        options
      },
      listMetricsOperationSpec,
      callback) as Promise<Models.IscsiDisksListMetricsResponse>;
  }

  /**
   * Retrieves metric definitions for all metric aggregated at the iscsi disk.
   * @param deviceName The device name.
   * @param iscsiServerName The iscsi server name.
   * @param diskName The iscsi disk name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param [options] The optional parameters
   * @returns Promise<Models.IscsiDisksListMetricDefinitionResponse>
   */
  listMetricDefinition(deviceName: string, iscsiServerName: string, diskName: string, resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase): Promise<Models.IscsiDisksListMetricDefinitionResponse>;
  /**
   * @param deviceName The device name.
   * @param iscsiServerName The iscsi server name.
   * @param diskName The iscsi disk name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param callback The callback
   */
  listMetricDefinition(deviceName: string, iscsiServerName: string, diskName: string, resourceGroupName: string, managerName: string, callback: msRest.ServiceCallback<Models.MetricDefinitionList>): void;
  /**
   * @param deviceName The device name.
   * @param iscsiServerName The iscsi server name.
   * @param diskName The iscsi disk name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The optional parameters
   * @param callback The callback
   */
  listMetricDefinition(deviceName: string, iscsiServerName: string, diskName: string, resourceGroupName: string, managerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MetricDefinitionList>): void;
  listMetricDefinition(deviceName: string, iscsiServerName: string, diskName: string, resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MetricDefinitionList>, callback?: msRest.ServiceCallback<Models.MetricDefinitionList>): Promise<Models.IscsiDisksListMetricDefinitionResponse> {
    return this.client.sendOperationRequest(
      {
        deviceName,
        iscsiServerName,
        diskName,
        resourceGroupName,
        managerName,
        options
      },
      listMetricDefinitionOperationSpec,
      callback) as Promise<Models.IscsiDisksListMetricDefinitionResponse>;
  }

  /**
   * Creates or updates the iscsi disk.
   * @param deviceName The device name.
   * @param iscsiServerName The iscsi server name.
   * @param diskName The disk name.
   * @param iscsiDisk The iscsi disk.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(deviceName: string, iscsiServerName: string, diskName: string, iscsiDisk: Models.ISCSIDisk, resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        deviceName,
        iscsiServerName,
        diskName,
        iscsiDisk,
        resourceGroupName,
        managerName,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Deletes the iscsi disk.
   * @param deviceName The device name.
   * @param iscsiServerName The iscsi server name.
   * @param diskName The disk name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(deviceName: string, iscsiServerName: string, diskName: string, resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        deviceName,
        iscsiServerName,
        diskName,
        resourceGroupName,
        managerName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByDeviceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/disks",
  urlParameters: [
    Parameters.deviceName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ISCSIDiskList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const listByIscsiServerOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/iscsiservers/{iscsiServerName}/disks",
  urlParameters: [
    Parameters.deviceName,
    Parameters.iscsiServerName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ISCSIDiskList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/iscsiservers/{iscsiServerName}/disks/{diskName}",
  urlParameters: [
    Parameters.deviceName,
    Parameters.iscsiServerName,
    Parameters.diskName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ISCSIDisk
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const listMetricsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/iscsiservers/{iscsiServerName}/disks/{diskName}/metrics",
  urlParameters: [
    Parameters.deviceName,
    Parameters.iscsiServerName,
    Parameters.diskName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MetricList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const listMetricDefinitionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/iscsiservers/{iscsiServerName}/disks/{diskName}/metricsDefinitions",
  urlParameters: [
    Parameters.deviceName,
    Parameters.iscsiServerName,
    Parameters.diskName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MetricDefinitionList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/iscsiservers/{iscsiServerName}/disks/{diskName}",
  urlParameters: [
    Parameters.deviceName,
    Parameters.iscsiServerName,
    Parameters.diskName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "iscsiDisk",
    mapper: {
      ...Mappers.ISCSIDisk,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ISCSIDisk
    },
    202: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/iscsiservers/{iscsiServerName}/disks/{diskName}",
  urlParameters: [
    Parameters.deviceName,
    Parameters.iscsiServerName,
    Parameters.diskName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
