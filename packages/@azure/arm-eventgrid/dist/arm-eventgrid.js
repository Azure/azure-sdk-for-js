/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmEventgrid = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for EventSubscriptionProvisioningState.
     * Possible values include: 'Creating', 'Updating', 'Deleting', 'Succeeded',
     * 'Canceled', 'Failed', 'AwaitingManualAction'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: EventSubscriptionProvisioningState =
     * <EventSubscriptionProvisioningState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var EventSubscriptionProvisioningState;
    (function (EventSubscriptionProvisioningState) {
        EventSubscriptionProvisioningState["Creating"] = "Creating";
        EventSubscriptionProvisioningState["Updating"] = "Updating";
        EventSubscriptionProvisioningState["Deleting"] = "Deleting";
        EventSubscriptionProvisioningState["Succeeded"] = "Succeeded";
        EventSubscriptionProvisioningState["Canceled"] = "Canceled";
        EventSubscriptionProvisioningState["Failed"] = "Failed";
        EventSubscriptionProvisioningState["AwaitingManualAction"] = "AwaitingManualAction";
    })(EventSubscriptionProvisioningState || (EventSubscriptionProvisioningState = {}));
    /**
     * Defines values for EventDeliverySchema.
     * Possible values include: 'EventGridSchema', 'InputEventSchema',
     * 'CloudEventV01Schema'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: EventDeliverySchema =
     * <EventDeliverySchema>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var EventDeliverySchema;
    (function (EventDeliverySchema) {
        EventDeliverySchema["EventGridSchema"] = "EventGridSchema";
        EventDeliverySchema["InputEventSchema"] = "InputEventSchema";
        EventDeliverySchema["CloudEventV01Schema"] = "CloudEventV01Schema";
    })(EventDeliverySchema || (EventDeliverySchema = {}));
    /**
     * Defines values for TopicProvisioningState.
     * Possible values include: 'Creating', 'Updating', 'Deleting', 'Succeeded',
     * 'Canceled', 'Failed'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: TopicProvisioningState =
     * <TopicProvisioningState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var TopicProvisioningState;
    (function (TopicProvisioningState) {
        TopicProvisioningState["Creating"] = "Creating";
        TopicProvisioningState["Updating"] = "Updating";
        TopicProvisioningState["Deleting"] = "Deleting";
        TopicProvisioningState["Succeeded"] = "Succeeded";
        TopicProvisioningState["Canceled"] = "Canceled";
        TopicProvisioningState["Failed"] = "Failed";
    })(TopicProvisioningState || (TopicProvisioningState = {}));
    /**
     * Defines values for InputSchema.
     * Possible values include: 'EventGridSchema', 'CustomEventSchema',
     * 'CloudEventV01Schema'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: InputSchema =
     * <InputSchema>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var InputSchema;
    (function (InputSchema) {
        InputSchema["EventGridSchema"] = "EventGridSchema";
        InputSchema["CustomEventSchema"] = "CustomEventSchema";
        InputSchema["CloudEventV01Schema"] = "CloudEventV01Schema";
    })(InputSchema || (InputSchema = {}));
    /**
     * Defines values for ResourceRegionType.
     * Possible values include: 'RegionalResource', 'GlobalResource'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ResourceRegionType =
     * <ResourceRegionType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ResourceRegionType;
    (function (ResourceRegionType) {
        ResourceRegionType["RegionalResource"] = "RegionalResource";
        ResourceRegionType["GlobalResource"] = "GlobalResource";
    })(ResourceRegionType || (ResourceRegionType = {}));
    /**
     * Defines values for TopicTypeProvisioningState.
     * Possible values include: 'Creating', 'Updating', 'Deleting', 'Succeeded',
     * 'Canceled', 'Failed'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: TopicTypeProvisioningState =
     * <TopicTypeProvisioningState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var TopicTypeProvisioningState;
    (function (TopicTypeProvisioningState) {
        TopicTypeProvisioningState["Creating"] = "Creating";
        TopicTypeProvisioningState["Updating"] = "Updating";
        TopicTypeProvisioningState["Deleting"] = "Deleting";
        TopicTypeProvisioningState["Succeeded"] = "Succeeded";
        TopicTypeProvisioningState["Canceled"] = "Canceled";
        TopicTypeProvisioningState["Failed"] = "Failed";
    })(TopicTypeProvisioningState || (TopicTypeProvisioningState = {}));

    var index = /*#__PURE__*/Object.freeze({
        get EventSubscriptionProvisioningState () { return EventSubscriptionProvisioningState; },
        get EventDeliverySchema () { return EventDeliverySchema; },
        get TopicProvisioningState () { return TopicProvisioningState; },
        get InputSchema () { return InputSchema; },
        get ResourceRegionType () { return ResourceRegionType; },
        get TopicTypeProvisioningState () { return TopicTypeProvisioningState; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var EventSubscriptionDestination = {
        serializedName: "EventSubscriptionDestination",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "endpointType",
                clientName: "endpointType"
            },
            uberParent: "EventSubscriptionDestination",
            className: "EventSubscriptionDestination",
            modelProperties: {
                endpointType: {
                    required: true,
                    serializedName: "endpointType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventSubscriptionFilter = {
        serializedName: "EventSubscriptionFilter",
        type: {
            name: "Composite",
            className: "EventSubscriptionFilter",
            modelProperties: {
                subjectBeginsWith: {
                    serializedName: "subjectBeginsWith",
                    type: {
                        name: "String"
                    }
                },
                subjectEndsWith: {
                    serializedName: "subjectEndsWith",
                    type: {
                        name: "String"
                    }
                },
                includedEventTypes: {
                    serializedName: "includedEventTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                isSubjectCaseSensitive: {
                    serializedName: "isSubjectCaseSensitive",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var RetryPolicy = {
        serializedName: "RetryPolicy",
        type: {
            name: "Composite",
            className: "RetryPolicy",
            modelProperties: {
                maxDeliveryAttempts: {
                    serializedName: "maxDeliveryAttempts",
                    type: {
                        name: "Number"
                    }
                },
                eventTimeToLiveInMinutes: {
                    serializedName: "eventTimeToLiveInMinutes",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var DeadLetterDestination = {
        serializedName: "DeadLetterDestination",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "endpointType",
                clientName: "endpointType"
            },
            uberParent: "DeadLetterDestination",
            className: "DeadLetterDestination",
            modelProperties: {
                endpointType: {
                    required: true,
                    serializedName: "endpointType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventSubscriptionProperties = {
        serializedName: "EventSubscriptionProperties",
        type: {
            name: "Composite",
            className: "EventSubscriptionProperties",
            modelProperties: {
                topic: {
                    readOnly: true,
                    serializedName: "topic",
                    type: {
                        name: "String"
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                destination: {
                    serializedName: "destination",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "endpointType",
                            clientName: "endpointType"
                        },
                        uberParent: "EventSubscriptionDestination",
                        className: "EventSubscriptionDestination"
                    }
                },
                filter: {
                    serializedName: "filter",
                    type: {
                        name: "Composite",
                        className: "EventSubscriptionFilter"
                    }
                },
                labels: {
                    serializedName: "labels",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                eventDeliverySchema: {
                    serializedName: "eventDeliverySchema",
                    defaultValue: 'InputEventSchema',
                    type: {
                        name: "String"
                    }
                },
                retryPolicy: {
                    serializedName: "retryPolicy",
                    type: {
                        name: "Composite",
                        className: "RetryPolicy"
                    }
                },
                deadLetterDestination: {
                    serializedName: "deadLetterDestination",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "endpointType",
                            clientName: "endpointType"
                        },
                        uberParent: "DeadLetterDestination",
                        className: "DeadLetterDestination"
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WebHookEventSubscriptionDestinationProperties = {
        serializedName: "WebHookEventSubscriptionDestinationProperties",
        type: {
            name: "Composite",
            className: "WebHookEventSubscriptionDestinationProperties",
            modelProperties: {
                endpointUrl: {
                    serializedName: "endpointUrl",
                    type: {
                        name: "String"
                    }
                },
                endpointBaseUrl: {
                    readOnly: true,
                    serializedName: "endpointBaseUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StorageBlobDeadLetterDestinationProperties = {
        serializedName: "StorageBlobDeadLetterDestinationProperties",
        type: {
            name: "Composite",
            className: "StorageBlobDeadLetterDestinationProperties",
            modelProperties: {
                resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                },
                blobContainerName: {
                    serializedName: "blobContainerName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StorageBlobDeadLetterDestination = {
        serializedName: "StorageBlob",
        type: {
            name: "Composite",
            polymorphicDiscriminator: DeadLetterDestination.type.polymorphicDiscriminator,
            uberParent: "DeadLetterDestination",
            className: "StorageBlobDeadLetterDestination",
            modelProperties: __assign({}, DeadLetterDestination.type.modelProperties, { resourceId: {
                    serializedName: "properties.resourceId",
                    type: {
                        name: "String"
                    }
                }, blobContainerName: {
                    serializedName: "properties.blobContainerName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var WebHookEventSubscriptionDestination = {
        serializedName: "WebHook",
        type: {
            name: "Composite",
            polymorphicDiscriminator: EventSubscriptionDestination.type.polymorphicDiscriminator,
            uberParent: "EventSubscriptionDestination",
            className: "WebHookEventSubscriptionDestination",
            modelProperties: __assign({}, EventSubscriptionDestination.type.modelProperties, { endpointUrl: {
                    serializedName: "properties.endpointUrl",
                    type: {
                        name: "String"
                    }
                }, endpointBaseUrl: {
                    readOnly: true,
                    serializedName: "properties.endpointBaseUrl",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var EventHubEventSubscriptionDestinationProperties = {
        serializedName: "EventHubEventSubscriptionDestinationProperties",
        type: {
            name: "Composite",
            className: "EventHubEventSubscriptionDestinationProperties",
            modelProperties: {
                resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventHubEventSubscriptionDestination = {
        serializedName: "EventHub",
        type: {
            name: "Composite",
            polymorphicDiscriminator: EventSubscriptionDestination.type.polymorphicDiscriminator,
            uberParent: "EventSubscriptionDestination",
            className: "EventHubEventSubscriptionDestination",
            modelProperties: __assign({}, EventSubscriptionDestination.type.modelProperties, { resourceId: {
                    serializedName: "properties.resourceId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var StorageQueueEventSubscriptionDestinationProperties = {
        serializedName: "StorageQueueEventSubscriptionDestinationProperties",
        type: {
            name: "Composite",
            className: "StorageQueueEventSubscriptionDestinationProperties",
            modelProperties: {
                resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                },
                queueName: {
                    serializedName: "queueName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StorageQueueEventSubscriptionDestination = {
        serializedName: "StorageQueue",
        type: {
            name: "Composite",
            polymorphicDiscriminator: EventSubscriptionDestination.type.polymorphicDiscriminator,
            uberParent: "EventSubscriptionDestination",
            className: "StorageQueueEventSubscriptionDestination",
            modelProperties: __assign({}, EventSubscriptionDestination.type.modelProperties, { resourceId: {
                    serializedName: "properties.resourceId",
                    type: {
                        name: "String"
                    }
                }, queueName: {
                    serializedName: "properties.queueName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var HybridConnectionEventSubscriptionDestinationProperties = {
        serializedName: "HybridConnectionEventSubscriptionDestinationProperties",
        type: {
            name: "Composite",
            className: "HybridConnectionEventSubscriptionDestinationProperties",
            modelProperties: {
                resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HybridConnectionEventSubscriptionDestination = {
        serializedName: "HybridConnection",
        type: {
            name: "Composite",
            polymorphicDiscriminator: EventSubscriptionDestination.type.polymorphicDiscriminator,
            uberParent: "EventSubscriptionDestination",
            className: "HybridConnectionEventSubscriptionDestination",
            modelProperties: __assign({}, EventSubscriptionDestination.type.modelProperties, { resourceId: {
                    serializedName: "properties.resourceId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var EventSubscription = {
        serializedName: "EventSubscription",
        type: {
            name: "Composite",
            className: "EventSubscription",
            modelProperties: __assign({}, Resource.type.modelProperties, { topic: {
                    readOnly: true,
                    serializedName: "properties.topic",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, destination: {
                    serializedName: "properties.destination",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "endpointType",
                            clientName: "endpointType"
                        },
                        uberParent: "EventSubscriptionDestination",
                        className: "EventSubscriptionDestination"
                    }
                }, filter: {
                    serializedName: "properties.filter",
                    type: {
                        name: "Composite",
                        className: "EventSubscriptionFilter"
                    }
                }, labels: {
                    serializedName: "properties.labels",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, eventDeliverySchema: {
                    serializedName: "properties.eventDeliverySchema",
                    defaultValue: 'InputEventSchema',
                    type: {
                        name: "String"
                    }
                }, retryPolicy: {
                    serializedName: "properties.retryPolicy",
                    type: {
                        name: "Composite",
                        className: "RetryPolicy"
                    }
                }, deadLetterDestination: {
                    serializedName: "properties.deadLetterDestination",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "endpointType",
                            clientName: "endpointType"
                        },
                        uberParent: "DeadLetterDestination",
                        className: "DeadLetterDestination"
                    }
                } })
        }
    };
    var EventSubscriptionUpdateParameters = {
        serializedName: "EventSubscriptionUpdateParameters",
        type: {
            name: "Composite",
            className: "EventSubscriptionUpdateParameters",
            modelProperties: {
                destination: {
                    serializedName: "destination",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "endpointType",
                            clientName: "endpointType"
                        },
                        uberParent: "EventSubscriptionDestination",
                        className: "EventSubscriptionDestination"
                    }
                },
                filter: {
                    serializedName: "filter",
                    type: {
                        name: "Composite",
                        className: "EventSubscriptionFilter"
                    }
                },
                labels: {
                    serializedName: "labels",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                eventDeliverySchema: {
                    serializedName: "eventDeliverySchema",
                    type: {
                        name: "String"
                    }
                },
                retryPolicy: {
                    serializedName: "retryPolicy",
                    type: {
                        name: "Composite",
                        className: "RetryPolicy"
                    }
                },
                deadLetterDestination: {
                    serializedName: "deadLetterDestination",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "endpointType",
                            clientName: "endpointType"
                        },
                        uberParent: "DeadLetterDestination",
                        className: "DeadLetterDestination"
                    }
                }
            }
        }
    };
    var EventSubscriptionFullUrl = {
        serializedName: "EventSubscriptionFullUrl",
        type: {
            name: "Composite",
            className: "EventSubscriptionFullUrl",
            modelProperties: {
                endpointUrl: {
                    serializedName: "endpointUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationInfo = {
        serializedName: "OperationInfo",
        type: {
            name: "Composite",
            className: "OperationInfo",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationInfo"
                    }
                },
                origin: {
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var InputSchemaMapping = {
        serializedName: "InputSchemaMapping",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "inputSchemaMappingType",
                clientName: "inputSchemaMappingType"
            },
            uberParent: "InputSchemaMapping",
            className: "InputSchemaMapping",
            modelProperties: {
                inputSchemaMappingType: {
                    required: true,
                    serializedName: "inputSchemaMappingType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TopicProperties = {
        serializedName: "TopicProperties",
        type: {
            name: "Composite",
            className: "TopicProperties",
            modelProperties: {
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                endpoint: {
                    readOnly: true,
                    serializedName: "endpoint",
                    type: {
                        name: "String"
                    }
                },
                inputSchema: {
                    serializedName: "inputSchema",
                    defaultValue: 'EventGridSchema',
                    type: {
                        name: "String"
                    }
                },
                inputSchemaMapping: {
                    serializedName: "inputSchemaMapping",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "inputSchemaMappingType",
                            clientName: "inputSchemaMappingType"
                        },
                        uberParent: "InputSchemaMapping",
                        className: "InputSchemaMapping"
                    }
                }
            }
        }
    };
    var JsonField = {
        serializedName: "JsonField",
        type: {
            name: "Composite",
            className: "JsonField",
            modelProperties: {
                sourceField: {
                    serializedName: "sourceField",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JsonFieldWithDefault = {
        serializedName: "JsonFieldWithDefault",
        type: {
            name: "Composite",
            className: "JsonFieldWithDefault",
            modelProperties: {
                sourceField: {
                    serializedName: "sourceField",
                    type: {
                        name: "String"
                    }
                },
                defaultValue: {
                    serializedName: "defaultValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JsonInputSchemaMappingProperties = {
        serializedName: "JsonInputSchemaMappingProperties",
        type: {
            name: "Composite",
            className: "JsonInputSchemaMappingProperties",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "Composite",
                        className: "JsonField"
                    }
                },
                topic: {
                    serializedName: "topic",
                    type: {
                        name: "Composite",
                        className: "JsonField"
                    }
                },
                eventTime: {
                    serializedName: "eventTime",
                    type: {
                        name: "Composite",
                        className: "JsonField"
                    }
                },
                eventType: {
                    serializedName: "eventType",
                    type: {
                        name: "Composite",
                        className: "JsonFieldWithDefault"
                    }
                },
                subject: {
                    serializedName: "subject",
                    type: {
                        name: "Composite",
                        className: "JsonFieldWithDefault"
                    }
                },
                dataVersion: {
                    serializedName: "dataVersion",
                    type: {
                        name: "Composite",
                        className: "JsonFieldWithDefault"
                    }
                }
            }
        }
    };
    var JsonInputSchemaMapping = {
        serializedName: "Json",
        type: {
            name: "Composite",
            polymorphicDiscriminator: InputSchemaMapping.type.polymorphicDiscriminator,
            uberParent: "InputSchemaMapping",
            className: "JsonInputSchemaMapping",
            modelProperties: __assign({}, InputSchemaMapping.type.modelProperties, { id: {
                    serializedName: "properties.id",
                    type: {
                        name: "Composite",
                        className: "JsonField"
                    }
                }, topic: {
                    serializedName: "properties.topic",
                    type: {
                        name: "Composite",
                        className: "JsonField"
                    }
                }, eventTime: {
                    serializedName: "properties.eventTime",
                    type: {
                        name: "Composite",
                        className: "JsonField"
                    }
                }, eventType: {
                    serializedName: "properties.eventType",
                    type: {
                        name: "Composite",
                        className: "JsonFieldWithDefault"
                    }
                }, subject: {
                    serializedName: "properties.subject",
                    type: {
                        name: "Composite",
                        className: "JsonFieldWithDefault"
                    }
                }, dataVersion: {
                    serializedName: "properties.dataVersion",
                    type: {
                        name: "Composite",
                        className: "JsonFieldWithDefault"
                    }
                } })
        }
    };
    var TrackedResource = {
        serializedName: "TrackedResource",
        type: {
            name: "Composite",
            className: "TrackedResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var Topic = {
        serializedName: "Topic",
        type: {
            name: "Composite",
            className: "Topic",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, endpoint: {
                    readOnly: true,
                    serializedName: "properties.endpoint",
                    type: {
                        name: "String"
                    }
                }, inputSchema: {
                    serializedName: "properties.inputSchema",
                    defaultValue: 'EventGridSchema',
                    type: {
                        name: "String"
                    }
                }, inputSchemaMapping: {
                    serializedName: "properties.inputSchemaMapping",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "inputSchemaMappingType",
                            clientName: "inputSchemaMappingType"
                        },
                        uberParent: "InputSchemaMapping",
                        className: "InputSchemaMapping"
                    }
                } })
        }
    };
    var TopicUpdateParameters = {
        serializedName: "TopicUpdateParameters",
        type: {
            name: "Composite",
            className: "TopicUpdateParameters",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var TopicSharedAccessKeys = {
        serializedName: "TopicSharedAccessKeys",
        type: {
            name: "Composite",
            className: "TopicSharedAccessKeys",
            modelProperties: {
                key1: {
                    serializedName: "key1",
                    type: {
                        name: "String"
                    }
                },
                key2: {
                    serializedName: "key2",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TopicRegenerateKeyRequest = {
        serializedName: "TopicRegenerateKeyRequest",
        type: {
            name: "Composite",
            className: "TopicRegenerateKeyRequest",
            modelProperties: {
                keyName: {
                    required: true,
                    serializedName: "keyName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventTypeProperties = {
        serializedName: "EventTypeProperties",
        type: {
            name: "Composite",
            className: "EventTypeProperties",
            modelProperties: {
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                schemaUrl: {
                    serializedName: "schemaUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventType = {
        serializedName: "EventType",
        type: {
            name: "Composite",
            className: "EventType",
            modelProperties: __assign({}, Resource.type.modelProperties, { displayName: {
                    serializedName: "properties.displayName",
                    type: {
                        name: "String"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, schemaUrl: {
                    serializedName: "properties.schemaUrl",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var TopicTypeProperties = {
        serializedName: "TopicTypeProperties",
        type: {
            name: "Composite",
            className: "TopicTypeProperties",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                resourceRegionType: {
                    serializedName: "resourceRegionType",
                    type: {
                        name: "String"
                    }
                },
                provisioningState: {
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                supportedLocations: {
                    serializedName: "supportedLocations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var TopicTypeInfo = {
        serializedName: "TopicTypeInfo",
        type: {
            name: "Composite",
            className: "TopicTypeInfo",
            modelProperties: __assign({}, Resource.type.modelProperties, { provider: {
                    serializedName: "properties.provider",
                    type: {
                        name: "String"
                    }
                }, displayName: {
                    serializedName: "properties.displayName",
                    type: {
                        name: "String"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, resourceRegionType: {
                    serializedName: "properties.resourceRegionType",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, supportedLocations: {
                    serializedName: "properties.supportedLocations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var EventSubscriptionsListResult = {
        serializedName: "EventSubscriptionsListResult",
        type: {
            name: "Composite",
            className: "EventSubscriptionsListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EventSubscription"
                            }
                        }
                    }
                }
            }
        }
    };
    var OperationsListResult = {
        serializedName: "OperationsListResult",
        type: {
            name: "Composite",
            className: "OperationsListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                }
            }
        }
    };
    var TopicsListResult = {
        serializedName: "TopicsListResult",
        type: {
            name: "Composite",
            className: "TopicsListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Topic"
                            }
                        }
                    }
                }
            }
        }
    };
    var EventTypesListResult = {
        serializedName: "EventTypesListResult",
        type: {
            name: "Composite",
            className: "EventTypesListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EventType"
                            }
                        }
                    }
                }
            }
        }
    };
    var TopicTypesListResult = {
        serializedName: "TopicTypesListResult",
        type: {
            name: "Composite",
            className: "TopicTypesListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TopicTypeInfo"
                            }
                        }
                    }
                }
            }
        }
    };
    var discriminators = {
        'EventSubscriptionDestination': EventSubscriptionDestination,
        'DeadLetterDestination': DeadLetterDestination,
        'DeadLetterDestination.StorageBlob': StorageBlobDeadLetterDestination,
        'EventSubscriptionDestination.WebHook': WebHookEventSubscriptionDestination,
        'EventSubscriptionDestination.EventHub': EventHubEventSubscriptionDestination,
        'EventSubscriptionDestination.StorageQueue': StorageQueueEventSubscriptionDestination,
        'EventSubscriptionDestination.HybridConnection': HybridConnectionEventSubscriptionDestination,
        'InputSchemaMapping': InputSchemaMapping,
        'InputSchemaMapping.Json': JsonInputSchemaMapping
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        EventSubscriptionDestination: EventSubscriptionDestination,
        EventSubscriptionFilter: EventSubscriptionFilter,
        RetryPolicy: RetryPolicy,
        DeadLetterDestination: DeadLetterDestination,
        EventSubscriptionProperties: EventSubscriptionProperties,
        Resource: Resource,
        WebHookEventSubscriptionDestinationProperties: WebHookEventSubscriptionDestinationProperties,
        StorageBlobDeadLetterDestinationProperties: StorageBlobDeadLetterDestinationProperties,
        StorageBlobDeadLetterDestination: StorageBlobDeadLetterDestination,
        WebHookEventSubscriptionDestination: WebHookEventSubscriptionDestination,
        EventHubEventSubscriptionDestinationProperties: EventHubEventSubscriptionDestinationProperties,
        EventHubEventSubscriptionDestination: EventHubEventSubscriptionDestination,
        StorageQueueEventSubscriptionDestinationProperties: StorageQueueEventSubscriptionDestinationProperties,
        StorageQueueEventSubscriptionDestination: StorageQueueEventSubscriptionDestination,
        HybridConnectionEventSubscriptionDestinationProperties: HybridConnectionEventSubscriptionDestinationProperties,
        HybridConnectionEventSubscriptionDestination: HybridConnectionEventSubscriptionDestination,
        EventSubscription: EventSubscription,
        EventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters,
        EventSubscriptionFullUrl: EventSubscriptionFullUrl,
        OperationInfo: OperationInfo,
        Operation: Operation,
        InputSchemaMapping: InputSchemaMapping,
        TopicProperties: TopicProperties,
        JsonField: JsonField,
        JsonFieldWithDefault: JsonFieldWithDefault,
        JsonInputSchemaMappingProperties: JsonInputSchemaMappingProperties,
        JsonInputSchemaMapping: JsonInputSchemaMapping,
        TrackedResource: TrackedResource,
        Topic: Topic,
        TopicUpdateParameters: TopicUpdateParameters,
        TopicSharedAccessKeys: TopicSharedAccessKeys,
        TopicRegenerateKeyRequest: TopicRegenerateKeyRequest,
        EventTypeProperties: EventTypeProperties,
        EventType: EventType,
        TopicTypeProperties: TopicTypeProperties,
        TopicTypeInfo: TopicTypeInfo,
        EventSubscriptionsListResult: EventSubscriptionsListResult,
        OperationsListResult: OperationsListResult,
        TopicsListResult: TopicsListResult,
        EventTypesListResult: EventTypesListResult,
        TopicTypesListResult: TopicTypesListResult,
        discriminators: discriminators
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        EventSubscription: EventSubscription,
        Resource: Resource,
        BaseResource: BaseResource,
        EventSubscriptionDestination: EventSubscriptionDestination,
        EventSubscriptionFilter: EventSubscriptionFilter,
        RetryPolicy: RetryPolicy,
        DeadLetterDestination: DeadLetterDestination,
        CloudError: CloudError,
        EventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters,
        EventSubscriptionFullUrl: EventSubscriptionFullUrl,
        EventSubscriptionsListResult: EventSubscriptionsListResult,
        StorageBlobDeadLetterDestination: StorageBlobDeadLetterDestination,
        WebHookEventSubscriptionDestination: WebHookEventSubscriptionDestination,
        EventHubEventSubscriptionDestination: EventHubEventSubscriptionDestination,
        StorageQueueEventSubscriptionDestination: StorageQueueEventSubscriptionDestination,
        HybridConnectionEventSubscriptionDestination: HybridConnectionEventSubscriptionDestination,
        TrackedResource: TrackedResource,
        Topic: Topic,
        InputSchemaMapping: InputSchemaMapping,
        EventType: EventType,
        TopicTypeInfo: TopicTypeInfo,
        JsonInputSchemaMapping: JsonInputSchemaMapping,
        JsonField: JsonField,
        JsonFieldWithDefault: JsonFieldWithDefault
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var eventSubscriptionName = {
        parameterPath: "eventSubscriptionName",
        mapper: {
            required: true,
            serializedName: "eventSubscriptionName",
            type: {
                name: "String"
            }
        }
    };
    var location = {
        parameterPath: "location",
        mapper: {
            required: true,
            serializedName: "location",
            type: {
                name: "String"
            }
        }
    };
    var providerNamespace = {
        parameterPath: "providerNamespace",
        mapper: {
            required: true,
            serializedName: "providerNamespace",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var resourceName = {
        parameterPath: "resourceName",
        mapper: {
            required: true,
            serializedName: "resourceName",
            type: {
                name: "String"
            }
        }
    };
    var resourceTypeName = {
        parameterPath: "resourceTypeName",
        mapper: {
            required: true,
            serializedName: "resourceTypeName",
            type: {
                name: "String"
            }
        }
    };
    var scope = {
        parameterPath: "scope",
        mapper: {
            required: true,
            serializedName: "scope",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var topicName = {
        parameterPath: "topicName",
        mapper: {
            required: true,
            serializedName: "topicName",
            type: {
                name: "String"
            }
        }
    };
    var topicTypeName = {
        parameterPath: "topicTypeName",
        mapper: {
            required: true,
            serializedName: "topicTypeName",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a EventSubscriptions. */
    var EventSubscriptions = /** @class */ (function () {
        /**
         * Create a EventSubscriptions.
         * @param {EventGridManagementClientContext} client Reference to the service client.
         */
        function EventSubscriptions(client) {
            this.client = client;
        }
        EventSubscriptions.prototype.get = function (scope$$1, eventSubscriptionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                scope: scope$$1,
                eventSubscriptionName: eventSubscriptionName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        /**
         * Asynchronously creates a new event subscription or updates an existing event subscription based
         * on the specified scope.
         * @summary Create or update an event subscription
         * @param scope The identifier of the resource to which the event subscription needs to be created
         * or updated. The scope can be a subscription, or a resource group, or a top level resource
         * belonging to a resource provider namespace, or an EventGrid topic. For example, use
         * '/subscriptions/{subscriptionId}/' for a subscription,
         * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
         * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
         * for a resource, and
         * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
         * for an EventGrid topic.
         * @param eventSubscriptionName Name of the event subscription. Event subscription names must be
         * between 3 and 64 characters in length and should use alphanumeric letters only.
         * @param eventSubscriptionInfo Event subscription properties containing the destination and filter
         * information
         * @param [options] The optional parameters
         * @returns Promise<Models.EventSubscriptionsCreateOrUpdateResponse>
         */
        EventSubscriptions.prototype.createOrUpdate = function (scope$$1, eventSubscriptionName$$1, eventSubscriptionInfo, options) {
            return this.beginCreateOrUpdate(scope$$1, eventSubscriptionName$$1, eventSubscriptionInfo, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Delete an existing event subscription
         * @summary Delete an event subscription
         * @param scope The scope of the event subscription. The scope can be a subscription, or a resource
         * group, or a top level resource belonging to a resource provider namespace, or an EventGrid
         * topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription,
         * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
         * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
         * for a resource, and
         * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
         * for an EventGrid topic.
         * @param eventSubscriptionName Name of the event subscription
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        EventSubscriptions.prototype.deleteMethod = function (scope$$1, eventSubscriptionName$$1, options) {
            return this.beginDeleteMethod(scope$$1, eventSubscriptionName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Asynchronously updates an existing event subscription.
         * @summary Update an event subscription
         * @param scope The scope of existing event subscription. The scope can be a subscription, or a
         * resource group, or a top level resource belonging to a resource provider namespace, or an
         * EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription,
         * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
         * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
         * for a resource, and
         * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
         * for an EventGrid topic.
         * @param eventSubscriptionName Name of the event subscription to be updated
         * @param eventSubscriptionUpdateParameters Updated event subscription information
         * @param [options] The optional parameters
         * @returns Promise<Models.EventSubscriptionsUpdateResponse>
         */
        EventSubscriptions.prototype.update = function (scope$$1, eventSubscriptionName$$1, eventSubscriptionUpdateParameters, options) {
            return this.beginUpdate(scope$$1, eventSubscriptionName$$1, eventSubscriptionUpdateParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        EventSubscriptions.prototype.getFullUrl = function (scope$$1, eventSubscriptionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                scope: scope$$1,
                eventSubscriptionName: eventSubscriptionName$$1,
                options: options
            }, getFullUrlOperationSpec, callback);
        };
        EventSubscriptions.prototype.listGlobalBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listGlobalBySubscriptionOperationSpec, callback);
        };
        EventSubscriptions.prototype.listGlobalBySubscriptionForTopicType = function (topicTypeName$$1, options, callback) {
            return this.client.sendOperationRequest({
                topicTypeName: topicTypeName$$1,
                options: options
            }, listGlobalBySubscriptionForTopicTypeOperationSpec, callback);
        };
        EventSubscriptions.prototype.listGlobalByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listGlobalByResourceGroupOperationSpec, callback);
        };
        EventSubscriptions.prototype.listGlobalByResourceGroupForTopicType = function (resourceGroupName$$1, topicTypeName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                topicTypeName: topicTypeName$$1,
                options: options
            }, listGlobalByResourceGroupForTopicTypeOperationSpec, callback);
        };
        EventSubscriptions.prototype.listRegionalBySubscription = function (location$$1, options, callback) {
            return this.client.sendOperationRequest({
                location: location$$1,
                options: options
            }, listRegionalBySubscriptionOperationSpec, callback);
        };
        EventSubscriptions.prototype.listRegionalByResourceGroup = function (resourceGroupName$$1, location$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                location: location$$1,
                options: options
            }, listRegionalByResourceGroupOperationSpec, callback);
        };
        EventSubscriptions.prototype.listRegionalBySubscriptionForTopicType = function (location$$1, topicTypeName$$1, options, callback) {
            return this.client.sendOperationRequest({
                location: location$$1,
                topicTypeName: topicTypeName$$1,
                options: options
            }, listRegionalBySubscriptionForTopicTypeOperationSpec, callback);
        };
        EventSubscriptions.prototype.listRegionalByResourceGroupForTopicType = function (resourceGroupName$$1, location$$1, topicTypeName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                location: location$$1,
                topicTypeName: topicTypeName$$1,
                options: options
            }, listRegionalByResourceGroupForTopicTypeOperationSpec, callback);
        };
        EventSubscriptions.prototype.listByResource = function (resourceGroupName$$1, providerNamespace$$1, resourceTypeName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                providerNamespace: providerNamespace$$1,
                resourceTypeName: resourceTypeName$$1,
                resourceName: resourceName$$1,
                options: options
            }, listByResourceOperationSpec, callback);
        };
        /**
         * Asynchronously creates a new event subscription or updates an existing event subscription based
         * on the specified scope.
         * @summary Create or update an event subscription
         * @param scope The identifier of the resource to which the event subscription needs to be created
         * or updated. The scope can be a subscription, or a resource group, or a top level resource
         * belonging to a resource provider namespace, or an EventGrid topic. For example, use
         * '/subscriptions/{subscriptionId}/' for a subscription,
         * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
         * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
         * for a resource, and
         * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
         * for an EventGrid topic.
         * @param eventSubscriptionName Name of the event subscription. Event subscription names must be
         * between 3 and 64 characters in length and should use alphanumeric letters only.
         * @param eventSubscriptionInfo Event subscription properties containing the destination and filter
         * information
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        EventSubscriptions.prototype.beginCreateOrUpdate = function (scope$$1, eventSubscriptionName$$1, eventSubscriptionInfo, options) {
            return this.client.sendLRORequest({
                scope: scope$$1,
                eventSubscriptionName: eventSubscriptionName$$1,
                eventSubscriptionInfo: eventSubscriptionInfo,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * Delete an existing event subscription
         * @summary Delete an event subscription
         * @param scope The scope of the event subscription. The scope can be a subscription, or a resource
         * group, or a top level resource belonging to a resource provider namespace, or an EventGrid
         * topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription,
         * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
         * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
         * for a resource, and
         * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
         * for an EventGrid topic.
         * @param eventSubscriptionName Name of the event subscription
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        EventSubscriptions.prototype.beginDeleteMethod = function (scope$$1, eventSubscriptionName$$1, options) {
            return this.client.sendLRORequest({
                scope: scope$$1,
                eventSubscriptionName: eventSubscriptionName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        /**
         * Asynchronously updates an existing event subscription.
         * @summary Update an event subscription
         * @param scope The scope of existing event subscription. The scope can be a subscription, or a
         * resource group, or a top level resource belonging to a resource provider namespace, or an
         * EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription,
         * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
         * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
         * for a resource, and
         * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
         * for an EventGrid topic.
         * @param eventSubscriptionName Name of the event subscription to be updated
         * @param eventSubscriptionUpdateParameters Updated event subscription information
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        EventSubscriptions.prototype.beginUpdate = function (scope$$1, eventSubscriptionName$$1, eventSubscriptionUpdateParameters, options) {
            return this.client.sendLRORequest({
                scope: scope$$1,
                eventSubscriptionName: eventSubscriptionName$$1,
                eventSubscriptionUpdateParameters: eventSubscriptionUpdateParameters,
                options: options
            }, beginUpdateOperationSpec, options);
        };
        return EventSubscriptions;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var getOperationSpec = {
        httpMethod: "GET",
        path: "{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}",
        urlParameters: [
            scope,
            eventSubscriptionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EventSubscription
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var getFullUrlOperationSpec = {
        httpMethod: "POST",
        path: "{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}/getFullUrl",
        urlParameters: [
            scope,
            eventSubscriptionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EventSubscriptionFullUrl
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listGlobalBySubscriptionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/eventSubscriptions",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EventSubscriptionsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listGlobalBySubscriptionForTopicTypeOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventSubscriptions",
        urlParameters: [
            subscriptionId,
            topicTypeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EventSubscriptionsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listGlobalByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/eventSubscriptions",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EventSubscriptionsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listGlobalByResourceGroupForTopicTypeOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventSubscriptions",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            topicTypeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EventSubscriptionsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listRegionalBySubscriptionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/locations/{location}/eventSubscriptions",
        urlParameters: [
            subscriptionId,
            location
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EventSubscriptionsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listRegionalByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/locations/{location}/eventSubscriptions",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            location
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EventSubscriptionsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listRegionalBySubscriptionForTopicTypeOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/locations/{location}/topicTypes/{topicTypeName}/eventSubscriptions",
        urlParameters: [
            subscriptionId,
            location,
            topicTypeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EventSubscriptionsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listRegionalByResourceGroupForTopicTypeOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/locations/{location}/topicTypes/{topicTypeName}/eventSubscriptions",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            location,
            topicTypeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EventSubscriptionsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listByResourceOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerNamespace}/{resourceTypeName}/{resourceName}/providers/Microsoft.EventGrid/eventSubscriptions",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            providerNamespace,
            resourceTypeName,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EventSubscriptionsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}",
        urlParameters: [
            scope,
            eventSubscriptionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "eventSubscriptionInfo",
            mapper: __assign({}, EventSubscription, { required: true })
        },
        responses: {
            201: {
                bodyMapper: EventSubscription
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}",
        urlParameters: [
            scope,
            eventSubscriptionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginUpdateOperationSpec = {
        httpMethod: "PATCH",
        path: "{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}",
        urlParameters: [
            scope,
            eventSubscriptionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "eventSubscriptionUpdateParameters",
            mapper: __assign({}, EventSubscriptionUpdateParameters, { required: true })
        },
        responses: {
            201: {
                bodyMapper: EventSubscription
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        OperationsListResult: OperationsListResult,
        Operation: Operation,
        OperationInfo: OperationInfo,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {EventGridManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.EventGrid/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        Topic: Topic,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        InputSchemaMapping: InputSchemaMapping,
        CloudError: CloudError,
        TopicUpdateParameters: TopicUpdateParameters,
        TopicsListResult: TopicsListResult,
        TopicSharedAccessKeys: TopicSharedAccessKeys,
        TopicRegenerateKeyRequest: TopicRegenerateKeyRequest,
        EventTypesListResult: EventTypesListResult,
        EventType: EventType,
        EventSubscription: EventSubscription,
        EventSubscriptionDestination: EventSubscriptionDestination,
        EventSubscriptionFilter: EventSubscriptionFilter,
        RetryPolicy: RetryPolicy,
        DeadLetterDestination: DeadLetterDestination,
        JsonInputSchemaMapping: JsonInputSchemaMapping,
        JsonField: JsonField,
        JsonFieldWithDefault: JsonFieldWithDefault,
        TopicTypeInfo: TopicTypeInfo,
        StorageBlobDeadLetterDestination: StorageBlobDeadLetterDestination,
        WebHookEventSubscriptionDestination: WebHookEventSubscriptionDestination,
        EventHubEventSubscriptionDestination: EventHubEventSubscriptionDestination,
        StorageQueueEventSubscriptionDestination: StorageQueueEventSubscriptionDestination,
        HybridConnectionEventSubscriptionDestination: HybridConnectionEventSubscriptionDestination
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Topics. */
    var Topics = /** @class */ (function () {
        /**
         * Create a Topics.
         * @param {EventGridManagementClientContext} client Reference to the service client.
         */
        function Topics(client) {
            this.client = client;
        }
        Topics.prototype.get = function (resourceGroupName$$1, topicName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                topicName: topicName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        /**
         * Asynchronously creates a new topic with the specified parameters.
         * @summary Create a topic
         * @param resourceGroupName The name of the resource group within the user's subscription.
         * @param topicName Name of the topic
         * @param topicInfo Topic information
         * @param [options] The optional parameters
         * @returns Promise<Models.TopicsCreateOrUpdateResponse>
         */
        Topics.prototype.createOrUpdate = function (resourceGroupName$$1, topicName$$1, topicInfo, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, topicName$$1, topicInfo, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Delete existing topic
         * @summary Delete a topic
         * @param resourceGroupName The name of the resource group within the user's subscription.
         * @param topicName Name of the topic
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Topics.prototype.deleteMethod = function (resourceGroupName$$1, topicName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, topicName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Asynchronously updates a topic with the specified parameters.
         * @summary Update a topic
         * @param resourceGroupName The name of the resource group within the user's subscription.
         * @param topicName Name of the topic
         * @param topicUpdateParameters Topic update information
         * @param [options] The optional parameters
         * @returns Promise<Models.TopicsUpdateResponse>
         */
        Topics.prototype.update = function (resourceGroupName$$1, topicName$$1, topicUpdateParameters, options) {
            return this.beginUpdate(resourceGroupName$$1, topicName$$1, topicUpdateParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Topics.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec, callback);
        };
        Topics.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Topics.prototype.listSharedAccessKeys = function (resourceGroupName$$1, topicName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                topicName: topicName$$1,
                options: options
            }, listSharedAccessKeysOperationSpec, callback);
        };
        Topics.prototype.regenerateKey = function (resourceGroupName$$1, topicName$$1, regenerateKeyRequest, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                topicName: topicName$$1,
                regenerateKeyRequest: regenerateKeyRequest,
                options: options
            }, regenerateKeyOperationSpec, callback);
        };
        Topics.prototype.listEventTypes = function (resourceGroupName$$1, providerNamespace$$1, resourceTypeName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                providerNamespace: providerNamespace$$1,
                resourceTypeName: resourceTypeName$$1,
                resourceName: resourceName$$1,
                options: options
            }, listEventTypesOperationSpec, callback);
        };
        /**
         * Asynchronously creates a new topic with the specified parameters.
         * @summary Create a topic
         * @param resourceGroupName The name of the resource group within the user's subscription.
         * @param topicName Name of the topic
         * @param topicInfo Topic information
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Topics.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, topicName$$1, topicInfo, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                topicName: topicName$$1,
                topicInfo: topicInfo,
                options: options
            }, beginCreateOrUpdateOperationSpec$1, options);
        };
        /**
         * Delete existing topic
         * @summary Delete a topic
         * @param resourceGroupName The name of the resource group within the user's subscription.
         * @param topicName Name of the topic
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Topics.prototype.beginDeleteMethod = function (resourceGroupName$$1, topicName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                topicName: topicName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$1, options);
        };
        /**
         * Asynchronously updates a topic with the specified parameters.
         * @summary Update a topic
         * @param resourceGroupName The name of the resource group within the user's subscription.
         * @param topicName Name of the topic
         * @param topicUpdateParameters Topic update information
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Topics.prototype.beginUpdate = function (resourceGroupName$$1, topicName$$1, topicUpdateParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                topicName: topicName$$1,
                topicUpdateParameters: topicUpdateParameters,
                options: options
            }, beginUpdateOperationSpec$1, options);
        };
        return Topics;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            topicName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Topic
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listBySubscriptionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/topics",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TopicsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TopicsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listSharedAccessKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}/listKeys",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            topicName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TopicSharedAccessKeys
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var regenerateKeyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}/regenerateKey",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            topicName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "regenerateKeyRequest",
            mapper: __assign({}, TopicRegenerateKeyRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: TopicSharedAccessKeys
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listEventTypesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerNamespace}/{resourceTypeName}/{resourceName}/providers/Microsoft.EventGrid/eventTypes",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            providerNamespace,
            resourceTypeName,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EventTypesListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginCreateOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            topicName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "topicInfo",
            mapper: __assign({}, Topic, { required: true })
        },
        responses: {
            201: {
                bodyMapper: Topic
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginDeleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            topicName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginUpdateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            topicName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "topicUpdateParameters",
            mapper: __assign({}, TopicUpdateParameters, { required: true })
        },
        responses: {
            201: {
                bodyMapper: Topic
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        TopicTypesListResult: TopicTypesListResult,
        TopicTypeInfo: TopicTypeInfo,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        EventTypesListResult: EventTypesListResult,
        EventType: EventType,
        EventSubscription: EventSubscription,
        EventSubscriptionDestination: EventSubscriptionDestination,
        EventSubscriptionFilter: EventSubscriptionFilter,
        RetryPolicy: RetryPolicy,
        DeadLetterDestination: DeadLetterDestination,
        TrackedResource: TrackedResource,
        Topic: Topic,
        InputSchemaMapping: InputSchemaMapping,
        StorageBlobDeadLetterDestination: StorageBlobDeadLetterDestination,
        WebHookEventSubscriptionDestination: WebHookEventSubscriptionDestination,
        EventHubEventSubscriptionDestination: EventHubEventSubscriptionDestination,
        StorageQueueEventSubscriptionDestination: StorageQueueEventSubscriptionDestination,
        HybridConnectionEventSubscriptionDestination: HybridConnectionEventSubscriptionDestination,
        JsonInputSchemaMapping: JsonInputSchemaMapping,
        JsonField: JsonField,
        JsonFieldWithDefault: JsonFieldWithDefault
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a TopicTypes. */
    var TopicTypes = /** @class */ (function () {
        /**
         * Create a TopicTypes.
         * @param {EventGridManagementClientContext} client Reference to the service client.
         */
        function TopicTypes(client) {
            this.client = client;
        }
        TopicTypes.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        TopicTypes.prototype.get = function (topicTypeName$$1, options, callback) {
            return this.client.sendOperationRequest({
                topicTypeName: topicTypeName$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        TopicTypes.prototype.listEventTypes = function (topicTypeName$$1, options, callback) {
            return this.client.sendOperationRequest({
                topicTypeName: topicTypeName$$1,
                options: options
            }, listEventTypesOperationSpec$1, callback);
        };
        return TopicTypes;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.EventGrid/topicTypes",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TopicTypesListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "providers/Microsoft.EventGrid/topicTypes/{topicTypeName}",
        urlParameters: [
            topicTypeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TopicTypeInfo
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listEventTypesOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventTypes",
        urlParameters: [
            topicTypeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EventTypesListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-eventgrid";
    var packageVersion = "1.0.0-preview";
    var EventGridManagementClientContext = /** @class */ (function (_super) {
        __extends(EventGridManagementClientContext, _super);
        /**
         * Initializes a new instance of the EventGridManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function EventGridManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2018-05-01-preview';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return EventGridManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var EventGridManagementClient = /** @class */ (function (_super) {
        __extends(EventGridManagementClient, _super);
        /**
         * Initializes a new instance of the EventGridManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function EventGridManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.eventSubscriptions = new EventSubscriptions(_this);
            _this.operations = new Operations(_this);
            _this.topics = new Topics(_this);
            _this.topicTypes = new TopicTypes(_this);
            return _this;
        }
        return EventGridManagementClient;
    }(EventGridManagementClientContext));

    exports.EventGridManagementClient = EventGridManagementClient;
    exports.EventGridManagementClientContext = EventGridManagementClientContext;
    exports.EventGridManagementModels = index;
    exports.EventGridManagementMappers = mappers;
    exports.EventSubscriptions = EventSubscriptions;
    exports.Operations = Operations;
    exports.Topics = Topics;
    exports.TopicTypes = TopicTypes;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-eventgrid.js.map
