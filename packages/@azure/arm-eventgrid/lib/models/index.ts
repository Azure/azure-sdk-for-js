/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };


/**
 * Contains the possible cases for InputSchemaMapping.
 */
export type InputSchemaMappingUnion = InputSchemaMapping | JsonInputSchemaMapping;

/**
 * @interface
 * An interface representing InputSchemaMapping.
 * By default, Event Grid expects events to be in the Event Grid event schema.
 * Specifying an input schema mapping enables publishing to Event Grid using a
 * custom input schema. Currently, the only supported type of
 * InputSchemaMapping is 'JsonInputSchemaMapping'.
 *
 */
export interface InputSchemaMapping {
  /**
   * @member {string} inputSchemaMappingType Polymorphic Discriminator
   */
  inputSchemaMappingType: "InputSchemaMapping";
}

/**
 * @interface
 * An interface representing Resource.
 * Definition of a Resource
 *
 * @extends BaseResource
 */
export interface Resource extends BaseResource {
  /**
   * @member {string} [id] Fully qualified identifier of the resource
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] Name of the resource
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [type] Type of the resource
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
}

/**
 * @interface
 * An interface representing TrackedResource.
 * Definition of a Tracked Resource
 *
 * @extends Resource
 */
export interface TrackedResource extends Resource {
  /**
   * @member {string} location Location of the resource
   */
  location: string;
  /**
   * @member {{ [propertyName: string]: string }} [tags] Tags of the resource
   */
  tags?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing Domain.
 * EventGrid Domain
 *
 * @extends TrackedResource
 */
export interface Domain extends TrackedResource {
  /**
   * @member {DomainProvisioningState} [provisioningState] Provisioning state
   * of the domain. Possible values include: 'Creating', 'Updating',
   * 'Deleting', 'Succeeded', 'Canceled', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: DomainProvisioningState;
  /**
   * @member {string} [endpoint] Endpoint for the domain.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly endpoint?: string;
  /**
   * @member {InputSchema} [inputSchema] This determines the format that Event
   * Grid should expect for incoming events published to the domain. Possible
   * values include: 'EventGridSchema', 'CustomEventSchema',
   * 'CloudEventV01Schema'
   */
  inputSchema?: InputSchema;
  /**
   * @member {InputSchemaMappingUnion} [inputSchemaMapping] Information about
   * the InputSchemaMapping which specified the info about mapping event
   * payload.
   */
  inputSchemaMapping?: InputSchemaMappingUnion;
}

/**
 * @interface
 * An interface representing DomainUpdateParameters.
 * Properties of the Domain update
 *
 */
export interface DomainUpdateParameters {
  /**
   * @member {{ [propertyName: string]: string }} [tags] Tags of the domains
   * resource
   */
  tags?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing DomainSharedAccessKeys.
 * Shared access keys of the Domain
 *
 */
export interface DomainSharedAccessKeys {
  /**
   * @member {string} [key1] Shared access key1 for the domain.
   */
  key1?: string;
  /**
   * @member {string} [key2] Shared access key2 for the domain.
   */
  key2?: string;
}

/**
 * @interface
 * An interface representing DomainRegenerateKeyRequest.
 * Domain regenerate share access key request
 *
 */
export interface DomainRegenerateKeyRequest {
  /**
   * @member {string} keyName Key name to regenerate key1 or key2
   */
  keyName: string;
}

/**
 * @interface
 * An interface representing DomainTopic.
 * Domain Topic
 *
 * @extends Resource
 */
export interface DomainTopic extends Resource {
}

/**
 * Contains the possible cases for EventSubscriptionDestination.
 */
export type EventSubscriptionDestinationUnion = EventSubscriptionDestination | WebHookEventSubscriptionDestination | EventHubEventSubscriptionDestination | StorageQueueEventSubscriptionDestination | HybridConnectionEventSubscriptionDestination;

/**
 * @interface
 * An interface representing EventSubscriptionDestination.
 * Information about the destination for an event subscription
 *
 */
export interface EventSubscriptionDestination {
  /**
   * @member {string} endpointType Polymorphic Discriminator
   */
  endpointType: "EventSubscriptionDestination";
}

/**
 * Contains the possible cases for AdvancedFilter.
 */
export type AdvancedFilterUnion = AdvancedFilter | NumberInAdvancedFilter | NumberNotInAdvancedFilter | NumberLessThanAdvancedFilter | NumberGreaterThanAdvancedFilter | NumberLessThanOrEqualsAdvancedFilter | NumberGreaterThanOrEqualsAdvancedFilter | BoolEqualsAdvancedFilter | StringInAdvancedFilter | StringNotInAdvancedFilter | StringBeginsWithAdvancedFilter | StringEndsWithAdvancedFilter | StringContainsAdvancedFilter;

/**
 * @interface
 * An interface representing AdvancedFilter.
 * Represents an advanced filter that can be used to filter events based on
 * various event envelope/data fields.
 *
 */
export interface AdvancedFilter {
  /**
   * @member {string} operatorType Polymorphic Discriminator
   */
  operatorType: "AdvancedFilter";
  /**
   * @member {string} [key] The filter key. Represents an event property with
   * upto two levels of nesting.
   */
  key?: string;
}

/**
 * @interface
 * An interface representing EventSubscriptionFilter.
 * Filter for the Event Subscription
 *
 */
export interface EventSubscriptionFilter {
  /**
   * @member {string} [subjectBeginsWith] An optional string to filter events
   * for an event subscription based on a resource path prefix.
   * The format of this depends on the publisher of the events.
   * Wildcard characters are not supported in this path.
   */
  subjectBeginsWith?: string;
  /**
   * @member {string} [subjectEndsWith] An optional string to filter events for
   * an event subscription based on a resource path suffix.
   * Wildcard characters are not supported in this path.
   */
  subjectEndsWith?: string;
  /**
   * @member {string[]} [includedEventTypes] A list of applicable event types
   * that need to be part of the event subscription.
   * If it is desired to subscribe to all event types, the string "all" needs
   * to be specified as an element in this list.
   */
  includedEventTypes?: string[];
  /**
   * @member {boolean} [isSubjectCaseSensitive] Specifies if the
   * SubjectBeginsWith and SubjectEndsWith properties of the filter
   * should be compared in a case sensitive manner. Default value: false .
   */
  isSubjectCaseSensitive?: boolean;
  /**
   * @member {AdvancedFilterUnion[]} [advancedFilters] A list of advanced
   * filters.
   */
  advancedFilters?: AdvancedFilterUnion[];
}

/**
 * @interface
 * An interface representing RetryPolicy.
 * Information about the retry policy for an event subscription
 *
 */
export interface RetryPolicy {
  /**
   * @member {number} [maxDeliveryAttempts] Maximum number of delivery retry
   * attempts for events.
   */
  maxDeliveryAttempts?: number;
  /**
   * @member {number} [eventTimeToLiveInMinutes] Time To Live (in minutes) for
   * events.
   */
  eventTimeToLiveInMinutes?: number;
}

/**
 * Contains the possible cases for DeadLetterDestination.
 */
export type DeadLetterDestinationUnion = DeadLetterDestination | StorageBlobDeadLetterDestination;

/**
 * @interface
 * An interface representing DeadLetterDestination.
 * Information about the dead letter destination for an event subscription. To
 * configure a deadletter destination, do not directly instantiate an object of
 * this class. Instead, instantiate an object of a derived class. Currently,
 * StorageBlobDeadLetterDestination is the only class that derives from this
 * class.
 *
 */
export interface DeadLetterDestination {
  /**
   * @member {string} endpointType Polymorphic Discriminator
   */
  endpointType: "DeadLetterDestination";
}

/**
 * @interface
 * An interface representing NumberInAdvancedFilter.
 * NumberIn filter
 *
 */
export interface NumberInAdvancedFilter {
  /**
   * @member {string} operatorType Polymorphic Discriminator
   */
  operatorType: "NumberIn";
  /**
   * @member {string} [key] The filter key. Represents an event property with
   * upto two levels of nesting.
   */
  key?: string;
  /**
   * @member {number[]} [values] The set of filter values
   */
  values?: number[];
}

/**
 * @interface
 * An interface representing StorageBlobDeadLetterDestination.
 * Information about the storage blob based dead letter destination.
 *
 */
export interface StorageBlobDeadLetterDestination {
  /**
   * @member {string} endpointType Polymorphic Discriminator
   */
  endpointType: "StorageBlob";
  /**
   * @member {string} [resourceId] The Azure Resource ID of the storage account
   * that is the destination of the deadletter events
   */
  resourceId?: string;
  /**
   * @member {string} [blobContainerName] The name of the Storage blob
   * container that is the destination of the deadletter events
   */
  blobContainerName?: string;
}

/**
 * @interface
 * An interface representing NumberNotInAdvancedFilter.
 * NumberNotIn Filter
 *
 */
export interface NumberNotInAdvancedFilter {
  /**
   * @member {string} operatorType Polymorphic Discriminator
   */
  operatorType: "NumberNotIn";
  /**
   * @member {string} [key] The filter key. Represents an event property with
   * upto two levels of nesting.
   */
  key?: string;
  /**
   * @member {number[]} [values] The set of filter values
   */
  values?: number[];
}

/**
 * @interface
 * An interface representing NumberLessThanAdvancedFilter.
 * NumberLessThan Filter
 *
 */
export interface NumberLessThanAdvancedFilter {
  /**
   * @member {string} operatorType Polymorphic Discriminator
   */
  operatorType: "NumberLessThan";
  /**
   * @member {string} [key] The filter key. Represents an event property with
   * upto two levels of nesting.
   */
  key?: string;
  /**
   * @member {number} [value] The filter value
   */
  value?: number;
}

/**
 * @interface
 * An interface representing NumberGreaterThanAdvancedFilter.
 * NumberGreaterThan Filter
 *
 */
export interface NumberGreaterThanAdvancedFilter {
  /**
   * @member {string} operatorType Polymorphic Discriminator
   */
  operatorType: "NumberGreaterThan";
  /**
   * @member {string} [key] The filter key. Represents an event property with
   * upto two levels of nesting.
   */
  key?: string;
  /**
   * @member {number} [value] The filter value
   */
  value?: number;
}

/**
 * @interface
 * An interface representing NumberLessThanOrEqualsAdvancedFilter.
 * NumberLessThanOrEquals Filter
 *
 */
export interface NumberLessThanOrEqualsAdvancedFilter {
  /**
   * @member {string} operatorType Polymorphic Discriminator
   */
  operatorType: "NumberLessThanOrEquals";
  /**
   * @member {string} [key] The filter key. Represents an event property with
   * upto two levels of nesting.
   */
  key?: string;
  /**
   * @member {number} [value] The filter value
   */
  value?: number;
}

/**
 * @interface
 * An interface representing NumberGreaterThanOrEqualsAdvancedFilter.
 * NumberGreaterThanOrEquals Filter
 *
 */
export interface NumberGreaterThanOrEqualsAdvancedFilter {
  /**
   * @member {string} operatorType Polymorphic Discriminator
   */
  operatorType: "NumberGreaterThanOrEquals";
  /**
   * @member {string} [key] The filter key. Represents an event property with
   * upto two levels of nesting.
   */
  key?: string;
  /**
   * @member {number} [value] The filter value
   */
  value?: number;
}

/**
 * @interface
 * An interface representing BoolEqualsAdvancedFilter.
 * BoolEquals Filter
 *
 */
export interface BoolEqualsAdvancedFilter {
  /**
   * @member {string} operatorType Polymorphic Discriminator
   */
  operatorType: "BoolEquals";
  /**
   * @member {string} [key] The filter key. Represents an event property with
   * upto two levels of nesting.
   */
  key?: string;
  /**
   * @member {boolean} [value] The filter value
   */
  value?: boolean;
}

/**
 * @interface
 * An interface representing StringInAdvancedFilter.
 * StringIn Filter
 *
 */
export interface StringInAdvancedFilter {
  /**
   * @member {string} operatorType Polymorphic Discriminator
   */
  operatorType: "StringIn";
  /**
   * @member {string} [key] The filter key. Represents an event property with
   * upto two levels of nesting.
   */
  key?: string;
  /**
   * @member {string[]} [values] The set of filter values
   */
  values?: string[];
}

/**
 * @interface
 * An interface representing StringNotInAdvancedFilter.
 * StringNotIn Filter
 *
 */
export interface StringNotInAdvancedFilter {
  /**
   * @member {string} operatorType Polymorphic Discriminator
   */
  operatorType: "StringNotIn";
  /**
   * @member {string} [key] The filter key. Represents an event property with
   * upto two levels of nesting.
   */
  key?: string;
  /**
   * @member {string[]} [values] The set of filter values
   */
  values?: string[];
}

/**
 * @interface
 * An interface representing StringBeginsWithAdvancedFilter.
 * StringBeginsWith Filter
 *
 */
export interface StringBeginsWithAdvancedFilter {
  /**
   * @member {string} operatorType Polymorphic Discriminator
   */
  operatorType: "StringBeginsWith";
  /**
   * @member {string} [key] The filter key. Represents an event property with
   * upto two levels of nesting.
   */
  key?: string;
  /**
   * @member {string[]} [values] The set of filter values
   */
  values?: string[];
}

/**
 * @interface
 * An interface representing StringEndsWithAdvancedFilter.
 * StringEndsWith Filter
 *
 */
export interface StringEndsWithAdvancedFilter {
  /**
   * @member {string} operatorType Polymorphic Discriminator
   */
  operatorType: "StringEndsWith";
  /**
   * @member {string} [key] The filter key. Represents an event property with
   * upto two levels of nesting.
   */
  key?: string;
  /**
   * @member {string[]} [values] The set of filter values
   */
  values?: string[];
}

/**
 * @interface
 * An interface representing StringContainsAdvancedFilter.
 * StringContains Filter
 *
 */
export interface StringContainsAdvancedFilter {
  /**
   * @member {string} operatorType Polymorphic Discriminator
   */
  operatorType: "StringContains";
  /**
   * @member {string} [key] The filter key. Represents an event property with
   * upto two levels of nesting.
   */
  key?: string;
  /**
   * @member {string[]} [values] The set of filter values
   */
  values?: string[];
}

/**
 * @interface
 * An interface representing WebHookEventSubscriptionDestination.
 * Information about the webhook destination for an event subscription
 *
 */
export interface WebHookEventSubscriptionDestination {
  /**
   * @member {string} endpointType Polymorphic Discriminator
   */
  endpointType: "WebHook";
  /**
   * @member {string} [endpointUrl] The URL that represents the endpoint of the
   * destination of an event subscription.
   */
  endpointUrl?: string;
  /**
   * @member {string} [endpointBaseUrl] The base URL that represents the
   * endpoint of the destination of an event subscription.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly endpointBaseUrl?: string;
}

/**
 * @interface
 * An interface representing EventHubEventSubscriptionDestination.
 * Information about the event hub destination for an event subscription
 *
 */
export interface EventHubEventSubscriptionDestination {
  /**
   * @member {string} endpointType Polymorphic Discriminator
   */
  endpointType: "EventHub";
  /**
   * @member {string} [resourceId] The Azure Resource Id that represents the
   * endpoint of an Event Hub destination of an event subscription.
   */
  resourceId?: string;
}

/**
 * @interface
 * An interface representing StorageQueueEventSubscriptionDestination.
 * Information about the storage queue destination for an event subscription.
 *
 */
export interface StorageQueueEventSubscriptionDestination {
  /**
   * @member {string} endpointType Polymorphic Discriminator
   */
  endpointType: "StorageQueue";
  /**
   * @member {string} [resourceId] The Azure Resource ID of the storage account
   * that contains the queue that is the destination of an event subscription.
   */
  resourceId?: string;
  /**
   * @member {string} [queueName] The name of the Storage queue under a storage
   * account that is the destination of an event subscription.
   */
  queueName?: string;
}

/**
 * @interface
 * An interface representing HybridConnectionEventSubscriptionDestination.
 * Information about the HybridConnection destination for an event
 * subscription.
 *
 */
export interface HybridConnectionEventSubscriptionDestination {
  /**
   * @member {string} endpointType Polymorphic Discriminator
   */
  endpointType: "HybridConnection";
  /**
   * @member {string} [resourceId] The Azure Resource ID of an hybrid
   * connection that is the destination of an event subscription.
   */
  resourceId?: string;
}

/**
 * @interface
 * An interface representing EventSubscription.
 * Event Subscription
 *
 * @extends Resource
 */
export interface EventSubscription extends Resource {
  /**
   * @member {string} [topic] Name of the topic of the event subscription.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly topic?: string;
  /**
   * @member {EventSubscriptionProvisioningState} [provisioningState]
   * Provisioning state of the event subscription. Possible values include:
   * 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Canceled', 'Failed',
   * 'AwaitingManualAction'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: EventSubscriptionProvisioningState;
  /**
   * @member {EventSubscriptionDestinationUnion} [destination] Information
   * about the destination where events have to be delivered for the event
   * subscription.
   */
  destination?: EventSubscriptionDestinationUnion;
  /**
   * @member {EventSubscriptionFilter} [filter] Information about the filter
   * for the event subscription.
   */
  filter?: EventSubscriptionFilter;
  /**
   * @member {string[]} [labels] List of user defined labels.
   */
  labels?: string[];
  /**
   * @member {Date} [expirationTimeUtc] Expiration time of the event
   * subscription.
   */
  expirationTimeUtc?: Date;
  /**
   * @member {EventDeliverySchema} [eventDeliverySchema] The event delivery
   * schema for the event subscription. Possible values include:
   * 'EventGridSchema', 'CloudEventV01Schema', 'CustomInputSchema'
   */
  eventDeliverySchema?: EventDeliverySchema;
  /**
   * @member {RetryPolicy} [retryPolicy] The retry policy for events. This can
   * be used to configure maximum number of delivery attempts and time to live
   * for events.
   */
  retryPolicy?: RetryPolicy;
  /**
   * @member {DeadLetterDestinationUnion} [deadLetterDestination] The
   * DeadLetter destination of the event subscription.
   */
  deadLetterDestination?: DeadLetterDestinationUnion;
}

/**
 * @interface
 * An interface representing EventSubscriptionUpdateParameters.
 * Properties of the Event Subscription update
 *
 */
export interface EventSubscriptionUpdateParameters {
  /**
   * @member {EventSubscriptionDestinationUnion} [destination] Information
   * about the destination where events have to be delivered for the event
   * subscription.
   */
  destination?: EventSubscriptionDestinationUnion;
  /**
   * @member {EventSubscriptionFilter} [filter] Information about the filter
   * for the event subscription.
   */
  filter?: EventSubscriptionFilter;
  /**
   * @member {string[]} [labels] List of user defined labels.
   */
  labels?: string[];
  /**
   * @member {Date} [expirationTimeUtc] Information about the expiration time
   * for the event subscription.
   */
  expirationTimeUtc?: Date;
  /**
   * @member {EventDeliverySchema} [eventDeliverySchema] The event delivery
   * schema for the event subscription. Possible values include:
   * 'EventGridSchema', 'CloudEventV01Schema', 'CustomInputSchema'
   */
  eventDeliverySchema?: EventDeliverySchema;
  /**
   * @member {RetryPolicy} [retryPolicy] The retry policy for events. This can
   * be used to configure maximum number of delivery attempts and time to live
   * for events.
   */
  retryPolicy?: RetryPolicy;
  /**
   * @member {DeadLetterDestinationUnion} [deadLetterDestination] The
   * DeadLetter destination of the event subscription.
   */
  deadLetterDestination?: DeadLetterDestinationUnion;
}

/**
 * @interface
 * An interface representing EventSubscriptionFullUrl.
 * Full endpoint url of an event subscription
 *
 */
export interface EventSubscriptionFullUrl {
  /**
   * @member {string} [endpointUrl] The URL that represents the endpoint of the
   * destination of an event subscription.
   */
  endpointUrl?: string;
}

/**
 * @interface
 * An interface representing OperationInfo.
 * Information about an operation
 *
 */
export interface OperationInfo {
  /**
   * @member {string} [provider] Name of the provider
   */
  provider?: string;
  /**
   * @member {string} [resource] Name of the resource type
   */
  resource?: string;
  /**
   * @member {string} [operation] Name of the operation
   */
  operation?: string;
  /**
   * @member {string} [description] Description of the operation
   */
  description?: string;
}

/**
 * @interface
 * An interface representing Operation.
 * Represents an operation returned by the GetOperations request
 *
 */
export interface Operation {
  /**
   * @member {string} [name] Name of the operation
   */
  name?: string;
  /**
   * @member {OperationInfo} [display] Display name of the operation
   */
  display?: OperationInfo;
  /**
   * @member {string} [origin] Origin of the operation
   */
  origin?: string;
  /**
   * @member {any} [properties] Properties of the operation
   */
  properties?: any;
}

/**
 * @interface
 * An interface representing JsonField.
 * This is used to express the source of an input schema mapping for a single
 * target field in the Event Grid Event schema. This is currently used in the
 * mappings for the 'id','topic' and 'eventtime' properties. This represents a
 * field in the input event schema.
 *
 */
export interface JsonField {
  /**
   * @member {string} [sourceField] Name of a field in the input event schema
   * that's to be used as the source of a mapping.
   */
  sourceField?: string;
}

/**
 * @interface
 * An interface representing JsonFieldWithDefault.
 * This is used to express the source of an input schema mapping for a single
 * target field in the Event Grid Event schema. This is currently used in the
 * mappings for the 'subject','eventtype' and 'dataversion' properties. This
 * represents a field in the input event schema along with a default value to
 * be used, and at least one of these two properties should be provided.
 *
 */
export interface JsonFieldWithDefault {
  /**
   * @member {string} [sourceField] Name of a field in the input event schema
   * that's to be used as the source of a mapping.
   */
  sourceField?: string;
  /**
   * @member {string} [defaultValue] The default value to be used for mapping
   * when a SourceField is not provided or if there's no property with the
   * specified name in the published JSON event payload.
   */
  defaultValue?: string;
}

/**
 * @interface
 * An interface representing JsonInputSchemaMapping.
 * This enables publishing to Event Grid using a custom input schema. This can
 * be used to map properties from a custom input JSON schema to the Event Grid
 * event schema.
 *
 */
export interface JsonInputSchemaMapping {
  /**
   * @member {string} inputSchemaMappingType Polymorphic Discriminator
   */
  inputSchemaMappingType: "Json";
  /**
   * @member {JsonField} [id] The mapping information for the Id property of
   * the Event Grid Event.
   */
  id?: JsonField;
  /**
   * @member {JsonField} [topic] The mapping information for the Topic property
   * of the Event Grid Event.
   */
  topic?: JsonField;
  /**
   * @member {JsonField} [eventTime] The mapping information for the EventTime
   * property of the Event Grid Event.
   */
  eventTime?: JsonField;
  /**
   * @member {JsonFieldWithDefault} [eventType] The mapping information for the
   * EventType property of the Event Grid Event.
   */
  eventType?: JsonFieldWithDefault;
  /**
   * @member {JsonFieldWithDefault} [subject] The mapping information for the
   * Subject property of the Event Grid Event.
   */
  subject?: JsonFieldWithDefault;
  /**
   * @member {JsonFieldWithDefault} [dataVersion] The mapping information for
   * the DataVersion property of the Event Grid Event.
   */
  dataVersion?: JsonFieldWithDefault;
}

/**
 * @interface
 * An interface representing Topic.
 * EventGrid Topic
 *
 * @extends TrackedResource
 */
export interface Topic extends TrackedResource {
  /**
   * @member {TopicProvisioningState} [provisioningState] Provisioning state of
   * the topic. Possible values include: 'Creating', 'Updating', 'Deleting',
   * 'Succeeded', 'Canceled', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: TopicProvisioningState;
  /**
   * @member {string} [endpoint] Endpoint for the topic.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly endpoint?: string;
  /**
   * @member {InputSchema} [inputSchema] This determines the format that Event
   * Grid should expect for incoming events published to the topic. Possible
   * values include: 'EventGridSchema', 'CustomEventSchema',
   * 'CloudEventV01Schema'. Default value: 'EventGridSchema' .
   */
  inputSchema?: InputSchema;
  /**
   * @member {InputSchemaMappingUnion} [inputSchemaMapping] This enables
   * publishing using custom event schemas. An InputSchemaMapping can be
   * specified to map various properties of a source schema to various required
   * properties of the EventGridEvent schema.
   */
  inputSchemaMapping?: InputSchemaMappingUnion;
}

/**
 * @interface
 * An interface representing TopicUpdateParameters.
 * Properties of the Topic update
 *
 */
export interface TopicUpdateParameters {
  /**
   * @member {{ [propertyName: string]: string }} [tags] Tags of the resource
   */
  tags?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing TopicSharedAccessKeys.
 * Shared access keys of the Topic
 *
 */
export interface TopicSharedAccessKeys {
  /**
   * @member {string} [key1] Shared access key1 for the topic.
   */
  key1?: string;
  /**
   * @member {string} [key2] Shared access key2 for the topic.
   */
  key2?: string;
}

/**
 * @interface
 * An interface representing TopicRegenerateKeyRequest.
 * Topic regenerate share access key request
 *
 */
export interface TopicRegenerateKeyRequest {
  /**
   * @member {string} keyName Key name to regenerate key1 or key2
   */
  keyName: string;
}

/**
 * @interface
 * An interface representing EventType.
 * Event Type for a subject under a topic
 *
 * @extends Resource
 */
export interface EventType extends Resource {
  /**
   * @member {string} [displayName] Display name of the event type.
   */
  displayName?: string;
  /**
   * @member {string} [description] Description of the event type.
   */
  description?: string;
  /**
   * @member {string} [schemaUrl] Url of the schema for this event type.
   */
  schemaUrl?: string;
}

/**
 * @interface
 * An interface representing TopicTypeInfo.
 * Properties of a topic type info.
 *
 * @extends Resource
 */
export interface TopicTypeInfo extends Resource {
  /**
   * @member {string} [provider] Namespace of the provider of the topic type.
   */
  provider?: string;
  /**
   * @member {string} [displayName] Display Name for the topic type.
   */
  displayName?: string;
  /**
   * @member {string} [description] Description of the topic type.
   */
  description?: string;
  /**
   * @member {ResourceRegionType} [resourceRegionType] Region type of the
   * resource. Possible values include: 'RegionalResource', 'GlobalResource'
   */
  resourceRegionType?: ResourceRegionType;
  /**
   * @member {TopicTypeProvisioningState} [provisioningState] Provisioning
   * state of the topic type. Possible values include: 'Creating', 'Updating',
   * 'Deleting', 'Succeeded', 'Canceled', 'Failed'
   */
  provisioningState?: TopicTypeProvisioningState;
  /**
   * @member {string[]} [supportedLocations] List of locations supported by
   * this topic type.
   */
  supportedLocations?: string[];
}

/**
 * @interface
 * An interface representing EventGridManagementClientOptions.
 * @extends AzureServiceClientOptions
 */
export interface EventGridManagementClientOptions extends AzureServiceClientOptions {
  /**
   * @member {string} [baseUri]
   */
  baseUri?: string;
}


/**
 * @interface
 * An interface representing the DomainsListResult.
 * Result of the List Domains operation
 *
 * @extends Array<Domain>
 */
export interface DomainsListResult extends Array<Domain> {
}

/**
 * @interface
 * An interface representing the DomainTopicsListResult.
 * Result of the List Domain Topics operation
 *
 * @extends Array<DomainTopic>
 */
export interface DomainTopicsListResult extends Array<DomainTopic> {
}

/**
 * @interface
 * An interface representing the EventSubscriptionsListResult.
 * Result of the List EventSubscriptions operation
 *
 * @extends Array<EventSubscription>
 */
export interface EventSubscriptionsListResult extends Array<EventSubscription> {
}

/**
 * @interface
 * An interface representing the OperationsListResult.
 * Result of the List Operations operation
 *
 * @extends Array<Operation>
 */
export interface OperationsListResult extends Array<Operation> {
}

/**
 * @interface
 * An interface representing the TopicsListResult.
 * Result of the List Topics operation
 *
 * @extends Array<Topic>
 */
export interface TopicsListResult extends Array<Topic> {
}

/**
 * @interface
 * An interface representing the EventTypesListResult.
 * Result of the List Event Types operation
 *
 * @extends Array<EventType>
 */
export interface EventTypesListResult extends Array<EventType> {
}

/**
 * @interface
 * An interface representing the TopicTypesListResult.
 * Result of the List Topic Types operation
 *
 * @extends Array<TopicTypeInfo>
 */
export interface TopicTypesListResult extends Array<TopicTypeInfo> {
}

/**
 * Defines values for DomainProvisioningState.
 * Possible values include: 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Canceled', 'Failed'
 * @readonly
 * @enum {string}
 */
export type DomainProvisioningState = 'Creating' | 'Updating' | 'Deleting' | 'Succeeded' | 'Canceled' | 'Failed';

/**
 * Defines values for InputSchema.
 * Possible values include: 'EventGridSchema', 'CustomEventSchema', 'CloudEventV01Schema'
 * @readonly
 * @enum {string}
 */
export type InputSchema = 'EventGridSchema' | 'CustomEventSchema' | 'CloudEventV01Schema';

/**
 * Defines values for EventSubscriptionProvisioningState.
 * Possible values include: 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Canceled', 'Failed',
 * 'AwaitingManualAction'
 * @readonly
 * @enum {string}
 */
export type EventSubscriptionProvisioningState = 'Creating' | 'Updating' | 'Deleting' | 'Succeeded' | 'Canceled' | 'Failed' | 'AwaitingManualAction';

/**
 * Defines values for EventDeliverySchema.
 * Possible values include: 'EventGridSchema', 'CloudEventV01Schema', 'CustomInputSchema'
 * @readonly
 * @enum {string}
 */
export type EventDeliverySchema = 'EventGridSchema' | 'CloudEventV01Schema' | 'CustomInputSchema';

/**
 * Defines values for TopicProvisioningState.
 * Possible values include: 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Canceled', 'Failed'
 * @readonly
 * @enum {string}
 */
export type TopicProvisioningState = 'Creating' | 'Updating' | 'Deleting' | 'Succeeded' | 'Canceled' | 'Failed';

/**
 * Defines values for ResourceRegionType.
 * Possible values include: 'RegionalResource', 'GlobalResource'
 * @readonly
 * @enum {string}
 */
export type ResourceRegionType = 'RegionalResource' | 'GlobalResource';

/**
 * Defines values for TopicTypeProvisioningState.
 * Possible values include: 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Canceled', 'Failed'
 * @readonly
 * @enum {string}
 */
export type TopicTypeProvisioningState = 'Creating' | 'Updating' | 'Deleting' | 'Succeeded' | 'Canceled' | 'Failed';

/**
 * Contains response data for the get operation.
 */
export type DomainsGetResponse = Domain & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Domain;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DomainsCreateOrUpdateResponse = Domain & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Domain;
    };
};

/**
 * Contains response data for the update operation.
 */
export type DomainsUpdateResponse = Domain & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Domain;
    };
};

/**
 * Contains response data for the listBySubscription operation.
 */
export type DomainsListBySubscriptionResponse = DomainsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DomainsListResult;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type DomainsListByResourceGroupResponse = DomainsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DomainsListResult;
    };
};

/**
 * Contains response data for the listSharedAccessKeys operation.
 */
export type DomainsListSharedAccessKeysResponse = DomainSharedAccessKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DomainSharedAccessKeys;
    };
};

/**
 * Contains response data for the regenerateKey operation.
 */
export type DomainsRegenerateKeyResponse = DomainSharedAccessKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DomainSharedAccessKeys;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type DomainsBeginCreateOrUpdateResponse = Domain & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Domain;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type DomainsBeginUpdateResponse = Domain & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Domain;
    };
};

/**
 * Contains response data for the get operation.
 */
export type DomainTopicsGetResponse = DomainTopic & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DomainTopic;
    };
};

/**
 * Contains response data for the listByDomain operation.
 */
export type DomainTopicsListByDomainResponse = DomainTopicsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DomainTopicsListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type EventSubscriptionsGetResponse = EventSubscription & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EventSubscription;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type EventSubscriptionsCreateOrUpdateResponse = EventSubscription & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EventSubscription;
    };
};

/**
 * Contains response data for the update operation.
 */
export type EventSubscriptionsUpdateResponse = EventSubscription & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EventSubscription;
    };
};

/**
 * Contains response data for the getFullUrl operation.
 */
export type EventSubscriptionsGetFullUrlResponse = EventSubscriptionFullUrl & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EventSubscriptionFullUrl;
    };
};

/**
 * Contains response data for the listGlobalBySubscription operation.
 */
export type EventSubscriptionsListGlobalBySubscriptionResponse = EventSubscriptionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EventSubscriptionsListResult;
    };
};

/**
 * Contains response data for the listGlobalBySubscriptionForTopicType operation.
 */
export type EventSubscriptionsListGlobalBySubscriptionForTopicTypeResponse = EventSubscriptionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EventSubscriptionsListResult;
    };
};

/**
 * Contains response data for the listGlobalByResourceGroup operation.
 */
export type EventSubscriptionsListGlobalByResourceGroupResponse = EventSubscriptionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EventSubscriptionsListResult;
    };
};

/**
 * Contains response data for the listGlobalByResourceGroupForTopicType operation.
 */
export type EventSubscriptionsListGlobalByResourceGroupForTopicTypeResponse = EventSubscriptionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EventSubscriptionsListResult;
    };
};

/**
 * Contains response data for the listRegionalBySubscription operation.
 */
export type EventSubscriptionsListRegionalBySubscriptionResponse = EventSubscriptionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EventSubscriptionsListResult;
    };
};

/**
 * Contains response data for the listRegionalByResourceGroup operation.
 */
export type EventSubscriptionsListRegionalByResourceGroupResponse = EventSubscriptionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EventSubscriptionsListResult;
    };
};

/**
 * Contains response data for the listRegionalBySubscriptionForTopicType operation.
 */
export type EventSubscriptionsListRegionalBySubscriptionForTopicTypeResponse = EventSubscriptionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EventSubscriptionsListResult;
    };
};

/**
 * Contains response data for the listRegionalByResourceGroupForTopicType operation.
 */
export type EventSubscriptionsListRegionalByResourceGroupForTopicTypeResponse = EventSubscriptionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EventSubscriptionsListResult;
    };
};

/**
 * Contains response data for the listByResource operation.
 */
export type EventSubscriptionsListByResourceResponse = EventSubscriptionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EventSubscriptionsListResult;
    };
};

/**
 * Contains response data for the listByDomainTopic operation.
 */
export type EventSubscriptionsListByDomainTopicResponse = EventSubscriptionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EventSubscriptionsListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type EventSubscriptionsBeginCreateOrUpdateResponse = EventSubscription & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EventSubscription;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type EventSubscriptionsBeginUpdateResponse = EventSubscription & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EventSubscription;
    };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationsListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type TopicsGetResponse = Topic & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Topic;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type TopicsCreateOrUpdateResponse = Topic & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Topic;
    };
};

/**
 * Contains response data for the update operation.
 */
export type TopicsUpdateResponse = Topic & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Topic;
    };
};

/**
 * Contains response data for the listBySubscription operation.
 */
export type TopicsListBySubscriptionResponse = TopicsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TopicsListResult;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type TopicsListByResourceGroupResponse = TopicsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TopicsListResult;
    };
};

/**
 * Contains response data for the listSharedAccessKeys operation.
 */
export type TopicsListSharedAccessKeysResponse = TopicSharedAccessKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TopicSharedAccessKeys;
    };
};

/**
 * Contains response data for the regenerateKey operation.
 */
export type TopicsRegenerateKeyResponse = TopicSharedAccessKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TopicSharedAccessKeys;
    };
};

/**
 * Contains response data for the listEventTypes operation.
 */
export type TopicsListEventTypesResponse = EventTypesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EventTypesListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type TopicsBeginCreateOrUpdateResponse = Topic & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Topic;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type TopicsBeginUpdateResponse = Topic & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Topic;
    };
};

/**
 * Contains response data for the list operation.
 */
export type TopicTypesListResponse = TopicTypesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TopicTypesListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type TopicTypesGetResponse = TopicTypeInfo & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TopicTypeInfo;
    };
};

/**
 * Contains response data for the listEventTypes operation.
 */
export type TopicTypesListEventTypesResponse = EventTypesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EventTypesListResult;
    };
};
