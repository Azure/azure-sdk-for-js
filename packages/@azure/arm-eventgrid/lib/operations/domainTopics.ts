/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/domainTopicsMappers";
import * as Parameters from "../models/parameters";
import { EventGridManagementClientContext } from "../eventGridManagementClientContext";

/** Class representing a DomainTopics. */
export class DomainTopics {
  private readonly client: EventGridManagementClientContext;

  /**
   * Create a DomainTopics.
   * @param {EventGridManagementClientContext} client Reference to the service client.
   */
  constructor(client: EventGridManagementClientContext) {
    this.client = client;
  }

  /**
   * Get properties of a domain topic
   * @summary Get a domain topic
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param domainName Name of the domain
   * @param topicName Name of the topic
   * @param [options] The optional parameters
   * @returns Promise<Models.DomainTopicsGetResponse>
   */
  get(resourceGroupName: string, domainName: string, topicName: string, options?: msRest.RequestOptionsBase): Promise<Models.DomainTopicsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param domainName Name of the domain
   * @param topicName Name of the topic
   * @param callback The callback
   */
  get(resourceGroupName: string, domainName: string, topicName: string, callback: msRest.ServiceCallback<Models.DomainTopic>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param domainName Name of the domain
   * @param topicName Name of the topic
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, domainName: string, topicName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DomainTopic>): void;
  get(resourceGroupName: string, domainName: string, topicName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.DomainTopic>): Promise<Models.DomainTopicsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        domainName,
        topicName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.DomainTopicsGetResponse>;
  }

  /**
   * List all the topics in a domain.
   * @summary List domain topics.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param domainName Domain name.
   * @param [options] The optional parameters
   * @returns Promise<Models.DomainTopicsListByDomainResponse>
   */
  listByDomain(resourceGroupName: string, domainName: string, options?: msRest.RequestOptionsBase): Promise<Models.DomainTopicsListByDomainResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param domainName Domain name.
   * @param callback The callback
   */
  listByDomain(resourceGroupName: string, domainName: string, callback: msRest.ServiceCallback<Models.DomainTopicsListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param domainName Domain name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByDomain(resourceGroupName: string, domainName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DomainTopicsListResult>): void;
  listByDomain(resourceGroupName: string, domainName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.DomainTopicsListResult>): Promise<Models.DomainTopicsListByDomainResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        domainName,
        options
      },
      listByDomainOperationSpec,
      callback) as Promise<Models.DomainTopicsListByDomainResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{topicName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.domainName,
    Parameters.topicName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DomainTopic
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByDomainOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.domainName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DomainTopicsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
