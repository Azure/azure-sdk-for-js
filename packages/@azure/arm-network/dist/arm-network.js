/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmNetwork = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for IPAllocationMethod.
     * Possible values include: 'Static', 'Dynamic'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: IPAllocationMethod =
     * <IPAllocationMethod>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var IPAllocationMethod;
    (function (IPAllocationMethod) {
        IPAllocationMethod["Static"] = "Static";
        IPAllocationMethod["Dynamic"] = "Dynamic";
    })(IPAllocationMethod || (IPAllocationMethod = {}));
    /**
     * Defines values for SecurityRuleProtocol.
     * Possible values include: 'Tcp', 'Udp', '*'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SecurityRuleProtocol =
     * <SecurityRuleProtocol>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SecurityRuleProtocol;
    (function (SecurityRuleProtocol) {
        SecurityRuleProtocol["Tcp"] = "Tcp";
        SecurityRuleProtocol["Udp"] = "Udp";
        SecurityRuleProtocol["Asterisk"] = "*";
    })(SecurityRuleProtocol || (SecurityRuleProtocol = {}));
    /**
     * Defines values for SecurityRuleAccess.
     * Possible values include: 'Allow', 'Deny'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SecurityRuleAccess =
     * <SecurityRuleAccess>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SecurityRuleAccess;
    (function (SecurityRuleAccess) {
        SecurityRuleAccess["Allow"] = "Allow";
        SecurityRuleAccess["Deny"] = "Deny";
    })(SecurityRuleAccess || (SecurityRuleAccess = {}));
    /**
     * Defines values for SecurityRuleDirection.
     * Possible values include: 'Inbound', 'Outbound'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SecurityRuleDirection =
     * <SecurityRuleDirection>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SecurityRuleDirection;
    (function (SecurityRuleDirection) {
        SecurityRuleDirection["Inbound"] = "Inbound";
        SecurityRuleDirection["Outbound"] = "Outbound";
    })(SecurityRuleDirection || (SecurityRuleDirection = {}));
    /**
     * Defines values for RouteNextHopType.
     * Possible values include: 'VirtualNetworkGateway', 'VnetLocal', 'Internet',
     * 'VirtualAppliance', 'None'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: RouteNextHopType =
     * <RouteNextHopType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var RouteNextHopType;
    (function (RouteNextHopType) {
        RouteNextHopType["VirtualNetworkGateway"] = "VirtualNetworkGateway";
        RouteNextHopType["VnetLocal"] = "VnetLocal";
        RouteNextHopType["Internet"] = "Internet";
        RouteNextHopType["VirtualAppliance"] = "VirtualAppliance";
        RouteNextHopType["None"] = "None";
    })(RouteNextHopType || (RouteNextHopType = {}));
    /**
     * Defines values for PublicIPAddressSkuName.
     * Possible values include: 'Basic', 'Standard'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: PublicIPAddressSkuName =
     * <PublicIPAddressSkuName>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var PublicIPAddressSkuName;
    (function (PublicIPAddressSkuName) {
        PublicIPAddressSkuName["Basic"] = "Basic";
        PublicIPAddressSkuName["Standard"] = "Standard";
    })(PublicIPAddressSkuName || (PublicIPAddressSkuName = {}));
    /**
     * Defines values for IPVersion.
     * Possible values include: 'IPv4', 'IPv6'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: IPVersion = <IPVersion>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var IPVersion;
    (function (IPVersion) {
        IPVersion["IPv4"] = "IPv4";
        IPVersion["IPv6"] = "IPv6";
    })(IPVersion || (IPVersion = {}));
    /**
     * Defines values for TransportProtocol.
     * Possible values include: 'Udp', 'Tcp', 'All'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: TransportProtocol =
     * <TransportProtocol>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var TransportProtocol;
    (function (TransportProtocol) {
        TransportProtocol["Udp"] = "Udp";
        TransportProtocol["Tcp"] = "Tcp";
        TransportProtocol["All"] = "All";
    })(TransportProtocol || (TransportProtocol = {}));
    /**
     * Defines values for ApplicationGatewayProtocol.
     * Possible values include: 'Http', 'Https'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ApplicationGatewayProtocol =
     * <ApplicationGatewayProtocol>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ApplicationGatewayProtocol;
    (function (ApplicationGatewayProtocol) {
        ApplicationGatewayProtocol["Http"] = "Http";
        ApplicationGatewayProtocol["Https"] = "Https";
    })(ApplicationGatewayProtocol || (ApplicationGatewayProtocol = {}));
    /**
     * Defines values for ApplicationGatewayCookieBasedAffinity.
     * Possible values include: 'Enabled', 'Disabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ApplicationGatewayCookieBasedAffinity =
     * <ApplicationGatewayCookieBasedAffinity>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ApplicationGatewayCookieBasedAffinity;
    (function (ApplicationGatewayCookieBasedAffinity) {
        ApplicationGatewayCookieBasedAffinity["Enabled"] = "Enabled";
        ApplicationGatewayCookieBasedAffinity["Disabled"] = "Disabled";
    })(ApplicationGatewayCookieBasedAffinity || (ApplicationGatewayCookieBasedAffinity = {}));
    /**
     * Defines values for ApplicationGatewayBackendHealthServerHealth.
     * Possible values include: 'Unknown', 'Up', 'Down', 'Partial', 'Draining'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ApplicationGatewayBackendHealthServerHealth =
     * <ApplicationGatewayBackendHealthServerHealth>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ApplicationGatewayBackendHealthServerHealth;
    (function (ApplicationGatewayBackendHealthServerHealth) {
        ApplicationGatewayBackendHealthServerHealth["Unknown"] = "Unknown";
        ApplicationGatewayBackendHealthServerHealth["Up"] = "Up";
        ApplicationGatewayBackendHealthServerHealth["Down"] = "Down";
        ApplicationGatewayBackendHealthServerHealth["Partial"] = "Partial";
        ApplicationGatewayBackendHealthServerHealth["Draining"] = "Draining";
    })(ApplicationGatewayBackendHealthServerHealth || (ApplicationGatewayBackendHealthServerHealth = {}));
    /**
     * Defines values for ApplicationGatewaySkuName.
     * Possible values include: 'Standard_Small', 'Standard_Medium',
     * 'Standard_Large', 'WAF_Medium', 'WAF_Large', 'Standard_v2', 'WAF_v2'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ApplicationGatewaySkuName =
     * <ApplicationGatewaySkuName>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ApplicationGatewaySkuName;
    (function (ApplicationGatewaySkuName) {
        ApplicationGatewaySkuName["StandardSmall"] = "Standard_Small";
        ApplicationGatewaySkuName["StandardMedium"] = "Standard_Medium";
        ApplicationGatewaySkuName["StandardLarge"] = "Standard_Large";
        ApplicationGatewaySkuName["WAFMedium"] = "WAF_Medium";
        ApplicationGatewaySkuName["WAFLarge"] = "WAF_Large";
        ApplicationGatewaySkuName["StandardV2"] = "Standard_v2";
        ApplicationGatewaySkuName["WAFV2"] = "WAF_v2";
    })(ApplicationGatewaySkuName || (ApplicationGatewaySkuName = {}));
    /**
     * Defines values for ApplicationGatewayTier.
     * Possible values include: 'Standard', 'WAF', 'Standard_v2', 'WAF_v2'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ApplicationGatewayTier =
     * <ApplicationGatewayTier>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ApplicationGatewayTier;
    (function (ApplicationGatewayTier) {
        ApplicationGatewayTier["Standard"] = "Standard";
        ApplicationGatewayTier["WAF"] = "WAF";
        ApplicationGatewayTier["StandardV2"] = "Standard_v2";
        ApplicationGatewayTier["WAFV2"] = "WAF_v2";
    })(ApplicationGatewayTier || (ApplicationGatewayTier = {}));
    /**
     * Defines values for ApplicationGatewaySslProtocol.
     * Possible values include: 'TLSv1_0', 'TLSv1_1', 'TLSv1_2'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ApplicationGatewaySslProtocol =
     * <ApplicationGatewaySslProtocol>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ApplicationGatewaySslProtocol;
    (function (ApplicationGatewaySslProtocol) {
        ApplicationGatewaySslProtocol["TLSv10"] = "TLSv1_0";
        ApplicationGatewaySslProtocol["TLSv11"] = "TLSv1_1";
        ApplicationGatewaySslProtocol["TLSv12"] = "TLSv1_2";
    })(ApplicationGatewaySslProtocol || (ApplicationGatewaySslProtocol = {}));
    /**
     * Defines values for ApplicationGatewaySslPolicyType.
     * Possible values include: 'Predefined', 'Custom'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ApplicationGatewaySslPolicyType =
     * <ApplicationGatewaySslPolicyType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ApplicationGatewaySslPolicyType;
    (function (ApplicationGatewaySslPolicyType) {
        ApplicationGatewaySslPolicyType["Predefined"] = "Predefined";
        ApplicationGatewaySslPolicyType["Custom"] = "Custom";
    })(ApplicationGatewaySslPolicyType || (ApplicationGatewaySslPolicyType = {}));
    /**
     * Defines values for ApplicationGatewaySslPolicyName.
     * Possible values include: 'AppGwSslPolicy20150501', 'AppGwSslPolicy20170401',
     * 'AppGwSslPolicy20170401S'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ApplicationGatewaySslPolicyName =
     * <ApplicationGatewaySslPolicyName>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ApplicationGatewaySslPolicyName;
    (function (ApplicationGatewaySslPolicyName) {
        ApplicationGatewaySslPolicyName["AppGwSslPolicy20150501"] = "AppGwSslPolicy20150501";
        ApplicationGatewaySslPolicyName["AppGwSslPolicy20170401"] = "AppGwSslPolicy20170401";
        ApplicationGatewaySslPolicyName["AppGwSslPolicy20170401S"] = "AppGwSslPolicy20170401S";
    })(ApplicationGatewaySslPolicyName || (ApplicationGatewaySslPolicyName = {}));
    /**
     * Defines values for ApplicationGatewaySslCipherSuite.
     * Possible values include: 'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384',
     * 'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256',
     * 'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA', 'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA',
     * 'TLS_DHE_RSA_WITH_AES_256_GCM_SHA384',
     * 'TLS_DHE_RSA_WITH_AES_128_GCM_SHA256', 'TLS_DHE_RSA_WITH_AES_256_CBC_SHA',
     * 'TLS_DHE_RSA_WITH_AES_128_CBC_SHA', 'TLS_RSA_WITH_AES_256_GCM_SHA384',
     * 'TLS_RSA_WITH_AES_128_GCM_SHA256', 'TLS_RSA_WITH_AES_256_CBC_SHA256',
     * 'TLS_RSA_WITH_AES_128_CBC_SHA256', 'TLS_RSA_WITH_AES_256_CBC_SHA',
     * 'TLS_RSA_WITH_AES_128_CBC_SHA', 'TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384',
     * 'TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256',
     * 'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384',
     * 'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256',
     * 'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA',
     * 'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA',
     * 'TLS_DHE_DSS_WITH_AES_256_CBC_SHA256',
     * 'TLS_DHE_DSS_WITH_AES_128_CBC_SHA256', 'TLS_DHE_DSS_WITH_AES_256_CBC_SHA',
     * 'TLS_DHE_DSS_WITH_AES_128_CBC_SHA', 'TLS_RSA_WITH_3DES_EDE_CBC_SHA'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ApplicationGatewaySslCipherSuite =
     * <ApplicationGatewaySslCipherSuite>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ApplicationGatewaySslCipherSuite;
    (function (ApplicationGatewaySslCipherSuite) {
        ApplicationGatewaySslCipherSuite["TLSECDHERSAWITHAES256CBCSHA384"] = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384";
        ApplicationGatewaySslCipherSuite["TLSECDHERSAWITHAES128CBCSHA256"] = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256";
        ApplicationGatewaySslCipherSuite["TLSECDHERSAWITHAES256CBCSHA"] = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA";
        ApplicationGatewaySslCipherSuite["TLSECDHERSAWITHAES128CBCSHA"] = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA";
        ApplicationGatewaySslCipherSuite["TLSDHERSAWITHAES256GCMSHA384"] = "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384";
        ApplicationGatewaySslCipherSuite["TLSDHERSAWITHAES128GCMSHA256"] = "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256";
        ApplicationGatewaySslCipherSuite["TLSDHERSAWITHAES256CBCSHA"] = "TLS_DHE_RSA_WITH_AES_256_CBC_SHA";
        ApplicationGatewaySslCipherSuite["TLSDHERSAWITHAES128CBCSHA"] = "TLS_DHE_RSA_WITH_AES_128_CBC_SHA";
        ApplicationGatewaySslCipherSuite["TLSRSAWITHAES256GCMSHA384"] = "TLS_RSA_WITH_AES_256_GCM_SHA384";
        ApplicationGatewaySslCipherSuite["TLSRSAWITHAES128GCMSHA256"] = "TLS_RSA_WITH_AES_128_GCM_SHA256";
        ApplicationGatewaySslCipherSuite["TLSRSAWITHAES256CBCSHA256"] = "TLS_RSA_WITH_AES_256_CBC_SHA256";
        ApplicationGatewaySslCipherSuite["TLSRSAWITHAES128CBCSHA256"] = "TLS_RSA_WITH_AES_128_CBC_SHA256";
        ApplicationGatewaySslCipherSuite["TLSRSAWITHAES256CBCSHA"] = "TLS_RSA_WITH_AES_256_CBC_SHA";
        ApplicationGatewaySslCipherSuite["TLSRSAWITHAES128CBCSHA"] = "TLS_RSA_WITH_AES_128_CBC_SHA";
        ApplicationGatewaySslCipherSuite["TLSECDHEECDSAWITHAES256GCMSHA384"] = "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384";
        ApplicationGatewaySslCipherSuite["TLSECDHEECDSAWITHAES128GCMSHA256"] = "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256";
        ApplicationGatewaySslCipherSuite["TLSECDHEECDSAWITHAES256CBCSHA384"] = "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384";
        ApplicationGatewaySslCipherSuite["TLSECDHEECDSAWITHAES128CBCSHA256"] = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256";
        ApplicationGatewaySslCipherSuite["TLSECDHEECDSAWITHAES256CBCSHA"] = "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA";
        ApplicationGatewaySslCipherSuite["TLSECDHEECDSAWITHAES128CBCSHA"] = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA";
        ApplicationGatewaySslCipherSuite["TLSDHEDSSWITHAES256CBCSHA256"] = "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256";
        ApplicationGatewaySslCipherSuite["TLSDHEDSSWITHAES128CBCSHA256"] = "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256";
        ApplicationGatewaySslCipherSuite["TLSDHEDSSWITHAES256CBCSHA"] = "TLS_DHE_DSS_WITH_AES_256_CBC_SHA";
        ApplicationGatewaySslCipherSuite["TLSDHEDSSWITHAES128CBCSHA"] = "TLS_DHE_DSS_WITH_AES_128_CBC_SHA";
        ApplicationGatewaySslCipherSuite["TLSRSAWITH3DESEDECBCSHA"] = "TLS_RSA_WITH_3DES_EDE_CBC_SHA";
    })(ApplicationGatewaySslCipherSuite || (ApplicationGatewaySslCipherSuite = {}));
    /**
     * Defines values for ApplicationGatewayRequestRoutingRuleType.
     * Possible values include: 'Basic', 'PathBasedRouting'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ApplicationGatewayRequestRoutingRuleType =
     * <ApplicationGatewayRequestRoutingRuleType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ApplicationGatewayRequestRoutingRuleType;
    (function (ApplicationGatewayRequestRoutingRuleType) {
        ApplicationGatewayRequestRoutingRuleType["Basic"] = "Basic";
        ApplicationGatewayRequestRoutingRuleType["PathBasedRouting"] = "PathBasedRouting";
    })(ApplicationGatewayRequestRoutingRuleType || (ApplicationGatewayRequestRoutingRuleType = {}));
    /**
     * Defines values for ApplicationGatewayRedirectType.
     * Possible values include: 'Permanent', 'Found', 'SeeOther', 'Temporary'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ApplicationGatewayRedirectType =
     * <ApplicationGatewayRedirectType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ApplicationGatewayRedirectType;
    (function (ApplicationGatewayRedirectType) {
        ApplicationGatewayRedirectType["Permanent"] = "Permanent";
        ApplicationGatewayRedirectType["Found"] = "Found";
        ApplicationGatewayRedirectType["SeeOther"] = "SeeOther";
        ApplicationGatewayRedirectType["Temporary"] = "Temporary";
    })(ApplicationGatewayRedirectType || (ApplicationGatewayRedirectType = {}));
    /**
     * Defines values for ApplicationGatewayOperationalState.
     * Possible values include: 'Stopped', 'Starting', 'Running', 'Stopping'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ApplicationGatewayOperationalState =
     * <ApplicationGatewayOperationalState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ApplicationGatewayOperationalState;
    (function (ApplicationGatewayOperationalState) {
        ApplicationGatewayOperationalState["Stopped"] = "Stopped";
        ApplicationGatewayOperationalState["Starting"] = "Starting";
        ApplicationGatewayOperationalState["Running"] = "Running";
        ApplicationGatewayOperationalState["Stopping"] = "Stopping";
    })(ApplicationGatewayOperationalState || (ApplicationGatewayOperationalState = {}));
    /**
     * Defines values for ApplicationGatewayFirewallMode.
     * Possible values include: 'Detection', 'Prevention'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ApplicationGatewayFirewallMode =
     * <ApplicationGatewayFirewallMode>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ApplicationGatewayFirewallMode;
    (function (ApplicationGatewayFirewallMode) {
        ApplicationGatewayFirewallMode["Detection"] = "Detection";
        ApplicationGatewayFirewallMode["Prevention"] = "Prevention";
    })(ApplicationGatewayFirewallMode || (ApplicationGatewayFirewallMode = {}));
    /**
     * Defines values for ProvisioningState.
     * Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ProvisioningState =
     * <ProvisioningState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ProvisioningState;
    (function (ProvisioningState) {
        ProvisioningState["Succeeded"] = "Succeeded";
        ProvisioningState["Updating"] = "Updating";
        ProvisioningState["Deleting"] = "Deleting";
        ProvisioningState["Failed"] = "Failed";
    })(ProvisioningState || (ProvisioningState = {}));
    /**
     * Defines values for AzureFirewallRCActionType.
     * Possible values include: 'Allow', 'Deny'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: AzureFirewallRCActionType =
     * <AzureFirewallRCActionType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var AzureFirewallRCActionType;
    (function (AzureFirewallRCActionType) {
        AzureFirewallRCActionType["Allow"] = "Allow";
        AzureFirewallRCActionType["Deny"] = "Deny";
    })(AzureFirewallRCActionType || (AzureFirewallRCActionType = {}));
    /**
     * Defines values for AzureFirewallApplicationRuleProtocolType.
     * Possible values include: 'Http', 'Https'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: AzureFirewallApplicationRuleProtocolType =
     * <AzureFirewallApplicationRuleProtocolType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var AzureFirewallApplicationRuleProtocolType;
    (function (AzureFirewallApplicationRuleProtocolType) {
        AzureFirewallApplicationRuleProtocolType["Http"] = "Http";
        AzureFirewallApplicationRuleProtocolType["Https"] = "Https";
    })(AzureFirewallApplicationRuleProtocolType || (AzureFirewallApplicationRuleProtocolType = {}));
    /**
     * Defines values for AzureFirewallNatRCActionType.
     * Possible values include: 'Snat', 'Dnat'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: AzureFirewallNatRCActionType =
     * <AzureFirewallNatRCActionType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var AzureFirewallNatRCActionType;
    (function (AzureFirewallNatRCActionType) {
        AzureFirewallNatRCActionType["Snat"] = "Snat";
        AzureFirewallNatRCActionType["Dnat"] = "Dnat";
    })(AzureFirewallNatRCActionType || (AzureFirewallNatRCActionType = {}));
    /**
     * Defines values for AzureFirewallNetworkRuleProtocol.
     * Possible values include: 'TCP', 'UDP', 'Any'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: AzureFirewallNetworkRuleProtocol =
     * <AzureFirewallNetworkRuleProtocol>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var AzureFirewallNetworkRuleProtocol;
    (function (AzureFirewallNetworkRuleProtocol) {
        AzureFirewallNetworkRuleProtocol["TCP"] = "TCP";
        AzureFirewallNetworkRuleProtocol["UDP"] = "UDP";
        AzureFirewallNetworkRuleProtocol["Any"] = "Any";
    })(AzureFirewallNetworkRuleProtocol || (AzureFirewallNetworkRuleProtocol = {}));
    /**
     * Defines values for AuthorizationUseStatus.
     * Possible values include: 'Available', 'InUse'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: AuthorizationUseStatus =
     * <AuthorizationUseStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var AuthorizationUseStatus;
    (function (AuthorizationUseStatus) {
        AuthorizationUseStatus["Available"] = "Available";
        AuthorizationUseStatus["InUse"] = "InUse";
    })(AuthorizationUseStatus || (AuthorizationUseStatus = {}));
    /**
     * Defines values for ExpressRouteCircuitPeeringAdvertisedPublicPrefixState.
     * Possible values include: 'NotConfigured', 'Configuring', 'Configured',
     * 'ValidationNeeded'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ExpressRouteCircuitPeeringAdvertisedPublicPrefixState =
     * <ExpressRouteCircuitPeeringAdvertisedPublicPrefixState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ExpressRouteCircuitPeeringAdvertisedPublicPrefixState;
    (function (ExpressRouteCircuitPeeringAdvertisedPublicPrefixState) {
        ExpressRouteCircuitPeeringAdvertisedPublicPrefixState["NotConfigured"] = "NotConfigured";
        ExpressRouteCircuitPeeringAdvertisedPublicPrefixState["Configuring"] = "Configuring";
        ExpressRouteCircuitPeeringAdvertisedPublicPrefixState["Configured"] = "Configured";
        ExpressRouteCircuitPeeringAdvertisedPublicPrefixState["ValidationNeeded"] = "ValidationNeeded";
    })(ExpressRouteCircuitPeeringAdvertisedPublicPrefixState || (ExpressRouteCircuitPeeringAdvertisedPublicPrefixState = {}));
    /**
     * Defines values for Access.
     * Possible values include: 'Allow', 'Deny'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Access = <Access>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Access;
    (function (Access) {
        Access["Allow"] = "Allow";
        Access["Deny"] = "Deny";
    })(Access || (Access = {}));
    /**
     * Defines values for ExpressRoutePeeringType.
     * Possible values include: 'AzurePublicPeering', 'AzurePrivatePeering',
     * 'MicrosoftPeering'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ExpressRoutePeeringType =
     * <ExpressRoutePeeringType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ExpressRoutePeeringType;
    (function (ExpressRoutePeeringType) {
        ExpressRoutePeeringType["AzurePublicPeering"] = "AzurePublicPeering";
        ExpressRoutePeeringType["AzurePrivatePeering"] = "AzurePrivatePeering";
        ExpressRoutePeeringType["MicrosoftPeering"] = "MicrosoftPeering";
    })(ExpressRoutePeeringType || (ExpressRoutePeeringType = {}));
    /**
     * Defines values for ExpressRoutePeeringState.
     * Possible values include: 'Disabled', 'Enabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ExpressRoutePeeringState =
     * <ExpressRoutePeeringState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ExpressRoutePeeringState;
    (function (ExpressRoutePeeringState) {
        ExpressRoutePeeringState["Disabled"] = "Disabled";
        ExpressRoutePeeringState["Enabled"] = "Enabled";
    })(ExpressRoutePeeringState || (ExpressRoutePeeringState = {}));
    /**
     * Defines values for CircuitConnectionStatus.
     * Possible values include: 'Connected', 'Connecting', 'Disconnected'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: CircuitConnectionStatus =
     * <CircuitConnectionStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var CircuitConnectionStatus;
    (function (CircuitConnectionStatus) {
        CircuitConnectionStatus["Connected"] = "Connected";
        CircuitConnectionStatus["Connecting"] = "Connecting";
        CircuitConnectionStatus["Disconnected"] = "Disconnected";
    })(CircuitConnectionStatus || (CircuitConnectionStatus = {}));
    /**
     * Defines values for ExpressRouteCircuitPeeringState.
     * Possible values include: 'Disabled', 'Enabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ExpressRouteCircuitPeeringState =
     * <ExpressRouteCircuitPeeringState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ExpressRouteCircuitPeeringState;
    (function (ExpressRouteCircuitPeeringState) {
        ExpressRouteCircuitPeeringState["Disabled"] = "Disabled";
        ExpressRouteCircuitPeeringState["Enabled"] = "Enabled";
    })(ExpressRouteCircuitPeeringState || (ExpressRouteCircuitPeeringState = {}));
    /**
     * Defines values for ExpressRouteCircuitSkuTier.
     * Possible values include: 'Standard', 'Premium'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ExpressRouteCircuitSkuTier =
     * <ExpressRouteCircuitSkuTier>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ExpressRouteCircuitSkuTier;
    (function (ExpressRouteCircuitSkuTier) {
        ExpressRouteCircuitSkuTier["Standard"] = "Standard";
        ExpressRouteCircuitSkuTier["Premium"] = "Premium";
    })(ExpressRouteCircuitSkuTier || (ExpressRouteCircuitSkuTier = {}));
    /**
     * Defines values for ExpressRouteCircuitSkuFamily.
     * Possible values include: 'UnlimitedData', 'MeteredData'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ExpressRouteCircuitSkuFamily =
     * <ExpressRouteCircuitSkuFamily>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ExpressRouteCircuitSkuFamily;
    (function (ExpressRouteCircuitSkuFamily) {
        ExpressRouteCircuitSkuFamily["UnlimitedData"] = "UnlimitedData";
        ExpressRouteCircuitSkuFamily["MeteredData"] = "MeteredData";
    })(ExpressRouteCircuitSkuFamily || (ExpressRouteCircuitSkuFamily = {}));
    /**
     * Defines values for ServiceProviderProvisioningState.
     * Possible values include: 'NotProvisioned', 'Provisioning', 'Provisioned',
     * 'Deprovisioning'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ServiceProviderProvisioningState =
     * <ServiceProviderProvisioningState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ServiceProviderProvisioningState;
    (function (ServiceProviderProvisioningState) {
        ServiceProviderProvisioningState["NotProvisioned"] = "NotProvisioned";
        ServiceProviderProvisioningState["Provisioning"] = "Provisioning";
        ServiceProviderProvisioningState["Provisioned"] = "Provisioned";
        ServiceProviderProvisioningState["Deprovisioning"] = "Deprovisioning";
    })(ServiceProviderProvisioningState || (ServiceProviderProvisioningState = {}));
    /**
     * Defines values for LoadBalancerSkuName.
     * Possible values include: 'Basic', 'Standard'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: LoadBalancerSkuName =
     * <LoadBalancerSkuName>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var LoadBalancerSkuName;
    (function (LoadBalancerSkuName) {
        LoadBalancerSkuName["Basic"] = "Basic";
        LoadBalancerSkuName["Standard"] = "Standard";
    })(LoadBalancerSkuName || (LoadBalancerSkuName = {}));
    /**
     * Defines values for LoadDistribution.
     * Possible values include: 'Default', 'SourceIP', 'SourceIPProtocol'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: LoadDistribution =
     * <LoadDistribution>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var LoadDistribution;
    (function (LoadDistribution) {
        LoadDistribution["Default"] = "Default";
        LoadDistribution["SourceIP"] = "SourceIP";
        LoadDistribution["SourceIPProtocol"] = "SourceIPProtocol";
    })(LoadDistribution || (LoadDistribution = {}));
    /**
     * Defines values for ProbeProtocol.
     * Possible values include: 'Http', 'Tcp', 'Https'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ProbeProtocol =
     * <ProbeProtocol>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ProbeProtocol;
    (function (ProbeProtocol) {
        ProbeProtocol["Http"] = "Http";
        ProbeProtocol["Tcp"] = "Tcp";
        ProbeProtocol["Https"] = "Https";
    })(ProbeProtocol || (ProbeProtocol = {}));
    /**
     * Defines values for NetworkOperationStatus.
     * Possible values include: 'InProgress', 'Succeeded', 'Failed'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: NetworkOperationStatus =
     * <NetworkOperationStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var NetworkOperationStatus;
    (function (NetworkOperationStatus) {
        NetworkOperationStatus["InProgress"] = "InProgress";
        NetworkOperationStatus["Succeeded"] = "Succeeded";
        NetworkOperationStatus["Failed"] = "Failed";
    })(NetworkOperationStatus || (NetworkOperationStatus = {}));
    /**
     * Defines values for EffectiveSecurityRuleProtocol.
     * Possible values include: 'Tcp', 'Udp', 'All'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: EffectiveSecurityRuleProtocol =
     * <EffectiveSecurityRuleProtocol>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var EffectiveSecurityRuleProtocol;
    (function (EffectiveSecurityRuleProtocol) {
        EffectiveSecurityRuleProtocol["Tcp"] = "Tcp";
        EffectiveSecurityRuleProtocol["Udp"] = "Udp";
        EffectiveSecurityRuleProtocol["All"] = "All";
    })(EffectiveSecurityRuleProtocol || (EffectiveSecurityRuleProtocol = {}));
    /**
     * Defines values for EffectiveRouteSource.
     * Possible values include: 'Unknown', 'User', 'VirtualNetworkGateway',
     * 'Default'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: EffectiveRouteSource =
     * <EffectiveRouteSource>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var EffectiveRouteSource;
    (function (EffectiveRouteSource) {
        EffectiveRouteSource["Unknown"] = "Unknown";
        EffectiveRouteSource["User"] = "User";
        EffectiveRouteSource["VirtualNetworkGateway"] = "VirtualNetworkGateway";
        EffectiveRouteSource["Default"] = "Default";
    })(EffectiveRouteSource || (EffectiveRouteSource = {}));
    /**
     * Defines values for EffectiveRouteState.
     * Possible values include: 'Active', 'Invalid'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: EffectiveRouteState =
     * <EffectiveRouteState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var EffectiveRouteState;
    (function (EffectiveRouteState) {
        EffectiveRouteState["Active"] = "Active";
        EffectiveRouteState["Invalid"] = "Invalid";
    })(EffectiveRouteState || (EffectiveRouteState = {}));
    /**
     * Defines values for AssociationType.
     * Possible values include: 'Associated', 'Contains'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: AssociationType =
     * <AssociationType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var AssociationType;
    (function (AssociationType) {
        AssociationType["Associated"] = "Associated";
        AssociationType["Contains"] = "Contains";
    })(AssociationType || (AssociationType = {}));
    /**
     * Defines values for Direction.
     * Possible values include: 'Inbound', 'Outbound'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Direction = <Direction>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Direction;
    (function (Direction) {
        Direction["Inbound"] = "Inbound";
        Direction["Outbound"] = "Outbound";
    })(Direction || (Direction = {}));
    /**
     * Defines values for IpFlowProtocol.
     * Possible values include: 'TCP', 'UDP'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: IpFlowProtocol =
     * <IpFlowProtocol>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var IpFlowProtocol;
    (function (IpFlowProtocol) {
        IpFlowProtocol["TCP"] = "TCP";
        IpFlowProtocol["UDP"] = "UDP";
    })(IpFlowProtocol || (IpFlowProtocol = {}));
    /**
     * Defines values for NextHopType.
     * Possible values include: 'Internet', 'VirtualAppliance',
     * 'VirtualNetworkGateway', 'VnetLocal', 'HyperNetGateway', 'None'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: NextHopType =
     * <NextHopType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var NextHopType;
    (function (NextHopType) {
        NextHopType["Internet"] = "Internet";
        NextHopType["VirtualAppliance"] = "VirtualAppliance";
        NextHopType["VirtualNetworkGateway"] = "VirtualNetworkGateway";
        NextHopType["VnetLocal"] = "VnetLocal";
        NextHopType["HyperNetGateway"] = "HyperNetGateway";
        NextHopType["None"] = "None";
    })(NextHopType || (NextHopType = {}));
    /**
     * Defines values for PcProtocol.
     * Possible values include: 'TCP', 'UDP', 'Any'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: PcProtocol = <PcProtocol>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var PcProtocol;
    (function (PcProtocol) {
        PcProtocol["TCP"] = "TCP";
        PcProtocol["UDP"] = "UDP";
        PcProtocol["Any"] = "Any";
    })(PcProtocol || (PcProtocol = {}));
    /**
     * Defines values for PcStatus.
     * Possible values include: 'NotStarted', 'Running', 'Stopped', 'Error',
     * 'Unknown'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: PcStatus = <PcStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var PcStatus;
    (function (PcStatus) {
        PcStatus["NotStarted"] = "NotStarted";
        PcStatus["Running"] = "Running";
        PcStatus["Stopped"] = "Stopped";
        PcStatus["Error"] = "Error";
        PcStatus["Unknown"] = "Unknown";
    })(PcStatus || (PcStatus = {}));
    /**
     * Defines values for PcError.
     * Possible values include: 'InternalError', 'AgentStopped', 'CaptureFailed',
     * 'LocalFileFailed', 'StorageFailed'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: PcError = <PcError>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var PcError;
    (function (PcError) {
        PcError["InternalError"] = "InternalError";
        PcError["AgentStopped"] = "AgentStopped";
        PcError["CaptureFailed"] = "CaptureFailed";
        PcError["LocalFileFailed"] = "LocalFileFailed";
        PcError["StorageFailed"] = "StorageFailed";
    })(PcError || (PcError = {}));
    /**
     * Defines values for Protocol.
     * Possible values include: 'Tcp', 'Http', 'Https', 'Icmp'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Protocol = <Protocol>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Protocol;
    (function (Protocol) {
        Protocol["Tcp"] = "Tcp";
        Protocol["Http"] = "Http";
        Protocol["Https"] = "Https";
        Protocol["Icmp"] = "Icmp";
    })(Protocol || (Protocol = {}));
    /**
     * Defines values for HTTPMethod.
     * Possible values include: 'Get'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: HTTPMethod = <HTTPMethod>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var HTTPMethod;
    (function (HTTPMethod) {
        HTTPMethod["Get"] = "Get";
    })(HTTPMethod || (HTTPMethod = {}));
    /**
     * Defines values for Origin.
     * Possible values include: 'Local', 'Inbound', 'Outbound'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Origin = <Origin>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Origin;
    (function (Origin) {
        Origin["Local"] = "Local";
        Origin["Inbound"] = "Inbound";
        Origin["Outbound"] = "Outbound";
    })(Origin || (Origin = {}));
    /**
     * Defines values for Severity.
     * Possible values include: 'Error', 'Warning'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Severity = <Severity>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Severity;
    (function (Severity) {
        Severity["Error"] = "Error";
        Severity["Warning"] = "Warning";
    })(Severity || (Severity = {}));
    /**
     * Defines values for IssueType.
     * Possible values include: 'Unknown', 'AgentStopped', 'GuestFirewall',
     * 'DnsResolution', 'SocketBind', 'NetworkSecurityRule', 'UserDefinedRoute',
     * 'PortThrottled', 'Platform'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: IssueType = <IssueType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var IssueType;
    (function (IssueType) {
        IssueType["Unknown"] = "Unknown";
        IssueType["AgentStopped"] = "AgentStopped";
        IssueType["GuestFirewall"] = "GuestFirewall";
        IssueType["DnsResolution"] = "DnsResolution";
        IssueType["SocketBind"] = "SocketBind";
        IssueType["NetworkSecurityRule"] = "NetworkSecurityRule";
        IssueType["UserDefinedRoute"] = "UserDefinedRoute";
        IssueType["PortThrottled"] = "PortThrottled";
        IssueType["Platform"] = "Platform";
    })(IssueType || (IssueType = {}));
    /**
     * Defines values for ConnectionStatus.
     * Possible values include: 'Unknown', 'Connected', 'Disconnected', 'Degraded'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ConnectionStatus =
     * <ConnectionStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ConnectionStatus;
    (function (ConnectionStatus) {
        ConnectionStatus["Unknown"] = "Unknown";
        ConnectionStatus["Connected"] = "Connected";
        ConnectionStatus["Disconnected"] = "Disconnected";
        ConnectionStatus["Degraded"] = "Degraded";
    })(ConnectionStatus || (ConnectionStatus = {}));
    /**
     * Defines values for ConnectionMonitorSourceStatus.
     * Possible values include: 'Uknown', 'Active', 'Inactive'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ConnectionMonitorSourceStatus =
     * <ConnectionMonitorSourceStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ConnectionMonitorSourceStatus;
    (function (ConnectionMonitorSourceStatus) {
        ConnectionMonitorSourceStatus["Uknown"] = "Uknown";
        ConnectionMonitorSourceStatus["Active"] = "Active";
        ConnectionMonitorSourceStatus["Inactive"] = "Inactive";
    })(ConnectionMonitorSourceStatus || (ConnectionMonitorSourceStatus = {}));
    /**
     * Defines values for ConnectionState.
     * Possible values include: 'Reachable', 'Unreachable', 'Unknown'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ConnectionState =
     * <ConnectionState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ConnectionState;
    (function (ConnectionState) {
        ConnectionState["Reachable"] = "Reachable";
        ConnectionState["Unreachable"] = "Unreachable";
        ConnectionState["Unknown"] = "Unknown";
    })(ConnectionState || (ConnectionState = {}));
    /**
     * Defines values for EvaluationState.
     * Possible values include: 'NotStarted', 'InProgress', 'Completed'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: EvaluationState =
     * <EvaluationState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var EvaluationState;
    (function (EvaluationState) {
        EvaluationState["NotStarted"] = "NotStarted";
        EvaluationState["InProgress"] = "InProgress";
        EvaluationState["Completed"] = "Completed";
    })(EvaluationState || (EvaluationState = {}));
    /**
     * Defines values for PublicIPPrefixSkuName.
     * Possible values include: 'Standard'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: PublicIPPrefixSkuName =
     * <PublicIPPrefixSkuName>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var PublicIPPrefixSkuName;
    (function (PublicIPPrefixSkuName) {
        PublicIPPrefixSkuName["Standard"] = "Standard";
    })(PublicIPPrefixSkuName || (PublicIPPrefixSkuName = {}));
    /**
     * Defines values for VirtualNetworkPeeringState.
     * Possible values include: 'Initiated', 'Connected', 'Disconnected'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: VirtualNetworkPeeringState =
     * <VirtualNetworkPeeringState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var VirtualNetworkPeeringState;
    (function (VirtualNetworkPeeringState) {
        VirtualNetworkPeeringState["Initiated"] = "Initiated";
        VirtualNetworkPeeringState["Connected"] = "Connected";
        VirtualNetworkPeeringState["Disconnected"] = "Disconnected";
    })(VirtualNetworkPeeringState || (VirtualNetworkPeeringState = {}));
    /**
     * Defines values for VirtualNetworkGatewayType.
     * Possible values include: 'Vpn', 'ExpressRoute'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: VirtualNetworkGatewayType =
     * <VirtualNetworkGatewayType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var VirtualNetworkGatewayType;
    (function (VirtualNetworkGatewayType) {
        VirtualNetworkGatewayType["Vpn"] = "Vpn";
        VirtualNetworkGatewayType["ExpressRoute"] = "ExpressRoute";
    })(VirtualNetworkGatewayType || (VirtualNetworkGatewayType = {}));
    /**
     * Defines values for VpnType.
     * Possible values include: 'PolicyBased', 'RouteBased'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: VpnType = <VpnType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var VpnType;
    (function (VpnType) {
        VpnType["PolicyBased"] = "PolicyBased";
        VpnType["RouteBased"] = "RouteBased";
    })(VpnType || (VpnType = {}));
    /**
     * Defines values for VirtualNetworkGatewaySkuName.
     * Possible values include: 'Basic', 'HighPerformance', 'Standard',
     * 'UltraPerformance', 'VpnGw1', 'VpnGw2', 'VpnGw3', 'VpnGw1AZ', 'VpnGw2AZ',
     * 'VpnGw3AZ', 'ErGw1AZ', 'ErGw2AZ', 'ErGw3AZ'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: VirtualNetworkGatewaySkuName =
     * <VirtualNetworkGatewaySkuName>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var VirtualNetworkGatewaySkuName;
    (function (VirtualNetworkGatewaySkuName) {
        VirtualNetworkGatewaySkuName["Basic"] = "Basic";
        VirtualNetworkGatewaySkuName["HighPerformance"] = "HighPerformance";
        VirtualNetworkGatewaySkuName["Standard"] = "Standard";
        VirtualNetworkGatewaySkuName["UltraPerformance"] = "UltraPerformance";
        VirtualNetworkGatewaySkuName["VpnGw1"] = "VpnGw1";
        VirtualNetworkGatewaySkuName["VpnGw2"] = "VpnGw2";
        VirtualNetworkGatewaySkuName["VpnGw3"] = "VpnGw3";
        VirtualNetworkGatewaySkuName["VpnGw1AZ"] = "VpnGw1AZ";
        VirtualNetworkGatewaySkuName["VpnGw2AZ"] = "VpnGw2AZ";
        VirtualNetworkGatewaySkuName["VpnGw3AZ"] = "VpnGw3AZ";
        VirtualNetworkGatewaySkuName["ErGw1AZ"] = "ErGw1AZ";
        VirtualNetworkGatewaySkuName["ErGw2AZ"] = "ErGw2AZ";
        VirtualNetworkGatewaySkuName["ErGw3AZ"] = "ErGw3AZ";
    })(VirtualNetworkGatewaySkuName || (VirtualNetworkGatewaySkuName = {}));
    /**
     * Defines values for VirtualNetworkGatewaySkuTier.
     * Possible values include: 'Basic', 'HighPerformance', 'Standard',
     * 'UltraPerformance', 'VpnGw1', 'VpnGw2', 'VpnGw3', 'VpnGw1AZ', 'VpnGw2AZ',
     * 'VpnGw3AZ', 'ErGw1AZ', 'ErGw2AZ', 'ErGw3AZ'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: VirtualNetworkGatewaySkuTier =
     * <VirtualNetworkGatewaySkuTier>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var VirtualNetworkGatewaySkuTier;
    (function (VirtualNetworkGatewaySkuTier) {
        VirtualNetworkGatewaySkuTier["Basic"] = "Basic";
        VirtualNetworkGatewaySkuTier["HighPerformance"] = "HighPerformance";
        VirtualNetworkGatewaySkuTier["Standard"] = "Standard";
        VirtualNetworkGatewaySkuTier["UltraPerformance"] = "UltraPerformance";
        VirtualNetworkGatewaySkuTier["VpnGw1"] = "VpnGw1";
        VirtualNetworkGatewaySkuTier["VpnGw2"] = "VpnGw2";
        VirtualNetworkGatewaySkuTier["VpnGw3"] = "VpnGw3";
        VirtualNetworkGatewaySkuTier["VpnGw1AZ"] = "VpnGw1AZ";
        VirtualNetworkGatewaySkuTier["VpnGw2AZ"] = "VpnGw2AZ";
        VirtualNetworkGatewaySkuTier["VpnGw3AZ"] = "VpnGw3AZ";
        VirtualNetworkGatewaySkuTier["ErGw1AZ"] = "ErGw1AZ";
        VirtualNetworkGatewaySkuTier["ErGw2AZ"] = "ErGw2AZ";
        VirtualNetworkGatewaySkuTier["ErGw3AZ"] = "ErGw3AZ";
    })(VirtualNetworkGatewaySkuTier || (VirtualNetworkGatewaySkuTier = {}));
    /**
     * Defines values for VpnClientProtocol.
     * Possible values include: 'IkeV2', 'SSTP', 'OpenVPN'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: VpnClientProtocol =
     * <VpnClientProtocol>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var VpnClientProtocol;
    (function (VpnClientProtocol) {
        VpnClientProtocol["IkeV2"] = "IkeV2";
        VpnClientProtocol["SSTP"] = "SSTP";
        VpnClientProtocol["OpenVPN"] = "OpenVPN";
    })(VpnClientProtocol || (VpnClientProtocol = {}));
    /**
     * Defines values for IpsecEncryption.
     * Possible values include: 'None', 'DES', 'DES3', 'AES128', 'AES192',
     * 'AES256', 'GCMAES128', 'GCMAES192', 'GCMAES256'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: IpsecEncryption =
     * <IpsecEncryption>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var IpsecEncryption;
    (function (IpsecEncryption) {
        IpsecEncryption["None"] = "None";
        IpsecEncryption["DES"] = "DES";
        IpsecEncryption["DES3"] = "DES3";
        IpsecEncryption["AES128"] = "AES128";
        IpsecEncryption["AES192"] = "AES192";
        IpsecEncryption["AES256"] = "AES256";
        IpsecEncryption["GCMAES128"] = "GCMAES128";
        IpsecEncryption["GCMAES192"] = "GCMAES192";
        IpsecEncryption["GCMAES256"] = "GCMAES256";
    })(IpsecEncryption || (IpsecEncryption = {}));
    /**
     * Defines values for IpsecIntegrity.
     * Possible values include: 'MD5', 'SHA1', 'SHA256', 'GCMAES128', 'GCMAES192',
     * 'GCMAES256'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: IpsecIntegrity =
     * <IpsecIntegrity>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var IpsecIntegrity;
    (function (IpsecIntegrity) {
        IpsecIntegrity["MD5"] = "MD5";
        IpsecIntegrity["SHA1"] = "SHA1";
        IpsecIntegrity["SHA256"] = "SHA256";
        IpsecIntegrity["GCMAES128"] = "GCMAES128";
        IpsecIntegrity["GCMAES192"] = "GCMAES192";
        IpsecIntegrity["GCMAES256"] = "GCMAES256";
    })(IpsecIntegrity || (IpsecIntegrity = {}));
    /**
     * Defines values for IkeEncryption.
     * Possible values include: 'DES', 'DES3', 'AES128', 'AES192', 'AES256',
     * 'GCMAES256', 'GCMAES128'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: IkeEncryption =
     * <IkeEncryption>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var IkeEncryption;
    (function (IkeEncryption) {
        IkeEncryption["DES"] = "DES";
        IkeEncryption["DES3"] = "DES3";
        IkeEncryption["AES128"] = "AES128";
        IkeEncryption["AES192"] = "AES192";
        IkeEncryption["AES256"] = "AES256";
        IkeEncryption["GCMAES256"] = "GCMAES256";
        IkeEncryption["GCMAES128"] = "GCMAES128";
    })(IkeEncryption || (IkeEncryption = {}));
    /**
     * Defines values for IkeIntegrity.
     * Possible values include: 'MD5', 'SHA1', 'SHA256', 'SHA384', 'GCMAES256',
     * 'GCMAES128'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: IkeIntegrity =
     * <IkeIntegrity>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var IkeIntegrity;
    (function (IkeIntegrity) {
        IkeIntegrity["MD5"] = "MD5";
        IkeIntegrity["SHA1"] = "SHA1";
        IkeIntegrity["SHA256"] = "SHA256";
        IkeIntegrity["SHA384"] = "SHA384";
        IkeIntegrity["GCMAES256"] = "GCMAES256";
        IkeIntegrity["GCMAES128"] = "GCMAES128";
    })(IkeIntegrity || (IkeIntegrity = {}));
    /**
     * Defines values for DhGroup.
     * Possible values include: 'None', 'DHGroup1', 'DHGroup2', 'DHGroup14',
     * 'DHGroup2048', 'ECP256', 'ECP384', 'DHGroup24'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: DhGroup = <DhGroup>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var DhGroup;
    (function (DhGroup) {
        DhGroup["None"] = "None";
        DhGroup["DHGroup1"] = "DHGroup1";
        DhGroup["DHGroup2"] = "DHGroup2";
        DhGroup["DHGroup14"] = "DHGroup14";
        DhGroup["DHGroup2048"] = "DHGroup2048";
        DhGroup["ECP256"] = "ECP256";
        DhGroup["ECP384"] = "ECP384";
        DhGroup["DHGroup24"] = "DHGroup24";
    })(DhGroup || (DhGroup = {}));
    /**
     * Defines values for PfsGroup.
     * Possible values include: 'None', 'PFS1', 'PFS2', 'PFS2048', 'ECP256',
     * 'ECP384', 'PFS24', 'PFS14', 'PFSMM'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: PfsGroup = <PfsGroup>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var PfsGroup;
    (function (PfsGroup) {
        PfsGroup["None"] = "None";
        PfsGroup["PFS1"] = "PFS1";
        PfsGroup["PFS2"] = "PFS2";
        PfsGroup["PFS2048"] = "PFS2048";
        PfsGroup["ECP256"] = "ECP256";
        PfsGroup["ECP384"] = "ECP384";
        PfsGroup["PFS24"] = "PFS24";
        PfsGroup["PFS14"] = "PFS14";
        PfsGroup["PFSMM"] = "PFSMM";
    })(PfsGroup || (PfsGroup = {}));
    /**
     * Defines values for BgpPeerState.
     * Possible values include: 'Unknown', 'Stopped', 'Idle', 'Connecting',
     * 'Connected'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: BgpPeerState =
     * <BgpPeerState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var BgpPeerState;
    (function (BgpPeerState) {
        BgpPeerState["Unknown"] = "Unknown";
        BgpPeerState["Stopped"] = "Stopped";
        BgpPeerState["Idle"] = "Idle";
        BgpPeerState["Connecting"] = "Connecting";
        BgpPeerState["Connected"] = "Connected";
    })(BgpPeerState || (BgpPeerState = {}));
    /**
     * Defines values for ProcessorArchitecture.
     * Possible values include: 'Amd64', 'X86'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ProcessorArchitecture =
     * <ProcessorArchitecture>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ProcessorArchitecture;
    (function (ProcessorArchitecture) {
        ProcessorArchitecture["Amd64"] = "Amd64";
        ProcessorArchitecture["X86"] = "X86";
    })(ProcessorArchitecture || (ProcessorArchitecture = {}));
    /**
     * Defines values for AuthenticationMethod.
     * Possible values include: 'EAPTLS', 'EAPMSCHAPv2'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: AuthenticationMethod =
     * <AuthenticationMethod>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var AuthenticationMethod;
    (function (AuthenticationMethod) {
        AuthenticationMethod["EAPTLS"] = "EAPTLS";
        AuthenticationMethod["EAPMSCHAPv2"] = "EAPMSCHAPv2";
    })(AuthenticationMethod || (AuthenticationMethod = {}));
    /**
     * Defines values for VirtualNetworkGatewayConnectionStatus.
     * Possible values include: 'Unknown', 'Connecting', 'Connected',
     * 'NotConnected'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: VirtualNetworkGatewayConnectionStatus =
     * <VirtualNetworkGatewayConnectionStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var VirtualNetworkGatewayConnectionStatus;
    (function (VirtualNetworkGatewayConnectionStatus) {
        VirtualNetworkGatewayConnectionStatus["Unknown"] = "Unknown";
        VirtualNetworkGatewayConnectionStatus["Connecting"] = "Connecting";
        VirtualNetworkGatewayConnectionStatus["Connected"] = "Connected";
        VirtualNetworkGatewayConnectionStatus["NotConnected"] = "NotConnected";
    })(VirtualNetworkGatewayConnectionStatus || (VirtualNetworkGatewayConnectionStatus = {}));
    /**
     * Defines values for VirtualNetworkGatewayConnectionType.
     * Possible values include: 'IPsec', 'Vnet2Vnet', 'ExpressRoute', 'VPNClient'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: VirtualNetworkGatewayConnectionType =
     * <VirtualNetworkGatewayConnectionType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var VirtualNetworkGatewayConnectionType;
    (function (VirtualNetworkGatewayConnectionType) {
        VirtualNetworkGatewayConnectionType["IPsec"] = "IPsec";
        VirtualNetworkGatewayConnectionType["Vnet2Vnet"] = "Vnet2Vnet";
        VirtualNetworkGatewayConnectionType["ExpressRoute"] = "ExpressRoute";
        VirtualNetworkGatewayConnectionType["VPNClient"] = "VPNClient";
    })(VirtualNetworkGatewayConnectionType || (VirtualNetworkGatewayConnectionType = {}));
    /**
     * Defines values for VirtualNetworkGatewayConnectionProtocol.
     * Possible values include: 'IKEv2', 'IKEv1'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: VirtualNetworkGatewayConnectionProtocol =
     * <VirtualNetworkGatewayConnectionProtocol>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var VirtualNetworkGatewayConnectionProtocol;
    (function (VirtualNetworkGatewayConnectionProtocol) {
        VirtualNetworkGatewayConnectionProtocol["IKEv2"] = "IKEv2";
        VirtualNetworkGatewayConnectionProtocol["IKEv1"] = "IKEv1";
    })(VirtualNetworkGatewayConnectionProtocol || (VirtualNetworkGatewayConnectionProtocol = {}));
    /**
     * Defines values for OfficeTrafficCategory.
     * Possible values include: 'Optimize', 'OptimizeAndAllow', 'All', 'None'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: OfficeTrafficCategory =
     * <OfficeTrafficCategory>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var OfficeTrafficCategory;
    (function (OfficeTrafficCategory) {
        OfficeTrafficCategory["Optimize"] = "Optimize";
        OfficeTrafficCategory["OptimizeAndAllow"] = "OptimizeAndAllow";
        OfficeTrafficCategory["All"] = "All";
        OfficeTrafficCategory["None"] = "None";
    })(OfficeTrafficCategory || (OfficeTrafficCategory = {}));
    /**
     * Defines values for VpnGatewayTunnelingProtocol.
     * Possible values include: 'IkeV2', 'OpenVPN'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: VpnGatewayTunnelingProtocol =
     * <VpnGatewayTunnelingProtocol>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var VpnGatewayTunnelingProtocol;
    (function (VpnGatewayTunnelingProtocol) {
        VpnGatewayTunnelingProtocol["IkeV2"] = "IkeV2";
        VpnGatewayTunnelingProtocol["OpenVPN"] = "OpenVPN";
    })(VpnGatewayTunnelingProtocol || (VpnGatewayTunnelingProtocol = {}));
    /**
     * Defines values for VpnConnectionStatus.
     * Possible values include: 'Unknown', 'Connecting', 'Connected',
     * 'NotConnected'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: VpnConnectionStatus =
     * <VpnConnectionStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var VpnConnectionStatus;
    (function (VpnConnectionStatus) {
        VpnConnectionStatus["Unknown"] = "Unknown";
        VpnConnectionStatus["Connecting"] = "Connecting";
        VpnConnectionStatus["Connected"] = "Connected";
        VpnConnectionStatus["NotConnected"] = "NotConnected";
    })(VpnConnectionStatus || (VpnConnectionStatus = {}));
    /**
     * Defines values for VirtualWanSecurityProviderType.
     * Possible values include: 'External', 'Native'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: VirtualWanSecurityProviderType =
     * <VirtualWanSecurityProviderType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var VirtualWanSecurityProviderType;
    (function (VirtualWanSecurityProviderType) {
        VirtualWanSecurityProviderType["External"] = "External";
        VirtualWanSecurityProviderType["Native"] = "Native";
    })(VirtualWanSecurityProviderType || (VirtualWanSecurityProviderType = {}));
    /**
     * Defines values for TunnelConnectionStatus.
     * Possible values include: 'Unknown', 'Connecting', 'Connected',
     * 'NotConnected'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: TunnelConnectionStatus =
     * <TunnelConnectionStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var TunnelConnectionStatus;
    (function (TunnelConnectionStatus) {
        TunnelConnectionStatus["Unknown"] = "Unknown";
        TunnelConnectionStatus["Connecting"] = "Connecting";
        TunnelConnectionStatus["Connected"] = "Connected";
        TunnelConnectionStatus["NotConnected"] = "NotConnected";
    })(TunnelConnectionStatus || (TunnelConnectionStatus = {}));
    /**
     * Defines values for HubVirtualNetworkConnectionStatus.
     * Possible values include: 'Unknown', 'Connecting', 'Connected',
     * 'NotConnected'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: HubVirtualNetworkConnectionStatus =
     * <HubVirtualNetworkConnectionStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var HubVirtualNetworkConnectionStatus;
    (function (HubVirtualNetworkConnectionStatus) {
        HubVirtualNetworkConnectionStatus["Unknown"] = "Unknown";
        HubVirtualNetworkConnectionStatus["Connecting"] = "Connecting";
        HubVirtualNetworkConnectionStatus["Connected"] = "Connected";
        HubVirtualNetworkConnectionStatus["NotConnected"] = "NotConnected";
    })(HubVirtualNetworkConnectionStatus || (HubVirtualNetworkConnectionStatus = {}));
    /**
     * Defines values for Protocol1.
     * Possible values include: 'Tcp', 'Udp', 'All'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Protocol1 = <Protocol1>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Protocol1;
    (function (Protocol1) {
        Protocol1["Tcp"] = "Tcp";
        Protocol1["Udp"] = "Udp";
        Protocol1["All"] = "All";
    })(Protocol1 || (Protocol1 = {}));

    var index = /*#__PURE__*/Object.freeze({
        get IPAllocationMethod () { return IPAllocationMethod; },
        get SecurityRuleProtocol () { return SecurityRuleProtocol; },
        get SecurityRuleAccess () { return SecurityRuleAccess; },
        get SecurityRuleDirection () { return SecurityRuleDirection; },
        get RouteNextHopType () { return RouteNextHopType; },
        get PublicIPAddressSkuName () { return PublicIPAddressSkuName; },
        get IPVersion () { return IPVersion; },
        get TransportProtocol () { return TransportProtocol; },
        get ApplicationGatewayProtocol () { return ApplicationGatewayProtocol; },
        get ApplicationGatewayCookieBasedAffinity () { return ApplicationGatewayCookieBasedAffinity; },
        get ApplicationGatewayBackendHealthServerHealth () { return ApplicationGatewayBackendHealthServerHealth; },
        get ApplicationGatewaySkuName () { return ApplicationGatewaySkuName; },
        get ApplicationGatewayTier () { return ApplicationGatewayTier; },
        get ApplicationGatewaySslProtocol () { return ApplicationGatewaySslProtocol; },
        get ApplicationGatewaySslPolicyType () { return ApplicationGatewaySslPolicyType; },
        get ApplicationGatewaySslPolicyName () { return ApplicationGatewaySslPolicyName; },
        get ApplicationGatewaySslCipherSuite () { return ApplicationGatewaySslCipherSuite; },
        get ApplicationGatewayRequestRoutingRuleType () { return ApplicationGatewayRequestRoutingRuleType; },
        get ApplicationGatewayRedirectType () { return ApplicationGatewayRedirectType; },
        get ApplicationGatewayOperationalState () { return ApplicationGatewayOperationalState; },
        get ApplicationGatewayFirewallMode () { return ApplicationGatewayFirewallMode; },
        get ProvisioningState () { return ProvisioningState; },
        get AzureFirewallRCActionType () { return AzureFirewallRCActionType; },
        get AzureFirewallApplicationRuleProtocolType () { return AzureFirewallApplicationRuleProtocolType; },
        get AzureFirewallNatRCActionType () { return AzureFirewallNatRCActionType; },
        get AzureFirewallNetworkRuleProtocol () { return AzureFirewallNetworkRuleProtocol; },
        get AuthorizationUseStatus () { return AuthorizationUseStatus; },
        get ExpressRouteCircuitPeeringAdvertisedPublicPrefixState () { return ExpressRouteCircuitPeeringAdvertisedPublicPrefixState; },
        get Access () { return Access; },
        get ExpressRoutePeeringType () { return ExpressRoutePeeringType; },
        get ExpressRoutePeeringState () { return ExpressRoutePeeringState; },
        get CircuitConnectionStatus () { return CircuitConnectionStatus; },
        get ExpressRouteCircuitPeeringState () { return ExpressRouteCircuitPeeringState; },
        get ExpressRouteCircuitSkuTier () { return ExpressRouteCircuitSkuTier; },
        get ExpressRouteCircuitSkuFamily () { return ExpressRouteCircuitSkuFamily; },
        get ServiceProviderProvisioningState () { return ServiceProviderProvisioningState; },
        get LoadBalancerSkuName () { return LoadBalancerSkuName; },
        get LoadDistribution () { return LoadDistribution; },
        get ProbeProtocol () { return ProbeProtocol; },
        get NetworkOperationStatus () { return NetworkOperationStatus; },
        get EffectiveSecurityRuleProtocol () { return EffectiveSecurityRuleProtocol; },
        get EffectiveRouteSource () { return EffectiveRouteSource; },
        get EffectiveRouteState () { return EffectiveRouteState; },
        get AssociationType () { return AssociationType; },
        get Direction () { return Direction; },
        get IpFlowProtocol () { return IpFlowProtocol; },
        get NextHopType () { return NextHopType; },
        get PcProtocol () { return PcProtocol; },
        get PcStatus () { return PcStatus; },
        get PcError () { return PcError; },
        get Protocol () { return Protocol; },
        get HTTPMethod () { return HTTPMethod; },
        get Origin () { return Origin; },
        get Severity () { return Severity; },
        get IssueType () { return IssueType; },
        get ConnectionStatus () { return ConnectionStatus; },
        get ConnectionMonitorSourceStatus () { return ConnectionMonitorSourceStatus; },
        get ConnectionState () { return ConnectionState; },
        get EvaluationState () { return EvaluationState; },
        get PublicIPPrefixSkuName () { return PublicIPPrefixSkuName; },
        get VirtualNetworkPeeringState () { return VirtualNetworkPeeringState; },
        get VirtualNetworkGatewayType () { return VirtualNetworkGatewayType; },
        get VpnType () { return VpnType; },
        get VirtualNetworkGatewaySkuName () { return VirtualNetworkGatewaySkuName; },
        get VirtualNetworkGatewaySkuTier () { return VirtualNetworkGatewaySkuTier; },
        get VpnClientProtocol () { return VpnClientProtocol; },
        get IpsecEncryption () { return IpsecEncryption; },
        get IpsecIntegrity () { return IpsecIntegrity; },
        get IkeEncryption () { return IkeEncryption; },
        get IkeIntegrity () { return IkeIntegrity; },
        get DhGroup () { return DhGroup; },
        get PfsGroup () { return PfsGroup; },
        get BgpPeerState () { return BgpPeerState; },
        get ProcessorArchitecture () { return ProcessorArchitecture; },
        get AuthenticationMethod () { return AuthenticationMethod; },
        get VirtualNetworkGatewayConnectionStatus () { return VirtualNetworkGatewayConnectionStatus; },
        get VirtualNetworkGatewayConnectionType () { return VirtualNetworkGatewayConnectionType; },
        get VirtualNetworkGatewayConnectionProtocol () { return VirtualNetworkGatewayConnectionProtocol; },
        get OfficeTrafficCategory () { return OfficeTrafficCategory; },
        get VpnGatewayTunnelingProtocol () { return VpnGatewayTunnelingProtocol; },
        get VpnConnectionStatus () { return VpnConnectionStatus; },
        get VirtualWanSecurityProviderType () { return VirtualWanSecurityProviderType; },
        get TunnelConnectionStatus () { return TunnelConnectionStatus; },
        get HubVirtualNetworkConnectionStatus () { return HubVirtualNetworkConnectionStatus; },
        get Protocol1 () { return Protocol1; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var SubResource = {
        serializedName: "SubResource",
        type: {
            name: "Composite",
            className: "SubResource",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NetworkInterfaceTapConfiguration = {
        serializedName: "NetworkInterfaceTapConfiguration",
        type: {
            name: "Composite",
            className: "NetworkInterfaceTapConfiguration",
            modelProperties: __assign({}, SubResource.type.modelProperties, { virtualNetworkTap: {
                    serializedName: "properties.virtualNetworkTap",
                    type: {
                        name: "Composite",
                        className: "VirtualNetworkTap"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }, type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ApplicationSecurityGroup = {
        serializedName: "ApplicationSecurityGroup",
        type: {
            name: "Composite",
            className: "ApplicationSecurityGroup",
            modelProperties: __assign({}, Resource.type.modelProperties, { resourceGuid: {
                    readOnly: true,
                    serializedName: "properties.resourceGuid",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var SecurityRule = {
        serializedName: "SecurityRule",
        type: {
            name: "Composite",
            className: "SecurityRule",
            modelProperties: __assign({}, SubResource.type.modelProperties, { description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, protocol: {
                    required: true,
                    serializedName: "properties.protocol",
                    type: {
                        name: "String"
                    }
                }, sourcePortRange: {
                    serializedName: "properties.sourcePortRange",
                    type: {
                        name: "String"
                    }
                }, destinationPortRange: {
                    serializedName: "properties.destinationPortRange",
                    type: {
                        name: "String"
                    }
                }, sourceAddressPrefix: {
                    serializedName: "properties.sourceAddressPrefix",
                    type: {
                        name: "String"
                    }
                }, sourceAddressPrefixes: {
                    serializedName: "properties.sourceAddressPrefixes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, sourceApplicationSecurityGroups: {
                    serializedName: "properties.sourceApplicationSecurityGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationSecurityGroup"
                            }
                        }
                    }
                }, destinationAddressPrefix: {
                    serializedName: "properties.destinationAddressPrefix",
                    type: {
                        name: "String"
                    }
                }, destinationAddressPrefixes: {
                    serializedName: "properties.destinationAddressPrefixes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, destinationApplicationSecurityGroups: {
                    serializedName: "properties.destinationApplicationSecurityGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationSecurityGroup"
                            }
                        }
                    }
                }, sourcePortRanges: {
                    serializedName: "properties.sourcePortRanges",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, destinationPortRanges: {
                    serializedName: "properties.destinationPortRanges",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, access: {
                    required: true,
                    serializedName: "properties.access",
                    type: {
                        name: "String"
                    }
                }, priority: {
                    serializedName: "properties.priority",
                    type: {
                        name: "Number"
                    }
                }, direction: {
                    required: true,
                    serializedName: "properties.direction",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var EndpointService = {
        serializedName: "EndpointService",
        type: {
            name: "Composite",
            className: "EndpointService",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InterfaceEndpoint = {
        serializedName: "InterfaceEndpoint",
        type: {
            name: "Composite",
            className: "InterfaceEndpoint",
            modelProperties: __assign({}, Resource.type.modelProperties, { fqdn: {
                    serializedName: "properties.fqdn",
                    type: {
                        name: "String"
                    }
                }, endpointService: {
                    serializedName: "properties.endpointService",
                    type: {
                        name: "Composite",
                        className: "EndpointService"
                    }
                }, subnet: {
                    serializedName: "properties.subnet",
                    type: {
                        name: "Composite",
                        className: "Subnet"
                    }
                }, networkInterfaces: {
                    readOnly: true,
                    serializedName: "properties.networkInterfaces",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkInterface"
                            }
                        }
                    }
                }, owner: {
                    readOnly: true,
                    serializedName: "properties.owner",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var NetworkInterfaceDnsSettings = {
        serializedName: "NetworkInterfaceDnsSettings",
        type: {
            name: "Composite",
            className: "NetworkInterfaceDnsSettings",
            modelProperties: {
                dnsServers: {
                    serializedName: "dnsServers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                appliedDnsServers: {
                    serializedName: "appliedDnsServers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                internalDnsNameLabel: {
                    serializedName: "internalDnsNameLabel",
                    type: {
                        name: "String"
                    }
                },
                internalFqdn: {
                    serializedName: "internalFqdn",
                    type: {
                        name: "String"
                    }
                },
                internalDomainNameSuffix: {
                    serializedName: "internalDomainNameSuffix",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NetworkInterface = {
        serializedName: "NetworkInterface",
        type: {
            name: "Composite",
            className: "NetworkInterface",
            modelProperties: __assign({}, Resource.type.modelProperties, { virtualMachine: {
                    serializedName: "properties.virtualMachine",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, networkSecurityGroup: {
                    serializedName: "properties.networkSecurityGroup",
                    type: {
                        name: "Composite",
                        className: "NetworkSecurityGroup"
                    }
                }, interfaceEndpoint: {
                    readOnly: true,
                    serializedName: "properties.interfaceEndpoint",
                    type: {
                        name: "Composite",
                        className: "InterfaceEndpoint"
                    }
                }, ipConfigurations: {
                    serializedName: "properties.ipConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkInterfaceIPConfiguration"
                            }
                        }
                    }
                }, tapConfigurations: {
                    serializedName: "properties.tapConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkInterfaceTapConfiguration"
                            }
                        }
                    }
                }, dnsSettings: {
                    serializedName: "properties.dnsSettings",
                    type: {
                        name: "Composite",
                        className: "NetworkInterfaceDnsSettings"
                    }
                }, macAddress: {
                    serializedName: "properties.macAddress",
                    type: {
                        name: "String"
                    }
                }, primary: {
                    serializedName: "properties.primary",
                    type: {
                        name: "Boolean"
                    }
                }, enableAcceleratedNetworking: {
                    serializedName: "properties.enableAcceleratedNetworking",
                    type: {
                        name: "Boolean"
                    }
                }, enableIPForwarding: {
                    serializedName: "properties.enableIPForwarding",
                    type: {
                        name: "Boolean"
                    }
                }, hostedWorkloads: {
                    readOnly: true,
                    serializedName: "properties.hostedWorkloads",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, resourceGuid: {
                    serializedName: "properties.resourceGuid",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var NetworkSecurityGroup = {
        serializedName: "NetworkSecurityGroup",
        type: {
            name: "Composite",
            className: "NetworkSecurityGroup",
            modelProperties: __assign({}, Resource.type.modelProperties, { securityRules: {
                    serializedName: "properties.securityRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SecurityRule"
                            }
                        }
                    }
                }, defaultSecurityRules: {
                    serializedName: "properties.defaultSecurityRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SecurityRule"
                            }
                        }
                    }
                }, networkInterfaces: {
                    readOnly: true,
                    serializedName: "properties.networkInterfaces",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkInterface"
                            }
                        }
                    }
                }, subnets: {
                    readOnly: true,
                    serializedName: "properties.subnets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Subnet"
                            }
                        }
                    }
                }, resourceGuid: {
                    serializedName: "properties.resourceGuid",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Route = {
        serializedName: "Route",
        type: {
            name: "Composite",
            className: "Route",
            modelProperties: __assign({}, SubResource.type.modelProperties, { addressPrefix: {
                    serializedName: "properties.addressPrefix",
                    type: {
                        name: "String"
                    }
                }, nextHopType: {
                    required: true,
                    serializedName: "properties.nextHopType",
                    type: {
                        name: "String"
                    }
                }, nextHopIpAddress: {
                    serializedName: "properties.nextHopIpAddress",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RouteTable = {
        serializedName: "RouteTable",
        type: {
            name: "Composite",
            className: "RouteTable",
            modelProperties: __assign({}, Resource.type.modelProperties, { routes: {
                    serializedName: "properties.routes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Route"
                            }
                        }
                    }
                }, subnets: {
                    readOnly: true,
                    serializedName: "properties.subnets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Subnet"
                            }
                        }
                    }
                }, disableBgpRoutePropagation: {
                    serializedName: "properties.disableBgpRoutePropagation",
                    type: {
                        name: "Boolean"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ServiceEndpointPropertiesFormat = {
        serializedName: "ServiceEndpointPropertiesFormat",
        type: {
            name: "Composite",
            className: "ServiceEndpointPropertiesFormat",
            modelProperties: {
                service: {
                    serializedName: "service",
                    type: {
                        name: "String"
                    }
                },
                locations: {
                    serializedName: "locations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                provisioningState: {
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServiceEndpointPolicyDefinition = {
        serializedName: "ServiceEndpointPolicyDefinition",
        type: {
            name: "Composite",
            className: "ServiceEndpointPolicyDefinition",
            modelProperties: __assign({}, SubResource.type.modelProperties, { description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, service: {
                    serializedName: "properties.service",
                    type: {
                        name: "String"
                    }
                }, serviceResources: {
                    serializedName: "properties.serviceResources",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ServiceEndpointPolicy = {
        serializedName: "ServiceEndpointPolicy",
        type: {
            name: "Composite",
            className: "ServiceEndpointPolicy",
            modelProperties: __assign({}, Resource.type.modelProperties, { serviceEndpointPolicyDefinitions: {
                    serializedName: "properties.serviceEndpointPolicyDefinitions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServiceEndpointPolicyDefinition"
                            }
                        }
                    }
                }, subnets: {
                    readOnly: true,
                    serializedName: "properties.subnets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Subnet"
                            }
                        }
                    }
                }, resourceGuid: {
                    readOnly: true,
                    serializedName: "properties.resourceGuid",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var PublicIPAddressSku = {
        serializedName: "PublicIPAddressSku",
        type: {
            name: "Composite",
            className: "PublicIPAddressSku",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PublicIPAddressDnsSettings = {
        serializedName: "PublicIPAddressDnsSettings",
        type: {
            name: "Composite",
            className: "PublicIPAddressDnsSettings",
            modelProperties: {
                domainNameLabel: {
                    serializedName: "domainNameLabel",
                    type: {
                        name: "String"
                    }
                },
                fqdn: {
                    serializedName: "fqdn",
                    type: {
                        name: "String"
                    }
                },
                reverseFqdn: {
                    serializedName: "reverseFqdn",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IpTag = {
        serializedName: "IpTag",
        type: {
            name: "Composite",
            className: "IpTag",
            modelProperties: {
                ipTagType: {
                    serializedName: "ipTagType",
                    type: {
                        name: "String"
                    }
                },
                tag: {
                    serializedName: "tag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PublicIPAddress = {
        serializedName: "PublicIPAddress",
        type: {
            name: "Composite",
            className: "PublicIPAddress",
            modelProperties: __assign({}, Resource.type.modelProperties, { sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "PublicIPAddressSku"
                    }
                }, publicIPAllocationMethod: {
                    serializedName: "properties.publicIPAllocationMethod",
                    type: {
                        name: "String"
                    }
                }, publicIPAddressVersion: {
                    serializedName: "properties.publicIPAddressVersion",
                    type: {
                        name: "String"
                    }
                }, ipConfiguration: {
                    readOnly: true,
                    serializedName: "properties.ipConfiguration",
                    type: {
                        name: "Composite",
                        className: "IPConfiguration"
                    }
                }, dnsSettings: {
                    serializedName: "properties.dnsSettings",
                    type: {
                        name: "Composite",
                        className: "PublicIPAddressDnsSettings"
                    }
                }, ipTags: {
                    serializedName: "properties.ipTags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IpTag"
                            }
                        }
                    }
                }, ipAddress: {
                    serializedName: "properties.ipAddress",
                    type: {
                        name: "String"
                    }
                }, publicIPPrefix: {
                    serializedName: "properties.publicIPPrefix",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, idleTimeoutInMinutes: {
                    serializedName: "properties.idleTimeoutInMinutes",
                    type: {
                        name: "Number"
                    }
                }, resourceGuid: {
                    serializedName: "properties.resourceGuid",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }, zones: {
                    serializedName: "zones",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var IPConfiguration = {
        serializedName: "IPConfiguration",
        type: {
            name: "Composite",
            className: "IPConfiguration",
            modelProperties: __assign({}, SubResource.type.modelProperties, { privateIPAddress: {
                    serializedName: "properties.privateIPAddress",
                    type: {
                        name: "String"
                    }
                }, privateIPAllocationMethod: {
                    serializedName: "properties.privateIPAllocationMethod",
                    type: {
                        name: "String"
                    }
                }, subnet: {
                    serializedName: "properties.subnet",
                    type: {
                        name: "Composite",
                        className: "Subnet"
                    }
                }, publicIPAddress: {
                    serializedName: "properties.publicIPAddress",
                    type: {
                        name: "Composite",
                        className: "PublicIPAddress"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var IPConfigurationProfile = {
        serializedName: "IPConfigurationProfile",
        type: {
            name: "Composite",
            className: "IPConfigurationProfile",
            modelProperties: __assign({}, SubResource.type.modelProperties, { subnet: {
                    serializedName: "properties.subnet",
                    type: {
                        name: "Composite",
                        className: "Subnet"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ResourceNavigationLink = {
        serializedName: "ResourceNavigationLink",
        type: {
            name: "Composite",
            className: "ResourceNavigationLink",
            modelProperties: __assign({}, SubResource.type.modelProperties, { linkedResourceType: {
                    serializedName: "properties.linkedResourceType",
                    type: {
                        name: "String"
                    }
                }, link: {
                    serializedName: "properties.link",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ServiceAssociationLink = {
        serializedName: "ServiceAssociationLink",
        type: {
            name: "Composite",
            className: "ServiceAssociationLink",
            modelProperties: __assign({}, SubResource.type.modelProperties, { linkedResourceType: {
                    serializedName: "properties.linkedResourceType",
                    type: {
                        name: "String"
                    }
                }, link: {
                    serializedName: "properties.link",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Delegation = {
        serializedName: "Delegation",
        type: {
            name: "Composite",
            className: "Delegation",
            modelProperties: __assign({}, SubResource.type.modelProperties, { serviceName: {
                    serializedName: "properties.serviceName",
                    type: {
                        name: "String"
                    }
                }, actions: {
                    serializedName: "properties.actions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Subnet = {
        serializedName: "Subnet",
        type: {
            name: "Composite",
            className: "Subnet",
            modelProperties: __assign({}, SubResource.type.modelProperties, { addressPrefix: {
                    serializedName: "properties.addressPrefix",
                    type: {
                        name: "String"
                    }
                }, addressPrefixes: {
                    serializedName: "properties.addressPrefixes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, networkSecurityGroup: {
                    serializedName: "properties.networkSecurityGroup",
                    type: {
                        name: "Composite",
                        className: "NetworkSecurityGroup"
                    }
                }, routeTable: {
                    serializedName: "properties.routeTable",
                    type: {
                        name: "Composite",
                        className: "RouteTable"
                    }
                }, serviceEndpoints: {
                    serializedName: "properties.serviceEndpoints",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServiceEndpointPropertiesFormat"
                            }
                        }
                    }
                }, serviceEndpointPolicies: {
                    serializedName: "properties.serviceEndpointPolicies",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServiceEndpointPolicy"
                            }
                        }
                    }
                }, interfaceEndpoints: {
                    readOnly: true,
                    serializedName: "properties.interfaceEndpoints",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InterfaceEndpoint"
                            }
                        }
                    }
                }, ipConfigurations: {
                    readOnly: true,
                    serializedName: "properties.ipConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IPConfiguration"
                            }
                        }
                    }
                }, ipConfigurationProfiles: {
                    readOnly: true,
                    serializedName: "properties.ipConfigurationProfiles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IPConfigurationProfile"
                            }
                        }
                    }
                }, resourceNavigationLinks: {
                    serializedName: "properties.resourceNavigationLinks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceNavigationLink"
                            }
                        }
                    }
                }, serviceAssociationLinks: {
                    serializedName: "properties.serviceAssociationLinks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServiceAssociationLink"
                            }
                        }
                    }
                }, delegations: {
                    serializedName: "properties.delegations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Delegation"
                            }
                        }
                    }
                }, purpose: {
                    readOnly: true,
                    serializedName: "properties.purpose",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var FrontendIPConfiguration = {
        serializedName: "FrontendIPConfiguration",
        type: {
            name: "Composite",
            className: "FrontendIPConfiguration",
            modelProperties: __assign({}, SubResource.type.modelProperties, { inboundNatRules: {
                    readOnly: true,
                    serializedName: "properties.inboundNatRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }, inboundNatPools: {
                    readOnly: true,
                    serializedName: "properties.inboundNatPools",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }, outboundRules: {
                    readOnly: true,
                    serializedName: "properties.outboundRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }, loadBalancingRules: {
                    readOnly: true,
                    serializedName: "properties.loadBalancingRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }, privateIPAddress: {
                    serializedName: "properties.privateIPAddress",
                    type: {
                        name: "String"
                    }
                }, privateIPAllocationMethod: {
                    serializedName: "properties.privateIPAllocationMethod",
                    type: {
                        name: "String"
                    }
                }, subnet: {
                    serializedName: "properties.subnet",
                    type: {
                        name: "Composite",
                        className: "Subnet"
                    }
                }, publicIPAddress: {
                    serializedName: "properties.publicIPAddress",
                    type: {
                        name: "Composite",
                        className: "PublicIPAddress"
                    }
                }, publicIPPrefix: {
                    serializedName: "properties.publicIPPrefix",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }, zones: {
                    serializedName: "zones",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var VirtualNetworkTap = {
        serializedName: "VirtualNetworkTap",
        type: {
            name: "Composite",
            className: "VirtualNetworkTap",
            modelProperties: __assign({}, Resource.type.modelProperties, { networkInterfaceTapConfigurations: {
                    readOnly: true,
                    serializedName: "properties.networkInterfaceTapConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkInterfaceTapConfiguration"
                            }
                        }
                    }
                }, resourceGuid: {
                    readOnly: true,
                    serializedName: "properties.resourceGuid",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, destinationNetworkInterfaceIPConfiguration: {
                    serializedName: "properties.destinationNetworkInterfaceIPConfiguration",
                    type: {
                        name: "Composite",
                        className: "NetworkInterfaceIPConfiguration"
                    }
                }, destinationLoadBalancerFrontEndIPConfiguration: {
                    serializedName: "properties.destinationLoadBalancerFrontEndIPConfiguration",
                    type: {
                        name: "Composite",
                        className: "FrontendIPConfiguration"
                    }
                }, destinationPort: {
                    serializedName: "properties.destinationPort",
                    type: {
                        name: "Number"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var BackendAddressPool = {
        serializedName: "BackendAddressPool",
        type: {
            name: "Composite",
            className: "BackendAddressPool",
            modelProperties: __assign({}, SubResource.type.modelProperties, { backendIPConfigurations: {
                    readOnly: true,
                    serializedName: "properties.backendIPConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkInterfaceIPConfiguration"
                            }
                        }
                    }
                }, loadBalancingRules: {
                    readOnly: true,
                    serializedName: "properties.loadBalancingRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }, outboundRule: {
                    readOnly: true,
                    serializedName: "properties.outboundRule",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var InboundNatRule = {
        serializedName: "InboundNatRule",
        type: {
            name: "Composite",
            className: "InboundNatRule",
            modelProperties: __assign({}, SubResource.type.modelProperties, { frontendIPConfiguration: {
                    serializedName: "properties.frontendIPConfiguration",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, backendIPConfiguration: {
                    readOnly: true,
                    serializedName: "properties.backendIPConfiguration",
                    type: {
                        name: "Composite",
                        className: "NetworkInterfaceIPConfiguration"
                    }
                }, protocol: {
                    serializedName: "properties.protocol",
                    type: {
                        name: "String"
                    }
                }, frontendPort: {
                    serializedName: "properties.frontendPort",
                    type: {
                        name: "Number"
                    }
                }, backendPort: {
                    serializedName: "properties.backendPort",
                    type: {
                        name: "Number"
                    }
                }, idleTimeoutInMinutes: {
                    serializedName: "properties.idleTimeoutInMinutes",
                    type: {
                        name: "Number"
                    }
                }, enableFloatingIP: {
                    serializedName: "properties.enableFloatingIP",
                    type: {
                        name: "Boolean"
                    }
                }, enableTcpReset: {
                    serializedName: "properties.enableTcpReset",
                    type: {
                        name: "Boolean"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var NetworkInterfaceIPConfiguration = {
        serializedName: "NetworkInterfaceIPConfiguration",
        type: {
            name: "Composite",
            className: "NetworkInterfaceIPConfiguration",
            modelProperties: __assign({}, SubResource.type.modelProperties, { virtualNetworkTaps: {
                    serializedName: "properties.virtualNetworkTaps",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualNetworkTap"
                            }
                        }
                    }
                }, applicationGatewayBackendAddressPools: {
                    serializedName: "properties.applicationGatewayBackendAddressPools",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationGatewayBackendAddressPool"
                            }
                        }
                    }
                }, loadBalancerBackendAddressPools: {
                    serializedName: "properties.loadBalancerBackendAddressPools",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BackendAddressPool"
                            }
                        }
                    }
                }, loadBalancerInboundNatRules: {
                    serializedName: "properties.loadBalancerInboundNatRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InboundNatRule"
                            }
                        }
                    }
                }, privateIPAddress: {
                    serializedName: "properties.privateIPAddress",
                    type: {
                        name: "String"
                    }
                }, privateIPAllocationMethod: {
                    serializedName: "properties.privateIPAllocationMethod",
                    type: {
                        name: "String"
                    }
                }, privateIPAddressVersion: {
                    serializedName: "properties.privateIPAddressVersion",
                    type: {
                        name: "String"
                    }
                }, subnet: {
                    serializedName: "properties.subnet",
                    type: {
                        name: "Composite",
                        className: "Subnet"
                    }
                }, primary: {
                    serializedName: "properties.primary",
                    type: {
                        name: "Boolean"
                    }
                }, publicIPAddress: {
                    serializedName: "properties.publicIPAddress",
                    type: {
                        name: "Composite",
                        className: "PublicIPAddress"
                    }
                }, applicationSecurityGroups: {
                    serializedName: "properties.applicationSecurityGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationSecurityGroup"
                            }
                        }
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ApplicationGatewayBackendAddress = {
        serializedName: "ApplicationGatewayBackendAddress",
        type: {
            name: "Composite",
            className: "ApplicationGatewayBackendAddress",
            modelProperties: {
                fqdn: {
                    serializedName: "fqdn",
                    type: {
                        name: "String"
                    }
                },
                ipAddress: {
                    serializedName: "ipAddress",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationGatewayBackendAddressPool = {
        serializedName: "ApplicationGatewayBackendAddressPool",
        type: {
            name: "Composite",
            className: "ApplicationGatewayBackendAddressPool",
            modelProperties: __assign({}, SubResource.type.modelProperties, { backendIPConfigurations: {
                    serializedName: "properties.backendIPConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkInterfaceIPConfiguration"
                            }
                        }
                    }
                }, backendAddresses: {
                    serializedName: "properties.backendAddresses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationGatewayBackendAddress"
                            }
                        }
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }, type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ApplicationGatewayConnectionDraining = {
        serializedName: "ApplicationGatewayConnectionDraining",
        type: {
            name: "Composite",
            className: "ApplicationGatewayConnectionDraining",
            modelProperties: {
                enabled: {
                    required: true,
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                drainTimeoutInSec: {
                    required: true,
                    serializedName: "drainTimeoutInSec",
                    constraints: {
                        InclusiveMaximum: 3600,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ApplicationGatewayBackendHttpSettings = {
        serializedName: "ApplicationGatewayBackendHttpSettings",
        type: {
            name: "Composite",
            className: "ApplicationGatewayBackendHttpSettings",
            modelProperties: __assign({}, SubResource.type.modelProperties, { port: {
                    serializedName: "properties.port",
                    type: {
                        name: "Number"
                    }
                }, protocol: {
                    serializedName: "properties.protocol",
                    type: {
                        name: "String"
                    }
                }, cookieBasedAffinity: {
                    serializedName: "properties.cookieBasedAffinity",
                    type: {
                        name: "String"
                    }
                }, requestTimeout: {
                    serializedName: "properties.requestTimeout",
                    type: {
                        name: "Number"
                    }
                }, probe: {
                    serializedName: "properties.probe",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, authenticationCertificates: {
                    serializedName: "properties.authenticationCertificates",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }, trustedRootCertificates: {
                    serializedName: "properties.trustedRootCertificates",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }, connectionDraining: {
                    serializedName: "properties.connectionDraining",
                    type: {
                        name: "Composite",
                        className: "ApplicationGatewayConnectionDraining"
                    }
                }, hostName: {
                    serializedName: "properties.hostName",
                    type: {
                        name: "String"
                    }
                }, pickHostNameFromBackendAddress: {
                    serializedName: "properties.pickHostNameFromBackendAddress",
                    type: {
                        name: "Boolean"
                    }
                }, affinityCookieName: {
                    serializedName: "properties.affinityCookieName",
                    type: {
                        name: "String"
                    }
                }, probeEnabled: {
                    serializedName: "properties.probeEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, path: {
                    serializedName: "properties.path",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }, type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ApplicationGatewayBackendHealthServer = {
        serializedName: "ApplicationGatewayBackendHealthServer",
        type: {
            name: "Composite",
            className: "ApplicationGatewayBackendHealthServer",
            modelProperties: {
                address: {
                    serializedName: "address",
                    type: {
                        name: "String"
                    }
                },
                ipConfiguration: {
                    serializedName: "ipConfiguration",
                    type: {
                        name: "Composite",
                        className: "NetworkInterfaceIPConfiguration"
                    }
                },
                health: {
                    serializedName: "health",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationGatewayBackendHealthHttpSettings = {
        serializedName: "ApplicationGatewayBackendHealthHttpSettings",
        type: {
            name: "Composite",
            className: "ApplicationGatewayBackendHealthHttpSettings",
            modelProperties: {
                backendHttpSettings: {
                    serializedName: "backendHttpSettings",
                    type: {
                        name: "Composite",
                        className: "ApplicationGatewayBackendHttpSettings"
                    }
                },
                servers: {
                    serializedName: "servers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationGatewayBackendHealthServer"
                            }
                        }
                    }
                }
            }
        }
    };
    var ApplicationGatewayBackendHealthPool = {
        serializedName: "ApplicationGatewayBackendHealthPool",
        type: {
            name: "Composite",
            className: "ApplicationGatewayBackendHealthPool",
            modelProperties: {
                backendAddressPool: {
                    serializedName: "backendAddressPool",
                    type: {
                        name: "Composite",
                        className: "ApplicationGatewayBackendAddressPool"
                    }
                },
                backendHttpSettingsCollection: {
                    serializedName: "backendHttpSettingsCollection",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationGatewayBackendHealthHttpSettings"
                            }
                        }
                    }
                }
            }
        }
    };
    var ApplicationGatewayBackendHealth = {
        serializedName: "ApplicationGatewayBackendHealth",
        type: {
            name: "Composite",
            className: "ApplicationGatewayBackendHealth",
            modelProperties: {
                backendAddressPools: {
                    serializedName: "backendAddressPools",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationGatewayBackendHealthPool"
                            }
                        }
                    }
                }
            }
        }
    };
    var ApplicationGatewaySku = {
        serializedName: "ApplicationGatewaySku",
        type: {
            name: "Composite",
            className: "ApplicationGatewaySku",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    serializedName: "tier",
                    type: {
                        name: "String"
                    }
                },
                capacity: {
                    serializedName: "capacity",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ApplicationGatewaySslPolicy = {
        serializedName: "ApplicationGatewaySslPolicy",
        type: {
            name: "Composite",
            className: "ApplicationGatewaySslPolicy",
            modelProperties: {
                disabledSslProtocols: {
                    serializedName: "disabledSslProtocols",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                policyType: {
                    serializedName: "policyType",
                    type: {
                        name: "String"
                    }
                },
                policyName: {
                    serializedName: "policyName",
                    type: {
                        name: "String"
                    }
                },
                cipherSuites: {
                    serializedName: "cipherSuites",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                minProtocolVersion: {
                    serializedName: "minProtocolVersion",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationGatewayIPConfiguration = {
        serializedName: "ApplicationGatewayIPConfiguration",
        type: {
            name: "Composite",
            className: "ApplicationGatewayIPConfiguration",
            modelProperties: __assign({}, SubResource.type.modelProperties, { subnet: {
                    serializedName: "properties.subnet",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }, type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ApplicationGatewayAuthenticationCertificate = {
        serializedName: "ApplicationGatewayAuthenticationCertificate",
        type: {
            name: "Composite",
            className: "ApplicationGatewayAuthenticationCertificate",
            modelProperties: __assign({}, SubResource.type.modelProperties, { data: {
                    serializedName: "properties.data",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }, type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ApplicationGatewayTrustedRootCertificate = {
        serializedName: "ApplicationGatewayTrustedRootCertificate",
        type: {
            name: "Composite",
            className: "ApplicationGatewayTrustedRootCertificate",
            modelProperties: __assign({}, SubResource.type.modelProperties, { data: {
                    serializedName: "properties.data",
                    type: {
                        name: "String"
                    }
                }, keyvaultSecretId: {
                    serializedName: "properties.keyvaultSecretId",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }, type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ApplicationGatewaySslCertificate = {
        serializedName: "ApplicationGatewaySslCertificate",
        type: {
            name: "Composite",
            className: "ApplicationGatewaySslCertificate",
            modelProperties: __assign({}, SubResource.type.modelProperties, { data: {
                    serializedName: "properties.data",
                    type: {
                        name: "String"
                    }
                }, password: {
                    serializedName: "properties.password",
                    type: {
                        name: "String"
                    }
                }, publicCertData: {
                    serializedName: "properties.publicCertData",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }, type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ApplicationGatewayFrontendIPConfiguration = {
        serializedName: "ApplicationGatewayFrontendIPConfiguration",
        type: {
            name: "Composite",
            className: "ApplicationGatewayFrontendIPConfiguration",
            modelProperties: __assign({}, SubResource.type.modelProperties, { privateIPAddress: {
                    serializedName: "properties.privateIPAddress",
                    type: {
                        name: "String"
                    }
                }, privateIPAllocationMethod: {
                    serializedName: "properties.privateIPAllocationMethod",
                    type: {
                        name: "String"
                    }
                }, subnet: {
                    serializedName: "properties.subnet",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, publicIPAddress: {
                    serializedName: "properties.publicIPAddress",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }, type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ApplicationGatewayFrontendPort = {
        serializedName: "ApplicationGatewayFrontendPort",
        type: {
            name: "Composite",
            className: "ApplicationGatewayFrontendPort",
            modelProperties: __assign({}, SubResource.type.modelProperties, { port: {
                    serializedName: "properties.port",
                    type: {
                        name: "Number"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }, type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ApplicationGatewayHttpListener = {
        serializedName: "ApplicationGatewayHttpListener",
        type: {
            name: "Composite",
            className: "ApplicationGatewayHttpListener",
            modelProperties: __assign({}, SubResource.type.modelProperties, { frontendIPConfiguration: {
                    serializedName: "properties.frontendIPConfiguration",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, frontendPort: {
                    serializedName: "properties.frontendPort",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, protocol: {
                    serializedName: "properties.protocol",
                    type: {
                        name: "String"
                    }
                }, hostName: {
                    serializedName: "properties.hostName",
                    type: {
                        name: "String"
                    }
                }, sslCertificate: {
                    serializedName: "properties.sslCertificate",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, requireServerNameIndication: {
                    serializedName: "properties.requireServerNameIndication",
                    type: {
                        name: "Boolean"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }, type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ApplicationGatewayPathRule = {
        serializedName: "ApplicationGatewayPathRule",
        type: {
            name: "Composite",
            className: "ApplicationGatewayPathRule",
            modelProperties: __assign({}, SubResource.type.modelProperties, { paths: {
                    serializedName: "properties.paths",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, backendAddressPool: {
                    serializedName: "properties.backendAddressPool",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, backendHttpSettings: {
                    serializedName: "properties.backendHttpSettings",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, redirectConfiguration: {
                    serializedName: "properties.redirectConfiguration",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }, type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ApplicationGatewayProbeHealthResponseMatch = {
        serializedName: "ApplicationGatewayProbeHealthResponseMatch",
        type: {
            name: "Composite",
            className: "ApplicationGatewayProbeHealthResponseMatch",
            modelProperties: {
                body: {
                    serializedName: "body",
                    type: {
                        name: "String"
                    }
                },
                statusCodes: {
                    serializedName: "statusCodes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ApplicationGatewayProbe = {
        serializedName: "ApplicationGatewayProbe",
        type: {
            name: "Composite",
            className: "ApplicationGatewayProbe",
            modelProperties: __assign({}, SubResource.type.modelProperties, { protocol: {
                    serializedName: "properties.protocol",
                    type: {
                        name: "String"
                    }
                }, host: {
                    serializedName: "properties.host",
                    type: {
                        name: "String"
                    }
                }, path: {
                    serializedName: "properties.path",
                    type: {
                        name: "String"
                    }
                }, interval: {
                    serializedName: "properties.interval",
                    type: {
                        name: "Number"
                    }
                }, timeout: {
                    serializedName: "properties.timeout",
                    type: {
                        name: "Number"
                    }
                }, unhealthyThreshold: {
                    serializedName: "properties.unhealthyThreshold",
                    type: {
                        name: "Number"
                    }
                }, pickHostNameFromBackendHttpSettings: {
                    serializedName: "properties.pickHostNameFromBackendHttpSettings",
                    type: {
                        name: "Boolean"
                    }
                }, minServers: {
                    serializedName: "properties.minServers",
                    type: {
                        name: "Number"
                    }
                }, match: {
                    serializedName: "properties.match",
                    type: {
                        name: "Composite",
                        className: "ApplicationGatewayProbeHealthResponseMatch"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }, type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ApplicationGatewayRequestRoutingRule = {
        serializedName: "ApplicationGatewayRequestRoutingRule",
        type: {
            name: "Composite",
            className: "ApplicationGatewayRequestRoutingRule",
            modelProperties: __assign({}, SubResource.type.modelProperties, { ruleType: {
                    serializedName: "properties.ruleType",
                    type: {
                        name: "String"
                    }
                }, backendAddressPool: {
                    serializedName: "properties.backendAddressPool",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, backendHttpSettings: {
                    serializedName: "properties.backendHttpSettings",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, httpListener: {
                    serializedName: "properties.httpListener",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, urlPathMap: {
                    serializedName: "properties.urlPathMap",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, redirectConfiguration: {
                    serializedName: "properties.redirectConfiguration",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }, type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ApplicationGatewayRedirectConfiguration = {
        serializedName: "ApplicationGatewayRedirectConfiguration",
        type: {
            name: "Composite",
            className: "ApplicationGatewayRedirectConfiguration",
            modelProperties: __assign({}, SubResource.type.modelProperties, { redirectType: {
                    serializedName: "properties.redirectType",
                    type: {
                        name: "String"
                    }
                }, targetListener: {
                    serializedName: "properties.targetListener",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, targetUrl: {
                    serializedName: "properties.targetUrl",
                    type: {
                        name: "String"
                    }
                }, includePath: {
                    serializedName: "properties.includePath",
                    type: {
                        name: "Boolean"
                    }
                }, includeQueryString: {
                    serializedName: "properties.includeQueryString",
                    type: {
                        name: "Boolean"
                    }
                }, requestRoutingRules: {
                    serializedName: "properties.requestRoutingRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }, urlPathMaps: {
                    serializedName: "properties.urlPathMaps",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }, pathRules: {
                    serializedName: "properties.pathRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }, type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ApplicationGatewayUrlPathMap = {
        serializedName: "ApplicationGatewayUrlPathMap",
        type: {
            name: "Composite",
            className: "ApplicationGatewayUrlPathMap",
            modelProperties: __assign({}, SubResource.type.modelProperties, { defaultBackendAddressPool: {
                    serializedName: "properties.defaultBackendAddressPool",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, defaultBackendHttpSettings: {
                    serializedName: "properties.defaultBackendHttpSettings",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, defaultRedirectConfiguration: {
                    serializedName: "properties.defaultRedirectConfiguration",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, pathRules: {
                    serializedName: "properties.pathRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationGatewayPathRule"
                            }
                        }
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }, type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ApplicationGatewayFirewallDisabledRuleGroup = {
        serializedName: "ApplicationGatewayFirewallDisabledRuleGroup",
        type: {
            name: "Composite",
            className: "ApplicationGatewayFirewallDisabledRuleGroup",
            modelProperties: {
                ruleGroupName: {
                    required: true,
                    serializedName: "ruleGroupName",
                    type: {
                        name: "String"
                    }
                },
                rules: {
                    serializedName: "rules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                }
            }
        }
    };
    var ApplicationGatewayWebApplicationFirewallConfiguration = {
        serializedName: "ApplicationGatewayWebApplicationFirewallConfiguration",
        type: {
            name: "Composite",
            className: "ApplicationGatewayWebApplicationFirewallConfiguration",
            modelProperties: {
                enabled: {
                    required: true,
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                firewallMode: {
                    required: true,
                    serializedName: "firewallMode",
                    type: {
                        name: "String"
                    }
                },
                ruleSetType: {
                    required: true,
                    serializedName: "ruleSetType",
                    type: {
                        name: "String"
                    }
                },
                ruleSetVersion: {
                    required: true,
                    serializedName: "ruleSetVersion",
                    type: {
                        name: "String"
                    }
                },
                disabledRuleGroups: {
                    serializedName: "disabledRuleGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationGatewayFirewallDisabledRuleGroup"
                            }
                        }
                    }
                },
                requestBodyCheck: {
                    serializedName: "requestBodyCheck",
                    type: {
                        name: "Boolean"
                    }
                },
                maxRequestBodySize: {
                    serializedName: "maxRequestBodySize",
                    constraints: {
                        InclusiveMaximum: 128,
                        InclusiveMinimum: 8
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ApplicationGatewayAutoscaleConfiguration = {
        serializedName: "ApplicationGatewayAutoscaleConfiguration",
        type: {
            name: "Composite",
            className: "ApplicationGatewayAutoscaleConfiguration",
            modelProperties: {
                minCapacity: {
                    required: true,
                    serializedName: "minCapacity",
                    constraints: {
                        InclusiveMinimum: 2
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ApplicationGateway = {
        serializedName: "ApplicationGateway",
        type: {
            name: "Composite",
            className: "ApplicationGateway",
            modelProperties: __assign({}, Resource.type.modelProperties, { sku: {
                    serializedName: "properties.sku",
                    type: {
                        name: "Composite",
                        className: "ApplicationGatewaySku"
                    }
                }, sslPolicy: {
                    serializedName: "properties.sslPolicy",
                    type: {
                        name: "Composite",
                        className: "ApplicationGatewaySslPolicy"
                    }
                }, operationalState: {
                    readOnly: true,
                    serializedName: "properties.operationalState",
                    type: {
                        name: "String"
                    }
                }, gatewayIPConfigurations: {
                    serializedName: "properties.gatewayIPConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationGatewayIPConfiguration"
                            }
                        }
                    }
                }, authenticationCertificates: {
                    serializedName: "properties.authenticationCertificates",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationGatewayAuthenticationCertificate"
                            }
                        }
                    }
                }, trustedRootCertificates: {
                    serializedName: "properties.trustedRootCertificates",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationGatewayTrustedRootCertificate"
                            }
                        }
                    }
                }, sslCertificates: {
                    serializedName: "properties.sslCertificates",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationGatewaySslCertificate"
                            }
                        }
                    }
                }, frontendIPConfigurations: {
                    serializedName: "properties.frontendIPConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationGatewayFrontendIPConfiguration"
                            }
                        }
                    }
                }, frontendPorts: {
                    serializedName: "properties.frontendPorts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationGatewayFrontendPort"
                            }
                        }
                    }
                }, probes: {
                    serializedName: "properties.probes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationGatewayProbe"
                            }
                        }
                    }
                }, backendAddressPools: {
                    serializedName: "properties.backendAddressPools",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationGatewayBackendAddressPool"
                            }
                        }
                    }
                }, backendHttpSettingsCollection: {
                    serializedName: "properties.backendHttpSettingsCollection",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationGatewayBackendHttpSettings"
                            }
                        }
                    }
                }, httpListeners: {
                    serializedName: "properties.httpListeners",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationGatewayHttpListener"
                            }
                        }
                    }
                }, urlPathMaps: {
                    serializedName: "properties.urlPathMaps",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationGatewayUrlPathMap"
                            }
                        }
                    }
                }, requestRoutingRules: {
                    serializedName: "properties.requestRoutingRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationGatewayRequestRoutingRule"
                            }
                        }
                    }
                }, redirectConfigurations: {
                    serializedName: "properties.redirectConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationGatewayRedirectConfiguration"
                            }
                        }
                    }
                }, webApplicationFirewallConfiguration: {
                    serializedName: "properties.webApplicationFirewallConfiguration",
                    type: {
                        name: "Composite",
                        className: "ApplicationGatewayWebApplicationFirewallConfiguration"
                    }
                }, enableHttp2: {
                    serializedName: "properties.enableHttp2",
                    type: {
                        name: "Boolean"
                    }
                }, enableFips: {
                    serializedName: "properties.enableFips",
                    type: {
                        name: "Boolean"
                    }
                }, autoscaleConfiguration: {
                    serializedName: "properties.autoscaleConfiguration",
                    type: {
                        name: "Composite",
                        className: "ApplicationGatewayAutoscaleConfiguration"
                    }
                }, resourceGuid: {
                    serializedName: "properties.resourceGuid",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }, zones: {
                    serializedName: "zones",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var ApplicationGatewayFirewallRule = {
        serializedName: "ApplicationGatewayFirewallRule",
        type: {
            name: "Composite",
            className: "ApplicationGatewayFirewallRule",
            modelProperties: {
                ruleId: {
                    required: true,
                    serializedName: "ruleId",
                    type: {
                        name: "Number"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationGatewayFirewallRuleGroup = {
        serializedName: "ApplicationGatewayFirewallRuleGroup",
        type: {
            name: "Composite",
            className: "ApplicationGatewayFirewallRuleGroup",
            modelProperties: {
                ruleGroupName: {
                    required: true,
                    serializedName: "ruleGroupName",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                rules: {
                    required: true,
                    serializedName: "rules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationGatewayFirewallRule"
                            }
                        }
                    }
                }
            }
        }
    };
    var ApplicationGatewayFirewallRuleSet = {
        serializedName: "ApplicationGatewayFirewallRuleSet",
        type: {
            name: "Composite",
            className: "ApplicationGatewayFirewallRuleSet",
            modelProperties: __assign({}, Resource.type.modelProperties, { provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, ruleSetType: {
                    required: true,
                    serializedName: "properties.ruleSetType",
                    type: {
                        name: "String"
                    }
                }, ruleSetVersion: {
                    required: true,
                    serializedName: "properties.ruleSetVersion",
                    type: {
                        name: "String"
                    }
                }, ruleGroups: {
                    required: true,
                    serializedName: "properties.ruleGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationGatewayFirewallRuleGroup"
                            }
                        }
                    }
                } })
        }
    };
    var ApplicationGatewayAvailableWafRuleSetsResult = {
        serializedName: "ApplicationGatewayAvailableWafRuleSetsResult",
        type: {
            name: "Composite",
            className: "ApplicationGatewayAvailableWafRuleSetsResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationGatewayFirewallRuleSet"
                            }
                        }
                    }
                }
            }
        }
    };
    var ApplicationGatewayAvailableSslOptions = {
        serializedName: "ApplicationGatewayAvailableSslOptions",
        type: {
            name: "Composite",
            className: "ApplicationGatewayAvailableSslOptions",
            modelProperties: __assign({}, Resource.type.modelProperties, { predefinedPolicies: {
                    serializedName: "properties.predefinedPolicies",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }, defaultPolicy: {
                    serializedName: "properties.defaultPolicy",
                    type: {
                        name: "String"
                    }
                }, availableCipherSuites: {
                    serializedName: "properties.availableCipherSuites",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, availableProtocols: {
                    serializedName: "properties.availableProtocols",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var ApplicationGatewaySslPredefinedPolicy = {
        serializedName: "ApplicationGatewaySslPredefinedPolicy",
        type: {
            name: "Composite",
            className: "ApplicationGatewaySslPredefinedPolicy",
            modelProperties: __assign({}, SubResource.type.modelProperties, { name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, cipherSuites: {
                    serializedName: "properties.cipherSuites",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, minProtocolVersion: {
                    serializedName: "properties.minProtocolVersion",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var TagsObject = {
        serializedName: "TagsObject",
        type: {
            name: "Composite",
            className: "TagsObject",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var AvailableDelegation = {
        serializedName: "AvailableDelegation",
        type: {
            name: "Composite",
            className: "AvailableDelegation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                serviceName: {
                    serializedName: "serviceName",
                    type: {
                        name: "String"
                    }
                },
                actions: {
                    serializedName: "actions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var AzureFirewallIPConfiguration = {
        serializedName: "AzureFirewallIPConfiguration",
        type: {
            name: "Composite",
            className: "AzureFirewallIPConfiguration",
            modelProperties: __assign({}, SubResource.type.modelProperties, { privateIPAddress: {
                    serializedName: "properties.privateIPAddress",
                    type: {
                        name: "String"
                    }
                }, subnet: {
                    serializedName: "properties.subnet",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, publicIPAddress: {
                    serializedName: "properties.publicIPAddress",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var AzureFirewallRCAction = {
        serializedName: "AzureFirewallRCAction",
        type: {
            name: "Composite",
            className: "AzureFirewallRCAction",
            modelProperties: {
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AzureFirewallApplicationRuleProtocol = {
        serializedName: "AzureFirewallApplicationRuleProtocol",
        type: {
            name: "Composite",
            className: "AzureFirewallApplicationRuleProtocol",
            modelProperties: {
                protocolType: {
                    serializedName: "protocolType",
                    type: {
                        name: "String"
                    }
                },
                port: {
                    serializedName: "port",
                    constraints: {
                        InclusiveMaximum: 64000,
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var AzureFirewallApplicationRule = {
        serializedName: "AzureFirewallApplicationRule",
        type: {
            name: "Composite",
            className: "AzureFirewallApplicationRule",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                sourceAddresses: {
                    serializedName: "sourceAddresses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                protocols: {
                    serializedName: "protocols",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AzureFirewallApplicationRuleProtocol"
                            }
                        }
                    }
                },
                targetFqdns: {
                    serializedName: "targetFqdns",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                fqdnTags: {
                    serializedName: "fqdnTags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var AzureFirewallApplicationRuleCollection = {
        serializedName: "AzureFirewallApplicationRuleCollection",
        type: {
            name: "Composite",
            className: "AzureFirewallApplicationRuleCollection",
            modelProperties: __assign({}, SubResource.type.modelProperties, { priority: {
                    serializedName: "properties.priority",
                    constraints: {
                        InclusiveMaximum: 65000,
                        InclusiveMinimum: 100
                    },
                    type: {
                        name: "Number"
                    }
                }, action: {
                    serializedName: "properties.action",
                    type: {
                        name: "Composite",
                        className: "AzureFirewallRCAction"
                    }
                }, rules: {
                    serializedName: "properties.rules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AzureFirewallApplicationRule"
                            }
                        }
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var AzureFirewallNatRCAction = {
        serializedName: "AzureFirewallNatRCAction",
        type: {
            name: "Composite",
            className: "AzureFirewallNatRCAction",
            modelProperties: {
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AzureFirewallNatRule = {
        serializedName: "AzureFirewallNatRule",
        type: {
            name: "Composite",
            className: "AzureFirewallNatRule",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                sourceAddresses: {
                    serializedName: "sourceAddresses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                destinationAddresses: {
                    serializedName: "destinationAddresses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                destinationPorts: {
                    serializedName: "destinationPorts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                protocols: {
                    serializedName: "protocols",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                translatedAddress: {
                    serializedName: "translatedAddress",
                    type: {
                        name: "String"
                    }
                },
                translatedPort: {
                    serializedName: "translatedPort",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AzureFirewallNatRuleCollection = {
        serializedName: "AzureFirewallNatRuleCollection",
        type: {
            name: "Composite",
            className: "AzureFirewallNatRuleCollection",
            modelProperties: __assign({}, SubResource.type.modelProperties, { priority: {
                    serializedName: "properties.priority",
                    constraints: {
                        InclusiveMaximum: 65000,
                        InclusiveMinimum: 100
                    },
                    type: {
                        name: "Number"
                    }
                }, action: {
                    serializedName: "properties.action",
                    type: {
                        name: "Composite",
                        className: "AzureFirewallNatRCAction"
                    }
                }, rules: {
                    serializedName: "properties.rules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AzureFirewallNatRule"
                            }
                        }
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var AzureFirewallNetworkRule = {
        serializedName: "AzureFirewallNetworkRule",
        type: {
            name: "Composite",
            className: "AzureFirewallNetworkRule",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                protocols: {
                    serializedName: "protocols",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                sourceAddresses: {
                    serializedName: "sourceAddresses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                destinationAddresses: {
                    serializedName: "destinationAddresses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                destinationPorts: {
                    serializedName: "destinationPorts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var AzureFirewallNetworkRuleCollection = {
        serializedName: "AzureFirewallNetworkRuleCollection",
        type: {
            name: "Composite",
            className: "AzureFirewallNetworkRuleCollection",
            modelProperties: __assign({}, SubResource.type.modelProperties, { priority: {
                    serializedName: "properties.priority",
                    constraints: {
                        InclusiveMaximum: 65000,
                        InclusiveMinimum: 100
                    },
                    type: {
                        name: "Number"
                    }
                }, action: {
                    serializedName: "properties.action",
                    type: {
                        name: "Composite",
                        className: "AzureFirewallRCAction"
                    }
                }, rules: {
                    serializedName: "properties.rules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AzureFirewallNetworkRule"
                            }
                        }
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var AzureFirewall = {
        serializedName: "AzureFirewall",
        type: {
            name: "Composite",
            className: "AzureFirewall",
            modelProperties: __assign({}, Resource.type.modelProperties, { applicationRuleCollections: {
                    serializedName: "properties.applicationRuleCollections",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AzureFirewallApplicationRuleCollection"
                            }
                        }
                    }
                }, natRuleCollections: {
                    serializedName: "properties.natRuleCollections",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AzureFirewallNatRuleCollection"
                            }
                        }
                    }
                }, networkRuleCollections: {
                    serializedName: "properties.networkRuleCollections",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AzureFirewallNetworkRuleCollection"
                            }
                        }
                    }
                }, ipConfigurations: {
                    serializedName: "properties.ipConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AzureFirewallIPConfiguration"
                            }
                        }
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var AzureFirewallFqdnTag = {
        serializedName: "AzureFirewallFqdnTag",
        type: {
            name: "Composite",
            className: "AzureFirewallFqdnTag",
            modelProperties: __assign({}, Resource.type.modelProperties, { provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, fqdnTagName: {
                    readOnly: true,
                    serializedName: "properties.fqdnTagName",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var DnsNameAvailabilityResult = {
        serializedName: "DnsNameAvailabilityResult",
        type: {
            name: "Composite",
            className: "DnsNameAvailabilityResult",
            modelProperties: {
                available: {
                    serializedName: "available",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var DdosProtectionPlan = {
        serializedName: "DdosProtectionPlan",
        type: {
            name: "Composite",
            className: "DdosProtectionPlan",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                resourceGuid: {
                    readOnly: true,
                    serializedName: "properties.resourceGuid",
                    type: {
                        name: "String"
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                },
                virtualNetworks: {
                    readOnly: true,
                    serializedName: "properties.virtualNetworks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                },
                etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EndpointServiceResult = {
        serializedName: "EndpointServiceResult",
        type: {
            name: "Composite",
            className: "EndpointServiceResult",
            modelProperties: __assign({}, SubResource.type.modelProperties, { name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ExpressRouteCircuitAuthorization = {
        serializedName: "ExpressRouteCircuitAuthorization",
        type: {
            name: "Composite",
            className: "ExpressRouteCircuitAuthorization",
            modelProperties: __assign({}, SubResource.type.modelProperties, { authorizationKey: {
                    serializedName: "properties.authorizationKey",
                    type: {
                        name: "String"
                    }
                }, authorizationUseStatus: {
                    serializedName: "properties.authorizationUseStatus",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ExpressRouteCircuitPeeringConfig = {
        serializedName: "ExpressRouteCircuitPeeringConfig",
        type: {
            name: "Composite",
            className: "ExpressRouteCircuitPeeringConfig",
            modelProperties: {
                advertisedPublicPrefixes: {
                    serializedName: "advertisedPublicPrefixes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                advertisedCommunities: {
                    serializedName: "advertisedCommunities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                advertisedPublicPrefixesState: {
                    serializedName: "advertisedPublicPrefixesState",
                    type: {
                        name: "String"
                    }
                },
                legacyMode: {
                    serializedName: "legacyMode",
                    type: {
                        name: "Number"
                    }
                },
                customerASN: {
                    serializedName: "customerASN",
                    type: {
                        name: "Number"
                    }
                },
                routingRegistryName: {
                    serializedName: "routingRegistryName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RouteFilterRule = {
        serializedName: "RouteFilterRule",
        type: {
            name: "Composite",
            className: "RouteFilterRule",
            modelProperties: __assign({}, SubResource.type.modelProperties, { access: {
                    required: true,
                    serializedName: "properties.access",
                    type: {
                        name: "String"
                    }
                }, routeFilterRuleType: {
                    required: true,
                    isConstant: true,
                    serializedName: "properties.routeFilterRuleType",
                    defaultValue: 'Community',
                    type: {
                        name: "String"
                    }
                }, communities: {
                    required: true,
                    serializedName: "properties.communities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ExpressRouteCircuitStats = {
        serializedName: "ExpressRouteCircuitStats",
        type: {
            name: "Composite",
            className: "ExpressRouteCircuitStats",
            modelProperties: {
                primarybytesIn: {
                    serializedName: "primarybytesIn",
                    type: {
                        name: "Number"
                    }
                },
                primarybytesOut: {
                    serializedName: "primarybytesOut",
                    type: {
                        name: "Number"
                    }
                },
                secondarybytesIn: {
                    serializedName: "secondarybytesIn",
                    type: {
                        name: "Number"
                    }
                },
                secondarybytesOut: {
                    serializedName: "secondarybytesOut",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ExpressRouteConnectionId = {
        serializedName: "ExpressRouteConnectionId",
        type: {
            name: "Composite",
            className: "ExpressRouteConnectionId",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ExpressRouteCircuitConnection = {
        serializedName: "ExpressRouteCircuitConnection",
        type: {
            name: "Composite",
            className: "ExpressRouteCircuitConnection",
            modelProperties: __assign({}, SubResource.type.modelProperties, { expressRouteCircuitPeering: {
                    serializedName: "properties.expressRouteCircuitPeering",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, peerExpressRouteCircuitPeering: {
                    serializedName: "properties.peerExpressRouteCircuitPeering",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, addressPrefix: {
                    serializedName: "properties.addressPrefix",
                    type: {
                        name: "String"
                    }
                }, authorizationKey: {
                    serializedName: "properties.authorizationKey",
                    type: {
                        name: "String"
                    }
                }, circuitConnectionStatus: {
                    readOnly: true,
                    serializedName: "properties.circuitConnectionStatus",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ExpressRouteCircuitPeering = {
        serializedName: "ExpressRouteCircuitPeering",
        type: {
            name: "Composite",
            className: "ExpressRouteCircuitPeering",
            modelProperties: __assign({}, SubResource.type.modelProperties, { peeringType: {
                    serializedName: "properties.peeringType",
                    type: {
                        name: "String"
                    }
                }, state: {
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                }, azureASN: {
                    serializedName: "properties.azureASN",
                    type: {
                        name: "Number"
                    }
                }, peerASN: {
                    serializedName: "properties.peerASN",
                    constraints: {
                        InclusiveMaximum: 4294967295,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }, primaryPeerAddressPrefix: {
                    serializedName: "properties.primaryPeerAddressPrefix",
                    type: {
                        name: "String"
                    }
                }, secondaryPeerAddressPrefix: {
                    serializedName: "properties.secondaryPeerAddressPrefix",
                    type: {
                        name: "String"
                    }
                }, primaryAzurePort: {
                    serializedName: "properties.primaryAzurePort",
                    type: {
                        name: "String"
                    }
                }, secondaryAzurePort: {
                    serializedName: "properties.secondaryAzurePort",
                    type: {
                        name: "String"
                    }
                }, sharedKey: {
                    serializedName: "properties.sharedKey",
                    type: {
                        name: "String"
                    }
                }, vlanId: {
                    serializedName: "properties.vlanId",
                    type: {
                        name: "Number"
                    }
                }, microsoftPeeringConfig: {
                    serializedName: "properties.microsoftPeeringConfig",
                    type: {
                        name: "Composite",
                        className: "ExpressRouteCircuitPeeringConfig"
                    }
                }, stats: {
                    serializedName: "properties.stats",
                    type: {
                        name: "Composite",
                        className: "ExpressRouteCircuitStats"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, gatewayManagerEtag: {
                    serializedName: "properties.gatewayManagerEtag",
                    type: {
                        name: "String"
                    }
                }, lastModifiedBy: {
                    serializedName: "properties.lastModifiedBy",
                    type: {
                        name: "String"
                    }
                }, routeFilter: {
                    serializedName: "properties.routeFilter",
                    type: {
                        name: "Composite",
                        className: "RouteFilter"
                    }
                }, ipv6PeeringConfig: {
                    serializedName: "properties.ipv6PeeringConfig",
                    type: {
                        name: "Composite",
                        className: "Ipv6ExpressRouteCircuitPeeringConfig"
                    }
                }, expressRouteConnection: {
                    serializedName: "properties.expressRouteConnection",
                    type: {
                        name: "Composite",
                        className: "ExpressRouteConnectionId"
                    }
                }, connections: {
                    serializedName: "properties.connections",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExpressRouteCircuitConnection"
                            }
                        }
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RouteFilter = {
        serializedName: "RouteFilter",
        type: {
            name: "Composite",
            className: "RouteFilter",
            modelProperties: __assign({}, Resource.type.modelProperties, { rules: {
                    serializedName: "properties.rules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RouteFilterRule"
                            }
                        }
                    }
                }, peerings: {
                    serializedName: "properties.peerings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExpressRouteCircuitPeering"
                            }
                        }
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Ipv6ExpressRouteCircuitPeeringConfig = {
        serializedName: "Ipv6ExpressRouteCircuitPeeringConfig",
        type: {
            name: "Composite",
            className: "Ipv6ExpressRouteCircuitPeeringConfig",
            modelProperties: {
                primaryPeerAddressPrefix: {
                    serializedName: "primaryPeerAddressPrefix",
                    type: {
                        name: "String"
                    }
                },
                secondaryPeerAddressPrefix: {
                    serializedName: "secondaryPeerAddressPrefix",
                    type: {
                        name: "String"
                    }
                },
                microsoftPeeringConfig: {
                    serializedName: "microsoftPeeringConfig",
                    type: {
                        name: "Composite",
                        className: "ExpressRouteCircuitPeeringConfig"
                    }
                },
                routeFilter: {
                    serializedName: "routeFilter",
                    type: {
                        name: "Composite",
                        className: "RouteFilter"
                    }
                },
                state: {
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ExpressRouteCircuitSku = {
        serializedName: "ExpressRouteCircuitSku",
        type: {
            name: "Composite",
            className: "ExpressRouteCircuitSku",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    serializedName: "tier",
                    type: {
                        name: "String"
                    }
                },
                family: {
                    serializedName: "family",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ExpressRouteCircuitServiceProviderProperties = {
        serializedName: "ExpressRouteCircuitServiceProviderProperties",
        type: {
            name: "Composite",
            className: "ExpressRouteCircuitServiceProviderProperties",
            modelProperties: {
                serviceProviderName: {
                    serializedName: "serviceProviderName",
                    type: {
                        name: "String"
                    }
                },
                peeringLocation: {
                    serializedName: "peeringLocation",
                    type: {
                        name: "String"
                    }
                },
                bandwidthInMbps: {
                    serializedName: "bandwidthInMbps",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ExpressRouteCircuit = {
        serializedName: "ExpressRouteCircuit",
        type: {
            name: "Composite",
            className: "ExpressRouteCircuit",
            modelProperties: __assign({}, Resource.type.modelProperties, { sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "ExpressRouteCircuitSku"
                    }
                }, allowClassicOperations: {
                    serializedName: "properties.allowClassicOperations",
                    type: {
                        name: "Boolean"
                    }
                }, circuitProvisioningState: {
                    serializedName: "properties.circuitProvisioningState",
                    type: {
                        name: "String"
                    }
                }, serviceProviderProvisioningState: {
                    serializedName: "properties.serviceProviderProvisioningState",
                    type: {
                        name: "String"
                    }
                }, authorizations: {
                    serializedName: "properties.authorizations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExpressRouteCircuitAuthorization"
                            }
                        }
                    }
                }, peerings: {
                    serializedName: "properties.peerings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExpressRouteCircuitPeering"
                            }
                        }
                    }
                }, serviceKey: {
                    serializedName: "properties.serviceKey",
                    type: {
                        name: "String"
                    }
                }, serviceProviderNotes: {
                    serializedName: "properties.serviceProviderNotes",
                    type: {
                        name: "String"
                    }
                }, serviceProviderProperties: {
                    serializedName: "properties.serviceProviderProperties",
                    type: {
                        name: "Composite",
                        className: "ExpressRouteCircuitServiceProviderProperties"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, gatewayManagerEtag: {
                    serializedName: "properties.gatewayManagerEtag",
                    type: {
                        name: "String"
                    }
                }, allowGlobalReach: {
                    serializedName: "properties.allowGlobalReach",
                    type: {
                        name: "Boolean"
                    }
                }, etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ExpressRouteCircuitArpTable = {
        serializedName: "ExpressRouteCircuitArpTable",
        type: {
            name: "Composite",
            className: "ExpressRouteCircuitArpTable",
            modelProperties: {
                age: {
                    serializedName: "age",
                    type: {
                        name: "Number"
                    }
                },
                interfaceProperty: {
                    serializedName: "interface",
                    type: {
                        name: "String"
                    }
                },
                ipAddress: {
                    serializedName: "ipAddress",
                    type: {
                        name: "String"
                    }
                },
                macAddress: {
                    serializedName: "macAddress",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ExpressRouteCircuitsArpTableListResult = {
        serializedName: "ExpressRouteCircuitsArpTableListResult",
        type: {
            name: "Composite",
            className: "ExpressRouteCircuitsArpTableListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExpressRouteCircuitArpTable"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ExpressRouteCircuitRoutesTable = {
        serializedName: "ExpressRouteCircuitRoutesTable",
        type: {
            name: "Composite",
            className: "ExpressRouteCircuitRoutesTable",
            modelProperties: {
                network: {
                    serializedName: "network",
                    type: {
                        name: "String"
                    }
                },
                nextHop: {
                    serializedName: "nextHop",
                    type: {
                        name: "String"
                    }
                },
                locPrf: {
                    serializedName: "locPrf",
                    type: {
                        name: "String"
                    }
                },
                weight: {
                    serializedName: "weight",
                    type: {
                        name: "Number"
                    }
                },
                path: {
                    serializedName: "path",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ExpressRouteCircuitsRoutesTableListResult = {
        serializedName: "ExpressRouteCircuitsRoutesTableListResult",
        type: {
            name: "Composite",
            className: "ExpressRouteCircuitsRoutesTableListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExpressRouteCircuitRoutesTable"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ExpressRouteCircuitRoutesTableSummary = {
        serializedName: "ExpressRouteCircuitRoutesTableSummary",
        type: {
            name: "Composite",
            className: "ExpressRouteCircuitRoutesTableSummary",
            modelProperties: {
                neighbor: {
                    serializedName: "neighbor",
                    type: {
                        name: "String"
                    }
                },
                v: {
                    serializedName: "v",
                    type: {
                        name: "Number"
                    }
                },
                as: {
                    serializedName: "as",
                    type: {
                        name: "Number"
                    }
                },
                upDown: {
                    serializedName: "upDown",
                    type: {
                        name: "String"
                    }
                },
                statePfxRcd: {
                    serializedName: "statePfxRcd",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ExpressRouteCircuitsRoutesTableSummaryListResult = {
        serializedName: "ExpressRouteCircuitsRoutesTableSummaryListResult",
        type: {
            name: "Composite",
            className: "ExpressRouteCircuitsRoutesTableSummaryListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExpressRouteCircuitRoutesTableSummary"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ExpressRouteServiceProviderBandwidthsOffered = {
        serializedName: "ExpressRouteServiceProviderBandwidthsOffered",
        type: {
            name: "Composite",
            className: "ExpressRouteServiceProviderBandwidthsOffered",
            modelProperties: {
                offerName: {
                    serializedName: "offerName",
                    type: {
                        name: "String"
                    }
                },
                valueInMbps: {
                    serializedName: "valueInMbps",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ExpressRouteServiceProvider = {
        serializedName: "ExpressRouteServiceProvider",
        type: {
            name: "Composite",
            className: "ExpressRouteServiceProvider",
            modelProperties: __assign({}, Resource.type.modelProperties, { peeringLocations: {
                    serializedName: "properties.peeringLocations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, bandwidthsOffered: {
                    serializedName: "properties.bandwidthsOffered",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExpressRouteServiceProviderBandwidthsOffered"
                            }
                        }
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ExpressRouteCrossConnectionRoutesTableSummary = {
        serializedName: "ExpressRouteCrossConnectionRoutesTableSummary",
        type: {
            name: "Composite",
            className: "ExpressRouteCrossConnectionRoutesTableSummary",
            modelProperties: {
                neighbor: {
                    serializedName: "neighbor",
                    type: {
                        name: "String"
                    }
                },
                asn: {
                    serializedName: "asn",
                    type: {
                        name: "Number"
                    }
                },
                upDown: {
                    serializedName: "upDown",
                    type: {
                        name: "String"
                    }
                },
                stateOrPrefixesReceived: {
                    serializedName: "stateOrPrefixesReceived",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ExpressRouteCrossConnectionsRoutesTableSummaryListResult = {
        serializedName: "ExpressRouteCrossConnectionsRoutesTableSummaryListResult",
        type: {
            name: "Composite",
            className: "ExpressRouteCrossConnectionsRoutesTableSummaryListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExpressRouteCrossConnectionRoutesTableSummary"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ExpressRouteCircuitReference = {
        serializedName: "ExpressRouteCircuitReference",
        type: {
            name: "Composite",
            className: "ExpressRouteCircuitReference",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ExpressRouteCrossConnectionPeering = {
        serializedName: "ExpressRouteCrossConnectionPeering",
        type: {
            name: "Composite",
            className: "ExpressRouteCrossConnectionPeering",
            modelProperties: __assign({}, SubResource.type.modelProperties, { peeringType: {
                    serializedName: "properties.peeringType",
                    type: {
                        name: "String"
                    }
                }, state: {
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                }, azureASN: {
                    readOnly: true,
                    serializedName: "properties.azureASN",
                    type: {
                        name: "Number"
                    }
                }, peerASN: {
                    serializedName: "properties.peerASN",
                    constraints: {
                        InclusiveMaximum: 4294967295,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }, primaryPeerAddressPrefix: {
                    serializedName: "properties.primaryPeerAddressPrefix",
                    type: {
                        name: "String"
                    }
                }, secondaryPeerAddressPrefix: {
                    serializedName: "properties.secondaryPeerAddressPrefix",
                    type: {
                        name: "String"
                    }
                }, primaryAzurePort: {
                    readOnly: true,
                    serializedName: "properties.primaryAzurePort",
                    type: {
                        name: "String"
                    }
                }, secondaryAzurePort: {
                    readOnly: true,
                    serializedName: "properties.secondaryAzurePort",
                    type: {
                        name: "String"
                    }
                }, sharedKey: {
                    serializedName: "properties.sharedKey",
                    type: {
                        name: "String"
                    }
                }, vlanId: {
                    serializedName: "properties.vlanId",
                    type: {
                        name: "Number"
                    }
                }, microsoftPeeringConfig: {
                    serializedName: "properties.microsoftPeeringConfig",
                    type: {
                        name: "Composite",
                        className: "ExpressRouteCircuitPeeringConfig"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, gatewayManagerEtag: {
                    serializedName: "properties.gatewayManagerEtag",
                    type: {
                        name: "String"
                    }
                }, lastModifiedBy: {
                    serializedName: "properties.lastModifiedBy",
                    type: {
                        name: "String"
                    }
                }, ipv6PeeringConfig: {
                    serializedName: "properties.ipv6PeeringConfig",
                    type: {
                        name: "Composite",
                        className: "Ipv6ExpressRouteCircuitPeeringConfig"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ExpressRouteCrossConnection = {
        serializedName: "ExpressRouteCrossConnection",
        type: {
            name: "Composite",
            className: "ExpressRouteCrossConnection",
            modelProperties: __assign({}, Resource.type.modelProperties, { primaryAzurePort: {
                    readOnly: true,
                    serializedName: "properties.primaryAzurePort",
                    type: {
                        name: "String"
                    }
                }, secondaryAzurePort: {
                    readOnly: true,
                    serializedName: "properties.secondaryAzurePort",
                    type: {
                        name: "String"
                    }
                }, sTag: {
                    readOnly: true,
                    serializedName: "properties.sTag",
                    type: {
                        name: "Number"
                    }
                }, peeringLocation: {
                    serializedName: "properties.peeringLocation",
                    type: {
                        name: "String"
                    }
                }, bandwidthInMbps: {
                    serializedName: "properties.bandwidthInMbps",
                    type: {
                        name: "Number"
                    }
                }, expressRouteCircuit: {
                    serializedName: "properties.expressRouteCircuit",
                    type: {
                        name: "Composite",
                        className: "ExpressRouteCircuitReference"
                    }
                }, serviceProviderProvisioningState: {
                    serializedName: "properties.serviceProviderProvisioningState",
                    type: {
                        name: "String"
                    }
                }, serviceProviderNotes: {
                    serializedName: "properties.serviceProviderNotes",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, peerings: {
                    serializedName: "properties.peerings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExpressRouteCrossConnectionPeering"
                            }
                        }
                    }
                }, etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VirtualHubId = {
        serializedName: "VirtualHubId",
        type: {
            name: "Composite",
            className: "VirtualHubId",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ExpressRouteCircuitPeeringId = {
        serializedName: "ExpressRouteCircuitPeeringId",
        type: {
            name: "Composite",
            className: "ExpressRouteCircuitPeeringId",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds = {
        serializedName: "ExpressRouteGatewayProperties_autoScaleConfiguration_bounds",
        type: {
            name: "Composite",
            className: "ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds",
            modelProperties: {
                min: {
                    serializedName: "min",
                    type: {
                        name: "Number"
                    }
                },
                max: {
                    serializedName: "max",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ExpressRouteGatewayPropertiesAutoScaleConfiguration = {
        serializedName: "ExpressRouteGatewayProperties_autoScaleConfiguration",
        type: {
            name: "Composite",
            className: "ExpressRouteGatewayPropertiesAutoScaleConfiguration",
            modelProperties: {
                bounds: {
                    serializedName: "bounds",
                    type: {
                        name: "Composite",
                        className: "ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds"
                    }
                }
            }
        }
    };
    var ExpressRouteConnection = {
        serializedName: "ExpressRouteConnection",
        type: {
            name: "Composite",
            className: "ExpressRouteConnection",
            modelProperties: __assign({}, SubResource.type.modelProperties, { provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, expressRouteCircuitPeering: {
                    required: true,
                    serializedName: "properties.expressRouteCircuitPeering",
                    type: {
                        name: "Composite",
                        className: "ExpressRouteCircuitPeeringId"
                    }
                }, authorizationKey: {
                    serializedName: "properties.authorizationKey",
                    type: {
                        name: "String"
                    }
                }, routingWeight: {
                    serializedName: "properties.routingWeight",
                    type: {
                        name: "Number"
                    }
                }, name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ExpressRouteGateway = {
        serializedName: "ExpressRouteGateway",
        type: {
            name: "Composite",
            className: "ExpressRouteGateway",
            modelProperties: __assign({}, Resource.type.modelProperties, { autoScaleConfiguration: {
                    serializedName: "properties.autoScaleConfiguration",
                    type: {
                        name: "Composite",
                        className: "ExpressRouteGatewayPropertiesAutoScaleConfiguration"
                    }
                }, expressRouteConnections: {
                    readOnly: true,
                    serializedName: "properties.expressRouteConnections",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExpressRouteConnection"
                            }
                        }
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, virtualHub: {
                    required: true,
                    serializedName: "properties.virtualHub",
                    type: {
                        name: "Composite",
                        className: "VirtualHubId"
                    }
                }, etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ExpressRouteGatewayList = {
        serializedName: "ExpressRouteGatewayList",
        type: {
            name: "Composite",
            className: "ExpressRouteGatewayList",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExpressRouteGateway"
                            }
                        }
                    }
                }
            }
        }
    };
    var ExpressRouteConnectionList = {
        serializedName: "ExpressRouteConnectionList",
        type: {
            name: "Composite",
            className: "ExpressRouteConnectionList",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExpressRouteConnection"
                            }
                        }
                    }
                }
            }
        }
    };
    var LoadBalancerSku = {
        serializedName: "LoadBalancerSku",
        type: {
            name: "Composite",
            className: "LoadBalancerSku",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LoadBalancingRule = {
        serializedName: "LoadBalancingRule",
        type: {
            name: "Composite",
            className: "LoadBalancingRule",
            modelProperties: __assign({}, SubResource.type.modelProperties, { frontendIPConfiguration: {
                    serializedName: "properties.frontendIPConfiguration",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, backendAddressPool: {
                    serializedName: "properties.backendAddressPool",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, probe: {
                    serializedName: "properties.probe",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, protocol: {
                    required: true,
                    serializedName: "properties.protocol",
                    type: {
                        name: "String"
                    }
                }, loadDistribution: {
                    serializedName: "properties.loadDistribution",
                    type: {
                        name: "String"
                    }
                }, frontendPort: {
                    required: true,
                    serializedName: "properties.frontendPort",
                    type: {
                        name: "Number"
                    }
                }, backendPort: {
                    serializedName: "properties.backendPort",
                    type: {
                        name: "Number"
                    }
                }, idleTimeoutInMinutes: {
                    serializedName: "properties.idleTimeoutInMinutes",
                    type: {
                        name: "Number"
                    }
                }, enableFloatingIP: {
                    serializedName: "properties.enableFloatingIP",
                    type: {
                        name: "Boolean"
                    }
                }, enableTcpReset: {
                    serializedName: "properties.enableTcpReset",
                    type: {
                        name: "Boolean"
                    }
                }, disableOutboundSnat: {
                    serializedName: "properties.disableOutboundSnat",
                    type: {
                        name: "Boolean"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Probe = {
        serializedName: "Probe",
        type: {
            name: "Composite",
            className: "Probe",
            modelProperties: __assign({}, SubResource.type.modelProperties, { loadBalancingRules: {
                    readOnly: true,
                    serializedName: "properties.loadBalancingRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }, protocol: {
                    required: true,
                    serializedName: "properties.protocol",
                    type: {
                        name: "String"
                    }
                }, port: {
                    required: true,
                    serializedName: "properties.port",
                    type: {
                        name: "Number"
                    }
                }, intervalInSeconds: {
                    serializedName: "properties.intervalInSeconds",
                    type: {
                        name: "Number"
                    }
                }, numberOfProbes: {
                    serializedName: "properties.numberOfProbes",
                    type: {
                        name: "Number"
                    }
                }, requestPath: {
                    serializedName: "properties.requestPath",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var InboundNatPool = {
        serializedName: "InboundNatPool",
        type: {
            name: "Composite",
            className: "InboundNatPool",
            modelProperties: __assign({}, SubResource.type.modelProperties, { frontendIPConfiguration: {
                    serializedName: "properties.frontendIPConfiguration",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, protocol: {
                    required: true,
                    serializedName: "properties.protocol",
                    type: {
                        name: "String"
                    }
                }, frontendPortRangeStart: {
                    required: true,
                    serializedName: "properties.frontendPortRangeStart",
                    type: {
                        name: "Number"
                    }
                }, frontendPortRangeEnd: {
                    required: true,
                    serializedName: "properties.frontendPortRangeEnd",
                    type: {
                        name: "Number"
                    }
                }, backendPort: {
                    required: true,
                    serializedName: "properties.backendPort",
                    type: {
                        name: "Number"
                    }
                }, idleTimeoutInMinutes: {
                    serializedName: "properties.idleTimeoutInMinutes",
                    type: {
                        name: "Number"
                    }
                }, enableFloatingIP: {
                    serializedName: "properties.enableFloatingIP",
                    type: {
                        name: "Boolean"
                    }
                }, enableTcpReset: {
                    serializedName: "properties.enableTcpReset",
                    type: {
                        name: "Boolean"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var OutboundRule = {
        serializedName: "OutboundRule",
        type: {
            name: "Composite",
            className: "OutboundRule",
            modelProperties: __assign({}, SubResource.type.modelProperties, { allocatedOutboundPorts: {
                    serializedName: "properties.allocatedOutboundPorts",
                    type: {
                        name: "Number"
                    }
                }, frontendIPConfigurations: {
                    required: true,
                    serializedName: "properties.frontendIPConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }, backendAddressPool: {
                    required: true,
                    serializedName: "properties.backendAddressPool",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, protocol: {
                    required: true,
                    serializedName: "properties.protocol",
                    type: {
                        name: "String"
                    }
                }, enableTcpReset: {
                    serializedName: "properties.enableTcpReset",
                    type: {
                        name: "Boolean"
                    }
                }, idleTimeoutInMinutes: {
                    serializedName: "properties.idleTimeoutInMinutes",
                    type: {
                        name: "Number"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var LoadBalancer = {
        serializedName: "LoadBalancer",
        type: {
            name: "Composite",
            className: "LoadBalancer",
            modelProperties: __assign({}, Resource.type.modelProperties, { sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "LoadBalancerSku"
                    }
                }, frontendIPConfigurations: {
                    serializedName: "properties.frontendIPConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FrontendIPConfiguration"
                            }
                        }
                    }
                }, backendAddressPools: {
                    serializedName: "properties.backendAddressPools",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BackendAddressPool"
                            }
                        }
                    }
                }, loadBalancingRules: {
                    serializedName: "properties.loadBalancingRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LoadBalancingRule"
                            }
                        }
                    }
                }, probes: {
                    serializedName: "properties.probes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Probe"
                            }
                        }
                    }
                }, inboundNatRules: {
                    serializedName: "properties.inboundNatRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InboundNatRule"
                            }
                        }
                    }
                }, inboundNatPools: {
                    serializedName: "properties.inboundNatPools",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InboundNatPool"
                            }
                        }
                    }
                }, outboundRules: {
                    serializedName: "properties.outboundRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OutboundRule"
                            }
                        }
                    }
                }, resourceGuid: {
                    serializedName: "properties.resourceGuid",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ErrorDetails = {
        serializedName: "ErrorDetails",
        type: {
            name: "Composite",
            className: "ErrorDetails",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    serializedName: "target",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorModel = {
        serializedName: "Error",
        type: {
            name: "Composite",
            className: "ErrorModel",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    serializedName: "target",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    serializedName: "details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorDetails"
                            }
                        }
                    }
                },
                innerError: {
                    serializedName: "innerError",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AzureAsyncOperationResult = {
        serializedName: "AzureAsyncOperationResult",
        type: {
            name: "Composite",
            className: "AzureAsyncOperationResult",
            modelProperties: {
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorModel"
                    }
                }
            }
        }
    };
    var EffectiveNetworkSecurityGroupAssociation = {
        serializedName: "EffectiveNetworkSecurityGroupAssociation",
        type: {
            name: "Composite",
            className: "EffectiveNetworkSecurityGroupAssociation",
            modelProperties: {
                subnet: {
                    serializedName: "subnet",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                },
                networkInterface: {
                    serializedName: "networkInterface",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }
            }
        }
    };
    var EffectiveNetworkSecurityRule = {
        serializedName: "EffectiveNetworkSecurityRule",
        type: {
            name: "Composite",
            className: "EffectiveNetworkSecurityRule",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                protocol: {
                    serializedName: "protocol",
                    type: {
                        name: "String"
                    }
                },
                sourcePortRange: {
                    serializedName: "sourcePortRange",
                    type: {
                        name: "String"
                    }
                },
                destinationPortRange: {
                    serializedName: "destinationPortRange",
                    type: {
                        name: "String"
                    }
                },
                sourcePortRanges: {
                    serializedName: "sourcePortRanges",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                destinationPortRanges: {
                    serializedName: "destinationPortRanges",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                sourceAddressPrefix: {
                    serializedName: "sourceAddressPrefix",
                    type: {
                        name: "String"
                    }
                },
                destinationAddressPrefix: {
                    serializedName: "destinationAddressPrefix",
                    type: {
                        name: "String"
                    }
                },
                sourceAddressPrefixes: {
                    serializedName: "sourceAddressPrefixes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                destinationAddressPrefixes: {
                    serializedName: "destinationAddressPrefixes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                expandedSourceAddressPrefix: {
                    serializedName: "expandedSourceAddressPrefix",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                expandedDestinationAddressPrefix: {
                    serializedName: "expandedDestinationAddressPrefix",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                access: {
                    serializedName: "access",
                    type: {
                        name: "String"
                    }
                },
                priority: {
                    serializedName: "priority",
                    type: {
                        name: "Number"
                    }
                },
                direction: {
                    serializedName: "direction",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EffectiveNetworkSecurityGroup = {
        serializedName: "EffectiveNetworkSecurityGroup",
        type: {
            name: "Composite",
            className: "EffectiveNetworkSecurityGroup",
            modelProperties: {
                networkSecurityGroup: {
                    serializedName: "networkSecurityGroup",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                },
                association: {
                    serializedName: "association",
                    type: {
                        name: "Composite",
                        className: "EffectiveNetworkSecurityGroupAssociation"
                    }
                },
                effectiveSecurityRules: {
                    serializedName: "effectiveSecurityRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EffectiveNetworkSecurityRule"
                            }
                        }
                    }
                },
                tagMap: {
                    serializedName: "tagMap",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Sequence",
                                element: {
                                    type: {
                                        name: "String"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    var EffectiveNetworkSecurityGroupListResult = {
        serializedName: "EffectiveNetworkSecurityGroupListResult",
        type: {
            name: "Composite",
            className: "EffectiveNetworkSecurityGroupListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EffectiveNetworkSecurityGroup"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EffectiveRoute = {
        serializedName: "EffectiveRoute",
        type: {
            name: "Composite",
            className: "EffectiveRoute",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                source: {
                    serializedName: "source",
                    type: {
                        name: "String"
                    }
                },
                state: {
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                },
                addressPrefix: {
                    serializedName: "addressPrefix",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                nextHopIpAddress: {
                    serializedName: "nextHopIpAddress",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                nextHopType: {
                    serializedName: "nextHopType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EffectiveRouteListResult = {
        serializedName: "EffectiveRouteListResult",
        type: {
            name: "Composite",
            className: "EffectiveRouteListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EffectiveRoute"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerNetworkInterfaceConfiguration = {
        serializedName: "ContainerNetworkInterfaceConfiguration",
        type: {
            name: "Composite",
            className: "ContainerNetworkInterfaceConfiguration",
            modelProperties: __assign({}, SubResource.type.modelProperties, { ipConfigurations: {
                    serializedName: "properties.ipConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IPConfigurationProfile"
                            }
                        }
                    }
                }, containerNetworkInterfaces: {
                    serializedName: "properties.containerNetworkInterfaces",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ContainerNetworkInterface"
                            }
                        }
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Container = {
        serializedName: "Container",
        type: {
            name: "Composite",
            className: "Container",
            modelProperties: __assign({}, SubResource.type.modelProperties)
        }
    };
    var ContainerNetworkInterfaceIpConfiguration = {
        serializedName: "ContainerNetworkInterfaceIpConfiguration",
        type: {
            name: "Composite",
            className: "ContainerNetworkInterfaceIpConfiguration",
            modelProperties: {
                provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerNetworkInterface = {
        serializedName: "ContainerNetworkInterface",
        type: {
            name: "Composite",
            className: "ContainerNetworkInterface",
            modelProperties: __assign({}, SubResource.type.modelProperties, { containerNetworkInterfaceConfiguration: {
                    serializedName: "properties.containerNetworkInterfaceConfiguration",
                    type: {
                        name: "Composite",
                        className: "ContainerNetworkInterfaceConfiguration"
                    }
                }, container: {
                    serializedName: "properties.container",
                    type: {
                        name: "Composite",
                        className: "Container"
                    }
                }, ipConfigurations: {
                    serializedName: "properties.ipConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ContainerNetworkInterfaceIpConfiguration"
                            }
                        }
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var NetworkProfile = {
        serializedName: "NetworkProfile",
        type: {
            name: "Composite",
            className: "NetworkProfile",
            modelProperties: __assign({}, Resource.type.modelProperties, { containerNetworkInterfaces: {
                    serializedName: "properties.containerNetworkInterfaces",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ContainerNetworkInterface"
                            }
                        }
                    }
                }, containerNetworkInterfaceConfigurations: {
                    serializedName: "properties.containerNetworkInterfaceConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ContainerNetworkInterfaceConfiguration"
                            }
                        }
                    }
                }, resourceGuid: {
                    readOnly: true,
                    serializedName: "properties.resourceGuid",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorDetails"
                    }
                }
            }
        }
    };
    var NetworkWatcher = {
        serializedName: "NetworkWatcher",
        type: {
            name: "Composite",
            className: "NetworkWatcher",
            modelProperties: __assign({}, Resource.type.modelProperties, { etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var TopologyParameters = {
        serializedName: "TopologyParameters",
        type: {
            name: "Composite",
            className: "TopologyParameters",
            modelProperties: {
                targetResourceGroupName: {
                    serializedName: "targetResourceGroupName",
                    type: {
                        name: "String"
                    }
                },
                targetVirtualNetwork: {
                    serializedName: "targetVirtualNetwork",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                },
                targetSubnet: {
                    serializedName: "targetSubnet",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }
            }
        }
    };
    var TopologyAssociation = {
        serializedName: "TopologyAssociation",
        type: {
            name: "Composite",
            className: "TopologyAssociation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                },
                associationType: {
                    serializedName: "associationType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TopologyResource = {
        serializedName: "TopologyResource",
        type: {
            name: "Composite",
            className: "TopologyResource",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                associations: {
                    serializedName: "associations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TopologyAssociation"
                            }
                        }
                    }
                }
            }
        }
    };
    var Topology = {
        serializedName: "Topology",
        type: {
            name: "Composite",
            className: "Topology",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                createdDateTime: {
                    readOnly: true,
                    serializedName: "createdDateTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastModified: {
                    readOnly: true,
                    serializedName: "lastModified",
                    type: {
                        name: "DateTime"
                    }
                },
                resources: {
                    serializedName: "resources",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TopologyResource"
                            }
                        }
                    }
                }
            }
        }
    };
    var VerificationIPFlowParameters = {
        serializedName: "VerificationIPFlowParameters",
        type: {
            name: "Composite",
            className: "VerificationIPFlowParameters",
            modelProperties: {
                targetResourceId: {
                    required: true,
                    serializedName: "targetResourceId",
                    type: {
                        name: "String"
                    }
                },
                direction: {
                    required: true,
                    serializedName: "direction",
                    type: {
                        name: "String"
                    }
                },
                protocol: {
                    required: true,
                    serializedName: "protocol",
                    type: {
                        name: "String"
                    }
                },
                localPort: {
                    required: true,
                    serializedName: "localPort",
                    type: {
                        name: "String"
                    }
                },
                remotePort: {
                    required: true,
                    serializedName: "remotePort",
                    type: {
                        name: "String"
                    }
                },
                localIPAddress: {
                    required: true,
                    serializedName: "localIPAddress",
                    type: {
                        name: "String"
                    }
                },
                remoteIPAddress: {
                    required: true,
                    serializedName: "remoteIPAddress",
                    type: {
                        name: "String"
                    }
                },
                targetNicResourceId: {
                    serializedName: "targetNicResourceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VerificationIPFlowResult = {
        serializedName: "VerificationIPFlowResult",
        type: {
            name: "Composite",
            className: "VerificationIPFlowResult",
            modelProperties: {
                access: {
                    serializedName: "access",
                    type: {
                        name: "String"
                    }
                },
                ruleName: {
                    serializedName: "ruleName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NextHopParameters = {
        serializedName: "NextHopParameters",
        type: {
            name: "Composite",
            className: "NextHopParameters",
            modelProperties: {
                targetResourceId: {
                    required: true,
                    serializedName: "targetResourceId",
                    type: {
                        name: "String"
                    }
                },
                sourceIPAddress: {
                    required: true,
                    serializedName: "sourceIPAddress",
                    type: {
                        name: "String"
                    }
                },
                destinationIPAddress: {
                    required: true,
                    serializedName: "destinationIPAddress",
                    type: {
                        name: "String"
                    }
                },
                targetNicResourceId: {
                    serializedName: "targetNicResourceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NextHopResult = {
        serializedName: "NextHopResult",
        type: {
            name: "Composite",
            className: "NextHopResult",
            modelProperties: {
                nextHopType: {
                    serializedName: "nextHopType",
                    type: {
                        name: "String"
                    }
                },
                nextHopIpAddress: {
                    serializedName: "nextHopIpAddress",
                    type: {
                        name: "String"
                    }
                },
                routeTableId: {
                    serializedName: "routeTableId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SecurityGroupViewParameters = {
        serializedName: "SecurityGroupViewParameters",
        type: {
            name: "Composite",
            className: "SecurityGroupViewParameters",
            modelProperties: {
                targetResourceId: {
                    required: true,
                    serializedName: "targetResourceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NetworkInterfaceAssociation = {
        serializedName: "NetworkInterfaceAssociation",
        type: {
            name: "Composite",
            className: "NetworkInterfaceAssociation",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                securityRules: {
                    serializedName: "securityRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SecurityRule"
                            }
                        }
                    }
                }
            }
        }
    };
    var SubnetAssociation = {
        serializedName: "SubnetAssociation",
        type: {
            name: "Composite",
            className: "SubnetAssociation",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                securityRules: {
                    serializedName: "securityRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SecurityRule"
                            }
                        }
                    }
                }
            }
        }
    };
    var SecurityRuleAssociations = {
        serializedName: "SecurityRuleAssociations",
        type: {
            name: "Composite",
            className: "SecurityRuleAssociations",
            modelProperties: {
                networkInterfaceAssociation: {
                    serializedName: "networkInterfaceAssociation",
                    type: {
                        name: "Composite",
                        className: "NetworkInterfaceAssociation"
                    }
                },
                subnetAssociation: {
                    serializedName: "subnetAssociation",
                    type: {
                        name: "Composite",
                        className: "SubnetAssociation"
                    }
                },
                defaultSecurityRules: {
                    serializedName: "defaultSecurityRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SecurityRule"
                            }
                        }
                    }
                },
                effectiveSecurityRules: {
                    serializedName: "effectiveSecurityRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EffectiveNetworkSecurityRule"
                            }
                        }
                    }
                }
            }
        }
    };
    var SecurityGroupNetworkInterface = {
        serializedName: "SecurityGroupNetworkInterface",
        type: {
            name: "Composite",
            className: "SecurityGroupNetworkInterface",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                securityRuleAssociations: {
                    serializedName: "securityRuleAssociations",
                    type: {
                        name: "Composite",
                        className: "SecurityRuleAssociations"
                    }
                }
            }
        }
    };
    var SecurityGroupViewResult = {
        serializedName: "SecurityGroupViewResult",
        type: {
            name: "Composite",
            className: "SecurityGroupViewResult",
            modelProperties: {
                networkInterfaces: {
                    serializedName: "networkInterfaces",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SecurityGroupNetworkInterface"
                            }
                        }
                    }
                }
            }
        }
    };
    var PacketCaptureStorageLocation = {
        serializedName: "PacketCaptureStorageLocation",
        type: {
            name: "Composite",
            className: "PacketCaptureStorageLocation",
            modelProperties: {
                storageId: {
                    serializedName: "storageId",
                    type: {
                        name: "String"
                    }
                },
                storagePath: {
                    serializedName: "storagePath",
                    type: {
                        name: "String"
                    }
                },
                filePath: {
                    serializedName: "filePath",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PacketCaptureFilter = {
        serializedName: "PacketCaptureFilter",
        type: {
            name: "Composite",
            className: "PacketCaptureFilter",
            modelProperties: {
                protocol: {
                    serializedName: "protocol",
                    defaultValue: 'Any',
                    type: {
                        name: "String"
                    }
                },
                localIPAddress: {
                    serializedName: "localIPAddress",
                    type: {
                        name: "String"
                    }
                },
                remoteIPAddress: {
                    serializedName: "remoteIPAddress",
                    type: {
                        name: "String"
                    }
                },
                localPort: {
                    serializedName: "localPort",
                    type: {
                        name: "String"
                    }
                },
                remotePort: {
                    serializedName: "remotePort",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PacketCaptureParameters = {
        serializedName: "PacketCaptureParameters",
        type: {
            name: "Composite",
            className: "PacketCaptureParameters",
            modelProperties: {
                target: {
                    required: true,
                    serializedName: "target",
                    type: {
                        name: "String"
                    }
                },
                bytesToCapturePerPacket: {
                    serializedName: "bytesToCapturePerPacket",
                    defaultValue: 0,
                    type: {
                        name: "Number"
                    }
                },
                totalBytesPerSession: {
                    serializedName: "totalBytesPerSession",
                    defaultValue: 1073741824,
                    type: {
                        name: "Number"
                    }
                },
                timeLimitInSeconds: {
                    serializedName: "timeLimitInSeconds",
                    defaultValue: 18000,
                    type: {
                        name: "Number"
                    }
                },
                storageLocation: {
                    required: true,
                    serializedName: "storageLocation",
                    type: {
                        name: "Composite",
                        className: "PacketCaptureStorageLocation"
                    }
                },
                filters: {
                    serializedName: "filters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PacketCaptureFilter"
                            }
                        }
                    }
                }
            }
        }
    };
    var PacketCapture = {
        serializedName: "PacketCapture",
        type: {
            name: "Composite",
            className: "PacketCapture",
            modelProperties: {
                target: {
                    required: true,
                    serializedName: "properties.target",
                    type: {
                        name: "String"
                    }
                },
                bytesToCapturePerPacket: {
                    serializedName: "properties.bytesToCapturePerPacket",
                    defaultValue: 0,
                    type: {
                        name: "Number"
                    }
                },
                totalBytesPerSession: {
                    serializedName: "properties.totalBytesPerSession",
                    defaultValue: 1073741824,
                    type: {
                        name: "Number"
                    }
                },
                timeLimitInSeconds: {
                    serializedName: "properties.timeLimitInSeconds",
                    defaultValue: 18000,
                    type: {
                        name: "Number"
                    }
                },
                storageLocation: {
                    required: true,
                    serializedName: "properties.storageLocation",
                    type: {
                        name: "Composite",
                        className: "PacketCaptureStorageLocation"
                    }
                },
                filters: {
                    serializedName: "properties.filters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PacketCaptureFilter"
                            }
                        }
                    }
                }
            }
        }
    };
    var PacketCaptureResult = {
        serializedName: "PacketCaptureResult",
        type: {
            name: "Composite",
            className: "PacketCaptureResult",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                etag: {
                    serializedName: "etag",
                    defaultValue: 'A unique read-only string that changes whenever the resource is updated.',
                    type: {
                        name: "String"
                    }
                },
                target: {
                    required: true,
                    serializedName: "properties.target",
                    type: {
                        name: "String"
                    }
                },
                bytesToCapturePerPacket: {
                    serializedName: "properties.bytesToCapturePerPacket",
                    defaultValue: 0,
                    type: {
                        name: "Number"
                    }
                },
                totalBytesPerSession: {
                    serializedName: "properties.totalBytesPerSession",
                    defaultValue: 1073741824,
                    type: {
                        name: "Number"
                    }
                },
                timeLimitInSeconds: {
                    serializedName: "properties.timeLimitInSeconds",
                    defaultValue: 18000,
                    type: {
                        name: "Number"
                    }
                },
                storageLocation: {
                    required: true,
                    serializedName: "properties.storageLocation",
                    type: {
                        name: "Composite",
                        className: "PacketCaptureStorageLocation"
                    }
                },
                filters: {
                    serializedName: "properties.filters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PacketCaptureFilter"
                            }
                        }
                    }
                },
                provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PacketCaptureQueryStatusResult = {
        serializedName: "PacketCaptureQueryStatusResult",
        type: {
            name: "Composite",
            className: "PacketCaptureQueryStatusResult",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                captureStartTime: {
                    serializedName: "captureStartTime",
                    type: {
                        name: "DateTime"
                    }
                },
                packetCaptureStatus: {
                    serializedName: "packetCaptureStatus",
                    type: {
                        name: "String"
                    }
                },
                stopReason: {
                    serializedName: "stopReason",
                    type: {
                        name: "String"
                    }
                },
                packetCaptureError: {
                    serializedName: "packetCaptureError",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var TroubleshootingParameters = {
        serializedName: "TroubleshootingParameters",
        type: {
            name: "Composite",
            className: "TroubleshootingParameters",
            modelProperties: {
                targetResourceId: {
                    required: true,
                    serializedName: "targetResourceId",
                    type: {
                        name: "String"
                    }
                },
                storageId: {
                    required: true,
                    serializedName: "properties.storageId",
                    type: {
                        name: "String"
                    }
                },
                storagePath: {
                    required: true,
                    serializedName: "properties.storagePath",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var QueryTroubleshootingParameters = {
        serializedName: "QueryTroubleshootingParameters",
        type: {
            name: "Composite",
            className: "QueryTroubleshootingParameters",
            modelProperties: {
                targetResourceId: {
                    required: true,
                    serializedName: "targetResourceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TroubleshootingRecommendedActions = {
        serializedName: "TroubleshootingRecommendedActions",
        type: {
            name: "Composite",
            className: "TroubleshootingRecommendedActions",
            modelProperties: {
                actionId: {
                    serializedName: "actionId",
                    type: {
                        name: "String"
                    }
                },
                actionText: {
                    serializedName: "actionText",
                    type: {
                        name: "String"
                    }
                },
                actionUri: {
                    serializedName: "actionUri",
                    type: {
                        name: "String"
                    }
                },
                actionUriText: {
                    serializedName: "actionUriText",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TroubleshootingDetails = {
        serializedName: "TroubleshootingDetails",
        type: {
            name: "Composite",
            className: "TroubleshootingDetails",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                reasonType: {
                    serializedName: "reasonType",
                    type: {
                        name: "String"
                    }
                },
                summary: {
                    serializedName: "summary",
                    type: {
                        name: "String"
                    }
                },
                detail: {
                    serializedName: "detail",
                    type: {
                        name: "String"
                    }
                },
                recommendedActions: {
                    serializedName: "recommendedActions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TroubleshootingRecommendedActions"
                            }
                        }
                    }
                }
            }
        }
    };
    var TroubleshootingResult = {
        serializedName: "TroubleshootingResult",
        type: {
            name: "Composite",
            className: "TroubleshootingResult",
            modelProperties: {
                startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                results: {
                    serializedName: "results",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TroubleshootingDetails"
                            }
                        }
                    }
                }
            }
        }
    };
    var RetentionPolicyParameters = {
        serializedName: "RetentionPolicyParameters",
        type: {
            name: "Composite",
            className: "RetentionPolicyParameters",
            modelProperties: {
                days: {
                    serializedName: "days",
                    defaultValue: 0,
                    type: {
                        name: "Number"
                    }
                },
                enabled: {
                    serializedName: "enabled",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var FlowLogStatusParameters = {
        serializedName: "FlowLogStatusParameters",
        type: {
            name: "Composite",
            className: "FlowLogStatusParameters",
            modelProperties: {
                targetResourceId: {
                    required: true,
                    serializedName: "targetResourceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TrafficAnalyticsConfigurationProperties = {
        serializedName: "TrafficAnalyticsConfigurationProperties",
        type: {
            name: "Composite",
            className: "TrafficAnalyticsConfigurationProperties",
            modelProperties: {
                enabled: {
                    required: true,
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                workspaceId: {
                    required: true,
                    serializedName: "workspaceId",
                    type: {
                        name: "String"
                    }
                },
                workspaceRegion: {
                    required: true,
                    serializedName: "workspaceRegion",
                    type: {
                        name: "String"
                    }
                },
                workspaceResourceId: {
                    required: true,
                    serializedName: "workspaceResourceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TrafficAnalyticsProperties = {
        serializedName: "TrafficAnalyticsProperties",
        type: {
            name: "Composite",
            className: "TrafficAnalyticsProperties",
            modelProperties: {
                networkWatcherFlowAnalyticsConfiguration: {
                    required: true,
                    serializedName: "networkWatcherFlowAnalyticsConfiguration",
                    type: {
                        name: "Composite",
                        className: "TrafficAnalyticsConfigurationProperties"
                    }
                }
            }
        }
    };
    var FlowLogInformation = {
        serializedName: "FlowLogInformation",
        type: {
            name: "Composite",
            className: "FlowLogInformation",
            modelProperties: {
                targetResourceId: {
                    required: true,
                    serializedName: "targetResourceId",
                    type: {
                        name: "String"
                    }
                },
                storageId: {
                    required: true,
                    serializedName: "properties.storageId",
                    type: {
                        name: "String"
                    }
                },
                enabled: {
                    required: true,
                    serializedName: "properties.enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                retentionPolicy: {
                    serializedName: "properties.retentionPolicy",
                    type: {
                        name: "Composite",
                        className: "RetentionPolicyParameters"
                    }
                },
                flowAnalyticsConfiguration: {
                    serializedName: "flowAnalyticsConfiguration",
                    type: {
                        name: "Composite",
                        className: "TrafficAnalyticsProperties"
                    }
                }
            }
        }
    };
    var ConnectivitySource = {
        serializedName: "ConnectivitySource",
        type: {
            name: "Composite",
            className: "ConnectivitySource",
            modelProperties: {
                resourceId: {
                    required: true,
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                },
                port: {
                    serializedName: "port",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ConnectivityDestination = {
        serializedName: "ConnectivityDestination",
        type: {
            name: "Composite",
            className: "ConnectivityDestination",
            modelProperties: {
                resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                },
                address: {
                    serializedName: "address",
                    type: {
                        name: "String"
                    }
                },
                port: {
                    serializedName: "port",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var HTTPHeader = {
        serializedName: "HTTPHeader",
        type: {
            name: "Composite",
            className: "HTTPHeader",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HTTPConfiguration = {
        serializedName: "HTTPConfiguration",
        type: {
            name: "Composite",
            className: "HTTPConfiguration",
            modelProperties: {
                method: {
                    serializedName: "method",
                    type: {
                        name: "String"
                    }
                },
                headers: {
                    serializedName: "headers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HTTPHeader"
                            }
                        }
                    }
                },
                validStatusCodes: {
                    serializedName: "validStatusCodes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                }
            }
        }
    };
    var ProtocolConfiguration = {
        serializedName: "ProtocolConfiguration",
        type: {
            name: "Composite",
            className: "ProtocolConfiguration",
            modelProperties: {
                hTTPConfiguration: {
                    serializedName: "HTTPConfiguration",
                    type: {
                        name: "Composite",
                        className: "HTTPConfiguration"
                    }
                }
            }
        }
    };
    var ConnectivityParameters = {
        serializedName: "ConnectivityParameters",
        type: {
            name: "Composite",
            className: "ConnectivityParameters",
            modelProperties: {
                source: {
                    required: true,
                    serializedName: "source",
                    type: {
                        name: "Composite",
                        className: "ConnectivitySource"
                    }
                },
                destination: {
                    required: true,
                    serializedName: "destination",
                    type: {
                        name: "Composite",
                        className: "ConnectivityDestination"
                    }
                },
                protocol: {
                    serializedName: "protocol",
                    type: {
                        name: "String"
                    }
                },
                protocolConfiguration: {
                    serializedName: "protocolConfiguration",
                    type: {
                        name: "Composite",
                        className: "ProtocolConfiguration"
                    }
                }
            }
        }
    };
    var ConnectivityIssue = {
        serializedName: "ConnectivityIssue",
        type: {
            name: "Composite",
            className: "ConnectivityIssue",
            modelProperties: {
                origin: {
                    readOnly: true,
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                severity: {
                    readOnly: true,
                    serializedName: "severity",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                context: {
                    readOnly: true,
                    serializedName: "context",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Dictionary",
                                value: {
                                    type: {
                                        name: "String"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    var ConnectivityHop = {
        serializedName: "ConnectivityHop",
        type: {
            name: "Composite",
            className: "ConnectivityHop",
            modelProperties: {
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                address: {
                    readOnly: true,
                    serializedName: "address",
                    type: {
                        name: "String"
                    }
                },
                resourceId: {
                    readOnly: true,
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                },
                nextHopIds: {
                    readOnly: true,
                    serializedName: "nextHopIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                issues: {
                    readOnly: true,
                    serializedName: "issues",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ConnectivityIssue"
                            }
                        }
                    }
                }
            }
        }
    };
    var ConnectivityInformation = {
        serializedName: "ConnectivityInformation",
        type: {
            name: "Composite",
            className: "ConnectivityInformation",
            modelProperties: {
                hops: {
                    readOnly: true,
                    serializedName: "hops",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ConnectivityHop"
                            }
                        }
                    }
                },
                connectionStatus: {
                    readOnly: true,
                    serializedName: "connectionStatus",
                    type: {
                        name: "String"
                    }
                },
                avgLatencyInMs: {
                    readOnly: true,
                    serializedName: "avgLatencyInMs",
                    type: {
                        name: "Number"
                    }
                },
                minLatencyInMs: {
                    readOnly: true,
                    serializedName: "minLatencyInMs",
                    type: {
                        name: "Number"
                    }
                },
                maxLatencyInMs: {
                    readOnly: true,
                    serializedName: "maxLatencyInMs",
                    type: {
                        name: "Number"
                    }
                },
                probesSent: {
                    readOnly: true,
                    serializedName: "probesSent",
                    type: {
                        name: "Number"
                    }
                },
                probesFailed: {
                    readOnly: true,
                    serializedName: "probesFailed",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var AzureReachabilityReportLocation = {
        serializedName: "AzureReachabilityReportLocation",
        type: {
            name: "Composite",
            className: "AzureReachabilityReportLocation",
            modelProperties: {
                country: {
                    required: true,
                    serializedName: "country",
                    type: {
                        name: "String"
                    }
                },
                state: {
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                },
                city: {
                    serializedName: "city",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AzureReachabilityReportParameters = {
        serializedName: "AzureReachabilityReportParameters",
        type: {
            name: "Composite",
            className: "AzureReachabilityReportParameters",
            modelProperties: {
                providerLocation: {
                    required: true,
                    serializedName: "providerLocation",
                    type: {
                        name: "Composite",
                        className: "AzureReachabilityReportLocation"
                    }
                },
                providers: {
                    serializedName: "providers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                azureLocations: {
                    serializedName: "azureLocations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                startTime: {
                    required: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    required: true,
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var AzureReachabilityReportLatencyInfo = {
        serializedName: "AzureReachabilityReportLatencyInfo",
        type: {
            name: "Composite",
            className: "AzureReachabilityReportLatencyInfo",
            modelProperties: {
                timeStamp: {
                    serializedName: "timeStamp",
                    type: {
                        name: "DateTime"
                    }
                },
                score: {
                    serializedName: "score",
                    constraints: {
                        InclusiveMaximum: 100,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var AzureReachabilityReportItem = {
        serializedName: "AzureReachabilityReportItem",
        type: {
            name: "Composite",
            className: "AzureReachabilityReportItem",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                azureLocation: {
                    serializedName: "azureLocation",
                    type: {
                        name: "String"
                    }
                },
                latencies: {
                    serializedName: "latencies",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AzureReachabilityReportLatencyInfo"
                            }
                        }
                    }
                }
            }
        }
    };
    var AzureReachabilityReport = {
        serializedName: "AzureReachabilityReport",
        type: {
            name: "Composite",
            className: "AzureReachabilityReport",
            modelProperties: {
                aggregationLevel: {
                    required: true,
                    serializedName: "aggregationLevel",
                    type: {
                        name: "String"
                    }
                },
                providerLocation: {
                    required: true,
                    serializedName: "providerLocation",
                    type: {
                        name: "Composite",
                        className: "AzureReachabilityReportLocation"
                    }
                },
                reachabilityReport: {
                    required: true,
                    serializedName: "reachabilityReport",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AzureReachabilityReportItem"
                            }
                        }
                    }
                }
            }
        }
    };
    var AvailableProvidersListParameters = {
        serializedName: "AvailableProvidersListParameters",
        type: {
            name: "Composite",
            className: "AvailableProvidersListParameters",
            modelProperties: {
                azureLocations: {
                    serializedName: "azureLocations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                country: {
                    serializedName: "country",
                    type: {
                        name: "String"
                    }
                },
                state: {
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                },
                city: {
                    serializedName: "city",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AvailableProvidersListCity = {
        serializedName: "AvailableProvidersListCity",
        type: {
            name: "Composite",
            className: "AvailableProvidersListCity",
            modelProperties: {
                cityName: {
                    serializedName: "cityName",
                    type: {
                        name: "String"
                    }
                },
                providers: {
                    serializedName: "providers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var AvailableProvidersListState = {
        serializedName: "AvailableProvidersListState",
        type: {
            name: "Composite",
            className: "AvailableProvidersListState",
            modelProperties: {
                stateName: {
                    serializedName: "stateName",
                    type: {
                        name: "String"
                    }
                },
                providers: {
                    serializedName: "providers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                cities: {
                    serializedName: "cities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AvailableProvidersListCity"
                            }
                        }
                    }
                }
            }
        }
    };
    var AvailableProvidersListCountry = {
        serializedName: "AvailableProvidersListCountry",
        type: {
            name: "Composite",
            className: "AvailableProvidersListCountry",
            modelProperties: {
                countryName: {
                    serializedName: "countryName",
                    type: {
                        name: "String"
                    }
                },
                providers: {
                    serializedName: "providers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                states: {
                    serializedName: "states",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AvailableProvidersListState"
                            }
                        }
                    }
                }
            }
        }
    };
    var AvailableProvidersList = {
        serializedName: "AvailableProvidersList",
        type: {
            name: "Composite",
            className: "AvailableProvidersList",
            modelProperties: {
                countries: {
                    required: true,
                    serializedName: "countries",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AvailableProvidersListCountry"
                            }
                        }
                    }
                }
            }
        }
    };
    var ConnectionMonitorSource = {
        serializedName: "ConnectionMonitorSource",
        type: {
            name: "Composite",
            className: "ConnectionMonitorSource",
            modelProperties: {
                resourceId: {
                    required: true,
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                },
                port: {
                    serializedName: "port",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ConnectionMonitorDestination = {
        serializedName: "ConnectionMonitorDestination",
        type: {
            name: "Composite",
            className: "ConnectionMonitorDestination",
            modelProperties: {
                resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                },
                address: {
                    serializedName: "address",
                    type: {
                        name: "String"
                    }
                },
                port: {
                    serializedName: "port",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ConnectionMonitorParameters = {
        serializedName: "ConnectionMonitorParameters",
        type: {
            name: "Composite",
            className: "ConnectionMonitorParameters",
            modelProperties: {
                source: {
                    required: true,
                    serializedName: "source",
                    type: {
                        name: "Composite",
                        className: "ConnectionMonitorSource"
                    }
                },
                destination: {
                    required: true,
                    serializedName: "destination",
                    type: {
                        name: "Composite",
                        className: "ConnectionMonitorDestination"
                    }
                },
                autoStart: {
                    serializedName: "autoStart",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                },
                monitoringIntervalInSeconds: {
                    serializedName: "monitoringIntervalInSeconds",
                    defaultValue: 60,
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ConnectionMonitor = {
        serializedName: "ConnectionMonitor",
        type: {
            name: "Composite",
            className: "ConnectionMonitor",
            modelProperties: {
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                source: {
                    required: true,
                    serializedName: "properties.source",
                    type: {
                        name: "Composite",
                        className: "ConnectionMonitorSource"
                    }
                },
                destination: {
                    required: true,
                    serializedName: "properties.destination",
                    type: {
                        name: "Composite",
                        className: "ConnectionMonitorDestination"
                    }
                },
                autoStart: {
                    serializedName: "properties.autoStart",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                },
                monitoringIntervalInSeconds: {
                    serializedName: "properties.monitoringIntervalInSeconds",
                    defaultValue: 60,
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ConnectionMonitorResult = {
        serializedName: "ConnectionMonitorResult",
        type: {
            name: "Composite",
            className: "ConnectionMonitorResult",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                etag: {
                    serializedName: "etag",
                    defaultValue: 'A unique read-only string that changes whenever the resource is updated.',
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                source: {
                    required: true,
                    serializedName: "properties.source",
                    type: {
                        name: "Composite",
                        className: "ConnectionMonitorSource"
                    }
                },
                destination: {
                    required: true,
                    serializedName: "properties.destination",
                    type: {
                        name: "Composite",
                        className: "ConnectionMonitorDestination"
                    }
                },
                autoStart: {
                    serializedName: "properties.autoStart",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                },
                monitoringIntervalInSeconds: {
                    serializedName: "properties.monitoringIntervalInSeconds",
                    defaultValue: 60,
                    type: {
                        name: "Number"
                    }
                },
                provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                },
                startTime: {
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                monitoringStatus: {
                    serializedName: "properties.monitoringStatus",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ConnectionStateSnapshot = {
        serializedName: "ConnectionStateSnapshot",
        type: {
            name: "Composite",
            className: "ConnectionStateSnapshot",
            modelProperties: {
                connectionState: {
                    serializedName: "connectionState",
                    type: {
                        name: "String"
                    }
                },
                startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                evaluationState: {
                    serializedName: "evaluationState",
                    type: {
                        name: "String"
                    }
                },
                avgLatencyInMs: {
                    serializedName: "avgLatencyInMs",
                    type: {
                        name: "Number"
                    }
                },
                minLatencyInMs: {
                    serializedName: "minLatencyInMs",
                    type: {
                        name: "Number"
                    }
                },
                maxLatencyInMs: {
                    serializedName: "maxLatencyInMs",
                    type: {
                        name: "Number"
                    }
                },
                probesSent: {
                    serializedName: "probesSent",
                    type: {
                        name: "Number"
                    }
                },
                probesFailed: {
                    serializedName: "probesFailed",
                    type: {
                        name: "Number"
                    }
                },
                hops: {
                    readOnly: true,
                    serializedName: "hops",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ConnectivityHop"
                            }
                        }
                    }
                }
            }
        }
    };
    var ConnectionMonitorQueryResult = {
        serializedName: "ConnectionMonitorQueryResult",
        type: {
            name: "Composite",
            className: "ConnectionMonitorQueryResult",
            modelProperties: {
                sourceStatus: {
                    serializedName: "sourceStatus",
                    type: {
                        name: "String"
                    }
                },
                states: {
                    serializedName: "states",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ConnectionStateSnapshot"
                            }
                        }
                    }
                }
            }
        }
    };
    var TrafficQuery = {
        serializedName: "TrafficQuery",
        type: {
            name: "Composite",
            className: "TrafficQuery",
            modelProperties: {
                direction: {
                    required: true,
                    serializedName: "direction",
                    type: {
                        name: "String"
                    }
                },
                protocol: {
                    required: true,
                    serializedName: "protocol",
                    type: {
                        name: "String"
                    }
                },
                source: {
                    required: true,
                    serializedName: "source",
                    type: {
                        name: "String"
                    }
                },
                destination: {
                    required: true,
                    serializedName: "destination",
                    type: {
                        name: "String"
                    }
                },
                destinationPort: {
                    required: true,
                    serializedName: "destinationPort",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NetworkConfigurationDiagnosticParameters = {
        serializedName: "NetworkConfigurationDiagnosticParameters",
        type: {
            name: "Composite",
            className: "NetworkConfigurationDiagnosticParameters",
            modelProperties: {
                targetResourceId: {
                    required: true,
                    serializedName: "targetResourceId",
                    type: {
                        name: "String"
                    }
                },
                queries: {
                    required: true,
                    serializedName: "queries",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TrafficQuery"
                            }
                        }
                    }
                }
            }
        }
    };
    var MatchedRule = {
        serializedName: "MatchedRule",
        type: {
            name: "Composite",
            className: "MatchedRule",
            modelProperties: {
                ruleName: {
                    serializedName: "ruleName",
                    type: {
                        name: "String"
                    }
                },
                action: {
                    serializedName: "action",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NetworkSecurityRulesEvaluationResult = {
        serializedName: "NetworkSecurityRulesEvaluationResult",
        type: {
            name: "Composite",
            className: "NetworkSecurityRulesEvaluationResult",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                protocolMatched: {
                    serializedName: "protocolMatched",
                    type: {
                        name: "Boolean"
                    }
                },
                sourceMatched: {
                    serializedName: "sourceMatched",
                    type: {
                        name: "Boolean"
                    }
                },
                sourcePortMatched: {
                    serializedName: "sourcePortMatched",
                    type: {
                        name: "Boolean"
                    }
                },
                destinationMatched: {
                    serializedName: "destinationMatched",
                    type: {
                        name: "Boolean"
                    }
                },
                destinationPortMatched: {
                    serializedName: "destinationPortMatched",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var EvaluatedNetworkSecurityGroup = {
        serializedName: "EvaluatedNetworkSecurityGroup",
        type: {
            name: "Composite",
            className: "EvaluatedNetworkSecurityGroup",
            modelProperties: {
                networkSecurityGroupId: {
                    serializedName: "networkSecurityGroupId",
                    type: {
                        name: "String"
                    }
                },
                matchedRule: {
                    serializedName: "matchedRule",
                    type: {
                        name: "Composite",
                        className: "MatchedRule"
                    }
                },
                rulesEvaluationResult: {
                    readOnly: true,
                    serializedName: "rulesEvaluationResult",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkSecurityRulesEvaluationResult"
                            }
                        }
                    }
                }
            }
        }
    };
    var NetworkSecurityGroupResult = {
        serializedName: "NetworkSecurityGroupResult",
        type: {
            name: "Composite",
            className: "NetworkSecurityGroupResult",
            modelProperties: {
                securityRuleAccessResult: {
                    serializedName: "securityRuleAccessResult",
                    type: {
                        name: "String"
                    }
                },
                evaluatedNetworkSecurityGroups: {
                    readOnly: true,
                    serializedName: "evaluatedNetworkSecurityGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EvaluatedNetworkSecurityGroup"
                            }
                        }
                    }
                }
            }
        }
    };
    var NetworkConfigurationDiagnosticResult = {
        serializedName: "NetworkConfigurationDiagnosticResult",
        type: {
            name: "Composite",
            className: "NetworkConfigurationDiagnosticResult",
            modelProperties: {
                trafficQuery: {
                    serializedName: "trafficQuery",
                    type: {
                        name: "Composite",
                        className: "TrafficQuery"
                    }
                },
                networkSecurityGroupResult: {
                    serializedName: "networkSecurityGroupResult",
                    type: {
                        name: "Composite",
                        className: "NetworkSecurityGroupResult"
                    }
                }
            }
        }
    };
    var NetworkConfigurationDiagnosticResponse = {
        serializedName: "NetworkConfigurationDiagnosticResponse",
        type: {
            name: "Composite",
            className: "NetworkConfigurationDiagnosticResponse",
            modelProperties: {
                results: {
                    readOnly: true,
                    serializedName: "results",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkConfigurationDiagnosticResult"
                            }
                        }
                    }
                }
            }
        }
    };
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Availability = {
        serializedName: "Availability",
        type: {
            name: "Composite",
            className: "Availability",
            modelProperties: {
                timeGrain: {
                    serializedName: "timeGrain",
                    type: {
                        name: "String"
                    }
                },
                retention: {
                    serializedName: "retention",
                    type: {
                        name: "String"
                    }
                },
                blobDuration: {
                    serializedName: "blobDuration",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Dimension = {
        serializedName: "Dimension",
        type: {
            name: "Composite",
            className: "Dimension",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                internalName: {
                    serializedName: "internalName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MetricSpecification = {
        serializedName: "MetricSpecification",
        type: {
            name: "Composite",
            className: "MetricSpecification",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                displayDescription: {
                    serializedName: "displayDescription",
                    type: {
                        name: "String"
                    }
                },
                unit: {
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                aggregationType: {
                    serializedName: "aggregationType",
                    type: {
                        name: "String"
                    }
                },
                availabilities: {
                    serializedName: "availabilities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Availability"
                            }
                        }
                    }
                },
                enableRegionalMdmAccount: {
                    serializedName: "enableRegionalMdmAccount",
                    type: {
                        name: "Boolean"
                    }
                },
                fillGapWithZero: {
                    serializedName: "fillGapWithZero",
                    type: {
                        name: "Boolean"
                    }
                },
                metricFilterPattern: {
                    serializedName: "metricFilterPattern",
                    type: {
                        name: "String"
                    }
                },
                dimensions: {
                    serializedName: "dimensions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Dimension"
                            }
                        }
                    }
                },
                isInternal: {
                    serializedName: "isInternal",
                    type: {
                        name: "Boolean"
                    }
                },
                sourceMdmAccount: {
                    serializedName: "sourceMdmAccount",
                    type: {
                        name: "String"
                    }
                },
                sourceMdmNamespace: {
                    serializedName: "sourceMdmNamespace",
                    type: {
                        name: "String"
                    }
                },
                resourceIdDimensionNameOverride: {
                    serializedName: "resourceIdDimensionNameOverride",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LogSpecification = {
        serializedName: "LogSpecification",
        type: {
            name: "Composite",
            className: "LogSpecification",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                blobDuration: {
                    serializedName: "blobDuration",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationPropertiesFormatServiceSpecification = {
        serializedName: "OperationPropertiesFormat_serviceSpecification",
        type: {
            name: "Composite",
            className: "OperationPropertiesFormatServiceSpecification",
            modelProperties: {
                metricSpecifications: {
                    serializedName: "metricSpecifications",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricSpecification"
                            }
                        }
                    }
                },
                logSpecifications: {
                    serializedName: "logSpecifications",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LogSpecification"
                            }
                        }
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                },
                origin: {
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                serviceSpecification: {
                    serializedName: "properties.serviceSpecification",
                    type: {
                        name: "Composite",
                        className: "OperationPropertiesFormatServiceSpecification"
                    }
                }
            }
        }
    };
    var PublicIPPrefixSku = {
        serializedName: "PublicIPPrefixSku",
        type: {
            name: "Composite",
            className: "PublicIPPrefixSku",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ReferencedPublicIpAddress = {
        serializedName: "ReferencedPublicIpAddress",
        type: {
            name: "Composite",
            className: "ReferencedPublicIpAddress",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PublicIPPrefix = {
        serializedName: "PublicIPPrefix",
        type: {
            name: "Composite",
            className: "PublicIPPrefix",
            modelProperties: __assign({}, Resource.type.modelProperties, { sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "PublicIPPrefixSku"
                    }
                }, publicIPAddressVersion: {
                    serializedName: "properties.publicIPAddressVersion",
                    type: {
                        name: "String"
                    }
                }, ipTags: {
                    serializedName: "properties.ipTags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IpTag"
                            }
                        }
                    }
                }, prefixLength: {
                    serializedName: "properties.prefixLength",
                    type: {
                        name: "Number"
                    }
                }, ipPrefix: {
                    serializedName: "properties.ipPrefix",
                    type: {
                        name: "String"
                    }
                }, publicIPAddresses: {
                    serializedName: "properties.publicIPAddresses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReferencedPublicIpAddress"
                            }
                        }
                    }
                }, resourceGuid: {
                    serializedName: "properties.resourceGuid",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }, zones: {
                    serializedName: "zones",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var PatchRouteFilterRule = {
        serializedName: "PatchRouteFilterRule",
        type: {
            name: "Composite",
            className: "PatchRouteFilterRule",
            modelProperties: __assign({}, SubResource.type.modelProperties, { access: {
                    required: true,
                    serializedName: "properties.access",
                    type: {
                        name: "String"
                    }
                }, routeFilterRuleType: {
                    required: true,
                    isConstant: true,
                    serializedName: "properties.routeFilterRuleType",
                    defaultValue: 'Community',
                    type: {
                        name: "String"
                    }
                }, communities: {
                    required: true,
                    serializedName: "properties.communities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var PatchRouteFilter = {
        serializedName: "PatchRouteFilter",
        type: {
            name: "Composite",
            className: "PatchRouteFilter",
            modelProperties: __assign({}, SubResource.type.modelProperties, { rules: {
                    serializedName: "properties.rules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RouteFilterRule"
                            }
                        }
                    }
                }, peerings: {
                    serializedName: "properties.peerings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExpressRouteCircuitPeering"
                            }
                        }
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }, type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }, tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var BGPCommunity = {
        serializedName: "BGPCommunity",
        type: {
            name: "Composite",
            className: "BGPCommunity",
            modelProperties: {
                serviceSupportedRegion: {
                    serializedName: "serviceSupportedRegion",
                    type: {
                        name: "String"
                    }
                },
                communityName: {
                    serializedName: "communityName",
                    type: {
                        name: "String"
                    }
                },
                communityValue: {
                    serializedName: "communityValue",
                    type: {
                        name: "String"
                    }
                },
                communityPrefixes: {
                    serializedName: "communityPrefixes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                isAuthorizedToUse: {
                    serializedName: "isAuthorizedToUse",
                    type: {
                        name: "Boolean"
                    }
                },
                serviceGroup: {
                    serializedName: "serviceGroup",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BgpServiceCommunity = {
        serializedName: "BgpServiceCommunity",
        type: {
            name: "Composite",
            className: "BgpServiceCommunity",
            modelProperties: __assign({}, Resource.type.modelProperties, { serviceName: {
                    serializedName: "properties.serviceName",
                    type: {
                        name: "String"
                    }
                }, bgpCommunities: {
                    serializedName: "properties.bgpCommunities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BGPCommunity"
                            }
                        }
                    }
                } })
        }
    };
    var UsageName = {
        serializedName: "UsageName",
        type: {
            name: "Composite",
            className: "UsageName",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                localizedValue: {
                    serializedName: "localizedValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Usage = {
        serializedName: "Usage",
        type: {
            name: "Composite",
            className: "Usage",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                unit: {
                    required: true,
                    isConstant: true,
                    serializedName: "unit",
                    defaultValue: 'Count',
                    type: {
                        name: "String"
                    }
                },
                currentValue: {
                    required: true,
                    serializedName: "currentValue",
                    type: {
                        name: "Number"
                    }
                },
                limit: {
                    required: true,
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                },
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "UsageName"
                    }
                }
            }
        }
    };
    var AddressSpace = {
        serializedName: "AddressSpace",
        type: {
            name: "Composite",
            className: "AddressSpace",
            modelProperties: {
                addressPrefixes: {
                    serializedName: "addressPrefixes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualNetworkPeering = {
        serializedName: "VirtualNetworkPeering",
        type: {
            name: "Composite",
            className: "VirtualNetworkPeering",
            modelProperties: __assign({}, SubResource.type.modelProperties, { allowVirtualNetworkAccess: {
                    serializedName: "properties.allowVirtualNetworkAccess",
                    type: {
                        name: "Boolean"
                    }
                }, allowForwardedTraffic: {
                    serializedName: "properties.allowForwardedTraffic",
                    type: {
                        name: "Boolean"
                    }
                }, allowGatewayTransit: {
                    serializedName: "properties.allowGatewayTransit",
                    type: {
                        name: "Boolean"
                    }
                }, useRemoteGateways: {
                    serializedName: "properties.useRemoteGateways",
                    type: {
                        name: "Boolean"
                    }
                }, remoteVirtualNetwork: {
                    serializedName: "properties.remoteVirtualNetwork",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, remoteAddressSpace: {
                    serializedName: "properties.remoteAddressSpace",
                    type: {
                        name: "Composite",
                        className: "AddressSpace"
                    }
                }, peeringState: {
                    serializedName: "properties.peeringState",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var DhcpOptions = {
        serializedName: "DhcpOptions",
        type: {
            name: "Composite",
            className: "DhcpOptions",
            modelProperties: {
                dnsServers: {
                    serializedName: "dnsServers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualNetwork = {
        serializedName: "VirtualNetwork",
        type: {
            name: "Composite",
            className: "VirtualNetwork",
            modelProperties: __assign({}, Resource.type.modelProperties, { addressSpace: {
                    serializedName: "properties.addressSpace",
                    type: {
                        name: "Composite",
                        className: "AddressSpace"
                    }
                }, dhcpOptions: {
                    serializedName: "properties.dhcpOptions",
                    type: {
                        name: "Composite",
                        className: "DhcpOptions"
                    }
                }, subnets: {
                    serializedName: "properties.subnets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Subnet"
                            }
                        }
                    }
                }, virtualNetworkPeerings: {
                    serializedName: "properties.virtualNetworkPeerings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualNetworkPeering"
                            }
                        }
                    }
                }, resourceGuid: {
                    serializedName: "properties.resourceGuid",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, enableDdosProtection: {
                    serializedName: "properties.enableDdosProtection",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }, enableVmProtection: {
                    serializedName: "properties.enableVmProtection",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }, ddosProtectionPlan: {
                    serializedName: "properties.ddosProtectionPlan",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var IPAddressAvailabilityResult = {
        serializedName: "IPAddressAvailabilityResult",
        type: {
            name: "Composite",
            className: "IPAddressAvailabilityResult",
            modelProperties: {
                available: {
                    serializedName: "available",
                    type: {
                        name: "Boolean"
                    }
                },
                availableIPAddresses: {
                    serializedName: "availableIPAddresses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualNetworkUsageName = {
        serializedName: "VirtualNetworkUsageName",
        type: {
            name: "Composite",
            className: "VirtualNetworkUsageName",
            modelProperties: {
                localizedValue: {
                    readOnly: true,
                    serializedName: "localizedValue",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualNetworkUsage = {
        serializedName: "VirtualNetworkUsage",
        type: {
            name: "Composite",
            className: "VirtualNetworkUsage",
            modelProperties: {
                currentValue: {
                    readOnly: true,
                    serializedName: "currentValue",
                    type: {
                        name: "Number"
                    }
                },
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                limit: {
                    readOnly: true,
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "VirtualNetworkUsageName"
                    }
                },
                unit: {
                    readOnly: true,
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualNetworkGatewayIPConfiguration = {
        serializedName: "VirtualNetworkGatewayIPConfiguration",
        type: {
            name: "Composite",
            className: "VirtualNetworkGatewayIPConfiguration",
            modelProperties: __assign({}, SubResource.type.modelProperties, { privateIPAllocationMethod: {
                    serializedName: "properties.privateIPAllocationMethod",
                    type: {
                        name: "String"
                    }
                }, subnet: {
                    serializedName: "properties.subnet",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, publicIPAddress: {
                    serializedName: "properties.publicIPAddress",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VirtualNetworkGatewaySku = {
        serializedName: "VirtualNetworkGatewaySku",
        type: {
            name: "Composite",
            className: "VirtualNetworkGatewaySku",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    serializedName: "tier",
                    type: {
                        name: "String"
                    }
                },
                capacity: {
                    serializedName: "capacity",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var VpnClientRootCertificate = {
        serializedName: "VpnClientRootCertificate",
        type: {
            name: "Composite",
            className: "VpnClientRootCertificate",
            modelProperties: __assign({}, SubResource.type.modelProperties, { publicCertData: {
                    required: true,
                    serializedName: "properties.publicCertData",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VpnClientRevokedCertificate = {
        serializedName: "VpnClientRevokedCertificate",
        type: {
            name: "Composite",
            className: "VpnClientRevokedCertificate",
            modelProperties: __assign({}, SubResource.type.modelProperties, { thumbprint: {
                    serializedName: "properties.thumbprint",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var IpsecPolicy = {
        serializedName: "IpsecPolicy",
        type: {
            name: "Composite",
            className: "IpsecPolicy",
            modelProperties: {
                saLifeTimeSeconds: {
                    required: true,
                    serializedName: "saLifeTimeSeconds",
                    type: {
                        name: "Number"
                    }
                },
                saDataSizeKilobytes: {
                    required: true,
                    serializedName: "saDataSizeKilobytes",
                    type: {
                        name: "Number"
                    }
                },
                ipsecEncryption: {
                    required: true,
                    serializedName: "ipsecEncryption",
                    type: {
                        name: "String"
                    }
                },
                ipsecIntegrity: {
                    required: true,
                    serializedName: "ipsecIntegrity",
                    type: {
                        name: "String"
                    }
                },
                ikeEncryption: {
                    required: true,
                    serializedName: "ikeEncryption",
                    type: {
                        name: "String"
                    }
                },
                ikeIntegrity: {
                    required: true,
                    serializedName: "ikeIntegrity",
                    type: {
                        name: "String"
                    }
                },
                dhGroup: {
                    required: true,
                    serializedName: "dhGroup",
                    type: {
                        name: "String"
                    }
                },
                pfsGroup: {
                    required: true,
                    serializedName: "pfsGroup",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VpnClientConfiguration = {
        serializedName: "VpnClientConfiguration",
        type: {
            name: "Composite",
            className: "VpnClientConfiguration",
            modelProperties: {
                vpnClientAddressPool: {
                    serializedName: "vpnClientAddressPool",
                    type: {
                        name: "Composite",
                        className: "AddressSpace"
                    }
                },
                vpnClientRootCertificates: {
                    serializedName: "vpnClientRootCertificates",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VpnClientRootCertificate"
                            }
                        }
                    }
                },
                vpnClientRevokedCertificates: {
                    serializedName: "vpnClientRevokedCertificates",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VpnClientRevokedCertificate"
                            }
                        }
                    }
                },
                vpnClientProtocols: {
                    serializedName: "vpnClientProtocols",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                vpnClientIpsecPolicies: {
                    serializedName: "vpnClientIpsecPolicies",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IpsecPolicy"
                            }
                        }
                    }
                },
                radiusServerAddress: {
                    serializedName: "radiusServerAddress",
                    type: {
                        name: "String"
                    }
                },
                radiusServerSecret: {
                    serializedName: "radiusServerSecret",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BgpSettings = {
        serializedName: "BgpSettings",
        type: {
            name: "Composite",
            className: "BgpSettings",
            modelProperties: {
                asn: {
                    serializedName: "asn",
                    type: {
                        name: "Number"
                    }
                },
                bgpPeeringAddress: {
                    serializedName: "bgpPeeringAddress",
                    type: {
                        name: "String"
                    }
                },
                peerWeight: {
                    serializedName: "peerWeight",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var BgpPeerStatus = {
        serializedName: "BgpPeerStatus",
        type: {
            name: "Composite",
            className: "BgpPeerStatus",
            modelProperties: {
                localAddress: {
                    readOnly: true,
                    serializedName: "localAddress",
                    type: {
                        name: "String"
                    }
                },
                neighbor: {
                    readOnly: true,
                    serializedName: "neighbor",
                    type: {
                        name: "String"
                    }
                },
                asn: {
                    readOnly: true,
                    serializedName: "asn",
                    type: {
                        name: "Number"
                    }
                },
                state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                },
                connectedDuration: {
                    readOnly: true,
                    serializedName: "connectedDuration",
                    type: {
                        name: "String"
                    }
                },
                routesReceived: {
                    readOnly: true,
                    serializedName: "routesReceived",
                    type: {
                        name: "Number"
                    }
                },
                messagesSent: {
                    readOnly: true,
                    serializedName: "messagesSent",
                    type: {
                        name: "Number"
                    }
                },
                messagesReceived: {
                    readOnly: true,
                    serializedName: "messagesReceived",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var GatewayRoute = {
        serializedName: "GatewayRoute",
        type: {
            name: "Composite",
            className: "GatewayRoute",
            modelProperties: {
                localAddress: {
                    readOnly: true,
                    serializedName: "localAddress",
                    type: {
                        name: "String"
                    }
                },
                network: {
                    readOnly: true,
                    serializedName: "network",
                    type: {
                        name: "String"
                    }
                },
                nextHop: {
                    readOnly: true,
                    serializedName: "nextHop",
                    type: {
                        name: "String"
                    }
                },
                sourcePeer: {
                    readOnly: true,
                    serializedName: "sourcePeer",
                    type: {
                        name: "String"
                    }
                },
                origin: {
                    readOnly: true,
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                asPath: {
                    readOnly: true,
                    serializedName: "asPath",
                    type: {
                        name: "String"
                    }
                },
                weight: {
                    readOnly: true,
                    serializedName: "weight",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var VirtualNetworkGateway = {
        serializedName: "VirtualNetworkGateway",
        type: {
            name: "Composite",
            className: "VirtualNetworkGateway",
            modelProperties: __assign({}, Resource.type.modelProperties, { ipConfigurations: {
                    serializedName: "properties.ipConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualNetworkGatewayIPConfiguration"
                            }
                        }
                    }
                }, gatewayType: {
                    serializedName: "properties.gatewayType",
                    type: {
                        name: "String"
                    }
                }, vpnType: {
                    serializedName: "properties.vpnType",
                    type: {
                        name: "String"
                    }
                }, enableBgp: {
                    serializedName: "properties.enableBgp",
                    type: {
                        name: "Boolean"
                    }
                }, activeActive: {
                    serializedName: "properties.activeActive",
                    type: {
                        name: "Boolean"
                    }
                }, gatewayDefaultSite: {
                    serializedName: "properties.gatewayDefaultSite",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, sku: {
                    serializedName: "properties.sku",
                    type: {
                        name: "Composite",
                        className: "VirtualNetworkGatewaySku"
                    }
                }, vpnClientConfiguration: {
                    serializedName: "properties.vpnClientConfiguration",
                    type: {
                        name: "Composite",
                        className: "VpnClientConfiguration"
                    }
                }, bgpSettings: {
                    serializedName: "properties.bgpSettings",
                    type: {
                        name: "Composite",
                        className: "BgpSettings"
                    }
                }, resourceGuid: {
                    serializedName: "properties.resourceGuid",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VpnClientParameters = {
        serializedName: "VpnClientParameters",
        type: {
            name: "Composite",
            className: "VpnClientParameters",
            modelProperties: {
                processorArchitecture: {
                    serializedName: "processorArchitecture",
                    type: {
                        name: "String"
                    }
                },
                authenticationMethod: {
                    serializedName: "authenticationMethod",
                    type: {
                        name: "String"
                    }
                },
                radiusServerAuthCertificate: {
                    serializedName: "radiusServerAuthCertificate",
                    type: {
                        name: "String"
                    }
                },
                clientRootCertificates: {
                    serializedName: "clientRootCertificates",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var BgpPeerStatusListResult = {
        serializedName: "BgpPeerStatusListResult",
        type: {
            name: "Composite",
            className: "BgpPeerStatusListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BgpPeerStatus"
                            }
                        }
                    }
                }
            }
        }
    };
    var GatewayRouteListResult = {
        serializedName: "GatewayRouteListResult",
        type: {
            name: "Composite",
            className: "GatewayRouteListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "GatewayRoute"
                            }
                        }
                    }
                }
            }
        }
    };
    var TunnelConnectionHealth = {
        serializedName: "TunnelConnectionHealth",
        type: {
            name: "Composite",
            className: "TunnelConnectionHealth",
            modelProperties: {
                tunnel: {
                    readOnly: true,
                    serializedName: "tunnel",
                    type: {
                        name: "String"
                    }
                },
                connectionStatus: {
                    readOnly: true,
                    serializedName: "connectionStatus",
                    type: {
                        name: "String"
                    }
                },
                ingressBytesTransferred: {
                    readOnly: true,
                    serializedName: "ingressBytesTransferred",
                    type: {
                        name: "Number"
                    }
                },
                egressBytesTransferred: {
                    readOnly: true,
                    serializedName: "egressBytesTransferred",
                    type: {
                        name: "Number"
                    }
                },
                lastConnectionEstablishedUtcTime: {
                    readOnly: true,
                    serializedName: "lastConnectionEstablishedUtcTime",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LocalNetworkGateway = {
        serializedName: "LocalNetworkGateway",
        type: {
            name: "Composite",
            className: "LocalNetworkGateway",
            modelProperties: __assign({}, Resource.type.modelProperties, { localNetworkAddressSpace: {
                    serializedName: "properties.localNetworkAddressSpace",
                    type: {
                        name: "Composite",
                        className: "AddressSpace"
                    }
                }, gatewayIpAddress: {
                    serializedName: "properties.gatewayIpAddress",
                    type: {
                        name: "String"
                    }
                }, bgpSettings: {
                    serializedName: "properties.bgpSettings",
                    type: {
                        name: "Composite",
                        className: "BgpSettings"
                    }
                }, resourceGuid: {
                    serializedName: "properties.resourceGuid",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VirtualNetworkGatewayConnection = {
        serializedName: "VirtualNetworkGatewayConnection",
        type: {
            name: "Composite",
            className: "VirtualNetworkGatewayConnection",
            modelProperties: __assign({}, Resource.type.modelProperties, { authorizationKey: {
                    serializedName: "properties.authorizationKey",
                    type: {
                        name: "String"
                    }
                }, virtualNetworkGateway1: {
                    required: true,
                    serializedName: "properties.virtualNetworkGateway1",
                    type: {
                        name: "Composite",
                        className: "VirtualNetworkGateway"
                    }
                }, virtualNetworkGateway2: {
                    serializedName: "properties.virtualNetworkGateway2",
                    type: {
                        name: "Composite",
                        className: "VirtualNetworkGateway"
                    }
                }, localNetworkGateway2: {
                    serializedName: "properties.localNetworkGateway2",
                    type: {
                        name: "Composite",
                        className: "LocalNetworkGateway"
                    }
                }, connectionType: {
                    required: true,
                    serializedName: "properties.connectionType",
                    type: {
                        name: "String"
                    }
                }, connectionProtocol: {
                    serializedName: "properties.connectionProtocol",
                    type: {
                        name: "String"
                    }
                }, routingWeight: {
                    serializedName: "properties.routingWeight",
                    type: {
                        name: "Number"
                    }
                }, sharedKey: {
                    serializedName: "properties.sharedKey",
                    type: {
                        name: "String"
                    }
                }, connectionStatus: {
                    readOnly: true,
                    serializedName: "properties.connectionStatus",
                    type: {
                        name: "String"
                    }
                }, tunnelConnectionStatus: {
                    readOnly: true,
                    serializedName: "properties.tunnelConnectionStatus",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TunnelConnectionHealth"
                            }
                        }
                    }
                }, egressBytesTransferred: {
                    readOnly: true,
                    serializedName: "properties.egressBytesTransferred",
                    type: {
                        name: "Number"
                    }
                }, ingressBytesTransferred: {
                    readOnly: true,
                    serializedName: "properties.ingressBytesTransferred",
                    type: {
                        name: "Number"
                    }
                }, peer: {
                    serializedName: "properties.peer",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, enableBgp: {
                    serializedName: "properties.enableBgp",
                    type: {
                        name: "Boolean"
                    }
                }, usePolicyBasedTrafficSelectors: {
                    serializedName: "properties.usePolicyBasedTrafficSelectors",
                    type: {
                        name: "Boolean"
                    }
                }, ipsecPolicies: {
                    serializedName: "properties.ipsecPolicies",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IpsecPolicy"
                            }
                        }
                    }
                }, resourceGuid: {
                    serializedName: "properties.resourceGuid",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, expressRouteGatewayBypass: {
                    serializedName: "properties.expressRouteGatewayBypass",
                    type: {
                        name: "Boolean"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ConnectionResetSharedKey = {
        serializedName: "ConnectionResetSharedKey",
        type: {
            name: "Composite",
            className: "ConnectionResetSharedKey",
            modelProperties: {
                keyLength: {
                    required: true,
                    serializedName: "keyLength",
                    constraints: {
                        InclusiveMaximum: 128,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ConnectionSharedKey = {
        serializedName: "ConnectionSharedKey",
        type: {
            name: "Composite",
            className: "ConnectionSharedKey",
            modelProperties: __assign({}, SubResource.type.modelProperties, { value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VpnClientIPsecParameters = {
        serializedName: "VpnClientIPsecParameters",
        type: {
            name: "Composite",
            className: "VpnClientIPsecParameters",
            modelProperties: {
                saLifeTimeSeconds: {
                    required: true,
                    serializedName: "saLifeTimeSeconds",
                    type: {
                        name: "Number"
                    }
                },
                saDataSizeKilobytes: {
                    required: true,
                    serializedName: "saDataSizeKilobytes",
                    type: {
                        name: "Number"
                    }
                },
                ipsecEncryption: {
                    required: true,
                    serializedName: "ipsecEncryption",
                    type: {
                        name: "String"
                    }
                },
                ipsecIntegrity: {
                    required: true,
                    serializedName: "ipsecIntegrity",
                    type: {
                        name: "String"
                    }
                },
                ikeEncryption: {
                    required: true,
                    serializedName: "ikeEncryption",
                    type: {
                        name: "String"
                    }
                },
                ikeIntegrity: {
                    required: true,
                    serializedName: "ikeIntegrity",
                    type: {
                        name: "String"
                    }
                },
                dhGroup: {
                    required: true,
                    serializedName: "dhGroup",
                    type: {
                        name: "String"
                    }
                },
                pfsGroup: {
                    required: true,
                    serializedName: "pfsGroup",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualNetworkConnectionGatewayReference = {
        serializedName: "virtualNetworkConnectionGatewayReference",
        type: {
            name: "Composite",
            className: "VirtualNetworkConnectionGatewayReference",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualNetworkGatewayConnectionListEntity = {
        serializedName: "VirtualNetworkGatewayConnectionListEntity",
        type: {
            name: "Composite",
            className: "VirtualNetworkGatewayConnectionListEntity",
            modelProperties: __assign({}, Resource.type.modelProperties, { authorizationKey: {
                    serializedName: "properties.authorizationKey",
                    type: {
                        name: "String"
                    }
                }, virtualNetworkGateway1: {
                    required: true,
                    serializedName: "properties.virtualNetworkGateway1",
                    type: {
                        name: "Composite",
                        className: "VirtualNetworkConnectionGatewayReference"
                    }
                }, virtualNetworkGateway2: {
                    serializedName: "properties.virtualNetworkGateway2",
                    type: {
                        name: "Composite",
                        className: "VirtualNetworkConnectionGatewayReference"
                    }
                }, localNetworkGateway2: {
                    serializedName: "properties.localNetworkGateway2",
                    type: {
                        name: "Composite",
                        className: "VirtualNetworkConnectionGatewayReference"
                    }
                }, connectionType: {
                    required: true,
                    serializedName: "properties.connectionType",
                    type: {
                        name: "String"
                    }
                }, connectionProtocol: {
                    serializedName: "properties.connectionProtocol",
                    type: {
                        name: "String"
                    }
                }, routingWeight: {
                    serializedName: "properties.routingWeight",
                    type: {
                        name: "Number"
                    }
                }, sharedKey: {
                    serializedName: "properties.sharedKey",
                    type: {
                        name: "String"
                    }
                }, connectionStatus: {
                    readOnly: true,
                    serializedName: "properties.connectionStatus",
                    type: {
                        name: "String"
                    }
                }, tunnelConnectionStatus: {
                    readOnly: true,
                    serializedName: "properties.tunnelConnectionStatus",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TunnelConnectionHealth"
                            }
                        }
                    }
                }, egressBytesTransferred: {
                    readOnly: true,
                    serializedName: "properties.egressBytesTransferred",
                    type: {
                        name: "Number"
                    }
                }, ingressBytesTransferred: {
                    readOnly: true,
                    serializedName: "properties.ingressBytesTransferred",
                    type: {
                        name: "Number"
                    }
                }, peer: {
                    serializedName: "properties.peer",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, enableBgp: {
                    serializedName: "properties.enableBgp",
                    type: {
                        name: "Boolean"
                    }
                }, usePolicyBasedTrafficSelectors: {
                    serializedName: "properties.usePolicyBasedTrafficSelectors",
                    type: {
                        name: "Boolean"
                    }
                }, ipsecPolicies: {
                    serializedName: "properties.ipsecPolicies",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IpsecPolicy"
                            }
                        }
                    }
                }, resourceGuid: {
                    serializedName: "properties.resourceGuid",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, expressRouteGatewayBypass: {
                    serializedName: "properties.expressRouteGatewayBypass",
                    type: {
                        name: "Boolean"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VpnDeviceScriptParameters = {
        serializedName: "VpnDeviceScriptParameters",
        type: {
            name: "Composite",
            className: "VpnDeviceScriptParameters",
            modelProperties: {
                vendor: {
                    serializedName: "vendor",
                    type: {
                        name: "String"
                    }
                },
                deviceFamily: {
                    serializedName: "deviceFamily",
                    type: {
                        name: "String"
                    }
                },
                firmwareVersion: {
                    serializedName: "firmwareVersion",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var P2SVpnServerConfigVpnClientRootCertificate = {
        serializedName: "P2SVpnServerConfigVpnClientRootCertificate",
        type: {
            name: "Composite",
            className: "P2SVpnServerConfigVpnClientRootCertificate",
            modelProperties: __assign({}, SubResource.type.modelProperties, { publicCertData: {
                    required: true,
                    serializedName: "properties.publicCertData",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var P2SVpnServerConfigVpnClientRevokedCertificate = {
        serializedName: "P2SVpnServerConfigVpnClientRevokedCertificate",
        type: {
            name: "Composite",
            className: "P2SVpnServerConfigVpnClientRevokedCertificate",
            modelProperties: __assign({}, SubResource.type.modelProperties, { thumbprint: {
                    serializedName: "properties.thumbprint",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var P2SVpnServerConfigRadiusServerRootCertificate = {
        serializedName: "P2SVpnServerConfigRadiusServerRootCertificate",
        type: {
            name: "Composite",
            className: "P2SVpnServerConfigRadiusServerRootCertificate",
            modelProperties: __assign({}, SubResource.type.modelProperties, { publicCertData: {
                    required: true,
                    serializedName: "properties.publicCertData",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var P2SVpnServerConfigRadiusClientRootCertificate = {
        serializedName: "P2SVpnServerConfigRadiusClientRootCertificate",
        type: {
            name: "Composite",
            className: "P2SVpnServerConfigRadiusClientRootCertificate",
            modelProperties: __assign({}, SubResource.type.modelProperties, { thumbprint: {
                    serializedName: "properties.thumbprint",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var P2SVpnServerConfiguration = {
        serializedName: "P2SVpnServerConfiguration",
        type: {
            name: "Composite",
            className: "P2SVpnServerConfiguration",
            modelProperties: __assign({}, SubResource.type.modelProperties, { p2SVpnServerConfigurationPropertiesName: {
                    serializedName: "properties.name",
                    type: {
                        name: "String"
                    }
                }, vpnProtocols: {
                    serializedName: "properties.vpnProtocols",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, p2SVpnServerConfigVpnClientRootCertificates: {
                    serializedName: "properties.p2SVpnServerConfigVpnClientRootCertificates",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "P2SVpnServerConfigVpnClientRootCertificate"
                            }
                        }
                    }
                }, p2SVpnServerConfigVpnClientRevokedCertificates: {
                    serializedName: "properties.p2SVpnServerConfigVpnClientRevokedCertificates",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "P2SVpnServerConfigVpnClientRevokedCertificate"
                            }
                        }
                    }
                }, p2SVpnServerConfigRadiusServerRootCertificates: {
                    serializedName: "properties.p2SVpnServerConfigRadiusServerRootCertificates",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "P2SVpnServerConfigRadiusServerRootCertificate"
                            }
                        }
                    }
                }, p2SVpnServerConfigRadiusClientRootCertificates: {
                    serializedName: "properties.p2SVpnServerConfigRadiusClientRootCertificates",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "P2SVpnServerConfigRadiusClientRootCertificate"
                            }
                        }
                    }
                }, vpnClientIpsecPolicies: {
                    serializedName: "properties.vpnClientIpsecPolicies",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IpsecPolicy"
                            }
                        }
                    }
                }, radiusServerAddress: {
                    serializedName: "properties.radiusServerAddress",
                    type: {
                        name: "String"
                    }
                }, radiusServerSecret: {
                    serializedName: "properties.radiusServerSecret",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, p2SVpnGateways: {
                    readOnly: true,
                    serializedName: "properties.p2SVpnGateways",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }, p2SVpnServerConfigurationPropertiesEtag: {
                    serializedName: "properties.etag",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VirtualWAN = {
        serializedName: "VirtualWAN",
        type: {
            name: "Composite",
            className: "VirtualWAN",
            modelProperties: __assign({}, Resource.type.modelProperties, { disableVpnEncryption: {
                    serializedName: "properties.disableVpnEncryption",
                    type: {
                        name: "Boolean"
                    }
                }, virtualHubs: {
                    readOnly: true,
                    serializedName: "properties.virtualHubs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }, vpnSites: {
                    readOnly: true,
                    serializedName: "properties.vpnSites",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }, securityProviderName: {
                    serializedName: "properties.securityProviderName",
                    type: {
                        name: "String"
                    }
                }, allowBranchToBranchTraffic: {
                    serializedName: "properties.allowBranchToBranchTraffic",
                    type: {
                        name: "Boolean"
                    }
                }, allowVnetToVnetTraffic: {
                    serializedName: "properties.allowVnetToVnetTraffic",
                    type: {
                        name: "Boolean"
                    }
                }, office365LocalBreakoutCategory: {
                    serializedName: "properties.office365LocalBreakoutCategory",
                    type: {
                        name: "String"
                    }
                }, p2SVpnServerConfigurations: {
                    serializedName: "properties.p2SVpnServerConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "P2SVpnServerConfiguration"
                            }
                        }
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var DeviceProperties = {
        serializedName: "DeviceProperties",
        type: {
            name: "Composite",
            className: "DeviceProperties",
            modelProperties: {
                deviceVendor: {
                    serializedName: "deviceVendor",
                    type: {
                        name: "String"
                    }
                },
                deviceModel: {
                    serializedName: "deviceModel",
                    type: {
                        name: "String"
                    }
                },
                linkSpeedInMbps: {
                    serializedName: "linkSpeedInMbps",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var VpnSite = {
        serializedName: "VpnSite",
        type: {
            name: "Composite",
            className: "VpnSite",
            modelProperties: __assign({}, Resource.type.modelProperties, { virtualWan: {
                    serializedName: "properties.virtualWan",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, deviceProperties: {
                    serializedName: "properties.deviceProperties",
                    type: {
                        name: "Composite",
                        className: "DeviceProperties"
                    }
                }, ipAddress: {
                    serializedName: "properties.ipAddress",
                    type: {
                        name: "String"
                    }
                }, siteKey: {
                    serializedName: "properties.siteKey",
                    type: {
                        name: "String"
                    }
                }, addressSpace: {
                    serializedName: "properties.addressSpace",
                    type: {
                        name: "Composite",
                        className: "AddressSpace"
                    }
                }, bgpProperties: {
                    serializedName: "properties.bgpProperties",
                    type: {
                        name: "Composite",
                        className: "BgpSettings"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, isSecuritySite: {
                    serializedName: "properties.isSecuritySite",
                    type: {
                        name: "Boolean"
                    }
                }, etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var GetVpnSitesConfigurationRequest = {
        serializedName: "GetVpnSitesConfigurationRequest",
        type: {
            name: "Composite",
            className: "GetVpnSitesConfigurationRequest",
            modelProperties: {
                vpnSites: {
                    serializedName: "vpnSites",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                outputBlobSasUrl: {
                    serializedName: "outputBlobSasUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HubVirtualNetworkConnection = {
        serializedName: "HubVirtualNetworkConnection",
        type: {
            name: "Composite",
            className: "HubVirtualNetworkConnection",
            modelProperties: __assign({}, SubResource.type.modelProperties, { remoteVirtualNetwork: {
                    serializedName: "properties.remoteVirtualNetwork",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, allowHubToRemoteVnetTransit: {
                    serializedName: "properties.allowHubToRemoteVnetTransit",
                    type: {
                        name: "Boolean"
                    }
                }, allowRemoteVnetToUseHubVnetGateways: {
                    serializedName: "properties.allowRemoteVnetToUseHubVnetGateways",
                    type: {
                        name: "Boolean"
                    }
                }, enableInternetSecurity: {
                    serializedName: "properties.enableInternetSecurity",
                    type: {
                        name: "Boolean"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VirtualHubRoute = {
        serializedName: "VirtualHubRoute",
        type: {
            name: "Composite",
            className: "VirtualHubRoute",
            modelProperties: {
                addressPrefixes: {
                    serializedName: "addressPrefixes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                nextHopIpAddress: {
                    serializedName: "nextHopIpAddress",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualHubRouteTable = {
        serializedName: "VirtualHubRouteTable",
        type: {
            name: "Composite",
            className: "VirtualHubRouteTable",
            modelProperties: {
                routes: {
                    serializedName: "routes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualHubRoute"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualHub = {
        serializedName: "VirtualHub",
        type: {
            name: "Composite",
            className: "VirtualHub",
            modelProperties: __assign({}, Resource.type.modelProperties, { virtualWan: {
                    serializedName: "properties.virtualWan",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, vpnGateway: {
                    serializedName: "properties.vpnGateway",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, p2SVpnGateway: {
                    serializedName: "properties.p2SVpnGateway",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, expressRouteGateway: {
                    serializedName: "properties.expressRouteGateway",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, virtualNetworkConnections: {
                    serializedName: "properties.virtualNetworkConnections",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HubVirtualNetworkConnection"
                            }
                        }
                    }
                }, addressPrefix: {
                    serializedName: "properties.addressPrefix",
                    type: {
                        name: "String"
                    }
                }, routeTable: {
                    serializedName: "properties.routeTable",
                    type: {
                        name: "Composite",
                        className: "VirtualHubRouteTable"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VpnConnection = {
        serializedName: "VpnConnection",
        type: {
            name: "Composite",
            className: "VpnConnection",
            modelProperties: __assign({}, SubResource.type.modelProperties, { remoteVpnSite: {
                    serializedName: "properties.remoteVpnSite",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, routingWeight: {
                    serializedName: "properties.routingWeight",
                    type: {
                        name: "Number"
                    }
                }, connectionStatus: {
                    serializedName: "properties.connectionStatus",
                    type: {
                        name: "String"
                    }
                }, vpnConnectionProtocolType: {
                    serializedName: "properties.vpnConnectionProtocolType",
                    type: {
                        name: "String"
                    }
                }, ingressBytesTransferred: {
                    readOnly: true,
                    serializedName: "properties.ingressBytesTransferred",
                    type: {
                        name: "Number"
                    }
                }, egressBytesTransferred: {
                    readOnly: true,
                    serializedName: "properties.egressBytesTransferred",
                    type: {
                        name: "Number"
                    }
                }, connectionBandwidth: {
                    serializedName: "properties.connectionBandwidth",
                    type: {
                        name: "Number"
                    }
                }, sharedKey: {
                    serializedName: "properties.sharedKey",
                    type: {
                        name: "String"
                    }
                }, enableBgp: {
                    serializedName: "properties.enableBgp",
                    type: {
                        name: "Boolean"
                    }
                }, ipsecPolicies: {
                    serializedName: "properties.ipsecPolicies",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IpsecPolicy"
                            }
                        }
                    }
                }, enableRateLimiting: {
                    serializedName: "properties.enableRateLimiting",
                    type: {
                        name: "Boolean"
                    }
                }, enableInternetSecurity: {
                    serializedName: "properties.enableInternetSecurity",
                    type: {
                        name: "Boolean"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VpnGateway = {
        serializedName: "VpnGateway",
        type: {
            name: "Composite",
            className: "VpnGateway",
            modelProperties: __assign({}, Resource.type.modelProperties, { virtualHub: {
                    serializedName: "properties.virtualHub",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, connections: {
                    serializedName: "properties.connections",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VpnConnection"
                            }
                        }
                    }
                }, bgpSettings: {
                    serializedName: "properties.bgpSettings",
                    type: {
                        name: "Composite",
                        className: "BgpSettings"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, vpnGatewayScaleUnit: {
                    serializedName: "properties.vpnGatewayScaleUnit",
                    type: {
                        name: "Number"
                    }
                }, etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VpnSiteId = {
        serializedName: "VpnSiteId",
        type: {
            name: "Composite",
            className: "VpnSiteId",
            modelProperties: {
                vpnSite: {
                    readOnly: true,
                    serializedName: "vpnSite",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualWanSecurityProvider = {
        serializedName: "VirtualWanSecurityProvider",
        type: {
            name: "Composite",
            className: "VirtualWanSecurityProvider",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                url: {
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualWanSecurityProviders = {
        serializedName: "VirtualWanSecurityProviders",
        type: {
            name: "Composite",
            className: "VirtualWanSecurityProviders",
            modelProperties: {
                supportedProviders: {
                    serializedName: "supportedProviders",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualWanSecurityProvider"
                            }
                        }
                    }
                }
            }
        }
    };
    var VpnClientConnectionHealth = {
        serializedName: "VpnClientConnectionHealth",
        type: {
            name: "Composite",
            className: "VpnClientConnectionHealth",
            modelProperties: {
                totalIngressBytesTransferred: {
                    readOnly: true,
                    serializedName: "totalIngressBytesTransferred",
                    type: {
                        name: "Number"
                    }
                },
                totalEgressBytesTransferred: {
                    readOnly: true,
                    serializedName: "totalEgressBytesTransferred",
                    type: {
                        name: "Number"
                    }
                },
                vpnClientConnectionsCount: {
                    serializedName: "vpnClientConnectionsCount",
                    type: {
                        name: "Number"
                    }
                },
                allocatedIpAddresses: {
                    serializedName: "allocatedIpAddresses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var P2SVpnGateway = {
        serializedName: "P2SVpnGateway",
        type: {
            name: "Composite",
            className: "P2SVpnGateway",
            modelProperties: __assign({}, Resource.type.modelProperties, { virtualHub: {
                    serializedName: "properties.virtualHub",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, vpnGatewayScaleUnit: {
                    serializedName: "properties.vpnGatewayScaleUnit",
                    type: {
                        name: "Number"
                    }
                }, p2SVpnServerConfiguration: {
                    serializedName: "properties.p2SVpnServerConfiguration",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, vpnClientAddressPool: {
                    serializedName: "properties.vpnClientAddressPool",
                    type: {
                        name: "Composite",
                        className: "AddressSpace"
                    }
                }, vpnClientConnectionHealth: {
                    readOnly: true,
                    serializedName: "properties.vpnClientConnectionHealth",
                    type: {
                        name: "Composite",
                        className: "VpnClientConnectionHealth"
                    }
                }, etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var P2SVpnProfileParameters = {
        serializedName: "P2SVpnProfileParameters",
        type: {
            name: "Composite",
            className: "P2SVpnProfileParameters",
            modelProperties: {
                authenticationMethod: {
                    serializedName: "authenticationMethod",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VpnProfileResponse = {
        serializedName: "VpnProfileResponse",
        type: {
            name: "Composite",
            className: "VpnProfileResponse",
            modelProperties: {
                profileUrl: {
                    serializedName: "profileUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationGatewayListResult = {
        serializedName: "ApplicationGatewayListResult",
        type: {
            name: "Composite",
            className: "ApplicationGatewayListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationGateway"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationGatewayAvailableSslPredefinedPolicies = {
        serializedName: "ApplicationGatewayAvailableSslPredefinedPolicies",
        type: {
            name: "Composite",
            className: "ApplicationGatewayAvailableSslPredefinedPolicies",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationGatewaySslPredefinedPolicy"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationSecurityGroupListResult = {
        serializedName: "ApplicationSecurityGroupListResult",
        type: {
            name: "Composite",
            className: "ApplicationSecurityGroupListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationSecurityGroup"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AvailableDelegationsResult = {
        serializedName: "AvailableDelegationsResult",
        type: {
            name: "Composite",
            className: "AvailableDelegationsResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AvailableDelegation"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AzureFirewallListResult = {
        serializedName: "AzureFirewallListResult",
        type: {
            name: "Composite",
            className: "AzureFirewallListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AzureFirewall"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AzureFirewallFqdnTagListResult = {
        serializedName: "AzureFirewallFqdnTagListResult",
        type: {
            name: "Composite",
            className: "AzureFirewallFqdnTagListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AzureFirewallFqdnTag"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DdosProtectionPlanListResult = {
        serializedName: "DdosProtectionPlanListResult",
        type: {
            name: "Composite",
            className: "DdosProtectionPlanListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DdosProtectionPlan"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EndpointServicesListResult = {
        serializedName: "EndpointServicesListResult",
        type: {
            name: "Composite",
            className: "EndpointServicesListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EndpointServiceResult"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AuthorizationListResult = {
        serializedName: "AuthorizationListResult",
        type: {
            name: "Composite",
            className: "AuthorizationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExpressRouteCircuitAuthorization"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ExpressRouteCircuitPeeringListResult = {
        serializedName: "ExpressRouteCircuitPeeringListResult",
        type: {
            name: "Composite",
            className: "ExpressRouteCircuitPeeringListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExpressRouteCircuitPeering"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ExpressRouteCircuitListResult = {
        serializedName: "ExpressRouteCircuitListResult",
        type: {
            name: "Composite",
            className: "ExpressRouteCircuitListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExpressRouteCircuit"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ExpressRouteServiceProviderListResult = {
        serializedName: "ExpressRouteServiceProviderListResult",
        type: {
            name: "Composite",
            className: "ExpressRouteServiceProviderListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExpressRouteServiceProvider"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ExpressRouteCrossConnectionListResult = {
        serializedName: "ExpressRouteCrossConnectionListResult",
        type: {
            name: "Composite",
            className: "ExpressRouteCrossConnectionListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExpressRouteCrossConnection"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ExpressRouteCrossConnectionPeeringList = {
        serializedName: "ExpressRouteCrossConnectionPeeringList",
        type: {
            name: "Composite",
            className: "ExpressRouteCrossConnectionPeeringList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExpressRouteCrossConnectionPeering"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InterfaceEndpointListResult = {
        serializedName: "InterfaceEndpointListResult",
        type: {
            name: "Composite",
            className: "InterfaceEndpointListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InterfaceEndpoint"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LoadBalancerListResult = {
        serializedName: "LoadBalancerListResult",
        type: {
            name: "Composite",
            className: "LoadBalancerListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LoadBalancer"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LoadBalancerBackendAddressPoolListResult = {
        serializedName: "LoadBalancerBackendAddressPoolListResult",
        type: {
            name: "Composite",
            className: "LoadBalancerBackendAddressPoolListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BackendAddressPool"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LoadBalancerFrontendIPConfigurationListResult = {
        serializedName: "LoadBalancerFrontendIPConfigurationListResult",
        type: {
            name: "Composite",
            className: "LoadBalancerFrontendIPConfigurationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FrontendIPConfiguration"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InboundNatRuleListResult = {
        serializedName: "InboundNatRuleListResult",
        type: {
            name: "Composite",
            className: "InboundNatRuleListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InboundNatRule"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LoadBalancerLoadBalancingRuleListResult = {
        serializedName: "LoadBalancerLoadBalancingRuleListResult",
        type: {
            name: "Composite",
            className: "LoadBalancerLoadBalancingRuleListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LoadBalancingRule"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NetworkInterfaceListResult = {
        serializedName: "NetworkInterfaceListResult",
        type: {
            name: "Composite",
            className: "NetworkInterfaceListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkInterface"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LoadBalancerProbeListResult = {
        serializedName: "LoadBalancerProbeListResult",
        type: {
            name: "Composite",
            className: "LoadBalancerProbeListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Probe"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NetworkInterfaceIPConfigurationListResult = {
        serializedName: "NetworkInterfaceIPConfigurationListResult",
        type: {
            name: "Composite",
            className: "NetworkInterfaceIPConfigurationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkInterfaceIPConfiguration"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NetworkInterfaceLoadBalancerListResult = {
        serializedName: "NetworkInterfaceLoadBalancerListResult",
        type: {
            name: "Composite",
            className: "NetworkInterfaceLoadBalancerListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LoadBalancer"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NetworkInterfaceTapConfigurationListResult = {
        serializedName: "NetworkInterfaceTapConfigurationListResult",
        type: {
            name: "Composite",
            className: "NetworkInterfaceTapConfigurationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkInterfaceTapConfiguration"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NetworkProfileListResult = {
        serializedName: "NetworkProfileListResult",
        type: {
            name: "Composite",
            className: "NetworkProfileListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkProfile"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NetworkSecurityGroupListResult = {
        serializedName: "NetworkSecurityGroupListResult",
        type: {
            name: "Composite",
            className: "NetworkSecurityGroupListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkSecurityGroup"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SecurityRuleListResult = {
        serializedName: "SecurityRuleListResult",
        type: {
            name: "Composite",
            className: "SecurityRuleListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SecurityRule"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NetworkWatcherListResult = {
        serializedName: "NetworkWatcherListResult",
        type: {
            name: "Composite",
            className: "NetworkWatcherListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkWatcher"
                            }
                        }
                    }
                }
            }
        }
    };
    var PacketCaptureListResult = {
        serializedName: "PacketCaptureListResult",
        type: {
            name: "Composite",
            className: "PacketCaptureListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PacketCaptureResult"
                            }
                        }
                    }
                }
            }
        }
    };
    var ConnectionMonitorListResult = {
        serializedName: "ConnectionMonitorListResult",
        type: {
            name: "Composite",
            className: "ConnectionMonitorListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ConnectionMonitorResult"
                            }
                        }
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PublicIPAddressListResult = {
        serializedName: "PublicIPAddressListResult",
        type: {
            name: "Composite",
            className: "PublicIPAddressListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PublicIPAddress"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PublicIPPrefixListResult = {
        serializedName: "PublicIPPrefixListResult",
        type: {
            name: "Composite",
            className: "PublicIPPrefixListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PublicIPPrefix"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RouteFilterListResult = {
        serializedName: "RouteFilterListResult",
        type: {
            name: "Composite",
            className: "RouteFilterListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RouteFilter"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RouteFilterRuleListResult = {
        serializedName: "RouteFilterRuleListResult",
        type: {
            name: "Composite",
            className: "RouteFilterRuleListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RouteFilterRule"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RouteTableListResult = {
        serializedName: "RouteTableListResult",
        type: {
            name: "Composite",
            className: "RouteTableListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RouteTable"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RouteListResult = {
        serializedName: "RouteListResult",
        type: {
            name: "Composite",
            className: "RouteListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Route"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BgpServiceCommunityListResult = {
        serializedName: "BgpServiceCommunityListResult",
        type: {
            name: "Composite",
            className: "BgpServiceCommunityListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BgpServiceCommunity"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServiceEndpointPolicyListResult = {
        serializedName: "ServiceEndpointPolicyListResult",
        type: {
            name: "Composite",
            className: "ServiceEndpointPolicyListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServiceEndpointPolicy"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServiceEndpointPolicyDefinitionListResult = {
        serializedName: "ServiceEndpointPolicyDefinitionListResult",
        type: {
            name: "Composite",
            className: "ServiceEndpointPolicyDefinitionListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServiceEndpointPolicyDefinition"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UsagesListResult = {
        serializedName: "UsagesListResult",
        type: {
            name: "Composite",
            className: "UsagesListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Usage"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualNetworkListResult = {
        serializedName: "VirtualNetworkListResult",
        type: {
            name: "Composite",
            className: "VirtualNetworkListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualNetwork"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualNetworkListUsageResult = {
        serializedName: "VirtualNetworkListUsageResult",
        type: {
            name: "Composite",
            className: "VirtualNetworkListUsageResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualNetworkUsage"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SubnetListResult = {
        serializedName: "SubnetListResult",
        type: {
            name: "Composite",
            className: "SubnetListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Subnet"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualNetworkPeeringListResult = {
        serializedName: "VirtualNetworkPeeringListResult",
        type: {
            name: "Composite",
            className: "VirtualNetworkPeeringListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualNetworkPeering"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualNetworkTapListResult = {
        serializedName: "VirtualNetworkTapListResult",
        type: {
            name: "Composite",
            className: "VirtualNetworkTapListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualNetworkTap"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualNetworkGatewayListResult = {
        serializedName: "VirtualNetworkGatewayListResult",
        type: {
            name: "Composite",
            className: "VirtualNetworkGatewayListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualNetworkGateway"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualNetworkGatewayListConnectionsResult = {
        serializedName: "VirtualNetworkGatewayListConnectionsResult",
        type: {
            name: "Composite",
            className: "VirtualNetworkGatewayListConnectionsResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualNetworkGatewayConnectionListEntity"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualNetworkGatewayConnectionListResult = {
        serializedName: "VirtualNetworkGatewayConnectionListResult",
        type: {
            name: "Composite",
            className: "VirtualNetworkGatewayConnectionListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualNetworkGatewayConnection"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LocalNetworkGatewayListResult = {
        serializedName: "LocalNetworkGatewayListResult",
        type: {
            name: "Composite",
            className: "LocalNetworkGatewayListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LocalNetworkGateway"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ListVirtualWANsResult = {
        serializedName: "ListVirtualWANsResult",
        type: {
            name: "Composite",
            className: "ListVirtualWANsResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualWAN"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ListVpnSitesResult = {
        serializedName: "ListVpnSitesResult",
        type: {
            name: "Composite",
            className: "ListVpnSitesResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VpnSite"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ListVirtualHubsResult = {
        serializedName: "ListVirtualHubsResult",
        type: {
            name: "Composite",
            className: "ListVirtualHubsResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualHub"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ListHubVirtualNetworkConnectionsResult = {
        serializedName: "ListHubVirtualNetworkConnectionsResult",
        type: {
            name: "Composite",
            className: "ListHubVirtualNetworkConnectionsResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HubVirtualNetworkConnection"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ListVpnGatewaysResult = {
        serializedName: "ListVpnGatewaysResult",
        type: {
            name: "Composite",
            className: "ListVpnGatewaysResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VpnGateway"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ListVpnConnectionsResult = {
        serializedName: "ListVpnConnectionsResult",
        type: {
            name: "Composite",
            className: "ListVpnConnectionsResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VpnConnection"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ListP2SVpnServerConfigurationsResult = {
        serializedName: "ListP2SVpnServerConfigurationsResult",
        type: {
            name: "Composite",
            className: "ListP2SVpnServerConfigurationsResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "P2SVpnServerConfiguration"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ListP2SVpnGatewaysResult = {
        serializedName: "ListP2SVpnGatewaysResult",
        type: {
            name: "Composite",
            className: "ListP2SVpnGatewaysResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "P2SVpnGateway"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var Mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        SubResource: SubResource,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        Resource: Resource,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        SecurityRule: SecurityRule,
        EndpointService: EndpointService,
        InterfaceEndpoint: InterfaceEndpoint,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        NetworkInterface: NetworkInterface,
        NetworkSecurityGroup: NetworkSecurityGroup,
        Route: Route,
        RouteTable: RouteTable,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        PublicIPAddress: PublicIPAddress,
        IPConfiguration: IPConfiguration,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        Subnet: Subnet,
        FrontendIPConfiguration: FrontendIPConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayBackendHealthServer: ApplicationGatewayBackendHealthServer,
        ApplicationGatewayBackendHealthHttpSettings: ApplicationGatewayBackendHealthHttpSettings,
        ApplicationGatewayBackendHealthPool: ApplicationGatewayBackendHealthPool,
        ApplicationGatewayBackendHealth: ApplicationGatewayBackendHealth,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayAvailableWafRuleSetsResult: ApplicationGatewayAvailableWafRuleSetsResult,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        TagsObject: TagsObject,
        AvailableDelegation: AvailableDelegation,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DnsNameAvailabilityResult: DnsNameAvailabilityResult,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitArpTable: ExpressRouteCircuitArpTable,
        ExpressRouteCircuitsArpTableListResult: ExpressRouteCircuitsArpTableListResult,
        ExpressRouteCircuitRoutesTable: ExpressRouteCircuitRoutesTable,
        ExpressRouteCircuitsRoutesTableListResult: ExpressRouteCircuitsRoutesTableListResult,
        ExpressRouteCircuitRoutesTableSummary: ExpressRouteCircuitRoutesTableSummary,
        ExpressRouteCircuitsRoutesTableSummaryListResult: ExpressRouteCircuitsRoutesTableSummaryListResult,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteCrossConnectionRoutesTableSummary: ExpressRouteCrossConnectionRoutesTableSummary,
        ExpressRouteCrossConnectionsRoutesTableSummaryListResult: ExpressRouteCrossConnectionsRoutesTableSummaryListResult,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        VirtualHubId: VirtualHubId,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayList: ExpressRouteGatewayList,
        ExpressRouteConnectionList: ExpressRouteConnectionList,
        LoadBalancerSku: LoadBalancerSku,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        ErrorDetails: ErrorDetails,
        ErrorModel: ErrorModel,
        AzureAsyncOperationResult: AzureAsyncOperationResult,
        EffectiveNetworkSecurityGroupAssociation: EffectiveNetworkSecurityGroupAssociation,
        EffectiveNetworkSecurityRule: EffectiveNetworkSecurityRule,
        EffectiveNetworkSecurityGroup: EffectiveNetworkSecurityGroup,
        EffectiveNetworkSecurityGroupListResult: EffectiveNetworkSecurityGroupListResult,
        EffectiveRoute: EffectiveRoute,
        EffectiveRouteListResult: EffectiveRouteListResult,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        NetworkProfile: NetworkProfile,
        ErrorResponse: ErrorResponse,
        NetworkWatcher: NetworkWatcher,
        TopologyParameters: TopologyParameters,
        TopologyAssociation: TopologyAssociation,
        TopologyResource: TopologyResource,
        Topology: Topology,
        VerificationIPFlowParameters: VerificationIPFlowParameters,
        VerificationIPFlowResult: VerificationIPFlowResult,
        NextHopParameters: NextHopParameters,
        NextHopResult: NextHopResult,
        SecurityGroupViewParameters: SecurityGroupViewParameters,
        NetworkInterfaceAssociation: NetworkInterfaceAssociation,
        SubnetAssociation: SubnetAssociation,
        SecurityRuleAssociations: SecurityRuleAssociations,
        SecurityGroupNetworkInterface: SecurityGroupNetworkInterface,
        SecurityGroupViewResult: SecurityGroupViewResult,
        PacketCaptureStorageLocation: PacketCaptureStorageLocation,
        PacketCaptureFilter: PacketCaptureFilter,
        PacketCaptureParameters: PacketCaptureParameters,
        PacketCapture: PacketCapture,
        PacketCaptureResult: PacketCaptureResult,
        PacketCaptureQueryStatusResult: PacketCaptureQueryStatusResult,
        TroubleshootingParameters: TroubleshootingParameters,
        QueryTroubleshootingParameters: QueryTroubleshootingParameters,
        TroubleshootingRecommendedActions: TroubleshootingRecommendedActions,
        TroubleshootingDetails: TroubleshootingDetails,
        TroubleshootingResult: TroubleshootingResult,
        RetentionPolicyParameters: RetentionPolicyParameters,
        FlowLogStatusParameters: FlowLogStatusParameters,
        TrafficAnalyticsConfigurationProperties: TrafficAnalyticsConfigurationProperties,
        TrafficAnalyticsProperties: TrafficAnalyticsProperties,
        FlowLogInformation: FlowLogInformation,
        ConnectivitySource: ConnectivitySource,
        ConnectivityDestination: ConnectivityDestination,
        HTTPHeader: HTTPHeader,
        HTTPConfiguration: HTTPConfiguration,
        ProtocolConfiguration: ProtocolConfiguration,
        ConnectivityParameters: ConnectivityParameters,
        ConnectivityIssue: ConnectivityIssue,
        ConnectivityHop: ConnectivityHop,
        ConnectivityInformation: ConnectivityInformation,
        AzureReachabilityReportLocation: AzureReachabilityReportLocation,
        AzureReachabilityReportParameters: AzureReachabilityReportParameters,
        AzureReachabilityReportLatencyInfo: AzureReachabilityReportLatencyInfo,
        AzureReachabilityReportItem: AzureReachabilityReportItem,
        AzureReachabilityReport: AzureReachabilityReport,
        AvailableProvidersListParameters: AvailableProvidersListParameters,
        AvailableProvidersListCity: AvailableProvidersListCity,
        AvailableProvidersListState: AvailableProvidersListState,
        AvailableProvidersListCountry: AvailableProvidersListCountry,
        AvailableProvidersList: AvailableProvidersList,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        ConnectionMonitorParameters: ConnectionMonitorParameters,
        ConnectionMonitor: ConnectionMonitor,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionStateSnapshot: ConnectionStateSnapshot,
        ConnectionMonitorQueryResult: ConnectionMonitorQueryResult,
        TrafficQuery: TrafficQuery,
        NetworkConfigurationDiagnosticParameters: NetworkConfigurationDiagnosticParameters,
        MatchedRule: MatchedRule,
        NetworkSecurityRulesEvaluationResult: NetworkSecurityRulesEvaluationResult,
        EvaluatedNetworkSecurityGroup: EvaluatedNetworkSecurityGroup,
        NetworkSecurityGroupResult: NetworkSecurityGroupResult,
        NetworkConfigurationDiagnosticResult: NetworkConfigurationDiagnosticResult,
        NetworkConfigurationDiagnosticResponse: NetworkConfigurationDiagnosticResponse,
        OperationDisplay: OperationDisplay,
        Availability: Availability,
        Dimension: Dimension,
        MetricSpecification: MetricSpecification,
        LogSpecification: LogSpecification,
        OperationPropertiesFormatServiceSpecification: OperationPropertiesFormatServiceSpecification,
        Operation: Operation,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PublicIPPrefix: PublicIPPrefix,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BGPCommunity: BGPCommunity,
        BgpServiceCommunity: BgpServiceCommunity,
        UsageName: UsageName,
        Usage: Usage,
        AddressSpace: AddressSpace,
        VirtualNetworkPeering: VirtualNetworkPeering,
        DhcpOptions: DhcpOptions,
        VirtualNetwork: VirtualNetwork,
        IPAddressAvailabilityResult: IPAddressAvailabilityResult,
        VirtualNetworkUsageName: VirtualNetworkUsageName,
        VirtualNetworkUsage: VirtualNetworkUsage,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        IpsecPolicy: IpsecPolicy,
        VpnClientConfiguration: VpnClientConfiguration,
        BgpSettings: BgpSettings,
        BgpPeerStatus: BgpPeerStatus,
        GatewayRoute: GatewayRoute,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VpnClientParameters: VpnClientParameters,
        BgpPeerStatusListResult: BgpPeerStatusListResult,
        GatewayRouteListResult: GatewayRouteListResult,
        TunnelConnectionHealth: TunnelConnectionHealth,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        ConnectionResetSharedKey: ConnectionResetSharedKey,
        ConnectionSharedKey: ConnectionSharedKey,
        VpnClientIPsecParameters: VpnClientIPsecParameters,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VpnDeviceScriptParameters: VpnDeviceScriptParameters,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        DeviceProperties: DeviceProperties,
        VpnSite: VpnSite,
        GetVpnSitesConfigurationRequest: GetVpnSitesConfigurationRequest,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHubRoute: VirtualHubRoute,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHub: VirtualHub,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        VpnSiteId: VpnSiteId,
        VirtualWanSecurityProvider: VirtualWanSecurityProvider,
        VirtualWanSecurityProviders: VirtualWanSecurityProviders,
        VpnClientConnectionHealth: VpnClientConnectionHealth,
        P2SVpnGateway: P2SVpnGateway,
        P2SVpnProfileParameters: P2SVpnProfileParameters,
        VpnProfileResponse: VpnProfileResponse,
        ApplicationGatewayListResult: ApplicationGatewayListResult,
        ApplicationGatewayAvailableSslPredefinedPolicies: ApplicationGatewayAvailableSslPredefinedPolicies,
        ApplicationSecurityGroupListResult: ApplicationSecurityGroupListResult,
        AvailableDelegationsResult: AvailableDelegationsResult,
        AzureFirewallListResult: AzureFirewallListResult,
        AzureFirewallFqdnTagListResult: AzureFirewallFqdnTagListResult,
        DdosProtectionPlanListResult: DdosProtectionPlanListResult,
        EndpointServicesListResult: EndpointServicesListResult,
        AuthorizationListResult: AuthorizationListResult,
        ExpressRouteCircuitPeeringListResult: ExpressRouteCircuitPeeringListResult,
        ExpressRouteCircuitListResult: ExpressRouteCircuitListResult,
        ExpressRouteServiceProviderListResult: ExpressRouteServiceProviderListResult,
        ExpressRouteCrossConnectionListResult: ExpressRouteCrossConnectionListResult,
        ExpressRouteCrossConnectionPeeringList: ExpressRouteCrossConnectionPeeringList,
        InterfaceEndpointListResult: InterfaceEndpointListResult,
        LoadBalancerListResult: LoadBalancerListResult,
        LoadBalancerBackendAddressPoolListResult: LoadBalancerBackendAddressPoolListResult,
        LoadBalancerFrontendIPConfigurationListResult: LoadBalancerFrontendIPConfigurationListResult,
        InboundNatRuleListResult: InboundNatRuleListResult,
        LoadBalancerLoadBalancingRuleListResult: LoadBalancerLoadBalancingRuleListResult,
        NetworkInterfaceListResult: NetworkInterfaceListResult,
        LoadBalancerProbeListResult: LoadBalancerProbeListResult,
        NetworkInterfaceIPConfigurationListResult: NetworkInterfaceIPConfigurationListResult,
        NetworkInterfaceLoadBalancerListResult: NetworkInterfaceLoadBalancerListResult,
        NetworkInterfaceTapConfigurationListResult: NetworkInterfaceTapConfigurationListResult,
        NetworkProfileListResult: NetworkProfileListResult,
        NetworkSecurityGroupListResult: NetworkSecurityGroupListResult,
        SecurityRuleListResult: SecurityRuleListResult,
        NetworkWatcherListResult: NetworkWatcherListResult,
        PacketCaptureListResult: PacketCaptureListResult,
        ConnectionMonitorListResult: ConnectionMonitorListResult,
        OperationListResult: OperationListResult,
        PublicIPAddressListResult: PublicIPAddressListResult,
        PublicIPPrefixListResult: PublicIPPrefixListResult,
        RouteFilterListResult: RouteFilterListResult,
        RouteFilterRuleListResult: RouteFilterRuleListResult,
        RouteTableListResult: RouteTableListResult,
        RouteListResult: RouteListResult,
        BgpServiceCommunityListResult: BgpServiceCommunityListResult,
        ServiceEndpointPolicyListResult: ServiceEndpointPolicyListResult,
        ServiceEndpointPolicyDefinitionListResult: ServiceEndpointPolicyDefinitionListResult,
        UsagesListResult: UsagesListResult,
        VirtualNetworkListResult: VirtualNetworkListResult,
        VirtualNetworkListUsageResult: VirtualNetworkListUsageResult,
        SubnetListResult: SubnetListResult,
        VirtualNetworkPeeringListResult: VirtualNetworkPeeringListResult,
        VirtualNetworkTapListResult: VirtualNetworkTapListResult,
        VirtualNetworkGatewayListResult: VirtualNetworkGatewayListResult,
        VirtualNetworkGatewayListConnectionsResult: VirtualNetworkGatewayListConnectionsResult,
        VirtualNetworkGatewayConnectionListResult: VirtualNetworkGatewayConnectionListResult,
        LocalNetworkGatewayListResult: LocalNetworkGatewayListResult,
        ListVirtualWANsResult: ListVirtualWANsResult,
        ListVpnSitesResult: ListVpnSitesResult,
        ListVirtualHubsResult: ListVirtualHubsResult,
        ListHubVirtualNetworkConnectionsResult: ListHubVirtualNetworkConnectionsResult,
        ListVpnGatewaysResult: ListVpnGatewaysResult,
        ListVpnConnectionsResult: ListVpnConnectionsResult,
        ListP2SVpnServerConfigurationsResult: ListP2SVpnServerConfigurationsResult,
        ListP2SVpnGatewaysResult: ListP2SVpnGatewaysResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion0 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2018-08-01',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion1 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2017-03-30',
            type: {
                name: "String"
            }
        }
    };
    var applicationGatewayName = {
        parameterPath: "applicationGatewayName",
        mapper: {
            required: true,
            serializedName: "applicationGatewayName",
            type: {
                name: "String"
            }
        }
    };
    var applicationSecurityGroupName = {
        parameterPath: "applicationSecurityGroupName",
        mapper: {
            required: true,
            serializedName: "applicationSecurityGroupName",
            type: {
                name: "String"
            }
        }
    };
    var authorizationName = {
        parameterPath: "authorizationName",
        mapper: {
            required: true,
            serializedName: "authorizationName",
            type: {
                name: "String"
            }
        }
    };
    var azureFirewallName = {
        parameterPath: "azureFirewallName",
        mapper: {
            required: true,
            serializedName: "azureFirewallName",
            type: {
                name: "String"
            }
        }
    };
    var backendAddressPoolName = {
        parameterPath: "backendAddressPoolName",
        mapper: {
            required: true,
            serializedName: "backendAddressPoolName",
            type: {
                name: "String"
            }
        }
    };
    var circuitName = {
        parameterPath: "circuitName",
        mapper: {
            required: true,
            serializedName: "circuitName",
            type: {
                name: "String"
            }
        }
    };
    var connectionMonitorName = {
        parameterPath: "connectionMonitorName",
        mapper: {
            required: true,
            serializedName: "connectionMonitorName",
            type: {
                name: "String"
            }
        }
    };
    var connectionName = {
        parameterPath: "connectionName",
        mapper: {
            required: true,
            serializedName: "connectionName",
            type: {
                name: "String"
            }
        }
    };
    var crossConnectionName = {
        parameterPath: "crossConnectionName",
        mapper: {
            required: true,
            serializedName: "crossConnectionName",
            type: {
                name: "String"
            }
        }
    };
    var ddosProtectionPlanName = {
        parameterPath: "ddosProtectionPlanName",
        mapper: {
            required: true,
            serializedName: "ddosProtectionPlanName",
            type: {
                name: "String"
            }
        }
    };
    var defaultSecurityRuleName = {
        parameterPath: "defaultSecurityRuleName",
        mapper: {
            required: true,
            serializedName: "defaultSecurityRuleName",
            type: {
                name: "String"
            }
        }
    };
    var devicePath = {
        parameterPath: "devicePath",
        mapper: {
            required: true,
            serializedName: "devicePath",
            type: {
                name: "String"
            }
        }
    };
    var domainNameLabel = {
        parameterPath: "domainNameLabel",
        mapper: {
            required: true,
            serializedName: "domainNameLabel",
            type: {
                name: "String"
            }
        }
    };
    var expand = {
        parameterPath: [
            "options",
            "expand"
        ],
        mapper: {
            serializedName: "$expand",
            type: {
                name: "String"
            }
        }
    };
    var expressRouteGatewayName = {
        parameterPath: "expressRouteGatewayName",
        mapper: {
            required: true,
            serializedName: "expressRouteGatewayName",
            type: {
                name: "String"
            }
        }
    };
    var frontendIPConfigurationName = {
        parameterPath: "frontendIPConfigurationName",
        mapper: {
            required: true,
            serializedName: "frontendIPConfigurationName",
            type: {
                name: "String"
            }
        }
    };
    var gatewayName = {
        parameterPath: "gatewayName",
        mapper: {
            required: true,
            serializedName: "gatewayName",
            type: {
                name: "String"
            }
        }
    };
    var gatewayVip = {
        parameterPath: [
            "options",
            "gatewayVip"
        ],
        mapper: {
            serializedName: "gatewayVip",
            type: {
                name: "String"
            }
        }
    };
    var inboundNatRuleName = {
        parameterPath: "inboundNatRuleName",
        mapper: {
            required: true,
            serializedName: "inboundNatRuleName",
            type: {
                name: "String"
            }
        }
    };
    var interfaceEndpointName = {
        parameterPath: "interfaceEndpointName",
        mapper: {
            required: true,
            serializedName: "interfaceEndpointName",
            type: {
                name: "String"
            }
        }
    };
    var ipAddress = {
        parameterPath: [
            "options",
            "ipAddress"
        ],
        mapper: {
            serializedName: "ipAddress",
            type: {
                name: "String"
            }
        }
    };
    var ipConfigurationName = {
        parameterPath: "ipConfigurationName",
        mapper: {
            required: true,
            serializedName: "ipConfigurationName",
            type: {
                name: "String"
            }
        }
    };
    var loadBalancerName = {
        parameterPath: "loadBalancerName",
        mapper: {
            required: true,
            serializedName: "loadBalancerName",
            type: {
                name: "String"
            }
        }
    };
    var loadBalancingRuleName = {
        parameterPath: "loadBalancingRuleName",
        mapper: {
            required: true,
            serializedName: "loadBalancingRuleName",
            type: {
                name: "String"
            }
        }
    };
    var localNetworkGatewayName = {
        parameterPath: "localNetworkGatewayName",
        mapper: {
            required: true,
            serializedName: "localNetworkGatewayName",
            constraints: {
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var location0 = {
        parameterPath: "location",
        mapper: {
            required: true,
            serializedName: "location",
            type: {
                name: "String"
            }
        }
    };
    var location1 = {
        parameterPath: "location",
        mapper: {
            required: true,
            serializedName: "location",
            constraints: {
                Pattern: /^[-\w\._ ]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var networkInterfaceName = {
        parameterPath: "networkInterfaceName",
        mapper: {
            required: true,
            serializedName: "networkInterfaceName",
            type: {
                name: "String"
            }
        }
    };
    var networkProfileName = {
        parameterPath: "networkProfileName",
        mapper: {
            required: true,
            serializedName: "networkProfileName",
            type: {
                name: "String"
            }
        }
    };
    var networkSecurityGroupName = {
        parameterPath: "networkSecurityGroupName",
        mapper: {
            required: true,
            serializedName: "networkSecurityGroupName",
            type: {
                name: "String"
            }
        }
    };
    var networkWatcherName = {
        parameterPath: "networkWatcherName",
        mapper: {
            required: true,
            serializedName: "networkWatcherName",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var p2SVpnServerConfigurationName = {
        parameterPath: "p2SVpnServerConfigurationName",
        mapper: {
            required: true,
            serializedName: "p2SVpnServerConfigurationName",
            type: {
                name: "String"
            }
        }
    };
    var packetCaptureName = {
        parameterPath: "packetCaptureName",
        mapper: {
            required: true,
            serializedName: "packetCaptureName",
            type: {
                name: "String"
            }
        }
    };
    var peer0 = {
        parameterPath: [
            "options",
            "peer"
        ],
        mapper: {
            serializedName: "peer",
            type: {
                name: "String"
            }
        }
    };
    var peer1 = {
        parameterPath: "peer",
        mapper: {
            required: true,
            serializedName: "peer",
            type: {
                name: "String"
            }
        }
    };
    var peeringName = {
        parameterPath: "peeringName",
        mapper: {
            required: true,
            serializedName: "peeringName",
            type: {
                name: "String"
            }
        }
    };
    var predefinedPolicyName = {
        parameterPath: "predefinedPolicyName",
        mapper: {
            required: true,
            serializedName: "predefinedPolicyName",
            type: {
                name: "String"
            }
        }
    };
    var probeName = {
        parameterPath: "probeName",
        mapper: {
            required: true,
            serializedName: "probeName",
            type: {
                name: "String"
            }
        }
    };
    var publicIpAddressName = {
        parameterPath: "publicIpAddressName",
        mapper: {
            required: true,
            serializedName: "publicIpAddressName",
            type: {
                name: "String"
            }
        }
    };
    var publicIpPrefixName = {
        parameterPath: "publicIpPrefixName",
        mapper: {
            required: true,
            serializedName: "publicIpPrefixName",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var routeFilterName = {
        parameterPath: "routeFilterName",
        mapper: {
            required: true,
            serializedName: "routeFilterName",
            type: {
                name: "String"
            }
        }
    };
    var routeName = {
        parameterPath: "routeName",
        mapper: {
            required: true,
            serializedName: "routeName",
            type: {
                name: "String"
            }
        }
    };
    var routeTableName = {
        parameterPath: "routeTableName",
        mapper: {
            required: true,
            serializedName: "routeTableName",
            type: {
                name: "String"
            }
        }
    };
    var ruleName = {
        parameterPath: "ruleName",
        mapper: {
            required: true,
            serializedName: "ruleName",
            type: {
                name: "String"
            }
        }
    };
    var securityRuleName = {
        parameterPath: "securityRuleName",
        mapper: {
            required: true,
            serializedName: "securityRuleName",
            type: {
                name: "String"
            }
        }
    };
    var serviceEndpointPolicyDefinitionName = {
        parameterPath: "serviceEndpointPolicyDefinitionName",
        mapper: {
            required: true,
            serializedName: "serviceEndpointPolicyDefinitionName",
            type: {
                name: "String"
            }
        }
    };
    var serviceEndpointPolicyName = {
        parameterPath: "serviceEndpointPolicyName",
        mapper: {
            required: true,
            serializedName: "serviceEndpointPolicyName",
            type: {
                name: "String"
            }
        }
    };
    var subnetName = {
        parameterPath: "subnetName",
        mapper: {
            required: true,
            serializedName: "subnetName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var tapConfigurationName = {
        parameterPath: "tapConfigurationName",
        mapper: {
            required: true,
            serializedName: "tapConfigurationName",
            type: {
                name: "String"
            }
        }
    };
    var tapName = {
        parameterPath: "tapName",
        mapper: {
            required: true,
            serializedName: "tapName",
            type: {
                name: "String"
            }
        }
    };
    var virtualHubName = {
        parameterPath: "virtualHubName",
        mapper: {
            required: true,
            serializedName: "virtualHubName",
            type: {
                name: "String"
            }
        }
    };
    var virtualmachineIndex = {
        parameterPath: "virtualmachineIndex",
        mapper: {
            required: true,
            serializedName: "virtualmachineIndex",
            type: {
                name: "String"
            }
        }
    };
    var virtualMachineScaleSetName = {
        parameterPath: "virtualMachineScaleSetName",
        mapper: {
            required: true,
            serializedName: "virtualMachineScaleSetName",
            type: {
                name: "String"
            }
        }
    };
    var virtualNetworkGatewayConnectionName = {
        parameterPath: "virtualNetworkGatewayConnectionName",
        mapper: {
            required: true,
            serializedName: "virtualNetworkGatewayConnectionName",
            type: {
                name: "String"
            }
        }
    };
    var virtualNetworkGatewayName = {
        parameterPath: "virtualNetworkGatewayName",
        mapper: {
            required: true,
            serializedName: "virtualNetworkGatewayName",
            type: {
                name: "String"
            }
        }
    };
    var virtualNetworkName = {
        parameterPath: "virtualNetworkName",
        mapper: {
            required: true,
            serializedName: "virtualNetworkName",
            type: {
                name: "String"
            }
        }
    };
    var virtualNetworkPeeringName = {
        parameterPath: "virtualNetworkPeeringName",
        mapper: {
            required: true,
            serializedName: "virtualNetworkPeeringName",
            type: {
                name: "String"
            }
        }
    };
    var virtualWanName = {
        parameterPath: "virtualWanName",
        mapper: {
            required: true,
            serializedName: "virtualWanName",
            type: {
                name: "String"
            }
        }
    };
    var virtualWANName0 = {
        parameterPath: "virtualWANName",
        mapper: {
            required: true,
            serializedName: "virtualWANName",
            type: {
                name: "String"
            }
        }
    };
    var virtualWANName1 = {
        parameterPath: "virtualWANName",
        mapper: {
            required: true,
            serializedName: "VirtualWANName",
            type: {
                name: "String"
            }
        }
    };
    var vpnSiteName = {
        parameterPath: "vpnSiteName",
        mapper: {
            required: true,
            serializedName: "vpnSiteName",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        ApplicationGateway: ApplicationGateway,
        Resource: Resource,
        BaseResource: BaseResource,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        SubResource: SubResource,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        FrontendIPConfiguration: FrontendIPConfiguration,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        TagsObject: TagsObject,
        ApplicationGatewayListResult: ApplicationGatewayListResult,
        ApplicationGatewayBackendHealth: ApplicationGatewayBackendHealth,
        ApplicationGatewayBackendHealthPool: ApplicationGatewayBackendHealthPool,
        ApplicationGatewayBackendHealthHttpSettings: ApplicationGatewayBackendHealthHttpSettings,
        ApplicationGatewayBackendHealthServer: ApplicationGatewayBackendHealthServer,
        ApplicationGatewayAvailableWafRuleSetsResult: ApplicationGatewayAvailableWafRuleSetsResult,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewayAvailableSslPredefinedPolicies: ApplicationGatewayAvailableSslPredefinedPolicies,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ApplicationGateways. */
    var ApplicationGateways = /** @class */ (function () {
        /**
         * Create a ApplicationGateways.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function ApplicationGateways(client) {
            this.client = client;
        }
        /**
         * Deletes the specified application gateway.
         * @param resourceGroupName The name of the resource group.
         * @param applicationGatewayName The name of the application gateway.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ApplicationGateways.prototype.deleteMethod = function (resourceGroupName$$1, applicationGatewayName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, applicationGatewayName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ApplicationGateways.prototype.get = function (resourceGroupName$$1, applicationGatewayName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                applicationGatewayName: applicationGatewayName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        /**
         * Creates or updates the specified application gateway.
         * @param resourceGroupName The name of the resource group.
         * @param applicationGatewayName The name of the application gateway.
         * @param parameters Parameters supplied to the create or update application gateway operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.ApplicationGatewaysCreateOrUpdateResponse>
         */
        ApplicationGateways.prototype.createOrUpdate = function (resourceGroupName$$1, applicationGatewayName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, applicationGatewayName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates the specified application gateway tags.
         * @param resourceGroupName The name of the resource group.
         * @param applicationGatewayName The name of the application gateway.
         * @param parameters Parameters supplied to update application gateway tags.
         * @param [options] The optional parameters
         * @returns Promise<Models.ApplicationGatewaysUpdateTagsResponse>
         */
        ApplicationGateways.prototype.updateTags = function (resourceGroupName$$1, applicationGatewayName$$1, parameters, options) {
            return this.beginUpdateTags(resourceGroupName$$1, applicationGatewayName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ApplicationGateways.prototype.list = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listOperationSpec, callback);
        };
        ApplicationGateways.prototype.listAll = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listAllOperationSpec, callback);
        };
        /**
         * Starts the specified application gateway.
         * @param resourceGroupName The name of the resource group.
         * @param applicationGatewayName The name of the application gateway.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ApplicationGateways.prototype.start = function (resourceGroupName$$1, applicationGatewayName$$1, options) {
            return this.beginStart(resourceGroupName$$1, applicationGatewayName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Stops the specified application gateway in a resource group.
         * @param resourceGroupName The name of the resource group.
         * @param applicationGatewayName The name of the application gateway.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ApplicationGateways.prototype.stop = function (resourceGroupName$$1, applicationGatewayName$$1, options) {
            return this.beginStop(resourceGroupName$$1, applicationGatewayName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Gets the backend health of the specified application gateway in a resource group.
         * @param resourceGroupName The name of the resource group.
         * @param applicationGatewayName The name of the application gateway.
         * @param [options] The optional parameters
         * @returns Promise<Models.ApplicationGatewaysBackendHealthResponse>
         */
        ApplicationGateways.prototype.backendHealth = function (resourceGroupName$$1, applicationGatewayName$$1, options) {
            return this.beginBackendHealth(resourceGroupName$$1, applicationGatewayName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ApplicationGateways.prototype.listAvailableWafRuleSets = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listAvailableWafRuleSetsOperationSpec, callback);
        };
        ApplicationGateways.prototype.listAvailableSslOptions = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listAvailableSslOptionsOperationSpec, callback);
        };
        ApplicationGateways.prototype.listAvailableSslPredefinedPolicies = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listAvailableSslPredefinedPoliciesOperationSpec, callback);
        };
        ApplicationGateways.prototype.getSslPredefinedPolicy = function (predefinedPolicyName$$1, options, callback) {
            return this.client.sendOperationRequest({
                predefinedPolicyName: predefinedPolicyName$$1,
                options: options
            }, getSslPredefinedPolicyOperationSpec, callback);
        };
        /**
         * Deletes the specified application gateway.
         * @param resourceGroupName The name of the resource group.
         * @param applicationGatewayName The name of the application gateway.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ApplicationGateways.prototype.beginDeleteMethod = function (resourceGroupName$$1, applicationGatewayName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                applicationGatewayName: applicationGatewayName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        /**
         * Creates or updates the specified application gateway.
         * @param resourceGroupName The name of the resource group.
         * @param applicationGatewayName The name of the application gateway.
         * @param parameters Parameters supplied to the create or update application gateway operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ApplicationGateways.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, applicationGatewayName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                applicationGatewayName: applicationGatewayName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * Updates the specified application gateway tags.
         * @param resourceGroupName The name of the resource group.
         * @param applicationGatewayName The name of the application gateway.
         * @param parameters Parameters supplied to update application gateway tags.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ApplicationGateways.prototype.beginUpdateTags = function (resourceGroupName$$1, applicationGatewayName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                applicationGatewayName: applicationGatewayName$$1,
                parameters: parameters,
                options: options
            }, beginUpdateTagsOperationSpec, options);
        };
        /**
         * Starts the specified application gateway.
         * @param resourceGroupName The name of the resource group.
         * @param applicationGatewayName The name of the application gateway.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ApplicationGateways.prototype.beginStart = function (resourceGroupName$$1, applicationGatewayName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                applicationGatewayName: applicationGatewayName$$1,
                options: options
            }, beginStartOperationSpec, options);
        };
        /**
         * Stops the specified application gateway in a resource group.
         * @param resourceGroupName The name of the resource group.
         * @param applicationGatewayName The name of the application gateway.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ApplicationGateways.prototype.beginStop = function (resourceGroupName$$1, applicationGatewayName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                applicationGatewayName: applicationGatewayName$$1,
                options: options
            }, beginStopOperationSpec, options);
        };
        /**
         * Gets the backend health of the specified application gateway in a resource group.
         * @param resourceGroupName The name of the resource group.
         * @param applicationGatewayName The name of the application gateway.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ApplicationGateways.prototype.beginBackendHealth = function (resourceGroupName$$1, applicationGatewayName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                applicationGatewayName: applicationGatewayName$$1,
                options: options
            }, beginBackendHealthOperationSpec, options);
        };
        ApplicationGateways.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        ApplicationGateways.prototype.listAllNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listAllNextOperationSpec, callback);
        };
        ApplicationGateways.prototype.listAvailableSslPredefinedPoliciesNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listAvailableSslPredefinedPoliciesNextOperationSpec, callback);
        };
        return ApplicationGateways;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers$1);
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}",
        urlParameters: [
            resourceGroupName,
            applicationGatewayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationGateway
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationGatewayListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listAllOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGateways",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationGatewayListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listAvailableWafRuleSetsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableWafRuleSets",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationGatewayAvailableWafRuleSetsResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listAvailableSslOptionsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableSslOptions/default",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationGatewayAvailableSslOptions
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listAvailableSslPredefinedPoliciesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableSslOptions/default/predefinedPolicies",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationGatewayAvailableSslPredefinedPolicies
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var getSslPredefinedPolicyOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableSslOptions/default/predefinedPolicies/{predefinedPolicyName}",
        urlParameters: [
            subscriptionId,
            predefinedPolicyName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationGatewaySslPredefinedPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}",
        urlParameters: [
            resourceGroupName,
            applicationGatewayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}",
        urlParameters: [
            resourceGroupName,
            applicationGatewayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ApplicationGateway, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ApplicationGateway
            },
            201: {
                bodyMapper: ApplicationGateway
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginUpdateTagsOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}",
        urlParameters: [
            resourceGroupName,
            applicationGatewayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, TagsObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ApplicationGateway
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginStartOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/start",
        urlParameters: [
            resourceGroupName,
            applicationGatewayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginStopOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/stop",
        urlParameters: [
            resourceGroupName,
            applicationGatewayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginBackendHealthOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/backendhealth",
        urlParameters: [
            resourceGroupName,
            applicationGatewayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0,
            expand
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationGatewayBackendHealth
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationGatewayListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listAllNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationGatewayListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listAvailableSslPredefinedPoliciesNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationGatewayAvailableSslPredefinedPolicies
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        Resource: Resource,
        BaseResource: BaseResource,
        ApplicationSecurityGroupListResult: ApplicationSecurityGroupListResult,
        SubResource: SubResource,
        SecurityRule: SecurityRule,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        NetworkInterface: NetworkInterface,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        FrontendIPConfiguration: FrontendIPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        IPConfiguration: IPConfiguration,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ApplicationSecurityGroups. */
    var ApplicationSecurityGroups = /** @class */ (function () {
        /**
         * Create a ApplicationSecurityGroups.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function ApplicationSecurityGroups(client) {
            this.client = client;
        }
        /**
         * Deletes the specified application security group.
         * @param resourceGroupName The name of the resource group.
         * @param applicationSecurityGroupName The name of the application security group.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ApplicationSecurityGroups.prototype.deleteMethod = function (resourceGroupName$$1, applicationSecurityGroupName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, applicationSecurityGroupName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ApplicationSecurityGroups.prototype.get = function (resourceGroupName$$1, applicationSecurityGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                applicationSecurityGroupName: applicationSecurityGroupName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        /**
         * Creates or updates an application security group.
         * @param resourceGroupName The name of the resource group.
         * @param applicationSecurityGroupName The name of the application security group.
         * @param parameters Parameters supplied to the create or update ApplicationSecurityGroup
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.ApplicationSecurityGroupsCreateOrUpdateResponse>
         */
        ApplicationSecurityGroups.prototype.createOrUpdate = function (resourceGroupName$$1, applicationSecurityGroupName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, applicationSecurityGroupName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ApplicationSecurityGroups.prototype.listAll = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listAllOperationSpec$1, callback);
        };
        ApplicationSecurityGroups.prototype.list = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listOperationSpec$1, callback);
        };
        /**
         * Deletes the specified application security group.
         * @param resourceGroupName The name of the resource group.
         * @param applicationSecurityGroupName The name of the application security group.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ApplicationSecurityGroups.prototype.beginDeleteMethod = function (resourceGroupName$$1, applicationSecurityGroupName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                applicationSecurityGroupName: applicationSecurityGroupName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$1, options);
        };
        /**
         * Creates or updates an application security group.
         * @param resourceGroupName The name of the resource group.
         * @param applicationSecurityGroupName The name of the application security group.
         * @param parameters Parameters supplied to the create or update ApplicationSecurityGroup
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ApplicationSecurityGroups.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, applicationSecurityGroupName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                applicationSecurityGroupName: applicationSecurityGroupName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$1, options);
        };
        ApplicationSecurityGroups.prototype.listAllNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listAllNextOperationSpec$1, callback);
        };
        ApplicationSecurityGroups.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return ApplicationSecurityGroups;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$2);
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationSecurityGroups/{applicationSecurityGroupName}",
        urlParameters: [
            resourceGroupName,
            applicationSecurityGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationSecurityGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listAllOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationSecurityGroups",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationSecurityGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationSecurityGroups",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationSecurityGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginDeleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationSecurityGroups/{applicationSecurityGroupName}",
        urlParameters: [
            resourceGroupName,
            applicationSecurityGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginCreateOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationSecurityGroups/{applicationSecurityGroupName}",
        urlParameters: [
            resourceGroupName,
            applicationSecurityGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ApplicationSecurityGroup, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ApplicationSecurityGroup
            },
            201: {
                bodyMapper: ApplicationSecurityGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listAllNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationSecurityGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationSecurityGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        AvailableDelegationsResult: AvailableDelegationsResult,
        AvailableDelegation: AvailableDelegation,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a AvailableDelegations. */
    var AvailableDelegations = /** @class */ (function () {
        /**
         * Create a AvailableDelegations.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function AvailableDelegations(client) {
            this.client = client;
        }
        AvailableDelegations.prototype.list = function (location, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                options: options
            }, listOperationSpec$2, callback);
        };
        AvailableDelegations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        return AvailableDelegations;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$3);
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/availableDelegations",
        urlParameters: [
            location0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AvailableDelegationsResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AvailableDelegationsResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        AvailableDelegationsResult: AvailableDelegationsResult,
        AvailableDelegation: AvailableDelegation,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a AvailableResourceGroupDelegations. */
    var AvailableResourceGroupDelegations = /** @class */ (function () {
        /**
         * Create a AvailableResourceGroupDelegations.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function AvailableResourceGroupDelegations(client) {
            this.client = client;
        }
        AvailableResourceGroupDelegations.prototype.list = function (location, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listOperationSpec$3, callback);
        };
        AvailableResourceGroupDelegations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$3, callback);
        };
        return AvailableResourceGroupDelegations;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$4);
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/locations/{location}/availableDelegations",
        urlParameters: [
            location0,
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AvailableDelegationsResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AvailableDelegationsResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        AzureFirewall: AzureFirewall,
        Resource: Resource,
        BaseResource: BaseResource,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        SubResource: SubResource,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallListResult: AzureFirewallListResult,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        FrontendIPConfiguration: FrontendIPConfiguration,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a AzureFirewalls. */
    var AzureFirewalls = /** @class */ (function () {
        /**
         * Create a AzureFirewalls.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function AzureFirewalls(client) {
            this.client = client;
        }
        /**
         * Deletes the specified Azure Firewall.
         * @param resourceGroupName The name of the resource group.
         * @param azureFirewallName The name of the Azure Firewall.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        AzureFirewalls.prototype.deleteMethod = function (resourceGroupName$$1, azureFirewallName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, azureFirewallName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        AzureFirewalls.prototype.get = function (resourceGroupName$$1, azureFirewallName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                azureFirewallName: azureFirewallName$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        /**
         * Creates or updates the specified Azure Firewall.
         * @param resourceGroupName The name of the resource group.
         * @param azureFirewallName The name of the Azure Firewall.
         * @param parameters Parameters supplied to the create or update Azure Firewall operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.AzureFirewallsCreateOrUpdateResponse>
         */
        AzureFirewalls.prototype.createOrUpdate = function (resourceGroupName$$1, azureFirewallName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, azureFirewallName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        AzureFirewalls.prototype.list = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listOperationSpec$4, callback);
        };
        AzureFirewalls.prototype.listAll = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listAllOperationSpec$2, callback);
        };
        /**
         * Deletes the specified Azure Firewall.
         * @param resourceGroupName The name of the resource group.
         * @param azureFirewallName The name of the Azure Firewall.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        AzureFirewalls.prototype.beginDeleteMethod = function (resourceGroupName$$1, azureFirewallName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                azureFirewallName: azureFirewallName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$2, options);
        };
        /**
         * Creates or updates the specified Azure Firewall.
         * @param resourceGroupName The name of the resource group.
         * @param azureFirewallName The name of the Azure Firewall.
         * @param parameters Parameters supplied to the create or update Azure Firewall operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        AzureFirewalls.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, azureFirewallName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                azureFirewallName: azureFirewallName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$2, options);
        };
        AzureFirewalls.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$4, callback);
        };
        AzureFirewalls.prototype.listAllNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listAllNextOperationSpec$2, callback);
        };
        return AzureFirewalls;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$5);
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/azureFirewalls/{azureFirewallName}",
        urlParameters: [
            resourceGroupName,
            azureFirewallName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AzureFirewall
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/azureFirewalls",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AzureFirewallListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listAllOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/azureFirewalls",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AzureFirewallListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var beginDeleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/azureFirewalls/{azureFirewallName}",
        urlParameters: [
            resourceGroupName,
            azureFirewallName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var beginCreateOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/azureFirewalls/{azureFirewallName}",
        urlParameters: [
            resourceGroupName,
            azureFirewallName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, AzureFirewall, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AzureFirewall
            },
            201: {
                bodyMapper: AzureFirewall
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AzureFirewallListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listAllNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AzureFirewallListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        AzureFirewallFqdnTagListResult: AzureFirewallFqdnTagListResult,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        SubResource: SubResource,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        SecurityRule: SecurityRule,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        NetworkInterface: NetworkInterface,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        FrontendIPConfiguration: FrontendIPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        IPConfiguration: IPConfiguration,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a AzureFirewallFqdnTags. */
    var AzureFirewallFqdnTags = /** @class */ (function () {
        /**
         * Create a AzureFirewallFqdnTags.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function AzureFirewallFqdnTags(client) {
            this.client = client;
        }
        AzureFirewallFqdnTags.prototype.listAll = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listAllOperationSpec$3, callback);
        };
        AzureFirewallFqdnTags.prototype.listAllNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listAllNextOperationSpec$3, callback);
        };
        return AzureFirewallFqdnTags;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$6);
    var listAllOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/azureFirewallFqdnTags",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AzureFirewallFqdnTagListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var listAllNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AzureFirewallFqdnTagListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        DdosProtectionPlan: DdosProtectionPlan,
        BaseResource: BaseResource,
        SubResource: SubResource,
        DdosProtectionPlanListResult: DdosProtectionPlanListResult,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        Resource: Resource,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        FrontendIPConfiguration: FrontendIPConfiguration,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DdosProtectionPlans. */
    var DdosProtectionPlans = /** @class */ (function () {
        /**
         * Create a DdosProtectionPlans.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function DdosProtectionPlans(client) {
            this.client = client;
        }
        /**
         * Deletes the specified DDoS protection plan.
         * @param resourceGroupName The name of the resource group.
         * @param ddosProtectionPlanName The name of the DDoS protection plan.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        DdosProtectionPlans.prototype.deleteMethod = function (resourceGroupName$$1, ddosProtectionPlanName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, ddosProtectionPlanName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        DdosProtectionPlans.prototype.get = function (resourceGroupName$$1, ddosProtectionPlanName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                ddosProtectionPlanName: ddosProtectionPlanName$$1,
                options: options
            }, getOperationSpec$3, callback);
        };
        /**
         * Creates or updates a DDoS protection plan.
         * @param resourceGroupName The name of the resource group.
         * @param ddosProtectionPlanName The name of the DDoS protection plan.
         * @param parameters Parameters supplied to the create or update operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.DdosProtectionPlansCreateOrUpdateResponse>
         */
        DdosProtectionPlans.prototype.createOrUpdate = function (resourceGroupName$$1, ddosProtectionPlanName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, ddosProtectionPlanName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        DdosProtectionPlans.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$5, callback);
        };
        DdosProtectionPlans.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        /**
         * Deletes the specified DDoS protection plan.
         * @param resourceGroupName The name of the resource group.
         * @param ddosProtectionPlanName The name of the DDoS protection plan.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        DdosProtectionPlans.prototype.beginDeleteMethod = function (resourceGroupName$$1, ddosProtectionPlanName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                ddosProtectionPlanName: ddosProtectionPlanName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$3, options);
        };
        /**
         * Creates or updates a DDoS protection plan.
         * @param resourceGroupName The name of the resource group.
         * @param ddosProtectionPlanName The name of the DDoS protection plan.
         * @param parameters Parameters supplied to the create or update operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        DdosProtectionPlans.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, ddosProtectionPlanName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                ddosProtectionPlanName: ddosProtectionPlanName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$3, options);
        };
        DdosProtectionPlans.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$5, callback);
        };
        DdosProtectionPlans.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        return DdosProtectionPlans;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$7);
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ddosProtectionPlans/{ddosProtectionPlanName}",
        urlParameters: [
            resourceGroupName,
            ddosProtectionPlanName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DdosProtectionPlan
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/ddosProtectionPlans",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DdosProtectionPlanListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ddosProtectionPlans",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DdosProtectionPlanListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var beginDeleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ddosProtectionPlans/{ddosProtectionPlanName}",
        urlParameters: [
            resourceGroupName,
            ddosProtectionPlanName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var beginCreateOrUpdateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ddosProtectionPlans/{ddosProtectionPlanName}",
        urlParameters: [
            resourceGroupName,
            ddosProtectionPlanName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, DdosProtectionPlan, { required: true })
        },
        responses: {
            200: {
                bodyMapper: DdosProtectionPlan
            },
            201: {
                bodyMapper: DdosProtectionPlan
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listNextOperationSpec$5 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DdosProtectionPlanListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DdosProtectionPlanListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$8 = /*#__PURE__*/Object.freeze({
        EndpointServicesListResult: EndpointServicesListResult,
        EndpointServiceResult: EndpointServiceResult,
        SubResource: SubResource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        Resource: Resource,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        FrontendIPConfiguration: FrontendIPConfiguration,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a AvailableEndpointServices. */
    var AvailableEndpointServices = /** @class */ (function () {
        /**
         * Create a AvailableEndpointServices.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function AvailableEndpointServices(client) {
            this.client = client;
        }
        AvailableEndpointServices.prototype.list = function (location, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                options: options
            }, listOperationSpec$6, callback);
        };
        AvailableEndpointServices.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$6, callback);
        };
        return AvailableEndpointServices;
    }());
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers$8);
    var listOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/virtualNetworkAvailableEndpointServices",
        urlParameters: [
            location0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EndpointServicesListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var listNextOperationSpec$6 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EndpointServicesListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$9 = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        SubResource: SubResource,
        BaseResource: BaseResource,
        AuthorizationListResult: AuthorizationListResult,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        Resource: Resource,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        FrontendIPConfiguration: FrontendIPConfiguration,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ExpressRouteCircuitAuthorizations. */
    var ExpressRouteCircuitAuthorizations = /** @class */ (function () {
        /**
         * Create a ExpressRouteCircuitAuthorizations.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function ExpressRouteCircuitAuthorizations(client) {
            this.client = client;
        }
        /**
         * Deletes the specified authorization from the specified express route circuit.
         * @param resourceGroupName The name of the resource group.
         * @param circuitName The name of the express route circuit.
         * @param authorizationName The name of the authorization.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ExpressRouteCircuitAuthorizations.prototype.deleteMethod = function (resourceGroupName$$1, circuitName$$1, authorizationName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, circuitName$$1, authorizationName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ExpressRouteCircuitAuthorizations.prototype.get = function (resourceGroupName$$1, circuitName$$1, authorizationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                circuitName: circuitName$$1,
                authorizationName: authorizationName$$1,
                options: options
            }, getOperationSpec$4, callback);
        };
        /**
         * Creates or updates an authorization in the specified express route circuit.
         * @param resourceGroupName The name of the resource group.
         * @param circuitName The name of the express route circuit.
         * @param authorizationName The name of the authorization.
         * @param authorizationParameters Parameters supplied to the create or update express route circuit
         * authorization operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.ExpressRouteCircuitAuthorizationsCreateOrUpdateResponse>
         */
        ExpressRouteCircuitAuthorizations.prototype.createOrUpdate = function (resourceGroupName$$1, circuitName$$1, authorizationName$$1, authorizationParameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, circuitName$$1, authorizationName$$1, authorizationParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ExpressRouteCircuitAuthorizations.prototype.list = function (resourceGroupName$$1, circuitName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                circuitName: circuitName$$1,
                options: options
            }, listOperationSpec$7, callback);
        };
        /**
         * Deletes the specified authorization from the specified express route circuit.
         * @param resourceGroupName The name of the resource group.
         * @param circuitName The name of the express route circuit.
         * @param authorizationName The name of the authorization.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ExpressRouteCircuitAuthorizations.prototype.beginDeleteMethod = function (resourceGroupName$$1, circuitName$$1, authorizationName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                circuitName: circuitName$$1,
                authorizationName: authorizationName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$4, options);
        };
        /**
         * Creates or updates an authorization in the specified express route circuit.
         * @param resourceGroupName The name of the resource group.
         * @param circuitName The name of the express route circuit.
         * @param authorizationName The name of the authorization.
         * @param authorizationParameters Parameters supplied to the create or update express route circuit
         * authorization operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ExpressRouteCircuitAuthorizations.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, circuitName$$1, authorizationName$$1, authorizationParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                circuitName: circuitName$$1,
                authorizationName: authorizationName$$1,
                authorizationParameters: authorizationParameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$4, options);
        };
        ExpressRouteCircuitAuthorizations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$7, callback);
        };
        return ExpressRouteCircuitAuthorizations;
    }());
    // Operation Specifications
    var serializer$8 = new msRest.Serializer(Mappers$9);
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/authorizations/{authorizationName}",
        urlParameters: [
            resourceGroupName,
            circuitName,
            authorizationName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExpressRouteCircuitAuthorization
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var listOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/authorizations",
        urlParameters: [
            resourceGroupName,
            circuitName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AuthorizationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var beginDeleteMethodOperationSpec$4 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/authorizations/{authorizationName}",
        urlParameters: [
            resourceGroupName,
            circuitName,
            authorizationName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var beginCreateOrUpdateOperationSpec$4 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/authorizations/{authorizationName}",
        urlParameters: [
            resourceGroupName,
            circuitName,
            authorizationName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "authorizationParameters",
            mapper: __assign({}, ExpressRouteCircuitAuthorization, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ExpressRouteCircuitAuthorization
            },
            201: {
                bodyMapper: ExpressRouteCircuitAuthorization
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var listNextOperationSpec$7 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AuthorizationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$a = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        SubResource: SubResource,
        BaseResource: BaseResource,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Resource: Resource,
        RouteFilterRule: RouteFilterRule,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeeringListResult: ExpressRouteCircuitPeeringListResult,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        FrontendIPConfiguration: FrontendIPConfiguration,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ExpressRouteCircuitPeerings. */
    var ExpressRouteCircuitPeerings = /** @class */ (function () {
        /**
         * Create a ExpressRouteCircuitPeerings.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function ExpressRouteCircuitPeerings(client) {
            this.client = client;
        }
        /**
         * Deletes the specified peering from the specified express route circuit.
         * @param resourceGroupName The name of the resource group.
         * @param circuitName The name of the express route circuit.
         * @param peeringName The name of the peering.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ExpressRouteCircuitPeerings.prototype.deleteMethod = function (resourceGroupName$$1, circuitName$$1, peeringName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, circuitName$$1, peeringName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ExpressRouteCircuitPeerings.prototype.get = function (resourceGroupName$$1, circuitName$$1, peeringName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                circuitName: circuitName$$1,
                peeringName: peeringName$$1,
                options: options
            }, getOperationSpec$5, callback);
        };
        /**
         * Creates or updates a peering in the specified express route circuits.
         * @param resourceGroupName The name of the resource group.
         * @param circuitName The name of the express route circuit.
         * @param peeringName The name of the peering.
         * @param peeringParameters Parameters supplied to the create or update express route circuit
         * peering operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.ExpressRouteCircuitPeeringsCreateOrUpdateResponse>
         */
        ExpressRouteCircuitPeerings.prototype.createOrUpdate = function (resourceGroupName$$1, circuitName$$1, peeringName$$1, peeringParameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, circuitName$$1, peeringName$$1, peeringParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ExpressRouteCircuitPeerings.prototype.list = function (resourceGroupName$$1, circuitName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                circuitName: circuitName$$1,
                options: options
            }, listOperationSpec$8, callback);
        };
        /**
         * Deletes the specified peering from the specified express route circuit.
         * @param resourceGroupName The name of the resource group.
         * @param circuitName The name of the express route circuit.
         * @param peeringName The name of the peering.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ExpressRouteCircuitPeerings.prototype.beginDeleteMethod = function (resourceGroupName$$1, circuitName$$1, peeringName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                circuitName: circuitName$$1,
                peeringName: peeringName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$5, options);
        };
        /**
         * Creates or updates a peering in the specified express route circuits.
         * @param resourceGroupName The name of the resource group.
         * @param circuitName The name of the express route circuit.
         * @param peeringName The name of the peering.
         * @param peeringParameters Parameters supplied to the create or update express route circuit
         * peering operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ExpressRouteCircuitPeerings.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, circuitName$$1, peeringName$$1, peeringParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                circuitName: circuitName$$1,
                peeringName: peeringName$$1,
                peeringParameters: peeringParameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$5, options);
        };
        ExpressRouteCircuitPeerings.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$8, callback);
        };
        return ExpressRouteCircuitPeerings;
    }());
    // Operation Specifications
    var serializer$9 = new msRest.Serializer(Mappers$a);
    var getOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}",
        urlParameters: [
            resourceGroupName,
            circuitName,
            peeringName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExpressRouteCircuitPeering
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var listOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings",
        urlParameters: [
            resourceGroupName,
            circuitName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExpressRouteCircuitPeeringListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginDeleteMethodOperationSpec$5 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}",
        urlParameters: [
            resourceGroupName,
            circuitName,
            peeringName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginCreateOrUpdateOperationSpec$5 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}",
        urlParameters: [
            resourceGroupName,
            circuitName,
            peeringName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "peeringParameters",
            mapper: __assign({}, ExpressRouteCircuitPeering, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ExpressRouteCircuitPeering
            },
            201: {
                bodyMapper: ExpressRouteCircuitPeering
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var listNextOperationSpec$8 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExpressRouteCircuitPeeringListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$b = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        SubResource: SubResource,
        BaseResource: BaseResource,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        Resource: Resource,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        FrontendIPConfiguration: FrontendIPConfiguration,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ExpressRouteCircuitConnections. */
    var ExpressRouteCircuitConnections = /** @class */ (function () {
        /**
         * Create a ExpressRouteCircuitConnections.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function ExpressRouteCircuitConnections(client) {
            this.client = client;
        }
        /**
         * Deletes the specified Express Route Circuit Connection from the specified express route circuit.
         * @param resourceGroupName The name of the resource group.
         * @param circuitName The name of the express route circuit.
         * @param peeringName The name of the peering.
         * @param connectionName The name of the express route circuit connection.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ExpressRouteCircuitConnections.prototype.deleteMethod = function (resourceGroupName$$1, circuitName$$1, peeringName$$1, connectionName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, circuitName$$1, peeringName$$1, connectionName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ExpressRouteCircuitConnections.prototype.get = function (resourceGroupName$$1, circuitName$$1, peeringName$$1, connectionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                circuitName: circuitName$$1,
                peeringName: peeringName$$1,
                connectionName: connectionName$$1,
                options: options
            }, getOperationSpec$6, callback);
        };
        /**
         * Creates or updates a Express Route Circuit Connection in the specified express route circuits.
         * @param resourceGroupName The name of the resource group.
         * @param circuitName The name of the express route circuit.
         * @param peeringName The name of the peering.
         * @param connectionName The name of the express route circuit connection.
         * @param expressRouteCircuitConnectionParameters Parameters supplied to the create or update
         * express route circuit circuit connection operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.ExpressRouteCircuitConnectionsCreateOrUpdateResponse>
         */
        ExpressRouteCircuitConnections.prototype.createOrUpdate = function (resourceGroupName$$1, circuitName$$1, peeringName$$1, connectionName$$1, expressRouteCircuitConnectionParameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, circuitName$$1, peeringName$$1, connectionName$$1, expressRouteCircuitConnectionParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the specified Express Route Circuit Connection from the specified express route circuit.
         * @param resourceGroupName The name of the resource group.
         * @param circuitName The name of the express route circuit.
         * @param peeringName The name of the peering.
         * @param connectionName The name of the express route circuit connection.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ExpressRouteCircuitConnections.prototype.beginDeleteMethod = function (resourceGroupName$$1, circuitName$$1, peeringName$$1, connectionName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                circuitName: circuitName$$1,
                peeringName: peeringName$$1,
                connectionName: connectionName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$6, options);
        };
        /**
         * Creates or updates a Express Route Circuit Connection in the specified express route circuits.
         * @param resourceGroupName The name of the resource group.
         * @param circuitName The name of the express route circuit.
         * @param peeringName The name of the peering.
         * @param connectionName The name of the express route circuit connection.
         * @param expressRouteCircuitConnectionParameters Parameters supplied to the create or update
         * express route circuit circuit connection operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ExpressRouteCircuitConnections.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, circuitName$$1, peeringName$$1, connectionName$$1, expressRouteCircuitConnectionParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                circuitName: circuitName$$1,
                peeringName: peeringName$$1,
                connectionName: connectionName$$1,
                expressRouteCircuitConnectionParameters: expressRouteCircuitConnectionParameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$6, options);
        };
        return ExpressRouteCircuitConnections;
    }());
    // Operation Specifications
    var serializer$a = new msRest.Serializer(Mappers$b);
    var getOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}/connections/{connectionName}",
        urlParameters: [
            resourceGroupName,
            circuitName,
            peeringName,
            connectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExpressRouteCircuitConnection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var beginDeleteMethodOperationSpec$6 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}/connections/{connectionName}",
        urlParameters: [
            resourceGroupName,
            circuitName,
            peeringName,
            connectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var beginCreateOrUpdateOperationSpec$6 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}/connections/{connectionName}",
        urlParameters: [
            resourceGroupName,
            circuitName,
            peeringName,
            connectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "expressRouteCircuitConnectionParameters",
            mapper: __assign({}, ExpressRouteCircuitConnection, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ExpressRouteCircuitConnection
            },
            201: {
                bodyMapper: ExpressRouteCircuitConnection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$c = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        ExpressRouteCircuit: ExpressRouteCircuit,
        Resource: Resource,
        BaseResource: BaseResource,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        SubResource: SubResource,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        RouteFilterRule: RouteFilterRule,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        TagsObject: TagsObject,
        ExpressRouteCircuitsArpTableListResult: ExpressRouteCircuitsArpTableListResult,
        ExpressRouteCircuitArpTable: ExpressRouteCircuitArpTable,
        ExpressRouteCircuitsRoutesTableListResult: ExpressRouteCircuitsRoutesTableListResult,
        ExpressRouteCircuitRoutesTable: ExpressRouteCircuitRoutesTable,
        ExpressRouteCircuitsRoutesTableSummaryListResult: ExpressRouteCircuitsRoutesTableSummaryListResult,
        ExpressRouteCircuitRoutesTableSummary: ExpressRouteCircuitRoutesTableSummary,
        ExpressRouteCircuitListResult: ExpressRouteCircuitListResult,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        FrontendIPConfiguration: FrontendIPConfiguration,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ExpressRouteCircuits. */
    var ExpressRouteCircuits = /** @class */ (function () {
        /**
         * Create a ExpressRouteCircuits.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function ExpressRouteCircuits(client) {
            this.client = client;
        }
        /**
         * Deletes the specified express route circuit.
         * @param resourceGroupName The name of the resource group.
         * @param circuitName The name of the express route circuit.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ExpressRouteCircuits.prototype.deleteMethod = function (resourceGroupName$$1, circuitName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, circuitName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ExpressRouteCircuits.prototype.get = function (resourceGroupName$$1, circuitName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                circuitName: circuitName$$1,
                options: options
            }, getOperationSpec$7, callback);
        };
        /**
         * Creates or updates an express route circuit.
         * @param resourceGroupName The name of the resource group.
         * @param circuitName The name of the circuit.
         * @param parameters Parameters supplied to the create or update express route circuit operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.ExpressRouteCircuitsCreateOrUpdateResponse>
         */
        ExpressRouteCircuits.prototype.createOrUpdate = function (resourceGroupName$$1, circuitName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, circuitName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates an express route circuit tags.
         * @param resourceGroupName The name of the resource group.
         * @param circuitName The name of the circuit.
         * @param parameters Parameters supplied to update express route circuit tags.
         * @param [options] The optional parameters
         * @returns Promise<Models.ExpressRouteCircuitsUpdateTagsResponse>
         */
        ExpressRouteCircuits.prototype.updateTags = function (resourceGroupName$$1, circuitName$$1, parameters, options) {
            return this.beginUpdateTags(resourceGroupName$$1, circuitName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Gets the currently advertised ARP table associated with the express route circuit in a resource
         * group.
         * @param resourceGroupName The name of the resource group.
         * @param circuitName The name of the express route circuit.
         * @param peeringName The name of the peering.
         * @param devicePath The path of the device.
         * @param [options] The optional parameters
         * @returns Promise<Models.ExpressRouteCircuitsListArpTableResponse>
         */
        ExpressRouteCircuits.prototype.listArpTable = function (resourceGroupName$$1, circuitName$$1, peeringName$$1, devicePath$$1, options) {
            return this.beginListArpTable(resourceGroupName$$1, circuitName$$1, peeringName$$1, devicePath$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Gets the currently advertised routes table associated with the express route circuit in a
         * resource group.
         * @param resourceGroupName The name of the resource group.
         * @param circuitName The name of the express route circuit.
         * @param peeringName The name of the peering.
         * @param devicePath The path of the device.
         * @param [options] The optional parameters
         * @returns Promise<Models.ExpressRouteCircuitsListRoutesTableResponse>
         */
        ExpressRouteCircuits.prototype.listRoutesTable = function (resourceGroupName$$1, circuitName$$1, peeringName$$1, devicePath$$1, options) {
            return this.beginListRoutesTable(resourceGroupName$$1, circuitName$$1, peeringName$$1, devicePath$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Gets the currently advertised routes table summary associated with the express route circuit in
         * a resource group.
         * @param resourceGroupName The name of the resource group.
         * @param circuitName The name of the express route circuit.
         * @param peeringName The name of the peering.
         * @param devicePath The path of the device.
         * @param [options] The optional parameters
         * @returns Promise<Models.ExpressRouteCircuitsListRoutesTableSummaryResponse>
         */
        ExpressRouteCircuits.prototype.listRoutesTableSummary = function (resourceGroupName$$1, circuitName$$1, peeringName$$1, devicePath$$1, options) {
            return this.beginListRoutesTableSummary(resourceGroupName$$1, circuitName$$1, peeringName$$1, devicePath$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ExpressRouteCircuits.prototype.getStats = function (resourceGroupName$$1, circuitName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                circuitName: circuitName$$1,
                options: options
            }, getStatsOperationSpec, callback);
        };
        ExpressRouteCircuits.prototype.getPeeringStats = function (resourceGroupName$$1, circuitName$$1, peeringName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                circuitName: circuitName$$1,
                peeringName: peeringName$$1,
                options: options
            }, getPeeringStatsOperationSpec, callback);
        };
        ExpressRouteCircuits.prototype.list = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listOperationSpec$9, callback);
        };
        ExpressRouteCircuits.prototype.listAll = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listAllOperationSpec$4, callback);
        };
        /**
         * Deletes the specified express route circuit.
         * @param resourceGroupName The name of the resource group.
         * @param circuitName The name of the express route circuit.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ExpressRouteCircuits.prototype.beginDeleteMethod = function (resourceGroupName$$1, circuitName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                circuitName: circuitName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$7, options);
        };
        /**
         * Creates or updates an express route circuit.
         * @param resourceGroupName The name of the resource group.
         * @param circuitName The name of the circuit.
         * @param parameters Parameters supplied to the create or update express route circuit operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ExpressRouteCircuits.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, circuitName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                circuitName: circuitName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$7, options);
        };
        /**
         * Updates an express route circuit tags.
         * @param resourceGroupName The name of the resource group.
         * @param circuitName The name of the circuit.
         * @param parameters Parameters supplied to update express route circuit tags.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ExpressRouteCircuits.prototype.beginUpdateTags = function (resourceGroupName$$1, circuitName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                circuitName: circuitName$$1,
                parameters: parameters,
                options: options
            }, beginUpdateTagsOperationSpec$1, options);
        };
        /**
         * Gets the currently advertised ARP table associated with the express route circuit in a resource
         * group.
         * @param resourceGroupName The name of the resource group.
         * @param circuitName The name of the express route circuit.
         * @param peeringName The name of the peering.
         * @param devicePath The path of the device.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ExpressRouteCircuits.prototype.beginListArpTable = function (resourceGroupName$$1, circuitName$$1, peeringName$$1, devicePath$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                circuitName: circuitName$$1,
                peeringName: peeringName$$1,
                devicePath: devicePath$$1,
                options: options
            }, beginListArpTableOperationSpec, options);
        };
        /**
         * Gets the currently advertised routes table associated with the express route circuit in a
         * resource group.
         * @param resourceGroupName The name of the resource group.
         * @param circuitName The name of the express route circuit.
         * @param peeringName The name of the peering.
         * @param devicePath The path of the device.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ExpressRouteCircuits.prototype.beginListRoutesTable = function (resourceGroupName$$1, circuitName$$1, peeringName$$1, devicePath$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                circuitName: circuitName$$1,
                peeringName: peeringName$$1,
                devicePath: devicePath$$1,
                options: options
            }, beginListRoutesTableOperationSpec, options);
        };
        /**
         * Gets the currently advertised routes table summary associated with the express route circuit in
         * a resource group.
         * @param resourceGroupName The name of the resource group.
         * @param circuitName The name of the express route circuit.
         * @param peeringName The name of the peering.
         * @param devicePath The path of the device.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ExpressRouteCircuits.prototype.beginListRoutesTableSummary = function (resourceGroupName$$1, circuitName$$1, peeringName$$1, devicePath$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                circuitName: circuitName$$1,
                peeringName: peeringName$$1,
                devicePath: devicePath$$1,
                options: options
            }, beginListRoutesTableSummaryOperationSpec, options);
        };
        ExpressRouteCircuits.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$9, callback);
        };
        ExpressRouteCircuits.prototype.listAllNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listAllNextOperationSpec$4, callback);
        };
        return ExpressRouteCircuits;
    }());
    // Operation Specifications
    var serializer$b = new msRest.Serializer(Mappers$c);
    var getOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}",
        urlParameters: [
            resourceGroupName,
            circuitName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExpressRouteCircuit
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var getStatsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/stats",
        urlParameters: [
            resourceGroupName,
            circuitName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExpressRouteCircuitStats
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var getPeeringStatsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}/stats",
        urlParameters: [
            resourceGroupName,
            circuitName,
            peeringName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExpressRouteCircuitStats
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var listOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExpressRouteCircuitListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var listAllOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/expressRouteCircuits",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExpressRouteCircuitListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var beginDeleteMethodOperationSpec$7 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}",
        urlParameters: [
            resourceGroupName,
            circuitName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var beginCreateOrUpdateOperationSpec$7 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}",
        urlParameters: [
            resourceGroupName,
            circuitName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ExpressRouteCircuit, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ExpressRouteCircuit
            },
            201: {
                bodyMapper: ExpressRouteCircuit
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var beginUpdateTagsOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}",
        urlParameters: [
            resourceGroupName,
            circuitName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, TagsObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ExpressRouteCircuit
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var beginListArpTableOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}/arpTables/{devicePath}",
        urlParameters: [
            resourceGroupName,
            circuitName,
            peeringName,
            devicePath,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExpressRouteCircuitsArpTableListResult
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var beginListRoutesTableOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}/routeTables/{devicePath}",
        urlParameters: [
            resourceGroupName,
            circuitName,
            peeringName,
            devicePath,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExpressRouteCircuitsRoutesTableListResult
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var beginListRoutesTableSummaryOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}/routeTablesSummary/{devicePath}",
        urlParameters: [
            resourceGroupName,
            circuitName,
            peeringName,
            devicePath,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExpressRouteCircuitsRoutesTableSummaryListResult
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var listNextOperationSpec$9 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExpressRouteCircuitListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var listAllNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExpressRouteCircuitListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$d = /*#__PURE__*/Object.freeze({
        ExpressRouteServiceProviderListResult: ExpressRouteServiceProviderListResult,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        Resource: Resource,
        BaseResource: BaseResource,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        CloudError: CloudError,
        SubResource: SubResource,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        SecurityRule: SecurityRule,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        NetworkInterface: NetworkInterface,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        FrontendIPConfiguration: FrontendIPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        IPConfiguration: IPConfiguration,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ExpressRouteServiceProviders. */
    var ExpressRouteServiceProviders = /** @class */ (function () {
        /**
         * Create a ExpressRouteServiceProviders.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function ExpressRouteServiceProviders(client) {
            this.client = client;
        }
        ExpressRouteServiceProviders.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$a, callback);
        };
        ExpressRouteServiceProviders.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$a, callback);
        };
        return ExpressRouteServiceProviders;
    }());
    // Operation Specifications
    var serializer$c = new msRest.Serializer(Mappers$d);
    var listOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/expressRouteServiceProviders",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExpressRouteServiceProviderListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var listNextOperationSpec$a = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExpressRouteServiceProviderListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$e = /*#__PURE__*/Object.freeze({
        ExpressRouteCrossConnectionListResult: ExpressRouteCrossConnectionListResult,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        Resource: Resource,
        BaseResource: BaseResource,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        SubResource: SubResource,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        RouteFilter: RouteFilter,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        CloudError: CloudError,
        TagsObject: TagsObject,
        ExpressRouteCircuitsArpTableListResult: ExpressRouteCircuitsArpTableListResult,
        ExpressRouteCircuitArpTable: ExpressRouteCircuitArpTable,
        ExpressRouteCrossConnectionsRoutesTableSummaryListResult: ExpressRouteCrossConnectionsRoutesTableSummaryListResult,
        ExpressRouteCrossConnectionRoutesTableSummary: ExpressRouteCrossConnectionRoutesTableSummary,
        ExpressRouteCircuitsRoutesTableListResult: ExpressRouteCircuitsRoutesTableListResult,
        ExpressRouteCircuitRoutesTable: ExpressRouteCircuitRoutesTable,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        FrontendIPConfiguration: FrontendIPConfiguration,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ExpressRouteCrossConnections. */
    var ExpressRouteCrossConnections = /** @class */ (function () {
        /**
         * Create a ExpressRouteCrossConnections.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function ExpressRouteCrossConnections(client) {
            this.client = client;
        }
        ExpressRouteCrossConnections.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$b, callback);
        };
        ExpressRouteCrossConnections.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec$1, callback);
        };
        ExpressRouteCrossConnections.prototype.get = function (resourceGroupName$$1, crossConnectionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                crossConnectionName: crossConnectionName$$1,
                options: options
            }, getOperationSpec$8, callback);
        };
        /**
         * Update the specified ExpressRouteCrossConnection.
         * @param resourceGroupName The name of the resource group.
         * @param crossConnectionName The name of the ExpressRouteCrossConnection.
         * @param parameters Parameters supplied to the update express route crossConnection operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.ExpressRouteCrossConnectionsCreateOrUpdateResponse>
         */
        ExpressRouteCrossConnections.prototype.createOrUpdate = function (resourceGroupName$$1, crossConnectionName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, crossConnectionName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates an express route cross connection tags.
         * @param resourceGroupName The name of the resource group.
         * @param crossConnectionName The name of the cross connection.
         * @param crossConnectionParameters Parameters supplied to update express route cross connection
         * tags.
         * @param [options] The optional parameters
         * @returns Promise<Models.ExpressRouteCrossConnectionsUpdateTagsResponse>
         */
        ExpressRouteCrossConnections.prototype.updateTags = function (resourceGroupName$$1, crossConnectionName$$1, crossConnectionParameters, options) {
            return this.beginUpdateTags(resourceGroupName$$1, crossConnectionName$$1, crossConnectionParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Gets the currently advertised ARP table associated with the express route cross connection in a
         * resource group.
         * @param resourceGroupName The name of the resource group.
         * @param crossConnectionName The name of the ExpressRouteCrossConnection.
         * @param peeringName The name of the peering.
         * @param devicePath The path of the device
         * @param [options] The optional parameters
         * @returns Promise<Models.ExpressRouteCrossConnectionsListArpTableResponse>
         */
        ExpressRouteCrossConnections.prototype.listArpTable = function (resourceGroupName$$1, crossConnectionName$$1, peeringName$$1, devicePath$$1, options) {
            return this.beginListArpTable(resourceGroupName$$1, crossConnectionName$$1, peeringName$$1, devicePath$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Gets the route table summary associated with the express route cross connection in a resource
         * group.
         * @param resourceGroupName The name of the resource group.
         * @param crossConnectionName The name of the ExpressRouteCrossConnection.
         * @param peeringName The name of the peering.
         * @param devicePath The path of the device.
         * @param [options] The optional parameters
         * @returns Promise<Models.ExpressRouteCrossConnectionsListRoutesTableSummaryResponse>
         */
        ExpressRouteCrossConnections.prototype.listRoutesTableSummary = function (resourceGroupName$$1, crossConnectionName$$1, peeringName$$1, devicePath$$1, options) {
            return this.beginListRoutesTableSummary(resourceGroupName$$1, crossConnectionName$$1, peeringName$$1, devicePath$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Gets the currently advertised routes table associated with the express route cross connection in
         * a resource group.
         * @param resourceGroupName The name of the resource group.
         * @param crossConnectionName The name of the ExpressRouteCrossConnection.
         * @param peeringName The name of the peering.
         * @param devicePath The path of the device.
         * @param [options] The optional parameters
         * @returns Promise<Models.ExpressRouteCrossConnectionsListRoutesTableResponse>
         */
        ExpressRouteCrossConnections.prototype.listRoutesTable = function (resourceGroupName$$1, crossConnectionName$$1, peeringName$$1, devicePath$$1, options) {
            return this.beginListRoutesTable(resourceGroupName$$1, crossConnectionName$$1, peeringName$$1, devicePath$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Update the specified ExpressRouteCrossConnection.
         * @param resourceGroupName The name of the resource group.
         * @param crossConnectionName The name of the ExpressRouteCrossConnection.
         * @param parameters Parameters supplied to the update express route crossConnection operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ExpressRouteCrossConnections.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, crossConnectionName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                crossConnectionName: crossConnectionName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$8, options);
        };
        /**
         * Updates an express route cross connection tags.
         * @param resourceGroupName The name of the resource group.
         * @param crossConnectionName The name of the cross connection.
         * @param crossConnectionParameters Parameters supplied to update express route cross connection
         * tags.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ExpressRouteCrossConnections.prototype.beginUpdateTags = function (resourceGroupName$$1, crossConnectionName$$1, crossConnectionParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                crossConnectionName: crossConnectionName$$1,
                crossConnectionParameters: crossConnectionParameters,
                options: options
            }, beginUpdateTagsOperationSpec$2, options);
        };
        /**
         * Gets the currently advertised ARP table associated with the express route cross connection in a
         * resource group.
         * @param resourceGroupName The name of the resource group.
         * @param crossConnectionName The name of the ExpressRouteCrossConnection.
         * @param peeringName The name of the peering.
         * @param devicePath The path of the device
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ExpressRouteCrossConnections.prototype.beginListArpTable = function (resourceGroupName$$1, crossConnectionName$$1, peeringName$$1, devicePath$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                crossConnectionName: crossConnectionName$$1,
                peeringName: peeringName$$1,
                devicePath: devicePath$$1,
                options: options
            }, beginListArpTableOperationSpec$1, options);
        };
        /**
         * Gets the route table summary associated with the express route cross connection in a resource
         * group.
         * @param resourceGroupName The name of the resource group.
         * @param crossConnectionName The name of the ExpressRouteCrossConnection.
         * @param peeringName The name of the peering.
         * @param devicePath The path of the device.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ExpressRouteCrossConnections.prototype.beginListRoutesTableSummary = function (resourceGroupName$$1, crossConnectionName$$1, peeringName$$1, devicePath$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                crossConnectionName: crossConnectionName$$1,
                peeringName: peeringName$$1,
                devicePath: devicePath$$1,
                options: options
            }, beginListRoutesTableSummaryOperationSpec$1, options);
        };
        /**
         * Gets the currently advertised routes table associated with the express route cross connection in
         * a resource group.
         * @param resourceGroupName The name of the resource group.
         * @param crossConnectionName The name of the ExpressRouteCrossConnection.
         * @param peeringName The name of the peering.
         * @param devicePath The path of the device.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ExpressRouteCrossConnections.prototype.beginListRoutesTable = function (resourceGroupName$$1, crossConnectionName$$1, peeringName$$1, devicePath$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                crossConnectionName: crossConnectionName$$1,
                peeringName: peeringName$$1,
                devicePath: devicePath$$1,
                options: options
            }, beginListRoutesTableOperationSpec$1, options);
        };
        ExpressRouteCrossConnections.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$b, callback);
        };
        ExpressRouteCrossConnections.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec$1, callback);
        };
        return ExpressRouteCrossConnections;
    }());
    // Operation Specifications
    var serializer$d = new msRest.Serializer(Mappers$e);
    var listOperationSpec$b = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/expressRouteCrossConnections",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExpressRouteCrossConnectionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var listByResourceGroupOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExpressRouteCrossConnectionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var getOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}",
        urlParameters: [
            resourceGroupName,
            crossConnectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExpressRouteCrossConnection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var beginCreateOrUpdateOperationSpec$8 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}",
        urlParameters: [
            resourceGroupName,
            crossConnectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ExpressRouteCrossConnection, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ExpressRouteCrossConnection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var beginUpdateTagsOperationSpec$2 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}",
        urlParameters: [
            resourceGroupName,
            crossConnectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "crossConnectionParameters",
            mapper: __assign({}, TagsObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ExpressRouteCrossConnection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var beginListArpTableOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}/peerings/{peeringName}/arpTables/{devicePath}",
        urlParameters: [
            resourceGroupName,
            crossConnectionName,
            peeringName,
            devicePath,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExpressRouteCircuitsArpTableListResult
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var beginListRoutesTableSummaryOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}/peerings/{peeringName}/routeTablesSummary/{devicePath}",
        urlParameters: [
            resourceGroupName,
            crossConnectionName,
            peeringName,
            devicePath,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExpressRouteCrossConnectionsRoutesTableSummaryListResult
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var beginListRoutesTableOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}/peerings/{peeringName}/routeTables/{devicePath}",
        urlParameters: [
            resourceGroupName,
            crossConnectionName,
            peeringName,
            devicePath,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExpressRouteCircuitsRoutesTableListResult
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var listNextOperationSpec$b = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExpressRouteCrossConnectionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var listByResourceGroupNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExpressRouteCrossConnectionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$f = /*#__PURE__*/Object.freeze({
        ExpressRouteCrossConnectionPeeringList: ExpressRouteCrossConnectionPeeringList,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        SubResource: SubResource,
        BaseResource: BaseResource,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        RouteFilter: RouteFilter,
        Resource: Resource,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        CloudError: CloudError,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        FrontendIPConfiguration: FrontendIPConfiguration,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ExpressRouteCrossConnectionPeerings. */
    var ExpressRouteCrossConnectionPeerings = /** @class */ (function () {
        /**
         * Create a ExpressRouteCrossConnectionPeerings.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function ExpressRouteCrossConnectionPeerings(client) {
            this.client = client;
        }
        ExpressRouteCrossConnectionPeerings.prototype.list = function (resourceGroupName$$1, crossConnectionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                crossConnectionName: crossConnectionName$$1,
                options: options
            }, listOperationSpec$c, callback);
        };
        /**
         * Deletes the specified peering from the ExpressRouteCrossConnection.
         * @param resourceGroupName The name of the resource group.
         * @param crossConnectionName The name of the ExpressRouteCrossConnection.
         * @param peeringName The name of the peering.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ExpressRouteCrossConnectionPeerings.prototype.deleteMethod = function (resourceGroupName$$1, crossConnectionName$$1, peeringName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, crossConnectionName$$1, peeringName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ExpressRouteCrossConnectionPeerings.prototype.get = function (resourceGroupName$$1, crossConnectionName$$1, peeringName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                crossConnectionName: crossConnectionName$$1,
                peeringName: peeringName$$1,
                options: options
            }, getOperationSpec$9, callback);
        };
        /**
         * Creates or updates a peering in the specified ExpressRouteCrossConnection.
         * @param resourceGroupName The name of the resource group.
         * @param crossConnectionName The name of the ExpressRouteCrossConnection.
         * @param peeringName The name of the peering.
         * @param peeringParameters Parameters supplied to the create or update ExpressRouteCrossConnection
         * peering operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.ExpressRouteCrossConnectionPeeringsCreateOrUpdateResponse>
         */
        ExpressRouteCrossConnectionPeerings.prototype.createOrUpdate = function (resourceGroupName$$1, crossConnectionName$$1, peeringName$$1, peeringParameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, crossConnectionName$$1, peeringName$$1, peeringParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the specified peering from the ExpressRouteCrossConnection.
         * @param resourceGroupName The name of the resource group.
         * @param crossConnectionName The name of the ExpressRouteCrossConnection.
         * @param peeringName The name of the peering.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ExpressRouteCrossConnectionPeerings.prototype.beginDeleteMethod = function (resourceGroupName$$1, crossConnectionName$$1, peeringName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                crossConnectionName: crossConnectionName$$1,
                peeringName: peeringName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$8, options);
        };
        /**
         * Creates or updates a peering in the specified ExpressRouteCrossConnection.
         * @param resourceGroupName The name of the resource group.
         * @param crossConnectionName The name of the ExpressRouteCrossConnection.
         * @param peeringName The name of the peering.
         * @param peeringParameters Parameters supplied to the create or update ExpressRouteCrossConnection
         * peering operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ExpressRouteCrossConnectionPeerings.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, crossConnectionName$$1, peeringName$$1, peeringParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                crossConnectionName: crossConnectionName$$1,
                peeringName: peeringName$$1,
                peeringParameters: peeringParameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$9, options);
        };
        ExpressRouteCrossConnectionPeerings.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$c, callback);
        };
        return ExpressRouteCrossConnectionPeerings;
    }());
    // Operation Specifications
    var serializer$e = new msRest.Serializer(Mappers$f);
    var listOperationSpec$c = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}/peerings",
        urlParameters: [
            resourceGroupName,
            crossConnectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExpressRouteCrossConnectionPeeringList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var getOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}/peerings/{peeringName}",
        urlParameters: [
            resourceGroupName,
            crossConnectionName,
            peeringName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExpressRouteCrossConnectionPeering
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var beginDeleteMethodOperationSpec$8 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}/peerings/{peeringName}",
        urlParameters: [
            resourceGroupName,
            crossConnectionName,
            peeringName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var beginCreateOrUpdateOperationSpec$9 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}/peerings/{peeringName}",
        urlParameters: [
            resourceGroupName,
            crossConnectionName,
            peeringName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "peeringParameters",
            mapper: __assign({}, ExpressRouteCrossConnectionPeering, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ExpressRouteCrossConnectionPeering
            },
            201: {
                bodyMapper: ExpressRouteCrossConnectionPeering
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var listNextOperationSpec$c = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExpressRouteCrossConnectionPeeringList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$g = /*#__PURE__*/Object.freeze({
        ExpressRouteGatewayList: ExpressRouteGatewayList,
        ExpressRouteGateway: ExpressRouteGateway,
        Resource: Resource,
        BaseResource: BaseResource,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        ExpressRouteConnection: ExpressRouteConnection,
        SubResource: SubResource,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        VirtualHubId: VirtualHubId,
        CloudError: CloudError,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        FrontendIPConfiguration: FrontendIPConfiguration,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ExpressRouteGateways. */
    var ExpressRouteGateways = /** @class */ (function () {
        /**
         * Create a ExpressRouteGateways.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function ExpressRouteGateways(client) {
            this.client = client;
        }
        ExpressRouteGateways.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec, callback);
        };
        ExpressRouteGateways.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec$2, callback);
        };
        /**
         * Creates or updates a ExpressRoute gateway in a specified resource group.
         * @param resourceGroupName The name of the resource group.
         * @param expressRouteGatewayName The name of the ExpressRoute gateway.
         * @param putExpressRouteGatewayParameters Parameters required in an ExpressRoute gateway PUT
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.ExpressRouteGatewaysCreateOrUpdateResponse>
         */
        ExpressRouteGateways.prototype.createOrUpdate = function (resourceGroupName$$1, expressRouteGatewayName$$1, putExpressRouteGatewayParameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, expressRouteGatewayName$$1, putExpressRouteGatewayParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ExpressRouteGateways.prototype.get = function (resourceGroupName$$1, expressRouteGatewayName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                expressRouteGatewayName: expressRouteGatewayName$$1,
                options: options
            }, getOperationSpec$a, callback);
        };
        /**
         * Deletes the specified ExpressRoute gateway in a resource group. An ExpressRoute gateway resource
         * can only be deleted when there are no connection subresources.
         * @param resourceGroupName The name of the resource group.
         * @param expressRouteGatewayName The name of the ExpressRoute gateway.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ExpressRouteGateways.prototype.deleteMethod = function (resourceGroupName$$1, expressRouteGatewayName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, expressRouteGatewayName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates a ExpressRoute gateway in a specified resource group.
         * @param resourceGroupName The name of the resource group.
         * @param expressRouteGatewayName The name of the ExpressRoute gateway.
         * @param putExpressRouteGatewayParameters Parameters required in an ExpressRoute gateway PUT
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ExpressRouteGateways.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, expressRouteGatewayName$$1, putExpressRouteGatewayParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                expressRouteGatewayName: expressRouteGatewayName$$1,
                putExpressRouteGatewayParameters: putExpressRouteGatewayParameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$a, options);
        };
        /**
         * Deletes the specified ExpressRoute gateway in a resource group. An ExpressRoute gateway resource
         * can only be deleted when there are no connection subresources.
         * @param resourceGroupName The name of the resource group.
         * @param expressRouteGatewayName The name of the ExpressRoute gateway.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ExpressRouteGateways.prototype.beginDeleteMethod = function (resourceGroupName$$1, expressRouteGatewayName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                expressRouteGatewayName: expressRouteGatewayName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$9, options);
        };
        return ExpressRouteGateways;
    }());
    // Operation Specifications
    var serializer$f = new msRest.Serializer(Mappers$g);
    var listBySubscriptionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/expressRouteGateways",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExpressRouteGatewayList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };
    var listByResourceGroupOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteGateways",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExpressRouteGatewayList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };
    var getOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteGateways/{expressRouteGatewayName}",
        urlParameters: [
            resourceGroupName,
            expressRouteGatewayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExpressRouteGateway
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };
    var beginCreateOrUpdateOperationSpec$a = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteGateways/{expressRouteGatewayName}",
        urlParameters: [
            resourceGroupName,
            expressRouteGatewayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "putExpressRouteGatewayParameters",
            mapper: __assign({}, ExpressRouteGateway, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ExpressRouteGateway
            },
            201: {
                bodyMapper: ExpressRouteGateway
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };
    var beginDeleteMethodOperationSpec$9 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteGateways/{expressRouteGatewayName}",
        urlParameters: [
            resourceGroupName,
            expressRouteGatewayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$h = /*#__PURE__*/Object.freeze({
        ExpressRouteConnection: ExpressRouteConnection,
        SubResource: SubResource,
        BaseResource: BaseResource,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        CloudError: CloudError,
        ExpressRouteConnectionList: ExpressRouteConnectionList,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        Resource: Resource,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        FrontendIPConfiguration: FrontendIPConfiguration,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ExpressRouteConnections. */
    var ExpressRouteConnections = /** @class */ (function () {
        /**
         * Create a ExpressRouteConnections.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function ExpressRouteConnections(client) {
            this.client = client;
        }
        /**
         * Creates a connection between an ExpressRoute gateway and an ExpressRoute circuit.
         * @param resourceGroupName The name of the resource group.
         * @param expressRouteGatewayName The name of the ExpressRoute gateway.
         * @param connectionName The name of the connection subresource.
         * @param putExpressRouteConnectionParameters Parameters required in an ExpressRouteConnection PUT
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.ExpressRouteConnectionsCreateOrUpdateResponse>
         */
        ExpressRouteConnections.prototype.createOrUpdate = function (resourceGroupName$$1, expressRouteGatewayName$$1, connectionName$$1, putExpressRouteConnectionParameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, expressRouteGatewayName$$1, connectionName$$1, putExpressRouteConnectionParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ExpressRouteConnections.prototype.get = function (resourceGroupName$$1, expressRouteGatewayName$$1, connectionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                expressRouteGatewayName: expressRouteGatewayName$$1,
                connectionName: connectionName$$1,
                options: options
            }, getOperationSpec$b, callback);
        };
        /**
         * Deletes a connection to a ExpressRoute circuit.
         * @param resourceGroupName The name of the resource group.
         * @param expressRouteGatewayName The name of the ExpressRoute gateway.
         * @param connectionName The name of the connection subresource.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ExpressRouteConnections.prototype.deleteMethod = function (resourceGroupName$$1, expressRouteGatewayName$$1, connectionName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, expressRouteGatewayName$$1, connectionName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ExpressRouteConnections.prototype.list = function (resourceGroupName$$1, expressRouteGatewayName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                expressRouteGatewayName: expressRouteGatewayName$$1,
                options: options
            }, listOperationSpec$d, callback);
        };
        /**
         * Creates a connection between an ExpressRoute gateway and an ExpressRoute circuit.
         * @param resourceGroupName The name of the resource group.
         * @param expressRouteGatewayName The name of the ExpressRoute gateway.
         * @param connectionName The name of the connection subresource.
         * @param putExpressRouteConnectionParameters Parameters required in an ExpressRouteConnection PUT
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ExpressRouteConnections.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, expressRouteGatewayName$$1, connectionName$$1, putExpressRouteConnectionParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                expressRouteGatewayName: expressRouteGatewayName$$1,
                connectionName: connectionName$$1,
                putExpressRouteConnectionParameters: putExpressRouteConnectionParameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$b, options);
        };
        /**
         * Deletes a connection to a ExpressRoute circuit.
         * @param resourceGroupName The name of the resource group.
         * @param expressRouteGatewayName The name of the ExpressRoute gateway.
         * @param connectionName The name of the connection subresource.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ExpressRouteConnections.prototype.beginDeleteMethod = function (resourceGroupName$$1, expressRouteGatewayName$$1, connectionName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                expressRouteGatewayName: expressRouteGatewayName$$1,
                connectionName: connectionName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$a, options);
        };
        return ExpressRouteConnections;
    }());
    // Operation Specifications
    var serializer$g = new msRest.Serializer(Mappers$h);
    var getOperationSpec$b = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteGateways/{expressRouteGatewayName}/expressRouteConnections/{connectionName}",
        urlParameters: [
            resourceGroupName,
            expressRouteGatewayName,
            connectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExpressRouteConnection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var listOperationSpec$d = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteGateways/{expressRouteGatewayName}/expressRouteConnections",
        urlParameters: [
            resourceGroupName,
            expressRouteGatewayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExpressRouteConnectionList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var beginCreateOrUpdateOperationSpec$b = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteGateways/{expressRouteGatewayName}/expressRouteConnections/{connectionName}",
        urlParameters: [
            resourceGroupName,
            expressRouteGatewayName,
            connectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "putExpressRouteConnectionParameters",
            mapper: __assign({}, ExpressRouteConnection, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ExpressRouteConnection
            },
            201: {
                bodyMapper: ExpressRouteConnection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var beginDeleteMethodOperationSpec$a = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteGateways/{expressRouteGatewayName}/expressRouteConnections/{connectionName}",
        urlParameters: [
            resourceGroupName,
            expressRouteGatewayName,
            connectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$i = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        InterfaceEndpoint: InterfaceEndpoint,
        Resource: Resource,
        BaseResource: BaseResource,
        EndpointService: EndpointService,
        Subnet: Subnet,
        SubResource: SubResource,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        FrontendIPConfiguration: FrontendIPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        IPConfiguration: IPConfiguration,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        InterfaceEndpointListResult: InterfaceEndpointListResult,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a InterfaceEndpoints. */
    var InterfaceEndpoints = /** @class */ (function () {
        /**
         * Create a InterfaceEndpoints.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function InterfaceEndpoints(client) {
            this.client = client;
        }
        /**
         * Deletes the specified interface endpoint.
         * @param resourceGroupName The name of the resource group.
         * @param interfaceEndpointName The name of the interface endpoint.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        InterfaceEndpoints.prototype.deleteMethod = function (resourceGroupName$$1, interfaceEndpointName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, interfaceEndpointName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        InterfaceEndpoints.prototype.get = function (resourceGroupName$$1, interfaceEndpointName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                interfaceEndpointName: interfaceEndpointName$$1,
                options: options
            }, getOperationSpec$c, callback);
        };
        /**
         * Creates or updates an interface endpoint in the specified resource group.
         * @param resourceGroupName The name of the resource group.
         * @param interfaceEndpointName The name of the interface endpoint.
         * @param parameters Parameters supplied to the create or update interface endpoint operation
         * @param [options] The optional parameters
         * @returns Promise<Models.InterfaceEndpointsCreateOrUpdateResponse>
         */
        InterfaceEndpoints.prototype.createOrUpdate = function (resourceGroupName$$1, interfaceEndpointName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, interfaceEndpointName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        InterfaceEndpoints.prototype.list = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listOperationSpec$e, callback);
        };
        InterfaceEndpoints.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec$1, callback);
        };
        /**
         * Deletes the specified interface endpoint.
         * @param resourceGroupName The name of the resource group.
         * @param interfaceEndpointName The name of the interface endpoint.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        InterfaceEndpoints.prototype.beginDeleteMethod = function (resourceGroupName$$1, interfaceEndpointName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                interfaceEndpointName: interfaceEndpointName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$b, options);
        };
        /**
         * Creates or updates an interface endpoint in the specified resource group.
         * @param resourceGroupName The name of the resource group.
         * @param interfaceEndpointName The name of the interface endpoint.
         * @param parameters Parameters supplied to the create or update interface endpoint operation
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        InterfaceEndpoints.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, interfaceEndpointName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                interfaceEndpointName: interfaceEndpointName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$c, options);
        };
        InterfaceEndpoints.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$d, callback);
        };
        InterfaceEndpoints.prototype.listBySubscriptionNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listBySubscriptionNextOperationSpec, callback);
        };
        return InterfaceEndpoints;
    }());
    // Operation Specifications
    var serializer$h = new msRest.Serializer(Mappers$i);
    var getOperationSpec$c = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/interfaceEndpoints/{interfaceEndpointName}",
        urlParameters: [
            resourceGroupName,
            interfaceEndpointName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0,
            expand
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: InterfaceEndpoint
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var listOperationSpec$e = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/interfaceEndpoints",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: InterfaceEndpointListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var listBySubscriptionOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/interfaceEndpoints",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: InterfaceEndpointListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var beginDeleteMethodOperationSpec$b = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/interfaceEndpoints/{interfaceEndpointName}",
        urlParameters: [
            resourceGroupName,
            interfaceEndpointName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var beginCreateOrUpdateOperationSpec$c = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/interfaceEndpoints/{interfaceEndpointName}",
        urlParameters: [
            resourceGroupName,
            interfaceEndpointName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, InterfaceEndpoint, { required: true })
        },
        responses: {
            200: {
                bodyMapper: InterfaceEndpoint
            },
            201: {
                bodyMapper: InterfaceEndpoint
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var listNextOperationSpec$d = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: InterfaceEndpointListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var listBySubscriptionNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: InterfaceEndpointListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$j = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        LoadBalancer: LoadBalancer,
        Resource: Resource,
        BaseResource: BaseResource,
        LoadBalancerSku: LoadBalancerSku,
        FrontendIPConfiguration: FrontendIPConfiguration,
        SubResource: SubResource,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        IPConfiguration: IPConfiguration,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        TagsObject: TagsObject,
        LoadBalancerListResult: LoadBalancerListResult,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a LoadBalancers. */
    var LoadBalancers = /** @class */ (function () {
        /**
         * Create a LoadBalancers.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function LoadBalancers(client) {
            this.client = client;
        }
        /**
         * Deletes the specified load balancer.
         * @param resourceGroupName The name of the resource group.
         * @param loadBalancerName The name of the load balancer.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        LoadBalancers.prototype.deleteMethod = function (resourceGroupName$$1, loadBalancerName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, loadBalancerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        LoadBalancers.prototype.get = function (resourceGroupName$$1, loadBalancerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                loadBalancerName: loadBalancerName$$1,
                options: options
            }, getOperationSpec$d, callback);
        };
        /**
         * Creates or updates a load balancer.
         * @param resourceGroupName The name of the resource group.
         * @param loadBalancerName The name of the load balancer.
         * @param parameters Parameters supplied to the create or update load balancer operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.LoadBalancersCreateOrUpdateResponse>
         */
        LoadBalancers.prototype.createOrUpdate = function (resourceGroupName$$1, loadBalancerName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, loadBalancerName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a load balancer tags.
         * @param resourceGroupName The name of the resource group.
         * @param loadBalancerName The name of the load balancer.
         * @param parameters Parameters supplied to update load balancer tags.
         * @param [options] The optional parameters
         * @returns Promise<Models.LoadBalancersUpdateTagsResponse>
         */
        LoadBalancers.prototype.updateTags = function (resourceGroupName$$1, loadBalancerName$$1, parameters, options) {
            return this.beginUpdateTags(resourceGroupName$$1, loadBalancerName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        LoadBalancers.prototype.listAll = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listAllOperationSpec$5, callback);
        };
        LoadBalancers.prototype.list = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listOperationSpec$f, callback);
        };
        /**
         * Deletes the specified load balancer.
         * @param resourceGroupName The name of the resource group.
         * @param loadBalancerName The name of the load balancer.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        LoadBalancers.prototype.beginDeleteMethod = function (resourceGroupName$$1, loadBalancerName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                loadBalancerName: loadBalancerName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$c, options);
        };
        /**
         * Creates or updates a load balancer.
         * @param resourceGroupName The name of the resource group.
         * @param loadBalancerName The name of the load balancer.
         * @param parameters Parameters supplied to the create or update load balancer operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        LoadBalancers.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, loadBalancerName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                loadBalancerName: loadBalancerName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$d, options);
        };
        /**
         * Updates a load balancer tags.
         * @param resourceGroupName The name of the resource group.
         * @param loadBalancerName The name of the load balancer.
         * @param parameters Parameters supplied to update load balancer tags.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        LoadBalancers.prototype.beginUpdateTags = function (resourceGroupName$$1, loadBalancerName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                loadBalancerName: loadBalancerName$$1,
                parameters: parameters,
                options: options
            }, beginUpdateTagsOperationSpec$3, options);
        };
        LoadBalancers.prototype.listAllNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listAllNextOperationSpec$5, callback);
        };
        LoadBalancers.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$e, callback);
        };
        return LoadBalancers;
    }());
    // Operation Specifications
    var serializer$i = new msRest.Serializer(Mappers$j);
    var getOperationSpec$d = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}",
        urlParameters: [
            resourceGroupName,
            loadBalancerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0,
            expand
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LoadBalancer
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var listAllOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/loadBalancers",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LoadBalancerListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var listOperationSpec$f = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LoadBalancerListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var beginDeleteMethodOperationSpec$c = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}",
        urlParameters: [
            resourceGroupName,
            loadBalancerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var beginCreateOrUpdateOperationSpec$d = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}",
        urlParameters: [
            resourceGroupName,
            loadBalancerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, LoadBalancer, { required: true })
        },
        responses: {
            200: {
                bodyMapper: LoadBalancer
            },
            201: {
                bodyMapper: LoadBalancer
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var beginUpdateTagsOperationSpec$3 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}",
        urlParameters: [
            resourceGroupName,
            loadBalancerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, TagsObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: LoadBalancer
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var listAllNextOperationSpec$5 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LoadBalancerListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var listNextOperationSpec$e = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LoadBalancerListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$k = /*#__PURE__*/Object.freeze({
        LoadBalancerBackendAddressPoolListResult: LoadBalancerBackendAddressPoolListResult,
        BackendAddressPool: BackendAddressPool,
        SubResource: SubResource,
        BaseResource: BaseResource,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        Resource: Resource,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        FrontendIPConfiguration: FrontendIPConfiguration,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        InboundNatRule: InboundNatRule,
        CloudError: CloudError,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a LoadBalancerBackendAddressPools. */
    var LoadBalancerBackendAddressPools = /** @class */ (function () {
        /**
         * Create a LoadBalancerBackendAddressPools.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function LoadBalancerBackendAddressPools(client) {
            this.client = client;
        }
        LoadBalancerBackendAddressPools.prototype.list = function (resourceGroupName$$1, loadBalancerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                loadBalancerName: loadBalancerName$$1,
                options: options
            }, listOperationSpec$g, callback);
        };
        LoadBalancerBackendAddressPools.prototype.get = function (resourceGroupName$$1, loadBalancerName$$1, backendAddressPoolName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                loadBalancerName: loadBalancerName$$1,
                backendAddressPoolName: backendAddressPoolName$$1,
                options: options
            }, getOperationSpec$e, callback);
        };
        LoadBalancerBackendAddressPools.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$f, callback);
        };
        return LoadBalancerBackendAddressPools;
    }());
    // Operation Specifications
    var serializer$j = new msRest.Serializer(Mappers$k);
    var listOperationSpec$g = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/backendAddressPools",
        urlParameters: [
            resourceGroupName,
            loadBalancerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LoadBalancerBackendAddressPoolListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$j
    };
    var getOperationSpec$e = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/backendAddressPools/{backendAddressPoolName}",
        urlParameters: [
            resourceGroupName,
            loadBalancerName,
            backendAddressPoolName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackendAddressPool
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$j
    };
    var listNextOperationSpec$f = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LoadBalancerBackendAddressPoolListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$j
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$l = /*#__PURE__*/Object.freeze({
        LoadBalancerFrontendIPConfigurationListResult: LoadBalancerFrontendIPConfigurationListResult,
        FrontendIPConfiguration: FrontendIPConfiguration,
        SubResource: SubResource,
        BaseResource: BaseResource,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        Resource: Resource,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        IPConfiguration: IPConfiguration,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        CloudError: CloudError,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a LoadBalancerFrontendIPConfigurations. */
    var LoadBalancerFrontendIPConfigurations = /** @class */ (function () {
        /**
         * Create a LoadBalancerFrontendIPConfigurations.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function LoadBalancerFrontendIPConfigurations(client) {
            this.client = client;
        }
        LoadBalancerFrontendIPConfigurations.prototype.list = function (resourceGroupName$$1, loadBalancerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                loadBalancerName: loadBalancerName$$1,
                options: options
            }, listOperationSpec$h, callback);
        };
        LoadBalancerFrontendIPConfigurations.prototype.get = function (resourceGroupName$$1, loadBalancerName$$1, frontendIPConfigurationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                loadBalancerName: loadBalancerName$$1,
                frontendIPConfigurationName: frontendIPConfigurationName$$1,
                options: options
            }, getOperationSpec$f, callback);
        };
        LoadBalancerFrontendIPConfigurations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$g, callback);
        };
        return LoadBalancerFrontendIPConfigurations;
    }());
    // Operation Specifications
    var serializer$k = new msRest.Serializer(Mappers$l);
    var listOperationSpec$h = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/frontendIPConfigurations",
        urlParameters: [
            resourceGroupName,
            loadBalancerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LoadBalancerFrontendIPConfigurationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$k
    };
    var getOperationSpec$f = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/frontendIPConfigurations/{frontendIPConfigurationName}",
        urlParameters: [
            resourceGroupName,
            loadBalancerName,
            frontendIPConfigurationName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FrontendIPConfiguration
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$k
    };
    var listNextOperationSpec$g = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LoadBalancerFrontendIPConfigurationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$k
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$m = /*#__PURE__*/Object.freeze({
        InboundNatRuleListResult: InboundNatRuleListResult,
        InboundNatRule: InboundNatRule,
        SubResource: SubResource,
        BaseResource: BaseResource,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        Resource: Resource,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        FrontendIPConfiguration: FrontendIPConfiguration,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        CloudError: CloudError,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a InboundNatRules. */
    var InboundNatRules = /** @class */ (function () {
        /**
         * Create a InboundNatRules.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function InboundNatRules(client) {
            this.client = client;
        }
        InboundNatRules.prototype.list = function (resourceGroupName$$1, loadBalancerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                loadBalancerName: loadBalancerName$$1,
                options: options
            }, listOperationSpec$i, callback);
        };
        /**
         * Deletes the specified load balancer inbound nat rule.
         * @param resourceGroupName The name of the resource group.
         * @param loadBalancerName The name of the load balancer.
         * @param inboundNatRuleName The name of the inbound nat rule.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        InboundNatRules.prototype.deleteMethod = function (resourceGroupName$$1, loadBalancerName$$1, inboundNatRuleName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, loadBalancerName$$1, inboundNatRuleName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        InboundNatRules.prototype.get = function (resourceGroupName$$1, loadBalancerName$$1, inboundNatRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                loadBalancerName: loadBalancerName$$1,
                inboundNatRuleName: inboundNatRuleName$$1,
                options: options
            }, getOperationSpec$g, callback);
        };
        /**
         * Creates or updates a load balancer inbound nat rule.
         * @param resourceGroupName The name of the resource group.
         * @param loadBalancerName The name of the load balancer.
         * @param inboundNatRuleName The name of the inbound nat rule.
         * @param inboundNatRuleParameters Parameters supplied to the create or update inbound nat rule
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.InboundNatRulesCreateOrUpdateResponse>
         */
        InboundNatRules.prototype.createOrUpdate = function (resourceGroupName$$1, loadBalancerName$$1, inboundNatRuleName$$1, inboundNatRuleParameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, loadBalancerName$$1, inboundNatRuleName$$1, inboundNatRuleParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the specified load balancer inbound nat rule.
         * @param resourceGroupName The name of the resource group.
         * @param loadBalancerName The name of the load balancer.
         * @param inboundNatRuleName The name of the inbound nat rule.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        InboundNatRules.prototype.beginDeleteMethod = function (resourceGroupName$$1, loadBalancerName$$1, inboundNatRuleName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                loadBalancerName: loadBalancerName$$1,
                inboundNatRuleName: inboundNatRuleName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$d, options);
        };
        /**
         * Creates or updates a load balancer inbound nat rule.
         * @param resourceGroupName The name of the resource group.
         * @param loadBalancerName The name of the load balancer.
         * @param inboundNatRuleName The name of the inbound nat rule.
         * @param inboundNatRuleParameters Parameters supplied to the create or update inbound nat rule
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        InboundNatRules.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, loadBalancerName$$1, inboundNatRuleName$$1, inboundNatRuleParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                loadBalancerName: loadBalancerName$$1,
                inboundNatRuleName: inboundNatRuleName$$1,
                inboundNatRuleParameters: inboundNatRuleParameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$e, options);
        };
        InboundNatRules.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$h, callback);
        };
        return InboundNatRules;
    }());
    // Operation Specifications
    var serializer$l = new msRest.Serializer(Mappers$m);
    var listOperationSpec$i = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/inboundNatRules",
        urlParameters: [
            resourceGroupName,
            loadBalancerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: InboundNatRuleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$l
    };
    var getOperationSpec$g = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/inboundNatRules/{inboundNatRuleName}",
        urlParameters: [
            resourceGroupName,
            loadBalancerName,
            inboundNatRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0,
            expand
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: InboundNatRule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$l
    };
    var beginDeleteMethodOperationSpec$d = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/inboundNatRules/{inboundNatRuleName}",
        urlParameters: [
            resourceGroupName,
            loadBalancerName,
            inboundNatRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$l
    };
    var beginCreateOrUpdateOperationSpec$e = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/inboundNatRules/{inboundNatRuleName}",
        urlParameters: [
            resourceGroupName,
            loadBalancerName,
            inboundNatRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "inboundNatRuleParameters",
            mapper: __assign({}, InboundNatRule, { required: true })
        },
        responses: {
            200: {
                bodyMapper: InboundNatRule
            },
            201: {
                bodyMapper: InboundNatRule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$l
    };
    var listNextOperationSpec$h = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: InboundNatRuleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$l
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$n = /*#__PURE__*/Object.freeze({
        LoadBalancerLoadBalancingRuleListResult: LoadBalancerLoadBalancingRuleListResult,
        LoadBalancingRule: LoadBalancingRule,
        SubResource: SubResource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        Resource: Resource,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        FrontendIPConfiguration: FrontendIPConfiguration,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a LoadBalancerLoadBalancingRules. */
    var LoadBalancerLoadBalancingRules = /** @class */ (function () {
        /**
         * Create a LoadBalancerLoadBalancingRules.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function LoadBalancerLoadBalancingRules(client) {
            this.client = client;
        }
        LoadBalancerLoadBalancingRules.prototype.list = function (resourceGroupName$$1, loadBalancerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                loadBalancerName: loadBalancerName$$1,
                options: options
            }, listOperationSpec$j, callback);
        };
        LoadBalancerLoadBalancingRules.prototype.get = function (resourceGroupName$$1, loadBalancerName$$1, loadBalancingRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                loadBalancerName: loadBalancerName$$1,
                loadBalancingRuleName: loadBalancingRuleName$$1,
                options: options
            }, getOperationSpec$h, callback);
        };
        LoadBalancerLoadBalancingRules.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$i, callback);
        };
        return LoadBalancerLoadBalancingRules;
    }());
    // Operation Specifications
    var serializer$m = new msRest.Serializer(Mappers$n);
    var listOperationSpec$j = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/loadBalancingRules",
        urlParameters: [
            resourceGroupName,
            loadBalancerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LoadBalancerLoadBalancingRuleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$m
    };
    var getOperationSpec$h = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/loadBalancingRules/{loadBalancingRuleName}",
        urlParameters: [
            resourceGroupName,
            loadBalancerName,
            loadBalancingRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LoadBalancingRule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$m
    };
    var listNextOperationSpec$i = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LoadBalancerLoadBalancingRuleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$m
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$o = /*#__PURE__*/Object.freeze({
        NetworkInterfaceListResult: NetworkInterfaceListResult,
        NetworkInterface: NetworkInterface,
        Resource: Resource,
        BaseResource: BaseResource,
        SubResource: SubResource,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        Subnet: Subnet,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        FrontendIPConfiguration: FrontendIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        CloudError: CloudError,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a LoadBalancerNetworkInterfaces. */
    var LoadBalancerNetworkInterfaces = /** @class */ (function () {
        /**
         * Create a LoadBalancerNetworkInterfaces.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function LoadBalancerNetworkInterfaces(client) {
            this.client = client;
        }
        LoadBalancerNetworkInterfaces.prototype.list = function (resourceGroupName$$1, loadBalancerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                loadBalancerName: loadBalancerName$$1,
                options: options
            }, listOperationSpec$k, callback);
        };
        LoadBalancerNetworkInterfaces.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$j, callback);
        };
        return LoadBalancerNetworkInterfaces;
    }());
    // Operation Specifications
    var serializer$n = new msRest.Serializer(Mappers$o);
    var listOperationSpec$k = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/networkInterfaces",
        urlParameters: [
            resourceGroupName,
            loadBalancerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkInterfaceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$n
    };
    var listNextOperationSpec$j = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkInterfaceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$n
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$p = /*#__PURE__*/Object.freeze({
        LoadBalancerProbeListResult: LoadBalancerProbeListResult,
        Probe: Probe,
        SubResource: SubResource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        Resource: Resource,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        FrontendIPConfiguration: FrontendIPConfiguration,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a LoadBalancerProbes. */
    var LoadBalancerProbes = /** @class */ (function () {
        /**
         * Create a LoadBalancerProbes.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function LoadBalancerProbes(client) {
            this.client = client;
        }
        LoadBalancerProbes.prototype.list = function (resourceGroupName$$1, loadBalancerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                loadBalancerName: loadBalancerName$$1,
                options: options
            }, listOperationSpec$l, callback);
        };
        LoadBalancerProbes.prototype.get = function (resourceGroupName$$1, loadBalancerName$$1, probeName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                loadBalancerName: loadBalancerName$$1,
                probeName: probeName$$1,
                options: options
            }, getOperationSpec$i, callback);
        };
        LoadBalancerProbes.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$k, callback);
        };
        return LoadBalancerProbes;
    }());
    // Operation Specifications
    var serializer$o = new msRest.Serializer(Mappers$p);
    var listOperationSpec$l = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/probes",
        urlParameters: [
            resourceGroupName,
            loadBalancerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LoadBalancerProbeListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$o
    };
    var getOperationSpec$i = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/probes/{probeName}",
        urlParameters: [
            resourceGroupName,
            loadBalancerName,
            probeName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Probe
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$o
    };
    var listNextOperationSpec$k = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LoadBalancerProbeListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$o
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$q = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        NetworkInterface: NetworkInterface,
        Resource: Resource,
        BaseResource: BaseResource,
        SubResource: SubResource,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        Subnet: Subnet,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        FrontendIPConfiguration: FrontendIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        TagsObject: TagsObject,
        NetworkInterfaceListResult: NetworkInterfaceListResult,
        EffectiveRouteListResult: EffectiveRouteListResult,
        EffectiveRoute: EffectiveRoute,
        EffectiveNetworkSecurityGroupListResult: EffectiveNetworkSecurityGroupListResult,
        EffectiveNetworkSecurityGroup: EffectiveNetworkSecurityGroup,
        EffectiveNetworkSecurityGroupAssociation: EffectiveNetworkSecurityGroupAssociation,
        EffectiveNetworkSecurityRule: EffectiveNetworkSecurityRule,
        NetworkInterfaceIPConfigurationListResult: NetworkInterfaceIPConfigurationListResult,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a NetworkInterfaces. */
    var NetworkInterfaces = /** @class */ (function () {
        /**
         * Create a NetworkInterfaces.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function NetworkInterfaces(client) {
            this.client = client;
        }
        /**
         * Deletes the specified network interface.
         * @param resourceGroupName The name of the resource group.
         * @param networkInterfaceName The name of the network interface.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        NetworkInterfaces.prototype.deleteMethod = function (resourceGroupName$$1, networkInterfaceName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, networkInterfaceName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        NetworkInterfaces.prototype.get = function (resourceGroupName$$1, networkInterfaceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                networkInterfaceName: networkInterfaceName$$1,
                options: options
            }, getOperationSpec$j, callback);
        };
        /**
         * Creates or updates a network interface.
         * @param resourceGroupName The name of the resource group.
         * @param networkInterfaceName The name of the network interface.
         * @param parameters Parameters supplied to the create or update network interface operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.NetworkInterfacesCreateOrUpdateResponse>
         */
        NetworkInterfaces.prototype.createOrUpdate = function (resourceGroupName$$1, networkInterfaceName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, networkInterfaceName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a network interface tags.
         * @param resourceGroupName The name of the resource group.
         * @param networkInterfaceName The name of the network interface.
         * @param parameters Parameters supplied to update network interface tags.
         * @param [options] The optional parameters
         * @returns Promise<Models.NetworkInterfacesUpdateTagsResponse>
         */
        NetworkInterfaces.prototype.updateTags = function (resourceGroupName$$1, networkInterfaceName$$1, parameters, options) {
            return this.beginUpdateTags(resourceGroupName$$1, networkInterfaceName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        NetworkInterfaces.prototype.listAll = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listAllOperationSpec$6, callback);
        };
        NetworkInterfaces.prototype.list = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listOperationSpec$m, callback);
        };
        /**
         * Gets all route tables applied to a network interface.
         * @param resourceGroupName The name of the resource group.
         * @param networkInterfaceName The name of the network interface.
         * @param [options] The optional parameters
         * @returns Promise<Models.NetworkInterfacesGetEffectiveRouteTableResponse>
         */
        NetworkInterfaces.prototype.getEffectiveRouteTable = function (resourceGroupName$$1, networkInterfaceName$$1, options) {
            return this.beginGetEffectiveRouteTable(resourceGroupName$$1, networkInterfaceName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Gets all network security groups applied to a network interface.
         * @param resourceGroupName The name of the resource group.
         * @param networkInterfaceName The name of the network interface.
         * @param [options] The optional parameters
         * @returns Promise<Models.NetworkInterfacesListEffectiveNetworkSecurityGroupsResponse>
         */
        NetworkInterfaces.prototype.listEffectiveNetworkSecurityGroups = function (resourceGroupName$$1, networkInterfaceName$$1, options) {
            return this.beginListEffectiveNetworkSecurityGroups(resourceGroupName$$1, networkInterfaceName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        NetworkInterfaces.prototype.listVirtualMachineScaleSetVMNetworkInterfaces = function (resourceGroupName$$1, virtualMachineScaleSetName$$1, virtualmachineIndex$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                virtualMachineScaleSetName: virtualMachineScaleSetName$$1,
                virtualmachineIndex: virtualmachineIndex$$1,
                options: options
            }, listVirtualMachineScaleSetVMNetworkInterfacesOperationSpec, callback);
        };
        NetworkInterfaces.prototype.listVirtualMachineScaleSetNetworkInterfaces = function (resourceGroupName$$1, virtualMachineScaleSetName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                virtualMachineScaleSetName: virtualMachineScaleSetName$$1,
                options: options
            }, listVirtualMachineScaleSetNetworkInterfacesOperationSpec, callback);
        };
        NetworkInterfaces.prototype.getVirtualMachineScaleSetNetworkInterface = function (resourceGroupName$$1, virtualMachineScaleSetName$$1, virtualmachineIndex$$1, networkInterfaceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                virtualMachineScaleSetName: virtualMachineScaleSetName$$1,
                virtualmachineIndex: virtualmachineIndex$$1,
                networkInterfaceName: networkInterfaceName$$1,
                options: options
            }, getVirtualMachineScaleSetNetworkInterfaceOperationSpec, callback);
        };
        NetworkInterfaces.prototype.listVirtualMachineScaleSetIpConfigurations = function (resourceGroupName$$1, virtualMachineScaleSetName$$1, virtualmachineIndex$$1, networkInterfaceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                virtualMachineScaleSetName: virtualMachineScaleSetName$$1,
                virtualmachineIndex: virtualmachineIndex$$1,
                networkInterfaceName: networkInterfaceName$$1,
                options: options
            }, listVirtualMachineScaleSetIpConfigurationsOperationSpec, callback);
        };
        NetworkInterfaces.prototype.getVirtualMachineScaleSetIpConfiguration = function (resourceGroupName$$1, virtualMachineScaleSetName$$1, virtualmachineIndex$$1, networkInterfaceName$$1, ipConfigurationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                virtualMachineScaleSetName: virtualMachineScaleSetName$$1,
                virtualmachineIndex: virtualmachineIndex$$1,
                networkInterfaceName: networkInterfaceName$$1,
                ipConfigurationName: ipConfigurationName$$1,
                options: options
            }, getVirtualMachineScaleSetIpConfigurationOperationSpec, callback);
        };
        /**
         * Deletes the specified network interface.
         * @param resourceGroupName The name of the resource group.
         * @param networkInterfaceName The name of the network interface.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        NetworkInterfaces.prototype.beginDeleteMethod = function (resourceGroupName$$1, networkInterfaceName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                networkInterfaceName: networkInterfaceName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$e, options);
        };
        /**
         * Creates or updates a network interface.
         * @param resourceGroupName The name of the resource group.
         * @param networkInterfaceName The name of the network interface.
         * @param parameters Parameters supplied to the create or update network interface operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        NetworkInterfaces.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, networkInterfaceName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                networkInterfaceName: networkInterfaceName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$f, options);
        };
        /**
         * Updates a network interface tags.
         * @param resourceGroupName The name of the resource group.
         * @param networkInterfaceName The name of the network interface.
         * @param parameters Parameters supplied to update network interface tags.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        NetworkInterfaces.prototype.beginUpdateTags = function (resourceGroupName$$1, networkInterfaceName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                networkInterfaceName: networkInterfaceName$$1,
                parameters: parameters,
                options: options
            }, beginUpdateTagsOperationSpec$4, options);
        };
        /**
         * Gets all route tables applied to a network interface.
         * @param resourceGroupName The name of the resource group.
         * @param networkInterfaceName The name of the network interface.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        NetworkInterfaces.prototype.beginGetEffectiveRouteTable = function (resourceGroupName$$1, networkInterfaceName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                networkInterfaceName: networkInterfaceName$$1,
                options: options
            }, beginGetEffectiveRouteTableOperationSpec, options);
        };
        /**
         * Gets all network security groups applied to a network interface.
         * @param resourceGroupName The name of the resource group.
         * @param networkInterfaceName The name of the network interface.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        NetworkInterfaces.prototype.beginListEffectiveNetworkSecurityGroups = function (resourceGroupName$$1, networkInterfaceName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                networkInterfaceName: networkInterfaceName$$1,
                options: options
            }, beginListEffectiveNetworkSecurityGroupsOperationSpec, options);
        };
        NetworkInterfaces.prototype.listAllNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listAllNextOperationSpec$6, callback);
        };
        NetworkInterfaces.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$l, callback);
        };
        NetworkInterfaces.prototype.listVirtualMachineScaleSetVMNetworkInterfacesNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listVirtualMachineScaleSetVMNetworkInterfacesNextOperationSpec, callback);
        };
        NetworkInterfaces.prototype.listVirtualMachineScaleSetNetworkInterfacesNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listVirtualMachineScaleSetNetworkInterfacesNextOperationSpec, callback);
        };
        NetworkInterfaces.prototype.listVirtualMachineScaleSetIpConfigurationsNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listVirtualMachineScaleSetIpConfigurationsNextOperationSpec, callback);
        };
        return NetworkInterfaces;
    }());
    // Operation Specifications
    var serializer$p = new msRest.Serializer(Mappers$q);
    var getOperationSpec$j = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}",
        urlParameters: [
            resourceGroupName,
            networkInterfaceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0,
            expand
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkInterface
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var listAllOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/networkInterfaces",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkInterfaceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var listOperationSpec$m = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkInterfaceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var listVirtualMachineScaleSetVMNetworkInterfacesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/virtualMachines/{virtualmachineIndex}/networkInterfaces",
        urlParameters: [
            resourceGroupName,
            virtualMachineScaleSetName,
            virtualmachineIndex,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkInterfaceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var listVirtualMachineScaleSetNetworkInterfacesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/networkInterfaces",
        urlParameters: [
            resourceGroupName,
            virtualMachineScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkInterfaceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var getVirtualMachineScaleSetNetworkInterfaceOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/virtualMachines/{virtualmachineIndex}/networkInterfaces/{networkInterfaceName}",
        urlParameters: [
            resourceGroupName,
            virtualMachineScaleSetName,
            virtualmachineIndex,
            networkInterfaceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1,
            expand
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkInterface
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var listVirtualMachineScaleSetIpConfigurationsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/virtualMachines/{virtualmachineIndex}/networkInterfaces/{networkInterfaceName}/ipConfigurations",
        urlParameters: [
            resourceGroupName,
            virtualMachineScaleSetName,
            virtualmachineIndex,
            networkInterfaceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1,
            expand
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkInterfaceIPConfigurationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var getVirtualMachineScaleSetIpConfigurationOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/virtualMachines/{virtualmachineIndex}/networkInterfaces/{networkInterfaceName}/ipConfigurations/{ipConfigurationName}",
        urlParameters: [
            resourceGroupName,
            virtualMachineScaleSetName,
            virtualmachineIndex,
            networkInterfaceName,
            ipConfigurationName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1,
            expand
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkInterfaceIPConfiguration
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var beginDeleteMethodOperationSpec$e = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}",
        urlParameters: [
            resourceGroupName,
            networkInterfaceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var beginCreateOrUpdateOperationSpec$f = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}",
        urlParameters: [
            resourceGroupName,
            networkInterfaceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, NetworkInterface, { required: true })
        },
        responses: {
            200: {
                bodyMapper: NetworkInterface
            },
            201: {
                bodyMapper: NetworkInterface
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var beginUpdateTagsOperationSpec$4 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}",
        urlParameters: [
            resourceGroupName,
            networkInterfaceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, TagsObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: NetworkInterface
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var beginGetEffectiveRouteTableOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}/effectiveRouteTable",
        urlParameters: [
            resourceGroupName,
            networkInterfaceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EffectiveRouteListResult
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var beginListEffectiveNetworkSecurityGroupsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}/effectiveNetworkSecurityGroups",
        urlParameters: [
            resourceGroupName,
            networkInterfaceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EffectiveNetworkSecurityGroupListResult
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var listAllNextOperationSpec$6 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkInterfaceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var listNextOperationSpec$l = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkInterfaceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var listVirtualMachineScaleSetVMNetworkInterfacesNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkInterfaceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var listVirtualMachineScaleSetNetworkInterfacesNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkInterfaceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var listVirtualMachineScaleSetIpConfigurationsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkInterfaceIPConfigurationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$r = /*#__PURE__*/Object.freeze({
        NetworkInterfaceIPConfigurationListResult: NetworkInterfaceIPConfigurationListResult,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        SubResource: SubResource,
        BaseResource: BaseResource,
        VirtualNetworkTap: VirtualNetworkTap,
        Resource: Resource,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        FrontendIPConfiguration: FrontendIPConfiguration,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        CloudError: CloudError,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a NetworkInterfaceIPConfigurations. */
    var NetworkInterfaceIPConfigurations = /** @class */ (function () {
        /**
         * Create a NetworkInterfaceIPConfigurations.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function NetworkInterfaceIPConfigurations(client) {
            this.client = client;
        }
        NetworkInterfaceIPConfigurations.prototype.list = function (resourceGroupName$$1, networkInterfaceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                networkInterfaceName: networkInterfaceName$$1,
                options: options
            }, listOperationSpec$n, callback);
        };
        NetworkInterfaceIPConfigurations.prototype.get = function (resourceGroupName$$1, networkInterfaceName$$1, ipConfigurationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                networkInterfaceName: networkInterfaceName$$1,
                ipConfigurationName: ipConfigurationName$$1,
                options: options
            }, getOperationSpec$k, callback);
        };
        NetworkInterfaceIPConfigurations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$m, callback);
        };
        return NetworkInterfaceIPConfigurations;
    }());
    // Operation Specifications
    var serializer$q = new msRest.Serializer(Mappers$r);
    var listOperationSpec$n = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}/ipConfigurations",
        urlParameters: [
            resourceGroupName,
            networkInterfaceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkInterfaceIPConfigurationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$q
    };
    var getOperationSpec$k = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}/ipConfigurations/{ipConfigurationName}",
        urlParameters: [
            resourceGroupName,
            networkInterfaceName,
            ipConfigurationName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkInterfaceIPConfiguration
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$q
    };
    var listNextOperationSpec$m = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkInterfaceIPConfigurationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$q
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$s = /*#__PURE__*/Object.freeze({
        NetworkInterfaceLoadBalancerListResult: NetworkInterfaceLoadBalancerListResult,
        LoadBalancer: LoadBalancer,
        Resource: Resource,
        BaseResource: BaseResource,
        LoadBalancerSku: LoadBalancerSku,
        FrontendIPConfiguration: FrontendIPConfiguration,
        SubResource: SubResource,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        IPConfiguration: IPConfiguration,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        CloudError: CloudError,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a NetworkInterfaceLoadBalancers. */
    var NetworkInterfaceLoadBalancers = /** @class */ (function () {
        /**
         * Create a NetworkInterfaceLoadBalancers.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function NetworkInterfaceLoadBalancers(client) {
            this.client = client;
        }
        NetworkInterfaceLoadBalancers.prototype.list = function (resourceGroupName$$1, networkInterfaceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                networkInterfaceName: networkInterfaceName$$1,
                options: options
            }, listOperationSpec$o, callback);
        };
        NetworkInterfaceLoadBalancers.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$n, callback);
        };
        return NetworkInterfaceLoadBalancers;
    }());
    // Operation Specifications
    var serializer$r = new msRest.Serializer(Mappers$s);
    var listOperationSpec$o = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}/loadBalancers",
        urlParameters: [
            resourceGroupName,
            networkInterfaceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkInterfaceLoadBalancerListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$r
    };
    var listNextOperationSpec$n = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkInterfaceLoadBalancerListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$r
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$t = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        SubResource: SubResource,
        BaseResource: BaseResource,
        VirtualNetworkTap: VirtualNetworkTap,
        Resource: Resource,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        FrontendIPConfiguration: FrontendIPConfiguration,
        NetworkInterfaceTapConfigurationListResult: NetworkInterfaceTapConfigurationListResult,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a NetworkInterfaceTapConfigurations. */
    var NetworkInterfaceTapConfigurations = /** @class */ (function () {
        /**
         * Create a NetworkInterfaceTapConfigurations.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function NetworkInterfaceTapConfigurations(client) {
            this.client = client;
        }
        /**
         * Deletes the specified tap configuration from the NetworkInterface.
         * @param resourceGroupName The name of the resource group.
         * @param networkInterfaceName The name of the network interface.
         * @param tapConfigurationName The name of the tap configuration.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        NetworkInterfaceTapConfigurations.prototype.deleteMethod = function (resourceGroupName$$1, networkInterfaceName$$1, tapConfigurationName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, networkInterfaceName$$1, tapConfigurationName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        NetworkInterfaceTapConfigurations.prototype.get = function (resourceGroupName$$1, networkInterfaceName$$1, tapConfigurationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                networkInterfaceName: networkInterfaceName$$1,
                tapConfigurationName: tapConfigurationName$$1,
                options: options
            }, getOperationSpec$l, callback);
        };
        /**
         * Creates or updates a Tap configuration in the specified NetworkInterface.
         * @param resourceGroupName The name of the resource group.
         * @param networkInterfaceName The name of the network interface.
         * @param tapConfigurationName The name of the tap configuration.
         * @param tapConfigurationParameters Parameters supplied to the create or update tap configuration
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.NetworkInterfaceTapConfigurationsCreateOrUpdateResponse>
         */
        NetworkInterfaceTapConfigurations.prototype.createOrUpdate = function (resourceGroupName$$1, networkInterfaceName$$1, tapConfigurationName$$1, tapConfigurationParameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, networkInterfaceName$$1, tapConfigurationName$$1, tapConfigurationParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        NetworkInterfaceTapConfigurations.prototype.list = function (resourceGroupName$$1, networkInterfaceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                networkInterfaceName: networkInterfaceName$$1,
                options: options
            }, listOperationSpec$p, callback);
        };
        /**
         * Deletes the specified tap configuration from the NetworkInterface.
         * @param resourceGroupName The name of the resource group.
         * @param networkInterfaceName The name of the network interface.
         * @param tapConfigurationName The name of the tap configuration.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        NetworkInterfaceTapConfigurations.prototype.beginDeleteMethod = function (resourceGroupName$$1, networkInterfaceName$$1, tapConfigurationName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                networkInterfaceName: networkInterfaceName$$1,
                tapConfigurationName: tapConfigurationName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$f, options);
        };
        /**
         * Creates or updates a Tap configuration in the specified NetworkInterface.
         * @param resourceGroupName The name of the resource group.
         * @param networkInterfaceName The name of the network interface.
         * @param tapConfigurationName The name of the tap configuration.
         * @param tapConfigurationParameters Parameters supplied to the create or update tap configuration
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        NetworkInterfaceTapConfigurations.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, networkInterfaceName$$1, tapConfigurationName$$1, tapConfigurationParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                networkInterfaceName: networkInterfaceName$$1,
                tapConfigurationName: tapConfigurationName$$1,
                tapConfigurationParameters: tapConfigurationParameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$g, options);
        };
        NetworkInterfaceTapConfigurations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$o, callback);
        };
        return NetworkInterfaceTapConfigurations;
    }());
    // Operation Specifications
    var serializer$s = new msRest.Serializer(Mappers$t);
    var getOperationSpec$l = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}/tapConfigurations/{tapConfigurationName}",
        urlParameters: [
            resourceGroupName,
            networkInterfaceName,
            tapConfigurationName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkInterfaceTapConfiguration
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$s
    };
    var listOperationSpec$p = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}/tapConfigurations",
        urlParameters: [
            resourceGroupName,
            networkInterfaceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkInterfaceTapConfigurationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$s
    };
    var beginDeleteMethodOperationSpec$f = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}/tapConfigurations/{tapConfigurationName}",
        urlParameters: [
            resourceGroupName,
            networkInterfaceName,
            tapConfigurationName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$s
    };
    var beginCreateOrUpdateOperationSpec$g = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}/tapConfigurations/{tapConfigurationName}",
        urlParameters: [
            resourceGroupName,
            networkInterfaceName,
            tapConfigurationName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "tapConfigurationParameters",
            mapper: __assign({}, NetworkInterfaceTapConfiguration, { required: true })
        },
        responses: {
            200: {
                bodyMapper: NetworkInterfaceTapConfiguration
            },
            201: {
                bodyMapper: NetworkInterfaceTapConfiguration
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$s
    };
    var listNextOperationSpec$o = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkInterfaceTapConfigurationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$s
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$u = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        NetworkProfile: NetworkProfile,
        Resource: Resource,
        BaseResource: BaseResource,
        ContainerNetworkInterface: ContainerNetworkInterface,
        SubResource: SubResource,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        IPConfigurationProfile: IPConfigurationProfile,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        FrontendIPConfiguration: FrontendIPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        IPConfiguration: IPConfiguration,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        TagsObject: TagsObject,
        NetworkProfileListResult: NetworkProfileListResult,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a NetworkProfiles. */
    var NetworkProfiles = /** @class */ (function () {
        /**
         * Create a NetworkProfiles.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function NetworkProfiles(client) {
            this.client = client;
        }
        NetworkProfiles.prototype.deleteMethod = function (resourceGroupName$$1, networkProfileName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                networkProfileName: networkProfileName$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        NetworkProfiles.prototype.get = function (resourceGroupName$$1, networkProfileName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                networkProfileName: networkProfileName$$1,
                options: options
            }, getOperationSpec$m, callback);
        };
        NetworkProfiles.prototype.createOrUpdate = function (resourceGroupName$$1, networkProfileName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                networkProfileName: networkProfileName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        NetworkProfiles.prototype.updateTags = function (resourceGroupName$$1, networkProfileName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                networkProfileName: networkProfileName$$1,
                parameters: parameters,
                options: options
            }, updateTagsOperationSpec, callback);
        };
        NetworkProfiles.prototype.listAll = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listAllOperationSpec$7, callback);
        };
        NetworkProfiles.prototype.list = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listOperationSpec$q, callback);
        };
        NetworkProfiles.prototype.listAllNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listAllNextOperationSpec$7, callback);
        };
        NetworkProfiles.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$p, callback);
        };
        return NetworkProfiles;
    }());
    // Operation Specifications
    var serializer$t = new msRest.Serializer(Mappers$u);
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkProfiles/{networkProfileName}",
        urlParameters: [
            resourceGroupName,
            networkProfileName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var getOperationSpec$m = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkProfiles/{networkProfileName}",
        urlParameters: [
            resourceGroupName,
            networkProfileName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0,
            expand
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkProfile
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkProfiles/{networkProfileName}",
        urlParameters: [
            resourceGroupName,
            networkProfileName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, NetworkProfile, { required: true })
        },
        responses: {
            200: {
                bodyMapper: NetworkProfile
            },
            201: {
                bodyMapper: NetworkProfile
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var updateTagsOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkProfiles/{networkProfileName}",
        urlParameters: [
            resourceGroupName,
            networkProfileName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, TagsObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: NetworkProfile
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var listAllOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/networkProfiles",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkProfileListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var listOperationSpec$q = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkProfiles",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkProfileListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var listAllNextOperationSpec$7 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkProfileListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var listNextOperationSpec$p = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkProfileListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$v = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        NetworkSecurityGroup: NetworkSecurityGroup,
        Resource: Resource,
        BaseResource: BaseResource,
        SecurityRule: SecurityRule,
        SubResource: SubResource,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        Subnet: Subnet,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        FrontendIPConfiguration: FrontendIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        TagsObject: TagsObject,
        NetworkSecurityGroupListResult: NetworkSecurityGroupListResult,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a NetworkSecurityGroups. */
    var NetworkSecurityGroups = /** @class */ (function () {
        /**
         * Create a NetworkSecurityGroups.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function NetworkSecurityGroups(client) {
            this.client = client;
        }
        /**
         * Deletes the specified network security group.
         * @param resourceGroupName The name of the resource group.
         * @param networkSecurityGroupName The name of the network security group.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        NetworkSecurityGroups.prototype.deleteMethod = function (resourceGroupName$$1, networkSecurityGroupName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, networkSecurityGroupName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        NetworkSecurityGroups.prototype.get = function (resourceGroupName$$1, networkSecurityGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                networkSecurityGroupName: networkSecurityGroupName$$1,
                options: options
            }, getOperationSpec$n, callback);
        };
        /**
         * Creates or updates a network security group in the specified resource group.
         * @param resourceGroupName The name of the resource group.
         * @param networkSecurityGroupName The name of the network security group.
         * @param parameters Parameters supplied to the create or update network security group operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.NetworkSecurityGroupsCreateOrUpdateResponse>
         */
        NetworkSecurityGroups.prototype.createOrUpdate = function (resourceGroupName$$1, networkSecurityGroupName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, networkSecurityGroupName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a network security group tags.
         * @param resourceGroupName The name of the resource group.
         * @param networkSecurityGroupName The name of the network security group.
         * @param parameters Parameters supplied to update network security group tags.
         * @param [options] The optional parameters
         * @returns Promise<Models.NetworkSecurityGroupsUpdateTagsResponse>
         */
        NetworkSecurityGroups.prototype.updateTags = function (resourceGroupName$$1, networkSecurityGroupName$$1, parameters, options) {
            return this.beginUpdateTags(resourceGroupName$$1, networkSecurityGroupName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        NetworkSecurityGroups.prototype.listAll = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listAllOperationSpec$8, callback);
        };
        NetworkSecurityGroups.prototype.list = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listOperationSpec$r, callback);
        };
        /**
         * Deletes the specified network security group.
         * @param resourceGroupName The name of the resource group.
         * @param networkSecurityGroupName The name of the network security group.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        NetworkSecurityGroups.prototype.beginDeleteMethod = function (resourceGroupName$$1, networkSecurityGroupName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                networkSecurityGroupName: networkSecurityGroupName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$g, options);
        };
        /**
         * Creates or updates a network security group in the specified resource group.
         * @param resourceGroupName The name of the resource group.
         * @param networkSecurityGroupName The name of the network security group.
         * @param parameters Parameters supplied to the create or update network security group operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        NetworkSecurityGroups.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, networkSecurityGroupName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                networkSecurityGroupName: networkSecurityGroupName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$h, options);
        };
        /**
         * Updates a network security group tags.
         * @param resourceGroupName The name of the resource group.
         * @param networkSecurityGroupName The name of the network security group.
         * @param parameters Parameters supplied to update network security group tags.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        NetworkSecurityGroups.prototype.beginUpdateTags = function (resourceGroupName$$1, networkSecurityGroupName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                networkSecurityGroupName: networkSecurityGroupName$$1,
                parameters: parameters,
                options: options
            }, beginUpdateTagsOperationSpec$5, options);
        };
        NetworkSecurityGroups.prototype.listAllNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listAllNextOperationSpec$8, callback);
        };
        NetworkSecurityGroups.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$q, callback);
        };
        return NetworkSecurityGroups;
    }());
    // Operation Specifications
    var serializer$u = new msRest.Serializer(Mappers$v);
    var getOperationSpec$n = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}",
        urlParameters: [
            resourceGroupName,
            networkSecurityGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0,
            expand
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkSecurityGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var listAllOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/networkSecurityGroups",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkSecurityGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var listOperationSpec$r = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkSecurityGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var beginDeleteMethodOperationSpec$g = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}",
        urlParameters: [
            resourceGroupName,
            networkSecurityGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var beginCreateOrUpdateOperationSpec$h = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}",
        urlParameters: [
            resourceGroupName,
            networkSecurityGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, NetworkSecurityGroup, { required: true })
        },
        responses: {
            200: {
                bodyMapper: NetworkSecurityGroup
            },
            201: {
                bodyMapper: NetworkSecurityGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var beginUpdateTagsOperationSpec$5 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}",
        urlParameters: [
            resourceGroupName,
            networkSecurityGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, TagsObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: NetworkSecurityGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var listAllNextOperationSpec$8 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkSecurityGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var listNextOperationSpec$q = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkSecurityGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$w = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        SecurityRule: SecurityRule,
        SubResource: SubResource,
        BaseResource: BaseResource,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        Resource: Resource,
        SecurityRuleListResult: SecurityRuleListResult,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        FrontendIPConfiguration: FrontendIPConfiguration,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a SecurityRules. */
    var SecurityRules = /** @class */ (function () {
        /**
         * Create a SecurityRules.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function SecurityRules(client) {
            this.client = client;
        }
        /**
         * Deletes the specified network security rule.
         * @param resourceGroupName The name of the resource group.
         * @param networkSecurityGroupName The name of the network security group.
         * @param securityRuleName The name of the security rule.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        SecurityRules.prototype.deleteMethod = function (resourceGroupName$$1, networkSecurityGroupName$$1, securityRuleName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, networkSecurityGroupName$$1, securityRuleName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        SecurityRules.prototype.get = function (resourceGroupName$$1, networkSecurityGroupName$$1, securityRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                networkSecurityGroupName: networkSecurityGroupName$$1,
                securityRuleName: securityRuleName$$1,
                options: options
            }, getOperationSpec$o, callback);
        };
        /**
         * Creates or updates a security rule in the specified network security group.
         * @param resourceGroupName The name of the resource group.
         * @param networkSecurityGroupName The name of the network security group.
         * @param securityRuleName The name of the security rule.
         * @param securityRuleParameters Parameters supplied to the create or update network security rule
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.SecurityRulesCreateOrUpdateResponse>
         */
        SecurityRules.prototype.createOrUpdate = function (resourceGroupName$$1, networkSecurityGroupName$$1, securityRuleName$$1, securityRuleParameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, networkSecurityGroupName$$1, securityRuleName$$1, securityRuleParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        SecurityRules.prototype.list = function (resourceGroupName$$1, networkSecurityGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                networkSecurityGroupName: networkSecurityGroupName$$1,
                options: options
            }, listOperationSpec$s, callback);
        };
        /**
         * Deletes the specified network security rule.
         * @param resourceGroupName The name of the resource group.
         * @param networkSecurityGroupName The name of the network security group.
         * @param securityRuleName The name of the security rule.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        SecurityRules.prototype.beginDeleteMethod = function (resourceGroupName$$1, networkSecurityGroupName$$1, securityRuleName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                networkSecurityGroupName: networkSecurityGroupName$$1,
                securityRuleName: securityRuleName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$h, options);
        };
        /**
         * Creates or updates a security rule in the specified network security group.
         * @param resourceGroupName The name of the resource group.
         * @param networkSecurityGroupName The name of the network security group.
         * @param securityRuleName The name of the security rule.
         * @param securityRuleParameters Parameters supplied to the create or update network security rule
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        SecurityRules.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, networkSecurityGroupName$$1, securityRuleName$$1, securityRuleParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                networkSecurityGroupName: networkSecurityGroupName$$1,
                securityRuleName: securityRuleName$$1,
                securityRuleParameters: securityRuleParameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$i, options);
        };
        SecurityRules.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$r, callback);
        };
        return SecurityRules;
    }());
    // Operation Specifications
    var serializer$v = new msRest.Serializer(Mappers$w);
    var getOperationSpec$o = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}/securityRules/{securityRuleName}",
        urlParameters: [
            resourceGroupName,
            networkSecurityGroupName,
            securityRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SecurityRule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$v
    };
    var listOperationSpec$s = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}/securityRules",
        urlParameters: [
            resourceGroupName,
            networkSecurityGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SecurityRuleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$v
    };
    var beginDeleteMethodOperationSpec$h = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}/securityRules/{securityRuleName}",
        urlParameters: [
            resourceGroupName,
            networkSecurityGroupName,
            securityRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$v
    };
    var beginCreateOrUpdateOperationSpec$i = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}/securityRules/{securityRuleName}",
        urlParameters: [
            resourceGroupName,
            networkSecurityGroupName,
            securityRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "securityRuleParameters",
            mapper: __assign({}, SecurityRule, { required: true })
        },
        responses: {
            200: {
                bodyMapper: SecurityRule
            },
            201: {
                bodyMapper: SecurityRule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$v
    };
    var listNextOperationSpec$r = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SecurityRuleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$v
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$x = /*#__PURE__*/Object.freeze({
        SecurityRuleListResult: SecurityRuleListResult,
        SecurityRule: SecurityRule,
        SubResource: SubResource,
        BaseResource: BaseResource,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        Resource: Resource,
        CloudError: CloudError,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        FrontendIPConfiguration: FrontendIPConfiguration,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DefaultSecurityRules. */
    var DefaultSecurityRules = /** @class */ (function () {
        /**
         * Create a DefaultSecurityRules.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function DefaultSecurityRules(client) {
            this.client = client;
        }
        DefaultSecurityRules.prototype.list = function (resourceGroupName$$1, networkSecurityGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                networkSecurityGroupName: networkSecurityGroupName$$1,
                options: options
            }, listOperationSpec$t, callback);
        };
        DefaultSecurityRules.prototype.get = function (resourceGroupName$$1, networkSecurityGroupName$$1, defaultSecurityRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                networkSecurityGroupName: networkSecurityGroupName$$1,
                defaultSecurityRuleName: defaultSecurityRuleName$$1,
                options: options
            }, getOperationSpec$p, callback);
        };
        DefaultSecurityRules.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$s, callback);
        };
        return DefaultSecurityRules;
    }());
    // Operation Specifications
    var serializer$w = new msRest.Serializer(Mappers$x);
    var listOperationSpec$t = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}/defaultSecurityRules",
        urlParameters: [
            resourceGroupName,
            networkSecurityGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SecurityRuleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$w
    };
    var getOperationSpec$p = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}/defaultSecurityRules/{defaultSecurityRuleName}",
        urlParameters: [
            resourceGroupName,
            networkSecurityGroupName,
            defaultSecurityRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SecurityRule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$w
    };
    var listNextOperationSpec$s = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SecurityRuleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$w
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$y = /*#__PURE__*/Object.freeze({
        NetworkWatcher: NetworkWatcher,
        Resource: Resource,
        BaseResource: BaseResource,
        ErrorResponse: ErrorResponse,
        ErrorDetails: ErrorDetails,
        TagsObject: TagsObject,
        NetworkWatcherListResult: NetworkWatcherListResult,
        TopologyParameters: TopologyParameters,
        SubResource: SubResource,
        Topology: Topology,
        TopologyResource: TopologyResource,
        TopologyAssociation: TopologyAssociation,
        VerificationIPFlowParameters: VerificationIPFlowParameters,
        VerificationIPFlowResult: VerificationIPFlowResult,
        NextHopParameters: NextHopParameters,
        NextHopResult: NextHopResult,
        SecurityGroupViewParameters: SecurityGroupViewParameters,
        SecurityGroupViewResult: SecurityGroupViewResult,
        SecurityGroupNetworkInterface: SecurityGroupNetworkInterface,
        SecurityRuleAssociations: SecurityRuleAssociations,
        NetworkInterfaceAssociation: NetworkInterfaceAssociation,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        SubnetAssociation: SubnetAssociation,
        EffectiveNetworkSecurityRule: EffectiveNetworkSecurityRule,
        TroubleshootingParameters: TroubleshootingParameters,
        TroubleshootingResult: TroubleshootingResult,
        TroubleshootingDetails: TroubleshootingDetails,
        TroubleshootingRecommendedActions: TroubleshootingRecommendedActions,
        QueryTroubleshootingParameters: QueryTroubleshootingParameters,
        FlowLogInformation: FlowLogInformation,
        RetentionPolicyParameters: RetentionPolicyParameters,
        TrafficAnalyticsProperties: TrafficAnalyticsProperties,
        TrafficAnalyticsConfigurationProperties: TrafficAnalyticsConfigurationProperties,
        FlowLogStatusParameters: FlowLogStatusParameters,
        ConnectivityParameters: ConnectivityParameters,
        ConnectivitySource: ConnectivitySource,
        ConnectivityDestination: ConnectivityDestination,
        ProtocolConfiguration: ProtocolConfiguration,
        HTTPConfiguration: HTTPConfiguration,
        HTTPHeader: HTTPHeader,
        ConnectivityInformation: ConnectivityInformation,
        ConnectivityHop: ConnectivityHop,
        ConnectivityIssue: ConnectivityIssue,
        AzureReachabilityReportParameters: AzureReachabilityReportParameters,
        AzureReachabilityReportLocation: AzureReachabilityReportLocation,
        AzureReachabilityReport: AzureReachabilityReport,
        AzureReachabilityReportItem: AzureReachabilityReportItem,
        AzureReachabilityReportLatencyInfo: AzureReachabilityReportLatencyInfo,
        AvailableProvidersListParameters: AvailableProvidersListParameters,
        AvailableProvidersList: AvailableProvidersList,
        AvailableProvidersListCountry: AvailableProvidersListCountry,
        AvailableProvidersListState: AvailableProvidersListState,
        AvailableProvidersListCity: AvailableProvidersListCity,
        NetworkConfigurationDiagnosticParameters: NetworkConfigurationDiagnosticParameters,
        TrafficQuery: TrafficQuery,
        NetworkConfigurationDiagnosticResponse: NetworkConfigurationDiagnosticResponse,
        NetworkConfigurationDiagnosticResult: NetworkConfigurationDiagnosticResult,
        NetworkSecurityGroupResult: NetworkSecurityGroupResult,
        EvaluatedNetworkSecurityGroup: EvaluatedNetworkSecurityGroup,
        MatchedRule: MatchedRule,
        NetworkSecurityRulesEvaluationResult: NetworkSecurityRulesEvaluationResult,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        FrontendIPConfiguration: FrontendIPConfiguration,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a NetworkWatchers. */
    var NetworkWatchers = /** @class */ (function () {
        /**
         * Create a NetworkWatchers.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function NetworkWatchers(client) {
            this.client = client;
        }
        NetworkWatchers.prototype.createOrUpdate = function (resourceGroupName$$1, networkWatcherName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                networkWatcherName: networkWatcherName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$1, callback);
        };
        NetworkWatchers.prototype.get = function (resourceGroupName$$1, networkWatcherName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                networkWatcherName: networkWatcherName$$1,
                options: options
            }, getOperationSpec$q, callback);
        };
        /**
         * Deletes the specified network watcher resource.
         * @param resourceGroupName The name of the resource group.
         * @param networkWatcherName The name of the network watcher.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        NetworkWatchers.prototype.deleteMethod = function (resourceGroupName$$1, networkWatcherName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, networkWatcherName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        NetworkWatchers.prototype.updateTags = function (resourceGroupName$$1, networkWatcherName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                networkWatcherName: networkWatcherName$$1,
                parameters: parameters,
                options: options
            }, updateTagsOperationSpec$1, callback);
        };
        NetworkWatchers.prototype.list = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listOperationSpec$u, callback);
        };
        NetworkWatchers.prototype.listAll = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listAllOperationSpec$9, callback);
        };
        NetworkWatchers.prototype.getTopology = function (resourceGroupName$$1, networkWatcherName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                networkWatcherName: networkWatcherName$$1,
                parameters: parameters,
                options: options
            }, getTopologyOperationSpec, callback);
        };
        /**
         * Verify IP flow from the specified VM to a location given the currently configured NSG rules.
         * @param resourceGroupName The name of the resource group.
         * @param networkWatcherName The name of the network watcher.
         * @param parameters Parameters that define the IP flow to be verified.
         * @param [options] The optional parameters
         * @returns Promise<Models.NetworkWatchersVerifyIPFlowResponse>
         */
        NetworkWatchers.prototype.verifyIPFlow = function (resourceGroupName$$1, networkWatcherName$$1, parameters, options) {
            return this.beginVerifyIPFlow(resourceGroupName$$1, networkWatcherName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Gets the next hop from the specified VM.
         * @param resourceGroupName The name of the resource group.
         * @param networkWatcherName The name of the network watcher.
         * @param parameters Parameters that define the source and destination endpoint.
         * @param [options] The optional parameters
         * @returns Promise<Models.NetworkWatchersGetNextHopResponse>
         */
        NetworkWatchers.prototype.getNextHop = function (resourceGroupName$$1, networkWatcherName$$1, parameters, options) {
            return this.beginGetNextHop(resourceGroupName$$1, networkWatcherName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Gets the configured and effective security group rules on the specified VM.
         * @param resourceGroupName The name of the resource group.
         * @param networkWatcherName The name of the network watcher.
         * @param parameters Parameters that define the VM to check security groups for.
         * @param [options] The optional parameters
         * @returns Promise<Models.NetworkWatchersGetVMSecurityRulesResponse>
         */
        NetworkWatchers.prototype.getVMSecurityRules = function (resourceGroupName$$1, networkWatcherName$$1, parameters, options) {
            return this.beginGetVMSecurityRules(resourceGroupName$$1, networkWatcherName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Initiate troubleshooting on a specified resource
         * @param resourceGroupName The name of the resource group.
         * @param networkWatcherName The name of the network watcher resource.
         * @param parameters Parameters that define the resource to troubleshoot.
         * @param [options] The optional parameters
         * @returns Promise<Models.NetworkWatchersGetTroubleshootingResponse>
         */
        NetworkWatchers.prototype.getTroubleshooting = function (resourceGroupName$$1, networkWatcherName$$1, parameters, options) {
            return this.beginGetTroubleshooting(resourceGroupName$$1, networkWatcherName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Get the last completed troubleshooting result on a specified resource
         * @param resourceGroupName The name of the resource group.
         * @param networkWatcherName The name of the network watcher resource.
         * @param parameters Parameters that define the resource to query the troubleshooting result.
         * @param [options] The optional parameters
         * @returns Promise<Models.NetworkWatchersGetTroubleshootingResultResponse>
         */
        NetworkWatchers.prototype.getTroubleshootingResult = function (resourceGroupName$$1, networkWatcherName$$1, parameters, options) {
            return this.beginGetTroubleshootingResult(resourceGroupName$$1, networkWatcherName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Configures flow log  and traffic analytics (optional) on a specified resource.
         * @param resourceGroupName The name of the network watcher resource group.
         * @param networkWatcherName The name of the network watcher resource.
         * @param parameters Parameters that define the configuration of flow log.
         * @param [options] The optional parameters
         * @returns Promise<Models.NetworkWatchersSetFlowLogConfigurationResponse>
         */
        NetworkWatchers.prototype.setFlowLogConfiguration = function (resourceGroupName$$1, networkWatcherName$$1, parameters, options) {
            return this.beginSetFlowLogConfiguration(resourceGroupName$$1, networkWatcherName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Queries status of flow log and traffic analytics (optional) on a specified resource.
         * @param resourceGroupName The name of the network watcher resource group.
         * @param networkWatcherName The name of the network watcher resource.
         * @param parameters Parameters that define a resource to query flow log and traffic analytics
         * (optional)  status.
         * @param [options] The optional parameters
         * @returns Promise<Models.NetworkWatchersGetFlowLogStatusResponse>
         */
        NetworkWatchers.prototype.getFlowLogStatus = function (resourceGroupName$$1, networkWatcherName$$1, parameters, options) {
            return this.beginGetFlowLogStatus(resourceGroupName$$1, networkWatcherName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Verifies the possibility of establishing a direct TCP connection from a virtual machine to a
         * given endpoint including another VM or an arbitrary remote server.
         * @param resourceGroupName The name of the network watcher resource group.
         * @param networkWatcherName The name of the network watcher resource.
         * @param parameters Parameters that determine how the connectivity check will be performed.
         * @param [options] The optional parameters
         * @returns Promise<Models.NetworkWatchersCheckConnectivityResponse>
         */
        NetworkWatchers.prototype.checkConnectivity = function (resourceGroupName$$1, networkWatcherName$$1, parameters, options) {
            return this.beginCheckConnectivity(resourceGroupName$$1, networkWatcherName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Gets the relative latency score for internet service providers from a specified location to
         * Azure regions.
         * @param resourceGroupName The name of the network watcher resource group.
         * @param networkWatcherName The name of the network watcher resource.
         * @param parameters Parameters that determine Azure reachability report configuration.
         * @param [options] The optional parameters
         * @returns Promise<Models.NetworkWatchersGetAzureReachabilityReportResponse>
         */
        NetworkWatchers.prototype.getAzureReachabilityReport = function (resourceGroupName$$1, networkWatcherName$$1, parameters, options) {
            return this.beginGetAzureReachabilityReport(resourceGroupName$$1, networkWatcherName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Lists all available internet service providers for a specified Azure region.
         * @param resourceGroupName The name of the network watcher resource group.
         * @param networkWatcherName The name of the network watcher resource.
         * @param parameters Parameters that scope the list of available providers.
         * @param [options] The optional parameters
         * @returns Promise<Models.NetworkWatchersListAvailableProvidersResponse>
         */
        NetworkWatchers.prototype.listAvailableProviders = function (resourceGroupName$$1, networkWatcherName$$1, parameters, options) {
            return this.beginListAvailableProviders(resourceGroupName$$1, networkWatcherName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Get network configuration diagnostic.
         * @param resourceGroupName The name of the resource group.
         * @param networkWatcherName The name of the network watcher.
         * @param parameters Parameters to get network configuration diagnostic.
         * @param [options] The optional parameters
         * @returns Promise<Models.NetworkWatchersGetNetworkConfigurationDiagnosticResponse>
         */
        NetworkWatchers.prototype.getNetworkConfigurationDiagnostic = function (resourceGroupName$$1, networkWatcherName$$1, parameters, options) {
            return this.beginGetNetworkConfigurationDiagnostic(resourceGroupName$$1, networkWatcherName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the specified network watcher resource.
         * @param resourceGroupName The name of the resource group.
         * @param networkWatcherName The name of the network watcher.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        NetworkWatchers.prototype.beginDeleteMethod = function (resourceGroupName$$1, networkWatcherName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                networkWatcherName: networkWatcherName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$i, options);
        };
        /**
         * Verify IP flow from the specified VM to a location given the currently configured NSG rules.
         * @param resourceGroupName The name of the resource group.
         * @param networkWatcherName The name of the network watcher.
         * @param parameters Parameters that define the IP flow to be verified.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        NetworkWatchers.prototype.beginVerifyIPFlow = function (resourceGroupName$$1, networkWatcherName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                networkWatcherName: networkWatcherName$$1,
                parameters: parameters,
                options: options
            }, beginVerifyIPFlowOperationSpec, options);
        };
        /**
         * Gets the next hop from the specified VM.
         * @param resourceGroupName The name of the resource group.
         * @param networkWatcherName The name of the network watcher.
         * @param parameters Parameters that define the source and destination endpoint.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        NetworkWatchers.prototype.beginGetNextHop = function (resourceGroupName$$1, networkWatcherName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                networkWatcherName: networkWatcherName$$1,
                parameters: parameters,
                options: options
            }, beginGetNextHopOperationSpec, options);
        };
        /**
         * Gets the configured and effective security group rules on the specified VM.
         * @param resourceGroupName The name of the resource group.
         * @param networkWatcherName The name of the network watcher.
         * @param parameters Parameters that define the VM to check security groups for.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        NetworkWatchers.prototype.beginGetVMSecurityRules = function (resourceGroupName$$1, networkWatcherName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                networkWatcherName: networkWatcherName$$1,
                parameters: parameters,
                options: options
            }, beginGetVMSecurityRulesOperationSpec, options);
        };
        /**
         * Initiate troubleshooting on a specified resource
         * @param resourceGroupName The name of the resource group.
         * @param networkWatcherName The name of the network watcher resource.
         * @param parameters Parameters that define the resource to troubleshoot.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        NetworkWatchers.prototype.beginGetTroubleshooting = function (resourceGroupName$$1, networkWatcherName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                networkWatcherName: networkWatcherName$$1,
                parameters: parameters,
                options: options
            }, beginGetTroubleshootingOperationSpec, options);
        };
        /**
         * Get the last completed troubleshooting result on a specified resource
         * @param resourceGroupName The name of the resource group.
         * @param networkWatcherName The name of the network watcher resource.
         * @param parameters Parameters that define the resource to query the troubleshooting result.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        NetworkWatchers.prototype.beginGetTroubleshootingResult = function (resourceGroupName$$1, networkWatcherName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                networkWatcherName: networkWatcherName$$1,
                parameters: parameters,
                options: options
            }, beginGetTroubleshootingResultOperationSpec, options);
        };
        /**
         * Configures flow log  and traffic analytics (optional) on a specified resource.
         * @param resourceGroupName The name of the network watcher resource group.
         * @param networkWatcherName The name of the network watcher resource.
         * @param parameters Parameters that define the configuration of flow log.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        NetworkWatchers.prototype.beginSetFlowLogConfiguration = function (resourceGroupName$$1, networkWatcherName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                networkWatcherName: networkWatcherName$$1,
                parameters: parameters,
                options: options
            }, beginSetFlowLogConfigurationOperationSpec, options);
        };
        /**
         * Queries status of flow log and traffic analytics (optional) on a specified resource.
         * @param resourceGroupName The name of the network watcher resource group.
         * @param networkWatcherName The name of the network watcher resource.
         * @param parameters Parameters that define a resource to query flow log and traffic analytics
         * (optional)  status.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        NetworkWatchers.prototype.beginGetFlowLogStatus = function (resourceGroupName$$1, networkWatcherName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                networkWatcherName: networkWatcherName$$1,
                parameters: parameters,
                options: options
            }, beginGetFlowLogStatusOperationSpec, options);
        };
        /**
         * Verifies the possibility of establishing a direct TCP connection from a virtual machine to a
         * given endpoint including another VM or an arbitrary remote server.
         * @param resourceGroupName The name of the network watcher resource group.
         * @param networkWatcherName The name of the network watcher resource.
         * @param parameters Parameters that determine how the connectivity check will be performed.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        NetworkWatchers.prototype.beginCheckConnectivity = function (resourceGroupName$$1, networkWatcherName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                networkWatcherName: networkWatcherName$$1,
                parameters: parameters,
                options: options
            }, beginCheckConnectivityOperationSpec, options);
        };
        /**
         * Gets the relative latency score for internet service providers from a specified location to
         * Azure regions.
         * @param resourceGroupName The name of the network watcher resource group.
         * @param networkWatcherName The name of the network watcher resource.
         * @param parameters Parameters that determine Azure reachability report configuration.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        NetworkWatchers.prototype.beginGetAzureReachabilityReport = function (resourceGroupName$$1, networkWatcherName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                networkWatcherName: networkWatcherName$$1,
                parameters: parameters,
                options: options
            }, beginGetAzureReachabilityReportOperationSpec, options);
        };
        /**
         * Lists all available internet service providers for a specified Azure region.
         * @param resourceGroupName The name of the network watcher resource group.
         * @param networkWatcherName The name of the network watcher resource.
         * @param parameters Parameters that scope the list of available providers.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        NetworkWatchers.prototype.beginListAvailableProviders = function (resourceGroupName$$1, networkWatcherName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                networkWatcherName: networkWatcherName$$1,
                parameters: parameters,
                options: options
            }, beginListAvailableProvidersOperationSpec, options);
        };
        /**
         * Get network configuration diagnostic.
         * @param resourceGroupName The name of the resource group.
         * @param networkWatcherName The name of the network watcher.
         * @param parameters Parameters to get network configuration diagnostic.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        NetworkWatchers.prototype.beginGetNetworkConfigurationDiagnostic = function (resourceGroupName$$1, networkWatcherName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                networkWatcherName: networkWatcherName$$1,
                parameters: parameters,
                options: options
            }, beginGetNetworkConfigurationDiagnosticOperationSpec, options);
        };
        return NetworkWatchers;
    }());
    // Operation Specifications
    var serializer$x = new msRest.Serializer(Mappers$y);
    var createOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}",
        urlParameters: [
            resourceGroupName,
            networkWatcherName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, NetworkWatcher, { required: true })
        },
        responses: {
            200: {
                bodyMapper: NetworkWatcher
            },
            201: {
                bodyMapper: NetworkWatcher
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$x
    };
    var getOperationSpec$q = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}",
        urlParameters: [
            resourceGroupName,
            networkWatcherName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkWatcher
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$x
    };
    var updateTagsOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}",
        urlParameters: [
            resourceGroupName,
            networkWatcherName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, TagsObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: NetworkWatcher
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$x
    };
    var listOperationSpec$u = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkWatcherListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$x
    };
    var listAllOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/networkWatchers",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkWatcherListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$x
    };
    var getTopologyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/topology",
        urlParameters: [
            resourceGroupName,
            networkWatcherName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, TopologyParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Topology
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$x
    };
    var beginDeleteMethodOperationSpec$i = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}",
        urlParameters: [
            resourceGroupName,
            networkWatcherName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$x
    };
    var beginVerifyIPFlowOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/ipFlowVerify",
        urlParameters: [
            resourceGroupName,
            networkWatcherName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, VerificationIPFlowParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VerificationIPFlowResult
            },
            202: {
                bodyMapper: VerificationIPFlowResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$x
    };
    var beginGetNextHopOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/nextHop",
        urlParameters: [
            resourceGroupName,
            networkWatcherName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, NextHopParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: NextHopResult
            },
            202: {
                bodyMapper: NextHopResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$x
    };
    var beginGetVMSecurityRulesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/securityGroupView",
        urlParameters: [
            resourceGroupName,
            networkWatcherName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, SecurityGroupViewParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: SecurityGroupViewResult
            },
            202: {
                bodyMapper: SecurityGroupViewResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$x
    };
    var beginGetTroubleshootingOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/troubleshoot",
        urlParameters: [
            resourceGroupName,
            networkWatcherName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, TroubleshootingParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: TroubleshootingResult
            },
            202: {
                bodyMapper: TroubleshootingResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$x
    };
    var beginGetTroubleshootingResultOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/queryTroubleshootResult",
        urlParameters: [
            resourceGroupName,
            networkWatcherName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, QueryTroubleshootingParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: TroubleshootingResult
            },
            202: {
                bodyMapper: TroubleshootingResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$x
    };
    var beginSetFlowLogConfigurationOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/configureFlowLog",
        urlParameters: [
            resourceGroupName,
            networkWatcherName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, FlowLogInformation, { required: true })
        },
        responses: {
            200: {
                bodyMapper: FlowLogInformation
            },
            202: {
                bodyMapper: FlowLogInformation
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$x
    };
    var beginGetFlowLogStatusOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/queryFlowLogStatus",
        urlParameters: [
            resourceGroupName,
            networkWatcherName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, FlowLogStatusParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: FlowLogInformation
            },
            202: {
                bodyMapper: FlowLogInformation
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$x
    };
    var beginCheckConnectivityOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectivityCheck",
        urlParameters: [
            resourceGroupName,
            networkWatcherName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ConnectivityParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ConnectivityInformation
            },
            202: {
                bodyMapper: ConnectivityInformation
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$x
    };
    var beginGetAzureReachabilityReportOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/azureReachabilityReport",
        urlParameters: [
            resourceGroupName,
            networkWatcherName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, AzureReachabilityReportParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AzureReachabilityReport
            },
            202: {
                bodyMapper: AzureReachabilityReport
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$x
    };
    var beginListAvailableProvidersOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/availableProvidersList",
        urlParameters: [
            resourceGroupName,
            networkWatcherName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, AvailableProvidersListParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AvailableProvidersList
            },
            202: {
                bodyMapper: AvailableProvidersList
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$x
    };
    var beginGetNetworkConfigurationDiagnosticOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/networkConfigurationDiagnostic",
        urlParameters: [
            resourceGroupName,
            networkWatcherName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, NetworkConfigurationDiagnosticParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: NetworkConfigurationDiagnosticResponse
            },
            202: {
                bodyMapper: NetworkConfigurationDiagnosticResponse
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$x
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$z = /*#__PURE__*/Object.freeze({
        PacketCapture: PacketCapture,
        PacketCaptureStorageLocation: PacketCaptureStorageLocation,
        PacketCaptureFilter: PacketCaptureFilter,
        PacketCaptureResult: PacketCaptureResult,
        ErrorResponse: ErrorResponse,
        ErrorDetails: ErrorDetails,
        PacketCaptureQueryStatusResult: PacketCaptureQueryStatusResult,
        PacketCaptureListResult: PacketCaptureListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a PacketCaptures. */
    var PacketCaptures = /** @class */ (function () {
        /**
         * Create a PacketCaptures.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function PacketCaptures(client) {
            this.client = client;
        }
        /**
         * Create and start a packet capture on the specified VM.
         * @param resourceGroupName The name of the resource group.
         * @param networkWatcherName The name of the network watcher.
         * @param packetCaptureName The name of the packet capture session.
         * @param parameters Parameters that define the create packet capture operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.PacketCapturesCreateResponse>
         */
        PacketCaptures.prototype.create = function (resourceGroupName$$1, networkWatcherName$$1, packetCaptureName$$1, parameters, options) {
            return this.beginCreate(resourceGroupName$$1, networkWatcherName$$1, packetCaptureName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        PacketCaptures.prototype.get = function (resourceGroupName$$1, networkWatcherName$$1, packetCaptureName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                networkWatcherName: networkWatcherName$$1,
                packetCaptureName: packetCaptureName$$1,
                options: options
            }, getOperationSpec$r, callback);
        };
        /**
         * Deletes the specified packet capture session.
         * @param resourceGroupName The name of the resource group.
         * @param networkWatcherName The name of the network watcher.
         * @param packetCaptureName The name of the packet capture session.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        PacketCaptures.prototype.deleteMethod = function (resourceGroupName$$1, networkWatcherName$$1, packetCaptureName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, networkWatcherName$$1, packetCaptureName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Stops a specified packet capture session.
         * @param resourceGroupName The name of the resource group.
         * @param networkWatcherName The name of the network watcher.
         * @param packetCaptureName The name of the packet capture session.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        PacketCaptures.prototype.stop = function (resourceGroupName$$1, networkWatcherName$$1, packetCaptureName$$1, options) {
            return this.beginStop(resourceGroupName$$1, networkWatcherName$$1, packetCaptureName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Query the status of a running packet capture session.
         * @param resourceGroupName The name of the resource group.
         * @param networkWatcherName The name of the Network Watcher resource.
         * @param packetCaptureName The name given to the packet capture session.
         * @param [options] The optional parameters
         * @returns Promise<Models.PacketCapturesGetStatusResponse>
         */
        PacketCaptures.prototype.getStatus = function (resourceGroupName$$1, networkWatcherName$$1, packetCaptureName$$1, options) {
            return this.beginGetStatus(resourceGroupName$$1, networkWatcherName$$1, packetCaptureName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        PacketCaptures.prototype.list = function (resourceGroupName$$1, networkWatcherName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                networkWatcherName: networkWatcherName$$1,
                options: options
            }, listOperationSpec$v, callback);
        };
        /**
         * Create and start a packet capture on the specified VM.
         * @param resourceGroupName The name of the resource group.
         * @param networkWatcherName The name of the network watcher.
         * @param packetCaptureName The name of the packet capture session.
         * @param parameters Parameters that define the create packet capture operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        PacketCaptures.prototype.beginCreate = function (resourceGroupName$$1, networkWatcherName$$1, packetCaptureName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                networkWatcherName: networkWatcherName$$1,
                packetCaptureName: packetCaptureName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOperationSpec, options);
        };
        /**
         * Deletes the specified packet capture session.
         * @param resourceGroupName The name of the resource group.
         * @param networkWatcherName The name of the network watcher.
         * @param packetCaptureName The name of the packet capture session.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        PacketCaptures.prototype.beginDeleteMethod = function (resourceGroupName$$1, networkWatcherName$$1, packetCaptureName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                networkWatcherName: networkWatcherName$$1,
                packetCaptureName: packetCaptureName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$j, options);
        };
        /**
         * Stops a specified packet capture session.
         * @param resourceGroupName The name of the resource group.
         * @param networkWatcherName The name of the network watcher.
         * @param packetCaptureName The name of the packet capture session.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        PacketCaptures.prototype.beginStop = function (resourceGroupName$$1, networkWatcherName$$1, packetCaptureName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                networkWatcherName: networkWatcherName$$1,
                packetCaptureName: packetCaptureName$$1,
                options: options
            }, beginStopOperationSpec$1, options);
        };
        /**
         * Query the status of a running packet capture session.
         * @param resourceGroupName The name of the resource group.
         * @param networkWatcherName The name of the Network Watcher resource.
         * @param packetCaptureName The name given to the packet capture session.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        PacketCaptures.prototype.beginGetStatus = function (resourceGroupName$$1, networkWatcherName$$1, packetCaptureName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                networkWatcherName: networkWatcherName$$1,
                packetCaptureName: packetCaptureName$$1,
                options: options
            }, beginGetStatusOperationSpec, options);
        };
        return PacketCaptures;
    }());
    // Operation Specifications
    var serializer$y = new msRest.Serializer(Mappers$z);
    var getOperationSpec$r = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/packetCaptures/{packetCaptureName}",
        urlParameters: [
            resourceGroupName,
            networkWatcherName,
            packetCaptureName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PacketCaptureResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$y
    };
    var listOperationSpec$v = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/packetCaptures",
        urlParameters: [
            resourceGroupName,
            networkWatcherName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PacketCaptureListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$y
    };
    var beginCreateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/packetCaptures/{packetCaptureName}",
        urlParameters: [
            resourceGroupName,
            networkWatcherName,
            packetCaptureName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, PacketCapture, { required: true })
        },
        responses: {
            201: {
                bodyMapper: PacketCaptureResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$y
    };
    var beginDeleteMethodOperationSpec$j = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/packetCaptures/{packetCaptureName}",
        urlParameters: [
            resourceGroupName,
            networkWatcherName,
            packetCaptureName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$y
    };
    var beginStopOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/packetCaptures/{packetCaptureName}/stop",
        urlParameters: [
            resourceGroupName,
            networkWatcherName,
            packetCaptureName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$y
    };
    var beginGetStatusOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/packetCaptures/{packetCaptureName}/queryStatus",
        urlParameters: [
            resourceGroupName,
            networkWatcherName,
            packetCaptureName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PacketCaptureQueryStatusResult
            },
            202: {
                bodyMapper: PacketCaptureQueryStatusResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$y
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$A = /*#__PURE__*/Object.freeze({
        ConnectionMonitor: ConnectionMonitor,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        ConnectionMonitorResult: ConnectionMonitorResult,
        BaseResource: BaseResource,
        ErrorResponse: ErrorResponse,
        ErrorDetails: ErrorDetails,
        ConnectionMonitorQueryResult: ConnectionMonitorQueryResult,
        ConnectionStateSnapshot: ConnectionStateSnapshot,
        ConnectivityHop: ConnectivityHop,
        ConnectivityIssue: ConnectivityIssue,
        ConnectionMonitorListResult: ConnectionMonitorListResult,
        SubResource: SubResource,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        Resource: Resource,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        NetworkInterface: NetworkInterface,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        FrontendIPConfiguration: FrontendIPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        IPConfiguration: IPConfiguration,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ConnectionMonitors. */
    var ConnectionMonitors = /** @class */ (function () {
        /**
         * Create a ConnectionMonitors.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function ConnectionMonitors(client) {
            this.client = client;
        }
        /**
         * Create or update a connection monitor.
         * @param resourceGroupName The name of the resource group containing Network Watcher.
         * @param networkWatcherName The name of the Network Watcher resource.
         * @param connectionMonitorName The name of the connection monitor.
         * @param parameters Parameters that define the operation to create a connection monitor.
         * @param [options] The optional parameters
         * @returns Promise<Models.ConnectionMonitorsCreateOrUpdateResponse>
         */
        ConnectionMonitors.prototype.createOrUpdate = function (resourceGroupName$$1, networkWatcherName$$1, connectionMonitorName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, networkWatcherName$$1, connectionMonitorName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ConnectionMonitors.prototype.get = function (resourceGroupName$$1, networkWatcherName$$1, connectionMonitorName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                networkWatcherName: networkWatcherName$$1,
                connectionMonitorName: connectionMonitorName$$1,
                options: options
            }, getOperationSpec$s, callback);
        };
        /**
         * Deletes the specified connection monitor.
         * @param resourceGroupName The name of the resource group containing Network Watcher.
         * @param networkWatcherName The name of the Network Watcher resource.
         * @param connectionMonitorName The name of the connection monitor.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ConnectionMonitors.prototype.deleteMethod = function (resourceGroupName$$1, networkWatcherName$$1, connectionMonitorName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, networkWatcherName$$1, connectionMonitorName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Stops the specified connection monitor.
         * @param resourceGroupName The name of the resource group containing Network Watcher.
         * @param networkWatcherName The name of the Network Watcher resource.
         * @param connectionMonitorName The name of the connection monitor.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ConnectionMonitors.prototype.stop = function (resourceGroupName$$1, networkWatcherName$$1, connectionMonitorName$$1, options) {
            return this.beginStop(resourceGroupName$$1, networkWatcherName$$1, connectionMonitorName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Starts the specified connection monitor.
         * @param resourceGroupName The name of the resource group containing Network Watcher.
         * @param networkWatcherName The name of the Network Watcher resource.
         * @param connectionMonitorName The name of the connection monitor.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ConnectionMonitors.prototype.start = function (resourceGroupName$$1, networkWatcherName$$1, connectionMonitorName$$1, options) {
            return this.beginStart(resourceGroupName$$1, networkWatcherName$$1, connectionMonitorName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Query a snapshot of the most recent connection states.
         * @param resourceGroupName The name of the resource group containing Network Watcher.
         * @param networkWatcherName The name of the Network Watcher resource.
         * @param connectionMonitorName The name given to the connection monitor.
         * @param [options] The optional parameters
         * @returns Promise<Models.ConnectionMonitorsQueryResponse>
         */
        ConnectionMonitors.prototype.query = function (resourceGroupName$$1, networkWatcherName$$1, connectionMonitorName$$1, options) {
            return this.beginQuery(resourceGroupName$$1, networkWatcherName$$1, connectionMonitorName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ConnectionMonitors.prototype.list = function (resourceGroupName$$1, networkWatcherName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                networkWatcherName: networkWatcherName$$1,
                options: options
            }, listOperationSpec$w, callback);
        };
        /**
         * Create or update a connection monitor.
         * @param resourceGroupName The name of the resource group containing Network Watcher.
         * @param networkWatcherName The name of the Network Watcher resource.
         * @param connectionMonitorName The name of the connection monitor.
         * @param parameters Parameters that define the operation to create a connection monitor.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ConnectionMonitors.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, networkWatcherName$$1, connectionMonitorName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                networkWatcherName: networkWatcherName$$1,
                connectionMonitorName: connectionMonitorName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$j, options);
        };
        /**
         * Deletes the specified connection monitor.
         * @param resourceGroupName The name of the resource group containing Network Watcher.
         * @param networkWatcherName The name of the Network Watcher resource.
         * @param connectionMonitorName The name of the connection monitor.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ConnectionMonitors.prototype.beginDeleteMethod = function (resourceGroupName$$1, networkWatcherName$$1, connectionMonitorName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                networkWatcherName: networkWatcherName$$1,
                connectionMonitorName: connectionMonitorName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$k, options);
        };
        /**
         * Stops the specified connection monitor.
         * @param resourceGroupName The name of the resource group containing Network Watcher.
         * @param networkWatcherName The name of the Network Watcher resource.
         * @param connectionMonitorName The name of the connection monitor.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ConnectionMonitors.prototype.beginStop = function (resourceGroupName$$1, networkWatcherName$$1, connectionMonitorName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                networkWatcherName: networkWatcherName$$1,
                connectionMonitorName: connectionMonitorName$$1,
                options: options
            }, beginStopOperationSpec$2, options);
        };
        /**
         * Starts the specified connection monitor.
         * @param resourceGroupName The name of the resource group containing Network Watcher.
         * @param networkWatcherName The name of the Network Watcher resource.
         * @param connectionMonitorName The name of the connection monitor.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ConnectionMonitors.prototype.beginStart = function (resourceGroupName$$1, networkWatcherName$$1, connectionMonitorName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                networkWatcherName: networkWatcherName$$1,
                connectionMonitorName: connectionMonitorName$$1,
                options: options
            }, beginStartOperationSpec$1, options);
        };
        /**
         * Query a snapshot of the most recent connection states.
         * @param resourceGroupName The name of the resource group containing Network Watcher.
         * @param networkWatcherName The name of the Network Watcher resource.
         * @param connectionMonitorName The name given to the connection monitor.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ConnectionMonitors.prototype.beginQuery = function (resourceGroupName$$1, networkWatcherName$$1, connectionMonitorName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                networkWatcherName: networkWatcherName$$1,
                connectionMonitorName: connectionMonitorName$$1,
                options: options
            }, beginQueryOperationSpec, options);
        };
        return ConnectionMonitors;
    }());
    // Operation Specifications
    var serializer$z = new msRest.Serializer(Mappers$A);
    var getOperationSpec$s = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}",
        urlParameters: [
            resourceGroupName,
            networkWatcherName,
            connectionMonitorName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ConnectionMonitorResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$z
    };
    var listOperationSpec$w = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors",
        urlParameters: [
            resourceGroupName,
            networkWatcherName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ConnectionMonitorListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$z
    };
    var beginCreateOrUpdateOperationSpec$j = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}",
        urlParameters: [
            resourceGroupName,
            networkWatcherName,
            connectionMonitorName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ConnectionMonitor, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ConnectionMonitorResult
            },
            201: {
                bodyMapper: ConnectionMonitorResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$z
    };
    var beginDeleteMethodOperationSpec$k = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}",
        urlParameters: [
            resourceGroupName,
            networkWatcherName,
            connectionMonitorName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$z
    };
    var beginStopOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}/stop",
        urlParameters: [
            resourceGroupName,
            networkWatcherName,
            connectionMonitorName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$z
    };
    var beginStartOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}/start",
        urlParameters: [
            resourceGroupName,
            networkWatcherName,
            connectionMonitorName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$z
    };
    var beginQueryOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}/query",
        urlParameters: [
            resourceGroupName,
            networkWatcherName,
            connectionMonitorName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ConnectionMonitorQueryResult
            },
            202: {
                bodyMapper: ConnectionMonitorQueryResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$z
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$B = /*#__PURE__*/Object.freeze({
        OperationListResult: OperationListResult,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        OperationPropertiesFormatServiceSpecification: OperationPropertiesFormatServiceSpecification,
        MetricSpecification: MetricSpecification,
        Availability: Availability,
        Dimension: Dimension,
        LogSpecification: LogSpecification,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$x, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$t, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$A = new msRest.Serializer(Mappers$B);
    var listOperationSpec$x = {
        httpMethod: "GET",
        path: "providers/Microsoft.Network/operations",
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$A
    };
    var listNextOperationSpec$t = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$A
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$C = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        PublicIPAddress: PublicIPAddress,
        Resource: Resource,
        BaseResource: BaseResource,
        PublicIPAddressSku: PublicIPAddressSku,
        IPConfiguration: IPConfiguration,
        SubResource: SubResource,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        FrontendIPConfiguration: FrontendIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        TagsObject: TagsObject,
        PublicIPAddressListResult: PublicIPAddressListResult,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a PublicIPAddresses. */
    var PublicIPAddresses = /** @class */ (function () {
        /**
         * Create a PublicIPAddresses.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function PublicIPAddresses(client) {
            this.client = client;
        }
        /**
         * Deletes the specified public IP address.
         * @param resourceGroupName The name of the resource group.
         * @param publicIpAddressName The name of the subnet.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        PublicIPAddresses.prototype.deleteMethod = function (resourceGroupName$$1, publicIpAddressName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, publicIpAddressName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        PublicIPAddresses.prototype.get = function (resourceGroupName$$1, publicIpAddressName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                publicIpAddressName: publicIpAddressName$$1,
                options: options
            }, getOperationSpec$t, callback);
        };
        /**
         * Creates or updates a static or dynamic public IP address.
         * @param resourceGroupName The name of the resource group.
         * @param publicIpAddressName The name of the public IP address.
         * @param parameters Parameters supplied to the create or update public IP address operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.PublicIPAddressesCreateOrUpdateResponse>
         */
        PublicIPAddresses.prototype.createOrUpdate = function (resourceGroupName$$1, publicIpAddressName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, publicIpAddressName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates public IP address tags.
         * @param resourceGroupName The name of the resource group.
         * @param publicIpAddressName The name of the public IP address.
         * @param parameters Parameters supplied to update public IP address tags.
         * @param [options] The optional parameters
         * @returns Promise<Models.PublicIPAddressesUpdateTagsResponse>
         */
        PublicIPAddresses.prototype.updateTags = function (resourceGroupName$$1, publicIpAddressName$$1, parameters, options) {
            return this.beginUpdateTags(resourceGroupName$$1, publicIpAddressName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        PublicIPAddresses.prototype.listAll = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listAllOperationSpec$a, callback);
        };
        PublicIPAddresses.prototype.list = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listOperationSpec$y, callback);
        };
        PublicIPAddresses.prototype.listVirtualMachineScaleSetPublicIPAddresses = function (resourceGroupName$$1, virtualMachineScaleSetName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                virtualMachineScaleSetName: virtualMachineScaleSetName$$1,
                options: options
            }, listVirtualMachineScaleSetPublicIPAddressesOperationSpec, callback);
        };
        PublicIPAddresses.prototype.listVirtualMachineScaleSetVMPublicIPAddresses = function (resourceGroupName$$1, virtualMachineScaleSetName$$1, virtualmachineIndex$$1, networkInterfaceName$$1, ipConfigurationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                virtualMachineScaleSetName: virtualMachineScaleSetName$$1,
                virtualmachineIndex: virtualmachineIndex$$1,
                networkInterfaceName: networkInterfaceName$$1,
                ipConfigurationName: ipConfigurationName$$1,
                options: options
            }, listVirtualMachineScaleSetVMPublicIPAddressesOperationSpec, callback);
        };
        PublicIPAddresses.prototype.getVirtualMachineScaleSetPublicIPAddress = function (resourceGroupName$$1, virtualMachineScaleSetName$$1, virtualmachineIndex$$1, networkInterfaceName$$1, ipConfigurationName$$1, publicIpAddressName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                virtualMachineScaleSetName: virtualMachineScaleSetName$$1,
                virtualmachineIndex: virtualmachineIndex$$1,
                networkInterfaceName: networkInterfaceName$$1,
                ipConfigurationName: ipConfigurationName$$1,
                publicIpAddressName: publicIpAddressName$$1,
                options: options
            }, getVirtualMachineScaleSetPublicIPAddressOperationSpec, callback);
        };
        /**
         * Deletes the specified public IP address.
         * @param resourceGroupName The name of the resource group.
         * @param publicIpAddressName The name of the subnet.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        PublicIPAddresses.prototype.beginDeleteMethod = function (resourceGroupName$$1, publicIpAddressName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                publicIpAddressName: publicIpAddressName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$l, options);
        };
        /**
         * Creates or updates a static or dynamic public IP address.
         * @param resourceGroupName The name of the resource group.
         * @param publicIpAddressName The name of the public IP address.
         * @param parameters Parameters supplied to the create or update public IP address operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        PublicIPAddresses.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, publicIpAddressName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                publicIpAddressName: publicIpAddressName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$k, options);
        };
        /**
         * Updates public IP address tags.
         * @param resourceGroupName The name of the resource group.
         * @param publicIpAddressName The name of the public IP address.
         * @param parameters Parameters supplied to update public IP address tags.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        PublicIPAddresses.prototype.beginUpdateTags = function (resourceGroupName$$1, publicIpAddressName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                publicIpAddressName: publicIpAddressName$$1,
                parameters: parameters,
                options: options
            }, beginUpdateTagsOperationSpec$6, options);
        };
        PublicIPAddresses.prototype.listAllNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listAllNextOperationSpec$9, callback);
        };
        PublicIPAddresses.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$u, callback);
        };
        PublicIPAddresses.prototype.listVirtualMachineScaleSetPublicIPAddressesNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listVirtualMachineScaleSetPublicIPAddressesNextOperationSpec, callback);
        };
        PublicIPAddresses.prototype.listVirtualMachineScaleSetVMPublicIPAddressesNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listVirtualMachineScaleSetVMPublicIPAddressesNextOperationSpec, callback);
        };
        return PublicIPAddresses;
    }());
    // Operation Specifications
    var serializer$B = new msRest.Serializer(Mappers$C);
    var getOperationSpec$t = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPAddresses/{publicIpAddressName}",
        urlParameters: [
            resourceGroupName,
            publicIpAddressName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0,
            expand
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PublicIPAddress
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$B
    };
    var listAllOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/publicIPAddresses",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PublicIPAddressListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$B
    };
    var listOperationSpec$y = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPAddresses",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PublicIPAddressListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$B
    };
    var listVirtualMachineScaleSetPublicIPAddressesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/publicipaddresses",
        urlParameters: [
            resourceGroupName,
            virtualMachineScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PublicIPAddressListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$B
    };
    var listVirtualMachineScaleSetVMPublicIPAddressesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/virtualMachines/{virtualmachineIndex}/networkInterfaces/{networkInterfaceName}/ipconfigurations/{ipConfigurationName}/publicipaddresses",
        urlParameters: [
            resourceGroupName,
            virtualMachineScaleSetName,
            virtualmachineIndex,
            networkInterfaceName,
            ipConfigurationName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PublicIPAddressListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$B
    };
    var getVirtualMachineScaleSetPublicIPAddressOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/virtualMachines/{virtualmachineIndex}/networkInterfaces/{networkInterfaceName}/ipconfigurations/{ipConfigurationName}/publicipaddresses/{publicIpAddressName}",
        urlParameters: [
            resourceGroupName,
            virtualMachineScaleSetName,
            virtualmachineIndex,
            networkInterfaceName,
            ipConfigurationName,
            publicIpAddressName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1,
            expand
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PublicIPAddress
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$B
    };
    var beginDeleteMethodOperationSpec$l = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPAddresses/{publicIpAddressName}",
        urlParameters: [
            resourceGroupName,
            publicIpAddressName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$B
    };
    var beginCreateOrUpdateOperationSpec$k = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPAddresses/{publicIpAddressName}",
        urlParameters: [
            resourceGroupName,
            publicIpAddressName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, PublicIPAddress, { required: true })
        },
        responses: {
            200: {
                bodyMapper: PublicIPAddress
            },
            201: {
                bodyMapper: PublicIPAddress
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$B
    };
    var beginUpdateTagsOperationSpec$6 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPAddresses/{publicIpAddressName}",
        urlParameters: [
            resourceGroupName,
            publicIpAddressName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, TagsObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: PublicIPAddress
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$B
    };
    var listAllNextOperationSpec$9 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PublicIPAddressListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$B
    };
    var listNextOperationSpec$u = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PublicIPAddressListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$B
    };
    var listVirtualMachineScaleSetPublicIPAddressesNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PublicIPAddressListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$B
    };
    var listVirtualMachineScaleSetVMPublicIPAddressesNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PublicIPAddressListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$B
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$D = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        PublicIPPrefix: PublicIPPrefix,
        Resource: Resource,
        BaseResource: BaseResource,
        PublicIPPrefixSku: PublicIPPrefixSku,
        IpTag: IpTag,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        TagsObject: TagsObject,
        PublicIPPrefixListResult: PublicIPPrefixListResult,
        SubResource: SubResource,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        SecurityRule: SecurityRule,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        NetworkInterface: NetworkInterface,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        FrontendIPConfiguration: FrontendIPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        IPConfiguration: IPConfiguration,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a PublicIPPrefixes. */
    var PublicIPPrefixes = /** @class */ (function () {
        /**
         * Create a PublicIPPrefixes.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function PublicIPPrefixes(client) {
            this.client = client;
        }
        /**
         * Deletes the specified public IP prefix.
         * @param resourceGroupName The name of the resource group.
         * @param publicIpPrefixName The name of the PublicIpPrefix.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        PublicIPPrefixes.prototype.deleteMethod = function (resourceGroupName$$1, publicIpPrefixName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, publicIpPrefixName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        PublicIPPrefixes.prototype.get = function (resourceGroupName$$1, publicIpPrefixName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                publicIpPrefixName: publicIpPrefixName$$1,
                options: options
            }, getOperationSpec$u, callback);
        };
        /**
         * Creates or updates a static or dynamic public IP prefix.
         * @param resourceGroupName The name of the resource group.
         * @param publicIpPrefixName The name of the public IP prefix.
         * @param parameters Parameters supplied to the create or update public IP prefix operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.PublicIPPrefixesCreateOrUpdateResponse>
         */
        PublicIPPrefixes.prototype.createOrUpdate = function (resourceGroupName$$1, publicIpPrefixName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, publicIpPrefixName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates public IP prefix tags.
         * @param resourceGroupName The name of the resource group.
         * @param publicIpPrefixName The name of the public IP prefix.
         * @param parameters Parameters supplied to update public IP prefix tags.
         * @param [options] The optional parameters
         * @returns Promise<Models.PublicIPPrefixesUpdateTagsResponse>
         */
        PublicIPPrefixes.prototype.updateTags = function (resourceGroupName$$1, publicIpPrefixName$$1, parameters, options) {
            return this.beginUpdateTags(resourceGroupName$$1, publicIpPrefixName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        PublicIPPrefixes.prototype.listAll = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listAllOperationSpec$b, callback);
        };
        PublicIPPrefixes.prototype.list = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listOperationSpec$z, callback);
        };
        /**
         * Deletes the specified public IP prefix.
         * @param resourceGroupName The name of the resource group.
         * @param publicIpPrefixName The name of the PublicIpPrefix.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        PublicIPPrefixes.prototype.beginDeleteMethod = function (resourceGroupName$$1, publicIpPrefixName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                publicIpPrefixName: publicIpPrefixName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$m, options);
        };
        /**
         * Creates or updates a static or dynamic public IP prefix.
         * @param resourceGroupName The name of the resource group.
         * @param publicIpPrefixName The name of the public IP prefix.
         * @param parameters Parameters supplied to the create or update public IP prefix operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        PublicIPPrefixes.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, publicIpPrefixName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                publicIpPrefixName: publicIpPrefixName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$l, options);
        };
        /**
         * Updates public IP prefix tags.
         * @param resourceGroupName The name of the resource group.
         * @param publicIpPrefixName The name of the public IP prefix.
         * @param parameters Parameters supplied to update public IP prefix tags.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        PublicIPPrefixes.prototype.beginUpdateTags = function (resourceGroupName$$1, publicIpPrefixName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                publicIpPrefixName: publicIpPrefixName$$1,
                parameters: parameters,
                options: options
            }, beginUpdateTagsOperationSpec$7, options);
        };
        PublicIPPrefixes.prototype.listAllNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listAllNextOperationSpec$a, callback);
        };
        PublicIPPrefixes.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$v, callback);
        };
        return PublicIPPrefixes;
    }());
    // Operation Specifications
    var serializer$C = new msRest.Serializer(Mappers$D);
    var getOperationSpec$u = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPPrefixes/{publicIpPrefixName}",
        urlParameters: [
            resourceGroupName,
            publicIpPrefixName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0,
            expand
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PublicIPPrefix
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$C
    };
    var listAllOperationSpec$b = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/publicIPPrefixes",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PublicIPPrefixListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$C
    };
    var listOperationSpec$z = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPPrefixes",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PublicIPPrefixListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$C
    };
    var beginDeleteMethodOperationSpec$m = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPPrefixes/{publicIpPrefixName}",
        urlParameters: [
            resourceGroupName,
            publicIpPrefixName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$C
    };
    var beginCreateOrUpdateOperationSpec$l = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPPrefixes/{publicIpPrefixName}",
        urlParameters: [
            resourceGroupName,
            publicIpPrefixName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, PublicIPPrefix, { required: true })
        },
        responses: {
            200: {
                bodyMapper: PublicIPPrefix
            },
            201: {
                bodyMapper: PublicIPPrefix
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$C
    };
    var beginUpdateTagsOperationSpec$7 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPPrefixes/{publicIpPrefixName}",
        urlParameters: [
            resourceGroupName,
            publicIpPrefixName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, TagsObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: PublicIPPrefix
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$C
    };
    var listAllNextOperationSpec$a = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PublicIPPrefixListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$C
    };
    var listNextOperationSpec$v = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PublicIPPrefixListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$C
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$E = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        RouteFilter: RouteFilter,
        Resource: Resource,
        BaseResource: BaseResource,
        RouteFilterRule: RouteFilterRule,
        SubResource: SubResource,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        PatchRouteFilter: PatchRouteFilter,
        RouteFilterListResult: RouteFilterListResult,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        FrontendIPConfiguration: FrontendIPConfiguration,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a RouteFilters. */
    var RouteFilters = /** @class */ (function () {
        /**
         * Create a RouteFilters.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function RouteFilters(client) {
            this.client = client;
        }
        /**
         * Deletes the specified route filter.
         * @param resourceGroupName The name of the resource group.
         * @param routeFilterName The name of the route filter.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        RouteFilters.prototype.deleteMethod = function (resourceGroupName$$1, routeFilterName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, routeFilterName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        RouteFilters.prototype.get = function (resourceGroupName$$1, routeFilterName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                routeFilterName: routeFilterName$$1,
                options: options
            }, getOperationSpec$v, callback);
        };
        /**
         * Creates or updates a route filter in a specified resource group.
         * @param resourceGroupName The name of the resource group.
         * @param routeFilterName The name of the route filter.
         * @param routeFilterParameters Parameters supplied to the create or update route filter operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.RouteFiltersCreateOrUpdateResponse>
         */
        RouteFilters.prototype.createOrUpdate = function (resourceGroupName$$1, routeFilterName$$1, routeFilterParameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, routeFilterName$$1, routeFilterParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a route filter in a specified resource group.
         * @param resourceGroupName The name of the resource group.
         * @param routeFilterName The name of the route filter.
         * @param routeFilterParameters Parameters supplied to the update route filter operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.RouteFiltersUpdateResponse>
         */
        RouteFilters.prototype.update = function (resourceGroupName$$1, routeFilterName$$1, routeFilterParameters, options) {
            return this.beginUpdate(resourceGroupName$$1, routeFilterName$$1, routeFilterParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        RouteFilters.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec$3, callback);
        };
        RouteFilters.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$A, callback);
        };
        /**
         * Deletes the specified route filter.
         * @param resourceGroupName The name of the resource group.
         * @param routeFilterName The name of the route filter.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        RouteFilters.prototype.beginDeleteMethod = function (resourceGroupName$$1, routeFilterName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                routeFilterName: routeFilterName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$n, options);
        };
        /**
         * Creates or updates a route filter in a specified resource group.
         * @param resourceGroupName The name of the resource group.
         * @param routeFilterName The name of the route filter.
         * @param routeFilterParameters Parameters supplied to the create or update route filter operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        RouteFilters.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, routeFilterName$$1, routeFilterParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                routeFilterName: routeFilterName$$1,
                routeFilterParameters: routeFilterParameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$m, options);
        };
        /**
         * Updates a route filter in a specified resource group.
         * @param resourceGroupName The name of the resource group.
         * @param routeFilterName The name of the route filter.
         * @param routeFilterParameters Parameters supplied to the update route filter operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        RouteFilters.prototype.beginUpdate = function (resourceGroupName$$1, routeFilterName$$1, routeFilterParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                routeFilterName: routeFilterName$$1,
                routeFilterParameters: routeFilterParameters,
                options: options
            }, beginUpdateOperationSpec, options);
        };
        RouteFilters.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec$2, callback);
        };
        RouteFilters.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$w, callback);
        };
        return RouteFilters;
    }());
    // Operation Specifications
    var serializer$D = new msRest.Serializer(Mappers$E);
    var getOperationSpec$v = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}",
        urlParameters: [
            resourceGroupName,
            routeFilterName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0,
            expand
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RouteFilter
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$D
    };
    var listByResourceGroupOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RouteFilterListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$D
    };
    var listOperationSpec$A = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/routeFilters",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RouteFilterListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$D
    };
    var beginDeleteMethodOperationSpec$n = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}",
        urlParameters: [
            resourceGroupName,
            routeFilterName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$D
    };
    var beginCreateOrUpdateOperationSpec$m = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}",
        urlParameters: [
            resourceGroupName,
            routeFilterName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "routeFilterParameters",
            mapper: __assign({}, RouteFilter, { required: true })
        },
        responses: {
            200: {
                bodyMapper: RouteFilter
            },
            201: {
                bodyMapper: RouteFilter
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$D
    };
    var beginUpdateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}",
        urlParameters: [
            resourceGroupName,
            routeFilterName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "routeFilterParameters",
            mapper: __assign({}, PatchRouteFilter, { required: true })
        },
        responses: {
            200: {
                bodyMapper: RouteFilter
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$D
    };
    var listByResourceGroupNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RouteFilterListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$D
    };
    var listNextOperationSpec$w = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RouteFilterListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$D
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$F = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        RouteFilterRule: RouteFilterRule,
        SubResource: SubResource,
        BaseResource: BaseResource,
        PatchRouteFilterRule: PatchRouteFilterRule,
        RouteFilterRuleListResult: RouteFilterRuleListResult,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        Resource: Resource,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        FrontendIPConfiguration: FrontendIPConfiguration,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a RouteFilterRules. */
    var RouteFilterRules = /** @class */ (function () {
        /**
         * Create a RouteFilterRules.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function RouteFilterRules(client) {
            this.client = client;
        }
        /**
         * Deletes the specified rule from a route filter.
         * @param resourceGroupName The name of the resource group.
         * @param routeFilterName The name of the route filter.
         * @param ruleName The name of the rule.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        RouteFilterRules.prototype.deleteMethod = function (resourceGroupName$$1, routeFilterName$$1, ruleName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, routeFilterName$$1, ruleName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        RouteFilterRules.prototype.get = function (resourceGroupName$$1, routeFilterName$$1, ruleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                routeFilterName: routeFilterName$$1,
                ruleName: ruleName$$1,
                options: options
            }, getOperationSpec$w, callback);
        };
        /**
         * Creates or updates a route in the specified route filter.
         * @param resourceGroupName The name of the resource group.
         * @param routeFilterName The name of the route filter.
         * @param ruleName The name of the route filter rule.
         * @param routeFilterRuleParameters Parameters supplied to the create or update route filter rule
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.RouteFilterRulesCreateOrUpdateResponse>
         */
        RouteFilterRules.prototype.createOrUpdate = function (resourceGroupName$$1, routeFilterName$$1, ruleName$$1, routeFilterRuleParameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, routeFilterName$$1, ruleName$$1, routeFilterRuleParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a route in the specified route filter.
         * @param resourceGroupName The name of the resource group.
         * @param routeFilterName The name of the route filter.
         * @param ruleName The name of the route filter rule.
         * @param routeFilterRuleParameters Parameters supplied to the update route filter rule operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.RouteFilterRulesUpdateResponse>
         */
        RouteFilterRules.prototype.update = function (resourceGroupName$$1, routeFilterName$$1, ruleName$$1, routeFilterRuleParameters, options) {
            return this.beginUpdate(resourceGroupName$$1, routeFilterName$$1, ruleName$$1, routeFilterRuleParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        RouteFilterRules.prototype.listByRouteFilter = function (resourceGroupName$$1, routeFilterName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                routeFilterName: routeFilterName$$1,
                options: options
            }, listByRouteFilterOperationSpec, callback);
        };
        /**
         * Deletes the specified rule from a route filter.
         * @param resourceGroupName The name of the resource group.
         * @param routeFilterName The name of the route filter.
         * @param ruleName The name of the rule.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        RouteFilterRules.prototype.beginDeleteMethod = function (resourceGroupName$$1, routeFilterName$$1, ruleName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                routeFilterName: routeFilterName$$1,
                ruleName: ruleName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$o, options);
        };
        /**
         * Creates or updates a route in the specified route filter.
         * @param resourceGroupName The name of the resource group.
         * @param routeFilterName The name of the route filter.
         * @param ruleName The name of the route filter rule.
         * @param routeFilterRuleParameters Parameters supplied to the create or update route filter rule
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        RouteFilterRules.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, routeFilterName$$1, ruleName$$1, routeFilterRuleParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                routeFilterName: routeFilterName$$1,
                ruleName: ruleName$$1,
                routeFilterRuleParameters: routeFilterRuleParameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$n, options);
        };
        /**
         * Updates a route in the specified route filter.
         * @param resourceGroupName The name of the resource group.
         * @param routeFilterName The name of the route filter.
         * @param ruleName The name of the route filter rule.
         * @param routeFilterRuleParameters Parameters supplied to the update route filter rule operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        RouteFilterRules.prototype.beginUpdate = function (resourceGroupName$$1, routeFilterName$$1, ruleName$$1, routeFilterRuleParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                routeFilterName: routeFilterName$$1,
                ruleName: ruleName$$1,
                routeFilterRuleParameters: routeFilterRuleParameters,
                options: options
            }, beginUpdateOperationSpec$1, options);
        };
        RouteFilterRules.prototype.listByRouteFilterNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByRouteFilterNextOperationSpec, callback);
        };
        return RouteFilterRules;
    }());
    // Operation Specifications
    var serializer$E = new msRest.Serializer(Mappers$F);
    var getOperationSpec$w = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}/routeFilterRules/{ruleName}",
        urlParameters: [
            resourceGroupName,
            routeFilterName,
            ruleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RouteFilterRule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$E
    };
    var listByRouteFilterOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}/routeFilterRules",
        urlParameters: [
            resourceGroupName,
            routeFilterName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RouteFilterRuleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$E
    };
    var beginDeleteMethodOperationSpec$o = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}/routeFilterRules/{ruleName}",
        urlParameters: [
            resourceGroupName,
            routeFilterName,
            ruleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$E
    };
    var beginCreateOrUpdateOperationSpec$n = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}/routeFilterRules/{ruleName}",
        urlParameters: [
            resourceGroupName,
            routeFilterName,
            ruleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "routeFilterRuleParameters",
            mapper: __assign({}, RouteFilterRule, { required: true })
        },
        responses: {
            200: {
                bodyMapper: RouteFilterRule
            },
            201: {
                bodyMapper: RouteFilterRule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$E
    };
    var beginUpdateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}/routeFilterRules/{ruleName}",
        urlParameters: [
            resourceGroupName,
            routeFilterName,
            ruleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "routeFilterRuleParameters",
            mapper: __assign({}, PatchRouteFilterRule, { required: true })
        },
        responses: {
            200: {
                bodyMapper: RouteFilterRule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$E
    };
    var listByRouteFilterNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RouteFilterRuleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$E
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$G = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        RouteTable: RouteTable,
        Resource: Resource,
        BaseResource: BaseResource,
        Route: Route,
        SubResource: SubResource,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        FrontendIPConfiguration: FrontendIPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        IPConfiguration: IPConfiguration,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        TagsObject: TagsObject,
        RouteTableListResult: RouteTableListResult,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a RouteTables. */
    var RouteTables = /** @class */ (function () {
        /**
         * Create a RouteTables.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function RouteTables(client) {
            this.client = client;
        }
        /**
         * Deletes the specified route table.
         * @param resourceGroupName The name of the resource group.
         * @param routeTableName The name of the route table.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        RouteTables.prototype.deleteMethod = function (resourceGroupName$$1, routeTableName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, routeTableName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        RouteTables.prototype.get = function (resourceGroupName$$1, routeTableName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                routeTableName: routeTableName$$1,
                options: options
            }, getOperationSpec$x, callback);
        };
        /**
         * Create or updates a route table in a specified resource group.
         * @param resourceGroupName The name of the resource group.
         * @param routeTableName The name of the route table.
         * @param parameters Parameters supplied to the create or update route table operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.RouteTablesCreateOrUpdateResponse>
         */
        RouteTables.prototype.createOrUpdate = function (resourceGroupName$$1, routeTableName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, routeTableName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a route table tags.
         * @param resourceGroupName The name of the resource group.
         * @param routeTableName The name of the route table.
         * @param parameters Parameters supplied to update route table tags.
         * @param [options] The optional parameters
         * @returns Promise<Models.RouteTablesUpdateTagsResponse>
         */
        RouteTables.prototype.updateTags = function (resourceGroupName$$1, routeTableName$$1, parameters, options) {
            return this.beginUpdateTags(resourceGroupName$$1, routeTableName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        RouteTables.prototype.list = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listOperationSpec$B, callback);
        };
        RouteTables.prototype.listAll = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listAllOperationSpec$c, callback);
        };
        /**
         * Deletes the specified route table.
         * @param resourceGroupName The name of the resource group.
         * @param routeTableName The name of the route table.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        RouteTables.prototype.beginDeleteMethod = function (resourceGroupName$$1, routeTableName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                routeTableName: routeTableName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$p, options);
        };
        /**
         * Create or updates a route table in a specified resource group.
         * @param resourceGroupName The name of the resource group.
         * @param routeTableName The name of the route table.
         * @param parameters Parameters supplied to the create or update route table operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        RouteTables.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, routeTableName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                routeTableName: routeTableName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$o, options);
        };
        /**
         * Updates a route table tags.
         * @param resourceGroupName The name of the resource group.
         * @param routeTableName The name of the route table.
         * @param parameters Parameters supplied to update route table tags.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        RouteTables.prototype.beginUpdateTags = function (resourceGroupName$$1, routeTableName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                routeTableName: routeTableName$$1,
                parameters: parameters,
                options: options
            }, beginUpdateTagsOperationSpec$8, options);
        };
        RouteTables.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$x, callback);
        };
        RouteTables.prototype.listAllNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listAllNextOperationSpec$b, callback);
        };
        return RouteTables;
    }());
    // Operation Specifications
    var serializer$F = new msRest.Serializer(Mappers$G);
    var getOperationSpec$x = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}",
        urlParameters: [
            resourceGroupName,
            routeTableName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0,
            expand
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RouteTable
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$F
    };
    var listOperationSpec$B = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RouteTableListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$F
    };
    var listAllOperationSpec$c = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/routeTables",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RouteTableListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$F
    };
    var beginDeleteMethodOperationSpec$p = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}",
        urlParameters: [
            resourceGroupName,
            routeTableName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$F
    };
    var beginCreateOrUpdateOperationSpec$o = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}",
        urlParameters: [
            resourceGroupName,
            routeTableName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, RouteTable, { required: true })
        },
        responses: {
            200: {
                bodyMapper: RouteTable
            },
            201: {
                bodyMapper: RouteTable
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$F
    };
    var beginUpdateTagsOperationSpec$8 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}",
        urlParameters: [
            resourceGroupName,
            routeTableName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, TagsObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: RouteTable
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$F
    };
    var listNextOperationSpec$x = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RouteTableListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$F
    };
    var listAllNextOperationSpec$b = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RouteTableListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$F
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$H = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        Route: Route,
        SubResource: SubResource,
        BaseResource: BaseResource,
        RouteListResult: RouteListResult,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        Resource: Resource,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        FrontendIPConfiguration: FrontendIPConfiguration,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Routes. */
    var Routes = /** @class */ (function () {
        /**
         * Create a Routes.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function Routes(client) {
            this.client = client;
        }
        /**
         * Deletes the specified route from a route table.
         * @param resourceGroupName The name of the resource group.
         * @param routeTableName The name of the route table.
         * @param routeName The name of the route.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Routes.prototype.deleteMethod = function (resourceGroupName$$1, routeTableName$$1, routeName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, routeTableName$$1, routeName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Routes.prototype.get = function (resourceGroupName$$1, routeTableName$$1, routeName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                routeTableName: routeTableName$$1,
                routeName: routeName$$1,
                options: options
            }, getOperationSpec$y, callback);
        };
        /**
         * Creates or updates a route in the specified route table.
         * @param resourceGroupName The name of the resource group.
         * @param routeTableName The name of the route table.
         * @param routeName The name of the route.
         * @param routeParameters Parameters supplied to the create or update route operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.RoutesCreateOrUpdateResponse>
         */
        Routes.prototype.createOrUpdate = function (resourceGroupName$$1, routeTableName$$1, routeName$$1, routeParameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, routeTableName$$1, routeName$$1, routeParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Routes.prototype.list = function (resourceGroupName$$1, routeTableName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                routeTableName: routeTableName$$1,
                options: options
            }, listOperationSpec$C, callback);
        };
        /**
         * Deletes the specified route from a route table.
         * @param resourceGroupName The name of the resource group.
         * @param routeTableName The name of the route table.
         * @param routeName The name of the route.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Routes.prototype.beginDeleteMethod = function (resourceGroupName$$1, routeTableName$$1, routeName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                routeTableName: routeTableName$$1,
                routeName: routeName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$q, options);
        };
        /**
         * Creates or updates a route in the specified route table.
         * @param resourceGroupName The name of the resource group.
         * @param routeTableName The name of the route table.
         * @param routeName The name of the route.
         * @param routeParameters Parameters supplied to the create or update route operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Routes.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, routeTableName$$1, routeName$$1, routeParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                routeTableName: routeTableName$$1,
                routeName: routeName$$1,
                routeParameters: routeParameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$p, options);
        };
        Routes.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$y, callback);
        };
        return Routes;
    }());
    // Operation Specifications
    var serializer$G = new msRest.Serializer(Mappers$H);
    var getOperationSpec$y = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}/routes/{routeName}",
        urlParameters: [
            resourceGroupName,
            routeTableName,
            routeName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Route
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$G
    };
    var listOperationSpec$C = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}/routes",
        urlParameters: [
            resourceGroupName,
            routeTableName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RouteListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$G
    };
    var beginDeleteMethodOperationSpec$q = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}/routes/{routeName}",
        urlParameters: [
            resourceGroupName,
            routeTableName,
            routeName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$G
    };
    var beginCreateOrUpdateOperationSpec$p = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}/routes/{routeName}",
        urlParameters: [
            resourceGroupName,
            routeTableName,
            routeName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "routeParameters",
            mapper: __assign({}, Route, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Route
            },
            201: {
                bodyMapper: Route
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$G
    };
    var listNextOperationSpec$y = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RouteListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$G
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$I = /*#__PURE__*/Object.freeze({
        BgpServiceCommunityListResult: BgpServiceCommunityListResult,
        BgpServiceCommunity: BgpServiceCommunity,
        Resource: Resource,
        BaseResource: BaseResource,
        BGPCommunity: BGPCommunity,
        CloudError: CloudError,
        SubResource: SubResource,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        SecurityRule: SecurityRule,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        NetworkInterface: NetworkInterface,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        FrontendIPConfiguration: FrontendIPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        IPConfiguration: IPConfiguration,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a BgpServiceCommunities. */
    var BgpServiceCommunities = /** @class */ (function () {
        /**
         * Create a BgpServiceCommunities.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function BgpServiceCommunities(client) {
            this.client = client;
        }
        BgpServiceCommunities.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$D, callback);
        };
        BgpServiceCommunities.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$z, callback);
        };
        return BgpServiceCommunities;
    }());
    // Operation Specifications
    var serializer$H = new msRest.Serializer(Mappers$I);
    var listOperationSpec$D = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/bgpServiceCommunities",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BgpServiceCommunityListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$H
    };
    var listNextOperationSpec$z = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BgpServiceCommunityListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$H
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$J = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        Resource: Resource,
        BaseResource: BaseResource,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        SubResource: SubResource,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        FrontendIPConfiguration: FrontendIPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        IPConfiguration: IPConfiguration,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        TagsObject: TagsObject,
        ServiceEndpointPolicyListResult: ServiceEndpointPolicyListResult,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServiceEndpointPolicies. */
    var ServiceEndpointPolicies = /** @class */ (function () {
        /**
         * Create a ServiceEndpointPolicies.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function ServiceEndpointPolicies(client) {
            this.client = client;
        }
        /**
         * Deletes the specified service endpoint policy.
         * @param resourceGroupName The name of the resource group.
         * @param serviceEndpointPolicyName The name of the service endpoint policy.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ServiceEndpointPolicies.prototype.deleteMethod = function (resourceGroupName$$1, serviceEndpointPolicyName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, serviceEndpointPolicyName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ServiceEndpointPolicies.prototype.get = function (resourceGroupName$$1, serviceEndpointPolicyName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serviceEndpointPolicyName: serviceEndpointPolicyName$$1,
                options: options
            }, getOperationSpec$z, callback);
        };
        /**
         * Creates or updates a service Endpoint Policies.
         * @param resourceGroupName The name of the resource group.
         * @param serviceEndpointPolicyName The name of the service endpoint policy.
         * @param parameters Parameters supplied to the create or update service endpoint policy operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.ServiceEndpointPoliciesCreateOrUpdateResponse>
         */
        ServiceEndpointPolicies.prototype.createOrUpdate = function (resourceGroupName$$1, serviceEndpointPolicyName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, serviceEndpointPolicyName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates service Endpoint Policies.
         * @param resourceGroupName The name of the resource group.
         * @param serviceEndpointPolicyName The name of the service endpoint policy.
         * @param parameters Parameters supplied to update service endpoint policy tags.
         * @param [options] The optional parameters
         * @returns Promise<Models.ServiceEndpointPoliciesUpdateResponse>
         */
        ServiceEndpointPolicies.prototype.update = function (resourceGroupName$$1, serviceEndpointPolicyName$$1, parameters, options) {
            return this.beginUpdate(resourceGroupName$$1, serviceEndpointPolicyName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ServiceEndpointPolicies.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$E, callback);
        };
        ServiceEndpointPolicies.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec$4, callback);
        };
        /**
         * Deletes the specified service endpoint policy.
         * @param resourceGroupName The name of the resource group.
         * @param serviceEndpointPolicyName The name of the service endpoint policy.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ServiceEndpointPolicies.prototype.beginDeleteMethod = function (resourceGroupName$$1, serviceEndpointPolicyName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serviceEndpointPolicyName: serviceEndpointPolicyName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$r, options);
        };
        /**
         * Creates or updates a service Endpoint Policies.
         * @param resourceGroupName The name of the resource group.
         * @param serviceEndpointPolicyName The name of the service endpoint policy.
         * @param parameters Parameters supplied to the create or update service endpoint policy operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ServiceEndpointPolicies.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, serviceEndpointPolicyName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serviceEndpointPolicyName: serviceEndpointPolicyName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$q, options);
        };
        /**
         * Updates service Endpoint Policies.
         * @param resourceGroupName The name of the resource group.
         * @param serviceEndpointPolicyName The name of the service endpoint policy.
         * @param parameters Parameters supplied to update service endpoint policy tags.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ServiceEndpointPolicies.prototype.beginUpdate = function (resourceGroupName$$1, serviceEndpointPolicyName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serviceEndpointPolicyName: serviceEndpointPolicyName$$1,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec$2, options);
        };
        ServiceEndpointPolicies.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$A, callback);
        };
        ServiceEndpointPolicies.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec$3, callback);
        };
        return ServiceEndpointPolicies;
    }());
    // Operation Specifications
    var serializer$I = new msRest.Serializer(Mappers$J);
    var getOperationSpec$z = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/serviceEndpointPolicies/{serviceEndpointPolicyName}",
        urlParameters: [
            resourceGroupName,
            serviceEndpointPolicyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0,
            expand
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceEndpointPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$I
    };
    var listOperationSpec$E = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/ServiceEndpointPolicies",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceEndpointPolicyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$I
    };
    var listByResourceGroupOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/serviceEndpointPolicies",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceEndpointPolicyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$I
    };
    var beginDeleteMethodOperationSpec$r = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/serviceEndpointPolicies/{serviceEndpointPolicyName}",
        urlParameters: [
            resourceGroupName,
            serviceEndpointPolicyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$I
    };
    var beginCreateOrUpdateOperationSpec$q = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/serviceEndpointPolicies/{serviceEndpointPolicyName}",
        urlParameters: [
            resourceGroupName,
            serviceEndpointPolicyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ServiceEndpointPolicy, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ServiceEndpointPolicy
            },
            201: {
                bodyMapper: ServiceEndpointPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$I
    };
    var beginUpdateOperationSpec$2 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/serviceEndpointPolicies/{serviceEndpointPolicyName}",
        urlParameters: [
            resourceGroupName,
            serviceEndpointPolicyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, TagsObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ServiceEndpointPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$I
    };
    var listNextOperationSpec$A = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceEndpointPolicyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$I
    };
    var listByResourceGroupNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceEndpointPolicyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$I
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$K = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        SubResource: SubResource,
        BaseResource: BaseResource,
        ServiceEndpointPolicyDefinitionListResult: ServiceEndpointPolicyDefinitionListResult,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        Resource: Resource,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        FrontendIPConfiguration: FrontendIPConfiguration,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServiceEndpointPolicyDefinitions. */
    var ServiceEndpointPolicyDefinitions = /** @class */ (function () {
        /**
         * Create a ServiceEndpointPolicyDefinitions.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function ServiceEndpointPolicyDefinitions(client) {
            this.client = client;
        }
        /**
         * Deletes the specified ServiceEndpoint policy definitions.
         * @param resourceGroupName The name of the resource group.
         * @param serviceEndpointPolicyName The name of the Service Endpoint Policy.
         * @param serviceEndpointPolicyDefinitionName The name of the service endpoint policy definition.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ServiceEndpointPolicyDefinitions.prototype.deleteMethod = function (resourceGroupName$$1, serviceEndpointPolicyName$$1, serviceEndpointPolicyDefinitionName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, serviceEndpointPolicyName$$1, serviceEndpointPolicyDefinitionName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ServiceEndpointPolicyDefinitions.prototype.get = function (resourceGroupName$$1, serviceEndpointPolicyName$$1, serviceEndpointPolicyDefinitionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serviceEndpointPolicyName: serviceEndpointPolicyName$$1,
                serviceEndpointPolicyDefinitionName: serviceEndpointPolicyDefinitionName$$1,
                options: options
            }, getOperationSpec$A, callback);
        };
        /**
         * Creates or updates a service endpoint policy definition in the specified service endpoint
         * policy.
         * @param resourceGroupName The name of the resource group.
         * @param serviceEndpointPolicyName The name of the service endpoint policy.
         * @param serviceEndpointPolicyDefinitionName The name of the service endpoint policy definition
         * name.
         * @param serviceEndpointPolicyDefinitions Parameters supplied to the create or update service
         * endpoint policy operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.ServiceEndpointPolicyDefinitionsCreateOrUpdateResponse>
         */
        ServiceEndpointPolicyDefinitions.prototype.createOrUpdate = function (resourceGroupName$$1, serviceEndpointPolicyName$$1, serviceEndpointPolicyDefinitionName$$1, serviceEndpointPolicyDefinitions, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, serviceEndpointPolicyName$$1, serviceEndpointPolicyDefinitionName$$1, serviceEndpointPolicyDefinitions, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ServiceEndpointPolicyDefinitions.prototype.listByResourceGroup = function (resourceGroupName$$1, serviceEndpointPolicyName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serviceEndpointPolicyName: serviceEndpointPolicyName$$1,
                options: options
            }, listByResourceGroupOperationSpec$5, callback);
        };
        /**
         * Deletes the specified ServiceEndpoint policy definitions.
         * @param resourceGroupName The name of the resource group.
         * @param serviceEndpointPolicyName The name of the Service Endpoint Policy.
         * @param serviceEndpointPolicyDefinitionName The name of the service endpoint policy definition.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ServiceEndpointPolicyDefinitions.prototype.beginDeleteMethod = function (resourceGroupName$$1, serviceEndpointPolicyName$$1, serviceEndpointPolicyDefinitionName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serviceEndpointPolicyName: serviceEndpointPolicyName$$1,
                serviceEndpointPolicyDefinitionName: serviceEndpointPolicyDefinitionName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$s, options);
        };
        /**
         * Creates or updates a service endpoint policy definition in the specified service endpoint
         * policy.
         * @param resourceGroupName The name of the resource group.
         * @param serviceEndpointPolicyName The name of the service endpoint policy.
         * @param serviceEndpointPolicyDefinitionName The name of the service endpoint policy definition
         * name.
         * @param serviceEndpointPolicyDefinitions Parameters supplied to the create or update service
         * endpoint policy operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ServiceEndpointPolicyDefinitions.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, serviceEndpointPolicyName$$1, serviceEndpointPolicyDefinitionName$$1, serviceEndpointPolicyDefinitions, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serviceEndpointPolicyName: serviceEndpointPolicyName$$1,
                serviceEndpointPolicyDefinitionName: serviceEndpointPolicyDefinitionName$$1,
                serviceEndpointPolicyDefinitions: serviceEndpointPolicyDefinitions,
                options: options
            }, beginCreateOrUpdateOperationSpec$r, options);
        };
        ServiceEndpointPolicyDefinitions.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec$4, callback);
        };
        return ServiceEndpointPolicyDefinitions;
    }());
    // Operation Specifications
    var serializer$J = new msRest.Serializer(Mappers$K);
    var getOperationSpec$A = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/serviceEndpointPolicies/{serviceEndpointPolicyName}/serviceEndpointPolicyDefinitions/{serviceEndpointPolicyDefinitionName}",
        urlParameters: [
            resourceGroupName,
            serviceEndpointPolicyName,
            serviceEndpointPolicyDefinitionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceEndpointPolicyDefinition
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$J
    };
    var listByResourceGroupOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/serviceEndpointPolicies/{serviceEndpointPolicyName}/serviceEndpointPolicyDefinitions",
        urlParameters: [
            resourceGroupName,
            serviceEndpointPolicyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceEndpointPolicyDefinitionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$J
    };
    var beginDeleteMethodOperationSpec$s = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/serviceEndpointPolicies/{serviceEndpointPolicyName}/serviceEndpointPolicyDefinitions/{serviceEndpointPolicyDefinitionName}",
        urlParameters: [
            resourceGroupName,
            serviceEndpointPolicyName,
            serviceEndpointPolicyDefinitionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$J
    };
    var beginCreateOrUpdateOperationSpec$r = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/serviceEndpointPolicies/{serviceEndpointPolicyName}/serviceEndpointPolicyDefinitions/{serviceEndpointPolicyDefinitionName}",
        urlParameters: [
            resourceGroupName,
            serviceEndpointPolicyName,
            serviceEndpointPolicyDefinitionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "serviceEndpointPolicyDefinitions",
            mapper: __assign({}, ServiceEndpointPolicyDefinition, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ServiceEndpointPolicyDefinition
            },
            201: {
                bodyMapper: ServiceEndpointPolicyDefinition
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$J
    };
    var listByResourceGroupNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceEndpointPolicyDefinitionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$J
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$L = /*#__PURE__*/Object.freeze({
        UsagesListResult: UsagesListResult,
        Usage: Usage,
        UsageName: UsageName,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Usages. */
    var Usages = /** @class */ (function () {
        /**
         * Create a Usages.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function Usages(client) {
            this.client = client;
        }
        Usages.prototype.list = function (location, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                options: options
            }, listOperationSpec$F, callback);
        };
        Usages.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$B, callback);
        };
        return Usages;
    }());
    // Operation Specifications
    var serializer$K = new msRest.Serializer(Mappers$L);
    var listOperationSpec$F = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/usages",
        urlParameters: [
            location1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsagesListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$K
    };
    var listNextOperationSpec$B = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsagesListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$K
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$M = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        VirtualNetwork: VirtualNetwork,
        Resource: Resource,
        BaseResource: BaseResource,
        AddressSpace: AddressSpace,
        DhcpOptions: DhcpOptions,
        Subnet: Subnet,
        SubResource: SubResource,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        FrontendIPConfiguration: FrontendIPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        IPConfiguration: IPConfiguration,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        VirtualNetworkPeering: VirtualNetworkPeering,
        TagsObject: TagsObject,
        VirtualNetworkListResult: VirtualNetworkListResult,
        IPAddressAvailabilityResult: IPAddressAvailabilityResult,
        VirtualNetworkListUsageResult: VirtualNetworkListUsageResult,
        VirtualNetworkUsage: VirtualNetworkUsage,
        VirtualNetworkUsageName: VirtualNetworkUsageName,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualNetworks. */
    var VirtualNetworks = /** @class */ (function () {
        /**
         * Create a VirtualNetworks.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function VirtualNetworks(client) {
            this.client = client;
        }
        /**
         * Deletes the specified virtual network.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkName The name of the virtual network.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualNetworks.prototype.deleteMethod = function (resourceGroupName$$1, virtualNetworkName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, virtualNetworkName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualNetworks.prototype.get = function (resourceGroupName$$1, virtualNetworkName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkName: virtualNetworkName$$1,
                options: options
            }, getOperationSpec$B, callback);
        };
        /**
         * Creates or updates a virtual network in the specified resource group.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkName The name of the virtual network.
         * @param parameters Parameters supplied to the create or update virtual network operation
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualNetworksCreateOrUpdateResponse>
         */
        VirtualNetworks.prototype.createOrUpdate = function (resourceGroupName$$1, virtualNetworkName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, virtualNetworkName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a virtual network tags.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkName The name of the virtual network.
         * @param parameters Parameters supplied to update virtual network tags.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualNetworksUpdateTagsResponse>
         */
        VirtualNetworks.prototype.updateTags = function (resourceGroupName$$1, virtualNetworkName$$1, parameters, options) {
            return this.beginUpdateTags(resourceGroupName$$1, virtualNetworkName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualNetworks.prototype.listAll = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listAllOperationSpec$d, callback);
        };
        VirtualNetworks.prototype.list = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listOperationSpec$G, callback);
        };
        VirtualNetworks.prototype.checkIPAddressAvailability = function (resourceGroupName$$1, virtualNetworkName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkName: virtualNetworkName$$1,
                options: options
            }, checkIPAddressAvailabilityOperationSpec, callback);
        };
        VirtualNetworks.prototype.listUsage = function (resourceGroupName$$1, virtualNetworkName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkName: virtualNetworkName$$1,
                options: options
            }, listUsageOperationSpec, callback);
        };
        /**
         * Deletes the specified virtual network.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkName The name of the virtual network.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualNetworks.prototype.beginDeleteMethod = function (resourceGroupName$$1, virtualNetworkName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkName: virtualNetworkName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$t, options);
        };
        /**
         * Creates or updates a virtual network in the specified resource group.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkName The name of the virtual network.
         * @param parameters Parameters supplied to the create or update virtual network operation
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualNetworks.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, virtualNetworkName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkName: virtualNetworkName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$s, options);
        };
        /**
         * Updates a virtual network tags.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkName The name of the virtual network.
         * @param parameters Parameters supplied to update virtual network tags.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualNetworks.prototype.beginUpdateTags = function (resourceGroupName$$1, virtualNetworkName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkName: virtualNetworkName$$1,
                parameters: parameters,
                options: options
            }, beginUpdateTagsOperationSpec$9, options);
        };
        VirtualNetworks.prototype.listAllNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listAllNextOperationSpec$c, callback);
        };
        VirtualNetworks.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$C, callback);
        };
        VirtualNetworks.prototype.listUsageNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listUsageNextOperationSpec, callback);
        };
        return VirtualNetworks;
    }());
    // Operation Specifications
    var serializer$L = new msRest.Serializer(Mappers$M);
    var getOperationSpec$B = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}",
        urlParameters: [
            resourceGroupName,
            virtualNetworkName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0,
            expand
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetwork
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$L
    };
    var listAllOperationSpec$d = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/virtualNetworks",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$L
    };
    var listOperationSpec$G = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$L
    };
    var checkIPAddressAvailabilityOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/CheckIPAddressAvailability",
        urlParameters: [
            resourceGroupName,
            virtualNetworkName,
            subscriptionId
        ],
        queryParameters: [
            ipAddress,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IPAddressAvailabilityResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$L
    };
    var listUsageOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/usages",
        urlParameters: [
            resourceGroupName,
            virtualNetworkName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkListUsageResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$L
    };
    var beginDeleteMethodOperationSpec$t = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}",
        urlParameters: [
            resourceGroupName,
            virtualNetworkName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$L
    };
    var beginCreateOrUpdateOperationSpec$s = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}",
        urlParameters: [
            resourceGroupName,
            virtualNetworkName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, VirtualNetwork, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualNetwork
            },
            201: {
                bodyMapper: VirtualNetwork
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$L
    };
    var beginUpdateTagsOperationSpec$9 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}",
        urlParameters: [
            resourceGroupName,
            virtualNetworkName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, TagsObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualNetwork
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$L
    };
    var listAllNextOperationSpec$c = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$L
    };
    var listNextOperationSpec$C = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$L
    };
    var listUsageNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkListUsageResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$L
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$N = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        Subnet: Subnet,
        SubResource: SubResource,
        BaseResource: BaseResource,
        NetworkSecurityGroup: NetworkSecurityGroup,
        Resource: Resource,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        FrontendIPConfiguration: FrontendIPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        IPConfiguration: IPConfiguration,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        SubnetListResult: SubnetListResult,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Subnets. */
    var Subnets = /** @class */ (function () {
        /**
         * Create a Subnets.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function Subnets(client) {
            this.client = client;
        }
        /**
         * Deletes the specified subnet.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkName The name of the virtual network.
         * @param subnetName The name of the subnet.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Subnets.prototype.deleteMethod = function (resourceGroupName$$1, virtualNetworkName$$1, subnetName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, virtualNetworkName$$1, subnetName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Subnets.prototype.get = function (resourceGroupName$$1, virtualNetworkName$$1, subnetName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkName: virtualNetworkName$$1,
                subnetName: subnetName$$1,
                options: options
            }, getOperationSpec$C, callback);
        };
        /**
         * Creates or updates a subnet in the specified virtual network.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkName The name of the virtual network.
         * @param subnetName The name of the subnet.
         * @param subnetParameters Parameters supplied to the create or update subnet operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.SubnetsCreateOrUpdateResponse>
         */
        Subnets.prototype.createOrUpdate = function (resourceGroupName$$1, virtualNetworkName$$1, subnetName$$1, subnetParameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, virtualNetworkName$$1, subnetName$$1, subnetParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Subnets.prototype.list = function (resourceGroupName$$1, virtualNetworkName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkName: virtualNetworkName$$1,
                options: options
            }, listOperationSpec$H, callback);
        };
        /**
         * Deletes the specified subnet.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkName The name of the virtual network.
         * @param subnetName The name of the subnet.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Subnets.prototype.beginDeleteMethod = function (resourceGroupName$$1, virtualNetworkName$$1, subnetName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkName: virtualNetworkName$$1,
                subnetName: subnetName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$u, options);
        };
        /**
         * Creates or updates a subnet in the specified virtual network.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkName The name of the virtual network.
         * @param subnetName The name of the subnet.
         * @param subnetParameters Parameters supplied to the create or update subnet operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Subnets.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, virtualNetworkName$$1, subnetName$$1, subnetParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkName: virtualNetworkName$$1,
                subnetName: subnetName$$1,
                subnetParameters: subnetParameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$t, options);
        };
        Subnets.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$D, callback);
        };
        return Subnets;
    }());
    // Operation Specifications
    var serializer$M = new msRest.Serializer(Mappers$N);
    var getOperationSpec$C = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}",
        urlParameters: [
            resourceGroupName,
            virtualNetworkName,
            subnetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0,
            expand
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Subnet
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$M
    };
    var listOperationSpec$H = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets",
        urlParameters: [
            resourceGroupName,
            virtualNetworkName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SubnetListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$M
    };
    var beginDeleteMethodOperationSpec$u = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}",
        urlParameters: [
            resourceGroupName,
            virtualNetworkName,
            subnetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$M
    };
    var beginCreateOrUpdateOperationSpec$t = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}",
        urlParameters: [
            resourceGroupName,
            virtualNetworkName,
            subnetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "subnetParameters",
            mapper: __assign({}, Subnet, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Subnet
            },
            201: {
                bodyMapper: Subnet
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$M
    };
    var listNextOperationSpec$D = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SubnetListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$M
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$O = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        VirtualNetworkPeering: VirtualNetworkPeering,
        SubResource: SubResource,
        BaseResource: BaseResource,
        AddressSpace: AddressSpace,
        VirtualNetworkPeeringListResult: VirtualNetworkPeeringListResult,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        Resource: Resource,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        FrontendIPConfiguration: FrontendIPConfiguration,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualNetworkPeerings. */
    var VirtualNetworkPeerings = /** @class */ (function () {
        /**
         * Create a VirtualNetworkPeerings.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function VirtualNetworkPeerings(client) {
            this.client = client;
        }
        /**
         * Deletes the specified virtual network peering.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkName The name of the virtual network.
         * @param virtualNetworkPeeringName The name of the virtual network peering.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualNetworkPeerings.prototype.deleteMethod = function (resourceGroupName$$1, virtualNetworkName$$1, virtualNetworkPeeringName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, virtualNetworkName$$1, virtualNetworkPeeringName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualNetworkPeerings.prototype.get = function (resourceGroupName$$1, virtualNetworkName$$1, virtualNetworkPeeringName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkName: virtualNetworkName$$1,
                virtualNetworkPeeringName: virtualNetworkPeeringName$$1,
                options: options
            }, getOperationSpec$D, callback);
        };
        /**
         * Creates or updates a peering in the specified virtual network.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkName The name of the virtual network.
         * @param virtualNetworkPeeringName The name of the peering.
         * @param virtualNetworkPeeringParameters Parameters supplied to the create or update virtual
         * network peering operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualNetworkPeeringsCreateOrUpdateResponse>
         */
        VirtualNetworkPeerings.prototype.createOrUpdate = function (resourceGroupName$$1, virtualNetworkName$$1, virtualNetworkPeeringName$$1, virtualNetworkPeeringParameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, virtualNetworkName$$1, virtualNetworkPeeringName$$1, virtualNetworkPeeringParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualNetworkPeerings.prototype.list = function (resourceGroupName$$1, virtualNetworkName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkName: virtualNetworkName$$1,
                options: options
            }, listOperationSpec$I, callback);
        };
        /**
         * Deletes the specified virtual network peering.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkName The name of the virtual network.
         * @param virtualNetworkPeeringName The name of the virtual network peering.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualNetworkPeerings.prototype.beginDeleteMethod = function (resourceGroupName$$1, virtualNetworkName$$1, virtualNetworkPeeringName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkName: virtualNetworkName$$1,
                virtualNetworkPeeringName: virtualNetworkPeeringName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$v, options);
        };
        /**
         * Creates or updates a peering in the specified virtual network.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkName The name of the virtual network.
         * @param virtualNetworkPeeringName The name of the peering.
         * @param virtualNetworkPeeringParameters Parameters supplied to the create or update virtual
         * network peering operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualNetworkPeerings.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, virtualNetworkName$$1, virtualNetworkPeeringName$$1, virtualNetworkPeeringParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkName: virtualNetworkName$$1,
                virtualNetworkPeeringName: virtualNetworkPeeringName$$1,
                virtualNetworkPeeringParameters: virtualNetworkPeeringParameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$u, options);
        };
        VirtualNetworkPeerings.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$E, callback);
        };
        return VirtualNetworkPeerings;
    }());
    // Operation Specifications
    var serializer$N = new msRest.Serializer(Mappers$O);
    var getOperationSpec$D = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/virtualNetworkPeerings/{virtualNetworkPeeringName}",
        urlParameters: [
            resourceGroupName,
            virtualNetworkName,
            virtualNetworkPeeringName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkPeering
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$N
    };
    var listOperationSpec$I = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/virtualNetworkPeerings",
        urlParameters: [
            resourceGroupName,
            virtualNetworkName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkPeeringListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$N
    };
    var beginDeleteMethodOperationSpec$v = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/virtualNetworkPeerings/{virtualNetworkPeeringName}",
        urlParameters: [
            resourceGroupName,
            virtualNetworkName,
            virtualNetworkPeeringName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$N
    };
    var beginCreateOrUpdateOperationSpec$u = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/virtualNetworkPeerings/{virtualNetworkPeeringName}",
        urlParameters: [
            resourceGroupName,
            virtualNetworkName,
            virtualNetworkPeeringName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "virtualNetworkPeeringParameters",
            mapper: __assign({}, VirtualNetworkPeering, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualNetworkPeering
            },
            201: {
                bodyMapper: VirtualNetworkPeering
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$N
    };
    var listNextOperationSpec$E = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkPeeringListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$N
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$P = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        VirtualNetworkTap: VirtualNetworkTap,
        Resource: Resource,
        BaseResource: BaseResource,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        SubResource: SubResource,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        FrontendIPConfiguration: FrontendIPConfiguration,
        TagsObject: TagsObject,
        VirtualNetworkTapListResult: VirtualNetworkTapListResult,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualNetworkTaps. */
    var VirtualNetworkTaps = /** @class */ (function () {
        /**
         * Create a VirtualNetworkTaps.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function VirtualNetworkTaps(client) {
            this.client = client;
        }
        /**
         * Deletes the specified virtual network tap.
         * @param resourceGroupName The name of the resource group.
         * @param tapName The name of the virtual network tap.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualNetworkTaps.prototype.deleteMethod = function (resourceGroupName$$1, tapName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, tapName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualNetworkTaps.prototype.get = function (resourceGroupName$$1, tapName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                tapName: tapName$$1,
                options: options
            }, getOperationSpec$E, callback);
        };
        /**
         * Creates or updates a Virtual Network Tap.
         * @param resourceGroupName The name of the resource group.
         * @param tapName The name of the virtual network tap.
         * @param parameters Parameters supplied to the create or update virtual network tap operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualNetworkTapsCreateOrUpdateResponse>
         */
        VirtualNetworkTaps.prototype.createOrUpdate = function (resourceGroupName$$1, tapName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, tapName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates an VirtualNetworkTap tags.
         * @param resourceGroupName The name of the resource group.
         * @param tapName The name of the tap.
         * @param tapParameters Parameters supplied to update VirtualNetworkTap tags.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualNetworkTapsUpdateTagsResponse>
         */
        VirtualNetworkTaps.prototype.updateTags = function (resourceGroupName$$1, tapName$$1, tapParameters, options) {
            return this.beginUpdateTags(resourceGroupName$$1, tapName$$1, tapParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualNetworkTaps.prototype.listAll = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listAllOperationSpec$e, callback);
        };
        VirtualNetworkTaps.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec$6, callback);
        };
        /**
         * Deletes the specified virtual network tap.
         * @param resourceGroupName The name of the resource group.
         * @param tapName The name of the virtual network tap.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualNetworkTaps.prototype.beginDeleteMethod = function (resourceGroupName$$1, tapName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                tapName: tapName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$w, options);
        };
        /**
         * Creates or updates a Virtual Network Tap.
         * @param resourceGroupName The name of the resource group.
         * @param tapName The name of the virtual network tap.
         * @param parameters Parameters supplied to the create or update virtual network tap operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualNetworkTaps.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, tapName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                tapName: tapName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$v, options);
        };
        /**
         * Updates an VirtualNetworkTap tags.
         * @param resourceGroupName The name of the resource group.
         * @param tapName The name of the tap.
         * @param tapParameters Parameters supplied to update VirtualNetworkTap tags.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualNetworkTaps.prototype.beginUpdateTags = function (resourceGroupName$$1, tapName$$1, tapParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                tapName: tapName$$1,
                tapParameters: tapParameters,
                options: options
            }, beginUpdateTagsOperationSpec$a, options);
        };
        VirtualNetworkTaps.prototype.listAllNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listAllNextOperationSpec$d, callback);
        };
        VirtualNetworkTaps.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec$5, callback);
        };
        return VirtualNetworkTaps;
    }());
    // Operation Specifications
    var serializer$O = new msRest.Serializer(Mappers$P);
    var getOperationSpec$E = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkTaps/{tapName}",
        urlParameters: [
            resourceGroupName,
            tapName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkTap
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$O
    };
    var listAllOperationSpec$e = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/virtualNetworkTaps",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkTapListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$O
    };
    var listByResourceGroupOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkTaps",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkTapListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$O
    };
    var beginDeleteMethodOperationSpec$w = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkTaps/{tapName}",
        urlParameters: [
            resourceGroupName,
            tapName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$O
    };
    var beginCreateOrUpdateOperationSpec$v = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkTaps/{tapName}",
        urlParameters: [
            resourceGroupName,
            tapName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, VirtualNetworkTap, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualNetworkTap
            },
            201: {
                bodyMapper: VirtualNetworkTap
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$O
    };
    var beginUpdateTagsOperationSpec$a = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkTaps/{tapName}",
        urlParameters: [
            resourceGroupName,
            tapName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "tapParameters",
            mapper: __assign({}, TagsObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualNetworkTap
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$O
    };
    var listAllNextOperationSpec$d = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkTapListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$O
    };
    var listByResourceGroupNextOperationSpec$5 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkTapListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$O
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$Q = /*#__PURE__*/Object.freeze({
        VirtualNetworkGateway: VirtualNetworkGateway,
        Resource: Resource,
        BaseResource: BaseResource,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        SubResource: SubResource,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        AddressSpace: AddressSpace,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        CloudError: CloudError,
        TagsObject: TagsObject,
        VirtualNetworkGatewayListResult: VirtualNetworkGatewayListResult,
        VirtualNetworkGatewayListConnectionsResult: VirtualNetworkGatewayListConnectionsResult,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        TunnelConnectionHealth: TunnelConnectionHealth,
        VpnClientParameters: VpnClientParameters,
        BgpPeerStatusListResult: BgpPeerStatusListResult,
        BgpPeerStatus: BgpPeerStatus,
        GatewayRouteListResult: GatewayRouteListResult,
        GatewayRoute: GatewayRoute,
        VpnClientIPsecParameters: VpnClientIPsecParameters,
        VpnDeviceScriptParameters: VpnDeviceScriptParameters,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        FrontendIPConfiguration: FrontendIPConfiguration,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        ConnectionSharedKey: ConnectionSharedKey,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualNetworkGateways. */
    var VirtualNetworkGateways = /** @class */ (function () {
        /**
         * Create a VirtualNetworkGateways.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function VirtualNetworkGateways(client) {
            this.client = client;
        }
        /**
         * Creates or updates a virtual network gateway in the specified resource group.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayName The name of the virtual network gateway.
         * @param parameters Parameters supplied to create or update virtual network gateway operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualNetworkGatewaysCreateOrUpdateResponse>
         */
        VirtualNetworkGateways.prototype.createOrUpdate = function (resourceGroupName$$1, virtualNetworkGatewayName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, virtualNetworkGatewayName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualNetworkGateways.prototype.get = function (resourceGroupName$$1, virtualNetworkGatewayName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkGatewayName: virtualNetworkGatewayName$$1,
                options: options
            }, getOperationSpec$F, callback);
        };
        /**
         * Deletes the specified virtual network gateway.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayName The name of the virtual network gateway.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualNetworkGateways.prototype.deleteMethod = function (resourceGroupName$$1, virtualNetworkGatewayName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, virtualNetworkGatewayName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a virtual network gateway tags.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayName The name of the virtual network gateway.
         * @param parameters Parameters supplied to update virtual network gateway tags.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualNetworkGatewaysUpdateTagsResponse>
         */
        VirtualNetworkGateways.prototype.updateTags = function (resourceGroupName$$1, virtualNetworkGatewayName$$1, parameters, options) {
            return this.beginUpdateTags(resourceGroupName$$1, virtualNetworkGatewayName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualNetworkGateways.prototype.list = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listOperationSpec$J, callback);
        };
        VirtualNetworkGateways.prototype.listConnections = function (resourceGroupName$$1, virtualNetworkGatewayName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkGatewayName: virtualNetworkGatewayName$$1,
                options: options
            }, listConnectionsOperationSpec, callback);
        };
        /**
         * Resets the primary of the virtual network gateway in the specified resource group.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayName The name of the virtual network gateway.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualNetworkGatewaysResetResponse>
         */
        VirtualNetworkGateways.prototype.reset = function (resourceGroupName$$1, virtualNetworkGatewayName$$1, options) {
            return this.beginReset(resourceGroupName$$1, virtualNetworkGatewayName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Resets the VPN client shared key of the virtual network gateway in the specified resource group.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayName The name of the virtual network gateway.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualNetworkGateways.prototype.resetVpnClientSharedKey = function (resourceGroupName$$1, virtualNetworkGatewayName$$1, options) {
            return this.beginResetVpnClientSharedKey(resourceGroupName$$1, virtualNetworkGatewayName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Generates VPN client package for P2S client of the virtual network gateway in the specified
         * resource group.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayName The name of the virtual network gateway.
         * @param parameters Parameters supplied to the generate virtual network gateway VPN client package
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualNetworkGatewaysGeneratevpnclientpackageResponse>
         */
        VirtualNetworkGateways.prototype.generatevpnclientpackage = function (resourceGroupName$$1, virtualNetworkGatewayName$$1, parameters, options) {
            return this.beginGeneratevpnclientpackage(resourceGroupName$$1, virtualNetworkGatewayName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Generates VPN profile for P2S client of the virtual network gateway in the specified resource
         * group. Used for IKEV2 and radius based authentication.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayName The name of the virtual network gateway.
         * @param parameters Parameters supplied to the generate virtual network gateway VPN client package
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualNetworkGatewaysGenerateVpnProfileResponse>
         */
        VirtualNetworkGateways.prototype.generateVpnProfile = function (resourceGroupName$$1, virtualNetworkGatewayName$$1, parameters, options) {
            return this.beginGenerateVpnProfile(resourceGroupName$$1, virtualNetworkGatewayName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Gets pre-generated VPN profile for P2S client of the virtual network gateway in the specified
         * resource group. The profile needs to be generated first using generateVpnProfile.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayName The name of the virtual network gateway.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualNetworkGatewaysGetVpnProfilePackageUrlResponse>
         */
        VirtualNetworkGateways.prototype.getVpnProfilePackageUrl = function (resourceGroupName$$1, virtualNetworkGatewayName$$1, options) {
            return this.beginGetVpnProfilePackageUrl(resourceGroupName$$1, virtualNetworkGatewayName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The GetBgpPeerStatus operation retrieves the status of all BGP peers.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayName The name of the virtual network gateway.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualNetworkGatewaysGetBgpPeerStatusResponse>
         */
        VirtualNetworkGateways.prototype.getBgpPeerStatus = function (resourceGroupName$$1, virtualNetworkGatewayName$$1, options) {
            return this.beginGetBgpPeerStatus(resourceGroupName$$1, virtualNetworkGatewayName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualNetworkGateways.prototype.supportedVpnDevices = function (resourceGroupName$$1, virtualNetworkGatewayName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkGatewayName: virtualNetworkGatewayName$$1,
                options: options
            }, supportedVpnDevicesOperationSpec, callback);
        };
        /**
         * This operation retrieves a list of routes the virtual network gateway has learned, including
         * routes learned from BGP peers.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayName The name of the virtual network gateway.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualNetworkGatewaysGetLearnedRoutesResponse>
         */
        VirtualNetworkGateways.prototype.getLearnedRoutes = function (resourceGroupName$$1, virtualNetworkGatewayName$$1, options) {
            return this.beginGetLearnedRoutes(resourceGroupName$$1, virtualNetworkGatewayName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * This operation retrieves a list of routes the virtual network gateway is advertising to the
         * specified peer.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayName The name of the virtual network gateway.
         * @param peer The IP address of the peer
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualNetworkGatewaysGetAdvertisedRoutesResponse>
         */
        VirtualNetworkGateways.prototype.getAdvertisedRoutes = function (resourceGroupName$$1, virtualNetworkGatewayName$$1, peer, options) {
            return this.beginGetAdvertisedRoutes(resourceGroupName$$1, virtualNetworkGatewayName$$1, peer, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The Set VpnclientIpsecParameters operation sets the vpnclient ipsec policy for P2S client of
         * virtual network gateway in the specified resource group through Network resource provider.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayName The name of the virtual network gateway.
         * @param vpnclientIpsecParams Parameters supplied to the Begin Set vpnclient ipsec parameters of
         * Virtual Network Gateway P2S client operation through Network resource provider.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualNetworkGatewaysSetVpnclientIpsecParametersResponse>
         */
        VirtualNetworkGateways.prototype.setVpnclientIpsecParameters = function (resourceGroupName$$1, virtualNetworkGatewayName$$1, vpnclientIpsecParams, options) {
            return this.beginSetVpnclientIpsecParameters(resourceGroupName$$1, virtualNetworkGatewayName$$1, vpnclientIpsecParams, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The Get VpnclientIpsecParameters operation retrieves information about the vpnclient ipsec
         * policy for P2S client of virtual network gateway in the specified resource group through Network
         * resource provider.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayName The virtual network gateway name.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualNetworkGatewaysGetVpnclientIpsecParametersResponse>
         */
        VirtualNetworkGateways.prototype.getVpnclientIpsecParameters = function (resourceGroupName$$1, virtualNetworkGatewayName$$1, options) {
            return this.beginGetVpnclientIpsecParameters(resourceGroupName$$1, virtualNetworkGatewayName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualNetworkGateways.prototype.vpnDeviceConfigurationScript = function (resourceGroupName$$1, virtualNetworkGatewayConnectionName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkGatewayConnectionName: virtualNetworkGatewayConnectionName$$1,
                parameters: parameters,
                options: options
            }, vpnDeviceConfigurationScriptOperationSpec, callback);
        };
        /**
         * Creates or updates a virtual network gateway in the specified resource group.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayName The name of the virtual network gateway.
         * @param parameters Parameters supplied to create or update virtual network gateway operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualNetworkGateways.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, virtualNetworkGatewayName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkGatewayName: virtualNetworkGatewayName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$w, options);
        };
        /**
         * Deletes the specified virtual network gateway.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayName The name of the virtual network gateway.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualNetworkGateways.prototype.beginDeleteMethod = function (resourceGroupName$$1, virtualNetworkGatewayName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkGatewayName: virtualNetworkGatewayName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$x, options);
        };
        /**
         * Updates a virtual network gateway tags.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayName The name of the virtual network gateway.
         * @param parameters Parameters supplied to update virtual network gateway tags.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualNetworkGateways.prototype.beginUpdateTags = function (resourceGroupName$$1, virtualNetworkGatewayName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkGatewayName: virtualNetworkGatewayName$$1,
                parameters: parameters,
                options: options
            }, beginUpdateTagsOperationSpec$b, options);
        };
        /**
         * Resets the primary of the virtual network gateway in the specified resource group.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayName The name of the virtual network gateway.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualNetworkGateways.prototype.beginReset = function (resourceGroupName$$1, virtualNetworkGatewayName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkGatewayName: virtualNetworkGatewayName$$1,
                options: options
            }, beginResetOperationSpec, options);
        };
        /**
         * Resets the VPN client shared key of the virtual network gateway in the specified resource group.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayName The name of the virtual network gateway.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualNetworkGateways.prototype.beginResetVpnClientSharedKey = function (resourceGroupName$$1, virtualNetworkGatewayName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkGatewayName: virtualNetworkGatewayName$$1,
                options: options
            }, beginResetVpnClientSharedKeyOperationSpec, options);
        };
        /**
         * Generates VPN client package for P2S client of the virtual network gateway in the specified
         * resource group.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayName The name of the virtual network gateway.
         * @param parameters Parameters supplied to the generate virtual network gateway VPN client package
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualNetworkGateways.prototype.beginGeneratevpnclientpackage = function (resourceGroupName$$1, virtualNetworkGatewayName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkGatewayName: virtualNetworkGatewayName$$1,
                parameters: parameters,
                options: options
            }, beginGeneratevpnclientpackageOperationSpec, options);
        };
        /**
         * Generates VPN profile for P2S client of the virtual network gateway in the specified resource
         * group. Used for IKEV2 and radius based authentication.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayName The name of the virtual network gateway.
         * @param parameters Parameters supplied to the generate virtual network gateway VPN client package
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualNetworkGateways.prototype.beginGenerateVpnProfile = function (resourceGroupName$$1, virtualNetworkGatewayName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkGatewayName: virtualNetworkGatewayName$$1,
                parameters: parameters,
                options: options
            }, beginGenerateVpnProfileOperationSpec, options);
        };
        /**
         * Gets pre-generated VPN profile for P2S client of the virtual network gateway in the specified
         * resource group. The profile needs to be generated first using generateVpnProfile.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayName The name of the virtual network gateway.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualNetworkGateways.prototype.beginGetVpnProfilePackageUrl = function (resourceGroupName$$1, virtualNetworkGatewayName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkGatewayName: virtualNetworkGatewayName$$1,
                options: options
            }, beginGetVpnProfilePackageUrlOperationSpec, options);
        };
        /**
         * The GetBgpPeerStatus operation retrieves the status of all BGP peers.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayName The name of the virtual network gateway.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualNetworkGateways.prototype.beginGetBgpPeerStatus = function (resourceGroupName$$1, virtualNetworkGatewayName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkGatewayName: virtualNetworkGatewayName$$1,
                options: options
            }, beginGetBgpPeerStatusOperationSpec, options);
        };
        /**
         * This operation retrieves a list of routes the virtual network gateway has learned, including
         * routes learned from BGP peers.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayName The name of the virtual network gateway.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualNetworkGateways.prototype.beginGetLearnedRoutes = function (resourceGroupName$$1, virtualNetworkGatewayName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkGatewayName: virtualNetworkGatewayName$$1,
                options: options
            }, beginGetLearnedRoutesOperationSpec, options);
        };
        /**
         * This operation retrieves a list of routes the virtual network gateway is advertising to the
         * specified peer.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayName The name of the virtual network gateway.
         * @param peer The IP address of the peer
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualNetworkGateways.prototype.beginGetAdvertisedRoutes = function (resourceGroupName$$1, virtualNetworkGatewayName$$1, peer, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkGatewayName: virtualNetworkGatewayName$$1,
                peer: peer,
                options: options
            }, beginGetAdvertisedRoutesOperationSpec, options);
        };
        /**
         * The Set VpnclientIpsecParameters operation sets the vpnclient ipsec policy for P2S client of
         * virtual network gateway in the specified resource group through Network resource provider.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayName The name of the virtual network gateway.
         * @param vpnclientIpsecParams Parameters supplied to the Begin Set vpnclient ipsec parameters of
         * Virtual Network Gateway P2S client operation through Network resource provider.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualNetworkGateways.prototype.beginSetVpnclientIpsecParameters = function (resourceGroupName$$1, virtualNetworkGatewayName$$1, vpnclientIpsecParams, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkGatewayName: virtualNetworkGatewayName$$1,
                vpnclientIpsecParams: vpnclientIpsecParams,
                options: options
            }, beginSetVpnclientIpsecParametersOperationSpec, options);
        };
        /**
         * The Get VpnclientIpsecParameters operation retrieves information about the vpnclient ipsec
         * policy for P2S client of virtual network gateway in the specified resource group through Network
         * resource provider.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayName The virtual network gateway name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualNetworkGateways.prototype.beginGetVpnclientIpsecParameters = function (resourceGroupName$$1, virtualNetworkGatewayName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkGatewayName: virtualNetworkGatewayName$$1,
                options: options
            }, beginGetVpnclientIpsecParametersOperationSpec, options);
        };
        VirtualNetworkGateways.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$F, callback);
        };
        VirtualNetworkGateways.prototype.listConnectionsNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listConnectionsNextOperationSpec, callback);
        };
        return VirtualNetworkGateways;
    }());
    // Operation Specifications
    var serializer$P = new msRest.Serializer(Mappers$Q);
    var getOperationSpec$F = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}",
        urlParameters: [
            resourceGroupName,
            virtualNetworkGatewayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkGateway
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$P
    };
    var listOperationSpec$J = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkGatewayListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$P
    };
    var listConnectionsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/connections",
        urlParameters: [
            resourceGroupName,
            virtualNetworkGatewayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkGatewayListConnectionsResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$P
    };
    var supportedVpnDevicesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/supportedvpndevices",
        urlParameters: [
            resourceGroupName,
            virtualNetworkGatewayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "String"
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$P
    };
    var vpnDeviceConfigurationScriptOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}/vpndeviceconfigurationscript",
        urlParameters: [
            resourceGroupName,
            virtualNetworkGatewayConnectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, VpnDeviceScriptParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "String"
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$P
    };
    var beginCreateOrUpdateOperationSpec$w = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}",
        urlParameters: [
            resourceGroupName,
            virtualNetworkGatewayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, VirtualNetworkGateway, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualNetworkGateway
            },
            201: {
                bodyMapper: VirtualNetworkGateway
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$P
    };
    var beginDeleteMethodOperationSpec$x = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}",
        urlParameters: [
            resourceGroupName,
            virtualNetworkGatewayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$P
    };
    var beginUpdateTagsOperationSpec$b = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}",
        urlParameters: [
            resourceGroupName,
            virtualNetworkGatewayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, TagsObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualNetworkGateway
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$P
    };
    var beginResetOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/reset",
        urlParameters: [
            resourceGroupName,
            virtualNetworkGatewayName,
            subscriptionId
        ],
        queryParameters: [
            gatewayVip,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkGateway
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$P
    };
    var beginResetVpnClientSharedKeyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/resetvpnclientsharedkey",
        urlParameters: [
            resourceGroupName,
            virtualNetworkGatewayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$P
    };
    var beginGeneratevpnclientpackageOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/generatevpnclientpackage",
        urlParameters: [
            resourceGroupName,
            virtualNetworkGatewayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, VpnClientParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "String"
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$P
    };
    var beginGenerateVpnProfileOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/generatevpnprofile",
        urlParameters: [
            resourceGroupName,
            virtualNetworkGatewayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, VpnClientParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "String"
                    }
                }
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$P
    };
    var beginGetVpnProfilePackageUrlOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/getvpnprofilepackageurl",
        urlParameters: [
            resourceGroupName,
            virtualNetworkGatewayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "String"
                    }
                }
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$P
    };
    var beginGetBgpPeerStatusOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/getBgpPeerStatus",
        urlParameters: [
            resourceGroupName,
            virtualNetworkGatewayName,
            subscriptionId
        ],
        queryParameters: [
            peer0,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BgpPeerStatusListResult
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$P
    };
    var beginGetLearnedRoutesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/getLearnedRoutes",
        urlParameters: [
            resourceGroupName,
            virtualNetworkGatewayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GatewayRouteListResult
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$P
    };
    var beginGetAdvertisedRoutesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/getAdvertisedRoutes",
        urlParameters: [
            resourceGroupName,
            virtualNetworkGatewayName,
            subscriptionId
        ],
        queryParameters: [
            peer1,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GatewayRouteListResult
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$P
    };
    var beginSetVpnclientIpsecParametersOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/setvpnclientipsecparameters",
        urlParameters: [
            resourceGroupName,
            virtualNetworkGatewayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "vpnclientIpsecParams",
            mapper: __assign({}, VpnClientIPsecParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VpnClientIPsecParameters
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$P
    };
    var beginGetVpnclientIpsecParametersOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/getvpnclientipsecparameters",
        urlParameters: [
            resourceGroupName,
            virtualNetworkGatewayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VpnClientIPsecParameters
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$P
    };
    var listNextOperationSpec$F = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkGatewayListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$P
    };
    var listConnectionsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkGatewayListConnectionsResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$P
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$R = /*#__PURE__*/Object.freeze({
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        Resource: Resource,
        BaseResource: BaseResource,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        SubResource: SubResource,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        AddressSpace: AddressSpace,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        TunnelConnectionHealth: TunnelConnectionHealth,
        CloudError: CloudError,
        TagsObject: TagsObject,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListResult: VirtualNetworkGatewayConnectionListResult,
        ConnectionResetSharedKey: ConnectionResetSharedKey,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        FrontendIPConfiguration: FrontendIPConfiguration,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualNetworkGatewayConnections. */
    var VirtualNetworkGatewayConnections = /** @class */ (function () {
        /**
         * Create a VirtualNetworkGatewayConnections.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function VirtualNetworkGatewayConnections(client) {
            this.client = client;
        }
        /**
         * Creates or updates a virtual network gateway connection in the specified resource group.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayConnectionName The name of the virtual network gateway connection.
         * @param parameters Parameters supplied to the create or update virtual network gateway connection
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualNetworkGatewayConnectionsCreateOrUpdateResponse>
         */
        VirtualNetworkGatewayConnections.prototype.createOrUpdate = function (resourceGroupName$$1, virtualNetworkGatewayConnectionName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, virtualNetworkGatewayConnectionName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualNetworkGatewayConnections.prototype.get = function (resourceGroupName$$1, virtualNetworkGatewayConnectionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkGatewayConnectionName: virtualNetworkGatewayConnectionName$$1,
                options: options
            }, getOperationSpec$G, callback);
        };
        /**
         * Deletes the specified virtual network Gateway connection.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayConnectionName The name of the virtual network gateway connection.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualNetworkGatewayConnections.prototype.deleteMethod = function (resourceGroupName$$1, virtualNetworkGatewayConnectionName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, virtualNetworkGatewayConnectionName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a virtual network gateway connection tags.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayConnectionName The name of the virtual network gateway connection.
         * @param parameters Parameters supplied to update virtual network gateway connection tags.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualNetworkGatewayConnectionsUpdateTagsResponse>
         */
        VirtualNetworkGatewayConnections.prototype.updateTags = function (resourceGroupName$$1, virtualNetworkGatewayConnectionName$$1, parameters, options) {
            return this.beginUpdateTags(resourceGroupName$$1, virtualNetworkGatewayConnectionName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The Put VirtualNetworkGatewayConnectionSharedKey operation sets the virtual network gateway
         * connection shared key for passed virtual network gateway connection in the specified resource
         * group through Network resource provider.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayConnectionName The virtual network gateway connection name.
         * @param parameters Parameters supplied to the Begin Set Virtual Network Gateway connection Shared
         * key operation throughNetwork resource provider.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualNetworkGatewayConnectionsSetSharedKeyResponse>
         */
        VirtualNetworkGatewayConnections.prototype.setSharedKey = function (resourceGroupName$$1, virtualNetworkGatewayConnectionName$$1, parameters, options) {
            return this.beginSetSharedKey(resourceGroupName$$1, virtualNetworkGatewayConnectionName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualNetworkGatewayConnections.prototype.getSharedKey = function (resourceGroupName$$1, virtualNetworkGatewayConnectionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkGatewayConnectionName: virtualNetworkGatewayConnectionName$$1,
                options: options
            }, getSharedKeyOperationSpec, callback);
        };
        VirtualNetworkGatewayConnections.prototype.list = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listOperationSpec$K, callback);
        };
        /**
         * The VirtualNetworkGatewayConnectionResetSharedKey operation resets the virtual network gateway
         * connection shared key for passed virtual network gateway connection in the specified resource
         * group through Network resource provider.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayConnectionName The virtual network gateway connection reset shared
         * key Name.
         * @param parameters Parameters supplied to the begin reset virtual network gateway connection
         * shared key operation through network resource provider.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualNetworkGatewayConnectionsResetSharedKeyResponse>
         */
        VirtualNetworkGatewayConnections.prototype.resetSharedKey = function (resourceGroupName$$1, virtualNetworkGatewayConnectionName$$1, parameters, options) {
            return this.beginResetSharedKey(resourceGroupName$$1, virtualNetworkGatewayConnectionName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates a virtual network gateway connection in the specified resource group.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayConnectionName The name of the virtual network gateway connection.
         * @param parameters Parameters supplied to the create or update virtual network gateway connection
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualNetworkGatewayConnections.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, virtualNetworkGatewayConnectionName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkGatewayConnectionName: virtualNetworkGatewayConnectionName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$x, options);
        };
        /**
         * Deletes the specified virtual network Gateway connection.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayConnectionName The name of the virtual network gateway connection.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualNetworkGatewayConnections.prototype.beginDeleteMethod = function (resourceGroupName$$1, virtualNetworkGatewayConnectionName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkGatewayConnectionName: virtualNetworkGatewayConnectionName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$y, options);
        };
        /**
         * Updates a virtual network gateway connection tags.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayConnectionName The name of the virtual network gateway connection.
         * @param parameters Parameters supplied to update virtual network gateway connection tags.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualNetworkGatewayConnections.prototype.beginUpdateTags = function (resourceGroupName$$1, virtualNetworkGatewayConnectionName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkGatewayConnectionName: virtualNetworkGatewayConnectionName$$1,
                parameters: parameters,
                options: options
            }, beginUpdateTagsOperationSpec$c, options);
        };
        /**
         * The Put VirtualNetworkGatewayConnectionSharedKey operation sets the virtual network gateway
         * connection shared key for passed virtual network gateway connection in the specified resource
         * group through Network resource provider.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayConnectionName The virtual network gateway connection name.
         * @param parameters Parameters supplied to the Begin Set Virtual Network Gateway connection Shared
         * key operation throughNetwork resource provider.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualNetworkGatewayConnections.prototype.beginSetSharedKey = function (resourceGroupName$$1, virtualNetworkGatewayConnectionName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkGatewayConnectionName: virtualNetworkGatewayConnectionName$$1,
                parameters: parameters,
                options: options
            }, beginSetSharedKeyOperationSpec, options);
        };
        /**
         * The VirtualNetworkGatewayConnectionResetSharedKey operation resets the virtual network gateway
         * connection shared key for passed virtual network gateway connection in the specified resource
         * group through Network resource provider.
         * @param resourceGroupName The name of the resource group.
         * @param virtualNetworkGatewayConnectionName The virtual network gateway connection reset shared
         * key Name.
         * @param parameters Parameters supplied to the begin reset virtual network gateway connection
         * shared key operation through network resource provider.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualNetworkGatewayConnections.prototype.beginResetSharedKey = function (resourceGroupName$$1, virtualNetworkGatewayConnectionName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkGatewayConnectionName: virtualNetworkGatewayConnectionName$$1,
                parameters: parameters,
                options: options
            }, beginResetSharedKeyOperationSpec, options);
        };
        VirtualNetworkGatewayConnections.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$G, callback);
        };
        return VirtualNetworkGatewayConnections;
    }());
    // Operation Specifications
    var serializer$Q = new msRest.Serializer(Mappers$R);
    var getOperationSpec$G = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}",
        urlParameters: [
            resourceGroupName,
            virtualNetworkGatewayConnectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkGatewayConnection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Q
    };
    var getSharedKeyOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}/sharedkey",
        urlParameters: [
            resourceGroupName,
            virtualNetworkGatewayConnectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ConnectionSharedKey
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Q
    };
    var listOperationSpec$K = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkGatewayConnectionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Q
    };
    var beginCreateOrUpdateOperationSpec$x = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}",
        urlParameters: [
            resourceGroupName,
            virtualNetworkGatewayConnectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, VirtualNetworkGatewayConnection, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualNetworkGatewayConnection
            },
            201: {
                bodyMapper: VirtualNetworkGatewayConnection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Q
    };
    var beginDeleteMethodOperationSpec$y = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}",
        urlParameters: [
            resourceGroupName,
            virtualNetworkGatewayConnectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Q
    };
    var beginUpdateTagsOperationSpec$c = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}",
        urlParameters: [
            resourceGroupName,
            virtualNetworkGatewayConnectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, TagsObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualNetworkGatewayConnection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Q
    };
    var beginSetSharedKeyOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}/sharedkey",
        urlParameters: [
            resourceGroupName,
            virtualNetworkGatewayConnectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ConnectionSharedKey, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ConnectionSharedKey
            },
            201: {
                bodyMapper: ConnectionSharedKey
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Q
    };
    var beginResetSharedKeyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}/sharedkey/reset",
        urlParameters: [
            resourceGroupName,
            virtualNetworkGatewayConnectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ConnectionResetSharedKey, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ConnectionResetSharedKey
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Q
    };
    var listNextOperationSpec$G = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkGatewayConnectionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Q
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$S = /*#__PURE__*/Object.freeze({
        LocalNetworkGateway: LocalNetworkGateway,
        Resource: Resource,
        BaseResource: BaseResource,
        AddressSpace: AddressSpace,
        BgpSettings: BgpSettings,
        CloudError: CloudError,
        TagsObject: TagsObject,
        LocalNetworkGatewayListResult: LocalNetworkGatewayListResult,
        SubResource: SubResource,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        SecurityRule: SecurityRule,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        NetworkInterface: NetworkInterface,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        FrontendIPConfiguration: FrontendIPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        IPConfiguration: IPConfiguration,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a LocalNetworkGateways. */
    var LocalNetworkGateways = /** @class */ (function () {
        /**
         * Create a LocalNetworkGateways.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function LocalNetworkGateways(client) {
            this.client = client;
        }
        /**
         * Creates or updates a local network gateway in the specified resource group.
         * @param resourceGroupName The name of the resource group.
         * @param localNetworkGatewayName The name of the local network gateway.
         * @param parameters Parameters supplied to the create or update local network gateway operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.LocalNetworkGatewaysCreateOrUpdateResponse>
         */
        LocalNetworkGateways.prototype.createOrUpdate = function (resourceGroupName$$1, localNetworkGatewayName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, localNetworkGatewayName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        LocalNetworkGateways.prototype.get = function (resourceGroupName$$1, localNetworkGatewayName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                localNetworkGatewayName: localNetworkGatewayName$$1,
                options: options
            }, getOperationSpec$H, callback);
        };
        /**
         * Deletes the specified local network gateway.
         * @param resourceGroupName The name of the resource group.
         * @param localNetworkGatewayName The name of the local network gateway.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        LocalNetworkGateways.prototype.deleteMethod = function (resourceGroupName$$1, localNetworkGatewayName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, localNetworkGatewayName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a local network gateway tags.
         * @param resourceGroupName The name of the resource group.
         * @param localNetworkGatewayName The name of the local network gateway.
         * @param parameters Parameters supplied to update local network gateway tags.
         * @param [options] The optional parameters
         * @returns Promise<Models.LocalNetworkGatewaysUpdateTagsResponse>
         */
        LocalNetworkGateways.prototype.updateTags = function (resourceGroupName$$1, localNetworkGatewayName$$1, parameters, options) {
            return this.beginUpdateTags(resourceGroupName$$1, localNetworkGatewayName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        LocalNetworkGateways.prototype.list = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listOperationSpec$L, callback);
        };
        /**
         * Creates or updates a local network gateway in the specified resource group.
         * @param resourceGroupName The name of the resource group.
         * @param localNetworkGatewayName The name of the local network gateway.
         * @param parameters Parameters supplied to the create or update local network gateway operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        LocalNetworkGateways.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, localNetworkGatewayName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                localNetworkGatewayName: localNetworkGatewayName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$y, options);
        };
        /**
         * Deletes the specified local network gateway.
         * @param resourceGroupName The name of the resource group.
         * @param localNetworkGatewayName The name of the local network gateway.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        LocalNetworkGateways.prototype.beginDeleteMethod = function (resourceGroupName$$1, localNetworkGatewayName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                localNetworkGatewayName: localNetworkGatewayName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$z, options);
        };
        /**
         * Updates a local network gateway tags.
         * @param resourceGroupName The name of the resource group.
         * @param localNetworkGatewayName The name of the local network gateway.
         * @param parameters Parameters supplied to update local network gateway tags.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        LocalNetworkGateways.prototype.beginUpdateTags = function (resourceGroupName$$1, localNetworkGatewayName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                localNetworkGatewayName: localNetworkGatewayName$$1,
                parameters: parameters,
                options: options
            }, beginUpdateTagsOperationSpec$d, options);
        };
        LocalNetworkGateways.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$H, callback);
        };
        return LocalNetworkGateways;
    }());
    // Operation Specifications
    var serializer$R = new msRest.Serializer(Mappers$S);
    var getOperationSpec$H = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/localNetworkGateways/{localNetworkGatewayName}",
        urlParameters: [
            resourceGroupName,
            localNetworkGatewayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LocalNetworkGateway
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$R
    };
    var listOperationSpec$L = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/localNetworkGateways",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LocalNetworkGatewayListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$R
    };
    var beginCreateOrUpdateOperationSpec$y = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/localNetworkGateways/{localNetworkGatewayName}",
        urlParameters: [
            resourceGroupName,
            localNetworkGatewayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, LocalNetworkGateway, { required: true })
        },
        responses: {
            200: {
                bodyMapper: LocalNetworkGateway
            },
            201: {
                bodyMapper: LocalNetworkGateway
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$R
    };
    var beginDeleteMethodOperationSpec$z = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/localNetworkGateways/{localNetworkGatewayName}",
        urlParameters: [
            resourceGroupName,
            localNetworkGatewayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$R
    };
    var beginUpdateTagsOperationSpec$d = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/localNetworkGateways/{localNetworkGatewayName}",
        urlParameters: [
            resourceGroupName,
            localNetworkGatewayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, TagsObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: LocalNetworkGateway
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$R
    };
    var listNextOperationSpec$H = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LocalNetworkGatewayListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$R
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$T = /*#__PURE__*/Object.freeze({
        VirtualWAN: VirtualWAN,
        Resource: Resource,
        BaseResource: BaseResource,
        SubResource: SubResource,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        IpsecPolicy: IpsecPolicy,
        ErrorModel: ErrorModel,
        ErrorDetails: ErrorDetails,
        TagsObject: TagsObject,
        ListVirtualWANsResult: ListVirtualWANsResult,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        FrontendIPConfiguration: FrontendIPConfiguration,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualWans. */
    var VirtualWans = /** @class */ (function () {
        /**
         * Create a VirtualWans.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function VirtualWans(client) {
            this.client = client;
        }
        VirtualWans.prototype.get = function (resourceGroupName$$1, virtualWANName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                virtualWANName: virtualWANName,
                options: options
            }, getOperationSpec$I, callback);
        };
        /**
         * Creates a VirtualWAN resource if it doesn't exist else updates the existing VirtualWAN.
         * @param resourceGroupName The resource group name of the VirtualWan.
         * @param virtualWANName The name of the VirtualWAN being created or updated.
         * @param wANParameters Parameters supplied to create or update VirtualWAN.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualWansCreateOrUpdateResponse>
         */
        VirtualWans.prototype.createOrUpdate = function (resourceGroupName$$1, virtualWANName, wANParameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, virtualWANName, wANParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a VirtualWAN tags.
         * @param resourceGroupName The resource group name of the VirtualWan.
         * @param virtualWANName The name of the VirtualWAN being updated.
         * @param wANParameters Parameters supplied to Update VirtualWAN tags.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualWansUpdateTagsResponse>
         */
        VirtualWans.prototype.updateTags = function (resourceGroupName$$1, virtualWANName, wANParameters, options) {
            return this.beginUpdateTags(resourceGroupName$$1, virtualWANName, wANParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a VirtualWAN.
         * @param resourceGroupName The resource group name of the VirtualWan.
         * @param virtualWANName The name of the VirtualWAN being deleted.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualWans.prototype.deleteMethod = function (resourceGroupName$$1, virtualWANName, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, virtualWANName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualWans.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec$7, callback);
        };
        VirtualWans.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$M, callback);
        };
        /**
         * Creates a VirtualWAN resource if it doesn't exist else updates the existing VirtualWAN.
         * @param resourceGroupName The resource group name of the VirtualWan.
         * @param virtualWANName The name of the VirtualWAN being created or updated.
         * @param wANParameters Parameters supplied to create or update VirtualWAN.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualWans.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, virtualWANName, wANParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                virtualWANName: virtualWANName,
                wANParameters: wANParameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$z, options);
        };
        /**
         * Updates a VirtualWAN tags.
         * @param resourceGroupName The resource group name of the VirtualWan.
         * @param virtualWANName The name of the VirtualWAN being updated.
         * @param wANParameters Parameters supplied to Update VirtualWAN tags.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualWans.prototype.beginUpdateTags = function (resourceGroupName$$1, virtualWANName, wANParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                virtualWANName: virtualWANName,
                wANParameters: wANParameters,
                options: options
            }, beginUpdateTagsOperationSpec$e, options);
        };
        /**
         * Deletes a VirtualWAN.
         * @param resourceGroupName The resource group name of the VirtualWan.
         * @param virtualWANName The name of the VirtualWAN being deleted.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualWans.prototype.beginDeleteMethod = function (resourceGroupName$$1, virtualWANName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                virtualWANName: virtualWANName,
                options: options
            }, beginDeleteMethodOperationSpec$A, options);
        };
        VirtualWans.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec$6, callback);
        };
        VirtualWans.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$I, callback);
        };
        return VirtualWans;
    }());
    // Operation Specifications
    var serializer$S = new msRest.Serializer(Mappers$T);
    var getOperationSpec$I = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{VirtualWANName}",
        urlParameters: [
            resourceGroupName,
            virtualWANName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualWAN
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$S
    };
    var listByResourceGroupOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListVirtualWANsResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$S
    };
    var listOperationSpec$M = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/virtualWans",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListVirtualWANsResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$S
    };
    var beginCreateOrUpdateOperationSpec$z = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{VirtualWANName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            virtualWANName1
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "wANParameters",
            mapper: __assign({}, VirtualWAN, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualWAN
            },
            201: {
                bodyMapper: VirtualWAN
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$S
    };
    var beginUpdateTagsOperationSpec$e = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{VirtualWANName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            virtualWANName1
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "wANParameters",
            mapper: __assign({}, TagsObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualWAN
            },
            201: {
                bodyMapper: VirtualWAN
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$S
    };
    var beginDeleteMethodOperationSpec$A = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{VirtualWANName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            virtualWANName1
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$S
    };
    var listByResourceGroupNextOperationSpec$6 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListVirtualWANsResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$S
    };
    var listNextOperationSpec$I = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListVirtualWANsResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$S
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$U = /*#__PURE__*/Object.freeze({
        VpnSite: VpnSite,
        Resource: Resource,
        BaseResource: BaseResource,
        SubResource: SubResource,
        DeviceProperties: DeviceProperties,
        AddressSpace: AddressSpace,
        BgpSettings: BgpSettings,
        ErrorModel: ErrorModel,
        ErrorDetails: ErrorDetails,
        TagsObject: TagsObject,
        ListVpnSitesResult: ListVpnSitesResult,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        FrontendIPConfiguration: FrontendIPConfiguration,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VpnSites. */
    var VpnSites = /** @class */ (function () {
        /**
         * Create a VpnSites.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function VpnSites(client) {
            this.client = client;
        }
        VpnSites.prototype.get = function (resourceGroupName$$1, vpnSiteName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                vpnSiteName: vpnSiteName$$1,
                options: options
            }, getOperationSpec$J, callback);
        };
        /**
         * Creates a VpnSite resource if it doesn't exist else updates the existing VpnSite.
         * @param resourceGroupName The resource group name of the VpnSite.
         * @param vpnSiteName The name of the VpnSite being created or updated.
         * @param vpnSiteParameters Parameters supplied to create or update VpnSite.
         * @param [options] The optional parameters
         * @returns Promise<Models.VpnSitesCreateOrUpdateResponse>
         */
        VpnSites.prototype.createOrUpdate = function (resourceGroupName$$1, vpnSiteName$$1, vpnSiteParameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, vpnSiteName$$1, vpnSiteParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates VpnSite tags.
         * @param resourceGroupName The resource group name of the VpnSite.
         * @param vpnSiteName The name of the VpnSite being updated.
         * @param vpnSiteParameters Parameters supplied to update VpnSite tags.
         * @param [options] The optional parameters
         * @returns Promise<Models.VpnSitesUpdateTagsResponse>
         */
        VpnSites.prototype.updateTags = function (resourceGroupName$$1, vpnSiteName$$1, vpnSiteParameters, options) {
            return this.beginUpdateTags(resourceGroupName$$1, vpnSiteName$$1, vpnSiteParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a VpnSite.
         * @param resourceGroupName The resource group name of the VpnSite.
         * @param vpnSiteName The name of the VpnSite being deleted.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VpnSites.prototype.deleteMethod = function (resourceGroupName$$1, vpnSiteName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, vpnSiteName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VpnSites.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec$8, callback);
        };
        VpnSites.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$N, callback);
        };
        /**
         * Creates a VpnSite resource if it doesn't exist else updates the existing VpnSite.
         * @param resourceGroupName The resource group name of the VpnSite.
         * @param vpnSiteName The name of the VpnSite being created or updated.
         * @param vpnSiteParameters Parameters supplied to create or update VpnSite.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VpnSites.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, vpnSiteName$$1, vpnSiteParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vpnSiteName: vpnSiteName$$1,
                vpnSiteParameters: vpnSiteParameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$A, options);
        };
        /**
         * Updates VpnSite tags.
         * @param resourceGroupName The resource group name of the VpnSite.
         * @param vpnSiteName The name of the VpnSite being updated.
         * @param vpnSiteParameters Parameters supplied to update VpnSite tags.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VpnSites.prototype.beginUpdateTags = function (resourceGroupName$$1, vpnSiteName$$1, vpnSiteParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vpnSiteName: vpnSiteName$$1,
                vpnSiteParameters: vpnSiteParameters,
                options: options
            }, beginUpdateTagsOperationSpec$f, options);
        };
        /**
         * Deletes a VpnSite.
         * @param resourceGroupName The resource group name of the VpnSite.
         * @param vpnSiteName The name of the VpnSite being deleted.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VpnSites.prototype.beginDeleteMethod = function (resourceGroupName$$1, vpnSiteName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vpnSiteName: vpnSiteName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$B, options);
        };
        VpnSites.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec$7, callback);
        };
        VpnSites.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$J, callback);
        };
        return VpnSites;
    }());
    // Operation Specifications
    var serializer$T = new msRest.Serializer(Mappers$U);
    var getOperationSpec$J = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnSites/{vpnSiteName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            vpnSiteName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VpnSite
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$T
    };
    var listByResourceGroupOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnSites",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListVpnSitesResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$T
    };
    var listOperationSpec$N = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/vpnSites",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListVpnSitesResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$T
    };
    var beginCreateOrUpdateOperationSpec$A = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnSites/{vpnSiteName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            vpnSiteName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "vpnSiteParameters",
            mapper: __assign({}, VpnSite, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VpnSite
            },
            201: {
                bodyMapper: VpnSite
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$T
    };
    var beginUpdateTagsOperationSpec$f = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnSites/{vpnSiteName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            vpnSiteName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "vpnSiteParameters",
            mapper: __assign({}, TagsObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VpnSite
            },
            201: {
                bodyMapper: VpnSite
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$T
    };
    var beginDeleteMethodOperationSpec$B = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnSites/{vpnSiteName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            vpnSiteName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$T
    };
    var listByResourceGroupNextOperationSpec$7 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListVpnSitesResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$T
    };
    var listNextOperationSpec$J = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListVpnSitesResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$T
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$V = /*#__PURE__*/Object.freeze({
        GetVpnSitesConfigurationRequest: GetVpnSitesConfigurationRequest,
        ErrorModel: ErrorModel,
        ErrorDetails: ErrorDetails
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VpnSitesConfiguration. */
    var VpnSitesConfiguration = /** @class */ (function () {
        /**
         * Create a VpnSitesConfiguration.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function VpnSitesConfiguration(client) {
            this.client = client;
        }
        /**
         * Gives the sas-url to download the configurations for vpn-sites in a resource group.
         * @param resourceGroupName The resource group name.
         * @param virtualWANName The name of the VirtualWAN for which configuration of all vpn-sites is
         * needed.
         * @param request Parameters supplied to download vpn-sites configuration.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VpnSitesConfiguration.prototype.download = function (resourceGroupName$$1, virtualWANName, request, options) {
            return this.beginDownload(resourceGroupName$$1, virtualWANName, request, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Gives the sas-url to download the configurations for vpn-sites in a resource group.
         * @param resourceGroupName The resource group name.
         * @param virtualWANName The name of the VirtualWAN for which configuration of all vpn-sites is
         * needed.
         * @param request Parameters supplied to download vpn-sites configuration.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VpnSitesConfiguration.prototype.beginDownload = function (resourceGroupName$$1, virtualWANName, request, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                virtualWANName: virtualWANName,
                request: request,
                options: options
            }, beginDownloadOperationSpec, options);
        };
        return VpnSitesConfiguration;
    }());
    // Operation Specifications
    var serializer$U = new msRest.Serializer(Mappers$V);
    var beginDownloadOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{virtualWANName}/vpnConfiguration",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            virtualWANName0
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "request",
            mapper: __assign({}, GetVpnSitesConfigurationRequest, { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$U
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$W = /*#__PURE__*/Object.freeze({
        VirtualHub: VirtualHub,
        Resource: Resource,
        BaseResource: BaseResource,
        SubResource: SubResource,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        ErrorModel: ErrorModel,
        ErrorDetails: ErrorDetails,
        TagsObject: TagsObject,
        ListVirtualHubsResult: ListVirtualHubsResult,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        FrontendIPConfiguration: FrontendIPConfiguration,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualHubs. */
    var VirtualHubs = /** @class */ (function () {
        /**
         * Create a VirtualHubs.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function VirtualHubs(client) {
            this.client = client;
        }
        VirtualHubs.prototype.get = function (resourceGroupName$$1, virtualHubName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                virtualHubName: virtualHubName$$1,
                options: options
            }, getOperationSpec$K, callback);
        };
        /**
         * Creates a VirtualHub resource if it doesn't exist else updates the existing VirtualHub.
         * @param resourceGroupName The resource group name of the VirtualHub.
         * @param virtualHubName The name of the VirtualHub.
         * @param virtualHubParameters Parameters supplied to create or update VirtualHub.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualHubsCreateOrUpdateResponse>
         */
        VirtualHubs.prototype.createOrUpdate = function (resourceGroupName$$1, virtualHubName$$1, virtualHubParameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, virtualHubName$$1, virtualHubParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates VirtualHub tags.
         * @param resourceGroupName The resource group name of the VirtualHub.
         * @param virtualHubName The name of the VirtualHub.
         * @param virtualHubParameters Parameters supplied to update VirtualHub tags.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualHubsUpdateTagsResponse>
         */
        VirtualHubs.prototype.updateTags = function (resourceGroupName$$1, virtualHubName$$1, virtualHubParameters, options) {
            return this.beginUpdateTags(resourceGroupName$$1, virtualHubName$$1, virtualHubParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a VirtualHub.
         * @param resourceGroupName The resource group name of the VirtualHub.
         * @param virtualHubName The name of the VirtualHub.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualHubs.prototype.deleteMethod = function (resourceGroupName$$1, virtualHubName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, virtualHubName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualHubs.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec$9, callback);
        };
        VirtualHubs.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$O, callback);
        };
        /**
         * Creates a VirtualHub resource if it doesn't exist else updates the existing VirtualHub.
         * @param resourceGroupName The resource group name of the VirtualHub.
         * @param virtualHubName The name of the VirtualHub.
         * @param virtualHubParameters Parameters supplied to create or update VirtualHub.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualHubs.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, virtualHubName$$1, virtualHubParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                virtualHubName: virtualHubName$$1,
                virtualHubParameters: virtualHubParameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$B, options);
        };
        /**
         * Updates VirtualHub tags.
         * @param resourceGroupName The resource group name of the VirtualHub.
         * @param virtualHubName The name of the VirtualHub.
         * @param virtualHubParameters Parameters supplied to update VirtualHub tags.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualHubs.prototype.beginUpdateTags = function (resourceGroupName$$1, virtualHubName$$1, virtualHubParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                virtualHubName: virtualHubName$$1,
                virtualHubParameters: virtualHubParameters,
                options: options
            }, beginUpdateTagsOperationSpec$g, options);
        };
        /**
         * Deletes a VirtualHub.
         * @param resourceGroupName The resource group name of the VirtualHub.
         * @param virtualHubName The name of the VirtualHub.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualHubs.prototype.beginDeleteMethod = function (resourceGroupName$$1, virtualHubName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                virtualHubName: virtualHubName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$C, options);
        };
        VirtualHubs.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec$8, callback);
        };
        VirtualHubs.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$K, callback);
        };
        return VirtualHubs;
    }());
    // Operation Specifications
    var serializer$V = new msRest.Serializer(Mappers$W);
    var getOperationSpec$K = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualHubs/{virtualHubName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            virtualHubName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualHub
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$V
    };
    var listByResourceGroupOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualHubs",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListVirtualHubsResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$V
    };
    var listOperationSpec$O = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/virtualHubs",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListVirtualHubsResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$V
    };
    var beginCreateOrUpdateOperationSpec$B = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualHubs/{virtualHubName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            virtualHubName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "virtualHubParameters",
            mapper: __assign({}, VirtualHub, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualHub
            },
            201: {
                bodyMapper: VirtualHub
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$V
    };
    var beginUpdateTagsOperationSpec$g = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualHubs/{virtualHubName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            virtualHubName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "virtualHubParameters",
            mapper: __assign({}, TagsObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualHub
            },
            201: {
                bodyMapper: VirtualHub
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$V
    };
    var beginDeleteMethodOperationSpec$C = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualHubs/{virtualHubName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            virtualHubName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$V
    };
    var listByResourceGroupNextOperationSpec$8 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListVirtualHubsResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$V
    };
    var listNextOperationSpec$K = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListVirtualHubsResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$V
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$X = /*#__PURE__*/Object.freeze({
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        SubResource: SubResource,
        BaseResource: BaseResource,
        ErrorModel: ErrorModel,
        ErrorDetails: ErrorDetails,
        ListHubVirtualNetworkConnectionsResult: ListHubVirtualNetworkConnectionsResult,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        Resource: Resource,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        FrontendIPConfiguration: FrontendIPConfiguration,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a HubVirtualNetworkConnections. */
    var HubVirtualNetworkConnections = /** @class */ (function () {
        /**
         * Create a HubVirtualNetworkConnections.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function HubVirtualNetworkConnections(client) {
            this.client = client;
        }
        HubVirtualNetworkConnections.prototype.get = function (resourceGroupName$$1, virtualHubName$$1, connectionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                virtualHubName: virtualHubName$$1,
                connectionName: connectionName$$1,
                options: options
            }, getOperationSpec$L, callback);
        };
        HubVirtualNetworkConnections.prototype.list = function (resourceGroupName$$1, virtualHubName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                virtualHubName: virtualHubName$$1,
                options: options
            }, listOperationSpec$P, callback);
        };
        HubVirtualNetworkConnections.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$L, callback);
        };
        return HubVirtualNetworkConnections;
    }());
    // Operation Specifications
    var serializer$W = new msRest.Serializer(Mappers$X);
    var getOperationSpec$L = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualHubs/{virtualHubName}/hubVirtualNetworkConnections/{connectionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            virtualHubName,
            connectionName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HubVirtualNetworkConnection
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$W
    };
    var listOperationSpec$P = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualHubs/{virtualHubName}/hubVirtualNetworkConnections",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            virtualHubName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListHubVirtualNetworkConnectionsResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$W
    };
    var listNextOperationSpec$L = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListHubVirtualNetworkConnectionsResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$W
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$Y = /*#__PURE__*/Object.freeze({
        VpnGateway: VpnGateway,
        Resource: Resource,
        BaseResource: BaseResource,
        SubResource: SubResource,
        VpnConnection: VpnConnection,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        ErrorModel: ErrorModel,
        ErrorDetails: ErrorDetails,
        TagsObject: TagsObject,
        ListVpnGatewaysResult: ListVpnGatewaysResult,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        FrontendIPConfiguration: FrontendIPConfiguration,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VpnGateways. */
    var VpnGateways = /** @class */ (function () {
        /**
         * Create a VpnGateways.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function VpnGateways(client) {
            this.client = client;
        }
        VpnGateways.prototype.get = function (resourceGroupName$$1, gatewayName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                gatewayName: gatewayName$$1,
                options: options
            }, getOperationSpec$M, callback);
        };
        /**
         * Creates a virtual wan vpn gateway if it doesn't exist else updates the existing gateway.
         * @param resourceGroupName The resource group name of the VpnGateway.
         * @param gatewayName The name of the gateway.
         * @param vpnGatewayParameters Parameters supplied to create or Update a virtual wan vpn gateway.
         * @param [options] The optional parameters
         * @returns Promise<Models.VpnGatewaysCreateOrUpdateResponse>
         */
        VpnGateways.prototype.createOrUpdate = function (resourceGroupName$$1, gatewayName$$1, vpnGatewayParameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, gatewayName$$1, vpnGatewayParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates virtual wan vpn gateway tags.
         * @param resourceGroupName The resource group name of the VpnGateway.
         * @param gatewayName The name of the gateway.
         * @param vpnGatewayParameters Parameters supplied to update a virtual wan vpn gateway tags.
         * @param [options] The optional parameters
         * @returns Promise<Models.VpnGatewaysUpdateTagsResponse>
         */
        VpnGateways.prototype.updateTags = function (resourceGroupName$$1, gatewayName$$1, vpnGatewayParameters, options) {
            return this.beginUpdateTags(resourceGroupName$$1, gatewayName$$1, vpnGatewayParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a virtual wan vpn gateway.
         * @param resourceGroupName The resource group name of the VpnGateway.
         * @param gatewayName The name of the gateway.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VpnGateways.prototype.deleteMethod = function (resourceGroupName$$1, gatewayName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, gatewayName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VpnGateways.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec$a, callback);
        };
        VpnGateways.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$Q, callback);
        };
        /**
         * Creates a virtual wan vpn gateway if it doesn't exist else updates the existing gateway.
         * @param resourceGroupName The resource group name of the VpnGateway.
         * @param gatewayName The name of the gateway.
         * @param vpnGatewayParameters Parameters supplied to create or Update a virtual wan vpn gateway.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VpnGateways.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, gatewayName$$1, vpnGatewayParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                gatewayName: gatewayName$$1,
                vpnGatewayParameters: vpnGatewayParameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$C, options);
        };
        /**
         * Updates virtual wan vpn gateway tags.
         * @param resourceGroupName The resource group name of the VpnGateway.
         * @param gatewayName The name of the gateway.
         * @param vpnGatewayParameters Parameters supplied to update a virtual wan vpn gateway tags.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VpnGateways.prototype.beginUpdateTags = function (resourceGroupName$$1, gatewayName$$1, vpnGatewayParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                gatewayName: gatewayName$$1,
                vpnGatewayParameters: vpnGatewayParameters,
                options: options
            }, beginUpdateTagsOperationSpec$h, options);
        };
        /**
         * Deletes a virtual wan vpn gateway.
         * @param resourceGroupName The resource group name of the VpnGateway.
         * @param gatewayName The name of the gateway.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VpnGateways.prototype.beginDeleteMethod = function (resourceGroupName$$1, gatewayName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                gatewayName: gatewayName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$D, options);
        };
        VpnGateways.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec$9, callback);
        };
        VpnGateways.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$M, callback);
        };
        return VpnGateways;
    }());
    // Operation Specifications
    var serializer$X = new msRest.Serializer(Mappers$Y);
    var getOperationSpec$M = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            gatewayName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VpnGateway
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$X
    };
    var listByResourceGroupOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListVpnGatewaysResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$X
    };
    var listOperationSpec$Q = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/vpnGateways",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListVpnGatewaysResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$X
    };
    var beginCreateOrUpdateOperationSpec$C = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            gatewayName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "vpnGatewayParameters",
            mapper: __assign({}, VpnGateway, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VpnGateway
            },
            201: {
                bodyMapper: VpnGateway
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$X
    };
    var beginUpdateTagsOperationSpec$h = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            gatewayName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "vpnGatewayParameters",
            mapper: __assign({}, TagsObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VpnGateway
            },
            201: {
                bodyMapper: VpnGateway
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$X
    };
    var beginDeleteMethodOperationSpec$D = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            gatewayName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$X
    };
    var listByResourceGroupNextOperationSpec$9 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListVpnGatewaysResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$X
    };
    var listNextOperationSpec$M = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListVpnGatewaysResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$X
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$Z = /*#__PURE__*/Object.freeze({
        VpnConnection: VpnConnection,
        SubResource: SubResource,
        BaseResource: BaseResource,
        IpsecPolicy: IpsecPolicy,
        ErrorModel: ErrorModel,
        ErrorDetails: ErrorDetails,
        ListVpnConnectionsResult: ListVpnConnectionsResult,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        Resource: Resource,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        FrontendIPConfiguration: FrontendIPConfiguration,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VpnConnections. */
    var VpnConnections = /** @class */ (function () {
        /**
         * Create a VpnConnections.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function VpnConnections(client) {
            this.client = client;
        }
        VpnConnections.prototype.get = function (resourceGroupName$$1, gatewayName$$1, connectionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                gatewayName: gatewayName$$1,
                connectionName: connectionName$$1,
                options: options
            }, getOperationSpec$N, callback);
        };
        /**
         * Creates a vpn connection to a scalable vpn gateway if it doesn't exist else updates the existing
         * connection.
         * @param resourceGroupName The resource group name of the VpnGateway.
         * @param gatewayName The name of the gateway.
         * @param connectionName The name of the connection.
         * @param vpnConnectionParameters Parameters supplied to create or Update a VPN Connection.
         * @param [options] The optional parameters
         * @returns Promise<Models.VpnConnectionsCreateOrUpdateResponse>
         */
        VpnConnections.prototype.createOrUpdate = function (resourceGroupName$$1, gatewayName$$1, connectionName$$1, vpnConnectionParameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, gatewayName$$1, connectionName$$1, vpnConnectionParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a vpn connection.
         * @param resourceGroupName The resource group name of the VpnGateway.
         * @param gatewayName The name of the gateway.
         * @param connectionName The name of the connection.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VpnConnections.prototype.deleteMethod = function (resourceGroupName$$1, gatewayName$$1, connectionName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, gatewayName$$1, connectionName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VpnConnections.prototype.listByVpnGateway = function (resourceGroupName$$1, gatewayName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                gatewayName: gatewayName$$1,
                options: options
            }, listByVpnGatewayOperationSpec, callback);
        };
        /**
         * Creates a vpn connection to a scalable vpn gateway if it doesn't exist else updates the existing
         * connection.
         * @param resourceGroupName The resource group name of the VpnGateway.
         * @param gatewayName The name of the gateway.
         * @param connectionName The name of the connection.
         * @param vpnConnectionParameters Parameters supplied to create or Update a VPN Connection.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VpnConnections.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, gatewayName$$1, connectionName$$1, vpnConnectionParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                gatewayName: gatewayName$$1,
                connectionName: connectionName$$1,
                vpnConnectionParameters: vpnConnectionParameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$D, options);
        };
        /**
         * Deletes a vpn connection.
         * @param resourceGroupName The resource group name of the VpnGateway.
         * @param gatewayName The name of the gateway.
         * @param connectionName The name of the connection.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VpnConnections.prototype.beginDeleteMethod = function (resourceGroupName$$1, gatewayName$$1, connectionName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                gatewayName: gatewayName$$1,
                connectionName: connectionName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$E, options);
        };
        VpnConnections.prototype.listByVpnGatewayNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByVpnGatewayNextOperationSpec, callback);
        };
        return VpnConnections;
    }());
    // Operation Specifications
    var serializer$Y = new msRest.Serializer(Mappers$Z);
    var getOperationSpec$N = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/vpnConnections/{connectionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            gatewayName,
            connectionName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VpnConnection
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$Y
    };
    var listByVpnGatewayOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/vpnConnections",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            gatewayName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListVpnConnectionsResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$Y
    };
    var beginCreateOrUpdateOperationSpec$D = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/vpnConnections/{connectionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            gatewayName,
            connectionName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "vpnConnectionParameters",
            mapper: __assign({}, VpnConnection, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VpnConnection
            },
            201: {
                bodyMapper: VpnConnection
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$Y
    };
    var beginDeleteMethodOperationSpec$E = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/vpnConnections/{connectionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            gatewayName,
            connectionName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$Y
    };
    var listByVpnGatewayNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListVpnConnectionsResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$Y
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$_ = /*#__PURE__*/Object.freeze({
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        SubResource: SubResource,
        BaseResource: BaseResource,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        IpsecPolicy: IpsecPolicy,
        ErrorModel: ErrorModel,
        ErrorDetails: ErrorDetails,
        ListP2SVpnServerConfigurationsResult: ListP2SVpnServerConfigurationsResult,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        Resource: Resource,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        FrontendIPConfiguration: FrontendIPConfiguration,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        AddressSpace: AddressSpace,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway,
        P2SVpnGateway: P2SVpnGateway,
        VpnClientConnectionHealth: VpnClientConnectionHealth
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a P2sVpnServerConfigurations. */
    var P2sVpnServerConfigurations = /** @class */ (function () {
        /**
         * Create a P2sVpnServerConfigurations.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function P2sVpnServerConfigurations(client) {
            this.client = client;
        }
        P2sVpnServerConfigurations.prototype.get = function (resourceGroupName$$1, virtualWanName$$1, p2SVpnServerConfigurationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                virtualWanName: virtualWanName$$1,
                p2SVpnServerConfigurationName: p2SVpnServerConfigurationName$$1,
                options: options
            }, getOperationSpec$O, callback);
        };
        /**
         * Creates a P2SVpnServerConfiguration to associate with a VirtualWan if it doesn't exist else
         * updates the existing P2SVpnServerConfiguration.
         * @param resourceGroupName The resource group name of the VirtualWan.
         * @param virtualWanName The name of the VirtualWan.
         * @param p2SVpnServerConfigurationName The name of the P2SVpnServerConfiguration.
         * @param p2SVpnServerConfigurationParameters Parameters supplied to create or Update a
         * P2SVpnServerConfiguration.
         * @param [options] The optional parameters
         * @returns Promise<Models.P2sVpnServerConfigurationsCreateOrUpdateResponse>
         */
        P2sVpnServerConfigurations.prototype.createOrUpdate = function (resourceGroupName$$1, virtualWanName$$1, p2SVpnServerConfigurationName$$1, p2SVpnServerConfigurationParameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, virtualWanName$$1, p2SVpnServerConfigurationName$$1, p2SVpnServerConfigurationParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a P2SVpnServerConfiguration.
         * @param resourceGroupName The resource group name of the P2SVpnServerConfiguration.
         * @param virtualWanName The name of the VirtualWan.
         * @param p2SVpnServerConfigurationName The name of the P2SVpnServerConfiguration.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        P2sVpnServerConfigurations.prototype.deleteMethod = function (resourceGroupName$$1, virtualWanName$$1, p2SVpnServerConfigurationName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, virtualWanName$$1, p2SVpnServerConfigurationName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        P2sVpnServerConfigurations.prototype.listByVirtualWan = function (resourceGroupName$$1, virtualWanName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                virtualWanName: virtualWanName$$1,
                options: options
            }, listByVirtualWanOperationSpec, callback);
        };
        /**
         * Creates a P2SVpnServerConfiguration to associate with a VirtualWan if it doesn't exist else
         * updates the existing P2SVpnServerConfiguration.
         * @param resourceGroupName The resource group name of the VirtualWan.
         * @param virtualWanName The name of the VirtualWan.
         * @param p2SVpnServerConfigurationName The name of the P2SVpnServerConfiguration.
         * @param p2SVpnServerConfigurationParameters Parameters supplied to create or Update a
         * P2SVpnServerConfiguration.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        P2sVpnServerConfigurations.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, virtualWanName$$1, p2SVpnServerConfigurationName$$1, p2SVpnServerConfigurationParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                virtualWanName: virtualWanName$$1,
                p2SVpnServerConfigurationName: p2SVpnServerConfigurationName$$1,
                p2SVpnServerConfigurationParameters: p2SVpnServerConfigurationParameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$E, options);
        };
        /**
         * Deletes a P2SVpnServerConfiguration.
         * @param resourceGroupName The resource group name of the P2SVpnServerConfiguration.
         * @param virtualWanName The name of the VirtualWan.
         * @param p2SVpnServerConfigurationName The name of the P2SVpnServerConfiguration.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        P2sVpnServerConfigurations.prototype.beginDeleteMethod = function (resourceGroupName$$1, virtualWanName$$1, p2SVpnServerConfigurationName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                virtualWanName: virtualWanName$$1,
                p2SVpnServerConfigurationName: p2SVpnServerConfigurationName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$F, options);
        };
        P2sVpnServerConfigurations.prototype.listByVirtualWanNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByVirtualWanNextOperationSpec, callback);
        };
        return P2sVpnServerConfigurations;
    }());
    // Operation Specifications
    var serializer$Z = new msRest.Serializer(Mappers$_);
    var getOperationSpec$O = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{virtualWanName}/p2sVpnServerConfigurations/{p2SVpnServerConfigurationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            virtualWanName,
            p2SVpnServerConfigurationName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: P2SVpnServerConfiguration
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$Z
    };
    var listByVirtualWanOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{virtualWanName}/p2sVpnServerConfigurations",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            virtualWanName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListP2SVpnServerConfigurationsResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$Z
    };
    var beginCreateOrUpdateOperationSpec$E = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{virtualWanName}/p2sVpnServerConfigurations/{p2SVpnServerConfigurationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            virtualWanName,
            p2SVpnServerConfigurationName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "p2SVpnServerConfigurationParameters",
            mapper: __assign({}, P2SVpnServerConfiguration, { required: true })
        },
        responses: {
            200: {
                bodyMapper: P2SVpnServerConfiguration
            },
            201: {
                bodyMapper: P2SVpnServerConfiguration
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$Z
    };
    var beginDeleteMethodOperationSpec$F = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{virtualWanName}/p2sVpnServerConfigurations/{p2SVpnServerConfigurationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            virtualWanName,
            p2SVpnServerConfigurationName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$Z
    };
    var listByVirtualWanNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListP2SVpnServerConfigurationsResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$Z
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$10 = /*#__PURE__*/Object.freeze({
        P2SVpnGateway: P2SVpnGateway,
        Resource: Resource,
        BaseResource: BaseResource,
        SubResource: SubResource,
        AddressSpace: AddressSpace,
        VpnClientConnectionHealth: VpnClientConnectionHealth,
        ErrorModel: ErrorModel,
        ErrorDetails: ErrorDetails,
        TagsObject: TagsObject,
        ListP2SVpnGatewaysResult: ListP2SVpnGatewaysResult,
        P2SVpnProfileParameters: P2SVpnProfileParameters,
        VpnProfileResponse: VpnProfileResponse,
        CloudError: CloudError,
        NetworkInterfaceTapConfiguration: NetworkInterfaceTapConfiguration,
        VirtualNetworkTap: VirtualNetworkTap,
        NetworkInterfaceIPConfiguration: NetworkInterfaceIPConfiguration,
        ApplicationGatewayBackendAddressPool: ApplicationGatewayBackendAddressPool,
        ApplicationGatewayBackendAddress: ApplicationGatewayBackendAddress,
        BackendAddressPool: BackendAddressPool,
        InboundNatRule: InboundNatRule,
        Subnet: Subnet,
        NetworkSecurityGroup: NetworkSecurityGroup,
        SecurityRule: SecurityRule,
        ApplicationSecurityGroup: ApplicationSecurityGroup,
        NetworkInterface: NetworkInterface,
        InterfaceEndpoint: InterfaceEndpoint,
        EndpointService: EndpointService,
        NetworkInterfaceDnsSettings: NetworkInterfaceDnsSettings,
        RouteTable: RouteTable,
        Route: Route,
        ServiceEndpointPropertiesFormat: ServiceEndpointPropertiesFormat,
        ServiceEndpointPolicy: ServiceEndpointPolicy,
        ServiceEndpointPolicyDefinition: ServiceEndpointPolicyDefinition,
        IPConfiguration: IPConfiguration,
        PublicIPAddress: PublicIPAddress,
        PublicIPAddressSku: PublicIPAddressSku,
        PublicIPAddressDnsSettings: PublicIPAddressDnsSettings,
        IpTag: IpTag,
        IPConfigurationProfile: IPConfigurationProfile,
        ResourceNavigationLink: ResourceNavigationLink,
        ServiceAssociationLink: ServiceAssociationLink,
        Delegation: Delegation,
        FrontendIPConfiguration: FrontendIPConfiguration,
        ApplicationGatewayBackendHttpSettings: ApplicationGatewayBackendHttpSettings,
        ApplicationGatewayConnectionDraining: ApplicationGatewayConnectionDraining,
        ApplicationGatewayIPConfiguration: ApplicationGatewayIPConfiguration,
        ApplicationGatewayAuthenticationCertificate: ApplicationGatewayAuthenticationCertificate,
        ApplicationGatewayTrustedRootCertificate: ApplicationGatewayTrustedRootCertificate,
        ApplicationGatewaySslCertificate: ApplicationGatewaySslCertificate,
        ApplicationGatewayFrontendIPConfiguration: ApplicationGatewayFrontendIPConfiguration,
        ApplicationGatewayFrontendPort: ApplicationGatewayFrontendPort,
        ApplicationGatewayHttpListener: ApplicationGatewayHttpListener,
        ApplicationGatewayPathRule: ApplicationGatewayPathRule,
        ApplicationGatewayProbe: ApplicationGatewayProbe,
        ApplicationGatewayProbeHealthResponseMatch: ApplicationGatewayProbeHealthResponseMatch,
        ApplicationGatewayRequestRoutingRule: ApplicationGatewayRequestRoutingRule,
        ApplicationGatewayRedirectConfiguration: ApplicationGatewayRedirectConfiguration,
        ApplicationGatewayUrlPathMap: ApplicationGatewayUrlPathMap,
        ApplicationGateway: ApplicationGateway,
        ApplicationGatewaySku: ApplicationGatewaySku,
        ApplicationGatewaySslPolicy: ApplicationGatewaySslPolicy,
        ApplicationGatewayWebApplicationFirewallConfiguration: ApplicationGatewayWebApplicationFirewallConfiguration,
        ApplicationGatewayFirewallDisabledRuleGroup: ApplicationGatewayFirewallDisabledRuleGroup,
        ApplicationGatewayAutoscaleConfiguration: ApplicationGatewayAutoscaleConfiguration,
        ApplicationGatewayFirewallRuleSet: ApplicationGatewayFirewallRuleSet,
        ApplicationGatewayFirewallRuleGroup: ApplicationGatewayFirewallRuleGroup,
        ApplicationGatewayFirewallRule: ApplicationGatewayFirewallRule,
        ApplicationGatewayAvailableSslOptions: ApplicationGatewayAvailableSslOptions,
        ApplicationGatewaySslPredefinedPolicy: ApplicationGatewaySslPredefinedPolicy,
        AzureFirewallIPConfiguration: AzureFirewallIPConfiguration,
        AzureFirewallApplicationRuleCollection: AzureFirewallApplicationRuleCollection,
        AzureFirewallRCAction: AzureFirewallRCAction,
        AzureFirewallApplicationRule: AzureFirewallApplicationRule,
        AzureFirewallApplicationRuleProtocol: AzureFirewallApplicationRuleProtocol,
        AzureFirewallNatRuleCollection: AzureFirewallNatRuleCollection,
        AzureFirewallNatRCAction: AzureFirewallNatRCAction,
        AzureFirewallNatRule: AzureFirewallNatRule,
        AzureFirewallNetworkRuleCollection: AzureFirewallNetworkRuleCollection,
        AzureFirewallNetworkRule: AzureFirewallNetworkRule,
        AzureFirewall: AzureFirewall,
        AzureFirewallFqdnTag: AzureFirewallFqdnTag,
        DdosProtectionPlan: DdosProtectionPlan,
        EndpointServiceResult: EndpointServiceResult,
        ExpressRouteCircuitAuthorization: ExpressRouteCircuitAuthorization,
        RouteFilterRule: RouteFilterRule,
        ExpressRouteCircuitConnection: ExpressRouteCircuitConnection,
        ExpressRouteCircuitPeering: ExpressRouteCircuitPeering,
        ExpressRouteCircuitPeeringConfig: ExpressRouteCircuitPeeringConfig,
        ExpressRouteCircuitStats: ExpressRouteCircuitStats,
        RouteFilter: RouteFilter,
        Ipv6ExpressRouteCircuitPeeringConfig: Ipv6ExpressRouteCircuitPeeringConfig,
        ExpressRouteConnectionId: ExpressRouteConnectionId,
        ExpressRouteCircuit: ExpressRouteCircuit,
        ExpressRouteCircuitSku: ExpressRouteCircuitSku,
        ExpressRouteCircuitServiceProviderProperties: ExpressRouteCircuitServiceProviderProperties,
        ExpressRouteServiceProvider: ExpressRouteServiceProvider,
        ExpressRouteServiceProviderBandwidthsOffered: ExpressRouteServiceProviderBandwidthsOffered,
        ExpressRouteCrossConnectionPeering: ExpressRouteCrossConnectionPeering,
        ExpressRouteCrossConnection: ExpressRouteCrossConnection,
        ExpressRouteCircuitReference: ExpressRouteCircuitReference,
        ExpressRouteConnection: ExpressRouteConnection,
        ExpressRouteCircuitPeeringId: ExpressRouteCircuitPeeringId,
        ExpressRouteGateway: ExpressRouteGateway,
        ExpressRouteGatewayPropertiesAutoScaleConfiguration: ExpressRouteGatewayPropertiesAutoScaleConfiguration,
        ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds,
        VirtualHubId: VirtualHubId,
        LoadBalancingRule: LoadBalancingRule,
        Probe: Probe,
        InboundNatPool: InboundNatPool,
        OutboundRule: OutboundRule,
        LoadBalancer: LoadBalancer,
        LoadBalancerSku: LoadBalancerSku,
        ContainerNetworkInterfaceConfiguration: ContainerNetworkInterfaceConfiguration,
        ContainerNetworkInterface: ContainerNetworkInterface,
        Container: Container,
        ContainerNetworkInterfaceIpConfiguration: ContainerNetworkInterfaceIpConfiguration,
        NetworkProfile: NetworkProfile,
        NetworkWatcher: NetworkWatcher,
        ConnectionMonitorResult: ConnectionMonitorResult,
        ConnectionMonitorSource: ConnectionMonitorSource,
        ConnectionMonitorDestination: ConnectionMonitorDestination,
        PublicIPPrefix: PublicIPPrefix,
        PublicIPPrefixSku: PublicIPPrefixSku,
        ReferencedPublicIpAddress: ReferencedPublicIpAddress,
        PatchRouteFilterRule: PatchRouteFilterRule,
        PatchRouteFilter: PatchRouteFilter,
        BgpServiceCommunity: BgpServiceCommunity,
        BGPCommunity: BGPCommunity,
        VirtualNetworkPeering: VirtualNetworkPeering,
        VirtualNetwork: VirtualNetwork,
        DhcpOptions: DhcpOptions,
        VirtualNetworkGatewayIPConfiguration: VirtualNetworkGatewayIPConfiguration,
        VpnClientRootCertificate: VpnClientRootCertificate,
        VpnClientRevokedCertificate: VpnClientRevokedCertificate,
        VirtualNetworkGateway: VirtualNetworkGateway,
        VirtualNetworkGatewaySku: VirtualNetworkGatewaySku,
        VpnClientConfiguration: VpnClientConfiguration,
        IpsecPolicy: IpsecPolicy,
        BgpSettings: BgpSettings,
        LocalNetworkGateway: LocalNetworkGateway,
        VirtualNetworkGatewayConnection: VirtualNetworkGatewayConnection,
        TunnelConnectionHealth: TunnelConnectionHealth,
        ConnectionSharedKey: ConnectionSharedKey,
        VirtualNetworkGatewayConnectionListEntity: VirtualNetworkGatewayConnectionListEntity,
        VirtualNetworkConnectionGatewayReference: VirtualNetworkConnectionGatewayReference,
        P2SVpnServerConfigVpnClientRootCertificate: P2SVpnServerConfigVpnClientRootCertificate,
        P2SVpnServerConfigVpnClientRevokedCertificate: P2SVpnServerConfigVpnClientRevokedCertificate,
        P2SVpnServerConfigRadiusServerRootCertificate: P2SVpnServerConfigRadiusServerRootCertificate,
        P2SVpnServerConfigRadiusClientRootCertificate: P2SVpnServerConfigRadiusClientRootCertificate,
        P2SVpnServerConfiguration: P2SVpnServerConfiguration,
        VirtualWAN: VirtualWAN,
        VpnSite: VpnSite,
        DeviceProperties: DeviceProperties,
        HubVirtualNetworkConnection: HubVirtualNetworkConnection,
        VirtualHub: VirtualHub,
        VirtualHubRouteTable: VirtualHubRouteTable,
        VirtualHubRoute: VirtualHubRoute,
        VpnConnection: VpnConnection,
        VpnGateway: VpnGateway
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a P2sVpnGateways. */
    var P2sVpnGateways = /** @class */ (function () {
        /**
         * Create a P2sVpnGateways.
         * @param {NetworkManagementClientContext} client Reference to the service client.
         */
        function P2sVpnGateways(client) {
            this.client = client;
        }
        P2sVpnGateways.prototype.get = function (resourceGroupName$$1, gatewayName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                gatewayName: gatewayName$$1,
                options: options
            }, getOperationSpec$P, callback);
        };
        /**
         * Creates a virtual wan p2s vpn gateway if it doesn't exist else updates the existing gateway.
         * @param resourceGroupName The resource group name of the P2SVpnGateway.
         * @param gatewayName The name of the gateway.
         * @param p2SVpnGatewayParameters Parameters supplied to create or Update a virtual wan p2s vpn
         * gateway.
         * @param [options] The optional parameters
         * @returns Promise<Models.P2sVpnGatewaysCreateOrUpdateResponse>
         */
        P2sVpnGateways.prototype.createOrUpdate = function (resourceGroupName$$1, gatewayName$$1, p2SVpnGatewayParameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, gatewayName$$1, p2SVpnGatewayParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates virtual wan p2s vpn gateway tags.
         * @param resourceGroupName The resource group name of the P2SVpnGateway.
         * @param gatewayName The name of the gateway.
         * @param p2SVpnGatewayParameters Parameters supplied to update a virtual wan p2s vpn gateway tags.
         * @param [options] The optional parameters
         * @returns Promise<Models.P2sVpnGatewaysUpdateTagsResponse>
         */
        P2sVpnGateways.prototype.updateTags = function (resourceGroupName$$1, gatewayName$$1, p2SVpnGatewayParameters, options) {
            return this.beginUpdateTags(resourceGroupName$$1, gatewayName$$1, p2SVpnGatewayParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a virtual wan p2s vpn gateway.
         * @param resourceGroupName The resource group name of the P2SVpnGateway.
         * @param gatewayName The name of the gateway.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        P2sVpnGateways.prototype.deleteMethod = function (resourceGroupName$$1, gatewayName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, gatewayName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        P2sVpnGateways.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec$b, callback);
        };
        P2sVpnGateways.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$R, callback);
        };
        /**
         * Generates VPN profile for P2S client of the P2SVpnGateway in the specified resource group.
         * @param resourceGroupName The name of the resource group.
         * @param gatewayName The name of the P2SVpnGateway.
         * @param parameters Parameters supplied to the generate P2SVpnGateway VPN client package
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.P2sVpnGatewaysGenerateVpnProfileResponse>
         */
        P2sVpnGateways.prototype.generateVpnProfile = function (resourceGroupName$$1, gatewayName$$1, parameters, options) {
            return this.beginGenerateVpnProfile(resourceGroupName$$1, gatewayName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates a virtual wan p2s vpn gateway if it doesn't exist else updates the existing gateway.
         * @param resourceGroupName The resource group name of the P2SVpnGateway.
         * @param gatewayName The name of the gateway.
         * @param p2SVpnGatewayParameters Parameters supplied to create or Update a virtual wan p2s vpn
         * gateway.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        P2sVpnGateways.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, gatewayName$$1, p2SVpnGatewayParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                gatewayName: gatewayName$$1,
                p2SVpnGatewayParameters: p2SVpnGatewayParameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$F, options);
        };
        /**
         * Updates virtual wan p2s vpn gateway tags.
         * @param resourceGroupName The resource group name of the P2SVpnGateway.
         * @param gatewayName The name of the gateway.
         * @param p2SVpnGatewayParameters Parameters supplied to update a virtual wan p2s vpn gateway tags.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        P2sVpnGateways.prototype.beginUpdateTags = function (resourceGroupName$$1, gatewayName$$1, p2SVpnGatewayParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                gatewayName: gatewayName$$1,
                p2SVpnGatewayParameters: p2SVpnGatewayParameters,
                options: options
            }, beginUpdateTagsOperationSpec$i, options);
        };
        /**
         * Deletes a virtual wan p2s vpn gateway.
         * @param resourceGroupName The resource group name of the P2SVpnGateway.
         * @param gatewayName The name of the gateway.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        P2sVpnGateways.prototype.beginDeleteMethod = function (resourceGroupName$$1, gatewayName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                gatewayName: gatewayName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$G, options);
        };
        /**
         * Generates VPN profile for P2S client of the P2SVpnGateway in the specified resource group.
         * @param resourceGroupName The name of the resource group.
         * @param gatewayName The name of the P2SVpnGateway.
         * @param parameters Parameters supplied to the generate P2SVpnGateway VPN client package
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        P2sVpnGateways.prototype.beginGenerateVpnProfile = function (resourceGroupName$$1, gatewayName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                gatewayName: gatewayName$$1,
                parameters: parameters,
                options: options
            }, beginGenerateVpnProfileOperationSpec$1, options);
        };
        P2sVpnGateways.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec$a, callback);
        };
        P2sVpnGateways.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$N, callback);
        };
        return P2sVpnGateways;
    }());
    // Operation Specifications
    var serializer$_ = new msRest.Serializer(Mappers$10);
    var getOperationSpec$P = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/p2svpnGateways/{gatewayName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            gatewayName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: P2SVpnGateway
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$_
    };
    var listByResourceGroupOperationSpec$b = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/p2svpnGateways",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListP2SVpnGatewaysResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$_
    };
    var listOperationSpec$R = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/p2svpnGateways",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListP2SVpnGatewaysResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$_
    };
    var beginCreateOrUpdateOperationSpec$F = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/p2svpnGateways/{gatewayName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            gatewayName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "p2SVpnGatewayParameters",
            mapper: __assign({}, P2SVpnGateway, { required: true })
        },
        responses: {
            200: {
                bodyMapper: P2SVpnGateway
            },
            201: {
                bodyMapper: P2SVpnGateway
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$_
    };
    var beginUpdateTagsOperationSpec$i = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/p2svpnGateways/{gatewayName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            gatewayName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "p2SVpnGatewayParameters",
            mapper: __assign({}, TagsObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: P2SVpnGateway
            },
            201: {
                bodyMapper: P2SVpnGateway
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$_
    };
    var beginDeleteMethodOperationSpec$G = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/p2svpnGateways/{gatewayName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            gatewayName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$_
    };
    var beginGenerateVpnProfileOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/p2svpnGateways/{gatewayName}/generatevpnprofile",
        urlParameters: [
            resourceGroupName,
            gatewayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, P2SVpnProfileParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VpnProfileResponse
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$_
    };
    var listByResourceGroupNextOperationSpec$a = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListP2SVpnGatewaysResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$_
    };
    var listNextOperationSpec$N = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListP2SVpnGatewaysResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$_
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-network";
    var packageVersion = "1.0.0";
    var NetworkManagementClientContext = /** @class */ (function (_super) {
        __extends(NetworkManagementClientContext, _super);
        /**
         * Initializes a new instance of the NetworkManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function NetworkManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return NetworkManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var NetworkManagementClient = /** @class */ (function (_super) {
        __extends(NetworkManagementClient, _super);
        /**
         * Initializes a new instance of the NetworkManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function NetworkManagementClient(credentials, subscriptionId$$1, options) {
            var _this = _super.call(this, credentials, subscriptionId$$1, options) || this;
            _this.applicationGateways = new ApplicationGateways(_this);
            _this.applicationSecurityGroups = new ApplicationSecurityGroups(_this);
            _this.availableDelegations = new AvailableDelegations(_this);
            _this.availableResourceGroupDelegations = new AvailableResourceGroupDelegations(_this);
            _this.azureFirewalls = new AzureFirewalls(_this);
            _this.azureFirewallFqdnTags = new AzureFirewallFqdnTags(_this);
            _this.ddosProtectionPlans = new DdosProtectionPlans(_this);
            _this.availableEndpointServices = new AvailableEndpointServices(_this);
            _this.expressRouteCircuitAuthorizations = new ExpressRouteCircuitAuthorizations(_this);
            _this.expressRouteCircuitPeerings = new ExpressRouteCircuitPeerings(_this);
            _this.expressRouteCircuitConnections = new ExpressRouteCircuitConnections(_this);
            _this.expressRouteCircuits = new ExpressRouteCircuits(_this);
            _this.expressRouteServiceProviders = new ExpressRouteServiceProviders(_this);
            _this.expressRouteCrossConnections = new ExpressRouteCrossConnections(_this);
            _this.expressRouteCrossConnectionPeerings = new ExpressRouteCrossConnectionPeerings(_this);
            _this.expressRouteGateways = new ExpressRouteGateways(_this);
            _this.expressRouteConnections = new ExpressRouteConnections(_this);
            _this.interfaceEndpoints = new InterfaceEndpoints(_this);
            _this.loadBalancers = new LoadBalancers(_this);
            _this.loadBalancerBackendAddressPools = new LoadBalancerBackendAddressPools(_this);
            _this.loadBalancerFrontendIPConfigurations = new LoadBalancerFrontendIPConfigurations(_this);
            _this.inboundNatRules = new InboundNatRules(_this);
            _this.loadBalancerLoadBalancingRules = new LoadBalancerLoadBalancingRules(_this);
            _this.loadBalancerNetworkInterfaces = new LoadBalancerNetworkInterfaces(_this);
            _this.loadBalancerProbes = new LoadBalancerProbes(_this);
            _this.networkInterfaces = new NetworkInterfaces(_this);
            _this.networkInterfaceIPConfigurations = new NetworkInterfaceIPConfigurations(_this);
            _this.networkInterfaceLoadBalancers = new NetworkInterfaceLoadBalancers(_this);
            _this.networkInterfaceTapConfigurations = new NetworkInterfaceTapConfigurations(_this);
            _this.networkProfiles = new NetworkProfiles(_this);
            _this.networkSecurityGroups = new NetworkSecurityGroups(_this);
            _this.securityRules = new SecurityRules(_this);
            _this.defaultSecurityRules = new DefaultSecurityRules(_this);
            _this.networkWatchers = new NetworkWatchers(_this);
            _this.packetCaptures = new PacketCaptures(_this);
            _this.connectionMonitors = new ConnectionMonitors(_this);
            _this.operations = new Operations(_this);
            _this.publicIPAddresses = new PublicIPAddresses(_this);
            _this.publicIPPrefixes = new PublicIPPrefixes(_this);
            _this.routeFilters = new RouteFilters(_this);
            _this.routeFilterRules = new RouteFilterRules(_this);
            _this.routeTables = new RouteTables(_this);
            _this.routes = new Routes(_this);
            _this.bgpServiceCommunities = new BgpServiceCommunities(_this);
            _this.serviceEndpointPolicies = new ServiceEndpointPolicies(_this);
            _this.serviceEndpointPolicyDefinitions = new ServiceEndpointPolicyDefinitions(_this);
            _this.usages = new Usages(_this);
            _this.virtualNetworks = new VirtualNetworks(_this);
            _this.subnets = new Subnets(_this);
            _this.virtualNetworkPeerings = new VirtualNetworkPeerings(_this);
            _this.virtualNetworkTaps = new VirtualNetworkTaps(_this);
            _this.virtualNetworkGateways = new VirtualNetworkGateways(_this);
            _this.virtualNetworkGatewayConnections = new VirtualNetworkGatewayConnections(_this);
            _this.localNetworkGateways = new LocalNetworkGateways(_this);
            _this.virtualWans = new VirtualWans(_this);
            _this.vpnSites = new VpnSites(_this);
            _this.vpnSitesConfiguration = new VpnSitesConfiguration(_this);
            _this.virtualHubs = new VirtualHubs(_this);
            _this.hubVirtualNetworkConnections = new HubVirtualNetworkConnections(_this);
            _this.vpnGateways = new VpnGateways(_this);
            _this.vpnConnections = new VpnConnections(_this);
            _this.p2sVpnServerConfigurations = new P2sVpnServerConfigurations(_this);
            _this.p2sVpnGateways = new P2sVpnGateways(_this);
            return _this;
        }
        NetworkManagementClient.prototype.checkDnsNameAvailability = function (location, domainNameLabel$$1, options, callback) {
            return this.sendOperationRequest({
                location: location,
                domainNameLabel: domainNameLabel$$1,
                options: options
            }, checkDnsNameAvailabilityOperationSpec, callback);
        };
        NetworkManagementClient.prototype.supportedSecurityProviders = function (resourceGroupName$$1, virtualWANName, options, callback) {
            return this.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                virtualWANName: virtualWANName,
                options: options
            }, supportedSecurityProvidersOperationSpec, callback);
        };
        return NetworkManagementClient;
    }(NetworkManagementClientContext));
    // Operation Specifications
    var serializer$10 = new msRest.Serializer(Mappers);
    var checkDnsNameAvailabilityOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/CheckDnsNameAvailability",
        urlParameters: [
            location0,
            subscriptionId
        ],
        queryParameters: [
            domainNameLabel,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DnsNameAvailabilityResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$10
    };
    var supportedSecurityProvidersOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{virtualWANName}/supportedSecurityProviders",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            virtualWANName0
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualWanSecurityProviders
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$10
    };

    exports.NetworkManagementClient = NetworkManagementClient;
    exports.NetworkManagementClientContext = NetworkManagementClientContext;
    exports.NetworkManagementModels = index;
    exports.NetworkManagementMappers = Mappers;
    exports.ApplicationGateways = ApplicationGateways;
    exports.ApplicationSecurityGroups = ApplicationSecurityGroups;
    exports.AvailableDelegations = AvailableDelegations;
    exports.AvailableResourceGroupDelegations = AvailableResourceGroupDelegations;
    exports.AzureFirewalls = AzureFirewalls;
    exports.AzureFirewallFqdnTags = AzureFirewallFqdnTags;
    exports.DdosProtectionPlans = DdosProtectionPlans;
    exports.AvailableEndpointServices = AvailableEndpointServices;
    exports.ExpressRouteCircuitAuthorizations = ExpressRouteCircuitAuthorizations;
    exports.ExpressRouteCircuitPeerings = ExpressRouteCircuitPeerings;
    exports.ExpressRouteCircuitConnections = ExpressRouteCircuitConnections;
    exports.ExpressRouteCircuits = ExpressRouteCircuits;
    exports.ExpressRouteServiceProviders = ExpressRouteServiceProviders;
    exports.ExpressRouteCrossConnections = ExpressRouteCrossConnections;
    exports.ExpressRouteCrossConnectionPeerings = ExpressRouteCrossConnectionPeerings;
    exports.ExpressRouteGateways = ExpressRouteGateways;
    exports.ExpressRouteConnections = ExpressRouteConnections;
    exports.InterfaceEndpoints = InterfaceEndpoints;
    exports.LoadBalancers = LoadBalancers;
    exports.LoadBalancerBackendAddressPools = LoadBalancerBackendAddressPools;
    exports.LoadBalancerFrontendIPConfigurations = LoadBalancerFrontendIPConfigurations;
    exports.InboundNatRules = InboundNatRules;
    exports.LoadBalancerLoadBalancingRules = LoadBalancerLoadBalancingRules;
    exports.LoadBalancerNetworkInterfaces = LoadBalancerNetworkInterfaces;
    exports.LoadBalancerProbes = LoadBalancerProbes;
    exports.NetworkInterfaces = NetworkInterfaces;
    exports.NetworkInterfaceIPConfigurations = NetworkInterfaceIPConfigurations;
    exports.NetworkInterfaceLoadBalancers = NetworkInterfaceLoadBalancers;
    exports.NetworkInterfaceTapConfigurations = NetworkInterfaceTapConfigurations;
    exports.NetworkProfiles = NetworkProfiles;
    exports.NetworkSecurityGroups = NetworkSecurityGroups;
    exports.SecurityRules = SecurityRules;
    exports.DefaultSecurityRules = DefaultSecurityRules;
    exports.NetworkWatchers = NetworkWatchers;
    exports.PacketCaptures = PacketCaptures;
    exports.ConnectionMonitors = ConnectionMonitors;
    exports.Operations = Operations;
    exports.PublicIPAddresses = PublicIPAddresses;
    exports.PublicIPPrefixes = PublicIPPrefixes;
    exports.RouteFilters = RouteFilters;
    exports.RouteFilterRules = RouteFilterRules;
    exports.RouteTables = RouteTables;
    exports.Routes = Routes;
    exports.BgpServiceCommunities = BgpServiceCommunities;
    exports.ServiceEndpointPolicies = ServiceEndpointPolicies;
    exports.ServiceEndpointPolicyDefinitions = ServiceEndpointPolicyDefinitions;
    exports.Usages = Usages;
    exports.VirtualNetworks = VirtualNetworks;
    exports.Subnets = Subnets;
    exports.VirtualNetworkPeerings = VirtualNetworkPeerings;
    exports.VirtualNetworkTaps = VirtualNetworkTaps;
    exports.VirtualNetworkGateways = VirtualNetworkGateways;
    exports.VirtualNetworkGatewayConnections = VirtualNetworkGatewayConnections;
    exports.LocalNetworkGateways = LocalNetworkGateways;
    exports.VirtualWans = VirtualWans;
    exports.VpnSites = VpnSites;
    exports.VpnSitesConfiguration = VpnSitesConfiguration;
    exports.VirtualHubs = VirtualHubs;
    exports.HubVirtualNetworkConnections = HubVirtualNetworkConnections;
    exports.VpnGateways = VpnGateways;
    exports.VpnConnections = VpnConnections;
    exports.P2sVpnServerConfigurations = P2sVpnServerConfigurations;
    exports.P2sVpnGateways = P2sVpnGateways;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-network.js.map
