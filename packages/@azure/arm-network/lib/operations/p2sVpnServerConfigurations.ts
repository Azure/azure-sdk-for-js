/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as msRestAzure from "ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/p2sVpnServerConfigurationsMappers";
import * as Parameters from "../models/parameters";
import { NetworkManagementClientContext } from "../networkManagementClientContext";

/** Class representing a P2sVpnServerConfigurations. */
export class P2sVpnServerConfigurations {
  private readonly client: NetworkManagementClientContext;

  /**
   * Create a P2sVpnServerConfigurations.
   * @param {NetworkManagementClientContext} client Reference to the service client.
   */
  constructor(client: NetworkManagementClientContext) {
    this.client = client;
  }

  /**
   * Retrieves the details of a P2SVpnServerConfiguration.
   * @param resourceGroupName The resource group name of the P2SVpnServerConfiguration.
   * @param virtualWanName The name of the VirtualWan.
   * @param p2SVpnServerConfigurationName The name of the P2SVpnServerConfiguration.
   * @param [options] The optional parameters
   * @returns Promise<Models.P2sVpnServerConfigurationsGetResponse>
   */
  get(resourceGroupName: string, virtualWanName: string, p2SVpnServerConfigurationName: string, options?: msRest.RequestOptionsBase): Promise<Models.P2sVpnServerConfigurationsGetResponse>;
  /**
   * @param resourceGroupName The resource group name of the P2SVpnServerConfiguration.
   * @param virtualWanName The name of the VirtualWan.
   * @param p2SVpnServerConfigurationName The name of the P2SVpnServerConfiguration.
   * @param callback The callback
   */
  get(resourceGroupName: string, virtualWanName: string, p2SVpnServerConfigurationName: string, callback: msRest.ServiceCallback<Models.P2SVpnServerConfiguration>): void;
  /**
   * @param resourceGroupName The resource group name of the P2SVpnServerConfiguration.
   * @param virtualWanName The name of the VirtualWan.
   * @param p2SVpnServerConfigurationName The name of the P2SVpnServerConfiguration.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, virtualWanName: string, p2SVpnServerConfigurationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.P2SVpnServerConfiguration>): void;
  get(resourceGroupName: string, virtualWanName: string, p2SVpnServerConfigurationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.P2SVpnServerConfiguration>, callback?: msRest.ServiceCallback<Models.P2SVpnServerConfiguration>): Promise<Models.P2sVpnServerConfigurationsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        virtualWanName,
        p2SVpnServerConfigurationName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.P2sVpnServerConfigurationsGetResponse>;
  }

  /**
   * Creates a P2SVpnServerConfiguration to associate with a VirtualWan if it doesn't exist else
   * updates the existing P2SVpnServerConfiguration.
   * @param resourceGroupName The resource group name of the VirtualWan.
   * @param virtualWanName The name of the VirtualWan.
   * @param p2SVpnServerConfigurationName The name of the P2SVpnServerConfiguration.
   * @param p2SVpnServerConfigurationParameters Parameters supplied to create or Update a
   * P2SVpnServerConfiguration.
   * @param [options] The optional parameters
   * @returns Promise<Models.P2sVpnServerConfigurationsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, virtualWanName: string, p2SVpnServerConfigurationName: string, p2SVpnServerConfigurationParameters: Models.P2SVpnServerConfiguration, options?: msRest.RequestOptionsBase): Promise<Models.P2sVpnServerConfigurationsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,virtualWanName,p2SVpnServerConfigurationName,p2SVpnServerConfigurationParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.P2sVpnServerConfigurationsCreateOrUpdateResponse>;
  }

  /**
   * Deletes a P2SVpnServerConfiguration.
   * @param resourceGroupName The resource group name of the P2SVpnServerConfiguration.
   * @param virtualWanName The name of the VirtualWan.
   * @param p2SVpnServerConfigurationName The name of the P2SVpnServerConfiguration.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, virtualWanName: string, p2SVpnServerConfigurationName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,virtualWanName,p2SVpnServerConfigurationName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Retrieves all P2SVpnServerConfigurations for a particular VirtualWan.
   * @param resourceGroupName The resource group name of the VirtualWan.
   * @param virtualWanName The name of the VirtualWan.
   * @param [options] The optional parameters
   * @returns Promise<Models.P2sVpnServerConfigurationsListByVirtualWanResponse>
   */
  listByVirtualWan(resourceGroupName: string, virtualWanName: string, options?: msRest.RequestOptionsBase): Promise<Models.P2sVpnServerConfigurationsListByVirtualWanResponse>;
  /**
   * @param resourceGroupName The resource group name of the VirtualWan.
   * @param virtualWanName The name of the VirtualWan.
   * @param callback The callback
   */
  listByVirtualWan(resourceGroupName: string, virtualWanName: string, callback: msRest.ServiceCallback<Models.ListP2SVpnServerConfigurationsResult>): void;
  /**
   * @param resourceGroupName The resource group name of the VirtualWan.
   * @param virtualWanName The name of the VirtualWan.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByVirtualWan(resourceGroupName: string, virtualWanName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ListP2SVpnServerConfigurationsResult>): void;
  listByVirtualWan(resourceGroupName: string, virtualWanName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ListP2SVpnServerConfigurationsResult>, callback?: msRest.ServiceCallback<Models.ListP2SVpnServerConfigurationsResult>): Promise<Models.P2sVpnServerConfigurationsListByVirtualWanResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        virtualWanName,
        options
      },
      listByVirtualWanOperationSpec,
      callback) as Promise<Models.P2sVpnServerConfigurationsListByVirtualWanResponse>;
  }

  /**
   * Creates a P2SVpnServerConfiguration to associate with a VirtualWan if it doesn't exist else
   * updates the existing P2SVpnServerConfiguration.
   * @param resourceGroupName The resource group name of the VirtualWan.
   * @param virtualWanName The name of the VirtualWan.
   * @param p2SVpnServerConfigurationName The name of the P2SVpnServerConfiguration.
   * @param p2SVpnServerConfigurationParameters Parameters supplied to create or Update a
   * P2SVpnServerConfiguration.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, virtualWanName: string, p2SVpnServerConfigurationName: string, p2SVpnServerConfigurationParameters: Models.P2SVpnServerConfiguration, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        virtualWanName,
        p2SVpnServerConfigurationName,
        p2SVpnServerConfigurationParameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Deletes a P2SVpnServerConfiguration.
   * @param resourceGroupName The resource group name of the P2SVpnServerConfiguration.
   * @param virtualWanName The name of the VirtualWan.
   * @param p2SVpnServerConfigurationName The name of the P2SVpnServerConfiguration.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, virtualWanName: string, p2SVpnServerConfigurationName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        virtualWanName,
        p2SVpnServerConfigurationName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Retrieves all P2SVpnServerConfigurations for a particular VirtualWan.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.P2sVpnServerConfigurationsListByVirtualWanNextResponse>
   */
  listByVirtualWanNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.P2sVpnServerConfigurationsListByVirtualWanNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByVirtualWanNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ListP2SVpnServerConfigurationsResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByVirtualWanNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ListP2SVpnServerConfigurationsResult>): void;
  listByVirtualWanNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ListP2SVpnServerConfigurationsResult>, callback?: msRest.ServiceCallback<Models.ListP2SVpnServerConfigurationsResult>): Promise<Models.P2sVpnServerConfigurationsListByVirtualWanNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByVirtualWanNextOperationSpec,
      callback) as Promise<Models.P2sVpnServerConfigurationsListByVirtualWanNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{virtualWanName}/p2sVpnServerConfigurations/{p2SVpnServerConfigurationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.virtualWanName,
    Parameters.p2SVpnServerConfigurationName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.P2SVpnServerConfiguration
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const listByVirtualWanOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{virtualWanName}/p2sVpnServerConfigurations",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.virtualWanName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListP2SVpnServerConfigurationsResult
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{virtualWanName}/p2sVpnServerConfigurations/{p2SVpnServerConfigurationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.virtualWanName,
    Parameters.p2SVpnServerConfigurationName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "p2SVpnServerConfigurationParameters",
    mapper: {
      ...Mappers.P2SVpnServerConfiguration,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.P2SVpnServerConfiguration
    },
    201: {
      bodyMapper: Mappers.P2SVpnServerConfiguration
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{virtualWanName}/p2sVpnServerConfigurations/{p2SVpnServerConfigurationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.virtualWanName,
    Parameters.p2SVpnServerConfigurationName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const listByVirtualWanNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListP2SVpnServerConfigurationsResult
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
