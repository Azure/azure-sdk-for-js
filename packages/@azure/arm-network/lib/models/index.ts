/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };


/**
 * @interface
 * An interface representing SubResource.
 * Reference to another subresource.
 *
 * @extends BaseResource
 */
export interface SubResource extends BaseResource {
  /**
   * @member {string} [id] Resource ID.
   */
  id?: string;
}

/**
 * @interface
 * An interface representing NetworkInterfaceTapConfiguration.
 * Tap configuration in a Network Interface
 *
 * @extends SubResource
 */
export interface NetworkInterfaceTapConfiguration extends SubResource {
  /**
   * @member {VirtualNetworkTap} [virtualNetworkTap] The reference of the
   * Virtual Network Tap resource.
   */
  virtualNetworkTap?: VirtualNetworkTap;
  /**
   * @member {string} [provisioningState] The provisioning state of the network
   * interface tap configuration. Possible values are: 'Updating', 'Deleting',
   * and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [name] The name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
  /**
   * @member {string} [type] Sub Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
}

/**
 * @interface
 * An interface representing Resource.
 * Common resource representation.
 *
 * @extends BaseResource
 */
export interface Resource extends BaseResource {
  /**
   * @member {string} [id] Resource ID.
   */
  id?: string;
  /**
   * @member {string} [name] Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [type] Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} [location] Resource location.
   */
  location?: string;
  /**
   * @member {{ [propertyName: string]: string }} [tags] Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing ApplicationSecurityGroup.
 * An application security group in a resource group.
 *
 * @extends Resource
 */
export interface ApplicationSecurityGroup extends Resource {
  /**
   * @member {string} [resourceGuid] The resource GUID property of the
   * application security group resource. It uniquely identifies a resource,
   * even if the user changes its name or migrate the resource across
   * subscriptions or resource groups.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly resourceGuid?: string;
  /**
   * @member {string} [provisioningState] The provisioning state of the
   * application security group resource. Possible values are: 'Succeeded',
   * 'Updating', 'Deleting', and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
}

/**
 * @interface
 * An interface representing SecurityRule.
 * Network security rule.
 *
 * @extends SubResource
 */
export interface SecurityRule extends SubResource {
  /**
   * @member {string} [description] A description for this rule. Restricted to
   * 140 chars.
   */
  description?: string;
  /**
   * @member {SecurityRuleProtocol} protocol Network protocol this rule applies
   * to. Possible values are 'Tcp', 'Udp', and '*'. Possible values include:
   * 'Tcp', 'Udp', '*'
   */
  protocol: SecurityRuleProtocol;
  /**
   * @member {string} [sourcePortRange] The source port or range. Integer or
   * range between 0 and 65535. Asterix '*' can also be used to match all
   * ports.
   */
  sourcePortRange?: string;
  /**
   * @member {string} [destinationPortRange] The destination port or range.
   * Integer or range between 0 and 65535. Asterix '*' can also be used to
   * match all ports.
   */
  destinationPortRange?: string;
  /**
   * @member {string} [sourceAddressPrefix] The CIDR or source IP range.
   * Asterix '*' can also be used to match all source IPs. Default tags such as
   * 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used. If
   * this is an ingress rule, specifies where network traffic originates from.
   */
  sourceAddressPrefix?: string;
  /**
   * @member {string[]} [sourceAddressPrefixes] The CIDR or source IP ranges.
   */
  sourceAddressPrefixes?: string[];
  /**
   * @member {ApplicationSecurityGroup[]} [sourceApplicationSecurityGroups] The
   * application security group specified as source.
   */
  sourceApplicationSecurityGroups?: ApplicationSecurityGroup[];
  /**
   * @member {string} [destinationAddressPrefix] The destination address
   * prefix. CIDR or destination IP range. Asterix '*' can also be used to
   * match all source IPs. Default tags such as 'VirtualNetwork',
   * 'AzureLoadBalancer' and 'Internet' can also be used.
   */
  destinationAddressPrefix?: string;
  /**
   * @member {string[]} [destinationAddressPrefixes] The destination address
   * prefixes. CIDR or destination IP ranges.
   */
  destinationAddressPrefixes?: string[];
  /**
   * @member {ApplicationSecurityGroup[]}
   * [destinationApplicationSecurityGroups] The application security group
   * specified as destination.
   */
  destinationApplicationSecurityGroups?: ApplicationSecurityGroup[];
  /**
   * @member {string[]} [sourcePortRanges] The source port ranges.
   */
  sourcePortRanges?: string[];
  /**
   * @member {string[]} [destinationPortRanges] The destination port ranges.
   */
  destinationPortRanges?: string[];
  /**
   * @member {SecurityRuleAccess} access The network traffic is allowed or
   * denied. Possible values are: 'Allow' and 'Deny'. Possible values include:
   * 'Allow', 'Deny'
   */
  access: SecurityRuleAccess;
  /**
   * @member {number} [priority] The priority of the rule. The value can be
   * between 100 and 4096. The priority number must be unique for each rule in
   * the collection. The lower the priority number, the higher the priority of
   * the rule.
   */
  priority?: number;
  /**
   * @member {SecurityRuleDirection} direction The direction of the rule. The
   * direction specifies if rule will be evaluated on incoming or outcoming
   * traffic. Possible values are: 'Inbound' and 'Outbound'. Possible values
   * include: 'Inbound', 'Outbound'
   */
  direction: SecurityRuleDirection;
  /**
   * @member {string} [provisioningState] The provisioning state of the public
   * IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * @member {string} [name] The name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing EndpointService.
 * Identifies the service being brought into the virtual network.
 *
 */
export interface EndpointService {
  /**
   * @member {string} [id] A unique identifier of the service being referenced
   * by the interface endpoint.
   */
  id?: string;
}

/**
 * @interface
 * An interface representing InterfaceEndpoint.
 * Interface endpoint resource.
 *
 * @extends Resource
 */
export interface InterfaceEndpoint extends Resource {
  /**
   * @member {string} [fqdn] A first-party service's FQDN that is mapped to the
   * private IP allocated via this interface endpoint.
   */
  fqdn?: string;
  /**
   * @member {EndpointService} [endpointService] A reference to the service
   * being brought into the virtual network.
   */
  endpointService?: EndpointService;
  /**
   * @member {Subnet} [subnet] The ID of the subnet from which the private IP
   * will be allocated.
   */
  subnet?: Subnet;
  /**
   * @member {NetworkInterface[]} [networkInterfaces] Gets an array of
   * references to the network interfaces created for this interface endpoint.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly networkInterfaces?: NetworkInterface[];
  /**
   * @member {string} [owner] A read-only property that identifies who created
   * this interface endpoint.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly owner?: string;
  /**
   * @member {string} [provisioningState] The provisioning state of the
   * interface endpoint. Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [etag] Gets a unique read-only string that changes
   * whenever the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing NetworkInterfaceDnsSettings.
 * DNS settings of a network interface.
 *
 */
export interface NetworkInterfaceDnsSettings {
  /**
   * @member {string[]} [dnsServers] List of DNS servers IP addresses. Use
   * 'AzureProvidedDNS' to switch to azure provided DNS resolution.
   * 'AzureProvidedDNS' value cannot be combined with other IPs, it must be the
   * only value in dnsServers collection.
   */
  dnsServers?: string[];
  /**
   * @member {string[]} [appliedDnsServers] If the VM that uses this NIC is
   * part of an Availability Set, then this list will have the union of all DNS
   * servers from all NICs that are part of the Availability Set. This property
   * is what is configured on each of those VMs.
   */
  appliedDnsServers?: string[];
  /**
   * @member {string} [internalDnsNameLabel] Relative DNS name for this NIC
   * used for internal communications between VMs in the same virtual network.
   */
  internalDnsNameLabel?: string;
  /**
   * @member {string} [internalFqdn] Fully qualified DNS name supporting
   * internal communications between VMs in the same virtual network.
   */
  internalFqdn?: string;
  /**
   * @member {string} [internalDomainNameSuffix] Even if internalDnsNameLabel
   * is not specified, a DNS entry is created for the primary NIC of the VM.
   * This DNS name can be constructed by concatenating the VM name with the
   * value of internalDomainNameSuffix.
   */
  internalDomainNameSuffix?: string;
}

/**
 * @interface
 * An interface representing NetworkInterface.
 * A network interface in a resource group.
 *
 * @extends Resource
 */
export interface NetworkInterface extends Resource {
  /**
   * @member {SubResource} [virtualMachine] The reference of a virtual machine.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly virtualMachine?: SubResource;
  /**
   * @member {NetworkSecurityGroup} [networkSecurityGroup] The reference of the
   * NetworkSecurityGroup resource.
   */
  networkSecurityGroup?: NetworkSecurityGroup;
  /**
   * @member {InterfaceEndpoint} [interfaceEndpoint] A reference to the
   * interface endpoint to which the network interface is linked.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly interfaceEndpoint?: InterfaceEndpoint;
  /**
   * @member {NetworkInterfaceIPConfiguration[]} [ipConfigurations] A list of
   * IPConfigurations of the network interface.
   */
  ipConfigurations?: NetworkInterfaceIPConfiguration[];
  /**
   * @member {NetworkInterfaceTapConfiguration[]} [tapConfigurations] A list of
   * TapConfigurations of the network interface.
   */
  tapConfigurations?: NetworkInterfaceTapConfiguration[];
  /**
   * @member {NetworkInterfaceDnsSettings} [dnsSettings] The DNS settings in
   * network interface.
   */
  dnsSettings?: NetworkInterfaceDnsSettings;
  /**
   * @member {string} [macAddress] The MAC address of the network interface.
   */
  macAddress?: string;
  /**
   * @member {boolean} [primary] Gets whether this is a primary network
   * interface on a virtual machine.
   */
  primary?: boolean;
  /**
   * @member {boolean} [enableAcceleratedNetworking] If the network interface
   * is accelerated networking enabled.
   */
  enableAcceleratedNetworking?: boolean;
  /**
   * @member {boolean} [enableIPForwarding] Indicates whether IP forwarding is
   * enabled on this network interface.
   */
  enableIPForwarding?: boolean;
  /**
   * @member {string[]} [hostedWorkloads] A list of references to linked
   * BareMetal resources
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly hostedWorkloads?: string[];
  /**
   * @member {string} [resourceGuid] The resource GUID property of the network
   * interface resource.
   */
  resourceGuid?: string;
  /**
   * @member {string} [provisioningState] The provisioning state of the public
   * IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing NetworkSecurityGroup.
 * NetworkSecurityGroup resource.
 *
 * @extends Resource
 */
export interface NetworkSecurityGroup extends Resource {
  /**
   * @member {SecurityRule[]} [securityRules] A collection of security rules of
   * the network security group.
   */
  securityRules?: SecurityRule[];
  /**
   * @member {SecurityRule[]} [defaultSecurityRules] The default security rules
   * of network security group.
   */
  defaultSecurityRules?: SecurityRule[];
  /**
   * @member {NetworkInterface[]} [networkInterfaces] A collection of
   * references to network interfaces.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly networkInterfaces?: NetworkInterface[];
  /**
   * @member {Subnet[]} [subnets] A collection of references to subnets.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly subnets?: Subnet[];
  /**
   * @member {string} [resourceGuid] The resource GUID property of the network
   * security group resource.
   */
  resourceGuid?: string;
  /**
   * @member {string} [provisioningState] The provisioning state of the public
   * IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing Route.
 * Route resource
 *
 * @extends SubResource
 */
export interface Route extends SubResource {
  /**
   * @member {string} [addressPrefix] The destination CIDR to which the route
   * applies.
   */
  addressPrefix?: string;
  /**
   * @member {RouteNextHopType} nextHopType The type of Azure hop the packet
   * should be sent to. Possible values are: 'VirtualNetworkGateway',
   * 'VnetLocal', 'Internet', 'VirtualAppliance', and 'None'. Possible values
   * include: 'VirtualNetworkGateway', 'VnetLocal', 'Internet',
   * 'VirtualAppliance', 'None'
   */
  nextHopType: RouteNextHopType;
  /**
   * @member {string} [nextHopIpAddress] The IP address packets should be
   * forwarded to. Next hop values are only allowed in routes where the next
   * hop type is VirtualAppliance.
   */
  nextHopIpAddress?: string;
  /**
   * @member {string} [provisioningState] The provisioning state of the
   * resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * @member {string} [name] The name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing RouteTable.
 * Route table resource.
 *
 * @extends Resource
 */
export interface RouteTable extends Resource {
  /**
   * @member {Route[]} [routes] Collection of routes contained within a route
   * table.
   */
  routes?: Route[];
  /**
   * @member {Subnet[]} [subnets] A collection of references to subnets.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly subnets?: Subnet[];
  /**
   * @member {boolean} [disableBgpRoutePropagation] Gets or sets whether to
   * disable the routes learned by BGP on that route table. True means disable.
   */
  disableBgpRoutePropagation?: boolean;
  /**
   * @member {string} [provisioningState] The provisioning state of the
   * resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * @member {string} [etag] Gets a unique read-only string that changes
   * whenever the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing ServiceEndpointPropertiesFormat.
 * The service endpoint properties.
 *
 */
export interface ServiceEndpointPropertiesFormat {
  /**
   * @member {string} [service] The type of the endpoint service.
   */
  service?: string;
  /**
   * @member {string[]} [locations] A list of locations.
   */
  locations?: string[];
  /**
   * @member {string} [provisioningState] The provisioning state of the
   * resource.
   */
  provisioningState?: string;
}

/**
 * @interface
 * An interface representing ServiceEndpointPolicyDefinition.
 * Service Endpoint policy definitions.
 *
 * @extends SubResource
 */
export interface ServiceEndpointPolicyDefinition extends SubResource {
  /**
   * @member {string} [description] A description for this rule. Restricted to
   * 140 chars.
   */
  description?: string;
  /**
   * @member {string} [service] service endpoint name.
   */
  service?: string;
  /**
   * @member {string[]} [serviceResources] A list of service resources.
   */
  serviceResources?: string[];
  /**
   * @member {string} [provisioningState] The provisioning state of the service
   * end point policy definition. Possible values are: 'Updating', 'Deleting',
   * and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [name] The name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing ServiceEndpointPolicy.
 * Service End point policy resource.
 *
 * @extends Resource
 */
export interface ServiceEndpointPolicy extends Resource {
  /**
   * @member {ServiceEndpointPolicyDefinition[]}
   * [serviceEndpointPolicyDefinitions] A collection of service endpoint policy
   * definitions of the service endpoint policy.
   */
  serviceEndpointPolicyDefinitions?: ServiceEndpointPolicyDefinition[];
  /**
   * @member {Subnet[]} [subnets] A collection of references to subnets.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly subnets?: Subnet[];
  /**
   * @member {string} [resourceGuid] The resource GUID property of the service
   * endpoint policy resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly resourceGuid?: string;
  /**
   * @member {string} [provisioningState] The provisioning state of the service
   * endpoint policy. Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing PublicIPAddressSku.
 * SKU of a public IP address
 *
 */
export interface PublicIPAddressSku {
  /**
   * @member {PublicIPAddressSkuName} [name] Name of a public IP address SKU.
   * Possible values include: 'Basic', 'Standard'
   */
  name?: PublicIPAddressSkuName;
}

/**
 * @interface
 * An interface representing PublicIPAddressDnsSettings.
 * Contains FQDN of the DNS record associated with the public IP address
 *
 */
export interface PublicIPAddressDnsSettings {
  /**
   * @member {string} [domainNameLabel] Gets or sets the Domain name label.The
   * concatenation of the domain name label and the regionalized DNS zone make
   * up the fully qualified domain name associated with the public IP address.
   * If a domain name label is specified, an A DNS record is created for the
   * public IP in the Microsoft Azure DNS system.
   */
  domainNameLabel?: string;
  /**
   * @member {string} [fqdn] Gets the FQDN, Fully qualified domain name of the
   * A DNS record associated with the public IP. This is the concatenation of
   * the domainNameLabel and the regionalized DNS zone.
   */
  fqdn?: string;
  /**
   * @member {string} [reverseFqdn] Gets or Sets the Reverse FQDN. A
   * user-visible, fully qualified domain name that resolves to this public IP
   * address. If the reverseFqdn is specified, then a PTR DNS record is created
   * pointing from the IP address in the in-addr.arpa domain to the reverse
   * FQDN.
   */
  reverseFqdn?: string;
}

/**
 * @interface
 * An interface representing IpTag.
 * Contains the IpTag associated with the object
 *
 */
export interface IpTag {
  /**
   * @member {string} [ipTagType] Gets or sets the ipTag type: Example
   * FirstPartyUsage.
   */
  ipTagType?: string;
  /**
   * @member {string} [tag] Gets or sets value of the IpTag associated with the
   * public IP. Example SQL, Storage etc
   */
  tag?: string;
}

/**
 * @interface
 * An interface representing PublicIPAddress.
 * Public IP address resource.
 *
 * @extends Resource
 */
export interface PublicIPAddress extends Resource {
  /**
   * @member {PublicIPAddressSku} [sku] The public IP address SKU.
   */
  sku?: PublicIPAddressSku;
  /**
   * @member {IPAllocationMethod} [publicIPAllocationMethod] The public IP
   * allocation method. Possible values are: 'Static' and 'Dynamic'. Possible
   * values include: 'Static', 'Dynamic'
   */
  publicIPAllocationMethod?: IPAllocationMethod;
  /**
   * @member {IPVersion} [publicIPAddressVersion] The public IP address
   * version. Possible values are: 'IPv4' and 'IPv6'. Possible values include:
   * 'IPv4', 'IPv6'
   */
  publicIPAddressVersion?: IPVersion;
  /**
   * @member {IPConfiguration} [ipConfiguration] The IP configuration
   * associated with the public IP address.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly ipConfiguration?: IPConfiguration;
  /**
   * @member {PublicIPAddressDnsSettings} [dnsSettings] The FQDN of the DNS
   * record associated with the public IP address.
   */
  dnsSettings?: PublicIPAddressDnsSettings;
  /**
   * @member {IpTag[]} [ipTags] The list of tags associated with the public IP
   * address.
   */
  ipTags?: IpTag[];
  /**
   * @member {string} [ipAddress] The IP address associated with the public IP
   * address resource.
   */
  ipAddress?: string;
  /**
   * @member {SubResource} [publicIPPrefix] The Public IP Prefix this Public IP
   * Address should be allocated from.
   */
  publicIPPrefix?: SubResource;
  /**
   * @member {number} [idleTimeoutInMinutes] The idle timeout of the public IP
   * address.
   */
  idleTimeoutInMinutes?: number;
  /**
   * @member {string} [resourceGuid] The resource GUID property of the public
   * IP resource.
   */
  resourceGuid?: string;
  /**
   * @member {string} [provisioningState] The provisioning state of the
   * PublicIP resource. Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   */
  provisioningState?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
  /**
   * @member {string[]} [zones] A list of availability zones denoting the IP
   * allocated for the resource needs to come from.
   */
  zones?: string[];
}

/**
 * @interface
 * An interface representing IPConfiguration.
 * IP configuration
 *
 * @extends SubResource
 */
export interface IPConfiguration extends SubResource {
  /**
   * @member {string} [privateIPAddress] The private IP address of the IP
   * configuration.
   */
  privateIPAddress?: string;
  /**
   * @member {IPAllocationMethod} [privateIPAllocationMethod] The private IP
   * allocation method. Possible values are 'Static' and 'Dynamic'. Possible
   * values include: 'Static', 'Dynamic'
   */
  privateIPAllocationMethod?: IPAllocationMethod;
  /**
   * @member {Subnet} [subnet] The reference of the subnet resource.
   */
  subnet?: Subnet;
  /**
   * @member {PublicIPAddress} [publicIPAddress] The reference of the public IP
   * resource.
   */
  publicIPAddress?: PublicIPAddress;
  /**
   * @member {string} [provisioningState] Gets the provisioning state of the
   * public IP resource. Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   */
  provisioningState?: string;
  /**
   * @member {string} [name] The name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing IPConfigurationProfile.
 * IP configuration profile child resource.
 *
 * @extends SubResource
 */
export interface IPConfigurationProfile extends SubResource {
  /**
   * @member {Subnet} [subnet] The reference of the subnet resource to create a
   * contatainer network interface ip configruation.
   */
  subnet?: Subnet;
  /**
   * @member {string} [provisioningState] The provisioning state of the
   * resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [name] The name of the resource. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * @member {string} [type] Sub Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing ResourceNavigationLink.
 * ResourceNavigationLink resource.
 *
 * @extends SubResource
 */
export interface ResourceNavigationLink extends SubResource {
  /**
   * @member {string} [linkedResourceType] Resource type of the linked
   * resource.
   */
  linkedResourceType?: string;
  /**
   * @member {string} [link] Link to the external resource
   */
  link?: string;
  /**
   * @member {string} [provisioningState] Provisioning state of the
   * ResourceNavigationLink resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [name] Name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
}

/**
 * @interface
 * An interface representing ServiceAssociationLink.
 * ServiceAssociationLink resource.
 *
 * @extends SubResource
 */
export interface ServiceAssociationLink extends SubResource {
  /**
   * @member {string} [linkedResourceType] Resource type of the linked
   * resource.
   */
  linkedResourceType?: string;
  /**
   * @member {string} [link] Link to the external resource.
   */
  link?: string;
  /**
   * @member {string} [provisioningState] Provisioning state of the
   * ServiceAssociationLink resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [name] Name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
}

/**
 * @interface
 * An interface representing Delegation.
 * Details the service to which the subnet is delegated.
 *
 * @extends SubResource
 */
export interface Delegation extends SubResource {
  /**
   * @member {string} [serviceName] The name of the service to whom the subnet
   * should be delegated (e.g. Microsoft.Sql/servers)
   */
  serviceName?: string;
  /**
   * @member {string[]} [actions] Describes the actions permitted to the
   * service upon delegation
   */
  actions?: string[];
  /**
   * @member {string} [provisioningState] The provisioning state of the
   * resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [name] The name of the resource that is unique within a
   * subnet. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing Subnet.
 * Subnet in a virtual network resource.
 *
 * @extends SubResource
 */
export interface Subnet extends SubResource {
  /**
   * @member {string} [addressPrefix] The address prefix for the subnet.
   */
  addressPrefix?: string;
  /**
   * @member {string[]} [addressPrefixes] List of  address prefixes for the
   * subnet.
   */
  addressPrefixes?: string[];
  /**
   * @member {NetworkSecurityGroup} [networkSecurityGroup] The reference of the
   * NetworkSecurityGroup resource.
   */
  networkSecurityGroup?: NetworkSecurityGroup;
  /**
   * @member {RouteTable} [routeTable] The reference of the RouteTable
   * resource.
   */
  routeTable?: RouteTable;
  /**
   * @member {ServiceEndpointPropertiesFormat[]} [serviceEndpoints] An array of
   * service endpoints.
   */
  serviceEndpoints?: ServiceEndpointPropertiesFormat[];
  /**
   * @member {ServiceEndpointPolicy[]} [serviceEndpointPolicies] An array of
   * service endpoint policies.
   */
  serviceEndpointPolicies?: ServiceEndpointPolicy[];
  /**
   * @member {InterfaceEndpoint[]} [interfaceEndpoints] An array of references
   * to interface endpoints
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly interfaceEndpoints?: InterfaceEndpoint[];
  /**
   * @member {IPConfiguration[]} [ipConfigurations] Gets an array of references
   * to the network interface IP configurations using subnet.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly ipConfigurations?: IPConfiguration[];
  /**
   * @member {IPConfigurationProfile[]} [ipConfigurationProfiles] Array of IP
   * configuration profiles which reference this subnet.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly ipConfigurationProfiles?: IPConfigurationProfile[];
  /**
   * @member {ResourceNavigationLink[]} [resourceNavigationLinks] Gets an array
   * of references to the external resources using subnet.
   */
  resourceNavigationLinks?: ResourceNavigationLink[];
  /**
   * @member {ServiceAssociationLink[]} [serviceAssociationLinks] Gets an array
   * of references to services injecting into this subnet.
   */
  serviceAssociationLinks?: ServiceAssociationLink[];
  /**
   * @member {Delegation[]} [delegations] Gets an array of references to the
   * delegations on the subnet.
   */
  delegations?: Delegation[];
  /**
   * @member {string} [purpose] A read-only string identifying the intention of
   * use for this subnet based on delegations and other user-defined
   * properties.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly purpose?: string;
  /**
   * @member {string} [provisioningState] The provisioning state of the
   * resource.
   */
  provisioningState?: string;
  /**
   * @member {string} [name] The name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing FrontendIPConfiguration.
 * Frontend IP address of the load balancer.
 *
 * @extends SubResource
 */
export interface FrontendIPConfiguration extends SubResource {
  /**
   * @member {SubResource[]} [inboundNatRules] Read only. Inbound rules URIs
   * that use this frontend IP.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly inboundNatRules?: SubResource[];
  /**
   * @member {SubResource[]} [inboundNatPools] Read only. Inbound pools URIs
   * that use this frontend IP.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly inboundNatPools?: SubResource[];
  /**
   * @member {SubResource[]} [outboundRules] Read only. Outbound rules URIs
   * that use this frontend IP.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly outboundRules?: SubResource[];
  /**
   * @member {SubResource[]} [loadBalancingRules] Gets load balancing rules
   * URIs that use this frontend IP.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly loadBalancingRules?: SubResource[];
  /**
   * @member {string} [privateIPAddress] The private IP address of the IP
   * configuration.
   */
  privateIPAddress?: string;
  /**
   * @member {IPAllocationMethod} [privateIPAllocationMethod] The Private IP
   * allocation method. Possible values are: 'Static' and 'Dynamic'. Possible
   * values include: 'Static', 'Dynamic'
   */
  privateIPAllocationMethod?: IPAllocationMethod;
  /**
   * @member {Subnet} [subnet] The reference of the subnet resource.
   */
  subnet?: Subnet;
  /**
   * @member {PublicIPAddress} [publicIPAddress] The reference of the Public IP
   * resource.
   */
  publicIPAddress?: PublicIPAddress;
  /**
   * @member {SubResource} [publicIPPrefix] The reference of the Public IP
   * Prefix resource.
   */
  publicIPPrefix?: SubResource;
  /**
   * @member {string} [provisioningState] Gets the provisioning state of the
   * public IP resource. Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   */
  provisioningState?: string;
  /**
   * @member {string} [name] The name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
  /**
   * @member {string[]} [zones] A list of availability zones denoting the IP
   * allocated for the resource needs to come from.
   */
  zones?: string[];
}

/**
 * @interface
 * An interface representing VirtualNetworkTap.
 * Virtual Network Tap resource
 *
 * @extends Resource
 */
export interface VirtualNetworkTap extends Resource {
  /**
   * @member {NetworkInterfaceTapConfiguration[]}
   * [networkInterfaceTapConfigurations] Specifies the list of resource IDs for
   * the network interface IP configuration that needs to be tapped.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly networkInterfaceTapConfigurations?: NetworkInterfaceTapConfiguration[];
  /**
   * @member {string} [resourceGuid] The resourceGuid property of the virtual
   * network tap.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly resourceGuid?: string;
  /**
   * @member {string} [provisioningState] The provisioning state of the virtual
   * network tap. Possible values are: 'Updating', 'Deleting', and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {NetworkInterfaceIPConfiguration}
   * [destinationNetworkInterfaceIPConfiguration] The reference to the private
   * IP Address of the collector nic that will receive the tap
   */
  destinationNetworkInterfaceIPConfiguration?: NetworkInterfaceIPConfiguration;
  /**
   * @member {FrontendIPConfiguration}
   * [destinationLoadBalancerFrontEndIPConfiguration] The reference to the
   * private IP address on the internal Load Balancer that will receive the tap
   */
  destinationLoadBalancerFrontEndIPConfiguration?: FrontendIPConfiguration;
  /**
   * @member {number} [destinationPort] The VXLAN destination port that will
   * receive the tapped traffic.
   */
  destinationPort?: number;
  /**
   * @member {string} [etag] Gets a unique read-only string that changes
   * whenever the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing BackendAddressPool.
 * Pool of backend IP addresses.
 *
 * @extends SubResource
 */
export interface BackendAddressPool extends SubResource {
  /**
   * @member {NetworkInterfaceIPConfiguration[]} [backendIPConfigurations] Gets
   * collection of references to IP addresses defined in network interfaces.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly backendIPConfigurations?: NetworkInterfaceIPConfiguration[];
  /**
   * @member {SubResource[]} [loadBalancingRules] Gets load balancing rules
   * that use this backend address pool.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly loadBalancingRules?: SubResource[];
  /**
   * @member {SubResource} [outboundRule] Gets outbound rules that use this
   * backend address pool.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly outboundRule?: SubResource;
  /**
   * @member {string} [provisioningState] Get provisioning state of the public
   * IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * @member {string} [name] Gets name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing InboundNatRule.
 * Inbound NAT rule of the load balancer.
 *
 * @extends SubResource
 */
export interface InboundNatRule extends SubResource {
  /**
   * @member {SubResource} [frontendIPConfiguration] A reference to frontend IP
   * addresses.
   */
  frontendIPConfiguration?: SubResource;
  /**
   * @member {NetworkInterfaceIPConfiguration} [backendIPConfiguration] A
   * reference to a private IP address defined on a network interface of a VM.
   * Traffic sent to the frontend port of each of the frontend IP
   * configurations is forwarded to the backend IP.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly backendIPConfiguration?: NetworkInterfaceIPConfiguration;
  /**
   * @member {TransportProtocol} [protocol] Possible values include: 'Udp',
   * 'Tcp', 'All'
   */
  protocol?: TransportProtocol;
  /**
   * @member {number} [frontendPort] The port for the external endpoint. Port
   * numbers for each rule must be unique within the Load Balancer. Acceptable
   * values range from 1 to 65534.
   */
  frontendPort?: number;
  /**
   * @member {number} [backendPort] The port used for the internal endpoint.
   * Acceptable values range from 1 to 65535.
   */
  backendPort?: number;
  /**
   * @member {number} [idleTimeoutInMinutes] The timeout for the TCP idle
   * connection. The value can be set between 4 and 30 minutes. The default
   * value is 4 minutes. This element is only used when the protocol is set to
   * TCP.
   */
  idleTimeoutInMinutes?: number;
  /**
   * @member {boolean} [enableFloatingIP] Configures a virtual machine's
   * endpoint for the floating IP capability required to configure a SQL
   * AlwaysOn Availability Group. This setting is required when using the SQL
   * AlwaysOn Availability Groups in SQL server. This setting can't be changed
   * after you create the endpoint.
   */
  enableFloatingIP?: boolean;
  /**
   * @member {boolean} [enableTcpReset] Receive bidirectional TCP Reset on TCP
   * flow idle timeout or unexpected connection termination. This element is
   * only used when the protocol is set to TCP.
   */
  enableTcpReset?: boolean;
  /**
   * @member {string} [provisioningState] Gets the provisioning state of the
   * public IP resource. Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   */
  provisioningState?: string;
  /**
   * @member {string} [name] Gets name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing NetworkInterfaceIPConfiguration.
 * IPConfiguration in a network interface.
 *
 * @extends SubResource
 */
export interface NetworkInterfaceIPConfiguration extends SubResource {
  /**
   * @member {VirtualNetworkTap[]} [virtualNetworkTaps] The reference to
   * Virtual Network Taps.
   */
  virtualNetworkTaps?: VirtualNetworkTap[];
  /**
   * @member {ApplicationGatewayBackendAddressPool[]}
   * [applicationGatewayBackendAddressPools] The reference of
   * ApplicationGatewayBackendAddressPool resource.
   */
  applicationGatewayBackendAddressPools?: ApplicationGatewayBackendAddressPool[];
  /**
   * @member {BackendAddressPool[]} [loadBalancerBackendAddressPools] The
   * reference of LoadBalancerBackendAddressPool resource.
   */
  loadBalancerBackendAddressPools?: BackendAddressPool[];
  /**
   * @member {InboundNatRule[]} [loadBalancerInboundNatRules] A list of
   * references of LoadBalancerInboundNatRules.
   */
  loadBalancerInboundNatRules?: InboundNatRule[];
  /**
   * @member {string} [privateIPAddress] Private IP address of the IP
   * configuration.
   */
  privateIPAddress?: string;
  /**
   * @member {IPAllocationMethod} [privateIPAllocationMethod] Defines how a
   * private IP address is assigned. Possible values are: 'Static' and
   * 'Dynamic'. Possible values include: 'Static', 'Dynamic'
   */
  privateIPAllocationMethod?: IPAllocationMethod;
  /**
   * @member {IPVersion} [privateIPAddressVersion] Available from Api-Version
   * 2016-03-30 onwards, it represents whether the specific ipconfiguration is
   * IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and
   * 'IPv6'. Possible values include: 'IPv4', 'IPv6'
   */
  privateIPAddressVersion?: IPVersion;
  /**
   * @member {Subnet} [subnet] Subnet bound to the IP configuration.
   */
  subnet?: Subnet;
  /**
   * @member {boolean} [primary] Gets whether this is a primary customer
   * address on the network interface.
   */
  primary?: boolean;
  /**
   * @member {PublicIPAddress} [publicIPAddress] Public IP address bound to the
   * IP configuration.
   */
  publicIPAddress?: PublicIPAddress;
  /**
   * @member {ApplicationSecurityGroup[]} [applicationSecurityGroups]
   * Application security groups in which the IP configuration is included.
   */
  applicationSecurityGroups?: ApplicationSecurityGroup[];
  /**
   * @member {string} [provisioningState] The provisioning state of the network
   * interface IP configuration. Possible values are: 'Updating', 'Deleting',
   * and 'Failed'.
   */
  provisioningState?: string;
  /**
   * @member {string} [name] The name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing ApplicationGatewayBackendAddress.
 * Backend address of an application gateway.
 *
 */
export interface ApplicationGatewayBackendAddress {
  /**
   * @member {string} [fqdn] Fully qualified domain name (FQDN).
   */
  fqdn?: string;
  /**
   * @member {string} [ipAddress] IP address
   */
  ipAddress?: string;
}

/**
 * @interface
 * An interface representing ApplicationGatewayBackendAddressPool.
 * Backend Address Pool of an application gateway.
 *
 * @extends SubResource
 */
export interface ApplicationGatewayBackendAddressPool extends SubResource {
  /**
   * @member {NetworkInterfaceIPConfiguration[]} [backendIPConfigurations]
   * Collection of references to IPs defined in network interfaces.
   */
  backendIPConfigurations?: NetworkInterfaceIPConfiguration[];
  /**
   * @member {ApplicationGatewayBackendAddress[]} [backendAddresses] Backend
   * addresses
   */
  backendAddresses?: ApplicationGatewayBackendAddress[];
  /**
   * @member {string} [provisioningState] Provisioning state of the backend
   * address pool resource. Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   */
  provisioningState?: string;
  /**
   * @member {string} [name] Name of the backend address pool that is unique
   * within an Application Gateway.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
  /**
   * @member {string} [type] Type of the resource.
   */
  type?: string;
}

/**
 * @interface
 * An interface representing ApplicationGatewayConnectionDraining.
 * Connection draining allows open connections to a backend server to be active
 * for a specified time after the backend server got removed from the
 * configuration.
 *
 */
export interface ApplicationGatewayConnectionDraining {
  /**
   * @member {boolean} enabled Whether connection draining is enabled or not.
   */
  enabled: boolean;
  /**
   * @member {number} drainTimeoutInSec The number of seconds connection
   * draining is active. Acceptable values are from 1 second to 3600 seconds.
   */
  drainTimeoutInSec: number;
}

/**
 * @interface
 * An interface representing ApplicationGatewayBackendHttpSettings.
 * Backend address pool settings of an application gateway.
 *
 * @extends SubResource
 */
export interface ApplicationGatewayBackendHttpSettings extends SubResource {
  /**
   * @member {number} [port] The destination port on the backend.
   */
  port?: number;
  /**
   * @member {ApplicationGatewayProtocol} [protocol] The protocol used to
   * communicate with the backend. Possible values are 'Http' and 'Https'.
   * Possible values include: 'Http', 'Https'
   */
  protocol?: ApplicationGatewayProtocol;
  /**
   * @member {ApplicationGatewayCookieBasedAffinity} [cookieBasedAffinity]
   * Cookie based affinity. Possible values include: 'Enabled', 'Disabled'
   */
  cookieBasedAffinity?: ApplicationGatewayCookieBasedAffinity;
  /**
   * @member {number} [requestTimeout] Request timeout in seconds. Application
   * Gateway will fail the request if response is not received within
   * RequestTimeout. Acceptable values are from 1 second to 86400 seconds.
   */
  requestTimeout?: number;
  /**
   * @member {SubResource} [probe] Probe resource of an application gateway.
   */
  probe?: SubResource;
  /**
   * @member {SubResource[]} [authenticationCertificates] Array of references
   * to application gateway authentication certificates.
   */
  authenticationCertificates?: SubResource[];
  /**
   * @member {SubResource[]} [trustedRootCertificates] Array of references to
   * application gateway trusted root certificates.
   */
  trustedRootCertificates?: SubResource[];
  /**
   * @member {ApplicationGatewayConnectionDraining} [connectionDraining]
   * Connection draining of the backend http settings resource.
   */
  connectionDraining?: ApplicationGatewayConnectionDraining;
  /**
   * @member {string} [hostName] Host header to be sent to the backend servers.
   */
  hostName?: string;
  /**
   * @member {boolean} [pickHostNameFromBackendAddress] Whether to pick host
   * header should be picked from the host name of the backend server. Default
   * value is false.
   */
  pickHostNameFromBackendAddress?: boolean;
  /**
   * @member {string} [affinityCookieName] Cookie name to use for the affinity
   * cookie.
   */
  affinityCookieName?: string;
  /**
   * @member {boolean} [probeEnabled] Whether the probe is enabled. Default
   * value is false.
   */
  probeEnabled?: boolean;
  /**
   * @member {string} [path] Path which should be used as a prefix for all HTTP
   * requests. Null means no path will be prefixed. Default value is null.
   */
  path?: string;
  /**
   * @member {string} [provisioningState] Provisioning state of the backend
   * http settings resource. Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   */
  provisioningState?: string;
  /**
   * @member {string} [name] Name of the backend http settings that is unique
   * within an Application Gateway.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
  /**
   * @member {string} [type] Type of the resource.
   */
  type?: string;
}

/**
 * @interface
 * An interface representing ApplicationGatewayBackendHealthServer.
 * Application gateway backendhealth http settings.
 *
 */
export interface ApplicationGatewayBackendHealthServer {
  /**
   * @member {string} [address] IP address or FQDN of backend server.
   */
  address?: string;
  /**
   * @member {NetworkInterfaceIPConfiguration} [ipConfiguration] Reference of
   * IP configuration of backend server.
   */
  ipConfiguration?: NetworkInterfaceIPConfiguration;
  /**
   * @member {ApplicationGatewayBackendHealthServerHealth} [health] Health of
   * backend server. Possible values include: 'Unknown', 'Up', 'Down',
   * 'Partial', 'Draining'
   */
  health?: ApplicationGatewayBackendHealthServerHealth;
}

/**
 * @interface
 * An interface representing ApplicationGatewayBackendHealthHttpSettings.
 * Application gateway BackendHealthHttp settings.
 *
 */
export interface ApplicationGatewayBackendHealthHttpSettings {
  /**
   * @member {ApplicationGatewayBackendHttpSettings} [backendHttpSettings]
   * Reference of an ApplicationGatewayBackendHttpSettings resource.
   */
  backendHttpSettings?: ApplicationGatewayBackendHttpSettings;
  /**
   * @member {ApplicationGatewayBackendHealthServer[]} [servers] List of
   * ApplicationGatewayBackendHealthServer resources.
   */
  servers?: ApplicationGatewayBackendHealthServer[];
}

/**
 * @interface
 * An interface representing ApplicationGatewayBackendHealthPool.
 * Application gateway BackendHealth pool.
 *
 */
export interface ApplicationGatewayBackendHealthPool {
  /**
   * @member {ApplicationGatewayBackendAddressPool} [backendAddressPool]
   * Reference of an ApplicationGatewayBackendAddressPool resource.
   */
  backendAddressPool?: ApplicationGatewayBackendAddressPool;
  /**
   * @member {ApplicationGatewayBackendHealthHttpSettings[]}
   * [backendHttpSettingsCollection] List of
   * ApplicationGatewayBackendHealthHttpSettings resources.
   */
  backendHttpSettingsCollection?: ApplicationGatewayBackendHealthHttpSettings[];
}

/**
 * @interface
 * An interface representing ApplicationGatewayBackendHealth.
 * List of ApplicationGatewayBackendHealthPool resources.
 *
 */
export interface ApplicationGatewayBackendHealth {
  /**
   * @member {ApplicationGatewayBackendHealthPool[]} [backendAddressPools]
   */
  backendAddressPools?: ApplicationGatewayBackendHealthPool[];
}

/**
 * @interface
 * An interface representing ApplicationGatewaySku.
 * SKU of an application gateway
 *
 */
export interface ApplicationGatewaySku {
  /**
   * @member {ApplicationGatewaySkuName} [name] Name of an application gateway
   * SKU. Possible values include: 'Standard_Small', 'Standard_Medium',
   * 'Standard_Large', 'WAF_Medium', 'WAF_Large', 'Standard_v2', 'WAF_v2'
   */
  name?: ApplicationGatewaySkuName;
  /**
   * @member {ApplicationGatewayTier} [tier] Tier of an application gateway.
   * Possible values include: 'Standard', 'WAF', 'Standard_v2', 'WAF_v2'
   */
  tier?: ApplicationGatewayTier;
  /**
   * @member {number} [capacity] Capacity (instance count) of an application
   * gateway.
   */
  capacity?: number;
}

/**
 * @interface
 * An interface representing ApplicationGatewaySslPolicy.
 * Application Gateway Ssl policy.
 *
 */
export interface ApplicationGatewaySslPolicy {
  /**
   * @member {ApplicationGatewaySslProtocol[]} [disabledSslProtocols] Ssl
   * protocols to be disabled on application gateway.
   */
  disabledSslProtocols?: ApplicationGatewaySslProtocol[];
  /**
   * @member {ApplicationGatewaySslPolicyType} [policyType] Type of Ssl Policy.
   * Possible values include: 'Predefined', 'Custom'
   */
  policyType?: ApplicationGatewaySslPolicyType;
  /**
   * @member {ApplicationGatewaySslPolicyName} [policyName] Name of Ssl
   * predefined policy. Possible values include: 'AppGwSslPolicy20150501',
   * 'AppGwSslPolicy20170401', 'AppGwSslPolicy20170401S'
   */
  policyName?: ApplicationGatewaySslPolicyName;
  /**
   * @member {ApplicationGatewaySslCipherSuite[]} [cipherSuites] Ssl cipher
   * suites to be enabled in the specified order to application gateway.
   */
  cipherSuites?: ApplicationGatewaySslCipherSuite[];
  /**
   * @member {ApplicationGatewaySslProtocol} [minProtocolVersion] Minimum
   * version of Ssl protocol to be supported on application gateway. Possible
   * values include: 'TLSv1_0', 'TLSv1_1', 'TLSv1_2'
   */
  minProtocolVersion?: ApplicationGatewaySslProtocol;
}

/**
 * @interface
 * An interface representing ApplicationGatewayIPConfiguration.
 * IP configuration of an application gateway. Currently 1 public and 1 private
 * IP configuration is allowed.
 *
 * @extends SubResource
 */
export interface ApplicationGatewayIPConfiguration extends SubResource {
  /**
   * @member {SubResource} [subnet] Reference of the subnet resource. A subnet
   * from where application gateway gets its private address.
   */
  subnet?: SubResource;
  /**
   * @member {string} [provisioningState] Provisioning state of the application
   * gateway subnet resource. Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   */
  provisioningState?: string;
  /**
   * @member {string} [name] Name of the IP configuration that is unique within
   * an Application Gateway.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
  /**
   * @member {string} [type] Type of the resource.
   */
  type?: string;
}

/**
 * @interface
 * An interface representing ApplicationGatewayAuthenticationCertificate.
 * Authentication certificates of an application gateway.
 *
 * @extends SubResource
 */
export interface ApplicationGatewayAuthenticationCertificate extends SubResource {
  /**
   * @member {string} [data] Certificate public data.
   */
  data?: string;
  /**
   * @member {string} [provisioningState] Provisioning state of the
   * authentication certificate resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * @member {string} [name] Name of the authentication certificate that is
   * unique within an Application Gateway.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
  /**
   * @member {string} [type] Type of the resource.
   */
  type?: string;
}

/**
 * @interface
 * An interface representing ApplicationGatewayTrustedRootCertificate.
 * Trusted Root certificates of an application gateway.
 *
 * @extends SubResource
 */
export interface ApplicationGatewayTrustedRootCertificate extends SubResource {
  /**
   * @member {string} [data] Certificate public data.
   */
  data?: string;
  /**
   * @member {string} [keyvaultSecretId] KeyVault Secret Id for certificate.
   */
  keyvaultSecretId?: string;
  /**
   * @member {string} [provisioningState] Provisioning state of the trusted
   * root certificate resource. Possible values are: 'Updating', 'Deleting',
   * and 'Failed'.
   */
  provisioningState?: string;
  /**
   * @member {string} [name] Name of the trusted root certificate that is
   * unique within an Application Gateway.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
  /**
   * @member {string} [type] Type of the resource.
   */
  type?: string;
}

/**
 * @interface
 * An interface representing ApplicationGatewaySslCertificate.
 * SSL certificates of an application gateway.
 *
 * @extends SubResource
 */
export interface ApplicationGatewaySslCertificate extends SubResource {
  /**
   * @member {string} [data] Base-64 encoded pfx certificate. Only applicable
   * in PUT Request.
   */
  data?: string;
  /**
   * @member {string} [password] Password for the pfx file specified in data.
   * Only applicable in PUT request.
   */
  password?: string;
  /**
   * @member {string} [publicCertData] Base-64 encoded Public cert data
   * corresponding to pfx specified in data. Only applicable in GET request.
   */
  publicCertData?: string;
  /**
   * @member {string} [provisioningState] Provisioning state of the SSL
   * certificate resource Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   */
  provisioningState?: string;
  /**
   * @member {string} [name] Name of the SSL certificate that is unique within
   * an Application Gateway.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
  /**
   * @member {string} [type] Type of the resource.
   */
  type?: string;
}

/**
 * @interface
 * An interface representing ApplicationGatewayFrontendIPConfiguration.
 * Frontend IP configuration of an application gateway.
 *
 * @extends SubResource
 */
export interface ApplicationGatewayFrontendIPConfiguration extends SubResource {
  /**
   * @member {string} [privateIPAddress] PrivateIPAddress of the network
   * interface IP Configuration.
   */
  privateIPAddress?: string;
  /**
   * @member {IPAllocationMethod} [privateIPAllocationMethod] PrivateIP
   * allocation method. Possible values include: 'Static', 'Dynamic'
   */
  privateIPAllocationMethod?: IPAllocationMethod;
  /**
   * @member {SubResource} [subnet] Reference of the subnet resource.
   */
  subnet?: SubResource;
  /**
   * @member {SubResource} [publicIPAddress] Reference of the PublicIP
   * resource.
   */
  publicIPAddress?: SubResource;
  /**
   * @member {string} [provisioningState] Provisioning state of the public IP
   * resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * @member {string} [name] Name of the frontend IP configuration that is
   * unique within an Application Gateway.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
  /**
   * @member {string} [type] Type of the resource.
   */
  type?: string;
}

/**
 * @interface
 * An interface representing ApplicationGatewayFrontendPort.
 * Frontend port of an application gateway.
 *
 * @extends SubResource
 */
export interface ApplicationGatewayFrontendPort extends SubResource {
  /**
   * @member {number} [port] Frontend port
   */
  port?: number;
  /**
   * @member {string} [provisioningState] Provisioning state of the frontend
   * port resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * @member {string} [name] Name of the frontend port that is unique within an
   * Application Gateway
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
  /**
   * @member {string} [type] Type of the resource.
   */
  type?: string;
}

/**
 * @interface
 * An interface representing ApplicationGatewayCustomError.
 * Customer error of an application gateway.
 *
 */
export interface ApplicationGatewayCustomError {
  /**
   * @member {ApplicationGatewayCustomErrorStatusCode} [statusCode] Status code
   * of the application gateway customer error. Possible values include:
   * 'HttpStatus403', 'HttpStatus502'
   */
  statusCode?: ApplicationGatewayCustomErrorStatusCode;
  /**
   * @member {string} [customErrorPageUrl] Error page URL of the application
   * gateway customer error.
   */
  customErrorPageUrl?: string;
}

/**
 * @interface
 * An interface representing ApplicationGatewayHttpListener.
 * Http listener of an application gateway.
 *
 * @extends SubResource
 */
export interface ApplicationGatewayHttpListener extends SubResource {
  /**
   * @member {SubResource} [frontendIPConfiguration] Frontend IP configuration
   * resource of an application gateway.
   */
  frontendIPConfiguration?: SubResource;
  /**
   * @member {SubResource} [frontendPort] Frontend port resource of an
   * application gateway.
   */
  frontendPort?: SubResource;
  /**
   * @member {ApplicationGatewayProtocol} [protocol] Protocol of the HTTP
   * listener. Possible values are 'Http' and 'Https'. Possible values include:
   * 'Http', 'Https'
   */
  protocol?: ApplicationGatewayProtocol;
  /**
   * @member {string} [hostName] Host name of HTTP listener.
   */
  hostName?: string;
  /**
   * @member {SubResource} [sslCertificate] SSL certificate resource of an
   * application gateway.
   */
  sslCertificate?: SubResource;
  /**
   * @member {boolean} [requireServerNameIndication] Applicable only if
   * protocol is https. Enables SNI for multi-hosting.
   */
  requireServerNameIndication?: boolean;
  /**
   * @member {string} [provisioningState] Provisioning state of the HTTP
   * listener resource. Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   */
  provisioningState?: string;
  /**
   * @member {ApplicationGatewayCustomError[]} [customErrorConfigurations]
   * Custom error configurations of the HTTP listener.
   */
  customErrorConfigurations?: ApplicationGatewayCustomError[];
  /**
   * @member {string} [name] Name of the HTTP listener that is unique within an
   * Application Gateway.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
  /**
   * @member {string} [type] Type of the resource.
   */
  type?: string;
}

/**
 * @interface
 * An interface representing ApplicationGatewayPathRule.
 * Path rule of URL path map of an application gateway.
 *
 * @extends SubResource
 */
export interface ApplicationGatewayPathRule extends SubResource {
  /**
   * @member {string[]} [paths] Path rules of URL path map.
   */
  paths?: string[];
  /**
   * @member {SubResource} [backendAddressPool] Backend address pool resource
   * of URL path map path rule.
   */
  backendAddressPool?: SubResource;
  /**
   * @member {SubResource} [backendHttpSettings] Backend http settings resource
   * of URL path map path rule.
   */
  backendHttpSettings?: SubResource;
  /**
   * @member {SubResource} [redirectConfiguration] Redirect configuration
   * resource of URL path map path rule.
   */
  redirectConfiguration?: SubResource;
  /**
   * @member {string} [provisioningState] Path rule of URL path map resource.
   * Possible values are: 'Updating', 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * @member {string} [name] Name of the path rule that is unique within an
   * Application Gateway.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
  /**
   * @member {string} [type] Type of the resource.
   */
  type?: string;
}

/**
 * @interface
 * An interface representing ApplicationGatewayProbeHealthResponseMatch.
 * Application gateway probe health response match
 *
 */
export interface ApplicationGatewayProbeHealthResponseMatch {
  /**
   * @member {string} [body] Body that must be contained in the health
   * response. Default value is empty.
   */
  body?: string;
  /**
   * @member {string[]} [statusCodes] Allowed ranges of healthy status codes.
   * Default range of healthy status codes is 200-399.
   */
  statusCodes?: string[];
}

/**
 * @interface
 * An interface representing ApplicationGatewayProbe.
 * Probe of the application gateway.
 *
 * @extends SubResource
 */
export interface ApplicationGatewayProbe extends SubResource {
  /**
   * @member {ApplicationGatewayProtocol} [protocol] The protocol used for the
   * probe. Possible values are 'Http' and 'Https'. Possible values include:
   * 'Http', 'Https'
   */
  protocol?: ApplicationGatewayProtocol;
  /**
   * @member {string} [host] Host name to send the probe to.
   */
  host?: string;
  /**
   * @member {string} [path] Relative path of probe. Valid path starts from
   * '/'. Probe is sent to <Protocol>://<host>:<port><path>
   */
  path?: string;
  /**
   * @member {number} [interval] The probing interval in seconds. This is the
   * time interval between two consecutive probes. Acceptable values are from 1
   * second to 86400 seconds.
   */
  interval?: number;
  /**
   * @member {number} [timeout] the probe timeout in seconds. Probe marked as
   * failed if valid response is not received with this timeout period.
   * Acceptable values are from 1 second to 86400 seconds.
   */
  timeout?: number;
  /**
   * @member {number} [unhealthyThreshold] The probe retry count. Backend
   * server is marked down after consecutive probe failure count reaches
   * UnhealthyThreshold. Acceptable values are from 1 second to 20.
   */
  unhealthyThreshold?: number;
  /**
   * @member {boolean} [pickHostNameFromBackendHttpSettings] Whether the host
   * header should be picked from the backend http settings. Default value is
   * false.
   */
  pickHostNameFromBackendHttpSettings?: boolean;
  /**
   * @member {number} [minServers] Minimum number of servers that are always
   * marked healthy. Default value is 0.
   */
  minServers?: number;
  /**
   * @member {ApplicationGatewayProbeHealthResponseMatch} [match] Criterion for
   * classifying a healthy probe response.
   */
  match?: ApplicationGatewayProbeHealthResponseMatch;
  /**
   * @member {string} [provisioningState] Provisioning state of the backend
   * http settings resource. Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   */
  provisioningState?: string;
  /**
   * @member {string} [name] Name of the probe that is unique within an
   * Application Gateway.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
  /**
   * @member {string} [type] Type of the resource.
   */
  type?: string;
}

/**
 * @interface
 * An interface representing ApplicationGatewayRequestRoutingRule.
 * Request routing rule of an application gateway.
 *
 * @extends SubResource
 */
export interface ApplicationGatewayRequestRoutingRule extends SubResource {
  /**
   * @member {ApplicationGatewayRequestRoutingRuleType} [ruleType] Rule type.
   * Possible values include: 'Basic', 'PathBasedRouting'
   */
  ruleType?: ApplicationGatewayRequestRoutingRuleType;
  /**
   * @member {SubResource} [backendAddressPool] Backend address pool resource
   * of the application gateway.
   */
  backendAddressPool?: SubResource;
  /**
   * @member {SubResource} [backendHttpSettings] Backend http settings resource
   * of the application gateway.
   */
  backendHttpSettings?: SubResource;
  /**
   * @member {SubResource} [httpListener] Http listener resource of the
   * application gateway.
   */
  httpListener?: SubResource;
  /**
   * @member {SubResource} [urlPathMap] URL path map resource of the
   * application gateway.
   */
  urlPathMap?: SubResource;
  /**
   * @member {SubResource} [redirectConfiguration] Redirect configuration
   * resource of the application gateway.
   */
  redirectConfiguration?: SubResource;
  /**
   * @member {string} [provisioningState] Provisioning state of the request
   * routing rule resource. Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   */
  provisioningState?: string;
  /**
   * @member {string} [name] Name of the request routing rule that is unique
   * within an Application Gateway.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
  /**
   * @member {string} [type] Type of the resource.
   */
  type?: string;
}

/**
 * @interface
 * An interface representing ApplicationGatewayRedirectConfiguration.
 * Redirect configuration of an application gateway.
 *
 * @extends SubResource
 */
export interface ApplicationGatewayRedirectConfiguration extends SubResource {
  /**
   * @member {ApplicationGatewayRedirectType} [redirectType] Supported http
   * redirection types - Permanent, Temporary, Found, SeeOther. Possible values
   * include: 'Permanent', 'Found', 'SeeOther', 'Temporary'
   */
  redirectType?: ApplicationGatewayRedirectType;
  /**
   * @member {SubResource} [targetListener] Reference to a listener to redirect
   * the request to.
   */
  targetListener?: SubResource;
  /**
   * @member {string} [targetUrl] Url to redirect the request to.
   */
  targetUrl?: string;
  /**
   * @member {boolean} [includePath] Include path in the redirected url.
   */
  includePath?: boolean;
  /**
   * @member {boolean} [includeQueryString] Include query string in the
   * redirected url.
   */
  includeQueryString?: boolean;
  /**
   * @member {SubResource[]} [requestRoutingRules] Request routing specifying
   * redirect configuration.
   */
  requestRoutingRules?: SubResource[];
  /**
   * @member {SubResource[]} [urlPathMaps] Url path maps specifying default
   * redirect configuration.
   */
  urlPathMaps?: SubResource[];
  /**
   * @member {SubResource[]} [pathRules] Path rules specifying redirect
   * configuration.
   */
  pathRules?: SubResource[];
  /**
   * @member {string} [name] Name of the redirect configuration that is unique
   * within an Application Gateway.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
  /**
   * @member {string} [type] Type of the resource.
   */
  type?: string;
}

/**
 * @interface
 * An interface representing ApplicationGatewayUrlPathMap.
 * UrlPathMaps give a url path to the backend mapping information for
 * PathBasedRouting.
 *
 * @extends SubResource
 */
export interface ApplicationGatewayUrlPathMap extends SubResource {
  /**
   * @member {SubResource} [defaultBackendAddressPool] Default backend address
   * pool resource of URL path map.
   */
  defaultBackendAddressPool?: SubResource;
  /**
   * @member {SubResource} [defaultBackendHttpSettings] Default backend http
   * settings resource of URL path map.
   */
  defaultBackendHttpSettings?: SubResource;
  /**
   * @member {SubResource} [defaultRedirectConfiguration] Default redirect
   * configuration resource of URL path map.
   */
  defaultRedirectConfiguration?: SubResource;
  /**
   * @member {ApplicationGatewayPathRule[]} [pathRules] Path rule of URL path
   * map resource.
   */
  pathRules?: ApplicationGatewayPathRule[];
  /**
   * @member {string} [provisioningState] Provisioning state of the backend
   * http settings resource. Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   */
  provisioningState?: string;
  /**
   * @member {string} [name] Name of the URL path map that is unique within an
   * Application Gateway.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
  /**
   * @member {string} [type] Type of the resource.
   */
  type?: string;
}

/**
 * @interface
 * An interface representing ApplicationGatewayFirewallDisabledRuleGroup.
 * Allows to disable rules within a rule group or an entire rule group.
 *
 */
export interface ApplicationGatewayFirewallDisabledRuleGroup {
  /**
   * @member {string} ruleGroupName The name of the rule group that will be
   * disabled.
   */
  ruleGroupName: string;
  /**
   * @member {number[]} [rules] The list of rules that will be disabled. If
   * null, all rules of the rule group will be disabled.
   */
  rules?: number[];
}

/**
 * @interface
 * An interface representing ApplicationGatewayFirewallExclusion.
 * Allow to exclude some variable satisfy the condition for the WAF check
 *
 */
export interface ApplicationGatewayFirewallExclusion {
  /**
   * @member {string} matchVariable The variable to be excluded.
   */
  matchVariable: string;
  /**
   * @member {string} selectorMatchOperator When matchVariable is a collection,
   * operate on the selector to specify which elements in the collection this
   * exclusion applies to.
   */
  selectorMatchOperator: string;
  /**
   * @member {string} selector When matchVariable is a collection, operator
   * used to specify which elements in the collection this exclusion applies
   * to.
   */
  selector: string;
}

/**
 * @interface
 * An interface representing ApplicationGatewayWebApplicationFirewallConfiguration.
 * Application gateway web application firewall configuration.
 *
 */
export interface ApplicationGatewayWebApplicationFirewallConfiguration {
  /**
   * @member {boolean} enabled Whether the web application firewall is enabled
   * or not.
   */
  enabled: boolean;
  /**
   * @member {ApplicationGatewayFirewallMode} firewallMode Web application
   * firewall mode. Possible values include: 'Detection', 'Prevention'
   */
  firewallMode: ApplicationGatewayFirewallMode;
  /**
   * @member {string} ruleSetType The type of the web application firewall rule
   * set. Possible values are: 'OWASP'.
   */
  ruleSetType: string;
  /**
   * @member {string} ruleSetVersion The version of the rule set type.
   */
  ruleSetVersion: string;
  /**
   * @member {ApplicationGatewayFirewallDisabledRuleGroup[]}
   * [disabledRuleGroups] The disabled rule groups.
   */
  disabledRuleGroups?: ApplicationGatewayFirewallDisabledRuleGroup[];
  /**
   * @member {boolean} [requestBodyCheck] Whether allow WAF to check request
   * Body.
   */
  requestBodyCheck?: boolean;
  /**
   * @member {number} [maxRequestBodySize] Maxium request body size for WAF.
   */
  maxRequestBodySize?: number;
  /**
   * @member {number} [maxRequestBodySizeInKb] Maxium request body size in Kb
   * for WAF.
   */
  maxRequestBodySizeInKb?: number;
  /**
   * @member {number} [fileUploadLimitInMb] Maxium file upload size in Mb for
   * WAF.
   */
  fileUploadLimitInMb?: number;
  /**
   * @member {ApplicationGatewayFirewallExclusion[]} [exclusions] The exclusion
   * list.
   */
  exclusions?: ApplicationGatewayFirewallExclusion[];
}

/**
 * @interface
 * An interface representing ApplicationGatewayAutoscaleConfiguration.
 * Application Gateway autoscale configuration.
 *
 */
export interface ApplicationGatewayAutoscaleConfiguration {
  /**
   * @member {number} minCapacity Lower bound on number of Application Gateway
   * instances
   */
  minCapacity: number;
}

/**
 * @interface
 * An interface representing ApplicationGateway.
 * Application gateway resource
 *
 * @extends Resource
 */
export interface ApplicationGateway extends Resource {
  /**
   * @member {ApplicationGatewaySku} [sku] SKU of the application gateway
   * resource.
   */
  sku?: ApplicationGatewaySku;
  /**
   * @member {ApplicationGatewaySslPolicy} [sslPolicy] SSL policy of the
   * application gateway resource.
   */
  sslPolicy?: ApplicationGatewaySslPolicy;
  /**
   * @member {ApplicationGatewayOperationalState} [operationalState]
   * Operational state of the application gateway resource. Possible values
   * include: 'Stopped', 'Starting', 'Running', 'Stopping'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly operationalState?: ApplicationGatewayOperationalState;
  /**
   * @member {ApplicationGatewayIPConfiguration[]} [gatewayIPConfigurations]
   * Subnets of application the gateway resource.
   */
  gatewayIPConfigurations?: ApplicationGatewayIPConfiguration[];
  /**
   * @member {ApplicationGatewayAuthenticationCertificate[]}
   * [authenticationCertificates] Authentication certificates of the
   * application gateway resource.
   */
  authenticationCertificates?: ApplicationGatewayAuthenticationCertificate[];
  /**
   * @member {ApplicationGatewayTrustedRootCertificate[]}
   * [trustedRootCertificates] Trusted Root certificates of the application
   * gateway resource.
   */
  trustedRootCertificates?: ApplicationGatewayTrustedRootCertificate[];
  /**
   * @member {ApplicationGatewaySslCertificate[]} [sslCertificates] SSL
   * certificates of the application gateway resource.
   */
  sslCertificates?: ApplicationGatewaySslCertificate[];
  /**
   * @member {ApplicationGatewayFrontendIPConfiguration[]}
   * [frontendIPConfigurations] Frontend IP addresses of the application
   * gateway resource.
   */
  frontendIPConfigurations?: ApplicationGatewayFrontendIPConfiguration[];
  /**
   * @member {ApplicationGatewayFrontendPort[]} [frontendPorts] Frontend ports
   * of the application gateway resource.
   */
  frontendPorts?: ApplicationGatewayFrontendPort[];
  /**
   * @member {ApplicationGatewayProbe[]} [probes] Probes of the application
   * gateway resource.
   */
  probes?: ApplicationGatewayProbe[];
  /**
   * @member {ApplicationGatewayBackendAddressPool[]} [backendAddressPools]
   * Backend address pool of the application gateway resource.
   */
  backendAddressPools?: ApplicationGatewayBackendAddressPool[];
  /**
   * @member {ApplicationGatewayBackendHttpSettings[]}
   * [backendHttpSettingsCollection] Backend http settings of the application
   * gateway resource.
   */
  backendHttpSettingsCollection?: ApplicationGatewayBackendHttpSettings[];
  /**
   * @member {ApplicationGatewayHttpListener[]} [httpListeners] Http listeners
   * of the application gateway resource.
   */
  httpListeners?: ApplicationGatewayHttpListener[];
  /**
   * @member {ApplicationGatewayUrlPathMap[]} [urlPathMaps] URL path map of the
   * application gateway resource.
   */
  urlPathMaps?: ApplicationGatewayUrlPathMap[];
  /**
   * @member {ApplicationGatewayRequestRoutingRule[]} [requestRoutingRules]
   * Request routing rules of the application gateway resource.
   */
  requestRoutingRules?: ApplicationGatewayRequestRoutingRule[];
  /**
   * @member {ApplicationGatewayRedirectConfiguration[]}
   * [redirectConfigurations] Redirect configurations of the application
   * gateway resource.
   */
  redirectConfigurations?: ApplicationGatewayRedirectConfiguration[];
  /**
   * @member {ApplicationGatewayWebApplicationFirewallConfiguration}
   * [webApplicationFirewallConfiguration] Web application firewall
   * configuration.
   */
  webApplicationFirewallConfiguration?: ApplicationGatewayWebApplicationFirewallConfiguration;
  /**
   * @member {boolean} [enableHttp2] Whether HTTP2 is enabled on the
   * application gateway resource.
   */
  enableHttp2?: boolean;
  /**
   * @member {boolean} [enableFips] Whether FIPS is enabled on the application
   * gateway resource.
   */
  enableFips?: boolean;
  /**
   * @member {ApplicationGatewayAutoscaleConfiguration}
   * [autoscaleConfiguration] Autoscale Configuration.
   */
  autoscaleConfiguration?: ApplicationGatewayAutoscaleConfiguration;
  /**
   * @member {string} [resourceGuid] Resource GUID property of the application
   * gateway resource.
   */
  resourceGuid?: string;
  /**
   * @member {string} [provisioningState] Provisioning state of the application
   * gateway resource. Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   */
  provisioningState?: string;
  /**
   * @member {ApplicationGatewayCustomError[]} [customErrorConfigurations]
   * Custom error configurations of the application gateway resource.
   */
  customErrorConfigurations?: ApplicationGatewayCustomError[];
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
  /**
   * @member {string[]} [zones] A list of availability zones denoting where the
   * resource needs to come from.
   */
  zones?: string[];
}

/**
 * @interface
 * An interface representing ApplicationGatewayFirewallRule.
 * A web application firewall rule.
 *
 */
export interface ApplicationGatewayFirewallRule {
  /**
   * @member {number} ruleId The identifier of the web application firewall
   * rule.
   */
  ruleId: number;
  /**
   * @member {string} [description] The description of the web application
   * firewall rule.
   */
  description?: string;
}

/**
 * @interface
 * An interface representing ApplicationGatewayFirewallRuleGroup.
 * A web application firewall rule group.
 *
 */
export interface ApplicationGatewayFirewallRuleGroup {
  /**
   * @member {string} ruleGroupName The name of the web application firewall
   * rule group.
   */
  ruleGroupName: string;
  /**
   * @member {string} [description] The description of the web application
   * firewall rule group.
   */
  description?: string;
  /**
   * @member {ApplicationGatewayFirewallRule[]} rules The rules of the web
   * application firewall rule group.
   */
  rules: ApplicationGatewayFirewallRule[];
}

/**
 * @interface
 * An interface representing ApplicationGatewayFirewallRuleSet.
 * A web application firewall rule set.
 *
 * @extends Resource
 */
export interface ApplicationGatewayFirewallRuleSet extends Resource {
  /**
   * @member {string} [provisioningState] The provisioning state of the web
   * application firewall rule set.
   */
  provisioningState?: string;
  /**
   * @member {string} ruleSetType The type of the web application firewall rule
   * set.
   */
  ruleSetType: string;
  /**
   * @member {string} ruleSetVersion The version of the web application
   * firewall rule set type.
   */
  ruleSetVersion: string;
  /**
   * @member {ApplicationGatewayFirewallRuleGroup[]} ruleGroups The rule groups
   * of the web application firewall rule set.
   */
  ruleGroups: ApplicationGatewayFirewallRuleGroup[];
}

/**
 * @interface
 * An interface representing ApplicationGatewayAvailableWafRuleSetsResult.
 * Response for ApplicationGatewayAvailableWafRuleSets API service call.
 *
 */
export interface ApplicationGatewayAvailableWafRuleSetsResult {
  /**
   * @member {ApplicationGatewayFirewallRuleSet[]} [value] The list of
   * application gateway rule sets.
   */
  value?: ApplicationGatewayFirewallRuleSet[];
}

/**
 * @interface
 * An interface representing ApplicationGatewayAvailableSslOptions.
 * Response for ApplicationGatewayAvailableSslOptions API service call.
 *
 * @extends Resource
 */
export interface ApplicationGatewayAvailableSslOptions extends Resource {
  /**
   * @member {SubResource[]} [predefinedPolicies] List of available Ssl
   * predefined policy.
   */
  predefinedPolicies?: SubResource[];
  /**
   * @member {ApplicationGatewaySslPolicyName} [defaultPolicy] Name of the Ssl
   * predefined policy applied by default to application gateway. Possible
   * values include: 'AppGwSslPolicy20150501', 'AppGwSslPolicy20170401',
   * 'AppGwSslPolicy20170401S'
   */
  defaultPolicy?: ApplicationGatewaySslPolicyName;
  /**
   * @member {ApplicationGatewaySslCipherSuite[]} [availableCipherSuites] List
   * of available Ssl cipher suites.
   */
  availableCipherSuites?: ApplicationGatewaySslCipherSuite[];
  /**
   * @member {ApplicationGatewaySslProtocol[]} [availableProtocols] List of
   * available Ssl protocols.
   */
  availableProtocols?: ApplicationGatewaySslProtocol[];
}

/**
 * @interface
 * An interface representing ApplicationGatewaySslPredefinedPolicy.
 * An Ssl predefined policy
 *
 * @extends SubResource
 */
export interface ApplicationGatewaySslPredefinedPolicy extends SubResource {
  /**
   * @member {string} [name] Name of the Ssl predefined policy.
   */
  name?: string;
  /**
   * @member {ApplicationGatewaySslCipherSuite[]} [cipherSuites] Ssl cipher
   * suites to be enabled in the specified order for application gateway.
   */
  cipherSuites?: ApplicationGatewaySslCipherSuite[];
  /**
   * @member {ApplicationGatewaySslProtocol} [minProtocolVersion] Minimum
   * version of Ssl protocol to be supported on application gateway. Possible
   * values include: 'TLSv1_0', 'TLSv1_1', 'TLSv1_2'
   */
  minProtocolVersion?: ApplicationGatewaySslProtocol;
}

/**
 * @interface
 * An interface representing TagsObject.
 * Tags object for patch operations.
 *
 */
export interface TagsObject {
  /**
   * @member {{ [propertyName: string]: string }} [tags] Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing AvailableDelegation.
 * The serviceName of an AvailableDelegation indicates a possible delegation
 * for a subnet.
 *
 */
export interface AvailableDelegation {
  /**
   * @member {string} [name] The name of the AvailableDelegation resource.
   */
  name?: string;
  /**
   * @member {string} [id] A unique identifier of the AvailableDelegation
   * resource.
   */
  id?: string;
  /**
   * @member {string} [type] Resource type.
   */
  type?: string;
  /**
   * @member {string} [serviceName] The name of the service and resource
   */
  serviceName?: string;
  /**
   * @member {string[]} [actions] Describes the actions permitted to the
   * service upon delegation
   */
  actions?: string[];
}

/**
 * @interface
 * An interface representing AzureFirewallIPConfiguration.
 * IP configuration of an Azure Firewall.
 *
 * @extends SubResource
 */
export interface AzureFirewallIPConfiguration extends SubResource {
  /**
   * @member {string} [privateIPAddress] The Firewall Internal Load Balancer IP
   * to be used as the next hop in User Defined Routes.
   */
  privateIPAddress?: string;
  /**
   * @member {SubResource} [subnet] Reference of the subnet resource. This
   * resource must be named 'AzureFirewallSubnet'.
   */
  subnet?: SubResource;
  /**
   * @member {SubResource} [publicIPAddress] Reference of the PublicIP
   * resource. This field is a mandatory input if subnet is not null.
   */
  publicIPAddress?: SubResource;
  /**
   * @member {ProvisioningState} [provisioningState] The provisioning state of
   * the resource. Possible values include: 'Succeeded', 'Updating',
   * 'Deleting', 'Failed'
   */
  provisioningState?: ProvisioningState;
  /**
   * @member {string} [name] Name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
}

/**
 * @interface
 * An interface representing AzureFirewallRCAction.
 * Properties of the AzureFirewallRCAction.
 *
 */
export interface AzureFirewallRCAction {
  /**
   * @member {AzureFirewallRCActionType} [type] The type of action. Possible
   * values include: 'Allow', 'Deny'
   */
  type?: AzureFirewallRCActionType;
}

/**
 * @interface
 * An interface representing AzureFirewallApplicationRuleProtocol.
 * Properties of the application rule protocol.
 *
 */
export interface AzureFirewallApplicationRuleProtocol {
  /**
   * @member {AzureFirewallApplicationRuleProtocolType} [protocolType] Protocol
   * type. Possible values include: 'Http', 'Https'
   */
  protocolType?: AzureFirewallApplicationRuleProtocolType;
  /**
   * @member {number} [port] Port number for the protocol, cannot be greater
   * than 64000. This field is optional.
   */
  port?: number;
}

/**
 * @interface
 * An interface representing AzureFirewallApplicationRule.
 * Properties of an application rule.
 *
 */
export interface AzureFirewallApplicationRule {
  /**
   * @member {string} [name] Name of the application rule.
   */
  name?: string;
  /**
   * @member {string} [description] Description of the rule.
   */
  description?: string;
  /**
   * @member {string[]} [sourceAddresses] List of source IP addresses for this
   * rule.
   */
  sourceAddresses?: string[];
  /**
   * @member {AzureFirewallApplicationRuleProtocol[]} [protocols] Array of
   * ApplicationRuleProtocols.
   */
  protocols?: AzureFirewallApplicationRuleProtocol[];
  /**
   * @member {string[]} [targetFqdns] List of FQDNs for this rule.
   */
  targetFqdns?: string[];
  /**
   * @member {string[]} [fqdnTags] List of FQDN Tags for this rule.
   */
  fqdnTags?: string[];
}

/**
 * @interface
 * An interface representing AzureFirewallApplicationRuleCollection.
 * Application rule collection resource
 *
 * @extends SubResource
 */
export interface AzureFirewallApplicationRuleCollection extends SubResource {
  /**
   * @member {number} [priority] Priority of the application rule collection
   * resource.
   */
  priority?: number;
  /**
   * @member {AzureFirewallRCAction} [action] The action type of a rule
   * collection
   */
  action?: AzureFirewallRCAction;
  /**
   * @member {AzureFirewallApplicationRule[]} [rules] Collection of rules used
   * by a application rule collection.
   */
  rules?: AzureFirewallApplicationRule[];
  /**
   * @member {ProvisioningState} [provisioningState] The provisioning state of
   * the resource. Possible values include: 'Succeeded', 'Updating',
   * 'Deleting', 'Failed'
   */
  provisioningState?: ProvisioningState;
  /**
   * @member {string} [name] Gets name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] Gets a unique read-only string that changes
   * whenever the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
}

/**
 * @interface
 * An interface representing AzureFirewallNatRCAction.
 * AzureFirewall NAT Rule Collection Action.
 *
 */
export interface AzureFirewallNatRCAction {
  /**
   * @member {AzureFirewallNatRCActionType} [type] The type of action. Possible
   * values include: 'Snat', 'Dnat'
   */
  type?: AzureFirewallNatRCActionType;
}

/**
 * @interface
 * An interface representing AzureFirewallNatRule.
 * Properties of a NAT rule.
 *
 */
export interface AzureFirewallNatRule {
  /**
   * @member {string} [name] Name of the NAT rule.
   */
  name?: string;
  /**
   * @member {string} [description] Description of the rule.
   */
  description?: string;
  /**
   * @member {string[]} [sourceAddresses] List of source IP addresses for this
   * rule.
   */
  sourceAddresses?: string[];
  /**
   * @member {string[]} [destinationAddresses] List of destination IP addresses
   * for this rule.
   */
  destinationAddresses?: string[];
  /**
   * @member {string[]} [destinationPorts] List of destination ports.
   */
  destinationPorts?: string[];
  /**
   * @member {AzureFirewallNetworkRuleProtocol[]} [protocols] Array of
   * AzureFirewallNetworkRuleProtocols applicable to this NAT rule.
   */
  protocols?: AzureFirewallNetworkRuleProtocol[];
  /**
   * @member {string} [translatedAddress] The translated address for this NAT
   * rule.
   */
  translatedAddress?: string;
  /**
   * @member {string} [translatedPort] The translated port for this NAT rule.
   */
  translatedPort?: string;
}

/**
 * @interface
 * An interface representing AzureFirewallNatRuleCollection.
 * NAT rule collection resource
 *
 * @extends SubResource
 */
export interface AzureFirewallNatRuleCollection extends SubResource {
  /**
   * @member {number} [priority] Priority of the NAT rule collection resource.
   */
  priority?: number;
  /**
   * @member {AzureFirewallNatRCAction} [action] The action type of a NAT rule
   * collection
   */
  action?: AzureFirewallNatRCAction;
  /**
   * @member {AzureFirewallNatRule[]} [rules] Collection of rules used by a NAT
   * rule collection.
   */
  rules?: AzureFirewallNatRule[];
  /**
   * @member {ProvisioningState} [provisioningState] The provisioning state of
   * the resource. Possible values include: 'Succeeded', 'Updating',
   * 'Deleting', 'Failed'
   */
  provisioningState?: ProvisioningState;
  /**
   * @member {string} [name] Gets name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] Gets a unique read-only string that changes
   * whenever the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
}

/**
 * @interface
 * An interface representing AzureFirewallNetworkRule.
 * Properties of the network rule.
 *
 */
export interface AzureFirewallNetworkRule {
  /**
   * @member {string} [name] Name of the network rule.
   */
  name?: string;
  /**
   * @member {string} [description] Description of the rule.
   */
  description?: string;
  /**
   * @member {AzureFirewallNetworkRuleProtocol[]} [protocols] Array of
   * AzureFirewallNetworkRuleProtocols.
   */
  protocols?: AzureFirewallNetworkRuleProtocol[];
  /**
   * @member {string[]} [sourceAddresses] List of source IP addresses for this
   * rule.
   */
  sourceAddresses?: string[];
  /**
   * @member {string[]} [destinationAddresses] List of destination IP
   * addresses.
   */
  destinationAddresses?: string[];
  /**
   * @member {string[]} [destinationPorts] List of destination ports.
   */
  destinationPorts?: string[];
}

/**
 * @interface
 * An interface representing AzureFirewallNetworkRuleCollection.
 * Network rule collection resource
 *
 * @extends SubResource
 */
export interface AzureFirewallNetworkRuleCollection extends SubResource {
  /**
   * @member {number} [priority] Priority of the network rule collection
   * resource.
   */
  priority?: number;
  /**
   * @member {AzureFirewallRCAction} [action] The action type of a rule
   * collection
   */
  action?: AzureFirewallRCAction;
  /**
   * @member {AzureFirewallNetworkRule[]} [rules] Collection of rules used by a
   * network rule collection.
   */
  rules?: AzureFirewallNetworkRule[];
  /**
   * @member {ProvisioningState} [provisioningState] The provisioning state of
   * the resource. Possible values include: 'Succeeded', 'Updating',
   * 'Deleting', 'Failed'
   */
  provisioningState?: ProvisioningState;
  /**
   * @member {string} [name] Gets name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] Gets a unique read-only string that changes
   * whenever the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
}

/**
 * @interface
 * An interface representing AzureFirewall.
 * Azure Firewall resource
 *
 * @extends Resource
 */
export interface AzureFirewall extends Resource {
  /**
   * @member {AzureFirewallApplicationRuleCollection[]}
   * [applicationRuleCollections] Collection of application rule collections
   * used by Azure Firewall.
   */
  applicationRuleCollections?: AzureFirewallApplicationRuleCollection[];
  /**
   * @member {AzureFirewallNatRuleCollection[]} [natRuleCollections] Collection
   * of NAT rule collections used by Azure Firewall.
   */
  natRuleCollections?: AzureFirewallNatRuleCollection[];
  /**
   * @member {AzureFirewallNetworkRuleCollection[]} [networkRuleCollections]
   * Collection of network rule collections used by Azure Firewall.
   */
  networkRuleCollections?: AzureFirewallNetworkRuleCollection[];
  /**
   * @member {AzureFirewallIPConfiguration[]} [ipConfigurations] IP
   * configuration of the Azure Firewall resource.
   */
  ipConfigurations?: AzureFirewallIPConfiguration[];
  /**
   * @member {ProvisioningState} [provisioningState] The provisioning state of
   * the resource. Possible values include: 'Succeeded', 'Updating',
   * 'Deleting', 'Failed'
   */
  provisioningState?: ProvisioningState;
  /**
   * @member {string} [etag] Gets a unique read-only string that changes
   * whenever the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
}

/**
 * @interface
 * An interface representing AzureFirewallFqdnTag.
 * Azure Firewall FQDN Tag Resource
 *
 * @extends Resource
 */
export interface AzureFirewallFqdnTag extends Resource {
  /**
   * @member {string} [provisioningState] The provisioning state of the
   * resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [fqdnTagName] The name of this FQDN Tag.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly fqdnTagName?: string;
  /**
   * @member {string} [etag] Gets a unique read-only string that changes
   * whenever the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
}

/**
 * @interface
 * An interface representing DnsNameAvailabilityResult.
 * Response for the CheckDnsNameAvailability API service call.
 *
 */
export interface DnsNameAvailabilityResult {
  /**
   * @member {boolean} [available] Domain availability (True/False).
   */
  available?: boolean;
}

/**
 * @interface
 * An interface representing DdosProtectionPlan.
 * A DDoS protection plan in a resource group.
 *
 * @extends BaseResource
 */
export interface DdosProtectionPlan extends BaseResource {
  /**
   * @member {string} [id] Resource ID.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [type] Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} [location] Resource location.
   */
  location?: string;
  /**
   * @member {{ [propertyName: string]: string }} [tags] Resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * @member {string} [resourceGuid] The resource GUID property of the DDoS
   * protection plan resource. It uniquely identifies the resource, even if the
   * user changes its name or migrate the resource across subscriptions or
   * resource groups.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly resourceGuid?: string;
  /**
   * @member {string} [provisioningState] The provisioning state of the DDoS
   * protection plan resource. Possible values are: 'Succeeded', 'Updating',
   * 'Deleting', and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {SubResource[]} [virtualNetworks] The list of virtual networks
   * associated with the DDoS protection plan resource. This list is read-only.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly virtualNetworks?: SubResource[];
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
}

/**
 * @interface
 * An interface representing EndpointServiceResult.
 * Endpoint service.
 *
 * @extends SubResource
 */
export interface EndpointServiceResult extends SubResource {
  /**
   * @member {string} [name] Name of the endpoint service.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [type] Type of the endpoint service.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
}

/**
 * @interface
 * An interface representing ExpressRouteCircuitAuthorization.
 * Authorization in an ExpressRouteCircuit resource.
 *
 * @extends SubResource
 */
export interface ExpressRouteCircuitAuthorization extends SubResource {
  /**
   * @member {string} [authorizationKey] The authorization key.
   */
  authorizationKey?: string;
  /**
   * @member {AuthorizationUseStatus} [authorizationUseStatus]
   * AuthorizationUseStatus. Possible values are: 'Available' and 'InUse'.
   * Possible values include: 'Available', 'InUse'
   */
  authorizationUseStatus?: AuthorizationUseStatus;
  /**
   * @member {string} [provisioningState] Gets the provisioning state of the
   * public IP resource. Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   */
  provisioningState?: string;
  /**
   * @member {string} [name] Gets name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
}

/**
 * @interface
 * An interface representing ExpressRouteCircuitPeeringConfig.
 * Specifies the peering configuration.
 *
 */
export interface ExpressRouteCircuitPeeringConfig {
  /**
   * @member {string[]} [advertisedPublicPrefixes] The reference of
   * AdvertisedPublicPrefixes.
   */
  advertisedPublicPrefixes?: string[];
  /**
   * @member {string[]} [advertisedCommunities] The communities of bgp peering.
   * Spepcified for microsoft peering
   */
  advertisedCommunities?: string[];
  /**
   * @member {ExpressRouteCircuitPeeringAdvertisedPublicPrefixState}
   * [advertisedPublicPrefixesState] AdvertisedPublicPrefixState of the Peering
   * resource. Possible values are 'NotConfigured', 'Configuring',
   * 'Configured', and 'ValidationNeeded'. Possible values include:
   * 'NotConfigured', 'Configuring', 'Configured', 'ValidationNeeded'
   */
  advertisedPublicPrefixesState?: ExpressRouteCircuitPeeringAdvertisedPublicPrefixState;
  /**
   * @member {number} [legacyMode] The legacy mode of the peering.
   */
  legacyMode?: number;
  /**
   * @member {number} [customerASN] The CustomerASN of the peering.
   */
  customerASN?: number;
  /**
   * @member {string} [routingRegistryName] The RoutingRegistryName of the
   * configuration.
   */
  routingRegistryName?: string;
}

/**
 * @interface
 * An interface representing RouteFilterRule.
 * Route Filter Rule Resource
 *
 * @extends SubResource
 */
export interface RouteFilterRule extends SubResource {
  /**
   * @member {Access} access The access type of the rule. Valid values are:
   * 'Allow', 'Deny'. Possible values include: 'Allow', 'Deny'
   */
  access: Access;
  /**
   * @member {string[]} communities The collection for bgp community values to
   * filter on. e.g. ['12076:5010','12076:5020']
   */
  communities: string[];
  /**
   * @member {string} [provisioningState] The provisioning state of the
   * resource. Possible values are: 'Updating', 'Deleting', 'Succeeded' and
   * 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [name] The name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [location] Resource location.
   */
  location?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
}

/**
 * @interface
 * An interface representing ExpressRouteCircuitStats.
 * Contains stats associated with the peering.
 *
 */
export interface ExpressRouteCircuitStats {
  /**
   * @member {number} [primarybytesIn] Gets BytesIn of the peering.
   */
  primarybytesIn?: number;
  /**
   * @member {number} [primarybytesOut] Gets BytesOut of the peering.
   */
  primarybytesOut?: number;
  /**
   * @member {number} [secondarybytesIn] Gets BytesIn of the peering.
   */
  secondarybytesIn?: number;
  /**
   * @member {number} [secondarybytesOut] Gets BytesOut of the peering.
   */
  secondarybytesOut?: number;
}

/**
 * @interface
 * An interface representing ExpressRouteConnectionId.
 * The ID of the ExpressRouteConnection.
 *
 */
export interface ExpressRouteConnectionId {
  /**
   * @member {string} [id] The ID of the ExpressRouteConnection.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
}

/**
 * @interface
 * An interface representing ExpressRouteCircuitConnection.
 * Express Route Circuit Connection in an ExpressRouteCircuitPeering resource.
 *
 * @extends SubResource
 */
export interface ExpressRouteCircuitConnection extends SubResource {
  /**
   * @member {SubResource} [expressRouteCircuitPeering] Reference to Express
   * Route Circuit Private Peering Resource of the circuit initiating
   * connection.
   */
  expressRouteCircuitPeering?: SubResource;
  /**
   * @member {SubResource} [peerExpressRouteCircuitPeering] Reference to
   * Express Route Circuit Private Peering Resource of the peered circuit.
   */
  peerExpressRouteCircuitPeering?: SubResource;
  /**
   * @member {string} [addressPrefix] /29 IP address space to carve out
   * Customer addresses for tunnels.
   */
  addressPrefix?: string;
  /**
   * @member {string} [authorizationKey] The authorization key.
   */
  authorizationKey?: string;
  /**
   * @member {CircuitConnectionStatus} [circuitConnectionStatus] Express Route
   * Circuit Connection State. Possible values are: 'Connected' and
   * 'Disconnected'. Possible values include: 'Connected', 'Connecting',
   * 'Disconnected'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly circuitConnectionStatus?: CircuitConnectionStatus;
  /**
   * @member {string} [provisioningState] Provisioning state of the circuit
   * connection resource. Possible values are: 'Succeded', 'Updating',
   * 'Deleting', and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [name] Gets name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
}

/**
 * @interface
 * An interface representing ExpressRouteCircuitPeering.
 * Peering in an ExpressRouteCircuit resource.
 *
 * @extends SubResource
 */
export interface ExpressRouteCircuitPeering extends SubResource {
  /**
   * @member {ExpressRoutePeeringType} [peeringType] The peering type. Possible
   * values include: 'AzurePublicPeering', 'AzurePrivatePeering',
   * 'MicrosoftPeering'
   */
  peeringType?: ExpressRoutePeeringType;
  /**
   * @member {ExpressRoutePeeringState} [state] The peering state. Possible
   * values include: 'Disabled', 'Enabled'
   */
  state?: ExpressRoutePeeringState;
  /**
   * @member {number} [azureASN] The Azure ASN.
   */
  azureASN?: number;
  /**
   * @member {number} [peerASN] The peer ASN.
   */
  peerASN?: number;
  /**
   * @member {string} [primaryPeerAddressPrefix] The primary address prefix.
   */
  primaryPeerAddressPrefix?: string;
  /**
   * @member {string} [secondaryPeerAddressPrefix] The secondary address
   * prefix.
   */
  secondaryPeerAddressPrefix?: string;
  /**
   * @member {string} [primaryAzurePort] The primary port.
   */
  primaryAzurePort?: string;
  /**
   * @member {string} [secondaryAzurePort] The secondary port.
   */
  secondaryAzurePort?: string;
  /**
   * @member {string} [sharedKey] The shared key.
   */
  sharedKey?: string;
  /**
   * @member {number} [vlanId] The VLAN ID.
   */
  vlanId?: number;
  /**
   * @member {ExpressRouteCircuitPeeringConfig} [microsoftPeeringConfig] The
   * Microsoft peering configuration.
   */
  microsoftPeeringConfig?: ExpressRouteCircuitPeeringConfig;
  /**
   * @member {ExpressRouteCircuitStats} [stats] Gets peering stats.
   */
  stats?: ExpressRouteCircuitStats;
  /**
   * @member {string} [provisioningState] Gets the provisioning state of the
   * public IP resource. Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   */
  provisioningState?: string;
  /**
   * @member {string} [gatewayManagerEtag] The GatewayManager Etag.
   */
  gatewayManagerEtag?: string;
  /**
   * @member {string} [lastModifiedBy] Gets whether the provider or the
   * customer last modified the peering.
   */
  lastModifiedBy?: string;
  /**
   * @member {RouteFilter} [routeFilter] The reference of the RouteFilter
   * resource.
   */
  routeFilter?: RouteFilter;
  /**
   * @member {Ipv6ExpressRouteCircuitPeeringConfig} [ipv6PeeringConfig] The
   * IPv6 peering configuration.
   */
  ipv6PeeringConfig?: Ipv6ExpressRouteCircuitPeeringConfig;
  /**
   * @member {ExpressRouteConnectionId} [expressRouteConnection] The
   * ExpressRoute connection.
   */
  expressRouteConnection?: ExpressRouteConnectionId;
  /**
   * @member {ExpressRouteCircuitConnection[]} [connections] The list of
   * circuit connections associated with Azure Private Peering for this
   * circuit.
   */
  connections?: ExpressRouteCircuitConnection[];
  /**
   * @member {string} [name] Gets name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
}

/**
 * @interface
 * An interface representing RouteFilter.
 * Route Filter Resource.
 *
 * @extends Resource
 */
export interface RouteFilter extends Resource {
  /**
   * @member {RouteFilterRule[]} [rules] Collection of RouteFilterRules
   * contained within a route filter.
   */
  rules?: RouteFilterRule[];
  /**
   * @member {ExpressRouteCircuitPeering[]} [peerings] A collection of
   * references to express route circuit peerings.
   */
  peerings?: ExpressRouteCircuitPeering[];
  /**
   * @member {string} [provisioningState] The provisioning state of the
   * resource. Possible values are: 'Updating', 'Deleting', 'Succeeded' and
   * 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [etag] Gets a unique read-only string that changes
   * whenever the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
}

/**
 * @interface
 * An interface representing Ipv6ExpressRouteCircuitPeeringConfig.
 * Contains IPv6 peering config.
 *
 */
export interface Ipv6ExpressRouteCircuitPeeringConfig {
  /**
   * @member {string} [primaryPeerAddressPrefix] The primary address prefix.
   */
  primaryPeerAddressPrefix?: string;
  /**
   * @member {string} [secondaryPeerAddressPrefix] The secondary address
   * prefix.
   */
  secondaryPeerAddressPrefix?: string;
  /**
   * @member {ExpressRouteCircuitPeeringConfig} [microsoftPeeringConfig] The
   * Microsoft peering configuration.
   */
  microsoftPeeringConfig?: ExpressRouteCircuitPeeringConfig;
  /**
   * @member {RouteFilter} [routeFilter] The reference of the RouteFilter
   * resource.
   */
  routeFilter?: RouteFilter;
  /**
   * @member {ExpressRouteCircuitPeeringState} [state] The state of peering.
   * Possible values are: 'Disabled' and 'Enabled'. Possible values include:
   * 'Disabled', 'Enabled'
   */
  state?: ExpressRouteCircuitPeeringState;
}

/**
 * @interface
 * An interface representing ExpressRouteCircuitSku.
 * Contains SKU in an ExpressRouteCircuit.
 *
 */
export interface ExpressRouteCircuitSku {
  /**
   * @member {string} [name] The name of the SKU.
   */
  name?: string;
  /**
   * @member {ExpressRouteCircuitSkuTier} [tier] The tier of the SKU. Possible
   * values are 'Standard', 'Premium' or 'Basic'. Possible values include:
   * 'Standard', 'Premium', 'Basic'
   */
  tier?: ExpressRouteCircuitSkuTier;
  /**
   * @member {ExpressRouteCircuitSkuFamily} [family] The family of the SKU.
   * Possible values are: 'UnlimitedData' and 'MeteredData'. Possible values
   * include: 'UnlimitedData', 'MeteredData'
   */
  family?: ExpressRouteCircuitSkuFamily;
}

/**
 * @interface
 * An interface representing ExpressRouteCircuitServiceProviderProperties.
 * Contains ServiceProviderProperties in an ExpressRouteCircuit.
 *
 */
export interface ExpressRouteCircuitServiceProviderProperties {
  /**
   * @member {string} [serviceProviderName] The serviceProviderName.
   */
  serviceProviderName?: string;
  /**
   * @member {string} [peeringLocation] The peering location.
   */
  peeringLocation?: string;
  /**
   * @member {number} [bandwidthInMbps] The BandwidthInMbps.
   */
  bandwidthInMbps?: number;
}

/**
 * @interface
 * An interface representing ExpressRouteCircuit.
 * ExpressRouteCircuit resource
 *
 * @extends Resource
 */
export interface ExpressRouteCircuit extends Resource {
  /**
   * @member {ExpressRouteCircuitSku} [sku] The SKU.
   */
  sku?: ExpressRouteCircuitSku;
  /**
   * @member {boolean} [allowClassicOperations] Allow classic operations
   */
  allowClassicOperations?: boolean;
  /**
   * @member {string} [circuitProvisioningState] The CircuitProvisioningState
   * state of the resource.
   */
  circuitProvisioningState?: string;
  /**
   * @member {ServiceProviderProvisioningState}
   * [serviceProviderProvisioningState] The ServiceProviderProvisioningState
   * state of the resource. Possible values are 'NotProvisioned',
   * 'Provisioning', 'Provisioned', and 'Deprovisioning'. Possible values
   * include: 'NotProvisioned', 'Provisioning', 'Provisioned', 'Deprovisioning'
   */
  serviceProviderProvisioningState?: ServiceProviderProvisioningState;
  /**
   * @member {ExpressRouteCircuitAuthorization[]} [authorizations] The list of
   * authorizations.
   */
  authorizations?: ExpressRouteCircuitAuthorization[];
  /**
   * @member {ExpressRouteCircuitPeering[]} [peerings] The list of peerings.
   */
  peerings?: ExpressRouteCircuitPeering[];
  /**
   * @member {string} [serviceKey] The ServiceKey.
   */
  serviceKey?: string;
  /**
   * @member {string} [serviceProviderNotes] The ServiceProviderNotes.
   */
  serviceProviderNotes?: string;
  /**
   * @member {ExpressRouteCircuitServiceProviderProperties}
   * [serviceProviderProperties] The ServiceProviderProperties.
   */
  serviceProviderProperties?: ExpressRouteCircuitServiceProviderProperties;
  /**
   * @member {SubResource} [expressRoutePort] The reference to the
   * ExpressRoutePort resource when the circuit is provisioned on an
   * ExpressRoutePort resource.
   */
  expressRoutePort?: SubResource;
  /**
   * @member {number} [bandwidthInGbps] The bandwidth of the circuit when the
   * circuit is provisioned on an ExpressRoutePort resource.
   */
  bandwidthInGbps?: number;
  /**
   * @member {number} [stag] The identifier of the circuit traffic. Outer tag
   * for QinQ encapsulation.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly stag?: number;
  /**
   * @member {string} [provisioningState] Gets the provisioning state of the
   * public IP resource. Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   */
  provisioningState?: string;
  /**
   * @member {string} [gatewayManagerEtag] The GatewayManager Etag.
   */
  gatewayManagerEtag?: string;
  /**
   * @member {boolean} [allowGlobalReach] Flag to enable Global Reach on the
   * circuit.
   */
  allowGlobalReach?: boolean;
  /**
   * @member {string} [etag] Gets a unique read-only string that changes
   * whenever the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
}

/**
 * @interface
 * An interface representing ExpressRouteCircuitArpTable.
 * The ARP table associated with the ExpressRouteCircuit.
 *
 */
export interface ExpressRouteCircuitArpTable {
  /**
   * @member {number} [age] Entry age in minutes
   */
  age?: number;
  /**
   * @member {string} [interfaceProperty] Interface address
   */
  interfaceProperty?: string;
  /**
   * @member {string} [ipAddress] The IP address.
   */
  ipAddress?: string;
  /**
   * @member {string} [macAddress] The MAC address.
   */
  macAddress?: string;
}

/**
 * @interface
 * An interface representing ExpressRouteCircuitsArpTableListResult.
 * Response for ListArpTable associated with the Express Route Circuits API.
 *
 */
export interface ExpressRouteCircuitsArpTableListResult {
  /**
   * @member {ExpressRouteCircuitArpTable[]} [value] Gets list of the ARP
   * table.
   */
  value?: ExpressRouteCircuitArpTable[];
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing ExpressRouteCircuitRoutesTable.
 * The routes table associated with the ExpressRouteCircuit
 *
 */
export interface ExpressRouteCircuitRoutesTable {
  /**
   * @member {string} [network] IP address of a network entity
   */
  network?: string;
  /**
   * @member {string} [nextHop] NextHop address
   */
  nextHop?: string;
  /**
   * @member {string} [locPrf] Local preference value as set with the set
   * local-preference route-map configuration command
   */
  locPrf?: string;
  /**
   * @member {number} [weight] Route Weight.
   */
  weight?: number;
  /**
   * @member {string} [path] Autonomous system paths to the destination
   * network.
   */
  path?: string;
}

/**
 * @interface
 * An interface representing ExpressRouteCircuitsRoutesTableListResult.
 * Response for ListRoutesTable associated with the Express Route Circuits API.
 *
 */
export interface ExpressRouteCircuitsRoutesTableListResult {
  /**
   * @member {ExpressRouteCircuitRoutesTable[]} [value] The list of routes
   * table.
   */
  value?: ExpressRouteCircuitRoutesTable[];
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing ExpressRouteCircuitRoutesTableSummary.
 * The routes table associated with the ExpressRouteCircuit.
 *
 */
export interface ExpressRouteCircuitRoutesTableSummary {
  /**
   * @member {string} [neighbor] IP address of the neighbor.
   */
  neighbor?: string;
  /**
   * @member {number} [v] BGP version number spoken to the neighbor.
   */
  v?: number;
  /**
   * @member {number} [as] Autonomous system number.
   */
  as?: number;
  /**
   * @member {string} [upDown] The length of time that the BGP session has been
   * in the Established state, or the current status if not in the Established
   * state.
   */
  upDown?: string;
  /**
   * @member {string} [statePfxRcd] Current state of the BGP session, and the
   * number of prefixes that have been received from a neighbor or peer group.
   */
  statePfxRcd?: string;
}

/**
 * @interface
 * An interface representing ExpressRouteCircuitsRoutesTableSummaryListResult.
 * Response for ListRoutesTable associated with the Express Route Circuits API.
 *
 */
export interface ExpressRouteCircuitsRoutesTableSummaryListResult {
  /**
   * @member {ExpressRouteCircuitRoutesTableSummary[]} [value] A list of the
   * routes table.
   */
  value?: ExpressRouteCircuitRoutesTableSummary[];
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing ExpressRouteServiceProviderBandwidthsOffered.
 * Contains bandwidths offered in ExpressRouteServiceProvider resources.
 *
 */
export interface ExpressRouteServiceProviderBandwidthsOffered {
  /**
   * @member {string} [offerName] The OfferName.
   */
  offerName?: string;
  /**
   * @member {number} [valueInMbps] The ValueInMbps.
   */
  valueInMbps?: number;
}

/**
 * @interface
 * An interface representing ExpressRouteServiceProvider.
 * A ExpressRouteResourceProvider object.
 *
 * @extends Resource
 */
export interface ExpressRouteServiceProvider extends Resource {
  /**
   * @member {string[]} [peeringLocations] Get a list of peering locations.
   */
  peeringLocations?: string[];
  /**
   * @member {ExpressRouteServiceProviderBandwidthsOffered[]}
   * [bandwidthsOffered] Gets bandwidths offered.
   */
  bandwidthsOffered?: ExpressRouteServiceProviderBandwidthsOffered[];
  /**
   * @member {string} [provisioningState] Gets the provisioning state of the
   * resource.
   */
  provisioningState?: string;
}

/**
 * @interface
 * An interface representing ExpressRouteCrossConnectionRoutesTableSummary.
 * The routes table associated with the ExpressRouteCircuit.
 *
 */
export interface ExpressRouteCrossConnectionRoutesTableSummary {
  /**
   * @member {string} [neighbor] IP address of Neighbor router
   */
  neighbor?: string;
  /**
   * @member {number} [asn] Autonomous system number.
   */
  asn?: number;
  /**
   * @member {string} [upDown] The length of time that the BGP session has been
   * in the Established state, or the current status if not in the Established
   * state.
   */
  upDown?: string;
  /**
   * @member {string} [stateOrPrefixesReceived] Current state of the BGP
   * session, and the number of prefixes that have been received from a
   * neighbor or peer group.
   */
  stateOrPrefixesReceived?: string;
}

/**
 * @interface
 * An interface representing ExpressRouteCrossConnectionsRoutesTableSummaryListResult.
 * Response for ListRoutesTable associated with the Express Route Cross
 * Connections.
 *
 */
export interface ExpressRouteCrossConnectionsRoutesTableSummaryListResult {
  /**
   * @member {ExpressRouteCrossConnectionRoutesTableSummary[]} [value] A list
   * of the routes table.
   */
  value?: ExpressRouteCrossConnectionRoutesTableSummary[];
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing ExpressRouteCircuitReference.
 */
export interface ExpressRouteCircuitReference {
  /**
   * @member {string} [id] Corresponding Express Route Circuit Id.
   */
  id?: string;
}

/**
 * @interface
 * An interface representing ExpressRouteCrossConnectionPeering.
 * Peering in an ExpressRoute Cross Connection resource.
 *
 * @extends SubResource
 */
export interface ExpressRouteCrossConnectionPeering extends SubResource {
  /**
   * @member {ExpressRoutePeeringType} [peeringType] The peering type. Possible
   * values include: 'AzurePublicPeering', 'AzurePrivatePeering',
   * 'MicrosoftPeering'
   */
  peeringType?: ExpressRoutePeeringType;
  /**
   * @member {ExpressRoutePeeringState} [state] The peering state. Possible
   * values include: 'Disabled', 'Enabled'
   */
  state?: ExpressRoutePeeringState;
  /**
   * @member {number} [azureASN] The Azure ASN.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly azureASN?: number;
  /**
   * @member {number} [peerASN] The peer ASN.
   */
  peerASN?: number;
  /**
   * @member {string} [primaryPeerAddressPrefix] The primary address prefix.
   */
  primaryPeerAddressPrefix?: string;
  /**
   * @member {string} [secondaryPeerAddressPrefix] The secondary address
   * prefix.
   */
  secondaryPeerAddressPrefix?: string;
  /**
   * @member {string} [primaryAzurePort] The primary port.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly primaryAzurePort?: string;
  /**
   * @member {string} [secondaryAzurePort] The secondary port.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly secondaryAzurePort?: string;
  /**
   * @member {string} [sharedKey] The shared key.
   */
  sharedKey?: string;
  /**
   * @member {number} [vlanId] The VLAN ID.
   */
  vlanId?: number;
  /**
   * @member {ExpressRouteCircuitPeeringConfig} [microsoftPeeringConfig] The
   * Microsoft peering configuration.
   */
  microsoftPeeringConfig?: ExpressRouteCircuitPeeringConfig;
  /**
   * @member {string} [provisioningState] Gets the provisioning state of the
   * public IP resource. Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [gatewayManagerEtag] The GatewayManager Etag.
   */
  gatewayManagerEtag?: string;
  /**
   * @member {string} [lastModifiedBy] Gets whether the provider or the
   * customer last modified the peering.
   */
  lastModifiedBy?: string;
  /**
   * @member {Ipv6ExpressRouteCircuitPeeringConfig} [ipv6PeeringConfig] The
   * IPv6 peering configuration.
   */
  ipv6PeeringConfig?: Ipv6ExpressRouteCircuitPeeringConfig;
  /**
   * @member {string} [name] Gets name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
}

/**
 * @interface
 * An interface representing ExpressRouteCrossConnection.
 * ExpressRouteCrossConnection resource
 *
 * @extends Resource
 */
export interface ExpressRouteCrossConnection extends Resource {
  /**
   * @member {string} [primaryAzurePort] The name of the primary  port.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly primaryAzurePort?: string;
  /**
   * @member {string} [secondaryAzurePort] The name of the secondary  port.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly secondaryAzurePort?: string;
  /**
   * @member {number} [sTag] The identifier of the circuit traffic.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sTag?: number;
  /**
   * @member {string} [peeringLocation] The peering location of the
   * ExpressRoute circuit.
   */
  peeringLocation?: string;
  /**
   * @member {number} [bandwidthInMbps] The circuit bandwidth In Mbps.
   */
  bandwidthInMbps?: number;
  /**
   * @member {ExpressRouteCircuitReference} [expressRouteCircuit] The
   * ExpressRouteCircuit
   */
  expressRouteCircuit?: ExpressRouteCircuitReference;
  /**
   * @member {ServiceProviderProvisioningState}
   * [serviceProviderProvisioningState] The provisioning state of the circuit
   * in the connectivity provider system. Possible values are 'NotProvisioned',
   * 'Provisioning', 'Provisioned'. Possible values include: 'NotProvisioned',
   * 'Provisioning', 'Provisioned', 'Deprovisioning'
   */
  serviceProviderProvisioningState?: ServiceProviderProvisioningState;
  /**
   * @member {string} [serviceProviderNotes] Additional read only notes set by
   * the connectivity provider.
   */
  serviceProviderNotes?: string;
  /**
   * @member {string} [provisioningState] Gets the provisioning state of the
   * public IP resource. Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {ExpressRouteCrossConnectionPeering[]} [peerings] The list of
   * peerings.
   */
  peerings?: ExpressRouteCrossConnectionPeering[];
  /**
   * @member {string} [etag] Gets a unique read-only string that changes
   * whenever the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
}

/**
 * @interface
 * An interface representing VirtualHubId.
 * Virtual Hub identifier.
 *
 */
export interface VirtualHubId {
  /**
   * @member {string} [id] The resource URI for the Virtual Hub where the
   * ExpressRoute gateway is or will be deployed. The Virtual Hub resource and
   * the ExpressRoute gateway resource reside in the same subscription.
   */
  id?: string;
}

/**
 * @interface
 * An interface representing ExpressRouteCircuitPeeringId.
 * ExpressRoute circuit peering identifier.
 *
 */
export interface ExpressRouteCircuitPeeringId {
  /**
   * @member {string} [id] The ID of the ExpressRoute circuit peering.
   */
  id?: string;
}

/**
 * @interface
 * An interface representing ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds.
 * Minimum and maximum number of scale units to deploy.
 *
 */
export interface ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds {
  /**
   * @member {number} [min] Minimum number of scale units deployed for
   * ExpressRoute gateway.
   */
  min?: number;
  /**
   * @member {number} [max] Maximum number of scale units deployed for
   * ExpressRoute gateway.
   */
  max?: number;
}

/**
 * @interface
 * An interface representing ExpressRouteGatewayPropertiesAutoScaleConfiguration.
 * Configuration for auto scaling.
 *
 */
export interface ExpressRouteGatewayPropertiesAutoScaleConfiguration {
  /**
   * @member {ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds}
   * [bounds] Minimum and maximum number of scale units to deploy.
   */
  bounds?: ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds;
}

/**
 * @interface
 * An interface representing ExpressRouteConnection.
 * ExpressRouteConnection resource.
 *
 * @extends SubResource
 */
export interface ExpressRouteConnection extends SubResource {
  /**
   * @member {ProvisioningState} [provisioningState] The provisioning state of
   * the resource. Possible values include: 'Succeeded', 'Updating',
   * 'Deleting', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * @member {ExpressRouteCircuitPeeringId} expressRouteCircuitPeering The
   * ExpressRoute circuit peering.
   */
  expressRouteCircuitPeering: ExpressRouteCircuitPeeringId;
  /**
   * @member {string} [authorizationKey] Authorization key to establish the
   * connection.
   */
  authorizationKey?: string;
  /**
   * @member {number} [routingWeight] The routing weight associated to the
   * connection.
   */
  routingWeight?: number;
  /**
   * @member {string} name The name of the resource.
   */
  name: string;
}

/**
 * @interface
 * An interface representing ExpressRouteGateway.
 * ExpressRoute gateway resource.
 *
 * @extends Resource
 */
export interface ExpressRouteGateway extends Resource {
  /**
   * @member {ExpressRouteGatewayPropertiesAutoScaleConfiguration}
   * [autoScaleConfiguration] Configuration for auto scaling.
   */
  autoScaleConfiguration?: ExpressRouteGatewayPropertiesAutoScaleConfiguration;
  /**
   * @member {ExpressRouteConnection[]} [expressRouteConnections] List of
   * ExpressRoute connections to the ExpressRoute gateway.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly expressRouteConnections?: ExpressRouteConnection[];
  /**
   * @member {ProvisioningState} [provisioningState] The provisioning state of
   * the resource. Possible values include: 'Succeeded', 'Updating',
   * 'Deleting', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * @member {VirtualHubId} virtualHub The Virtual Hub where the ExpressRoute
   * gateway is or will be deployed.
   */
  virtualHub: VirtualHubId;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
}

/**
 * @interface
 * An interface representing ExpressRouteGatewayList.
 * List of ExpressRoute gateways.
 *
 */
export interface ExpressRouteGatewayList {
  /**
   * @member {ExpressRouteGateway[]} [value] List of ExpressRoute gateways.
   */
  value?: ExpressRouteGateway[];
}

/**
 * @interface
 * An interface representing ExpressRouteConnectionList.
 * ExpressRouteConnection list
 *
 */
export interface ExpressRouteConnectionList {
  /**
   * @member {ExpressRouteConnection[]} [value] The list of ExpressRoute
   * connections
   */
  value?: ExpressRouteConnection[];
}

/**
 * @interface
 * An interface representing ExpressRoutePortsLocationBandwidths.
 * @summary ExpressRoutePorts Location Bandwidths
 *
 * Real-time inventory of available ExpressRoute port bandwidths.
 *
 */
export interface ExpressRoutePortsLocationBandwidths {
  /**
   * @member {string} [offerName] Bandwidth descriptive name
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly offerName?: string;
  /**
   * @member {number} [valueInGbps] Bandwidth value in Gbps
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly valueInGbps?: number;
}

/**
 * @interface
 * An interface representing ExpressRoutePortsLocation.
 * @summary ExpressRoutePorts Peering Location
 *
 * Definition of the ExpressRoutePorts peering location resource.
 *
 * @extends Resource
 */
export interface ExpressRoutePortsLocation extends Resource {
  /**
   * @member {string} [address] Address of peering location.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly address?: string;
  /**
   * @member {string} [contact] Contact details of peering locations.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly contact?: string;
  /**
   * @member {ExpressRoutePortsLocationBandwidths[]} [availableBandwidths] The
   * inventory of available ExpressRoutePort bandwidths.
   */
  availableBandwidths?: ExpressRoutePortsLocationBandwidths[];
  /**
   * @member {string} [provisioningState] The provisioning state of the
   * ExpressRoutePortLocation resource. Possible values are: 'Succeeded',
   * 'Updating', 'Deleting', and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
}

/**
 * @interface
 * An interface representing ExpressRouteLink.
 * @summary ExpressRouteLink
 *
 * ExpressRouteLink child resource definition.
 *
 * @extends SubResource
 */
export interface ExpressRouteLink extends SubResource {
  /**
   * @member {string} [routerName] Name of Azure router associated with
   * physical port.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly routerName?: string;
  /**
   * @member {string} [interfaceName] Name of Azure router interface.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly interfaceName?: string;
  /**
   * @member {string} [patchPanelId] Mapping between physical port to patch
   * panel port.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly patchPanelId?: string;
  /**
   * @member {string} [rackId] Mapping of physical patch panel to rack.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly rackId?: string;
  /**
   * @member {ExpressRouteLinkConnectorType} [connectorType] Physical fiber
   * port type. Possible values include: 'LC', 'SC'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly connectorType?: ExpressRouteLinkConnectorType;
  /**
   * @member {ExpressRouteLinkAdminState} [adminState] Administrative state of
   * the physical port. Possible values include: 'Enabled', 'Disabled'
   */
  adminState?: ExpressRouteLinkAdminState;
  /**
   * @member {string} [provisioningState] The provisioning state of the
   * ExpressRouteLink resource. Possible values are: 'Succeeded', 'Updating',
   * 'Deleting', and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [name] Name of child port resource that is unique among
   * child port resources of the parent.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
}

/**
 * @interface
 * An interface representing ExpressRoutePort.
 * @summary ExpressRoute Port
 *
 * ExpressRoutePort resource definition.
 *
 * @extends Resource
 */
export interface ExpressRoutePort extends Resource {
  /**
   * @member {string} [peeringLocation] The name of the peering location that
   * the ExpressRoutePort is mapped to physically.
   */
  peeringLocation?: string;
  /**
   * @member {number} [bandwidthInGbps] Bandwidth of procured ports in Gbps
   */
  bandwidthInGbps?: number;
  /**
   * @member {number} [provisionedBandwidthInGbps] Aggregate Gbps of associated
   * circuit bandwidths.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisionedBandwidthInGbps?: number;
  /**
   * @member {string} [mtu] Maximum transmission unit of the physical port
   * pair(s)
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly mtu?: string;
  /**
   * @member {ExpressRoutePortsEncapsulation} [encapsulation] Encapsulation
   * method on physical ports. Possible values include: 'Dot1Q', 'QinQ'
   */
  encapsulation?: ExpressRoutePortsEncapsulation;
  /**
   * @member {string} [etherType] Ethertype of the physical port.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etherType?: string;
  /**
   * @member {string} [allocationDate] Date of the physical port allocation to
   * be used in Letter of Authorization.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly allocationDate?: string;
  /**
   * @member {ExpressRouteLink[]} [links] ExpressRouteLink Sub-Resources. The
   * set of physical links of the ExpressRoutePort resource
   */
  links?: ExpressRouteLink[];
  /**
   * @member {SubResource[]} [circuits] Reference the ExpressRoute circuit(s)
   * that are provisioned on this ExpressRoutePort resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly circuits?: SubResource[];
  /**
   * @member {string} [provisioningState] The provisioning state of the
   * ExpressRoutePort resource. Possible values are: 'Succeeded', 'Updating',
   * 'Deleting', and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [resourceGuid] The resource GUID property of the
   * ExpressRoutePort resource.
   */
  resourceGuid?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
}

/**
 * @interface
 * An interface representing LoadBalancerSku.
 * SKU of a load balancer
 *
 */
export interface LoadBalancerSku {
  /**
   * @member {LoadBalancerSkuName} [name] Name of a load balancer SKU. Possible
   * values include: 'Basic', 'Standard'
   */
  name?: LoadBalancerSkuName;
}

/**
 * @interface
 * An interface representing LoadBalancingRule.
 * A load balancing rule for a load balancer.
 *
 * @extends SubResource
 */
export interface LoadBalancingRule extends SubResource {
  /**
   * @member {SubResource} [frontendIPConfiguration] A reference to frontend IP
   * addresses.
   */
  frontendIPConfiguration?: SubResource;
  /**
   * @member {SubResource} [backendAddressPool] A reference to a pool of DIPs.
   * Inbound traffic is randomly load balanced across IPs in the backend IPs.
   */
  backendAddressPool?: SubResource;
  /**
   * @member {SubResource} [probe] The reference of the load balancer probe
   * used by the load balancing rule.
   */
  probe?: SubResource;
  /**
   * @member {TransportProtocol} protocol Possible values include: 'Udp',
   * 'Tcp', 'All'
   */
  protocol: TransportProtocol;
  /**
   * @member {LoadDistribution} [loadDistribution] The load distribution policy
   * for this rule. Possible values are 'Default', 'SourceIP', and
   * 'SourceIPProtocol'. Possible values include: 'Default', 'SourceIP',
   * 'SourceIPProtocol'
   */
  loadDistribution?: LoadDistribution;
  /**
   * @member {number} frontendPort The port for the external endpoint. Port
   * numbers for each rule must be unique within the Load Balancer. Acceptable
   * values are between 0 and 65534. Note that value 0 enables "Any Port"
   */
  frontendPort: number;
  /**
   * @member {number} [backendPort] The port used for internal connections on
   * the endpoint. Acceptable values are between 0 and 65535. Note that value 0
   * enables "Any Port"
   */
  backendPort?: number;
  /**
   * @member {number} [idleTimeoutInMinutes] The timeout for the TCP idle
   * connection. The value can be set between 4 and 30 minutes. The default
   * value is 4 minutes. This element is only used when the protocol is set to
   * TCP.
   */
  idleTimeoutInMinutes?: number;
  /**
   * @member {boolean} [enableFloatingIP] Configures a virtual machine's
   * endpoint for the floating IP capability required to configure a SQL
   * AlwaysOn Availability Group. This setting is required when using the SQL
   * AlwaysOn Availability Groups in SQL server. This setting can't be changed
   * after you create the endpoint.
   */
  enableFloatingIP?: boolean;
  /**
   * @member {boolean} [enableTcpReset] Receive bidirectional TCP Reset on TCP
   * flow idle timeout or unexpected connection termination. This element is
   * only used when the protocol is set to TCP.
   */
  enableTcpReset?: boolean;
  /**
   * @member {boolean} [disableOutboundSnat] Configures SNAT for the VMs in the
   * backend pool to use the publicIP address specified in the frontend of the
   * load balancing rule.
   */
  disableOutboundSnat?: boolean;
  /**
   * @member {string} [provisioningState] Gets the provisioning state of the
   * PublicIP resource. Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   */
  provisioningState?: string;
  /**
   * @member {string} [name] The name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing Probe.
 * A load balancer probe.
 *
 * @extends SubResource
 */
export interface Probe extends SubResource {
  /**
   * @member {SubResource[]} [loadBalancingRules] The load balancer rules that
   * use this probe.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly loadBalancingRules?: SubResource[];
  /**
   * @member {ProbeProtocol} protocol The protocol of the end point. Possible
   * values are: 'Http', 'Tcp', or 'Https'. If 'Tcp' is specified, a received
   * ACK is required for the probe to be successful. If 'Http' or 'Https' is
   * specified, a 200 OK response from the specifies URI is required for the
   * probe to be successful. Possible values include: 'Http', 'Tcp', 'Https'
   */
  protocol: ProbeProtocol;
  /**
   * @member {number} port The port for communicating the probe. Possible
   * values range from 1 to 65535, inclusive.
   */
  port: number;
  /**
   * @member {number} [intervalInSeconds] The interval, in seconds, for how
   * frequently to probe the endpoint for health status. Typically, the
   * interval is slightly less than half the allocated timeout period (in
   * seconds) which allows two full probes before taking the instance out of
   * rotation. The default value is 15, the minimum value is 5.
   */
  intervalInSeconds?: number;
  /**
   * @member {number} [numberOfProbes] The number of probes where if no
   * response, will result in stopping further traffic from being delivered to
   * the endpoint. This values allows endpoints to be taken out of rotation
   * faster or slower than the typical times used in Azure.
   */
  numberOfProbes?: number;
  /**
   * @member {string} [requestPath] The URI used for requesting health status
   * from the VM. Path is required if a protocol is set to http. Otherwise, it
   * is not allowed. There is no default value.
   */
  requestPath?: string;
  /**
   * @member {string} [provisioningState] Gets the provisioning state of the
   * public IP resource. Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   */
  provisioningState?: string;
  /**
   * @member {string} [name] Gets name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing InboundNatPool.
 * Inbound NAT pool of the load balancer.
 *
 * @extends SubResource
 */
export interface InboundNatPool extends SubResource {
  /**
   * @member {SubResource} [frontendIPConfiguration] A reference to frontend IP
   * addresses.
   */
  frontendIPConfiguration?: SubResource;
  /**
   * @member {TransportProtocol} protocol Possible values include: 'Udp',
   * 'Tcp', 'All'
   */
  protocol: TransportProtocol;
  /**
   * @member {number} frontendPortRangeStart The first port number in the range
   * of external ports that will be used to provide Inbound Nat to NICs
   * associated with a load balancer. Acceptable values range between 1 and
   * 65534.
   */
  frontendPortRangeStart: number;
  /**
   * @member {number} frontendPortRangeEnd The last port number in the range of
   * external ports that will be used to provide Inbound Nat to NICs associated
   * with a load balancer. Acceptable values range between 1 and 65535.
   */
  frontendPortRangeEnd: number;
  /**
   * @member {number} backendPort The port used for internal connections on the
   * endpoint. Acceptable values are between 1 and 65535.
   */
  backendPort: number;
  /**
   * @member {number} [idleTimeoutInMinutes] The timeout for the TCP idle
   * connection. The value can be set between 4 and 30 minutes. The default
   * value is 4 minutes. This element is only used when the protocol is set to
   * TCP.
   */
  idleTimeoutInMinutes?: number;
  /**
   * @member {boolean} [enableFloatingIP] Configures a virtual machine's
   * endpoint for the floating IP capability required to configure a SQL
   * AlwaysOn Availability Group. This setting is required when using the SQL
   * AlwaysOn Availability Groups in SQL server. This setting can't be changed
   * after you create the endpoint.
   */
  enableFloatingIP?: boolean;
  /**
   * @member {boolean} [enableTcpReset] Receive bidirectional TCP Reset on TCP
   * flow idle timeout or unexpected connection termination. This element is
   * only used when the protocol is set to TCP.
   */
  enableTcpReset?: boolean;
  /**
   * @member {string} [provisioningState] Gets the provisioning state of the
   * PublicIP resource. Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   */
  provisioningState?: string;
  /**
   * @member {string} [name] The name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing OutboundRule.
 * Outbound pool of the load balancer.
 *
 * @extends SubResource
 */
export interface OutboundRule extends SubResource {
  /**
   * @member {number} [allocatedOutboundPorts] The number of outbound ports to
   * be used for NAT.
   */
  allocatedOutboundPorts?: number;
  /**
   * @member {SubResource[]} frontendIPConfigurations The Frontend IP addresses
   * of the load balancer.
   */
  frontendIPConfigurations: SubResource[];
  /**
   * @member {SubResource} backendAddressPool A reference to a pool of DIPs.
   * Outbound traffic is randomly load balanced across IPs in the backend IPs.
   */
  backendAddressPool: SubResource;
  /**
   * @member {string} [provisioningState] Gets the provisioning state of the
   * PublicIP resource. Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   */
  provisioningState?: string;
  /**
   * @member {Protocol1} protocol Protocol - TCP, UDP or All. Possible values
   * include: 'Tcp', 'Udp', 'All'
   */
  protocol: Protocol1;
  /**
   * @member {boolean} [enableTcpReset] Receive bidirectional TCP Reset on TCP
   * flow idle timeout or unexpected connection termination. This element is
   * only used when the protocol is set to TCP.
   */
  enableTcpReset?: boolean;
  /**
   * @member {number} [idleTimeoutInMinutes] The timeout for the TCP idle
   * connection
   */
  idleTimeoutInMinutes?: number;
  /**
   * @member {string} [name] The name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing LoadBalancer.
 * LoadBalancer resource
 *
 * @extends Resource
 */
export interface LoadBalancer extends Resource {
  /**
   * @member {LoadBalancerSku} [sku] The load balancer SKU.
   */
  sku?: LoadBalancerSku;
  /**
   * @member {FrontendIPConfiguration[]} [frontendIPConfigurations] Object
   * representing the frontend IPs to be used for the load balancer
   */
  frontendIPConfigurations?: FrontendIPConfiguration[];
  /**
   * @member {BackendAddressPool[]} [backendAddressPools] Collection of backend
   * address pools used by a load balancer
   */
  backendAddressPools?: BackendAddressPool[];
  /**
   * @member {LoadBalancingRule[]} [loadBalancingRules] Object collection
   * representing the load balancing rules Gets the provisioning
   */
  loadBalancingRules?: LoadBalancingRule[];
  /**
   * @member {Probe[]} [probes] Collection of probe objects used in the load
   * balancer
   */
  probes?: Probe[];
  /**
   * @member {InboundNatRule[]} [inboundNatRules] Collection of inbound NAT
   * Rules used by a load balancer. Defining inbound NAT rules on your load
   * balancer is mutually exclusive with defining an inbound NAT pool. Inbound
   * NAT pools are referenced from virtual machine scale sets. NICs that are
   * associated with individual virtual machines cannot reference an Inbound
   * NAT pool. They have to reference individual inbound NAT rules.
   */
  inboundNatRules?: InboundNatRule[];
  /**
   * @member {InboundNatPool[]} [inboundNatPools] Defines an external port
   * range for inbound NAT to a single backend port on NICs associated with a
   * load balancer. Inbound NAT rules are created automatically for each NIC
   * associated with the Load Balancer using an external port from this range.
   * Defining an Inbound NAT pool on your Load Balancer is mutually exclusive
   * with defining inbound Nat rules. Inbound NAT pools are referenced from
   * virtual machine scale sets. NICs that are associated with individual
   * virtual machines cannot reference an inbound NAT pool. They have to
   * reference individual inbound NAT rules.
   */
  inboundNatPools?: InboundNatPool[];
  /**
   * @member {OutboundRule[]} [outboundRules] The outbound rules.
   */
  outboundRules?: OutboundRule[];
  /**
   * @member {string} [resourceGuid] The resource GUID property of the load
   * balancer resource.
   */
  resourceGuid?: string;
  /**
   * @member {string} [provisioningState] Gets the provisioning state of the
   * PublicIP resource. Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   */
  provisioningState?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing ErrorDetails.
 */
export interface ErrorDetails {
  /**
   * @member {string} [code]
   */
  code?: string;
  /**
   * @member {string} [target]
   */
  target?: string;
  /**
   * @member {string} [message]
   */
  message?: string;
}

/**
 * @interface
 * An interface representing ErrorModel.
 */
export interface ErrorModel {
  /**
   * @member {string} [code]
   */
  code?: string;
  /**
   * @member {string} [message]
   */
  message?: string;
  /**
   * @member {string} [target]
   */
  target?: string;
  /**
   * @member {ErrorDetails[]} [details]
   */
  details?: ErrorDetails[];
  /**
   * @member {string} [innerError]
   */
  innerError?: string;
}

/**
 * @interface
 * An interface representing AzureAsyncOperationResult.
 * The response body contains the status of the specified asynchronous
 * operation, indicating whether it has succeeded, is in progress, or has
 * failed. Note that this status is distinct from the HTTP status code returned
 * for the Get Operation Status operation itself. If the asynchronous operation
 * succeeded, the response body includes the HTTP status code for the
 * successful request. If the asynchronous operation failed, the response body
 * includes the HTTP status code for the failed request and error information
 * regarding the failure.
 *
 */
export interface AzureAsyncOperationResult {
  /**
   * @member {NetworkOperationStatus} [status] Status of the Azure async
   * operation. Possible values are: 'InProgress', 'Succeeded', and 'Failed'.
   * Possible values include: 'InProgress', 'Succeeded', 'Failed'
   */
  status?: NetworkOperationStatus;
  /**
   * @member {ErrorModel} [error]
   */
  error?: ErrorModel;
}

/**
 * @interface
 * An interface representing EffectiveNetworkSecurityGroupAssociation.
 * The effective network security group association.
 *
 */
export interface EffectiveNetworkSecurityGroupAssociation {
  /**
   * @member {SubResource} [subnet] The ID of the subnet if assigned.
   */
  subnet?: SubResource;
  /**
   * @member {SubResource} [networkInterface] The ID of the network interface
   * if assigned.
   */
  networkInterface?: SubResource;
}

/**
 * @interface
 * An interface representing EffectiveNetworkSecurityRule.
 * Effective network security rules.
 *
 */
export interface EffectiveNetworkSecurityRule {
  /**
   * @member {string} [name] The name of the security rule specified by the
   * user (if created by the user).
   */
  name?: string;
  /**
   * @member {EffectiveSecurityRuleProtocol} [protocol] The network protocol
   * this rule applies to. Possible values are: 'Tcp', 'Udp', and 'All'.
   * Possible values include: 'Tcp', 'Udp', 'All'
   */
  protocol?: EffectiveSecurityRuleProtocol;
  /**
   * @member {string} [sourcePortRange] The source port or range.
   */
  sourcePortRange?: string;
  /**
   * @member {string} [destinationPortRange] The destination port or range.
   */
  destinationPortRange?: string;
  /**
   * @member {string[]} [sourcePortRanges] The source port ranges. Expected
   * values include a single integer between 0 and 65535, a range using '-' as
   * seperator (e.g. 100-400), or an asterix (*)
   */
  sourcePortRanges?: string[];
  /**
   * @member {string[]} [destinationPortRanges] The destination port ranges.
   * Expected values include a single integer between 0 and 65535, a range
   * using '-' as seperator (e.g. 100-400), or an asterix (*)
   */
  destinationPortRanges?: string[];
  /**
   * @member {string} [sourceAddressPrefix] The source address prefix.
   */
  sourceAddressPrefix?: string;
  /**
   * @member {string} [destinationAddressPrefix] The destination address
   * prefix.
   */
  destinationAddressPrefix?: string;
  /**
   * @member {string[]} [sourceAddressPrefixes] The source address prefixes.
   * Expected values include CIDR IP ranges, Default Tags (VirtualNetwork,
   * AureLoadBalancer, Internet), System Tags, and the asterix (*).
   */
  sourceAddressPrefixes?: string[];
  /**
   * @member {string[]} [destinationAddressPrefixes] The destination address
   * prefixes. Expected values include CIDR IP ranges, Default Tags
   * (VirtualNetwork, AureLoadBalancer, Internet), System Tags, and the asterix
   * (*).
   */
  destinationAddressPrefixes?: string[];
  /**
   * @member {string[]} [expandedSourceAddressPrefix] The expanded source
   * address prefix.
   */
  expandedSourceAddressPrefix?: string[];
  /**
   * @member {string[]} [expandedDestinationAddressPrefix] Expanded destination
   * address prefix.
   */
  expandedDestinationAddressPrefix?: string[];
  /**
   * @member {SecurityRuleAccess} [access] Whether network traffic is allowed
   * or denied. Possible values are: 'Allow' and 'Deny'. Possible values
   * include: 'Allow', 'Deny'
   */
  access?: SecurityRuleAccess;
  /**
   * @member {number} [priority] The priority of the rule.
   */
  priority?: number;
  /**
   * @member {SecurityRuleDirection} [direction] The direction of the rule.
   * Possible values are: 'Inbound and Outbound'. Possible values include:
   * 'Inbound', 'Outbound'
   */
  direction?: SecurityRuleDirection;
}

/**
 * @interface
 * An interface representing EffectiveNetworkSecurityGroup.
 * Effective network security group.
 *
 */
export interface EffectiveNetworkSecurityGroup {
  /**
   * @member {SubResource} [networkSecurityGroup] The ID of network security
   * group that is applied.
   */
  networkSecurityGroup?: SubResource;
  /**
   * @member {EffectiveNetworkSecurityGroupAssociation} [association]
   * Associated resources.
   */
  association?: EffectiveNetworkSecurityGroupAssociation;
  /**
   * @member {EffectiveNetworkSecurityRule[]} [effectiveSecurityRules] A
   * collection of effective security rules.
   */
  effectiveSecurityRules?: EffectiveNetworkSecurityRule[];
  /**
   * @member {{ [propertyName: string]: string[] }} [tagMap] Mapping of tags to
   * list of IP Addresses included within the tag.
   */
  tagMap?: { [propertyName: string]: string[] };
}

/**
 * @interface
 * An interface representing EffectiveNetworkSecurityGroupListResult.
 * Response for list effective network security groups API service call.
 *
 */
export interface EffectiveNetworkSecurityGroupListResult {
  /**
   * @member {EffectiveNetworkSecurityGroup[]} [value] A list of effective
   * network security groups.
   */
  value?: EffectiveNetworkSecurityGroup[];
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing EffectiveRoute.
 * Effective Route
 *
 */
export interface EffectiveRoute {
  /**
   * @member {string} [name] The name of the user defined route. This is
   * optional.
   */
  name?: string;
  /**
   * @member {EffectiveRouteSource} [source] Who created the route. Possible
   * values are: 'Unknown', 'User', 'VirtualNetworkGateway', and 'Default'.
   * Possible values include: 'Unknown', 'User', 'VirtualNetworkGateway',
   * 'Default'
   */
  source?: EffectiveRouteSource;
  /**
   * @member {EffectiveRouteState} [state] The value of effective route.
   * Possible values are: 'Active' and 'Invalid'. Possible values include:
   * 'Active', 'Invalid'
   */
  state?: EffectiveRouteState;
  /**
   * @member {string[]} [addressPrefix] The address prefixes of the effective
   * routes in CIDR notation.
   */
  addressPrefix?: string[];
  /**
   * @member {string[]} [nextHopIpAddress] The IP address of the next hop of
   * the effective route.
   */
  nextHopIpAddress?: string[];
  /**
   * @member {RouteNextHopType} [nextHopType] The type of Azure hop the packet
   * should be sent to. Possible values are: 'VirtualNetworkGateway',
   * 'VnetLocal', 'Internet', 'VirtualAppliance', and 'None'. Possible values
   * include: 'VirtualNetworkGateway', 'VnetLocal', 'Internet',
   * 'VirtualAppliance', 'None'
   */
  nextHopType?: RouteNextHopType;
}

/**
 * @interface
 * An interface representing EffectiveRouteListResult.
 * Response for list effective route API service call.
 *
 */
export interface EffectiveRouteListResult {
  /**
   * @member {EffectiveRoute[]} [value] A list of effective routes.
   */
  value?: EffectiveRoute[];
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing ContainerNetworkInterfaceConfiguration.
 * Container network interface configruation child resource.
 *
 * @extends SubResource
 */
export interface ContainerNetworkInterfaceConfiguration extends SubResource {
  /**
   * @member {IPConfigurationProfile[]} [ipConfigurations] A list of ip
   * configurations of the container network interface configuration.
   */
  ipConfigurations?: IPConfigurationProfile[];
  /**
   * @member {ContainerNetworkInterface[]} [containerNetworkInterfaces] A list
   * of container network interfaces created from this container network
   * interface configuration.
   */
  containerNetworkInterfaces?: ContainerNetworkInterface[];
  /**
   * @member {string} [provisioningState] The provisioning state of the
   * resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [name] The name of the resource. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * @member {string} [type] Sub Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing Container.
 * Reference to container resource in remote resource provider.
 *
 * @extends SubResource
 */
export interface Container extends SubResource {
}

/**
 * @interface
 * An interface representing ContainerNetworkInterfaceIpConfiguration.
 * The ip configuration for a container network interface.
 *
 */
export interface ContainerNetworkInterfaceIpConfiguration {
  /**
   * @member {string} [provisioningState] The provisioning state of the
   * resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [name] The name of the resource. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * @member {string} [type] Sub Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing ContainerNetworkInterface.
 * Container network interface child resource.
 *
 * @extends SubResource
 */
export interface ContainerNetworkInterface extends SubResource {
  /**
   * @member {ContainerNetworkInterfaceConfiguration}
   * [containerNetworkInterfaceConfiguration] Container network interface
   * configuration from which this container network interface is created.
   */
  containerNetworkInterfaceConfiguration?: ContainerNetworkInterfaceConfiguration;
  /**
   * @member {Container} [container] Reference to the conatinaer to which this
   * container network interface is attached.
   */
  container?: Container;
  /**
   * @member {ContainerNetworkInterfaceIpConfiguration[]} [ipConfigurations]
   * Reference to the ip configuration on this container nic.
   */
  ipConfigurations?: ContainerNetworkInterfaceIpConfiguration[];
  /**
   * @member {string} [provisioningState] The provisioning state of the
   * resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [name] The name of the resource. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * @member {string} [type] Sub Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing NetworkProfile.
 * Network profile resource.
 *
 * @extends Resource
 */
export interface NetworkProfile extends Resource {
  /**
   * @member {ContainerNetworkInterface[]} [containerNetworkInterfaces] List of
   * child container network interfaces.
   */
  containerNetworkInterfaces?: ContainerNetworkInterface[];
  /**
   * @member {ContainerNetworkInterfaceConfiguration[]}
   * [containerNetworkInterfaceConfigurations] List of chid container network
   * interface configurations.
   */
  containerNetworkInterfaceConfigurations?: ContainerNetworkInterfaceConfiguration[];
  /**
   * @member {string} [resourceGuid] The resource GUID property of the network
   * interface resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly resourceGuid?: string;
  /**
   * @member {string} [provisioningState] The provisioning state of the
   * resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing ErrorResponse.
 * The error object.
 *
 */
export interface ErrorResponse {
  /**
   * @member {ErrorDetails} [error] Error.
   */
  error?: ErrorDetails;
}

/**
 * @interface
 * An interface representing NetworkWatcher.
 * Network watcher in a resource group.
 *
 * @extends Resource
 */
export interface NetworkWatcher extends Resource {
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
  /**
   * @member {ProvisioningState} [provisioningState] The provisioning state of
   * the resource. Possible values include: 'Succeeded', 'Updating',
   * 'Deleting', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: ProvisioningState;
}

/**
 * @interface
 * An interface representing TopologyParameters.
 * Parameters that define the representation of topology.
 *
 */
export interface TopologyParameters {
  /**
   * @member {string} [targetResourceGroupName] The name of the target resource
   * group to perform topology on.
   */
  targetResourceGroupName?: string;
  /**
   * @member {SubResource} [targetVirtualNetwork] The reference of the Virtual
   * Network resource.
   */
  targetVirtualNetwork?: SubResource;
  /**
   * @member {SubResource} [targetSubnet] The reference of the Subnet resource.
   */
  targetSubnet?: SubResource;
}

/**
 * @interface
 * An interface representing TopologyAssociation.
 * Resources that have an association with the parent resource.
 *
 */
export interface TopologyAssociation {
  /**
   * @member {string} [name] The name of the resource that is associated with
   * the parent resource.
   */
  name?: string;
  /**
   * @member {string} [resourceId] The ID of the resource that is associated
   * with the parent resource.
   */
  resourceId?: string;
  /**
   * @member {AssociationType} [associationType] The association type of the
   * child resource to the parent resource. Possible values include:
   * 'Associated', 'Contains'
   */
  associationType?: AssociationType;
}

/**
 * @interface
 * An interface representing TopologyResource.
 * The network resource topology information for the given resource group.
 *
 */
export interface TopologyResource {
  /**
   * @member {string} [name] Name of the resource.
   */
  name?: string;
  /**
   * @member {string} [id] ID of the resource.
   */
  id?: string;
  /**
   * @member {string} [location] Resource location.
   */
  location?: string;
  /**
   * @member {TopologyAssociation[]} [associations] Holds the associations the
   * resource has with other resources in the resource group.
   */
  associations?: TopologyAssociation[];
}

/**
 * @interface
 * An interface representing Topology.
 * Topology of the specified resource group.
 *
 */
export interface Topology {
  /**
   * @member {string} [id] GUID representing the operation id.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {Date} [createdDateTime] The datetime when the topology was
   * initially created for the resource group.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly createdDateTime?: Date;
  /**
   * @member {Date} [lastModified] The datetime when the topology was last
   * modified.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly lastModified?: Date;
  /**
   * @member {TopologyResource[]} [resources]
   */
  resources?: TopologyResource[];
}

/**
 * @interface
 * An interface representing VerificationIPFlowParameters.
 * Parameters that define the IP flow to be verified.
 *
 */
export interface VerificationIPFlowParameters {
  /**
   * @member {string} targetResourceId The ID of the target resource to perform
   * next-hop on.
   */
  targetResourceId: string;
  /**
   * @member {Direction} direction The direction of the packet represented as a
   * 5-tuple. Possible values include: 'Inbound', 'Outbound'
   */
  direction: Direction;
  /**
   * @member {IpFlowProtocol} protocol Protocol to be verified on. Possible
   * values include: 'TCP', 'UDP'
   */
  protocol: IpFlowProtocol;
  /**
   * @member {string} localPort The local port. Acceptable values are a single
   * integer in the range (0-65535). Support for * for the source port, which
   * depends on the direction.
   */
  localPort: string;
  /**
   * @member {string} remotePort The remote port. Acceptable values are a
   * single integer in the range (0-65535). Support for * for the source port,
   * which depends on the direction.
   */
  remotePort: string;
  /**
   * @member {string} localIPAddress The local IP address. Acceptable values
   * are valid IPv4 addresses.
   */
  localIPAddress: string;
  /**
   * @member {string} remoteIPAddress The remote IP address. Acceptable values
   * are valid IPv4 addresses.
   */
  remoteIPAddress: string;
  /**
   * @member {string} [targetNicResourceId] The NIC ID. (If VM has multiple
   * NICs and IP forwarding is enabled on any of them, then this parameter must
   * be specified. Otherwise optional).
   */
  targetNicResourceId?: string;
}

/**
 * @interface
 * An interface representing VerificationIPFlowResult.
 * Results of IP flow verification on the target resource.
 *
 */
export interface VerificationIPFlowResult {
  /**
   * @member {Access} [access] Indicates whether the traffic is allowed or
   * denied. Possible values include: 'Allow', 'Deny'
   */
  access?: Access;
  /**
   * @member {string} [ruleName] Name of the rule. If input is not matched
   * against any security rule, it is not displayed.
   */
  ruleName?: string;
}

/**
 * @interface
 * An interface representing NextHopParameters.
 * Parameters that define the source and destination endpoint.
 *
 */
export interface NextHopParameters {
  /**
   * @member {string} targetResourceId The resource identifier of the target
   * resource against which the action is to be performed.
   */
  targetResourceId: string;
  /**
   * @member {string} sourceIPAddress The source IP address.
   */
  sourceIPAddress: string;
  /**
   * @member {string} destinationIPAddress The destination IP address.
   */
  destinationIPAddress: string;
  /**
   * @member {string} [targetNicResourceId] The NIC ID. (If VM has multiple
   * NICs and IP forwarding is enabled on any of the nics, then this parameter
   * must be specified. Otherwise optional).
   */
  targetNicResourceId?: string;
}

/**
 * @interface
 * An interface representing NextHopResult.
 * The information about next hop from the specified VM.
 *
 */
export interface NextHopResult {
  /**
   * @member {NextHopType} [nextHopType] Next hop type. Possible values
   * include: 'Internet', 'VirtualAppliance', 'VirtualNetworkGateway',
   * 'VnetLocal', 'HyperNetGateway', 'None'
   */
  nextHopType?: NextHopType;
  /**
   * @member {string} [nextHopIpAddress] Next hop IP Address
   */
  nextHopIpAddress?: string;
  /**
   * @member {string} [routeTableId] The resource identifier for the route
   * table associated with the route being returned. If the route being
   * returned does not correspond to any user created routes then this field
   * will be the string 'System Route'.
   */
  routeTableId?: string;
}

/**
 * @interface
 * An interface representing SecurityGroupViewParameters.
 * Parameters that define the VM to check security groups for.
 *
 */
export interface SecurityGroupViewParameters {
  /**
   * @member {string} targetResourceId ID of the target VM.
   */
  targetResourceId: string;
}

/**
 * @interface
 * An interface representing NetworkInterfaceAssociation.
 * Network interface and its custom security rules.
 *
 */
export interface NetworkInterfaceAssociation {
  /**
   * @member {string} [id] Network interface ID.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {SecurityRule[]} [securityRules] Collection of custom security
   * rules.
   */
  securityRules?: SecurityRule[];
}

/**
 * @interface
 * An interface representing SubnetAssociation.
 * Network interface and its custom security rules.
 *
 */
export interface SubnetAssociation {
  /**
   * @member {string} [id] Subnet ID.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {SecurityRule[]} [securityRules] Collection of custom security
   * rules.
   */
  securityRules?: SecurityRule[];
}

/**
 * @interface
 * An interface representing SecurityRuleAssociations.
 * All security rules associated with the network interface.
 *
 */
export interface SecurityRuleAssociations {
  /**
   * @member {NetworkInterfaceAssociation} [networkInterfaceAssociation]
   */
  networkInterfaceAssociation?: NetworkInterfaceAssociation;
  /**
   * @member {SubnetAssociation} [subnetAssociation]
   */
  subnetAssociation?: SubnetAssociation;
  /**
   * @member {SecurityRule[]} [defaultSecurityRules] Collection of default
   * security rules of the network security group.
   */
  defaultSecurityRules?: SecurityRule[];
  /**
   * @member {EffectiveNetworkSecurityRule[]} [effectiveSecurityRules]
   * Collection of effective security rules.
   */
  effectiveSecurityRules?: EffectiveNetworkSecurityRule[];
}

/**
 * @interface
 * An interface representing SecurityGroupNetworkInterface.
 * Network interface and all its associated security rules.
 *
 */
export interface SecurityGroupNetworkInterface {
  /**
   * @member {string} [id] ID of the network interface.
   */
  id?: string;
  /**
   * @member {SecurityRuleAssociations} [securityRuleAssociations]
   */
  securityRuleAssociations?: SecurityRuleAssociations;
}

/**
 * @interface
 * An interface representing SecurityGroupViewResult.
 * The information about security rules applied to the specified VM.
 *
 */
export interface SecurityGroupViewResult {
  /**
   * @member {SecurityGroupNetworkInterface[]} [networkInterfaces] List of
   * network interfaces on the specified VM.
   */
  networkInterfaces?: SecurityGroupNetworkInterface[];
}

/**
 * @interface
 * An interface representing PacketCaptureStorageLocation.
 * Describes the storage location for a packet capture session.
 *
 */
export interface PacketCaptureStorageLocation {
  /**
   * @member {string} [storageId] The ID of the storage account to save the
   * packet capture session. Required if no local file path is provided.
   */
  storageId?: string;
  /**
   * @member {string} [storagePath] The URI of the storage path to save the
   * packet capture. Must be a well-formed URI describing the location to save
   * the packet capture.
   */
  storagePath?: string;
  /**
   * @member {string} [filePath] A valid local path on the targeting VM. Must
   * include the name of the capture file (*.cap). For linux virtual machine it
   * must start with /var/captures. Required if no storage ID is provided,
   * otherwise optional.
   */
  filePath?: string;
}

/**
 * @interface
 * An interface representing PacketCaptureFilter.
 * Filter that is applied to packet capture request. Multiple filters can be
 * applied.
 *
 */
export interface PacketCaptureFilter {
  /**
   * @member {PcProtocol} [protocol] Protocol to be filtered on. Possible
   * values include: 'TCP', 'UDP', 'Any'. Default value: 'Any' .
   */
  protocol?: PcProtocol;
  /**
   * @member {string} [localIPAddress] Local IP Address to be filtered on.
   * Notation: "127.0.0.1" for single address entry. "127.0.0.1-127.0.0.255"
   * for range. "127.0.0.1;127.0.0.5"? for multiple entries. Multiple ranges
   * not currently supported. Mixing ranges with multiple entries not currently
   * supported. Default = null.
   */
  localIPAddress?: string;
  /**
   * @member {string} [remoteIPAddress] Local IP Address to be filtered on.
   * Notation: "127.0.0.1" for single address entry. "127.0.0.1-127.0.0.255"
   * for range. "127.0.0.1;127.0.0.5;" for multiple entries. Multiple ranges
   * not currently supported. Mixing ranges with multiple entries not currently
   * supported. Default = null.
   */
  remoteIPAddress?: string;
  /**
   * @member {string} [localPort] Local port to be filtered on. Notation: "80"
   * for single port entry."80-85" for range. "80;443;" for multiple entries.
   * Multiple ranges not currently supported. Mixing ranges with multiple
   * entries not currently supported. Default = null.
   */
  localPort?: string;
  /**
   * @member {string} [remotePort] Remote port to be filtered on. Notation:
   * "80" for single port entry."80-85" for range. "80;443;" for multiple
   * entries. Multiple ranges not currently supported. Mixing ranges with
   * multiple entries not currently supported. Default = null.
   */
  remotePort?: string;
}

/**
 * @interface
 * An interface representing PacketCaptureParameters.
 * Parameters that define the create packet capture operation.
 *
 */
export interface PacketCaptureParameters {
  /**
   * @member {string} target The ID of the targeted resource, only VM is
   * currently supported.
   */
  target: string;
  /**
   * @member {number} [bytesToCapturePerPacket] Number of bytes captured per
   * packet, the remaining bytes are truncated. Default value: 0 .
   */
  bytesToCapturePerPacket?: number;
  /**
   * @member {number} [totalBytesPerSession] Maximum size of the capture
   * output. Default value: 1073741824 .
   */
  totalBytesPerSession?: number;
  /**
   * @member {number} [timeLimitInSeconds] Maximum duration of the capture
   * session in seconds. Default value: 18000 .
   */
  timeLimitInSeconds?: number;
  /**
   * @member {PacketCaptureStorageLocation} storageLocation
   */
  storageLocation: PacketCaptureStorageLocation;
  /**
   * @member {PacketCaptureFilter[]} [filters]
   */
  filters?: PacketCaptureFilter[];
}

/**
 * @interface
 * An interface representing PacketCapture.
 * Parameters that define the create packet capture operation.
 *
 */
export interface PacketCapture {
  /**
   * @member {string} target The ID of the targeted resource, only VM is
   * currently supported.
   */
  target: string;
  /**
   * @member {number} [bytesToCapturePerPacket] Number of bytes captured per
   * packet, the remaining bytes are truncated. Default value: 0 .
   */
  bytesToCapturePerPacket?: number;
  /**
   * @member {number} [totalBytesPerSession] Maximum size of the capture
   * output. Default value: 1073741824 .
   */
  totalBytesPerSession?: number;
  /**
   * @member {number} [timeLimitInSeconds] Maximum duration of the capture
   * session in seconds. Default value: 18000 .
   */
  timeLimitInSeconds?: number;
  /**
   * @member {PacketCaptureStorageLocation} storageLocation
   */
  storageLocation: PacketCaptureStorageLocation;
  /**
   * @member {PacketCaptureFilter[]} [filters]
   */
  filters?: PacketCaptureFilter[];
}

/**
 * @interface
 * An interface representing PacketCaptureResult.
 * Information about packet capture session.
 *
 */
export interface PacketCaptureResult {
  /**
   * @member {string} [name] Name of the packet capture session.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [id] ID of the packet capture operation.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [etag] Default value: 'A unique read-only string that
   * changes whenever the resource is updated.' .
   */
  etag?: string;
  /**
   * @member {string} target The ID of the targeted resource, only VM is
   * currently supported.
   */
  target: string;
  /**
   * @member {number} [bytesToCapturePerPacket] Number of bytes captured per
   * packet, the remaining bytes are truncated. Default value: 0 .
   */
  bytesToCapturePerPacket?: number;
  /**
   * @member {number} [totalBytesPerSession] Maximum size of the capture
   * output. Default value: 1073741824 .
   */
  totalBytesPerSession?: number;
  /**
   * @member {number} [timeLimitInSeconds] Maximum duration of the capture
   * session in seconds. Default value: 18000 .
   */
  timeLimitInSeconds?: number;
  /**
   * @member {PacketCaptureStorageLocation} storageLocation
   */
  storageLocation: PacketCaptureStorageLocation;
  /**
   * @member {PacketCaptureFilter[]} [filters]
   */
  filters?: PacketCaptureFilter[];
  /**
   * @member {ProvisioningState} [provisioningState] The provisioning state of
   * the packet capture session. Possible values include: 'Succeeded',
   * 'Updating', 'Deleting', 'Failed'
   */
  provisioningState?: ProvisioningState;
}

/**
 * @interface
 * An interface representing PacketCaptureQueryStatusResult.
 * Status of packet capture session.
 *
 */
export interface PacketCaptureQueryStatusResult {
  /**
   * @member {string} [name] The name of the packet capture resource.
   */
  name?: string;
  /**
   * @member {string} [id] The ID of the packet capture resource.
   */
  id?: string;
  /**
   * @member {Date} [captureStartTime] The start time of the packet capture
   * session.
   */
  captureStartTime?: Date;
  /**
   * @member {PcStatus} [packetCaptureStatus] The status of the packet capture
   * session. Possible values include: 'NotStarted', 'Running', 'Stopped',
   * 'Error', 'Unknown'
   */
  packetCaptureStatus?: PcStatus;
  /**
   * @member {string} [stopReason] The reason the current packet capture
   * session was stopped.
   */
  stopReason?: string;
  /**
   * @member {PcError[]} [packetCaptureError] List of errors of packet capture
   * session.
   */
  packetCaptureError?: PcError[];
}

/**
 * @interface
 * An interface representing TroubleshootingParameters.
 * Parameters that define the resource to troubleshoot.
 *
 */
export interface TroubleshootingParameters {
  /**
   * @member {string} targetResourceId The target resource to troubleshoot.
   */
  targetResourceId: string;
  /**
   * @member {string} storageId The ID for the storage account to save the
   * troubleshoot result.
   */
  storageId: string;
  /**
   * @member {string} storagePath The path to the blob to save the troubleshoot
   * result in.
   */
  storagePath: string;
}

/**
 * @interface
 * An interface representing QueryTroubleshootingParameters.
 * Parameters that define the resource to query the troubleshooting result.
 *
 */
export interface QueryTroubleshootingParameters {
  /**
   * @member {string} targetResourceId The target resource ID to query the
   * troubleshooting result.
   */
  targetResourceId: string;
}

/**
 * @interface
 * An interface representing TroubleshootingRecommendedActions.
 * Recommended actions based on discovered issues.
 *
 */
export interface TroubleshootingRecommendedActions {
  /**
   * @member {string} [actionId] ID of the recommended action.
   */
  actionId?: string;
  /**
   * @member {string} [actionText] Description of recommended actions.
   */
  actionText?: string;
  /**
   * @member {string} [actionUri] The uri linking to a documentation for the
   * recommended troubleshooting actions.
   */
  actionUri?: string;
  /**
   * @member {string} [actionUriText] The information from the URI for the
   * recommended troubleshooting actions.
   */
  actionUriText?: string;
}

/**
 * @interface
 * An interface representing TroubleshootingDetails.
 * Information gained from troubleshooting of specified resource.
 *
 */
export interface TroubleshootingDetails {
  /**
   * @member {string} [id] The id of the get troubleshoot operation.
   */
  id?: string;
  /**
   * @member {string} [reasonType] Reason type of failure.
   */
  reasonType?: string;
  /**
   * @member {string} [summary] A summary of troubleshooting.
   */
  summary?: string;
  /**
   * @member {string} [detail] Details on troubleshooting results.
   */
  detail?: string;
  /**
   * @member {TroubleshootingRecommendedActions[]} [recommendedActions] List of
   * recommended actions.
   */
  recommendedActions?: TroubleshootingRecommendedActions[];
}

/**
 * @interface
 * An interface representing TroubleshootingResult.
 * Troubleshooting information gained from specified resource.
 *
 */
export interface TroubleshootingResult {
  /**
   * @member {Date} [startTime] The start time of the troubleshooting.
   */
  startTime?: Date;
  /**
   * @member {Date} [endTime] The end time of the troubleshooting.
   */
  endTime?: Date;
  /**
   * @member {string} [code] The result code of the troubleshooting.
   */
  code?: string;
  /**
   * @member {TroubleshootingDetails[]} [results] Information from
   * troubleshooting.
   */
  results?: TroubleshootingDetails[];
}

/**
 * @interface
 * An interface representing RetentionPolicyParameters.
 * Parameters that define the retention policy for flow log.
 *
 */
export interface RetentionPolicyParameters {
  /**
   * @member {number} [days] Number of days to retain flow log records. Default
   * value: 0 .
   */
  days?: number;
  /**
   * @member {boolean} [enabled] Flag to enable/disable retention. Default
   * value: false .
   */
  enabled?: boolean;
}

/**
 * @interface
 * An interface representing FlowLogStatusParameters.
 * Parameters that define a resource to query flow log and traffic analytics
 * (optional) status.
 *
 */
export interface FlowLogStatusParameters {
  /**
   * @member {string} targetResourceId The target resource where getting the
   * flow log and traffic analytics (optional) status.
   */
  targetResourceId: string;
}

/**
 * @interface
 * An interface representing TrafficAnalyticsConfigurationProperties.
 * Parameters that define the configuration of traffic analytics.
 *
 */
export interface TrafficAnalyticsConfigurationProperties {
  /**
   * @member {boolean} enabled Flag to enable/disable traffic analytics.
   */
  enabled: boolean;
  /**
   * @member {string} workspaceId The resource guid of the attached workspace
   */
  workspaceId: string;
  /**
   * @member {string} workspaceRegion The location of the attached workspace
   */
  workspaceRegion: string;
  /**
   * @member {string} workspaceResourceId Resource Id of the attached workspace
   */
  workspaceResourceId: string;
}

/**
 * @interface
 * An interface representing TrafficAnalyticsProperties.
 * Parameters that define the configuration of traffic analytics.
 *
 */
export interface TrafficAnalyticsProperties {
  /**
   * @member {TrafficAnalyticsConfigurationProperties}
   * networkWatcherFlowAnalyticsConfiguration
   */
  networkWatcherFlowAnalyticsConfiguration: TrafficAnalyticsConfigurationProperties;
}

/**
 * @interface
 * An interface representing FlowLogInformation.
 * Information on the configuration of flow log and traffic analytics
 * (optional) .
 *
 */
export interface FlowLogInformation {
  /**
   * @member {string} targetResourceId The ID of the resource to configure for
   * flow log and traffic analytics (optional) .
   */
  targetResourceId: string;
  /**
   * @member {string} storageId ID of the storage account which is used to
   * store the flow log.
   */
  storageId: string;
  /**
   * @member {boolean} enabled Flag to enable/disable flow logging.
   */
  enabled: boolean;
  /**
   * @member {RetentionPolicyParameters} [retentionPolicy]
   */
  retentionPolicy?: RetentionPolicyParameters;
  /**
   * @member {TrafficAnalyticsProperties} [flowAnalyticsConfiguration]
   */
  flowAnalyticsConfiguration?: TrafficAnalyticsProperties;
}

/**
 * @interface
 * An interface representing ConnectivitySource.
 * Parameters that define the source of the connection.
 *
 */
export interface ConnectivitySource {
  /**
   * @member {string} resourceId The ID of the resource from which a
   * connectivity check will be initiated.
   */
  resourceId: string;
  /**
   * @member {number} [port] The source port from which a connectivity check
   * will be performed.
   */
  port?: number;
}

/**
 * @interface
 * An interface representing ConnectivityDestination.
 * Parameters that define destination of connection.
 *
 */
export interface ConnectivityDestination {
  /**
   * @member {string} [resourceId] The ID of the resource to which a connection
   * attempt will be made.
   */
  resourceId?: string;
  /**
   * @member {string} [address] The IP address or URI the resource to which a
   * connection attempt will be made.
   */
  address?: string;
  /**
   * @member {number} [port] Port on which check connectivity will be
   * performed.
   */
  port?: number;
}

/**
 * @interface
 * An interface representing HTTPHeader.
 * Describes the HTTP header.
 *
 */
export interface HTTPHeader {
  /**
   * @member {string} [name] The name in HTTP header.
   */
  name?: string;
  /**
   * @member {string} [value] The value in HTTP header.
   */
  value?: string;
}

/**
 * @interface
 * An interface representing HTTPConfiguration.
 * HTTP configuration of the connectivity check.
 *
 */
export interface HTTPConfiguration {
  /**
   * @member {HTTPMethod} [method] HTTP method. Possible values include: 'Get'
   */
  method?: HTTPMethod;
  /**
   * @member {HTTPHeader[]} [headers] List of HTTP headers.
   */
  headers?: HTTPHeader[];
  /**
   * @member {number[]} [validStatusCodes] Valid status codes.
   */
  validStatusCodes?: number[];
}

/**
 * @interface
 * An interface representing ProtocolConfiguration.
 * Configuration of the protocol.
 *
 */
export interface ProtocolConfiguration {
  /**
   * @member {HTTPConfiguration} [hTTPConfiguration]
   */
  hTTPConfiguration?: HTTPConfiguration;
}

/**
 * @interface
 * An interface representing ConnectivityParameters.
 * Parameters that determine how the connectivity check will be performed.
 *
 */
export interface ConnectivityParameters {
  /**
   * @member {ConnectivitySource} source
   */
  source: ConnectivitySource;
  /**
   * @member {ConnectivityDestination} destination
   */
  destination: ConnectivityDestination;
  /**
   * @member {Protocol} [protocol] Network protocol. Possible values include:
   * 'Tcp', 'Http', 'Https', 'Icmp'
   */
  protocol?: Protocol;
  /**
   * @member {ProtocolConfiguration} [protocolConfiguration]
   */
  protocolConfiguration?: ProtocolConfiguration;
}

/**
 * @interface
 * An interface representing ConnectivityIssue.
 * Information about an issue encountered in the process of checking for
 * connectivity.
 *
 */
export interface ConnectivityIssue {
  /**
   * @member {Origin} [origin] The origin of the issue. Possible values
   * include: 'Local', 'Inbound', 'Outbound'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly origin?: Origin;
  /**
   * @member {Severity} [severity] The severity of the issue. Possible values
   * include: 'Error', 'Warning'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly severity?: Severity;
  /**
   * @member {IssueType} [type] The type of issue. Possible values include:
   * 'Unknown', 'AgentStopped', 'GuestFirewall', 'DnsResolution', 'SocketBind',
   * 'NetworkSecurityRule', 'UserDefinedRoute', 'PortThrottled', 'Platform'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: IssueType;
  /**
   * @member {{ [propertyName: string]: string }[]} [context] Provides
   * additional context on the issue.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly context?: { [propertyName: string]: string }[];
}

/**
 * @interface
 * An interface representing ConnectivityHop.
 * Information about a hop between the source and the destination.
 *
 */
export interface ConnectivityHop {
  /**
   * @member {string} [type] The type of the hop.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} [id] The ID of the hop.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [address] The IP address of the hop.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly address?: string;
  /**
   * @member {string} [resourceId] The ID of the resource corresponding to this
   * hop.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly resourceId?: string;
  /**
   * @member {string[]} [nextHopIds] List of next hop identifiers.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextHopIds?: string[];
  /**
   * @member {ConnectivityIssue[]} [issues] List of issues.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly issues?: ConnectivityIssue[];
}

/**
 * @interface
 * An interface representing ConnectivityInformation.
 * Information on the connectivity status.
 *
 */
export interface ConnectivityInformation {
  /**
   * @member {ConnectivityHop[]} [hops] List of hops between the source and the
   * destination.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly hops?: ConnectivityHop[];
  /**
   * @member {ConnectionStatus} [connectionStatus] The connection status.
   * Possible values include: 'Unknown', 'Connected', 'Disconnected',
   * 'Degraded'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly connectionStatus?: ConnectionStatus;
  /**
   * @member {number} [avgLatencyInMs] Average latency in milliseconds.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly avgLatencyInMs?: number;
  /**
   * @member {number} [minLatencyInMs] Minimum latency in milliseconds.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly minLatencyInMs?: number;
  /**
   * @member {number} [maxLatencyInMs] Maximum latency in milliseconds.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly maxLatencyInMs?: number;
  /**
   * @member {number} [probesSent] Total number of probes sent.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly probesSent?: number;
  /**
   * @member {number} [probesFailed] Number of failed probes.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly probesFailed?: number;
}

/**
 * @interface
 * An interface representing AzureReachabilityReportLocation.
 * Parameters that define a geographic location.
 *
 */
export interface AzureReachabilityReportLocation {
  /**
   * @member {string} country The name of the country.
   */
  country: string;
  /**
   * @member {string} [state] The name of the state.
   */
  state?: string;
  /**
   * @member {string} [city] The name of the city or town.
   */
  city?: string;
}

/**
 * @interface
 * An interface representing AzureReachabilityReportParameters.
 * Geographic and time constraints for Azure reachability report.
 *
 */
export interface AzureReachabilityReportParameters {
  /**
   * @member {AzureReachabilityReportLocation} providerLocation
   */
  providerLocation: AzureReachabilityReportLocation;
  /**
   * @member {string[]} [providers] List of Internet service providers.
   */
  providers?: string[];
  /**
   * @member {string[]} [azureLocations] Optional Azure regions to scope the
   * query to.
   */
  azureLocations?: string[];
  /**
   * @member {Date} startTime The start time for the Azure reachability report.
   */
  startTime: Date;
  /**
   * @member {Date} endTime The end time for the Azure reachability report.
   */
  endTime: Date;
}

/**
 * @interface
 * An interface representing AzureReachabilityReportLatencyInfo.
 * Details on latency for a time series.
 *
 */
export interface AzureReachabilityReportLatencyInfo {
  /**
   * @member {Date} [timeStamp] The time stamp.
   */
  timeStamp?: Date;
  /**
   * @member {number} [score] The relative latency score between 1 and 100,
   * higher values indicating a faster connection.
   */
  score?: number;
}

/**
 * @interface
 * An interface representing AzureReachabilityReportItem.
 * Azure reachability report details for a given provider location.
 *
 */
export interface AzureReachabilityReportItem {
  /**
   * @member {string} [provider] The Internet service provider.
   */
  provider?: string;
  /**
   * @member {string} [azureLocation] The Azure region.
   */
  azureLocation?: string;
  /**
   * @member {AzureReachabilityReportLatencyInfo[]} [latencies] List of latency
   * details for each of the time series.
   */
  latencies?: AzureReachabilityReportLatencyInfo[];
}

/**
 * @interface
 * An interface representing AzureReachabilityReport.
 * Azure reachability report details.
 *
 */
export interface AzureReachabilityReport {
  /**
   * @member {string} aggregationLevel The aggregation level of Azure
   * reachability report. Can be Country, State or City.
   */
  aggregationLevel: string;
  /**
   * @member {AzureReachabilityReportLocation} providerLocation
   */
  providerLocation: AzureReachabilityReportLocation;
  /**
   * @member {AzureReachabilityReportItem[]} reachabilityReport List of Azure
   * reachability report items.
   */
  reachabilityReport: AzureReachabilityReportItem[];
}

/**
 * @interface
 * An interface representing AvailableProvidersListParameters.
 * Constraints that determine the list of available Internet service providers.
 *
 */
export interface AvailableProvidersListParameters {
  /**
   * @member {string[]} [azureLocations] A list of Azure regions.
   */
  azureLocations?: string[];
  /**
   * @member {string} [country] The country for available providers list.
   */
  country?: string;
  /**
   * @member {string} [state] The state for available providers list.
   */
  state?: string;
  /**
   * @member {string} [city] The city or town for available providers list.
   */
  city?: string;
}

/**
 * @interface
 * An interface representing AvailableProvidersListCity.
 * City or town details.
 *
 */
export interface AvailableProvidersListCity {
  /**
   * @member {string} [cityName] The city or town name.
   */
  cityName?: string;
  /**
   * @member {string[]} [providers] A list of Internet service providers.
   */
  providers?: string[];
}

/**
 * @interface
 * An interface representing AvailableProvidersListState.
 * State details.
 *
 */
export interface AvailableProvidersListState {
  /**
   * @member {string} [stateName] The state name.
   */
  stateName?: string;
  /**
   * @member {string[]} [providers] A list of Internet service providers.
   */
  providers?: string[];
  /**
   * @member {AvailableProvidersListCity[]} [cities] List of available cities
   * or towns in the state.
   */
  cities?: AvailableProvidersListCity[];
}

/**
 * @interface
 * An interface representing AvailableProvidersListCountry.
 * Country details.
 *
 */
export interface AvailableProvidersListCountry {
  /**
   * @member {string} [countryName] The country name.
   */
  countryName?: string;
  /**
   * @member {string[]} [providers] A list of Internet service providers.
   */
  providers?: string[];
  /**
   * @member {AvailableProvidersListState[]} [states] List of available states
   * in the country.
   */
  states?: AvailableProvidersListState[];
}

/**
 * @interface
 * An interface representing AvailableProvidersList.
 * List of available countries with details.
 *
 */
export interface AvailableProvidersList {
  /**
   * @member {AvailableProvidersListCountry[]} countries List of available
   * countries.
   */
  countries: AvailableProvidersListCountry[];
}

/**
 * @interface
 * An interface representing ConnectionMonitorSource.
 * Describes the source of connection monitor.
 *
 */
export interface ConnectionMonitorSource {
  /**
   * @member {string} resourceId The ID of the resource used as the source by
   * connection monitor.
   */
  resourceId: string;
  /**
   * @member {number} [port] The source port used by connection monitor.
   */
  port?: number;
}

/**
 * @interface
 * An interface representing ConnectionMonitorDestination.
 * Describes the destination of connection monitor.
 *
 */
export interface ConnectionMonitorDestination {
  /**
   * @member {string} [resourceId] The ID of the resource used as the
   * destination by connection monitor.
   */
  resourceId?: string;
  /**
   * @member {string} [address] Address of the connection monitor destination
   * (IP or domain name).
   */
  address?: string;
  /**
   * @member {number} [port] The destination port used by connection monitor.
   */
  port?: number;
}

/**
 * @interface
 * An interface representing ConnectionMonitorParameters.
 * Parameters that define the operation to create a connection monitor.
 *
 */
export interface ConnectionMonitorParameters {
  /**
   * @member {ConnectionMonitorSource} source
   */
  source: ConnectionMonitorSource;
  /**
   * @member {ConnectionMonitorDestination} destination
   */
  destination: ConnectionMonitorDestination;
  /**
   * @member {boolean} [autoStart] Determines if the connection monitor will
   * start automatically once created. Default value: true .
   */
  autoStart?: boolean;
  /**
   * @member {number} [monitoringIntervalInSeconds] Monitoring interval in
   * seconds. Default value: 60 .
   */
  monitoringIntervalInSeconds?: number;
}

/**
 * @interface
 * An interface representing ConnectionMonitor.
 * Parameters that define the operation to create a connection monitor.
 *
 */
export interface ConnectionMonitor {
  /**
   * @member {string} [location] Connection monitor location.
   */
  location?: string;
  /**
   * @member {{ [propertyName: string]: string }} [tags] Connection monitor
   * tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * @member {ConnectionMonitorSource} source
   */
  source: ConnectionMonitorSource;
  /**
   * @member {ConnectionMonitorDestination} destination
   */
  destination: ConnectionMonitorDestination;
  /**
   * @member {boolean} [autoStart] Determines if the connection monitor will
   * start automatically once created. Default value: true .
   */
  autoStart?: boolean;
  /**
   * @member {number} [monitoringIntervalInSeconds] Monitoring interval in
   * seconds. Default value: 60 .
   */
  monitoringIntervalInSeconds?: number;
}

/**
 * @interface
 * An interface representing ConnectionMonitorResult.
 * Information about the connection monitor.
 *
 * @extends BaseResource
 */
export interface ConnectionMonitorResult extends BaseResource {
  /**
   * @member {string} [name] Name of the connection monitor.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [id] ID of the connection monitor.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [etag] Default value: 'A unique read-only string that
   * changes whenever the resource is updated.' .
   */
  etag?: string;
  /**
   * @member {string} [type] Connection monitor type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} [location] Connection monitor location.
   */
  location?: string;
  /**
   * @member {{ [propertyName: string]: string }} [tags] Connection monitor
   * tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * @member {ConnectionMonitorSource} source
   */
  source: ConnectionMonitorSource;
  /**
   * @member {ConnectionMonitorDestination} destination
   */
  destination: ConnectionMonitorDestination;
  /**
   * @member {boolean} [autoStart] Determines if the connection monitor will
   * start automatically once created. Default value: true .
   */
  autoStart?: boolean;
  /**
   * @member {number} [monitoringIntervalInSeconds] Monitoring interval in
   * seconds. Default value: 60 .
   */
  monitoringIntervalInSeconds?: number;
  /**
   * @member {ProvisioningState} [provisioningState] The provisioning state of
   * the connection monitor. Possible values include: 'Succeeded', 'Updating',
   * 'Deleting', 'Failed'
   */
  provisioningState?: ProvisioningState;
  /**
   * @member {Date} [startTime] The date and time when the connection monitor
   * was started.
   */
  startTime?: Date;
  /**
   * @member {string} [monitoringStatus] The monitoring status of the
   * connection monitor.
   */
  monitoringStatus?: string;
}

/**
 * @interface
 * An interface representing ConnectionStateSnapshot.
 * Connection state snapshot.
 *
 */
export interface ConnectionStateSnapshot {
  /**
   * @member {ConnectionState} [connectionState] The connection state. Possible
   * values include: 'Reachable', 'Unreachable', 'Unknown'
   */
  connectionState?: ConnectionState;
  /**
   * @member {Date} [startTime] The start time of the connection snapshot.
   */
  startTime?: Date;
  /**
   * @member {Date} [endTime] The end time of the connection snapshot.
   */
  endTime?: Date;
  /**
   * @member {EvaluationState} [evaluationState] Connectivity analysis
   * evaluation state. Possible values include: 'NotStarted', 'InProgress',
   * 'Completed'
   */
  evaluationState?: EvaluationState;
  /**
   * @member {number} [avgLatencyInMs] Average latency in ms.
   */
  avgLatencyInMs?: number;
  /**
   * @member {number} [minLatencyInMs] Minimum latency in ms.
   */
  minLatencyInMs?: number;
  /**
   * @member {number} [maxLatencyInMs] Maximum latency in ms.
   */
  maxLatencyInMs?: number;
  /**
   * @member {number} [probesSent] The number of sent probes.
   */
  probesSent?: number;
  /**
   * @member {number} [probesFailed] The number of failed probes.
   */
  probesFailed?: number;
  /**
   * @member {ConnectivityHop[]} [hops] List of hops between the source and the
   * destination.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly hops?: ConnectivityHop[];
}

/**
 * @interface
 * An interface representing ConnectionMonitorQueryResult.
 * List of connection states snaphots.
 *
 */
export interface ConnectionMonitorQueryResult {
  /**
   * @member {ConnectionMonitorSourceStatus} [sourceStatus] Status of
   * connection monitor source. Possible values include: 'Uknown', 'Active',
   * 'Inactive'
   */
  sourceStatus?: ConnectionMonitorSourceStatus;
  /**
   * @member {ConnectionStateSnapshot[]} [states] Information about connection
   * states.
   */
  states?: ConnectionStateSnapshot[];
}

/**
 * @interface
 * An interface representing NetworkConfigurationDiagnosticProfile.
 * Parameters to compare with network configuration.
 *
 */
export interface NetworkConfigurationDiagnosticProfile {
  /**
   * @member {Direction} direction The direction of the traffic. Accepted
   * values are 'Inbound' and 'Outbound'. Possible values include: 'Inbound',
   * 'Outbound'
   */
  direction: Direction;
  /**
   * @member {string} protocol Protocol to be verified on. Accepted values are
   * '*', TCP, UDP.
   */
  protocol: string;
  /**
   * @member {string} source Traffic source. Accepted values are '*', IP
   * Address/CIDR, Service Tag.
   */
  source: string;
  /**
   * @member {string} destination Traffic destination. Accepted values are:
   * '*', IP Address/CIDR, Service Tag.
   */
  destination: string;
  /**
   * @member {string} destinationPort Traffice destination port. Accepted
   * values are '*', port (for example, 3389) and port range (for example,
   * 80-100).
   */
  destinationPort: string;
}

/**
 * @interface
 * An interface representing NetworkConfigurationDiagnosticParameters.
 * Parameters to get network configuration diagnostic.
 *
 */
export interface NetworkConfigurationDiagnosticParameters {
  /**
   * @member {string} targetResourceId The ID of the target resource to perform
   * network configuration diagnostic. Valid options are VM, NetworkInterface,
   * VMSS/NetworkInterface and Application Gateway.
   */
  targetResourceId: string;
  /**
   * @member {VerbosityLevel} [verbosityLevel] Verbosity level. Accepted values
   * are 'Normal', 'Minimum', 'Full'. Possible values include: 'Normal',
   * 'Minimum', 'Full'
   */
  verbosityLevel?: VerbosityLevel;
  /**
   * @member {NetworkConfigurationDiagnosticProfile[]} profiles List of network
   * configuration diagnostic profiles.
   */
  profiles: NetworkConfigurationDiagnosticProfile[];
}

/**
 * @interface
 * An interface representing MatchedRule.
 * Matched rule.
 *
 */
export interface MatchedRule {
  /**
   * @member {string} [ruleName] Name of the matched network security rule.
   */
  ruleName?: string;
  /**
   * @member {string} [action] The network traffic is allowed or denied.
   * Possible values are 'Allow' and 'Deny'.
   */
  action?: string;
}

/**
 * @interface
 * An interface representing NetworkSecurityRulesEvaluationResult.
 * Network security rules evaluation result.
 *
 */
export interface NetworkSecurityRulesEvaluationResult {
  /**
   * @member {string} [name] Name of the network security rule.
   */
  name?: string;
  /**
   * @member {boolean} [protocolMatched] Value indicating whether protocol is
   * matched.
   */
  protocolMatched?: boolean;
  /**
   * @member {boolean} [sourceMatched] Value indicating whether source is
   * matched.
   */
  sourceMatched?: boolean;
  /**
   * @member {boolean} [sourcePortMatched] Value indicating whether source port
   * is matched.
   */
  sourcePortMatched?: boolean;
  /**
   * @member {boolean} [destinationMatched] Value indicating whether
   * destination is matched.
   */
  destinationMatched?: boolean;
  /**
   * @member {boolean} [destinationPortMatched] Value indicating whether
   * destination port is matched.
   */
  destinationPortMatched?: boolean;
}

/**
 * @interface
 * An interface representing EvaluatedNetworkSecurityGroup.
 * Results of network security group evaluation.
 *
 */
export interface EvaluatedNetworkSecurityGroup {
  /**
   * @member {string} [networkSecurityGroupId] Network security group ID.
   */
  networkSecurityGroupId?: string;
  /**
   * @member {string} [appliedTo] Resource ID of nic or subnet to which network
   * security group is applied.
   */
  appliedTo?: string;
  /**
   * @member {MatchedRule} [matchedRule]
   */
  matchedRule?: MatchedRule;
  /**
   * @member {NetworkSecurityRulesEvaluationResult[]} [rulesEvaluationResult]
   * List of network security rules evaluation results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly rulesEvaluationResult?: NetworkSecurityRulesEvaluationResult[];
}

/**
 * @interface
 * An interface representing NetworkSecurityGroupResult.
 * Network configuration diagnostic result corresponded provided traffic query.
 *
 */
export interface NetworkSecurityGroupResult {
  /**
   * @member {SecurityRuleAccess} [securityRuleAccessResult] The network
   * traffic is allowed or denied. Possible values are 'Allow' and 'Deny'.
   * Possible values include: 'Allow', 'Deny'
   */
  securityRuleAccessResult?: SecurityRuleAccess;
  /**
   * @member {EvaluatedNetworkSecurityGroup[]} [evaluatedNetworkSecurityGroups]
   * List of results network security groups diagnostic.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly evaluatedNetworkSecurityGroups?: EvaluatedNetworkSecurityGroup[];
}

/**
 * @interface
 * An interface representing NetworkConfigurationDiagnosticResult.
 * Network configuration diagnostic result corresponded to provided traffic
 * query.
 *
 */
export interface NetworkConfigurationDiagnosticResult {
  /**
   * @member {NetworkConfigurationDiagnosticProfile} [profile]
   */
  profile?: NetworkConfigurationDiagnosticProfile;
  /**
   * @member {NetworkSecurityGroupResult} [networkSecurityGroupResult]
   */
  networkSecurityGroupResult?: NetworkSecurityGroupResult;
}

/**
 * @interface
 * An interface representing NetworkConfigurationDiagnosticResponse.
 * Results of network configuration diagnostic on the target resource.
 *
 */
export interface NetworkConfigurationDiagnosticResponse {
  /**
   * @member {NetworkConfigurationDiagnosticResult[]} [results] List of network
   * configuration diagnostic results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly results?: NetworkConfigurationDiagnosticResult[];
}

/**
 * @interface
 * An interface representing OperationDisplay.
 * Display metadata associated with the operation.
 *
 */
export interface OperationDisplay {
  /**
   * @member {string} [provider] Service provider: Microsoft Network.
   */
  provider?: string;
  /**
   * @member {string} [resource] Resource on which the operation is performed.
   */
  resource?: string;
  /**
   * @member {string} [operation] Type of the operation: get, read, delete,
   * etc.
   */
  operation?: string;
  /**
   * @member {string} [description] Description of the operation.
   */
  description?: string;
}

/**
 * @interface
 * An interface representing Availability.
 * Availability of the metric.
 *
 */
export interface Availability {
  /**
   * @member {string} [timeGrain] The time grain of the availability.
   */
  timeGrain?: string;
  /**
   * @member {string} [retention] The retention of the availability.
   */
  retention?: string;
  /**
   * @member {string} [blobDuration] Duration of the availability blob.
   */
  blobDuration?: string;
}

/**
 * @interface
 * An interface representing Dimension.
 * Dimension of the metric.
 *
 */
export interface Dimension {
  /**
   * @member {string} [name] The name of the dimension.
   */
  name?: string;
  /**
   * @member {string} [displayName] The display name of the dimension.
   */
  displayName?: string;
  /**
   * @member {string} [internalName] The internal name of the dimension.
   */
  internalName?: string;
}

/**
 * @interface
 * An interface representing MetricSpecification.
 * Description of metrics specification.
 *
 */
export interface MetricSpecification {
  /**
   * @member {string} [name] The name of the metric.
   */
  name?: string;
  /**
   * @member {string} [displayName] The display name of the metric.
   */
  displayName?: string;
  /**
   * @member {string} [displayDescription] The description of the metric.
   */
  displayDescription?: string;
  /**
   * @member {string} [unit] Units the metric to be displayed in.
   */
  unit?: string;
  /**
   * @member {string} [aggregationType] The aggregation type.
   */
  aggregationType?: string;
  /**
   * @member {Availability[]} [availabilities] List of availability.
   */
  availabilities?: Availability[];
  /**
   * @member {boolean} [enableRegionalMdmAccount] Whether regional MDM account
   * enabled.
   */
  enableRegionalMdmAccount?: boolean;
  /**
   * @member {boolean} [fillGapWithZero] Whether gaps would be filled with
   * zeros.
   */
  fillGapWithZero?: boolean;
  /**
   * @member {string} [metricFilterPattern] Pattern for the filter of the
   * metric.
   */
  metricFilterPattern?: string;
  /**
   * @member {Dimension[]} [dimensions] List of dimensions.
   */
  dimensions?: Dimension[];
  /**
   * @member {boolean} [isInternal] Whether the metric is internal.
   */
  isInternal?: boolean;
  /**
   * @member {string} [sourceMdmAccount] The source MDM account.
   */
  sourceMdmAccount?: string;
  /**
   * @member {string} [sourceMdmNamespace] The source MDM namespace.
   */
  sourceMdmNamespace?: string;
  /**
   * @member {string} [resourceIdDimensionNameOverride] The resource Id
   * dimension name override.
   */
  resourceIdDimensionNameOverride?: string;
}

/**
 * @interface
 * An interface representing LogSpecification.
 * Description of logging specification.
 *
 */
export interface LogSpecification {
  /**
   * @member {string} [name] The name of the specification.
   */
  name?: string;
  /**
   * @member {string} [displayName] The display name of the specification.
   */
  displayName?: string;
  /**
   * @member {string} [blobDuration] Duration of the blob.
   */
  blobDuration?: string;
}

/**
 * @interface
 * An interface representing OperationPropertiesFormatServiceSpecification.
 * Specification of the service.
 *
 */
export interface OperationPropertiesFormatServiceSpecification {
  /**
   * @member {MetricSpecification[]} [metricSpecifications] Operation service
   * specification.
   */
  metricSpecifications?: MetricSpecification[];
  /**
   * @member {LogSpecification[]} [logSpecifications] Operation log
   * specification.
   */
  logSpecifications?: LogSpecification[];
}

/**
 * @interface
 * An interface representing Operation.
 * Network REST API operation definition.
 *
 */
export interface Operation {
  /**
   * @member {string} [name] Operation name: {provider}/{resource}/{operation}
   */
  name?: string;
  /**
   * @member {OperationDisplay} [display] Display metadata associated with the
   * operation.
   */
  display?: OperationDisplay;
  /**
   * @member {string} [origin] Origin of the operation.
   */
  origin?: string;
  /**
   * @member {OperationPropertiesFormatServiceSpecification}
   * [serviceSpecification] Specification of the service.
   */
  serviceSpecification?: OperationPropertiesFormatServiceSpecification;
}

/**
 * @interface
 * An interface representing PublicIPPrefixSku.
 * SKU of a public IP prefix
 *
 */
export interface PublicIPPrefixSku {
  /**
   * @member {PublicIPPrefixSkuName} [name] Name of a public IP prefix SKU.
   * Possible values include: 'Standard'
   */
  name?: PublicIPPrefixSkuName;
}

/**
 * @interface
 * An interface representing ReferencedPublicIpAddress.
 */
export interface ReferencedPublicIpAddress {
  /**
   * @member {string} [id] The PublicIPAddress Reference
   */
  id?: string;
}

/**
 * @interface
 * An interface representing PublicIPPrefix.
 * Public IP prefix resource.
 *
 * @extends Resource
 */
export interface PublicIPPrefix extends Resource {
  /**
   * @member {PublicIPPrefixSku} [sku] The public IP prefix SKU.
   */
  sku?: PublicIPPrefixSku;
  /**
   * @member {IPVersion} [publicIPAddressVersion] The public IP address
   * version. Possible values are: 'IPv4' and 'IPv6'. Possible values include:
   * 'IPv4', 'IPv6'
   */
  publicIPAddressVersion?: IPVersion;
  /**
   * @member {IpTag[]} [ipTags] The list of tags associated with the public IP
   * prefix.
   */
  ipTags?: IpTag[];
  /**
   * @member {number} [prefixLength] The Length of the Public IP Prefix.
   */
  prefixLength?: number;
  /**
   * @member {string} [ipPrefix] The allocated Prefix
   */
  ipPrefix?: string;
  /**
   * @member {ReferencedPublicIpAddress[]} [publicIPAddresses] The list of all
   * referenced PublicIPAddresses
   */
  publicIPAddresses?: ReferencedPublicIpAddress[];
  /**
   * @member {string} [resourceGuid] The resource GUID property of the public
   * IP prefix resource.
   */
  resourceGuid?: string;
  /**
   * @member {string} [provisioningState] The provisioning state of the Public
   * IP prefix resource. Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   */
  provisioningState?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
  /**
   * @member {string[]} [zones] A list of availability zones denoting the IP
   * allocated for the resource needs to come from.
   */
  zones?: string[];
}

/**
 * @interface
 * An interface representing PatchRouteFilterRule.
 * Route Filter Rule Resource
 *
 * @extends SubResource
 */
export interface PatchRouteFilterRule extends SubResource {
  /**
   * @member {Access} access The access type of the rule. Valid values are:
   * 'Allow', 'Deny'. Possible values include: 'Allow', 'Deny'
   */
  access: Access;
  /**
   * @member {string[]} communities The collection for bgp community values to
   * filter on. e.g. ['12076:5010','12076:5020']
   */
  communities: string[];
  /**
   * @member {string} [provisioningState] The provisioning state of the
   * resource. Possible values are: 'Updating', 'Deleting', 'Succeeded' and
   * 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [name] The name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
}

/**
 * @interface
 * An interface representing PatchRouteFilter.
 * Route Filter Resource.
 *
 * @extends SubResource
 */
export interface PatchRouteFilter extends SubResource {
  /**
   * @member {RouteFilterRule[]} [rules] Collection of RouteFilterRules
   * contained within a route filter.
   */
  rules?: RouteFilterRule[];
  /**
   * @member {ExpressRouteCircuitPeering[]} [peerings] A collection of
   * references to express route circuit peerings.
   */
  peerings?: ExpressRouteCircuitPeering[];
  /**
   * @member {string} [provisioningState] The provisioning state of the
   * resource. Possible values are: 'Updating', 'Deleting', 'Succeeded' and
   * 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [name] The name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
  /**
   * @member {string} [type] Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {{ [propertyName: string]: string }} [tags] Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing BGPCommunity.
 * Contains bgp community information offered in Service Community resources.
 *
 */
export interface BGPCommunity {
  /**
   * @member {string} [serviceSupportedRegion] The region which the service
   * support. e.g. For O365, region is Global.
   */
  serviceSupportedRegion?: string;
  /**
   * @member {string} [communityName] The name of the bgp community. e.g.
   * Skype.
   */
  communityName?: string;
  /**
   * @member {string} [communityValue] The value of the bgp community. For more
   * information:
   * https://docs.microsoft.com/en-us/azure/expressroute/expressroute-routing.
   */
  communityValue?: string;
  /**
   * @member {string[]} [communityPrefixes] The prefixes that the bgp community
   * contains.
   */
  communityPrefixes?: string[];
  /**
   * @member {boolean} [isAuthorizedToUse] Customer is authorized to use bgp
   * community or not.
   */
  isAuthorizedToUse?: boolean;
  /**
   * @member {string} [serviceGroup] The service group of the bgp community
   * contains.
   */
  serviceGroup?: string;
}

/**
 * @interface
 * An interface representing BgpServiceCommunity.
 * Service Community Properties.
 *
 * @extends Resource
 */
export interface BgpServiceCommunity extends Resource {
  /**
   * @member {string} [serviceName] The name of the bgp community. e.g. Skype.
   */
  serviceName?: string;
  /**
   * @member {BGPCommunity[]} [bgpCommunities] Get a list of bgp communities.
   */
  bgpCommunities?: BGPCommunity[];
}

/**
 * @interface
 * An interface representing UsageName.
 * The usage names.
 *
 */
export interface UsageName {
  /**
   * @member {string} [value] A string describing the resource name.
   */
  value?: string;
  /**
   * @member {string} [localizedValue] A localized string describing the
   * resource name.
   */
  localizedValue?: string;
}

/**
 * @interface
 * An interface representing Usage.
 * Describes network resource usage.
 *
 */
export interface Usage {
  /**
   * @member {string} [id] Resource identifier.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {number} currentValue The current value of the usage.
   */
  currentValue: number;
  /**
   * @member {number} limit The limit of usage.
   */
  limit: number;
  /**
   * @member {UsageName} name The name of the type of usage.
   */
  name: UsageName;
}

/**
 * @interface
 * An interface representing AddressSpace.
 * AddressSpace contains an array of IP address ranges that can be used by
 * subnets of the virtual network.
 *
 */
export interface AddressSpace {
  /**
   * @member {string[]} [addressPrefixes] A list of address blocks reserved for
   * this virtual network in CIDR notation.
   */
  addressPrefixes?: string[];
}

/**
 * @interface
 * An interface representing VirtualNetworkPeering.
 * Peerings in a virtual network resource.
 *
 * @extends SubResource
 */
export interface VirtualNetworkPeering extends SubResource {
  /**
   * @member {boolean} [allowVirtualNetworkAccess] Whether the VMs in the
   * linked virtual network space would be able to access all the VMs in local
   * Virtual network space.
   */
  allowVirtualNetworkAccess?: boolean;
  /**
   * @member {boolean} [allowForwardedTraffic] Whether the forwarded traffic
   * from the VMs in the remote virtual network will be allowed/disallowed.
   */
  allowForwardedTraffic?: boolean;
  /**
   * @member {boolean} [allowGatewayTransit] If gateway links can be used in
   * remote virtual networking to link to this virtual network.
   */
  allowGatewayTransit?: boolean;
  /**
   * @member {boolean} [useRemoteGateways] If remote gateways can be used on
   * this virtual network. If the flag is set to true, and allowGatewayTransit
   * on remote peering is also true, virtual network will use gateways of
   * remote virtual network for transit. Only one peering can have this flag
   * set to true. This flag cannot be set if virtual network already has a
   * gateway.
   */
  useRemoteGateways?: boolean;
  /**
   * @member {SubResource} [remoteVirtualNetwork] The reference of the remote
   * virtual network. The remote virtual network can be in the same or
   * different region (preview). See here to register for the preview and learn
   * more
   * (https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-create-peering).
   */
  remoteVirtualNetwork?: SubResource;
  /**
   * @member {AddressSpace} [remoteAddressSpace] The reference of the remote
   * virtual network address space.
   */
  remoteAddressSpace?: AddressSpace;
  /**
   * @member {VirtualNetworkPeeringState} [peeringState] The status of the
   * virtual network peering. Possible values are 'Initiated', 'Connected', and
   * 'Disconnected'. Possible values include: 'Initiated', 'Connected',
   * 'Disconnected'
   */
  peeringState?: VirtualNetworkPeeringState;
  /**
   * @member {string} [provisioningState] The provisioning state of the
   * resource.
   */
  provisioningState?: string;
  /**
   * @member {string} [name] The name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing DhcpOptions.
 * DhcpOptions contains an array of DNS servers available to VMs deployed in
 * the virtual network. Standard DHCP option for a subnet overrides VNET DHCP
 * options.
 *
 */
export interface DhcpOptions {
  /**
   * @member {string[]} [dnsServers] The list of DNS servers IP addresses.
   */
  dnsServers?: string[];
}

/**
 * @interface
 * An interface representing VirtualNetwork.
 * Virtual Network resource.
 *
 * @extends Resource
 */
export interface VirtualNetwork extends Resource {
  /**
   * @member {AddressSpace} [addressSpace] The AddressSpace that contains an
   * array of IP address ranges that can be used by subnets.
   */
  addressSpace?: AddressSpace;
  /**
   * @member {DhcpOptions} [dhcpOptions] The dhcpOptions that contains an array
   * of DNS servers available to VMs deployed in the virtual network.
   */
  dhcpOptions?: DhcpOptions;
  /**
   * @member {Subnet[]} [subnets] A list of subnets in a Virtual Network.
   */
  subnets?: Subnet[];
  /**
   * @member {VirtualNetworkPeering[]} [virtualNetworkPeerings] A list of
   * peerings in a Virtual Network.
   */
  virtualNetworkPeerings?: VirtualNetworkPeering[];
  /**
   * @member {string} [resourceGuid] The resourceGuid property of the Virtual
   * Network resource.
   */
  resourceGuid?: string;
  /**
   * @member {string} [provisioningState] The provisioning state of the
   * PublicIP resource. Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   */
  provisioningState?: string;
  /**
   * @member {boolean} [enableDdosProtection] Indicates if DDoS protection is
   * enabled for all the protected resources in the virtual network. It
   * requires a DDoS protection plan associated with the resource. Default
   * value: false .
   */
  enableDdosProtection?: boolean;
  /**
   * @member {boolean} [enableVmProtection] Indicates if VM protection is
   * enabled for all the subnets in the virtual network. Default value: false .
   */
  enableVmProtection?: boolean;
  /**
   * @member {SubResource} [ddosProtectionPlan] The DDoS protection plan
   * associated with the virtual network.
   */
  ddosProtectionPlan?: SubResource;
  /**
   * @member {string} [etag] Gets a unique read-only string that changes
   * whenever the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing IPAddressAvailabilityResult.
 * Response for CheckIPAddressAvailability API service call
 *
 */
export interface IPAddressAvailabilityResult {
  /**
   * @member {boolean} [available] Private IP address availability.
   */
  available?: boolean;
  /**
   * @member {string[]} [availableIPAddresses] Contains other available private
   * IP addresses if the asked for address is taken.
   */
  availableIPAddresses?: string[];
}

/**
 * @interface
 * An interface representing VirtualNetworkUsageName.
 * Usage strings container.
 *
 */
export interface VirtualNetworkUsageName {
  /**
   * @member {string} [localizedValue] Localized subnet size and usage string.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly localizedValue?: string;
  /**
   * @member {string} [value] Subnet size and usage string.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly value?: string;
}

/**
 * @interface
 * An interface representing VirtualNetworkUsage.
 * Usage details for subnet.
 *
 */
export interface VirtualNetworkUsage {
  /**
   * @member {number} [currentValue] Indicates number of IPs used from the
   * Subnet.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly currentValue?: number;
  /**
   * @member {string} [id] Subnet identifier.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {number} [limit] Indicates the size of the subnet.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly limit?: number;
  /**
   * @member {VirtualNetworkUsageName} [name] The name containing common and
   * localized value for usage.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: VirtualNetworkUsageName;
  /**
   * @member {string} [unit] Usage units. Returns 'Count'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly unit?: string;
}

/**
 * @interface
 * An interface representing VirtualNetworkGatewayIPConfiguration.
 * IP configuration for virtual network gateway
 *
 * @extends SubResource
 */
export interface VirtualNetworkGatewayIPConfiguration extends SubResource {
  /**
   * @member {IPAllocationMethod} [privateIPAllocationMethod] The private IP
   * allocation method. Possible values are: 'Static' and 'Dynamic'. Possible
   * values include: 'Static', 'Dynamic'
   */
  privateIPAllocationMethod?: IPAllocationMethod;
  /**
   * @member {SubResource} [subnet] The reference of the subnet resource.
   */
  subnet?: SubResource;
  /**
   * @member {SubResource} [publicIPAddress] The reference of the public IP
   * resource.
   */
  publicIPAddress?: SubResource;
  /**
   * @member {string} [provisioningState] The provisioning state of the public
   * IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [name] The name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing VirtualNetworkGatewaySku.
 * VirtualNetworkGatewaySku details
 *
 */
export interface VirtualNetworkGatewaySku {
  /**
   * @member {VirtualNetworkGatewaySkuName} [name] Gateway SKU name. Possible
   * values include: 'Basic', 'HighPerformance', 'Standard',
   * 'UltraPerformance', 'VpnGw1', 'VpnGw2', 'VpnGw3', 'VpnGw1AZ', 'VpnGw2AZ',
   * 'VpnGw3AZ', 'ErGw1AZ', 'ErGw2AZ', 'ErGw3AZ'
   */
  name?: VirtualNetworkGatewaySkuName;
  /**
   * @member {VirtualNetworkGatewaySkuTier} [tier] Gateway SKU tier. Possible
   * values include: 'Basic', 'HighPerformance', 'Standard',
   * 'UltraPerformance', 'VpnGw1', 'VpnGw2', 'VpnGw3', 'VpnGw1AZ', 'VpnGw2AZ',
   * 'VpnGw3AZ', 'ErGw1AZ', 'ErGw2AZ', 'ErGw3AZ'
   */
  tier?: VirtualNetworkGatewaySkuTier;
  /**
   * @member {number} [capacity] The capacity.
   */
  capacity?: number;
}

/**
 * @interface
 * An interface representing VpnClientRootCertificate.
 * VPN client root certificate of virtual network gateway
 *
 * @extends SubResource
 */
export interface VpnClientRootCertificate extends SubResource {
  /**
   * @member {string} publicCertData The certificate public data.
   */
  publicCertData: string;
  /**
   * @member {string} [provisioningState] The provisioning state of the VPN
   * client root certificate resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [name] The name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing VpnClientRevokedCertificate.
 * VPN client revoked certificate of virtual network gateway.
 *
 * @extends SubResource
 */
export interface VpnClientRevokedCertificate extends SubResource {
  /**
   * @member {string} [thumbprint] The revoked VPN client certificate
   * thumbprint.
   */
  thumbprint?: string;
  /**
   * @member {string} [provisioningState] The provisioning state of the VPN
   * client revoked certificate resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [name] The name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing IpsecPolicy.
 * An IPSec Policy configuration for a virtual network gateway connection
 *
 */
export interface IpsecPolicy {
  /**
   * @member {number} saLifeTimeSeconds The IPSec Security Association (also
   * called Quick Mode or Phase 2 SA) lifetime in seconds for a site to site
   * VPN tunnel.
   */
  saLifeTimeSeconds: number;
  /**
   * @member {number} saDataSizeKilobytes The IPSec Security Association (also
   * called Quick Mode or Phase 2 SA) payload size in KB for a site to site VPN
   * tunnel.
   */
  saDataSizeKilobytes: number;
  /**
   * @member {IpsecEncryption} ipsecEncryption The IPSec encryption algorithm
   * (IKE phase 1). Possible values include: 'None', 'DES', 'DES3', 'AES128',
   * 'AES192', 'AES256', 'GCMAES128', 'GCMAES192', 'GCMAES256'
   */
  ipsecEncryption: IpsecEncryption;
  /**
   * @member {IpsecIntegrity} ipsecIntegrity The IPSec integrity algorithm (IKE
   * phase 1). Possible values include: 'MD5', 'SHA1', 'SHA256', 'GCMAES128',
   * 'GCMAES192', 'GCMAES256'
   */
  ipsecIntegrity: IpsecIntegrity;
  /**
   * @member {IkeEncryption} ikeEncryption The IKE encryption algorithm (IKE
   * phase 2). Possible values include: 'DES', 'DES3', 'AES128', 'AES192',
   * 'AES256', 'GCMAES256', 'GCMAES128'
   */
  ikeEncryption: IkeEncryption;
  /**
   * @member {IkeIntegrity} ikeIntegrity The IKE integrity algorithm (IKE phase
   * 2). Possible values include: 'MD5', 'SHA1', 'SHA256', 'SHA384',
   * 'GCMAES256', 'GCMAES128'
   */
  ikeIntegrity: IkeIntegrity;
  /**
   * @member {DhGroup} dhGroup The DH Groups used in IKE Phase 1 for initial
   * SA. Possible values include: 'None', 'DHGroup1', 'DHGroup2', 'DHGroup14',
   * 'DHGroup2048', 'ECP256', 'ECP384', 'DHGroup24'
   */
  dhGroup: DhGroup;
  /**
   * @member {PfsGroup} pfsGroup The Pfs Groups used in IKE Phase 2 for new
   * child SA. Possible values include: 'None', 'PFS1', 'PFS2', 'PFS2048',
   * 'ECP256', 'ECP384', 'PFS24', 'PFS14', 'PFSMM'
   */
  pfsGroup: PfsGroup;
}

/**
 * @interface
 * An interface representing VpnClientConfiguration.
 * VpnClientConfiguration for P2S client.
 *
 */
export interface VpnClientConfiguration {
  /**
   * @member {AddressSpace} [vpnClientAddressPool] The reference of the address
   * space resource which represents Address space for P2S VpnClient.
   */
  vpnClientAddressPool?: AddressSpace;
  /**
   * @member {VpnClientRootCertificate[]} [vpnClientRootCertificates]
   * VpnClientRootCertificate for virtual network gateway.
   */
  vpnClientRootCertificates?: VpnClientRootCertificate[];
  /**
   * @member {VpnClientRevokedCertificate[]} [vpnClientRevokedCertificates]
   * VpnClientRevokedCertificate for Virtual network gateway.
   */
  vpnClientRevokedCertificates?: VpnClientRevokedCertificate[];
  /**
   * @member {VpnClientProtocol[]} [vpnClientProtocols] VpnClientProtocols for
   * Virtual network gateway.
   */
  vpnClientProtocols?: VpnClientProtocol[];
  /**
   * @member {IpsecPolicy[]} [vpnClientIpsecPolicies] VpnClientIpsecPolicies
   * for virtual network gateway P2S client.
   */
  vpnClientIpsecPolicies?: IpsecPolicy[];
  /**
   * @member {string} [radiusServerAddress] The radius server address property
   * of the VirtualNetworkGateway resource for vpn client connection.
   */
  radiusServerAddress?: string;
  /**
   * @member {string} [radiusServerSecret] The radius secret property of the
   * VirtualNetworkGateway resource for vpn client connection.
   */
  radiusServerSecret?: string;
}

/**
 * @interface
 * An interface representing BgpSettings.
 * BGP settings details
 *
 */
export interface BgpSettings {
  /**
   * @member {number} [asn] The BGP speaker's ASN.
   */
  asn?: number;
  /**
   * @member {string} [bgpPeeringAddress] The BGP peering address and BGP
   * identifier of this BGP speaker.
   */
  bgpPeeringAddress?: string;
  /**
   * @member {number} [peerWeight] The weight added to routes learned from this
   * BGP speaker.
   */
  peerWeight?: number;
}

/**
 * @interface
 * An interface representing BgpPeerStatus.
 * BGP peer status details
 *
 */
export interface BgpPeerStatus {
  /**
   * @member {string} [localAddress] The virtual network gateway's local
   * address
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly localAddress?: string;
  /**
   * @member {string} [neighbor] The remote BGP peer
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly neighbor?: string;
  /**
   * @member {number} [asn] The autonomous system number of the remote BGP peer
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly asn?: number;
  /**
   * @member {BgpPeerState} [state] The BGP peer state. Possible values
   * include: 'Unknown', 'Stopped', 'Idle', 'Connecting', 'Connected'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: BgpPeerState;
  /**
   * @member {string} [connectedDuration] For how long the peering has been up
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly connectedDuration?: string;
  /**
   * @member {number} [routesReceived] The number of routes learned from this
   * peer
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly routesReceived?: number;
  /**
   * @member {number} [messagesSent] The number of BGP messages sent
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly messagesSent?: number;
  /**
   * @member {number} [messagesReceived] The number of BGP messages received
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly messagesReceived?: number;
}

/**
 * @interface
 * An interface representing GatewayRoute.
 * Gateway routing details
 *
 */
export interface GatewayRoute {
  /**
   * @member {string} [localAddress] The gateway's local address
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly localAddress?: string;
  /**
   * @member {string} [network] The route's network prefix
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly network?: string;
  /**
   * @member {string} [nextHop] The route's next hop
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextHop?: string;
  /**
   * @member {string} [sourcePeer] The peer this route was learned from
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sourcePeer?: string;
  /**
   * @member {string} [origin] The source this route was learned from
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly origin?: string;
  /**
   * @member {string} [asPath] The route's AS path sequence
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly asPath?: string;
  /**
   * @member {number} [weight] The route's weight
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly weight?: number;
}

/**
 * @interface
 * An interface representing VirtualNetworkGateway.
 * A common class for general resource information
 *
 * @extends Resource
 */
export interface VirtualNetworkGateway extends Resource {
  /**
   * @member {VirtualNetworkGatewayIPConfiguration[]} [ipConfigurations] IP
   * configurations for virtual network gateway.
   */
  ipConfigurations?: VirtualNetworkGatewayIPConfiguration[];
  /**
   * @member {VirtualNetworkGatewayType} [gatewayType] The type of this virtual
   * network gateway. Possible values are: 'Vpn' and 'ExpressRoute'. Possible
   * values include: 'Vpn', 'ExpressRoute'
   */
  gatewayType?: VirtualNetworkGatewayType;
  /**
   * @member {VpnType} [vpnType] The type of this virtual network gateway.
   * Possible values are: 'PolicyBased' and 'RouteBased'. Possible values
   * include: 'PolicyBased', 'RouteBased'
   */
  vpnType?: VpnType;
  /**
   * @member {boolean} [enableBgp] Whether BGP is enabled for this virtual
   * network gateway or not.
   */
  enableBgp?: boolean;
  /**
   * @member {boolean} [activeActive] ActiveActive flag
   */
  activeActive?: boolean;
  /**
   * @member {SubResource} [gatewayDefaultSite] The reference of the
   * LocalNetworkGateway resource which represents local network site having
   * default routes. Assign Null value in case of removing existing default
   * site setting.
   */
  gatewayDefaultSite?: SubResource;
  /**
   * @member {VirtualNetworkGatewaySku} [sku] The reference of the
   * VirtualNetworkGatewaySku resource which represents the SKU selected for
   * Virtual network gateway.
   */
  sku?: VirtualNetworkGatewaySku;
  /**
   * @member {VpnClientConfiguration} [vpnClientConfiguration] The reference of
   * the VpnClientConfiguration resource which represents the P2S VpnClient
   * configurations.
   */
  vpnClientConfiguration?: VpnClientConfiguration;
  /**
   * @member {BgpSettings} [bgpSettings] Virtual network gateway's BGP speaker
   * settings.
   */
  bgpSettings?: BgpSettings;
  /**
   * @member {string} [resourceGuid] The resource GUID property of the
   * VirtualNetworkGateway resource.
   */
  resourceGuid?: string;
  /**
   * @member {string} [provisioningState] The provisioning state of the
   * VirtualNetworkGateway resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [etag] Gets a unique read-only string that changes
   * whenever the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing VpnClientParameters.
 * Vpn Client Parameters for package generation
 *
 */
export interface VpnClientParameters {
  /**
   * @member {ProcessorArchitecture} [processorArchitecture] VPN client
   * Processor Architecture. Possible values are: 'AMD64' and 'X86'. Possible
   * values include: 'Amd64', 'X86'
   */
  processorArchitecture?: ProcessorArchitecture;
  /**
   * @member {AuthenticationMethod} [authenticationMethod] VPN client
   * Authentication Method. Possible values are: 'EAPTLS' and 'EAPMSCHAPv2'.
   * Possible values include: 'EAPTLS', 'EAPMSCHAPv2'
   */
  authenticationMethod?: AuthenticationMethod;
  /**
   * @member {string} [radiusServerAuthCertificate] The public certificate data
   * for the radius server authentication certificate as a Base-64 encoded
   * string. Required only if external radius authentication has been
   * configured with EAPTLS authentication.
   */
  radiusServerAuthCertificate?: string;
  /**
   * @member {string[]} [clientRootCertificates] A list of client root
   * certificates public certificate data encoded as Base-64 strings. Optional
   * parameter for external radius based authentication with EAPTLS.
   */
  clientRootCertificates?: string[];
}

/**
 * @interface
 * An interface representing BgpPeerStatusListResult.
 * Response for list BGP peer status API service call
 *
 */
export interface BgpPeerStatusListResult {
  /**
   * @member {BgpPeerStatus[]} [value] List of BGP peers
   */
  value?: BgpPeerStatus[];
}

/**
 * @interface
 * An interface representing GatewayRouteListResult.
 * List of virtual network gateway routes
 *
 */
export interface GatewayRouteListResult {
  /**
   * @member {GatewayRoute[]} [value] List of gateway routes
   */
  value?: GatewayRoute[];
}

/**
 * @interface
 * An interface representing TunnelConnectionHealth.
 * VirtualNetworkGatewayConnection properties
 *
 */
export interface TunnelConnectionHealth {
  /**
   * @member {string} [tunnel] Tunnel name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tunnel?: string;
  /**
   * @member {VirtualNetworkGatewayConnectionStatus} [connectionStatus] Virtual
   * network Gateway connection status. Possible values include: 'Unknown',
   * 'Connecting', 'Connected', 'NotConnected'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly connectionStatus?: VirtualNetworkGatewayConnectionStatus;
  /**
   * @member {number} [ingressBytesTransferred] The Ingress Bytes Transferred
   * in this connection
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly ingressBytesTransferred?: number;
  /**
   * @member {number} [egressBytesTransferred] The Egress Bytes Transferred in
   * this connection
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly egressBytesTransferred?: number;
  /**
   * @member {string} [lastConnectionEstablishedUtcTime] The time at which
   * connection was established in Utc format.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly lastConnectionEstablishedUtcTime?: string;
}

/**
 * @interface
 * An interface representing LocalNetworkGateway.
 * A common class for general resource information
 *
 * @extends Resource
 */
export interface LocalNetworkGateway extends Resource {
  /**
   * @member {AddressSpace} [localNetworkAddressSpace] Local network site
   * address space.
   */
  localNetworkAddressSpace?: AddressSpace;
  /**
   * @member {string} [gatewayIpAddress] IP address of local network gateway.
   */
  gatewayIpAddress?: string;
  /**
   * @member {BgpSettings} [bgpSettings] Local network gateway's BGP speaker
   * settings.
   */
  bgpSettings?: BgpSettings;
  /**
   * @member {string} [resourceGuid] The resource GUID property of the
   * LocalNetworkGateway resource.
   */
  resourceGuid?: string;
  /**
   * @member {string} [provisioningState] The provisioning state of the
   * LocalNetworkGateway resource. Possible values are: 'Updating', 'Deleting',
   * and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing VirtualNetworkGatewayConnection.
 * A common class for general resource information
 *
 * @extends Resource
 */
export interface VirtualNetworkGatewayConnection extends Resource {
  /**
   * @member {string} [authorizationKey] The authorizationKey.
   */
  authorizationKey?: string;
  /**
   * @member {VirtualNetworkGateway} virtualNetworkGateway1 The reference to
   * virtual network gateway resource.
   */
  virtualNetworkGateway1: VirtualNetworkGateway;
  /**
   * @member {VirtualNetworkGateway} [virtualNetworkGateway2] The reference to
   * virtual network gateway resource.
   */
  virtualNetworkGateway2?: VirtualNetworkGateway;
  /**
   * @member {LocalNetworkGateway} [localNetworkGateway2] The reference to
   * local network gateway resource.
   */
  localNetworkGateway2?: LocalNetworkGateway;
  /**
   * @member {VirtualNetworkGatewayConnectionType} connectionType Gateway
   * connection type. Possible values are: 'Ipsec','Vnet2Vnet','ExpressRoute',
   * and 'VPNClient. Possible values include: 'IPsec', 'Vnet2Vnet',
   * 'ExpressRoute', 'VPNClient'
   */
  connectionType: VirtualNetworkGatewayConnectionType;
  /**
   * @member {VirtualNetworkGatewayConnectionProtocol} [connectionProtocol]
   * Connection protocol used for this connection. Possible values include:
   * 'IKEv2', 'IKEv1'
   */
  connectionProtocol?: VirtualNetworkGatewayConnectionProtocol;
  /**
   * @member {number} [routingWeight] The routing weight.
   */
  routingWeight?: number;
  /**
   * @member {string} [sharedKey] The IPSec shared key.
   */
  sharedKey?: string;
  /**
   * @member {VirtualNetworkGatewayConnectionStatus} [connectionStatus] Virtual
   * network Gateway connection status. Possible values are 'Unknown',
   * 'Connecting', 'Connected' and 'NotConnected'. Possible values include:
   * 'Unknown', 'Connecting', 'Connected', 'NotConnected'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly connectionStatus?: VirtualNetworkGatewayConnectionStatus;
  /**
   * @member {TunnelConnectionHealth[]} [tunnelConnectionStatus] Collection of
   * all tunnels' connection health status.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tunnelConnectionStatus?: TunnelConnectionHealth[];
  /**
   * @member {number} [egressBytesTransferred] The egress bytes transferred in
   * this connection.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly egressBytesTransferred?: number;
  /**
   * @member {number} [ingressBytesTransferred] The ingress bytes transferred
   * in this connection.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly ingressBytesTransferred?: number;
  /**
   * @member {SubResource} [peer] The reference to peerings resource.
   */
  peer?: SubResource;
  /**
   * @member {boolean} [enableBgp] EnableBgp flag
   */
  enableBgp?: boolean;
  /**
   * @member {boolean} [usePolicyBasedTrafficSelectors] Enable policy-based
   * traffic selectors.
   */
  usePolicyBasedTrafficSelectors?: boolean;
  /**
   * @member {IpsecPolicy[]} [ipsecPolicies] The IPSec Policies to be
   * considered by this connection.
   */
  ipsecPolicies?: IpsecPolicy[];
  /**
   * @member {string} [resourceGuid] The resource GUID property of the
   * VirtualNetworkGatewayConnection resource.
   */
  resourceGuid?: string;
  /**
   * @member {string} [provisioningState] The provisioning state of the
   * VirtualNetworkGatewayConnection resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {boolean} [expressRouteGatewayBypass] Bypass ExpressRoute Gateway
   * for data forwarding
   */
  expressRouteGatewayBypass?: boolean;
  /**
   * @member {string} [etag] Gets a unique read-only string that changes
   * whenever the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing ConnectionResetSharedKey.
 * The virtual network connection reset shared key
 *
 */
export interface ConnectionResetSharedKey {
  /**
   * @member {number} keyLength The virtual network connection reset shared key
   * length, should between 1 and 128.
   */
  keyLength: number;
}

/**
 * @interface
 * An interface representing ConnectionSharedKey.
 * Response for GetConnectionSharedKey API service call
 *
 * @extends SubResource
 */
export interface ConnectionSharedKey extends SubResource {
  /**
   * @member {string} value The virtual network connection shared key value.
   */
  value: string;
}

/**
 * @interface
 * An interface representing VpnClientIPsecParameters.
 * An IPSec parameters for a virtual network gateway P2S connection.
 *
 */
export interface VpnClientIPsecParameters {
  /**
   * @member {number} saLifeTimeSeconds The IPSec Security Association (also
   * called Quick Mode or Phase 2 SA) lifetime in seconds for P2S client.
   */
  saLifeTimeSeconds: number;
  /**
   * @member {number} saDataSizeKilobytes The IPSec Security Association (also
   * called Quick Mode or Phase 2 SA) payload size in KB for P2S client..
   */
  saDataSizeKilobytes: number;
  /**
   * @member {IpsecEncryption} ipsecEncryption The IPSec encryption algorithm
   * (IKE phase 1). Possible values include: 'None', 'DES', 'DES3', 'AES128',
   * 'AES192', 'AES256', 'GCMAES128', 'GCMAES192', 'GCMAES256'
   */
  ipsecEncryption: IpsecEncryption;
  /**
   * @member {IpsecIntegrity} ipsecIntegrity The IPSec integrity algorithm (IKE
   * phase 1). Possible values include: 'MD5', 'SHA1', 'SHA256', 'GCMAES128',
   * 'GCMAES192', 'GCMAES256'
   */
  ipsecIntegrity: IpsecIntegrity;
  /**
   * @member {IkeEncryption} ikeEncryption The IKE encryption algorithm (IKE
   * phase 2). Possible values include: 'DES', 'DES3', 'AES128', 'AES192',
   * 'AES256', 'GCMAES256', 'GCMAES128'
   */
  ikeEncryption: IkeEncryption;
  /**
   * @member {IkeIntegrity} ikeIntegrity The IKE integrity algorithm (IKE phase
   * 2). Possible values include: 'MD5', 'SHA1', 'SHA256', 'SHA384',
   * 'GCMAES256', 'GCMAES128'
   */
  ikeIntegrity: IkeIntegrity;
  /**
   * @member {DhGroup} dhGroup The DH Groups used in IKE Phase 1 for initial
   * SA. Possible values include: 'None', 'DHGroup1', 'DHGroup2', 'DHGroup14',
   * 'DHGroup2048', 'ECP256', 'ECP384', 'DHGroup24'
   */
  dhGroup: DhGroup;
  /**
   * @member {PfsGroup} pfsGroup The Pfs Groups used in IKE Phase 2 for new
   * child SA. Possible values include: 'None', 'PFS1', 'PFS2', 'PFS2048',
   * 'ECP256', 'ECP384', 'PFS24', 'PFS14', 'PFSMM'
   */
  pfsGroup: PfsGroup;
}

/**
 * @interface
 * An interface representing VirtualNetworkConnectionGatewayReference.
 * A reference to VirtualNetworkGateway or LocalNetworkGateway resource.
 *
 */
export interface VirtualNetworkConnectionGatewayReference {
  /**
   * @member {string} id The ID of VirtualNetworkGateway or LocalNetworkGateway
   * resource.
   */
  id: string;
}

/**
 * @interface
 * An interface representing VirtualNetworkGatewayConnectionListEntity.
 * A common class for general resource information
 *
 * @extends Resource
 */
export interface VirtualNetworkGatewayConnectionListEntity extends Resource {
  /**
   * @member {string} [authorizationKey] The authorizationKey.
   */
  authorizationKey?: string;
  /**
   * @member {VirtualNetworkConnectionGatewayReference} virtualNetworkGateway1
   * The reference to virtual network gateway resource.
   */
  virtualNetworkGateway1: VirtualNetworkConnectionGatewayReference;
  /**
   * @member {VirtualNetworkConnectionGatewayReference}
   * [virtualNetworkGateway2] The reference to virtual network gateway
   * resource.
   */
  virtualNetworkGateway2?: VirtualNetworkConnectionGatewayReference;
  /**
   * @member {VirtualNetworkConnectionGatewayReference} [localNetworkGateway2]
   * The reference to local network gateway resource.
   */
  localNetworkGateway2?: VirtualNetworkConnectionGatewayReference;
  /**
   * @member {VirtualNetworkGatewayConnectionType} connectionType Gateway
   * connection type. Possible values are: 'Ipsec','Vnet2Vnet','ExpressRoute',
   * and 'VPNClient. Possible values include: 'IPsec', 'Vnet2Vnet',
   * 'ExpressRoute', 'VPNClient'
   */
  connectionType: VirtualNetworkGatewayConnectionType;
  /**
   * @member {VirtualNetworkGatewayConnectionProtocol} [connectionProtocol]
   * Connection protocol used for this connection. Possible values include:
   * 'IKEv2', 'IKEv1'
   */
  connectionProtocol?: VirtualNetworkGatewayConnectionProtocol;
  /**
   * @member {number} [routingWeight] The routing weight.
   */
  routingWeight?: number;
  /**
   * @member {string} [sharedKey] The IPSec shared key.
   */
  sharedKey?: string;
  /**
   * @member {VirtualNetworkGatewayConnectionStatus} [connectionStatus] Virtual
   * network Gateway connection status. Possible values are 'Unknown',
   * 'Connecting', 'Connected' and 'NotConnected'. Possible values include:
   * 'Unknown', 'Connecting', 'Connected', 'NotConnected'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly connectionStatus?: VirtualNetworkGatewayConnectionStatus;
  /**
   * @member {TunnelConnectionHealth[]} [tunnelConnectionStatus] Collection of
   * all tunnels' connection health status.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tunnelConnectionStatus?: TunnelConnectionHealth[];
  /**
   * @member {number} [egressBytesTransferred] The egress bytes transferred in
   * this connection.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly egressBytesTransferred?: number;
  /**
   * @member {number} [ingressBytesTransferred] The ingress bytes transferred
   * in this connection.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly ingressBytesTransferred?: number;
  /**
   * @member {SubResource} [peer] The reference to peerings resource.
   */
  peer?: SubResource;
  /**
   * @member {boolean} [enableBgp] EnableBgp flag
   */
  enableBgp?: boolean;
  /**
   * @member {boolean} [usePolicyBasedTrafficSelectors] Enable policy-based
   * traffic selectors.
   */
  usePolicyBasedTrafficSelectors?: boolean;
  /**
   * @member {IpsecPolicy[]} [ipsecPolicies] The IPSec Policies to be
   * considered by this connection.
   */
  ipsecPolicies?: IpsecPolicy[];
  /**
   * @member {string} [resourceGuid] The resource GUID property of the
   * VirtualNetworkGatewayConnection resource.
   */
  resourceGuid?: string;
  /**
   * @member {string} [provisioningState] The provisioning state of the
   * VirtualNetworkGatewayConnection resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {boolean} [expressRouteGatewayBypass] Bypass ExpressRoute Gateway
   * for data forwarding
   */
  expressRouteGatewayBypass?: boolean;
  /**
   * @member {string} [etag] Gets a unique read-only string that changes
   * whenever the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing VpnDeviceScriptParameters.
 * Vpn device configuration script generation parameters
 *
 */
export interface VpnDeviceScriptParameters {
  /**
   * @member {string} [vendor] The vendor for the vpn device.
   */
  vendor?: string;
  /**
   * @member {string} [deviceFamily] The device family for the vpn device.
   */
  deviceFamily?: string;
  /**
   * @member {string} [firmwareVersion] The firmware version for the vpn
   * device.
   */
  firmwareVersion?: string;
}

/**
 * @interface
 * An interface representing P2SVpnServerConfigVpnClientRootCertificate.
 * VPN client root certificate of P2SVpnServerConfiguration.
 *
 * @extends SubResource
 */
export interface P2SVpnServerConfigVpnClientRootCertificate extends SubResource {
  /**
   * @member {string} publicCertData The certificate public data.
   */
  publicCertData: string;
  /**
   * @member {string} [provisioningState] The provisioning state of the
   * P2SVpnServerConfiguration VPN client root certificate resource. Possible
   * values are: 'Updating', 'Deleting', and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [name] The name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing P2SVpnServerConfigVpnClientRevokedCertificate.
 * VPN client revoked certificate of P2SVpnServerConfiguration.
 *
 * @extends SubResource
 */
export interface P2SVpnServerConfigVpnClientRevokedCertificate extends SubResource {
  /**
   * @member {string} [thumbprint] The revoked VPN client certificate
   * thumbprint.
   */
  thumbprint?: string;
  /**
   * @member {string} [provisioningState] The provisioning state of the VPN
   * client revoked certificate resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [name] The name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing P2SVpnServerConfigRadiusServerRootCertificate.
 * Radius Server root certificate of P2SVpnServerConfiguration.
 *
 * @extends SubResource
 */
export interface P2SVpnServerConfigRadiusServerRootCertificate extends SubResource {
  /**
   * @member {string} publicCertData The certificate public data.
   */
  publicCertData: string;
  /**
   * @member {string} [provisioningState] The provisioning state of the
   * P2SVpnServerConfiguration Radius Server root certificate resource.
   * Possible values are: 'Updating', 'Deleting', and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [name] The name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing P2SVpnServerConfigRadiusClientRootCertificate.
 * Radius client root certificate of P2SVpnServerConfiguration.
 *
 * @extends SubResource
 */
export interface P2SVpnServerConfigRadiusClientRootCertificate extends SubResource {
  /**
   * @member {string} [thumbprint] The Radius client root certificate
   * thumbprint.
   */
  thumbprint?: string;
  /**
   * @member {string} [provisioningState] The provisioning state of the Radius
   * client root certificate resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [name] The name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] A unique read-only string that changes whenever
   * the resource is updated.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing P2SVpnServerConfiguration.
 * P2SVpnServerConfiguration Resource.
 *
 * @extends SubResource
 */
export interface P2SVpnServerConfiguration extends SubResource {
  /**
   * @member {string} [p2SVpnServerConfigurationPropertiesName] The name of the
   * P2SVpnServerConfiguration that is unique within a VirtualWan in a resource
   * group. This name can be used to access the resource along with Paren
   * VirtualWan resource name.
   */
  p2SVpnServerConfigurationPropertiesName?: string;
  /**
   * @member {VpnGatewayTunnelingProtocol[]} [vpnProtocols] vpnProtocols for
   * the P2SVpnServerConfiguration.
   */
  vpnProtocols?: VpnGatewayTunnelingProtocol[];
  /**
   * @member {P2SVpnServerConfigVpnClientRootCertificate[]}
   * [p2SVpnServerConfigVpnClientRootCertificates] VPN client root certificate
   * of P2SVpnServerConfiguration.
   */
  p2SVpnServerConfigVpnClientRootCertificates?: P2SVpnServerConfigVpnClientRootCertificate[];
  /**
   * @member {P2SVpnServerConfigVpnClientRevokedCertificate[]}
   * [p2SVpnServerConfigVpnClientRevokedCertificates] VPN client revoked
   * certificate of P2SVpnServerConfiguration.
   */
  p2SVpnServerConfigVpnClientRevokedCertificates?: P2SVpnServerConfigVpnClientRevokedCertificate[];
  /**
   * @member {P2SVpnServerConfigRadiusServerRootCertificate[]}
   * [p2SVpnServerConfigRadiusServerRootCertificates] Radius Server root
   * certificate of P2SVpnServerConfiguration.
   */
  p2SVpnServerConfigRadiusServerRootCertificates?: P2SVpnServerConfigRadiusServerRootCertificate[];
  /**
   * @member {P2SVpnServerConfigRadiusClientRootCertificate[]}
   * [p2SVpnServerConfigRadiusClientRootCertificates] Radius client root
   * certificate of P2SVpnServerConfiguration.
   */
  p2SVpnServerConfigRadiusClientRootCertificates?: P2SVpnServerConfigRadiusClientRootCertificate[];
  /**
   * @member {IpsecPolicy[]} [vpnClientIpsecPolicies] VpnClientIpsecPolicies
   * for P2SVpnServerConfiguration.
   */
  vpnClientIpsecPolicies?: IpsecPolicy[];
  /**
   * @member {string} [radiusServerAddress] The radius server address property
   * of the P2SVpnServerConfiguration resource for point to site client
   * connection.
   */
  radiusServerAddress?: string;
  /**
   * @member {string} [radiusServerSecret] The radius secret property of the
   * P2SVpnServerConfiguration resource for for point to site client
   * connection.
   */
  radiusServerSecret?: string;
  /**
   * @member {string} [provisioningState] The provisioning state of the
   * P2SVpnServerConfiguration resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {SubResource[]} [p2SVpnGateways] **NOTE: This property will not be
   * serialized. It can only be populated by the server.**
   */
  readonly p2SVpnGateways?: SubResource[];
  /**
   * @member {string} [p2SVpnServerConfigurationPropertiesEtag] A unique
   * read-only string that changes whenever the resource is updated.
   */
  p2SVpnServerConfigurationPropertiesEtag?: string;
  /**
   * @member {string} [name] The name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] Gets a unique read-only string that changes
   * whenever the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
}

/**
 * @interface
 * An interface representing VirtualWAN.
 * VirtualWAN Resource.
 *
 * @extends Resource
 */
export interface VirtualWAN extends Resource {
  /**
   * @member {boolean} [disableVpnEncryption] Vpn encryption to be disabled or
   * not.
   */
  disableVpnEncryption?: boolean;
  /**
   * @member {SubResource[]} [virtualHubs] List of VirtualHubs in the
   * VirtualWAN.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly virtualHubs?: SubResource[];
  /**
   * @member {SubResource[]} [vpnSites] **NOTE: This property will not be
   * serialized. It can only be populated by the server.**
   */
  readonly vpnSites?: SubResource[];
  /**
   * @member {string} [securityProviderName] The Security Provider name.
   */
  securityProviderName?: string;
  /**
   * @member {boolean} [allowBranchToBranchTraffic] True if branch to branch
   * traffic is allowed.
   */
  allowBranchToBranchTraffic?: boolean;
  /**
   * @member {boolean} [allowVnetToVnetTraffic] True if Vnet to Vnet traffic is
   * allowed.
   */
  allowVnetToVnetTraffic?: boolean;
  /**
   * @member {OfficeTrafficCategory} [office365LocalBreakoutCategory] The
   * office local breakout category. Possible values include: 'Optimize',
   * 'OptimizeAndAllow', 'All', 'None'
   */
  office365LocalBreakoutCategory?: OfficeTrafficCategory;
  /**
   * @member {P2SVpnServerConfiguration[]} [p2SVpnServerConfigurations] list of
   * all P2SVpnServerConfigurations associated with the virtual wan.
   */
  p2SVpnServerConfigurations?: P2SVpnServerConfiguration[];
  /**
   * @member {ProvisioningState} [provisioningState] The provisioning state of
   * the resource. Possible values include: 'Succeeded', 'Updating',
   * 'Deleting', 'Failed'
   */
  provisioningState?: ProvisioningState;
  /**
   * @member {string} [etag] Gets a unique read-only string that changes
   * whenever the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
}

/**
 * @interface
 * An interface representing DeviceProperties.
 * List of properties of the device.
 *
 */
export interface DeviceProperties {
  /**
   * @member {string} [deviceVendor] Name of the device Vendor.
   */
  deviceVendor?: string;
  /**
   * @member {string} [deviceModel] Model of the device.
   */
  deviceModel?: string;
  /**
   * @member {number} [linkSpeedInMbps] Link speed.
   */
  linkSpeedInMbps?: number;
}

/**
 * @interface
 * An interface representing VpnSite.
 * VpnSite Resource.
 *
 * @extends Resource
 */
export interface VpnSite extends Resource {
  /**
   * @member {SubResource} [virtualWan] The VirtualWAN to which the vpnSite
   * belongs
   */
  virtualWan?: SubResource;
  /**
   * @member {DeviceProperties} [deviceProperties] The device properties
   */
  deviceProperties?: DeviceProperties;
  /**
   * @member {string} [ipAddress] The ip-address for the vpn-site.
   */
  ipAddress?: string;
  /**
   * @member {string} [siteKey] The key for vpn-site that can be used for
   * connections.
   */
  siteKey?: string;
  /**
   * @member {AddressSpace} [addressSpace] The AddressSpace that contains an
   * array of IP address ranges.
   */
  addressSpace?: AddressSpace;
  /**
   * @member {BgpSettings} [bgpProperties] The set of bgp properties.
   */
  bgpProperties?: BgpSettings;
  /**
   * @member {ProvisioningState} [provisioningState] The provisioning state of
   * the resource. Possible values include: 'Succeeded', 'Updating',
   * 'Deleting', 'Failed'
   */
  provisioningState?: ProvisioningState;
  /**
   * @member {boolean} [isSecuritySite] IsSecuritySite flag
   */
  isSecuritySite?: boolean;
  /**
   * @member {string} [etag] Gets a unique read-only string that changes
   * whenever the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
}

/**
 * @interface
 * An interface representing GetVpnSitesConfigurationRequest.
 * List of Vpn-Sites
 *
 */
export interface GetVpnSitesConfigurationRequest {
  /**
   * @member {string[]} [vpnSites] List of resource-ids of the vpn-sites for
   * which config is to be downloaded.
   */
  vpnSites?: string[];
  /**
   * @member {string} [outputBlobSasUrl] The sas-url to download the
   * configurations for vpn-sites
   */
  outputBlobSasUrl?: string;
}

/**
 * @interface
 * An interface representing HubVirtualNetworkConnection.
 * HubVirtualNetworkConnection Resource.
 *
 * @extends SubResource
 */
export interface HubVirtualNetworkConnection extends SubResource {
  /**
   * @member {SubResource} [remoteVirtualNetwork] Reference to the remote
   * virtual network.
   */
  remoteVirtualNetwork?: SubResource;
  /**
   * @member {boolean} [allowHubToRemoteVnetTransit] VirtualHub to RemoteVnet
   * transit to enabled or not.
   */
  allowHubToRemoteVnetTransit?: boolean;
  /**
   * @member {boolean} [allowRemoteVnetToUseHubVnetGateways] Allow RemoteVnet
   * to use Virtual Hub's gateways.
   */
  allowRemoteVnetToUseHubVnetGateways?: boolean;
  /**
   * @member {boolean} [enableInternetSecurity] Enable internet security
   */
  enableInternetSecurity?: boolean;
  /**
   * @member {ProvisioningState} [provisioningState] The provisioning state of
   * the resource. Possible values include: 'Succeeded', 'Updating',
   * 'Deleting', 'Failed'
   */
  provisioningState?: ProvisioningState;
  /**
   * @member {string} [name] The name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] Gets a unique read-only string that changes
   * whenever the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
}

/**
 * @interface
 * An interface representing VirtualHubRoute.
 * VirtualHub route
 *
 */
export interface VirtualHubRoute {
  /**
   * @member {string[]} [addressPrefixes] list of all addressPrefixes.
   */
  addressPrefixes?: string[];
  /**
   * @member {string} [nextHopIpAddress] NextHop ip address.
   */
  nextHopIpAddress?: string;
}

/**
 * @interface
 * An interface representing VirtualHubRouteTable.
 * VirtualHub route table
 *
 */
export interface VirtualHubRouteTable {
  /**
   * @member {VirtualHubRoute[]} [routes] list of all routes.
   */
  routes?: VirtualHubRoute[];
}

/**
 * @interface
 * An interface representing VirtualHub.
 * VirtualHub Resource.
 *
 * @extends Resource
 */
export interface VirtualHub extends Resource {
  /**
   * @member {SubResource} [virtualWan] The VirtualWAN to which the VirtualHub
   * belongs
   */
  virtualWan?: SubResource;
  /**
   * @member {SubResource} [vpnGateway] The VpnGateway associated with this
   * VirtualHub
   */
  vpnGateway?: SubResource;
  /**
   * @member {SubResource} [p2SVpnGateway] The P2SVpnGateway associated with
   * this VirtualHub
   */
  p2SVpnGateway?: SubResource;
  /**
   * @member {SubResource} [expressRouteGateway] The expressRouteGateway
   * associated with this VirtualHub
   */
  expressRouteGateway?: SubResource;
  /**
   * @member {HubVirtualNetworkConnection[]} [virtualNetworkConnections] list
   * of all vnet connections with this VirtualHub.
   */
  virtualNetworkConnections?: HubVirtualNetworkConnection[];
  /**
   * @member {string} [addressPrefix] Address-prefix for this VirtualHub.
   */
  addressPrefix?: string;
  /**
   * @member {VirtualHubRouteTable} [routeTable] The routeTable associated with
   * this virtual hub.
   */
  routeTable?: VirtualHubRouteTable;
  /**
   * @member {ProvisioningState} [provisioningState] The provisioning state of
   * the resource. Possible values include: 'Succeeded', 'Updating',
   * 'Deleting', 'Failed'
   */
  provisioningState?: ProvisioningState;
  /**
   * @member {string} [etag] Gets a unique read-only string that changes
   * whenever the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
}

/**
 * @interface
 * An interface representing VpnConnection.
 * VpnConnection Resource.
 *
 * @extends SubResource
 */
export interface VpnConnection extends SubResource {
  /**
   * @member {SubResource} [remoteVpnSite] Id of the connected vpn site.
   */
  remoteVpnSite?: SubResource;
  /**
   * @member {number} [routingWeight] routing weight for vpn connection.
   */
  routingWeight?: number;
  /**
   * @member {VpnConnectionStatus} [connectionStatus] The connection status.
   * Possible values include: 'Unknown', 'Connecting', 'Connected',
   * 'NotConnected'
   */
  connectionStatus?: VpnConnectionStatus;
  /**
   * @member {VirtualNetworkGatewayConnectionProtocol}
   * [vpnConnectionProtocolType] Connection protocol used for this connection.
   * Possible values include: 'IKEv2', 'IKEv1'
   */
  vpnConnectionProtocolType?: VirtualNetworkGatewayConnectionProtocol;
  /**
   * @member {number} [ingressBytesTransferred] Ingress bytes transferred.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly ingressBytesTransferred?: number;
  /**
   * @member {number} [egressBytesTransferred] Egress bytes transferred.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly egressBytesTransferred?: number;
  /**
   * @member {number} [connectionBandwidth] Expected bandwidth in MBPS.
   */
  connectionBandwidth?: number;
  /**
   * @member {string} [sharedKey] SharedKey for the vpn connection.
   */
  sharedKey?: string;
  /**
   * @member {boolean} [enableBgp] EnableBgp flag
   */
  enableBgp?: boolean;
  /**
   * @member {IpsecPolicy[]} [ipsecPolicies] The IPSec Policies to be
   * considered by this connection.
   */
  ipsecPolicies?: IpsecPolicy[];
  /**
   * @member {boolean} [enableRateLimiting] EnableBgp flag
   */
  enableRateLimiting?: boolean;
  /**
   * @member {boolean} [enableInternetSecurity] Enable internet security
   */
  enableInternetSecurity?: boolean;
  /**
   * @member {ProvisioningState} [provisioningState] The provisioning state of
   * the resource. Possible values include: 'Succeeded', 'Updating',
   * 'Deleting', 'Failed'
   */
  provisioningState?: ProvisioningState;
  /**
   * @member {string} [name] The name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * @member {string} [etag] Gets a unique read-only string that changes
   * whenever the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
}

/**
 * @interface
 * An interface representing VpnGateway.
 * VpnGateway Resource.
 *
 * @extends Resource
 */
export interface VpnGateway extends Resource {
  /**
   * @member {SubResource} [virtualHub] The VirtualHub to which the gateway
   * belongs
   */
  virtualHub?: SubResource;
  /**
   * @member {VpnConnection[]} [connections] list of all vpn connections to the
   * gateway.
   */
  connections?: VpnConnection[];
  /**
   * @member {BgpSettings} [bgpSettings] Local network gateway's BGP speaker
   * settings.
   */
  bgpSettings?: BgpSettings;
  /**
   * @member {ProvisioningState} [provisioningState] The provisioning state of
   * the resource. Possible values include: 'Succeeded', 'Updating',
   * 'Deleting', 'Failed'
   */
  provisioningState?: ProvisioningState;
  /**
   * @member {number} [vpnGatewayScaleUnit] The scale unit for this vpn
   * gateway.
   */
  vpnGatewayScaleUnit?: number;
  /**
   * @member {string} [etag] Gets a unique read-only string that changes
   * whenever the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
}

/**
 * @interface
 * An interface representing VpnSiteId.
 * VpnSite Resource.
 *
 */
export interface VpnSiteId {
  /**
   * @member {string} [vpnSite] The resource-uri of the vpn-site for which
   * config is to be fetched.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly vpnSite?: string;
}

/**
 * @interface
 * An interface representing VirtualWanSecurityProvider.
 * Collection of SecurityProviders.
 *
 */
export interface VirtualWanSecurityProvider {
  /**
   * @member {string} [name] Name of the security provider.
   */
  name?: string;
  /**
   * @member {string} [url] Url of the security provider.
   */
  url?: string;
  /**
   * @member {VirtualWanSecurityProviderType} [type] Name of the security
   * provider. Possible values include: 'External', 'Native'
   */
  type?: VirtualWanSecurityProviderType;
}

/**
 * @interface
 * An interface representing VirtualWanSecurityProviders.
 * Collection of SecurityProviders.
 *
 */
export interface VirtualWanSecurityProviders {
  /**
   * @member {VirtualWanSecurityProvider[]} [supportedProviders]
   */
  supportedProviders?: VirtualWanSecurityProvider[];
}

/**
 * @interface
 * An interface representing VpnClientConnectionHealth.
 * VpnClientConnectionHealth properties
 *
 */
export interface VpnClientConnectionHealth {
  /**
   * @member {number} [totalIngressBytesTransferred] Total of the Ingress Bytes
   * Transferred in this P2S Vpn connection
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly totalIngressBytesTransferred?: number;
  /**
   * @member {number} [totalEgressBytesTransferred] Total of the Egress Bytes
   * Transferred in this connection
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly totalEgressBytesTransferred?: number;
  /**
   * @member {number} [vpnClientConnectionsCount] The total of p2s vpn clients
   * connected at this time to this P2SVpnGateway.
   */
  vpnClientConnectionsCount?: number;
  /**
   * @member {string[]} [allocatedIpAddresses] List of allocated ip addresses
   * to the connected p2s vpn clients.
   */
  allocatedIpAddresses?: string[];
}

/**
 * @interface
 * An interface representing P2SVpnGateway.
 * P2SVpnGateway Resource.
 *
 * @extends Resource
 */
export interface P2SVpnGateway extends Resource {
  /**
   * @member {SubResource} [virtualHub] The VirtualHub to which the gateway
   * belongs
   */
  virtualHub?: SubResource;
  /**
   * @member {ProvisioningState} [provisioningState] The provisioning state of
   * the resource. Possible values include: 'Succeeded', 'Updating',
   * 'Deleting', 'Failed'
   */
  provisioningState?: ProvisioningState;
  /**
   * @member {number} [vpnGatewayScaleUnit] The scale unit for this p2s vpn
   * gateway.
   */
  vpnGatewayScaleUnit?: number;
  /**
   * @member {SubResource} [p2SVpnServerConfiguration] The
   * P2SVpnServerConfiguration to which the p2sVpnGateway is attached to.
   */
  p2SVpnServerConfiguration?: SubResource;
  /**
   * @member {AddressSpace} [vpnClientAddressPool] The reference of the address
   * space resource which represents Address space for P2S VpnClient.
   */
  vpnClientAddressPool?: AddressSpace;
  /**
   * @member {VpnClientConnectionHealth} [vpnClientConnectionHealth] All P2S
   * vpnclients' connection health status.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly vpnClientConnectionHealth?: VpnClientConnectionHealth;
  /**
   * @member {string} [etag] Gets a unique read-only string that changes
   * whenever the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
}

/**
 * @interface
 * An interface representing P2SVpnProfileParameters.
 * Vpn Client Parameters for package generation
 *
 */
export interface P2SVpnProfileParameters {
  /**
   * @member {AuthenticationMethod} [authenticationMethod] VPN client
   * Authentication Method. Possible values are: 'EAPTLS' and 'EAPMSCHAPv2'.
   * Possible values include: 'EAPTLS', 'EAPMSCHAPv2'
   */
  authenticationMethod?: AuthenticationMethod;
}

/**
 * @interface
 * An interface representing VpnProfileResponse.
 * Vpn Profile Response for package generation
 *
 */
export interface VpnProfileResponse {
  /**
   * @member {string} [profileUrl] URL to the VPN profile
   */
  profileUrl?: string;
}

/**
 * @interface
 * An interface representing ApplicationGatewaysBackendHealthOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ApplicationGatewaysBackendHealthOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Expands BackendAddressPool and
   * BackendHttpSettings referenced in backend health.
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing ApplicationGatewaysBeginBackendHealthOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ApplicationGatewaysBeginBackendHealthOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Expands BackendAddressPool and
   * BackendHttpSettings referenced in backend health.
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing InterfaceEndpointsGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface InterfaceEndpointsGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Expands referenced resources.
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing LoadBalancersGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface LoadBalancersGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Expands referenced resources.
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing InboundNatRulesGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface InboundNatRulesGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Expands referenced resources.
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing NetworkInterfacesGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface NetworkInterfacesGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Expands referenced resources.
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing NetworkInterfacesGetVirtualMachineScaleSetNetworkInterfaceOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface NetworkInterfacesGetVirtualMachineScaleSetNetworkInterfaceOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Expands referenced resources.
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing NetworkInterfacesListVirtualMachineScaleSetIpConfigurationsOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface NetworkInterfacesListVirtualMachineScaleSetIpConfigurationsOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Expands referenced resources.
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing NetworkInterfacesGetVirtualMachineScaleSetIpConfigurationOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface NetworkInterfacesGetVirtualMachineScaleSetIpConfigurationOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Expands referenced resources.
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing NetworkProfilesGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface NetworkProfilesGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Expands referenced resources.
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing NetworkSecurityGroupsGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface NetworkSecurityGroupsGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Expands referenced resources.
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing PublicIPAddressesGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface PublicIPAddressesGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Expands referenced resources.
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing PublicIPAddressesGetVirtualMachineScaleSetPublicIPAddressOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface PublicIPAddressesGetVirtualMachineScaleSetPublicIPAddressOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Expands referenced resources.
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing PublicIPPrefixesGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface PublicIPPrefixesGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Expands referenced resources.
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing RouteFiltersGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface RouteFiltersGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Expands referenced express route bgp peering
   * resources.
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing RouteTablesGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface RouteTablesGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Expands referenced resources.
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing ServiceEndpointPoliciesGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ServiceEndpointPoliciesGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Expands referenced resources.
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing VirtualNetworksGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface VirtualNetworksGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Expands referenced resources.
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing SubnetsGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SubnetsGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Expands referenced resources.
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing VirtualNetworkGatewaysResetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface VirtualNetworkGatewaysResetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [gatewayVip] Virtual network gateway vip address supplied
   * to the begin reset of the active-active feature enabled gateway.
   */
  gatewayVip?: string;
}

/**
 * @interface
 * An interface representing VirtualNetworkGatewaysGetBgpPeerStatusOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface VirtualNetworkGatewaysGetBgpPeerStatusOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [peer] The IP address of the peer to retrieve the status
   * of.
   */
  peer?: string;
}

/**
 * @interface
 * An interface representing VirtualNetworkGatewaysBeginResetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface VirtualNetworkGatewaysBeginResetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [gatewayVip] Virtual network gateway vip address supplied
   * to the begin reset of the active-active feature enabled gateway.
   */
  gatewayVip?: string;
}

/**
 * @interface
 * An interface representing VirtualNetworkGatewaysBeginGetBgpPeerStatusOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface VirtualNetworkGatewaysBeginGetBgpPeerStatusOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [peer] The IP address of the peer to retrieve the status
   * of.
   */
  peer?: string;
}

/**
 * @interface
 * An interface representing NetworkManagementClientOptions.
 * @extends AzureServiceClientOptions
 */
export interface NetworkManagementClientOptions extends AzureServiceClientOptions {
  /**
   * @member {string} [baseUri]
   */
  baseUri?: string;
}


/**
 * @interface
 * An interface representing the ApplicationGatewayListResult.
 * Response for ListApplicationGateways API service call.
 *
 * @extends Array<ApplicationGateway>
 */
export interface ApplicationGatewayListResult extends Array<ApplicationGateway> {
  /**
   * @member {string} [nextLink] URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ApplicationGatewayAvailableSslPredefinedPolicies.
 * Response for ApplicationGatewayAvailableSslOptions API service call.
 *
 * @extends Array<ApplicationGatewaySslPredefinedPolicy>
 */
export interface ApplicationGatewayAvailableSslPredefinedPolicies extends Array<ApplicationGatewaySslPredefinedPolicy> {
  /**
   * @member {string} [nextLink] URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ApplicationSecurityGroupListResult.
 * A list of application security groups.
 *
 * @extends Array<ApplicationSecurityGroup>
 */
export interface ApplicationSecurityGroupListResult extends Array<ApplicationSecurityGroup> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the AvailableDelegationsResult.
 * An array of available delegations.
 *
 * @extends Array<AvailableDelegation>
 */
export interface AvailableDelegationsResult extends Array<AvailableDelegation> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the AzureFirewallListResult.
 * Response for ListAzureFirewalls API service call.
 *
 * @extends Array<AzureFirewall>
 */
export interface AzureFirewallListResult extends Array<AzureFirewall> {
  /**
   * @member {string} [nextLink] URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the AzureFirewallFqdnTagListResult.
 * Response for ListAzureFirewallFqdnTags API service call.
 *
 * @extends Array<AzureFirewallFqdnTag>
 */
export interface AzureFirewallFqdnTagListResult extends Array<AzureFirewallFqdnTag> {
  /**
   * @member {string} [nextLink] URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the DdosProtectionPlanListResult.
 * A list of DDoS protection plans.
 *
 * @extends Array<DdosProtectionPlan>
 */
export interface DdosProtectionPlanListResult extends Array<DdosProtectionPlan> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the EndpointServicesListResult.
 * Response for the ListAvailableEndpointServices API service call.
 *
 * @extends Array<EndpointServiceResult>
 */
export interface EndpointServicesListResult extends Array<EndpointServiceResult> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the AuthorizationListResult.
 * Response for ListAuthorizations API service call retrieves all
 * authorizations that belongs to an ExpressRouteCircuit.
 *
 * @extends Array<ExpressRouteCircuitAuthorization>
 */
export interface AuthorizationListResult extends Array<ExpressRouteCircuitAuthorization> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ExpressRouteCircuitPeeringListResult.
 * Response for ListPeering API service call retrieves all peerings that belong
 * to an ExpressRouteCircuit.
 *
 * @extends Array<ExpressRouteCircuitPeering>
 */
export interface ExpressRouteCircuitPeeringListResult extends Array<ExpressRouteCircuitPeering> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ExpressRouteCircuitListResult.
 * Response for ListExpressRouteCircuit API service call.
 *
 * @extends Array<ExpressRouteCircuit>
 */
export interface ExpressRouteCircuitListResult extends Array<ExpressRouteCircuit> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ExpressRouteServiceProviderListResult.
 * Response for the ListExpressRouteServiceProvider API service call.
 *
 * @extends Array<ExpressRouteServiceProvider>
 */
export interface ExpressRouteServiceProviderListResult extends Array<ExpressRouteServiceProvider> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ExpressRouteCrossConnectionListResult.
 * Response for ListExpressRouteCrossConnection API service call.
 *
 * @extends Array<ExpressRouteCrossConnection>
 */
export interface ExpressRouteCrossConnectionListResult extends Array<ExpressRouteCrossConnection> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the ExpressRouteCrossConnectionPeeringList.
 * Response for ListPeering API service call retrieves all peerings that belong
 * to an ExpressRouteCrossConnection.
 *
 * @extends Array<ExpressRouteCrossConnectionPeering>
 */
export interface ExpressRouteCrossConnectionPeeringList extends Array<ExpressRouteCrossConnectionPeering> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the ExpressRoutePortsLocationListResult.
 * @summary ExpressRoutePorts Location List Result
 *
 * Response for ListExpressRoutePortsLocations API service call.
 *
 * @extends Array<ExpressRoutePortsLocation>
 */
export interface ExpressRoutePortsLocationListResult extends Array<ExpressRoutePortsLocation> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ExpressRoutePortListResult.
 * @summary ExpressRoute Port List Result
 *
 * Response for ListExpressRoutePorts API service call.
 *
 * @extends Array<ExpressRoutePort>
 */
export interface ExpressRoutePortListResult extends Array<ExpressRoutePort> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ExpressRouteLinkListResult.
 * @summary ExpressRouteLink List Result
 *
 * Response for ListExpressRouteLinks API service call.
 *
 * @extends Array<ExpressRouteLink>
 */
export interface ExpressRouteLinkListResult extends Array<ExpressRouteLink> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the InterfaceEndpointListResult.
 * Response for the ListInterfaceEndpoints API service call.
 *
 * @extends Array<InterfaceEndpoint>
 */
export interface InterfaceEndpointListResult extends Array<InterfaceEndpoint> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the LoadBalancerListResult.
 * Response for ListLoadBalancers API service call.
 *
 * @extends Array<LoadBalancer>
 */
export interface LoadBalancerListResult extends Array<LoadBalancer> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the LoadBalancerBackendAddressPoolListResult.
 * Response for ListBackendAddressPool API service call.
 *
 * @extends Array<BackendAddressPool>
 */
export interface LoadBalancerBackendAddressPoolListResult extends Array<BackendAddressPool> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the LoadBalancerFrontendIPConfigurationListResult.
 * Response for ListFrontendIPConfiguration API service call.
 *
 * @extends Array<FrontendIPConfiguration>
 */
export interface LoadBalancerFrontendIPConfigurationListResult extends Array<FrontendIPConfiguration> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the InboundNatRuleListResult.
 * Response for ListInboundNatRule API service call.
 *
 * @extends Array<InboundNatRule>
 */
export interface InboundNatRuleListResult extends Array<InboundNatRule> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the LoadBalancerLoadBalancingRuleListResult.
 * Response for ListLoadBalancingRule API service call.
 *
 * @extends Array<LoadBalancingRule>
 */
export interface LoadBalancerLoadBalancingRuleListResult extends Array<LoadBalancingRule> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the LoadBalancerOutboundRuleListResult.
 * Response for ListOutboundRule API service call.
 *
 * @extends Array<OutboundRule>
 */
export interface LoadBalancerOutboundRuleListResult extends Array<OutboundRule> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the NetworkInterfaceListResult.
 * Response for the ListNetworkInterface API service call.
 *
 * @extends Array<NetworkInterface>
 */
export interface NetworkInterfaceListResult extends Array<NetworkInterface> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the LoadBalancerProbeListResult.
 * Response for ListProbe API service call.
 *
 * @extends Array<Probe>
 */
export interface LoadBalancerProbeListResult extends Array<Probe> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the NetworkInterfaceIPConfigurationListResult.
 * Response for list ip configurations API service call.
 *
 * @extends Array<NetworkInterfaceIPConfiguration>
 */
export interface NetworkInterfaceIPConfigurationListResult extends Array<NetworkInterfaceIPConfiguration> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the NetworkInterfaceLoadBalancerListResult.
 * Response for list ip configurations API service call.
 *
 * @extends Array<LoadBalancer>
 */
export interface NetworkInterfaceLoadBalancerListResult extends Array<LoadBalancer> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the NetworkInterfaceTapConfigurationListResult.
 * Response for list tap configurations API service call.
 *
 * @extends Array<NetworkInterfaceTapConfiguration>
 */
export interface NetworkInterfaceTapConfigurationListResult extends Array<NetworkInterfaceTapConfiguration> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the NetworkProfileListResult.
 * Response for ListNetworkProfiles API service call.
 *
 * @extends Array<NetworkProfile>
 */
export interface NetworkProfileListResult extends Array<NetworkProfile> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the NetworkSecurityGroupListResult.
 * Response for ListNetworkSecurityGroups API service call.
 *
 * @extends Array<NetworkSecurityGroup>
 */
export interface NetworkSecurityGroupListResult extends Array<NetworkSecurityGroup> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the SecurityRuleListResult.
 * Response for ListSecurityRule API service call. Retrieves all security rules
 * that belongs to a network security group.
 *
 * @extends Array<SecurityRule>
 */
export interface SecurityRuleListResult extends Array<SecurityRule> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the NetworkWatcherListResult.
 * List of network watcher resources.
 *
 * @extends Array<NetworkWatcher>
 */
export interface NetworkWatcherListResult extends Array<NetworkWatcher> {
}

/**
 * @interface
 * An interface representing the PacketCaptureListResult.
 * List of packet capture sessions.
 *
 * @extends Array<PacketCaptureResult>
 */
export interface PacketCaptureListResult extends Array<PacketCaptureResult> {
}

/**
 * @interface
 * An interface representing the ConnectionMonitorListResult.
 * List of connection monitors.
 *
 * @extends Array<ConnectionMonitorResult>
 */
export interface ConnectionMonitorListResult extends Array<ConnectionMonitorResult> {
}

/**
 * @interface
 * An interface representing the OperationListResult.
 * Result of the request to list Network operations. It contains a list of
 * operations and a URL link to get the next set of results.
 *
 * @extends Array<Operation>
 */
export interface OperationListResult extends Array<Operation> {
  /**
   * @member {string} [nextLink] URL to get the next set of operation list
   * results if there are any.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the PublicIPAddressListResult.
 * Response for ListPublicIpAddresses API service call.
 *
 * @extends Array<PublicIPAddress>
 */
export interface PublicIPAddressListResult extends Array<PublicIPAddress> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the PublicIPPrefixListResult.
 * Response for ListPublicIpPrefixes API service call.
 *
 * @extends Array<PublicIPPrefix>
 */
export interface PublicIPPrefixListResult extends Array<PublicIPPrefix> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the RouteFilterListResult.
 * Response for the ListRouteFilters API service call.
 *
 * @extends Array<RouteFilter>
 */
export interface RouteFilterListResult extends Array<RouteFilter> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the RouteFilterRuleListResult.
 * Response for the ListRouteFilterRules API service call
 *
 * @extends Array<RouteFilterRule>
 */
export interface RouteFilterRuleListResult extends Array<RouteFilterRule> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the RouteTableListResult.
 * Response for the ListRouteTable API service call.
 *
 * @extends Array<RouteTable>
 */
export interface RouteTableListResult extends Array<RouteTable> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the RouteListResult.
 * Response for the ListRoute API service call
 *
 * @extends Array<Route>
 */
export interface RouteListResult extends Array<Route> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the BgpServiceCommunityListResult.
 * Response for the ListServiceCommunity API service call.
 *
 * @extends Array<BgpServiceCommunity>
 */
export interface BgpServiceCommunityListResult extends Array<BgpServiceCommunity> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ServiceEndpointPolicyListResult.
 * Response for ListServiceEndpointPolicies API service call.
 *
 * @extends Array<ServiceEndpointPolicy>
 */
export interface ServiceEndpointPolicyListResult extends Array<ServiceEndpointPolicy> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the ServiceEndpointPolicyDefinitionListResult.
 * Response for ListServiceEndpointPolicyDefinition API service call. Retrieves
 * all service endpoint policy definition that belongs to a service endpoint
 * policy.
 *
 * @extends Array<ServiceEndpointPolicyDefinition>
 */
export interface ServiceEndpointPolicyDefinitionListResult extends Array<ServiceEndpointPolicyDefinition> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the UsagesListResult.
 * The list usages operation response.
 *
 * @extends Array<Usage>
 */
export interface UsagesListResult extends Array<Usage> {
  /**
   * @member {string} [nextLink] URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the VirtualNetworkListResult.
 * Response for the ListVirtualNetworks API service call.
 *
 * @extends Array<VirtualNetwork>
 */
export interface VirtualNetworkListResult extends Array<VirtualNetwork> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the VirtualNetworkListUsageResult.
 * Response for the virtual networks GetUsage API service call.
 *
 * @extends Array<VirtualNetworkUsage>
 */
export interface VirtualNetworkListUsageResult extends Array<VirtualNetworkUsage> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the SubnetListResult.
 * Response for ListSubnets API service callRetrieves all subnet that belongs
 * to a virtual network
 *
 * @extends Array<Subnet>
 */
export interface SubnetListResult extends Array<Subnet> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the VirtualNetworkPeeringListResult.
 * Response for ListSubnets API service call. Retrieves all subnets that belong
 * to a virtual network.
 *
 * @extends Array<VirtualNetworkPeering>
 */
export interface VirtualNetworkPeeringListResult extends Array<VirtualNetworkPeering> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the VirtualNetworkTapListResult.
 * Response for ListVirtualNetworkTap API service call.
 *
 * @extends Array<VirtualNetworkTap>
 */
export interface VirtualNetworkTapListResult extends Array<VirtualNetworkTap> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the VirtualNetworkGatewayListResult.
 * Response for the ListVirtualNetworkGateways API service call.
 *
 * @extends Array<VirtualNetworkGateway>
 */
export interface VirtualNetworkGatewayListResult extends Array<VirtualNetworkGateway> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the VirtualNetworkGatewayListConnectionsResult.
 * Response for the VirtualNetworkGatewayListConnections API service call
 *
 * @extends Array<VirtualNetworkGatewayConnectionListEntity>
 */
export interface VirtualNetworkGatewayListConnectionsResult extends Array<VirtualNetworkGatewayConnectionListEntity> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the VirtualNetworkGatewayConnectionListResult.
 * Response for the ListVirtualNetworkGatewayConnections API service call
 *
 * @extends Array<VirtualNetworkGatewayConnection>
 */
export interface VirtualNetworkGatewayConnectionListResult extends Array<VirtualNetworkGatewayConnection> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the LocalNetworkGatewayListResult.
 * Response for ListLocalNetworkGateways API service call.
 *
 * @extends Array<LocalNetworkGateway>
 */
export interface LocalNetworkGatewayListResult extends Array<LocalNetworkGateway> {
  /**
   * @member {string} [nextLink] The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the ListVirtualWANsResult.
 * Result of the request to list VirtualWANs. It contains a list of VirtualWANs
 * and a URL nextLink to get the next set of results.
 *
 * @extends Array<VirtualWAN>
 */
export interface ListVirtualWANsResult extends Array<VirtualWAN> {
  /**
   * @member {string} [nextLink] URL to get the next set of operation list
   * results if there are any.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ListVpnSitesResult.
 * Result of the request to list VpnSites. It contains a list of VpnSites and a
 * URL nextLink to get the next set of results.
 *
 * @extends Array<VpnSite>
 */
export interface ListVpnSitesResult extends Array<VpnSite> {
  /**
   * @member {string} [nextLink] URL to get the next set of operation list
   * results if there are any.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ListVirtualHubsResult.
 * Result of the request to list VirtualHubs. It contains a list of VirtualHubs
 * and a URL nextLink to get the next set of results.
 *
 * @extends Array<VirtualHub>
 */
export interface ListVirtualHubsResult extends Array<VirtualHub> {
  /**
   * @member {string} [nextLink] URL to get the next set of operation list
   * results if there are any.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ListHubVirtualNetworkConnectionsResult.
 * List of HubVirtualNetworkConnections and a URL nextLink to get the next set
 * of results.
 *
 * @extends Array<HubVirtualNetworkConnection>
 */
export interface ListHubVirtualNetworkConnectionsResult extends Array<HubVirtualNetworkConnection> {
  /**
   * @member {string} [nextLink] URL to get the next set of operation list
   * results if there are any.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ListVpnGatewaysResult.
 * Result of the request to list VpnGateways. It contains a list of VpnGateways
 * and a URL nextLink to get the next set of results.
 *
 * @extends Array<VpnGateway>
 */
export interface ListVpnGatewaysResult extends Array<VpnGateway> {
  /**
   * @member {string} [nextLink] URL to get the next set of operation list
   * results if there are any.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ListVpnConnectionsResult.
 * Result of the request to list all vpn connections to a virtual wan vpn
 * gateway. It contains a list of Vpn Connections and a URL nextLink to get the
 * next set of results.
 *
 * @extends Array<VpnConnection>
 */
export interface ListVpnConnectionsResult extends Array<VpnConnection> {
  /**
   * @member {string} [nextLink] URL to get the next set of operation list
   * results if there are any.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ListP2SVpnServerConfigurationsResult.
 * Result of the request to list all P2SVpnServerConfigurations associated to a
 * VirtualWan. It contains a list of P2SVpnServerConfigurations and a URL
 * nextLink to get the next set of results.
 *
 * @extends Array<P2SVpnServerConfiguration>
 */
export interface ListP2SVpnServerConfigurationsResult extends Array<P2SVpnServerConfiguration> {
  /**
   * @member {string} [nextLink] URL to get the next set of operation list
   * results if there are any.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ListP2SVpnGatewaysResult.
 * Result of the request to list P2SVpnGateways. It contains a list of
 * P2SVpnGateways and a URL nextLink to get the next set of results.
 *
 * @extends Array<P2SVpnGateway>
 */
export interface ListP2SVpnGatewaysResult extends Array<P2SVpnGateway> {
  /**
   * @member {string} [nextLink] URL to get the next set of operation list
   * results if there are any.
   */
  nextLink?: string;
}

/**
 * Defines values for IPAllocationMethod.
 * Possible values include: 'Static', 'Dynamic'
 * @readonly
 * @enum {string}
 */
export type IPAllocationMethod = 'Static' | 'Dynamic';

/**
 * Defines values for SecurityRuleProtocol.
 * Possible values include: 'Tcp', 'Udp', '*'
 * @readonly
 * @enum {string}
 */
export type SecurityRuleProtocol = 'Tcp' | 'Udp' | '*';

/**
 * Defines values for SecurityRuleAccess.
 * Possible values include: 'Allow', 'Deny'
 * @readonly
 * @enum {string}
 */
export type SecurityRuleAccess = 'Allow' | 'Deny';

/**
 * Defines values for SecurityRuleDirection.
 * Possible values include: 'Inbound', 'Outbound'
 * @readonly
 * @enum {string}
 */
export type SecurityRuleDirection = 'Inbound' | 'Outbound';

/**
 * Defines values for RouteNextHopType.
 * Possible values include: 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance',
 * 'None'
 * @readonly
 * @enum {string}
 */
export type RouteNextHopType = 'VirtualNetworkGateway' | 'VnetLocal' | 'Internet' | 'VirtualAppliance' | 'None';

/**
 * Defines values for PublicIPAddressSkuName.
 * Possible values include: 'Basic', 'Standard'
 * @readonly
 * @enum {string}
 */
export type PublicIPAddressSkuName = 'Basic' | 'Standard';

/**
 * Defines values for IPVersion.
 * Possible values include: 'IPv4', 'IPv6'
 * @readonly
 * @enum {string}
 */
export type IPVersion = 'IPv4' | 'IPv6';

/**
 * Defines values for TransportProtocol.
 * Possible values include: 'Udp', 'Tcp', 'All'
 * @readonly
 * @enum {string}
 */
export type TransportProtocol = 'Udp' | 'Tcp' | 'All';

/**
 * Defines values for ApplicationGatewayProtocol.
 * Possible values include: 'Http', 'Https'
 * @readonly
 * @enum {string}
 */
export type ApplicationGatewayProtocol = 'Http' | 'Https';

/**
 * Defines values for ApplicationGatewayCookieBasedAffinity.
 * Possible values include: 'Enabled', 'Disabled'
 * @readonly
 * @enum {string}
 */
export type ApplicationGatewayCookieBasedAffinity = 'Enabled' | 'Disabled';

/**
 * Defines values for ApplicationGatewayBackendHealthServerHealth.
 * Possible values include: 'Unknown', 'Up', 'Down', 'Partial', 'Draining'
 * @readonly
 * @enum {string}
 */
export type ApplicationGatewayBackendHealthServerHealth = 'Unknown' | 'Up' | 'Down' | 'Partial' | 'Draining';

/**
 * Defines values for ApplicationGatewaySkuName.
 * Possible values include: 'Standard_Small', 'Standard_Medium', 'Standard_Large', 'WAF_Medium',
 * 'WAF_Large', 'Standard_v2', 'WAF_v2'
 * @readonly
 * @enum {string}
 */
export type ApplicationGatewaySkuName = 'Standard_Small' | 'Standard_Medium' | 'Standard_Large' | 'WAF_Medium' | 'WAF_Large' | 'Standard_v2' | 'WAF_v2';

/**
 * Defines values for ApplicationGatewayTier.
 * Possible values include: 'Standard', 'WAF', 'Standard_v2', 'WAF_v2'
 * @readonly
 * @enum {string}
 */
export type ApplicationGatewayTier = 'Standard' | 'WAF' | 'Standard_v2' | 'WAF_v2';

/**
 * Defines values for ApplicationGatewaySslProtocol.
 * Possible values include: 'TLSv1_0', 'TLSv1_1', 'TLSv1_2'
 * @readonly
 * @enum {string}
 */
export type ApplicationGatewaySslProtocol = 'TLSv1_0' | 'TLSv1_1' | 'TLSv1_2';

/**
 * Defines values for ApplicationGatewaySslPolicyType.
 * Possible values include: 'Predefined', 'Custom'
 * @readonly
 * @enum {string}
 */
export type ApplicationGatewaySslPolicyType = 'Predefined' | 'Custom';

/**
 * Defines values for ApplicationGatewaySslPolicyName.
 * Possible values include: 'AppGwSslPolicy20150501', 'AppGwSslPolicy20170401',
 * 'AppGwSslPolicy20170401S'
 * @readonly
 * @enum {string}
 */
export type ApplicationGatewaySslPolicyName = 'AppGwSslPolicy20150501' | 'AppGwSslPolicy20170401' | 'AppGwSslPolicy20170401S';

/**
 * Defines values for ApplicationGatewaySslCipherSuite.
 * Possible values include: 'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384',
 * 'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA',
 * 'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA', 'TLS_DHE_RSA_WITH_AES_256_GCM_SHA384',
 * 'TLS_DHE_RSA_WITH_AES_128_GCM_SHA256', 'TLS_DHE_RSA_WITH_AES_256_CBC_SHA',
 * 'TLS_DHE_RSA_WITH_AES_128_CBC_SHA', 'TLS_RSA_WITH_AES_256_GCM_SHA384',
 * 'TLS_RSA_WITH_AES_128_GCM_SHA256', 'TLS_RSA_WITH_AES_256_CBC_SHA256',
 * 'TLS_RSA_WITH_AES_128_CBC_SHA256', 'TLS_RSA_WITH_AES_256_CBC_SHA',
 * 'TLS_RSA_WITH_AES_128_CBC_SHA', 'TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384',
 * 'TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256', 'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384',
 * 'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256', 'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA',
 * 'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA', 'TLS_DHE_DSS_WITH_AES_256_CBC_SHA256',
 * 'TLS_DHE_DSS_WITH_AES_128_CBC_SHA256', 'TLS_DHE_DSS_WITH_AES_256_CBC_SHA',
 * 'TLS_DHE_DSS_WITH_AES_128_CBC_SHA', 'TLS_RSA_WITH_3DES_EDE_CBC_SHA'
 * @readonly
 * @enum {string}
 */
export type ApplicationGatewaySslCipherSuite = 'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384' | 'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' | 'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA' | 'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA' | 'TLS_DHE_RSA_WITH_AES_256_GCM_SHA384' | 'TLS_DHE_RSA_WITH_AES_128_GCM_SHA256' | 'TLS_DHE_RSA_WITH_AES_256_CBC_SHA' | 'TLS_DHE_RSA_WITH_AES_128_CBC_SHA' | 'TLS_RSA_WITH_AES_256_GCM_SHA384' | 'TLS_RSA_WITH_AES_128_GCM_SHA256' | 'TLS_RSA_WITH_AES_256_CBC_SHA256' | 'TLS_RSA_WITH_AES_128_CBC_SHA256' | 'TLS_RSA_WITH_AES_256_CBC_SHA' | 'TLS_RSA_WITH_AES_128_CBC_SHA' | 'TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384' | 'TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256' | 'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384' | 'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256' | 'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA' | 'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA' | 'TLS_DHE_DSS_WITH_AES_256_CBC_SHA256' | 'TLS_DHE_DSS_WITH_AES_128_CBC_SHA256' | 'TLS_DHE_DSS_WITH_AES_256_CBC_SHA' | 'TLS_DHE_DSS_WITH_AES_128_CBC_SHA' | 'TLS_RSA_WITH_3DES_EDE_CBC_SHA';

/**
 * Defines values for ApplicationGatewayCustomErrorStatusCode.
 * Possible values include: 'HttpStatus403', 'HttpStatus502'
 * @readonly
 * @enum {string}
 */
export type ApplicationGatewayCustomErrorStatusCode = 'HttpStatus403' | 'HttpStatus502';

/**
 * Defines values for ApplicationGatewayRequestRoutingRuleType.
 * Possible values include: 'Basic', 'PathBasedRouting'
 * @readonly
 * @enum {string}
 */
export type ApplicationGatewayRequestRoutingRuleType = 'Basic' | 'PathBasedRouting';

/**
 * Defines values for ApplicationGatewayRedirectType.
 * Possible values include: 'Permanent', 'Found', 'SeeOther', 'Temporary'
 * @readonly
 * @enum {string}
 */
export type ApplicationGatewayRedirectType = 'Permanent' | 'Found' | 'SeeOther' | 'Temporary';

/**
 * Defines values for ApplicationGatewayOperationalState.
 * Possible values include: 'Stopped', 'Starting', 'Running', 'Stopping'
 * @readonly
 * @enum {string}
 */
export type ApplicationGatewayOperationalState = 'Stopped' | 'Starting' | 'Running' | 'Stopping';

/**
 * Defines values for ApplicationGatewayFirewallMode.
 * Possible values include: 'Detection', 'Prevention'
 * @readonly
 * @enum {string}
 */
export type ApplicationGatewayFirewallMode = 'Detection' | 'Prevention';

/**
 * Defines values for ProvisioningState.
 * Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
 * @readonly
 * @enum {string}
 */
export type ProvisioningState = 'Succeeded' | 'Updating' | 'Deleting' | 'Failed';

/**
 * Defines values for AzureFirewallRCActionType.
 * Possible values include: 'Allow', 'Deny'
 * @readonly
 * @enum {string}
 */
export type AzureFirewallRCActionType = 'Allow' | 'Deny';

/**
 * Defines values for AzureFirewallApplicationRuleProtocolType.
 * Possible values include: 'Http', 'Https'
 * @readonly
 * @enum {string}
 */
export type AzureFirewallApplicationRuleProtocolType = 'Http' | 'Https';

/**
 * Defines values for AzureFirewallNatRCActionType.
 * Possible values include: 'Snat', 'Dnat'
 * @readonly
 * @enum {string}
 */
export type AzureFirewallNatRCActionType = 'Snat' | 'Dnat';

/**
 * Defines values for AzureFirewallNetworkRuleProtocol.
 * Possible values include: 'TCP', 'UDP', 'Any', 'ICMP'
 * @readonly
 * @enum {string}
 */
export type AzureFirewallNetworkRuleProtocol = 'TCP' | 'UDP' | 'Any' | 'ICMP';

/**
 * Defines values for AuthorizationUseStatus.
 * Possible values include: 'Available', 'InUse'
 * @readonly
 * @enum {string}
 */
export type AuthorizationUseStatus = 'Available' | 'InUse';

/**
 * Defines values for ExpressRouteCircuitPeeringAdvertisedPublicPrefixState.
 * Possible values include: 'NotConfigured', 'Configuring', 'Configured', 'ValidationNeeded'
 * @readonly
 * @enum {string}
 */
export type ExpressRouteCircuitPeeringAdvertisedPublicPrefixState = 'NotConfigured' | 'Configuring' | 'Configured' | 'ValidationNeeded';

/**
 * Defines values for Access.
 * Possible values include: 'Allow', 'Deny'
 * @readonly
 * @enum {string}
 */
export type Access = 'Allow' | 'Deny';

/**
 * Defines values for ExpressRoutePeeringType.
 * Possible values include: 'AzurePublicPeering', 'AzurePrivatePeering', 'MicrosoftPeering'
 * @readonly
 * @enum {string}
 */
export type ExpressRoutePeeringType = 'AzurePublicPeering' | 'AzurePrivatePeering' | 'MicrosoftPeering';

/**
 * Defines values for ExpressRoutePeeringState.
 * Possible values include: 'Disabled', 'Enabled'
 * @readonly
 * @enum {string}
 */
export type ExpressRoutePeeringState = 'Disabled' | 'Enabled';

/**
 * Defines values for CircuitConnectionStatus.
 * Possible values include: 'Connected', 'Connecting', 'Disconnected'
 * @readonly
 * @enum {string}
 */
export type CircuitConnectionStatus = 'Connected' | 'Connecting' | 'Disconnected';

/**
 * Defines values for ExpressRouteCircuitPeeringState.
 * Possible values include: 'Disabled', 'Enabled'
 * @readonly
 * @enum {string}
 */
export type ExpressRouteCircuitPeeringState = 'Disabled' | 'Enabled';

/**
 * Defines values for ExpressRouteCircuitSkuTier.
 * Possible values include: 'Standard', 'Premium', 'Basic'
 * @readonly
 * @enum {string}
 */
export type ExpressRouteCircuitSkuTier = 'Standard' | 'Premium' | 'Basic';

/**
 * Defines values for ExpressRouteCircuitSkuFamily.
 * Possible values include: 'UnlimitedData', 'MeteredData'
 * @readonly
 * @enum {string}
 */
export type ExpressRouteCircuitSkuFamily = 'UnlimitedData' | 'MeteredData';

/**
 * Defines values for ServiceProviderProvisioningState.
 * Possible values include: 'NotProvisioned', 'Provisioning', 'Provisioned', 'Deprovisioning'
 * @readonly
 * @enum {string}
 */
export type ServiceProviderProvisioningState = 'NotProvisioned' | 'Provisioning' | 'Provisioned' | 'Deprovisioning';

/**
 * Defines values for ExpressRouteLinkConnectorType.
 * Possible values include: 'LC', 'SC'
 * @readonly
 * @enum {string}
 */
export type ExpressRouteLinkConnectorType = 'LC' | 'SC';

/**
 * Defines values for ExpressRouteLinkAdminState.
 * Possible values include: 'Enabled', 'Disabled'
 * @readonly
 * @enum {string}
 */
export type ExpressRouteLinkAdminState = 'Enabled' | 'Disabled';

/**
 * Defines values for ExpressRoutePortsEncapsulation.
 * Possible values include: 'Dot1Q', 'QinQ'
 * @readonly
 * @enum {string}
 */
export type ExpressRoutePortsEncapsulation = 'Dot1Q' | 'QinQ';

/**
 * Defines values for LoadBalancerSkuName.
 * Possible values include: 'Basic', 'Standard'
 * @readonly
 * @enum {string}
 */
export type LoadBalancerSkuName = 'Basic' | 'Standard';

/**
 * Defines values for LoadDistribution.
 * Possible values include: 'Default', 'SourceIP', 'SourceIPProtocol'
 * @readonly
 * @enum {string}
 */
export type LoadDistribution = 'Default' | 'SourceIP' | 'SourceIPProtocol';

/**
 * Defines values for ProbeProtocol.
 * Possible values include: 'Http', 'Tcp', 'Https'
 * @readonly
 * @enum {string}
 */
export type ProbeProtocol = 'Http' | 'Tcp' | 'Https';

/**
 * Defines values for NetworkOperationStatus.
 * Possible values include: 'InProgress', 'Succeeded', 'Failed'
 * @readonly
 * @enum {string}
 */
export type NetworkOperationStatus = 'InProgress' | 'Succeeded' | 'Failed';

/**
 * Defines values for EffectiveSecurityRuleProtocol.
 * Possible values include: 'Tcp', 'Udp', 'All'
 * @readonly
 * @enum {string}
 */
export type EffectiveSecurityRuleProtocol = 'Tcp' | 'Udp' | 'All';

/**
 * Defines values for EffectiveRouteSource.
 * Possible values include: 'Unknown', 'User', 'VirtualNetworkGateway', 'Default'
 * @readonly
 * @enum {string}
 */
export type EffectiveRouteSource = 'Unknown' | 'User' | 'VirtualNetworkGateway' | 'Default';

/**
 * Defines values for EffectiveRouteState.
 * Possible values include: 'Active', 'Invalid'
 * @readonly
 * @enum {string}
 */
export type EffectiveRouteState = 'Active' | 'Invalid';

/**
 * Defines values for AssociationType.
 * Possible values include: 'Associated', 'Contains'
 * @readonly
 * @enum {string}
 */
export type AssociationType = 'Associated' | 'Contains';

/**
 * Defines values for Direction.
 * Possible values include: 'Inbound', 'Outbound'
 * @readonly
 * @enum {string}
 */
export type Direction = 'Inbound' | 'Outbound';

/**
 * Defines values for IpFlowProtocol.
 * Possible values include: 'TCP', 'UDP'
 * @readonly
 * @enum {string}
 */
export type IpFlowProtocol = 'TCP' | 'UDP';

/**
 * Defines values for NextHopType.
 * Possible values include: 'Internet', 'VirtualAppliance', 'VirtualNetworkGateway', 'VnetLocal',
 * 'HyperNetGateway', 'None'
 * @readonly
 * @enum {string}
 */
export type NextHopType = 'Internet' | 'VirtualAppliance' | 'VirtualNetworkGateway' | 'VnetLocal' | 'HyperNetGateway' | 'None';

/**
 * Defines values for PcProtocol.
 * Possible values include: 'TCP', 'UDP', 'Any'
 * @readonly
 * @enum {string}
 */
export type PcProtocol = 'TCP' | 'UDP' | 'Any';

/**
 * Defines values for PcStatus.
 * Possible values include: 'NotStarted', 'Running', 'Stopped', 'Error', 'Unknown'
 * @readonly
 * @enum {string}
 */
export type PcStatus = 'NotStarted' | 'Running' | 'Stopped' | 'Error' | 'Unknown';

/**
 * Defines values for PcError.
 * Possible values include: 'InternalError', 'AgentStopped', 'CaptureFailed', 'LocalFileFailed',
 * 'StorageFailed'
 * @readonly
 * @enum {string}
 */
export type PcError = 'InternalError' | 'AgentStopped' | 'CaptureFailed' | 'LocalFileFailed' | 'StorageFailed';

/**
 * Defines values for Protocol.
 * Possible values include: 'Tcp', 'Http', 'Https', 'Icmp'
 * @readonly
 * @enum {string}
 */
export type Protocol = 'Tcp' | 'Http' | 'Https' | 'Icmp';

/**
 * Defines values for HTTPMethod.
 * Possible values include: 'Get'
 * @readonly
 * @enum {string}
 */
export type HTTPMethod = 'Get';

/**
 * Defines values for Origin.
 * Possible values include: 'Local', 'Inbound', 'Outbound'
 * @readonly
 * @enum {string}
 */
export type Origin = 'Local' | 'Inbound' | 'Outbound';

/**
 * Defines values for Severity.
 * Possible values include: 'Error', 'Warning'
 * @readonly
 * @enum {string}
 */
export type Severity = 'Error' | 'Warning';

/**
 * Defines values for IssueType.
 * Possible values include: 'Unknown', 'AgentStopped', 'GuestFirewall', 'DnsResolution',
 * 'SocketBind', 'NetworkSecurityRule', 'UserDefinedRoute', 'PortThrottled', 'Platform'
 * @readonly
 * @enum {string}
 */
export type IssueType = 'Unknown' | 'AgentStopped' | 'GuestFirewall' | 'DnsResolution' | 'SocketBind' | 'NetworkSecurityRule' | 'UserDefinedRoute' | 'PortThrottled' | 'Platform';

/**
 * Defines values for ConnectionStatus.
 * Possible values include: 'Unknown', 'Connected', 'Disconnected', 'Degraded'
 * @readonly
 * @enum {string}
 */
export type ConnectionStatus = 'Unknown' | 'Connected' | 'Disconnected' | 'Degraded';

/**
 * Defines values for ConnectionMonitorSourceStatus.
 * Possible values include: 'Uknown', 'Active', 'Inactive'
 * @readonly
 * @enum {string}
 */
export type ConnectionMonitorSourceStatus = 'Uknown' | 'Active' | 'Inactive';

/**
 * Defines values for ConnectionState.
 * Possible values include: 'Reachable', 'Unreachable', 'Unknown'
 * @readonly
 * @enum {string}
 */
export type ConnectionState = 'Reachable' | 'Unreachable' | 'Unknown';

/**
 * Defines values for EvaluationState.
 * Possible values include: 'NotStarted', 'InProgress', 'Completed'
 * @readonly
 * @enum {string}
 */
export type EvaluationState = 'NotStarted' | 'InProgress' | 'Completed';

/**
 * Defines values for VerbosityLevel.
 * Possible values include: 'Normal', 'Minimum', 'Full'
 * @readonly
 * @enum {string}
 */
export type VerbosityLevel = 'Normal' | 'Minimum' | 'Full';

/**
 * Defines values for PublicIPPrefixSkuName.
 * Possible values include: 'Standard'
 * @readonly
 * @enum {string}
 */
export type PublicIPPrefixSkuName = 'Standard';

/**
 * Defines values for VirtualNetworkPeeringState.
 * Possible values include: 'Initiated', 'Connected', 'Disconnected'
 * @readonly
 * @enum {string}
 */
export type VirtualNetworkPeeringState = 'Initiated' | 'Connected' | 'Disconnected';

/**
 * Defines values for VirtualNetworkGatewayType.
 * Possible values include: 'Vpn', 'ExpressRoute'
 * @readonly
 * @enum {string}
 */
export type VirtualNetworkGatewayType = 'Vpn' | 'ExpressRoute';

/**
 * Defines values for VpnType.
 * Possible values include: 'PolicyBased', 'RouteBased'
 * @readonly
 * @enum {string}
 */
export type VpnType = 'PolicyBased' | 'RouteBased';

/**
 * Defines values for VirtualNetworkGatewaySkuName.
 * Possible values include: 'Basic', 'HighPerformance', 'Standard', 'UltraPerformance', 'VpnGw1',
 * 'VpnGw2', 'VpnGw3', 'VpnGw1AZ', 'VpnGw2AZ', 'VpnGw3AZ', 'ErGw1AZ', 'ErGw2AZ', 'ErGw3AZ'
 * @readonly
 * @enum {string}
 */
export type VirtualNetworkGatewaySkuName = 'Basic' | 'HighPerformance' | 'Standard' | 'UltraPerformance' | 'VpnGw1' | 'VpnGw2' | 'VpnGw3' | 'VpnGw1AZ' | 'VpnGw2AZ' | 'VpnGw3AZ' | 'ErGw1AZ' | 'ErGw2AZ' | 'ErGw3AZ';

/**
 * Defines values for VirtualNetworkGatewaySkuTier.
 * Possible values include: 'Basic', 'HighPerformance', 'Standard', 'UltraPerformance', 'VpnGw1',
 * 'VpnGw2', 'VpnGw3', 'VpnGw1AZ', 'VpnGw2AZ', 'VpnGw3AZ', 'ErGw1AZ', 'ErGw2AZ', 'ErGw3AZ'
 * @readonly
 * @enum {string}
 */
export type VirtualNetworkGatewaySkuTier = 'Basic' | 'HighPerformance' | 'Standard' | 'UltraPerformance' | 'VpnGw1' | 'VpnGw2' | 'VpnGw3' | 'VpnGw1AZ' | 'VpnGw2AZ' | 'VpnGw3AZ' | 'ErGw1AZ' | 'ErGw2AZ' | 'ErGw3AZ';

/**
 * Defines values for VpnClientProtocol.
 * Possible values include: 'IkeV2', 'SSTP', 'OpenVPN'
 * @readonly
 * @enum {string}
 */
export type VpnClientProtocol = 'IkeV2' | 'SSTP' | 'OpenVPN';

/**
 * Defines values for IpsecEncryption.
 * Possible values include: 'None', 'DES', 'DES3', 'AES128', 'AES192', 'AES256', 'GCMAES128',
 * 'GCMAES192', 'GCMAES256'
 * @readonly
 * @enum {string}
 */
export type IpsecEncryption = 'None' | 'DES' | 'DES3' | 'AES128' | 'AES192' | 'AES256' | 'GCMAES128' | 'GCMAES192' | 'GCMAES256';

/**
 * Defines values for IpsecIntegrity.
 * Possible values include: 'MD5', 'SHA1', 'SHA256', 'GCMAES128', 'GCMAES192', 'GCMAES256'
 * @readonly
 * @enum {string}
 */
export type IpsecIntegrity = 'MD5' | 'SHA1' | 'SHA256' | 'GCMAES128' | 'GCMAES192' | 'GCMAES256';

/**
 * Defines values for IkeEncryption.
 * Possible values include: 'DES', 'DES3', 'AES128', 'AES192', 'AES256', 'GCMAES256', 'GCMAES128'
 * @readonly
 * @enum {string}
 */
export type IkeEncryption = 'DES' | 'DES3' | 'AES128' | 'AES192' | 'AES256' | 'GCMAES256' | 'GCMAES128';

/**
 * Defines values for IkeIntegrity.
 * Possible values include: 'MD5', 'SHA1', 'SHA256', 'SHA384', 'GCMAES256', 'GCMAES128'
 * @readonly
 * @enum {string}
 */
export type IkeIntegrity = 'MD5' | 'SHA1' | 'SHA256' | 'SHA384' | 'GCMAES256' | 'GCMAES128';

/**
 * Defines values for DhGroup.
 * Possible values include: 'None', 'DHGroup1', 'DHGroup2', 'DHGroup14', 'DHGroup2048', 'ECP256',
 * 'ECP384', 'DHGroup24'
 * @readonly
 * @enum {string}
 */
export type DhGroup = 'None' | 'DHGroup1' | 'DHGroup2' | 'DHGroup14' | 'DHGroup2048' | 'ECP256' | 'ECP384' | 'DHGroup24';

/**
 * Defines values for PfsGroup.
 * Possible values include: 'None', 'PFS1', 'PFS2', 'PFS2048', 'ECP256', 'ECP384', 'PFS24',
 * 'PFS14', 'PFSMM'
 * @readonly
 * @enum {string}
 */
export type PfsGroup = 'None' | 'PFS1' | 'PFS2' | 'PFS2048' | 'ECP256' | 'ECP384' | 'PFS24' | 'PFS14' | 'PFSMM';

/**
 * Defines values for BgpPeerState.
 * Possible values include: 'Unknown', 'Stopped', 'Idle', 'Connecting', 'Connected'
 * @readonly
 * @enum {string}
 */
export type BgpPeerState = 'Unknown' | 'Stopped' | 'Idle' | 'Connecting' | 'Connected';

/**
 * Defines values for ProcessorArchitecture.
 * Possible values include: 'Amd64', 'X86'
 * @readonly
 * @enum {string}
 */
export type ProcessorArchitecture = 'Amd64' | 'X86';

/**
 * Defines values for AuthenticationMethod.
 * Possible values include: 'EAPTLS', 'EAPMSCHAPv2'
 * @readonly
 * @enum {string}
 */
export type AuthenticationMethod = 'EAPTLS' | 'EAPMSCHAPv2';

/**
 * Defines values for VirtualNetworkGatewayConnectionStatus.
 * Possible values include: 'Unknown', 'Connecting', 'Connected', 'NotConnected'
 * @readonly
 * @enum {string}
 */
export type VirtualNetworkGatewayConnectionStatus = 'Unknown' | 'Connecting' | 'Connected' | 'NotConnected';

/**
 * Defines values for VirtualNetworkGatewayConnectionType.
 * Possible values include: 'IPsec', 'Vnet2Vnet', 'ExpressRoute', 'VPNClient'
 * @readonly
 * @enum {string}
 */
export type VirtualNetworkGatewayConnectionType = 'IPsec' | 'Vnet2Vnet' | 'ExpressRoute' | 'VPNClient';

/**
 * Defines values for VirtualNetworkGatewayConnectionProtocol.
 * Possible values include: 'IKEv2', 'IKEv1'
 * @readonly
 * @enum {string}
 */
export type VirtualNetworkGatewayConnectionProtocol = 'IKEv2' | 'IKEv1';

/**
 * Defines values for OfficeTrafficCategory.
 * Possible values include: 'Optimize', 'OptimizeAndAllow', 'All', 'None'
 * @readonly
 * @enum {string}
 */
export type OfficeTrafficCategory = 'Optimize' | 'OptimizeAndAllow' | 'All' | 'None';

/**
 * Defines values for VpnGatewayTunnelingProtocol.
 * Possible values include: 'IkeV2', 'OpenVPN'
 * @readonly
 * @enum {string}
 */
export type VpnGatewayTunnelingProtocol = 'IkeV2' | 'OpenVPN';

/**
 * Defines values for VpnConnectionStatus.
 * Possible values include: 'Unknown', 'Connecting', 'Connected', 'NotConnected'
 * @readonly
 * @enum {string}
 */
export type VpnConnectionStatus = 'Unknown' | 'Connecting' | 'Connected' | 'NotConnected';

/**
 * Defines values for VirtualWanSecurityProviderType.
 * Possible values include: 'External', 'Native'
 * @readonly
 * @enum {string}
 */
export type VirtualWanSecurityProviderType = 'External' | 'Native';

/**
 * Defines values for TunnelConnectionStatus.
 * Possible values include: 'Unknown', 'Connecting', 'Connected', 'NotConnected'
 * @readonly
 * @enum {string}
 */
export type TunnelConnectionStatus = 'Unknown' | 'Connecting' | 'Connected' | 'NotConnected';

/**
 * Defines values for HubVirtualNetworkConnectionStatus.
 * Possible values include: 'Unknown', 'Connecting', 'Connected', 'NotConnected'
 * @readonly
 * @enum {string}
 */
export type HubVirtualNetworkConnectionStatus = 'Unknown' | 'Connecting' | 'Connected' | 'NotConnected';

/**
 * Defines values for Protocol1.
 * Possible values include: 'Tcp', 'Udp', 'All'
 * @readonly
 * @enum {string}
 */
export type Protocol1 = 'Tcp' | 'Udp' | 'All';

/**
 * Contains response data for the get operation.
 */
export type ApplicationGatewaysGetResponse = ApplicationGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGateway;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ApplicationGatewaysCreateOrUpdateResponse = ApplicationGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGateway;
    };
};

/**
 * Contains response data for the updateTags operation.
 */
export type ApplicationGatewaysUpdateTagsResponse = ApplicationGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGateway;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ApplicationGatewaysListResponse = ApplicationGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGatewayListResult;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type ApplicationGatewaysListAllResponse = ApplicationGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGatewayListResult;
    };
};

/**
 * Contains response data for the backendHealth operation.
 */
export type ApplicationGatewaysBackendHealthResponse = ApplicationGatewayBackendHealth & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGatewayBackendHealth;
    };
};

/**
 * Contains response data for the listAvailableWafRuleSets operation.
 */
export type ApplicationGatewaysListAvailableWafRuleSetsResponse = ApplicationGatewayAvailableWafRuleSetsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGatewayAvailableWafRuleSetsResult;
    };
};

/**
 * Contains response data for the listAvailableSslOptions operation.
 */
export type ApplicationGatewaysListAvailableSslOptionsResponse = ApplicationGatewayAvailableSslOptions & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGatewayAvailableSslOptions;
    };
};

/**
 * Contains response data for the listAvailableSslPredefinedPolicies operation.
 */
export type ApplicationGatewaysListAvailableSslPredefinedPoliciesResponse = ApplicationGatewayAvailableSslPredefinedPolicies & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGatewayAvailableSslPredefinedPolicies;
    };
};

/**
 * Contains response data for the getSslPredefinedPolicy operation.
 */
export type ApplicationGatewaysGetSslPredefinedPolicyResponse = ApplicationGatewaySslPredefinedPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGatewaySslPredefinedPolicy;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ApplicationGatewaysBeginCreateOrUpdateResponse = ApplicationGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGateway;
    };
};

/**
 * Contains response data for the beginUpdateTags operation.
 */
export type ApplicationGatewaysBeginUpdateTagsResponse = ApplicationGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGateway;
    };
};

/**
 * Contains response data for the beginBackendHealth operation.
 */
export type ApplicationGatewaysBeginBackendHealthResponse = ApplicationGatewayBackendHealth & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGatewayBackendHealth;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ApplicationGatewaysListNextResponse = ApplicationGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGatewayListResult;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type ApplicationGatewaysListAllNextResponse = ApplicationGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGatewayListResult;
    };
};

/**
 * Contains response data for the listAvailableSslPredefinedPoliciesNext operation.
 */
export type ApplicationGatewaysListAvailableSslPredefinedPoliciesNextResponse = ApplicationGatewayAvailableSslPredefinedPolicies & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGatewayAvailableSslPredefinedPolicies;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ApplicationSecurityGroupsGetResponse = ApplicationSecurityGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationSecurityGroup;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ApplicationSecurityGroupsCreateOrUpdateResponse = ApplicationSecurityGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationSecurityGroup;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type ApplicationSecurityGroupsListAllResponse = ApplicationSecurityGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationSecurityGroupListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ApplicationSecurityGroupsListResponse = ApplicationSecurityGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationSecurityGroupListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ApplicationSecurityGroupsBeginCreateOrUpdateResponse = ApplicationSecurityGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationSecurityGroup;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type ApplicationSecurityGroupsListAllNextResponse = ApplicationSecurityGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationSecurityGroupListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ApplicationSecurityGroupsListNextResponse = ApplicationSecurityGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationSecurityGroupListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type AvailableDelegationsListResponse = AvailableDelegationsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AvailableDelegationsResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type AvailableDelegationsListNextResponse = AvailableDelegationsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AvailableDelegationsResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type AvailableResourceGroupDelegationsListResponse = AvailableDelegationsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AvailableDelegationsResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type AvailableResourceGroupDelegationsListNextResponse = AvailableDelegationsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AvailableDelegationsResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type AzureFirewallsGetResponse = AzureFirewall & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AzureFirewall;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type AzureFirewallsCreateOrUpdateResponse = AzureFirewall & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AzureFirewall;
    };
};

/**
 * Contains response data for the list operation.
 */
export type AzureFirewallsListResponse = AzureFirewallListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AzureFirewallListResult;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type AzureFirewallsListAllResponse = AzureFirewallListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AzureFirewallListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type AzureFirewallsBeginCreateOrUpdateResponse = AzureFirewall & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AzureFirewall;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type AzureFirewallsListNextResponse = AzureFirewallListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AzureFirewallListResult;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type AzureFirewallsListAllNextResponse = AzureFirewallListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AzureFirewallListResult;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type AzureFirewallFqdnTagsListAllResponse = AzureFirewallFqdnTagListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AzureFirewallFqdnTagListResult;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type AzureFirewallFqdnTagsListAllNextResponse = AzureFirewallFqdnTagListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AzureFirewallFqdnTagListResult;
    };
};

/**
 * Contains response data for the checkDnsNameAvailability operation.
 */
export type CheckDnsNameAvailabilityResponse = DnsNameAvailabilityResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DnsNameAvailabilityResult;
    };
};

/**
 * Contains response data for the supportedSecurityProviders operation.
 */
export type SupportedSecurityProvidersResponse = VirtualWanSecurityProviders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualWanSecurityProviders;
    };
};

/**
 * Contains response data for the get operation.
 */
export type DdosProtectionPlansGetResponse = DdosProtectionPlan & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DdosProtectionPlan;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DdosProtectionPlansCreateOrUpdateResponse = DdosProtectionPlan & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DdosProtectionPlan;
    };
};

/**
 * Contains response data for the list operation.
 */
export type DdosProtectionPlansListResponse = DdosProtectionPlanListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DdosProtectionPlanListResult;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type DdosProtectionPlansListByResourceGroupResponse = DdosProtectionPlanListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DdosProtectionPlanListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type DdosProtectionPlansBeginCreateOrUpdateResponse = DdosProtectionPlan & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DdosProtectionPlan;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type DdosProtectionPlansListNextResponse = DdosProtectionPlanListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DdosProtectionPlanListResult;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type DdosProtectionPlansListByResourceGroupNextResponse = DdosProtectionPlanListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DdosProtectionPlanListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type AvailableEndpointServicesListResponse = EndpointServicesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EndpointServicesListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type AvailableEndpointServicesListNextResponse = EndpointServicesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EndpointServicesListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ExpressRouteCircuitAuthorizationsGetResponse = ExpressRouteCircuitAuthorization & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitAuthorization;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ExpressRouteCircuitAuthorizationsCreateOrUpdateResponse = ExpressRouteCircuitAuthorization & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitAuthorization;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ExpressRouteCircuitAuthorizationsListResponse = AuthorizationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AuthorizationListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ExpressRouteCircuitAuthorizationsBeginCreateOrUpdateResponse = ExpressRouteCircuitAuthorization & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitAuthorization;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ExpressRouteCircuitAuthorizationsListNextResponse = AuthorizationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AuthorizationListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ExpressRouteCircuitPeeringsGetResponse = ExpressRouteCircuitPeering & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitPeering;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ExpressRouteCircuitPeeringsCreateOrUpdateResponse = ExpressRouteCircuitPeering & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitPeering;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ExpressRouteCircuitPeeringsListResponse = ExpressRouteCircuitPeeringListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitPeeringListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ExpressRouteCircuitPeeringsBeginCreateOrUpdateResponse = ExpressRouteCircuitPeering & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitPeering;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ExpressRouteCircuitPeeringsListNextResponse = ExpressRouteCircuitPeeringListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitPeeringListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ExpressRouteCircuitConnectionsGetResponse = ExpressRouteCircuitConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitConnection;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ExpressRouteCircuitConnectionsCreateOrUpdateResponse = ExpressRouteCircuitConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitConnection;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ExpressRouteCircuitConnectionsBeginCreateOrUpdateResponse = ExpressRouteCircuitConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitConnection;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ExpressRouteCircuitsGetResponse = ExpressRouteCircuit & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuit;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ExpressRouteCircuitsCreateOrUpdateResponse = ExpressRouteCircuit & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuit;
    };
};

/**
 * Contains response data for the updateTags operation.
 */
export type ExpressRouteCircuitsUpdateTagsResponse = ExpressRouteCircuit & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuit;
    };
};

/**
 * Contains response data for the listArpTable operation.
 */
export type ExpressRouteCircuitsListArpTableResponse = ExpressRouteCircuitsArpTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitsArpTableListResult;
    };
};

/**
 * Contains response data for the listRoutesTable operation.
 */
export type ExpressRouteCircuitsListRoutesTableResponse = ExpressRouteCircuitsRoutesTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitsRoutesTableListResult;
    };
};

/**
 * Contains response data for the listRoutesTableSummary operation.
 */
export type ExpressRouteCircuitsListRoutesTableSummaryResponse = ExpressRouteCircuitsRoutesTableSummaryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitsRoutesTableSummaryListResult;
    };
};

/**
 * Contains response data for the getStats operation.
 */
export type ExpressRouteCircuitsGetStatsResponse = ExpressRouteCircuitStats & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitStats;
    };
};

/**
 * Contains response data for the getPeeringStats operation.
 */
export type ExpressRouteCircuitsGetPeeringStatsResponse = ExpressRouteCircuitStats & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitStats;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ExpressRouteCircuitsListResponse = ExpressRouteCircuitListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitListResult;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type ExpressRouteCircuitsListAllResponse = ExpressRouteCircuitListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ExpressRouteCircuitsBeginCreateOrUpdateResponse = ExpressRouteCircuit & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuit;
    };
};

/**
 * Contains response data for the beginUpdateTags operation.
 */
export type ExpressRouteCircuitsBeginUpdateTagsResponse = ExpressRouteCircuit & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuit;
    };
};

/**
 * Contains response data for the beginListArpTable operation.
 */
export type ExpressRouteCircuitsBeginListArpTableResponse = ExpressRouteCircuitsArpTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitsArpTableListResult;
    };
};

/**
 * Contains response data for the beginListRoutesTable operation.
 */
export type ExpressRouteCircuitsBeginListRoutesTableResponse = ExpressRouteCircuitsRoutesTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitsRoutesTableListResult;
    };
};

/**
 * Contains response data for the beginListRoutesTableSummary operation.
 */
export type ExpressRouteCircuitsBeginListRoutesTableSummaryResponse = ExpressRouteCircuitsRoutesTableSummaryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitsRoutesTableSummaryListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ExpressRouteCircuitsListNextResponse = ExpressRouteCircuitListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitListResult;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type ExpressRouteCircuitsListAllNextResponse = ExpressRouteCircuitListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ExpressRouteServiceProvidersListResponse = ExpressRouteServiceProviderListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteServiceProviderListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ExpressRouteServiceProvidersListNextResponse = ExpressRouteServiceProviderListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteServiceProviderListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ExpressRouteCrossConnectionsListResponse = ExpressRouteCrossConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCrossConnectionListResult;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type ExpressRouteCrossConnectionsListByResourceGroupResponse = ExpressRouteCrossConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCrossConnectionListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ExpressRouteCrossConnectionsGetResponse = ExpressRouteCrossConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCrossConnection;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ExpressRouteCrossConnectionsCreateOrUpdateResponse = ExpressRouteCrossConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCrossConnection;
    };
};

/**
 * Contains response data for the updateTags operation.
 */
export type ExpressRouteCrossConnectionsUpdateTagsResponse = ExpressRouteCrossConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCrossConnection;
    };
};

/**
 * Contains response data for the listArpTable operation.
 */
export type ExpressRouteCrossConnectionsListArpTableResponse = ExpressRouteCircuitsArpTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitsArpTableListResult;
    };
};

/**
 * Contains response data for the listRoutesTableSummary operation.
 */
export type ExpressRouteCrossConnectionsListRoutesTableSummaryResponse = ExpressRouteCrossConnectionsRoutesTableSummaryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCrossConnectionsRoutesTableSummaryListResult;
    };
};

/**
 * Contains response data for the listRoutesTable operation.
 */
export type ExpressRouteCrossConnectionsListRoutesTableResponse = ExpressRouteCircuitsRoutesTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitsRoutesTableListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ExpressRouteCrossConnectionsBeginCreateOrUpdateResponse = ExpressRouteCrossConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCrossConnection;
    };
};

/**
 * Contains response data for the beginUpdateTags operation.
 */
export type ExpressRouteCrossConnectionsBeginUpdateTagsResponse = ExpressRouteCrossConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCrossConnection;
    };
};

/**
 * Contains response data for the beginListArpTable operation.
 */
export type ExpressRouteCrossConnectionsBeginListArpTableResponse = ExpressRouteCircuitsArpTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitsArpTableListResult;
    };
};

/**
 * Contains response data for the beginListRoutesTableSummary operation.
 */
export type ExpressRouteCrossConnectionsBeginListRoutesTableSummaryResponse = ExpressRouteCrossConnectionsRoutesTableSummaryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCrossConnectionsRoutesTableSummaryListResult;
    };
};

/**
 * Contains response data for the beginListRoutesTable operation.
 */
export type ExpressRouteCrossConnectionsBeginListRoutesTableResponse = ExpressRouteCircuitsRoutesTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitsRoutesTableListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ExpressRouteCrossConnectionsListNextResponse = ExpressRouteCrossConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCrossConnectionListResult;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type ExpressRouteCrossConnectionsListByResourceGroupNextResponse = ExpressRouteCrossConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCrossConnectionListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ExpressRouteCrossConnectionPeeringsListResponse = ExpressRouteCrossConnectionPeeringList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCrossConnectionPeeringList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ExpressRouteCrossConnectionPeeringsGetResponse = ExpressRouteCrossConnectionPeering & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCrossConnectionPeering;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ExpressRouteCrossConnectionPeeringsCreateOrUpdateResponse = ExpressRouteCrossConnectionPeering & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCrossConnectionPeering;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ExpressRouteCrossConnectionPeeringsBeginCreateOrUpdateResponse = ExpressRouteCrossConnectionPeering & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCrossConnectionPeering;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ExpressRouteCrossConnectionPeeringsListNextResponse = ExpressRouteCrossConnectionPeeringList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCrossConnectionPeeringList;
    };
};

/**
 * Contains response data for the listBySubscription operation.
 */
export type ExpressRouteGatewaysListBySubscriptionResponse = ExpressRouteGatewayList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteGatewayList;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type ExpressRouteGatewaysListByResourceGroupResponse = ExpressRouteGatewayList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteGatewayList;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ExpressRouteGatewaysCreateOrUpdateResponse = ExpressRouteGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteGateway;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ExpressRouteGatewaysGetResponse = ExpressRouteGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteGateway;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ExpressRouteGatewaysBeginCreateOrUpdateResponse = ExpressRouteGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteGateway;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ExpressRouteConnectionsCreateOrUpdateResponse = ExpressRouteConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteConnection;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ExpressRouteConnectionsGetResponse = ExpressRouteConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteConnection;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ExpressRouteConnectionsListResponse = ExpressRouteConnectionList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteConnectionList;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ExpressRouteConnectionsBeginCreateOrUpdateResponse = ExpressRouteConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteConnection;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ExpressRoutePortsLocationsListResponse = ExpressRoutePortsLocationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRoutePortsLocationListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ExpressRoutePortsLocationsGetResponse = ExpressRoutePortsLocation & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRoutePortsLocation;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ExpressRoutePortsLocationsListNextResponse = ExpressRoutePortsLocationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRoutePortsLocationListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ExpressRoutePortsGetResponse = ExpressRoutePort & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRoutePort;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ExpressRoutePortsCreateOrUpdateResponse = ExpressRoutePort & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRoutePort;
    };
};

/**
 * Contains response data for the updateTags operation.
 */
export type ExpressRoutePortsUpdateTagsResponse = ExpressRoutePort & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRoutePort;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type ExpressRoutePortsListByResourceGroupResponse = ExpressRoutePortListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRoutePortListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ExpressRoutePortsListResponse = ExpressRoutePortListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRoutePortListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ExpressRoutePortsBeginCreateOrUpdateResponse = ExpressRoutePort & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRoutePort;
    };
};

/**
 * Contains response data for the beginUpdateTags operation.
 */
export type ExpressRoutePortsBeginUpdateTagsResponse = ExpressRoutePort & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRoutePort;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type ExpressRoutePortsListByResourceGroupNextResponse = ExpressRoutePortListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRoutePortListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ExpressRoutePortsListNextResponse = ExpressRoutePortListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRoutePortListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ExpressRouteLinksGetResponse = ExpressRouteLink & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteLink;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ExpressRouteLinksListResponse = ExpressRouteLinkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteLinkListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ExpressRouteLinksListNextResponse = ExpressRouteLinkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteLinkListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type InterfaceEndpointsGetResponse = InterfaceEndpoint & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: InterfaceEndpoint;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type InterfaceEndpointsCreateOrUpdateResponse = InterfaceEndpoint & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: InterfaceEndpoint;
    };
};

/**
 * Contains response data for the list operation.
 */
export type InterfaceEndpointsListResponse = InterfaceEndpointListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: InterfaceEndpointListResult;
    };
};

/**
 * Contains response data for the listBySubscription operation.
 */
export type InterfaceEndpointsListBySubscriptionResponse = InterfaceEndpointListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: InterfaceEndpointListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type InterfaceEndpointsBeginCreateOrUpdateResponse = InterfaceEndpoint & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: InterfaceEndpoint;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type InterfaceEndpointsListNextResponse = InterfaceEndpointListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: InterfaceEndpointListResult;
    };
};

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type InterfaceEndpointsListBySubscriptionNextResponse = InterfaceEndpointListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: InterfaceEndpointListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type LoadBalancersGetResponse = LoadBalancer & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancer;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type LoadBalancersCreateOrUpdateResponse = LoadBalancer & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancer;
    };
};

/**
 * Contains response data for the updateTags operation.
 */
export type LoadBalancersUpdateTagsResponse = LoadBalancer & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancer;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type LoadBalancersListAllResponse = LoadBalancerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type LoadBalancersListResponse = LoadBalancerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type LoadBalancersBeginCreateOrUpdateResponse = LoadBalancer & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancer;
    };
};

/**
 * Contains response data for the beginUpdateTags operation.
 */
export type LoadBalancersBeginUpdateTagsResponse = LoadBalancer & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancer;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type LoadBalancersListAllNextResponse = LoadBalancerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type LoadBalancersListNextResponse = LoadBalancerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type LoadBalancerBackendAddressPoolsListResponse = LoadBalancerBackendAddressPoolListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerBackendAddressPoolListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type LoadBalancerBackendAddressPoolsGetResponse = BackendAddressPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BackendAddressPool;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type LoadBalancerBackendAddressPoolsListNextResponse = LoadBalancerBackendAddressPoolListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerBackendAddressPoolListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type LoadBalancerFrontendIPConfigurationsListResponse = LoadBalancerFrontendIPConfigurationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerFrontendIPConfigurationListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type LoadBalancerFrontendIPConfigurationsGetResponse = FrontendIPConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FrontendIPConfiguration;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type LoadBalancerFrontendIPConfigurationsListNextResponse = LoadBalancerFrontendIPConfigurationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerFrontendIPConfigurationListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type InboundNatRulesListResponse = InboundNatRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: InboundNatRuleListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type InboundNatRulesGetResponse = InboundNatRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: InboundNatRule;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type InboundNatRulesCreateOrUpdateResponse = InboundNatRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: InboundNatRule;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type InboundNatRulesBeginCreateOrUpdateResponse = InboundNatRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: InboundNatRule;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type InboundNatRulesListNextResponse = InboundNatRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: InboundNatRuleListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type LoadBalancerLoadBalancingRulesListResponse = LoadBalancerLoadBalancingRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerLoadBalancingRuleListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type LoadBalancerLoadBalancingRulesGetResponse = LoadBalancingRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancingRule;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type LoadBalancerLoadBalancingRulesListNextResponse = LoadBalancerLoadBalancingRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerLoadBalancingRuleListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type LoadBalancerOutboundRulesListResponse = LoadBalancerOutboundRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerOutboundRuleListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type LoadBalancerOutboundRulesGetResponse = OutboundRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OutboundRule;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type LoadBalancerOutboundRulesListNextResponse = LoadBalancerOutboundRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerOutboundRuleListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type LoadBalancerNetworkInterfacesListResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type LoadBalancerNetworkInterfacesListNextResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type LoadBalancerProbesListResponse = LoadBalancerProbeListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerProbeListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type LoadBalancerProbesGetResponse = Probe & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Probe;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type LoadBalancerProbesListNextResponse = LoadBalancerProbeListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerProbeListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type NetworkInterfacesGetResponse = NetworkInterface & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterface;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type NetworkInterfacesCreateOrUpdateResponse = NetworkInterface & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterface;
    };
};

/**
 * Contains response data for the updateTags operation.
 */
export type NetworkInterfacesUpdateTagsResponse = NetworkInterface & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterface;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type NetworkInterfacesListAllResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type NetworkInterfacesListResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceListResult;
    };
};

/**
 * Contains response data for the getEffectiveRouteTable operation.
 */
export type NetworkInterfacesGetEffectiveRouteTableResponse = EffectiveRouteListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EffectiveRouteListResult;
    };
};

/**
 * Contains response data for the listEffectiveNetworkSecurityGroups operation.
 */
export type NetworkInterfacesListEffectiveNetworkSecurityGroupsResponse = EffectiveNetworkSecurityGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EffectiveNetworkSecurityGroupListResult;
    };
};

/**
 * Contains response data for the listVirtualMachineScaleSetVMNetworkInterfaces operation.
 */
export type NetworkInterfacesListVirtualMachineScaleSetVMNetworkInterfacesResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceListResult;
    };
};

/**
 * Contains response data for the listVirtualMachineScaleSetNetworkInterfaces operation.
 */
export type NetworkInterfacesListVirtualMachineScaleSetNetworkInterfacesResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceListResult;
    };
};

/**
 * Contains response data for the getVirtualMachineScaleSetNetworkInterface operation.
 */
export type NetworkInterfacesGetVirtualMachineScaleSetNetworkInterfaceResponse = NetworkInterface & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterface;
    };
};

/**
 * Contains response data for the listVirtualMachineScaleSetIpConfigurations operation.
 */
export type NetworkInterfacesListVirtualMachineScaleSetIpConfigurationsResponse = NetworkInterfaceIPConfigurationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceIPConfigurationListResult;
    };
};

/**
 * Contains response data for the getVirtualMachineScaleSetIpConfiguration operation.
 */
export type NetworkInterfacesGetVirtualMachineScaleSetIpConfigurationResponse = NetworkInterfaceIPConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceIPConfiguration;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type NetworkInterfacesBeginCreateOrUpdateResponse = NetworkInterface & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterface;
    };
};

/**
 * Contains response data for the beginUpdateTags operation.
 */
export type NetworkInterfacesBeginUpdateTagsResponse = NetworkInterface & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterface;
    };
};

/**
 * Contains response data for the beginGetEffectiveRouteTable operation.
 */
export type NetworkInterfacesBeginGetEffectiveRouteTableResponse = EffectiveRouteListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EffectiveRouteListResult;
    };
};

/**
 * Contains response data for the beginListEffectiveNetworkSecurityGroups operation.
 */
export type NetworkInterfacesBeginListEffectiveNetworkSecurityGroupsResponse = EffectiveNetworkSecurityGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EffectiveNetworkSecurityGroupListResult;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type NetworkInterfacesListAllNextResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type NetworkInterfacesListNextResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceListResult;
    };
};

/**
 * Contains response data for the listVirtualMachineScaleSetVMNetworkInterfacesNext operation.
 */
export type NetworkInterfacesListVirtualMachineScaleSetVMNetworkInterfacesNextResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceListResult;
    };
};

/**
 * Contains response data for the listVirtualMachineScaleSetNetworkInterfacesNext operation.
 */
export type NetworkInterfacesListVirtualMachineScaleSetNetworkInterfacesNextResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceListResult;
    };
};

/**
 * Contains response data for the listVirtualMachineScaleSetIpConfigurationsNext operation.
 */
export type NetworkInterfacesListVirtualMachineScaleSetIpConfigurationsNextResponse = NetworkInterfaceIPConfigurationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceIPConfigurationListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type NetworkInterfaceIPConfigurationsListResponse = NetworkInterfaceIPConfigurationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceIPConfigurationListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type NetworkInterfaceIPConfigurationsGetResponse = NetworkInterfaceIPConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceIPConfiguration;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type NetworkInterfaceIPConfigurationsListNextResponse = NetworkInterfaceIPConfigurationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceIPConfigurationListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type NetworkInterfaceLoadBalancersListResponse = NetworkInterfaceLoadBalancerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceLoadBalancerListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type NetworkInterfaceLoadBalancersListNextResponse = NetworkInterfaceLoadBalancerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceLoadBalancerListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type NetworkInterfaceTapConfigurationsGetResponse = NetworkInterfaceTapConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceTapConfiguration;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type NetworkInterfaceTapConfigurationsCreateOrUpdateResponse = NetworkInterfaceTapConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceTapConfiguration;
    };
};

/**
 * Contains response data for the list operation.
 */
export type NetworkInterfaceTapConfigurationsListResponse = NetworkInterfaceTapConfigurationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceTapConfigurationListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type NetworkInterfaceTapConfigurationsBeginCreateOrUpdateResponse = NetworkInterfaceTapConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceTapConfiguration;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type NetworkInterfaceTapConfigurationsListNextResponse = NetworkInterfaceTapConfigurationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceTapConfigurationListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type NetworkProfilesGetResponse = NetworkProfile & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkProfile;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type NetworkProfilesCreateOrUpdateResponse = NetworkProfile & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkProfile;
    };
};

/**
 * Contains response data for the updateTags operation.
 */
export type NetworkProfilesUpdateTagsResponse = NetworkProfile & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkProfile;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type NetworkProfilesListAllResponse = NetworkProfileListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkProfileListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type NetworkProfilesListResponse = NetworkProfileListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkProfileListResult;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type NetworkProfilesListAllNextResponse = NetworkProfileListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkProfileListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type NetworkProfilesListNextResponse = NetworkProfileListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkProfileListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type NetworkSecurityGroupsGetResponse = NetworkSecurityGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkSecurityGroup;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type NetworkSecurityGroupsCreateOrUpdateResponse = NetworkSecurityGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkSecurityGroup;
    };
};

/**
 * Contains response data for the updateTags operation.
 */
export type NetworkSecurityGroupsUpdateTagsResponse = NetworkSecurityGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkSecurityGroup;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type NetworkSecurityGroupsListAllResponse = NetworkSecurityGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkSecurityGroupListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type NetworkSecurityGroupsListResponse = NetworkSecurityGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkSecurityGroupListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type NetworkSecurityGroupsBeginCreateOrUpdateResponse = NetworkSecurityGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkSecurityGroup;
    };
};

/**
 * Contains response data for the beginUpdateTags operation.
 */
export type NetworkSecurityGroupsBeginUpdateTagsResponse = NetworkSecurityGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkSecurityGroup;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type NetworkSecurityGroupsListAllNextResponse = NetworkSecurityGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkSecurityGroupListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type NetworkSecurityGroupsListNextResponse = NetworkSecurityGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkSecurityGroupListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type SecurityRulesGetResponse = SecurityRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecurityRule;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type SecurityRulesCreateOrUpdateResponse = SecurityRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecurityRule;
    };
};

/**
 * Contains response data for the list operation.
 */
export type SecurityRulesListResponse = SecurityRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecurityRuleListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type SecurityRulesBeginCreateOrUpdateResponse = SecurityRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecurityRule;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type SecurityRulesListNextResponse = SecurityRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecurityRuleListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type DefaultSecurityRulesListResponse = SecurityRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecurityRuleListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type DefaultSecurityRulesGetResponse = SecurityRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecurityRule;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type DefaultSecurityRulesListNextResponse = SecurityRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecurityRuleListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type NetworkWatchersCreateOrUpdateResponse = NetworkWatcher & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkWatcher;
    };
};

/**
 * Contains response data for the get operation.
 */
export type NetworkWatchersGetResponse = NetworkWatcher & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkWatcher;
    };
};

/**
 * Contains response data for the updateTags operation.
 */
export type NetworkWatchersUpdateTagsResponse = NetworkWatcher & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkWatcher;
    };
};

/**
 * Contains response data for the list operation.
 */
export type NetworkWatchersListResponse = NetworkWatcherListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkWatcherListResult;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type NetworkWatchersListAllResponse = NetworkWatcherListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkWatcherListResult;
    };
};

/**
 * Contains response data for the getTopology operation.
 */
export type NetworkWatchersGetTopologyResponse = Topology & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Topology;
    };
};

/**
 * Contains response data for the verifyIPFlow operation.
 */
export type NetworkWatchersVerifyIPFlowResponse = VerificationIPFlowResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VerificationIPFlowResult;
    };
};

/**
 * Contains response data for the getNextHop operation.
 */
export type NetworkWatchersGetNextHopResponse = NextHopResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NextHopResult;
    };
};

/**
 * Contains response data for the getVMSecurityRules operation.
 */
export type NetworkWatchersGetVMSecurityRulesResponse = SecurityGroupViewResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecurityGroupViewResult;
    };
};

/**
 * Contains response data for the getTroubleshooting operation.
 */
export type NetworkWatchersGetTroubleshootingResponse = TroubleshootingResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TroubleshootingResult;
    };
};

/**
 * Contains response data for the getTroubleshootingResult operation.
 */
export type NetworkWatchersGetTroubleshootingResultResponse = TroubleshootingResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TroubleshootingResult;
    };
};

/**
 * Contains response data for the setFlowLogConfiguration operation.
 */
export type NetworkWatchersSetFlowLogConfigurationResponse = FlowLogInformation & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FlowLogInformation;
    };
};

/**
 * Contains response data for the getFlowLogStatus operation.
 */
export type NetworkWatchersGetFlowLogStatusResponse = FlowLogInformation & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FlowLogInformation;
    };
};

/**
 * Contains response data for the checkConnectivity operation.
 */
export type NetworkWatchersCheckConnectivityResponse = ConnectivityInformation & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectivityInformation;
    };
};

/**
 * Contains response data for the getAzureReachabilityReport operation.
 */
export type NetworkWatchersGetAzureReachabilityReportResponse = AzureReachabilityReport & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AzureReachabilityReport;
    };
};

/**
 * Contains response data for the listAvailableProviders operation.
 */
export type NetworkWatchersListAvailableProvidersResponse = AvailableProvidersList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AvailableProvidersList;
    };
};

/**
 * Contains response data for the getNetworkConfigurationDiagnostic operation.
 */
export type NetworkWatchersGetNetworkConfigurationDiagnosticResponse = NetworkConfigurationDiagnosticResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkConfigurationDiagnosticResponse;
    };
};

/**
 * Contains response data for the beginVerifyIPFlow operation.
 */
export type NetworkWatchersBeginVerifyIPFlowResponse = VerificationIPFlowResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VerificationIPFlowResult;
    };
};

/**
 * Contains response data for the beginGetNextHop operation.
 */
export type NetworkWatchersBeginGetNextHopResponse = NextHopResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NextHopResult;
    };
};

/**
 * Contains response data for the beginGetVMSecurityRules operation.
 */
export type NetworkWatchersBeginGetVMSecurityRulesResponse = SecurityGroupViewResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecurityGroupViewResult;
    };
};

/**
 * Contains response data for the beginGetTroubleshooting operation.
 */
export type NetworkWatchersBeginGetTroubleshootingResponse = TroubleshootingResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TroubleshootingResult;
    };
};

/**
 * Contains response data for the beginGetTroubleshootingResult operation.
 */
export type NetworkWatchersBeginGetTroubleshootingResultResponse = TroubleshootingResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TroubleshootingResult;
    };
};

/**
 * Contains response data for the beginSetFlowLogConfiguration operation.
 */
export type NetworkWatchersBeginSetFlowLogConfigurationResponse = FlowLogInformation & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FlowLogInformation;
    };
};

/**
 * Contains response data for the beginGetFlowLogStatus operation.
 */
export type NetworkWatchersBeginGetFlowLogStatusResponse = FlowLogInformation & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FlowLogInformation;
    };
};

/**
 * Contains response data for the beginCheckConnectivity operation.
 */
export type NetworkWatchersBeginCheckConnectivityResponse = ConnectivityInformation & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectivityInformation;
    };
};

/**
 * Contains response data for the beginGetAzureReachabilityReport operation.
 */
export type NetworkWatchersBeginGetAzureReachabilityReportResponse = AzureReachabilityReport & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AzureReachabilityReport;
    };
};

/**
 * Contains response data for the beginListAvailableProviders operation.
 */
export type NetworkWatchersBeginListAvailableProvidersResponse = AvailableProvidersList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AvailableProvidersList;
    };
};

/**
 * Contains response data for the beginGetNetworkConfigurationDiagnostic operation.
 */
export type NetworkWatchersBeginGetNetworkConfigurationDiagnosticResponse = NetworkConfigurationDiagnosticResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkConfigurationDiagnosticResponse;
    };
};

/**
 * Contains response data for the create operation.
 */
export type PacketCapturesCreateResponse = PacketCaptureResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PacketCaptureResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type PacketCapturesGetResponse = PacketCaptureResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PacketCaptureResult;
    };
};

/**
 * Contains response data for the getStatus operation.
 */
export type PacketCapturesGetStatusResponse = PacketCaptureQueryStatusResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PacketCaptureQueryStatusResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type PacketCapturesListResponse = PacketCaptureListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PacketCaptureListResult;
    };
};

/**
 * Contains response data for the beginCreate operation.
 */
export type PacketCapturesBeginCreateResponse = PacketCaptureResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PacketCaptureResult;
    };
};

/**
 * Contains response data for the beginGetStatus operation.
 */
export type PacketCapturesBeginGetStatusResponse = PacketCaptureQueryStatusResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PacketCaptureQueryStatusResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ConnectionMonitorsCreateOrUpdateResponse = ConnectionMonitorResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionMonitorResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ConnectionMonitorsGetResponse = ConnectionMonitorResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionMonitorResult;
    };
};

/**
 * Contains response data for the query operation.
 */
export type ConnectionMonitorsQueryResponse = ConnectionMonitorQueryResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionMonitorQueryResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ConnectionMonitorsListResponse = ConnectionMonitorListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionMonitorListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ConnectionMonitorsBeginCreateOrUpdateResponse = ConnectionMonitorResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionMonitorResult;
    };
};

/**
 * Contains response data for the beginQuery operation.
 */
export type ConnectionMonitorsBeginQueryResponse = ConnectionMonitorQueryResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionMonitorQueryResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type PublicIPAddressesGetResponse = PublicIPAddress & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPAddress;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PublicIPAddressesCreateOrUpdateResponse = PublicIPAddress & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPAddress;
    };
};

/**
 * Contains response data for the updateTags operation.
 */
export type PublicIPAddressesUpdateTagsResponse = PublicIPAddress & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPAddress;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type PublicIPAddressesListAllResponse = PublicIPAddressListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPAddressListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type PublicIPAddressesListResponse = PublicIPAddressListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPAddressListResult;
    };
};

/**
 * Contains response data for the listVirtualMachineScaleSetPublicIPAddresses operation.
 */
export type PublicIPAddressesListVirtualMachineScaleSetPublicIPAddressesResponse = PublicIPAddressListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPAddressListResult;
    };
};

/**
 * Contains response data for the listVirtualMachineScaleSetVMPublicIPAddresses operation.
 */
export type PublicIPAddressesListVirtualMachineScaleSetVMPublicIPAddressesResponse = PublicIPAddressListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPAddressListResult;
    };
};

/**
 * Contains response data for the getVirtualMachineScaleSetPublicIPAddress operation.
 */
export type PublicIPAddressesGetVirtualMachineScaleSetPublicIPAddressResponse = PublicIPAddress & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPAddress;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type PublicIPAddressesBeginCreateOrUpdateResponse = PublicIPAddress & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPAddress;
    };
};

/**
 * Contains response data for the beginUpdateTags operation.
 */
export type PublicIPAddressesBeginUpdateTagsResponse = PublicIPAddress & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPAddress;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type PublicIPAddressesListAllNextResponse = PublicIPAddressListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPAddressListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type PublicIPAddressesListNextResponse = PublicIPAddressListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPAddressListResult;
    };
};

/**
 * Contains response data for the listVirtualMachineScaleSetPublicIPAddressesNext operation.
 */
export type PublicIPAddressesListVirtualMachineScaleSetPublicIPAddressesNextResponse = PublicIPAddressListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPAddressListResult;
    };
};

/**
 * Contains response data for the listVirtualMachineScaleSetVMPublicIPAddressesNext operation.
 */
export type PublicIPAddressesListVirtualMachineScaleSetVMPublicIPAddressesNextResponse = PublicIPAddressListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPAddressListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type PublicIPPrefixesGetResponse = PublicIPPrefix & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPPrefix;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PublicIPPrefixesCreateOrUpdateResponse = PublicIPPrefix & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPPrefix;
    };
};

/**
 * Contains response data for the updateTags operation.
 */
export type PublicIPPrefixesUpdateTagsResponse = PublicIPPrefix & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPPrefix;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type PublicIPPrefixesListAllResponse = PublicIPPrefixListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPPrefixListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type PublicIPPrefixesListResponse = PublicIPPrefixListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPPrefixListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type PublicIPPrefixesBeginCreateOrUpdateResponse = PublicIPPrefix & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPPrefix;
    };
};

/**
 * Contains response data for the beginUpdateTags operation.
 */
export type PublicIPPrefixesBeginUpdateTagsResponse = PublicIPPrefix & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPPrefix;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type PublicIPPrefixesListAllNextResponse = PublicIPPrefixListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPPrefixListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type PublicIPPrefixesListNextResponse = PublicIPPrefixListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPPrefixListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type RouteFiltersGetResponse = RouteFilter & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteFilter;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type RouteFiltersCreateOrUpdateResponse = RouteFilter & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteFilter;
    };
};

/**
 * Contains response data for the update operation.
 */
export type RouteFiltersUpdateResponse = RouteFilter & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteFilter;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type RouteFiltersListByResourceGroupResponse = RouteFilterListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteFilterListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type RouteFiltersListResponse = RouteFilterListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteFilterListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type RouteFiltersBeginCreateOrUpdateResponse = RouteFilter & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteFilter;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type RouteFiltersBeginUpdateResponse = RouteFilter & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteFilter;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type RouteFiltersListByResourceGroupNextResponse = RouteFilterListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteFilterListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type RouteFiltersListNextResponse = RouteFilterListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteFilterListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type RouteFilterRulesGetResponse = RouteFilterRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteFilterRule;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type RouteFilterRulesCreateOrUpdateResponse = RouteFilterRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteFilterRule;
    };
};

/**
 * Contains response data for the update operation.
 */
export type RouteFilterRulesUpdateResponse = RouteFilterRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteFilterRule;
    };
};

/**
 * Contains response data for the listByRouteFilter operation.
 */
export type RouteFilterRulesListByRouteFilterResponse = RouteFilterRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteFilterRuleListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type RouteFilterRulesBeginCreateOrUpdateResponse = RouteFilterRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteFilterRule;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type RouteFilterRulesBeginUpdateResponse = RouteFilterRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteFilterRule;
    };
};

/**
 * Contains response data for the listByRouteFilterNext operation.
 */
export type RouteFilterRulesListByRouteFilterNextResponse = RouteFilterRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteFilterRuleListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type RouteTablesGetResponse = RouteTable & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteTable;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type RouteTablesCreateOrUpdateResponse = RouteTable & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteTable;
    };
};

/**
 * Contains response data for the updateTags operation.
 */
export type RouteTablesUpdateTagsResponse = RouteTable & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteTable;
    };
};

/**
 * Contains response data for the list operation.
 */
export type RouteTablesListResponse = RouteTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteTableListResult;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type RouteTablesListAllResponse = RouteTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteTableListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type RouteTablesBeginCreateOrUpdateResponse = RouteTable & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteTable;
    };
};

/**
 * Contains response data for the beginUpdateTags operation.
 */
export type RouteTablesBeginUpdateTagsResponse = RouteTable & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteTable;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type RouteTablesListNextResponse = RouteTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteTableListResult;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type RouteTablesListAllNextResponse = RouteTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteTableListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type RoutesGetResponse = Route & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Route;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type RoutesCreateOrUpdateResponse = Route & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Route;
    };
};

/**
 * Contains response data for the list operation.
 */
export type RoutesListResponse = RouteListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type RoutesBeginCreateOrUpdateResponse = Route & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Route;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type RoutesListNextResponse = RouteListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type BgpServiceCommunitiesListResponse = BgpServiceCommunityListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BgpServiceCommunityListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type BgpServiceCommunitiesListNextResponse = BgpServiceCommunityListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BgpServiceCommunityListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ServiceEndpointPoliciesGetResponse = ServiceEndpointPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceEndpointPolicy;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ServiceEndpointPoliciesCreateOrUpdateResponse = ServiceEndpointPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceEndpointPolicy;
    };
};

/**
 * Contains response data for the update operation.
 */
export type ServiceEndpointPoliciesUpdateResponse = ServiceEndpointPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceEndpointPolicy;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ServiceEndpointPoliciesListResponse = ServiceEndpointPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceEndpointPolicyListResult;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type ServiceEndpointPoliciesListByResourceGroupResponse = ServiceEndpointPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceEndpointPolicyListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ServiceEndpointPoliciesBeginCreateOrUpdateResponse = ServiceEndpointPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceEndpointPolicy;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type ServiceEndpointPoliciesBeginUpdateResponse = ServiceEndpointPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceEndpointPolicy;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ServiceEndpointPoliciesListNextResponse = ServiceEndpointPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceEndpointPolicyListResult;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type ServiceEndpointPoliciesListByResourceGroupNextResponse = ServiceEndpointPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceEndpointPolicyListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ServiceEndpointPolicyDefinitionsGetResponse = ServiceEndpointPolicyDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceEndpointPolicyDefinition;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ServiceEndpointPolicyDefinitionsCreateOrUpdateResponse = ServiceEndpointPolicyDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceEndpointPolicyDefinition;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type ServiceEndpointPolicyDefinitionsListByResourceGroupResponse = ServiceEndpointPolicyDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceEndpointPolicyDefinitionListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ServiceEndpointPolicyDefinitionsBeginCreateOrUpdateResponse = ServiceEndpointPolicyDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceEndpointPolicyDefinition;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type ServiceEndpointPolicyDefinitionsListByResourceGroupNextResponse = ServiceEndpointPolicyDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceEndpointPolicyDefinitionListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type UsagesListResponse = UsagesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: UsagesListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type UsagesListNextResponse = UsagesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: UsagesListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualNetworksGetResponse = VirtualNetwork & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetwork;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualNetworksCreateOrUpdateResponse = VirtualNetwork & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetwork;
    };
};

/**
 * Contains response data for the updateTags operation.
 */
export type VirtualNetworksUpdateTagsResponse = VirtualNetwork & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetwork;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type VirtualNetworksListAllResponse = VirtualNetworkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type VirtualNetworksListResponse = VirtualNetworkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkListResult;
    };
};

/**
 * Contains response data for the checkIPAddressAvailability operation.
 */
export type VirtualNetworksCheckIPAddressAvailabilityResponse = IPAddressAvailabilityResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IPAddressAvailabilityResult;
    };
};

/**
 * Contains response data for the listUsage operation.
 */
export type VirtualNetworksListUsageResponse = VirtualNetworkListUsageResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkListUsageResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type VirtualNetworksBeginCreateOrUpdateResponse = VirtualNetwork & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetwork;
    };
};

/**
 * Contains response data for the beginUpdateTags operation.
 */
export type VirtualNetworksBeginUpdateTagsResponse = VirtualNetwork & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetwork;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type VirtualNetworksListAllNextResponse = VirtualNetworkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type VirtualNetworksListNextResponse = VirtualNetworkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkListResult;
    };
};

/**
 * Contains response data for the listUsageNext operation.
 */
export type VirtualNetworksListUsageNextResponse = VirtualNetworkListUsageResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkListUsageResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type SubnetsGetResponse = Subnet & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Subnet;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type SubnetsCreateOrUpdateResponse = Subnet & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Subnet;
    };
};

/**
 * Contains response data for the list operation.
 */
export type SubnetsListResponse = SubnetListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SubnetListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type SubnetsBeginCreateOrUpdateResponse = Subnet & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Subnet;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type SubnetsListNextResponse = SubnetListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SubnetListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualNetworkPeeringsGetResponse = VirtualNetworkPeering & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkPeering;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualNetworkPeeringsCreateOrUpdateResponse = VirtualNetworkPeering & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkPeering;
    };
};

/**
 * Contains response data for the list operation.
 */
export type VirtualNetworkPeeringsListResponse = VirtualNetworkPeeringListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkPeeringListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type VirtualNetworkPeeringsBeginCreateOrUpdateResponse = VirtualNetworkPeering & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkPeering;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type VirtualNetworkPeeringsListNextResponse = VirtualNetworkPeeringListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkPeeringListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualNetworkTapsGetResponse = VirtualNetworkTap & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkTap;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualNetworkTapsCreateOrUpdateResponse = VirtualNetworkTap & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkTap;
    };
};

/**
 * Contains response data for the updateTags operation.
 */
export type VirtualNetworkTapsUpdateTagsResponse = VirtualNetworkTap & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkTap;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type VirtualNetworkTapsListAllResponse = VirtualNetworkTapListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkTapListResult;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type VirtualNetworkTapsListByResourceGroupResponse = VirtualNetworkTapListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkTapListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type VirtualNetworkTapsBeginCreateOrUpdateResponse = VirtualNetworkTap & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkTap;
    };
};

/**
 * Contains response data for the beginUpdateTags operation.
 */
export type VirtualNetworkTapsBeginUpdateTagsResponse = VirtualNetworkTap & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkTap;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type VirtualNetworkTapsListAllNextResponse = VirtualNetworkTapListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkTapListResult;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type VirtualNetworkTapsListByResourceGroupNextResponse = VirtualNetworkTapListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkTapListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualNetworkGatewaysCreateOrUpdateResponse = VirtualNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGateway;
    };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualNetworkGatewaysGetResponse = VirtualNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGateway;
    };
};

/**
 * Contains response data for the updateTags operation.
 */
export type VirtualNetworkGatewaysUpdateTagsResponse = VirtualNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGateway;
    };
};

/**
 * Contains response data for the list operation.
 */
export type VirtualNetworkGatewaysListResponse = VirtualNetworkGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayListResult;
    };
};

/**
 * Contains response data for the listConnections operation.
 */
export type VirtualNetworkGatewaysListConnectionsResponse = VirtualNetworkGatewayListConnectionsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayListConnectionsResult;
    };
};

/**
 * Contains response data for the reset operation.
 */
export type VirtualNetworkGatewaysResetResponse = VirtualNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGateway;
    };
};

/**
 * Contains response data for the generatevpnclientpackage operation.
 */
export type VirtualNetworkGatewaysGeneratevpnclientpackageResponse = {
  /**
   * The parsed response body.
   */
  body: string;
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: string;
    };
};

/**
 * Contains response data for the generateVpnProfile operation.
 */
export type VirtualNetworkGatewaysGenerateVpnProfileResponse = {
  /**
   * The parsed response body.
   */
  body: string;
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: string;
    };
};

/**
 * Contains response data for the getVpnProfilePackageUrl operation.
 */
export type VirtualNetworkGatewaysGetVpnProfilePackageUrlResponse = {
  /**
   * The parsed response body.
   */
  body: string;
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: string;
    };
};

/**
 * Contains response data for the getBgpPeerStatus operation.
 */
export type VirtualNetworkGatewaysGetBgpPeerStatusResponse = BgpPeerStatusListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BgpPeerStatusListResult;
    };
};

/**
 * Contains response data for the supportedVpnDevices operation.
 */
export type VirtualNetworkGatewaysSupportedVpnDevicesResponse = {
  /**
   * The parsed response body.
   */
  body: string;
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: string;
    };
};

/**
 * Contains response data for the getLearnedRoutes operation.
 */
export type VirtualNetworkGatewaysGetLearnedRoutesResponse = GatewayRouteListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GatewayRouteListResult;
    };
};

/**
 * Contains response data for the getAdvertisedRoutes operation.
 */
export type VirtualNetworkGatewaysGetAdvertisedRoutesResponse = GatewayRouteListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GatewayRouteListResult;
    };
};

/**
 * Contains response data for the setVpnclientIpsecParameters operation.
 */
export type VirtualNetworkGatewaysSetVpnclientIpsecParametersResponse = VpnClientIPsecParameters & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VpnClientIPsecParameters;
    };
};

/**
 * Contains response data for the getVpnclientIpsecParameters operation.
 */
export type VirtualNetworkGatewaysGetVpnclientIpsecParametersResponse = VpnClientIPsecParameters & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VpnClientIPsecParameters;
    };
};

/**
 * Contains response data for the vpnDeviceConfigurationScript operation.
 */
export type VirtualNetworkGatewaysVpnDeviceConfigurationScriptResponse = {
  /**
   * The parsed response body.
   */
  body: string;
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: string;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type VirtualNetworkGatewaysBeginCreateOrUpdateResponse = VirtualNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGateway;
    };
};

/**
 * Contains response data for the beginUpdateTags operation.
 */
export type VirtualNetworkGatewaysBeginUpdateTagsResponse = VirtualNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGateway;
    };
};

/**
 * Contains response data for the beginReset operation.
 */
export type VirtualNetworkGatewaysBeginResetResponse = VirtualNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGateway;
    };
};

/**
 * Contains response data for the beginGeneratevpnclientpackage operation.
 */
export type VirtualNetworkGatewaysBeginGeneratevpnclientpackageResponse = {
  /**
   * The parsed response body.
   */
  body: string;
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: string;
    };
};

/**
 * Contains response data for the beginGenerateVpnProfile operation.
 */
export type VirtualNetworkGatewaysBeginGenerateVpnProfileResponse = {
  /**
   * The parsed response body.
   */
  body: string;
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: string;
    };
};

/**
 * Contains response data for the beginGetVpnProfilePackageUrl operation.
 */
export type VirtualNetworkGatewaysBeginGetVpnProfilePackageUrlResponse = {
  /**
   * The parsed response body.
   */
  body: string;
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: string;
    };
};

/**
 * Contains response data for the beginGetBgpPeerStatus operation.
 */
export type VirtualNetworkGatewaysBeginGetBgpPeerStatusResponse = BgpPeerStatusListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BgpPeerStatusListResult;
    };
};

/**
 * Contains response data for the beginGetLearnedRoutes operation.
 */
export type VirtualNetworkGatewaysBeginGetLearnedRoutesResponse = GatewayRouteListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GatewayRouteListResult;
    };
};

/**
 * Contains response data for the beginGetAdvertisedRoutes operation.
 */
export type VirtualNetworkGatewaysBeginGetAdvertisedRoutesResponse = GatewayRouteListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GatewayRouteListResult;
    };
};

/**
 * Contains response data for the beginSetVpnclientIpsecParameters operation.
 */
export type VirtualNetworkGatewaysBeginSetVpnclientIpsecParametersResponse = VpnClientIPsecParameters & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VpnClientIPsecParameters;
    };
};

/**
 * Contains response data for the beginGetVpnclientIpsecParameters operation.
 */
export type VirtualNetworkGatewaysBeginGetVpnclientIpsecParametersResponse = VpnClientIPsecParameters & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VpnClientIPsecParameters;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type VirtualNetworkGatewaysListNextResponse = VirtualNetworkGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayListResult;
    };
};

/**
 * Contains response data for the listConnectionsNext operation.
 */
export type VirtualNetworkGatewaysListConnectionsNextResponse = VirtualNetworkGatewayListConnectionsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayListConnectionsResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualNetworkGatewayConnectionsCreateOrUpdateResponse = VirtualNetworkGatewayConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayConnection;
    };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualNetworkGatewayConnectionsGetResponse = VirtualNetworkGatewayConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayConnection;
    };
};

/**
 * Contains response data for the updateTags operation.
 */
export type VirtualNetworkGatewayConnectionsUpdateTagsResponse = VirtualNetworkGatewayConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayConnection;
    };
};

/**
 * Contains response data for the setSharedKey operation.
 */
export type VirtualNetworkGatewayConnectionsSetSharedKeyResponse = ConnectionSharedKey & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionSharedKey;
    };
};

/**
 * Contains response data for the getSharedKey operation.
 */
export type VirtualNetworkGatewayConnectionsGetSharedKeyResponse = ConnectionSharedKey & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionSharedKey;
    };
};

/**
 * Contains response data for the list operation.
 */
export type VirtualNetworkGatewayConnectionsListResponse = VirtualNetworkGatewayConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayConnectionListResult;
    };
};

/**
 * Contains response data for the resetSharedKey operation.
 */
export type VirtualNetworkGatewayConnectionsResetSharedKeyResponse = ConnectionResetSharedKey & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionResetSharedKey;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type VirtualNetworkGatewayConnectionsBeginCreateOrUpdateResponse = VirtualNetworkGatewayConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayConnection;
    };
};

/**
 * Contains response data for the beginUpdateTags operation.
 */
export type VirtualNetworkGatewayConnectionsBeginUpdateTagsResponse = VirtualNetworkGatewayConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayConnection;
    };
};

/**
 * Contains response data for the beginSetSharedKey operation.
 */
export type VirtualNetworkGatewayConnectionsBeginSetSharedKeyResponse = ConnectionSharedKey & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionSharedKey;
    };
};

/**
 * Contains response data for the beginResetSharedKey operation.
 */
export type VirtualNetworkGatewayConnectionsBeginResetSharedKeyResponse = ConnectionResetSharedKey & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionResetSharedKey;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type VirtualNetworkGatewayConnectionsListNextResponse = VirtualNetworkGatewayConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayConnectionListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type LocalNetworkGatewaysCreateOrUpdateResponse = LocalNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LocalNetworkGateway;
    };
};

/**
 * Contains response data for the get operation.
 */
export type LocalNetworkGatewaysGetResponse = LocalNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LocalNetworkGateway;
    };
};

/**
 * Contains response data for the updateTags operation.
 */
export type LocalNetworkGatewaysUpdateTagsResponse = LocalNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LocalNetworkGateway;
    };
};

/**
 * Contains response data for the list operation.
 */
export type LocalNetworkGatewaysListResponse = LocalNetworkGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LocalNetworkGatewayListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type LocalNetworkGatewaysBeginCreateOrUpdateResponse = LocalNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LocalNetworkGateway;
    };
};

/**
 * Contains response data for the beginUpdateTags operation.
 */
export type LocalNetworkGatewaysBeginUpdateTagsResponse = LocalNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LocalNetworkGateway;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type LocalNetworkGatewaysListNextResponse = LocalNetworkGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LocalNetworkGatewayListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualWansGetResponse = VirtualWAN & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualWAN;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualWansCreateOrUpdateResponse = VirtualWAN & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualWAN;
    };
};

/**
 * Contains response data for the updateTags operation.
 */
export type VirtualWansUpdateTagsResponse = VirtualWAN & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualWAN;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type VirtualWansListByResourceGroupResponse = ListVirtualWANsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListVirtualWANsResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type VirtualWansListResponse = ListVirtualWANsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListVirtualWANsResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type VirtualWansBeginCreateOrUpdateResponse = VirtualWAN & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualWAN;
    };
};

/**
 * Contains response data for the beginUpdateTags operation.
 */
export type VirtualWansBeginUpdateTagsResponse = VirtualWAN & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualWAN;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type VirtualWansListByResourceGroupNextResponse = ListVirtualWANsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListVirtualWANsResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type VirtualWansListNextResponse = ListVirtualWANsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListVirtualWANsResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type VpnSitesGetResponse = VpnSite & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VpnSite;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VpnSitesCreateOrUpdateResponse = VpnSite & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VpnSite;
    };
};

/**
 * Contains response data for the updateTags operation.
 */
export type VpnSitesUpdateTagsResponse = VpnSite & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VpnSite;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type VpnSitesListByResourceGroupResponse = ListVpnSitesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListVpnSitesResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type VpnSitesListResponse = ListVpnSitesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListVpnSitesResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type VpnSitesBeginCreateOrUpdateResponse = VpnSite & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VpnSite;
    };
};

/**
 * Contains response data for the beginUpdateTags operation.
 */
export type VpnSitesBeginUpdateTagsResponse = VpnSite & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VpnSite;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type VpnSitesListByResourceGroupNextResponse = ListVpnSitesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListVpnSitesResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type VpnSitesListNextResponse = ListVpnSitesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListVpnSitesResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualHubsGetResponse = VirtualHub & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualHub;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualHubsCreateOrUpdateResponse = VirtualHub & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualHub;
    };
};

/**
 * Contains response data for the updateTags operation.
 */
export type VirtualHubsUpdateTagsResponse = VirtualHub & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualHub;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type VirtualHubsListByResourceGroupResponse = ListVirtualHubsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListVirtualHubsResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type VirtualHubsListResponse = ListVirtualHubsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListVirtualHubsResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type VirtualHubsBeginCreateOrUpdateResponse = VirtualHub & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualHub;
    };
};

/**
 * Contains response data for the beginUpdateTags operation.
 */
export type VirtualHubsBeginUpdateTagsResponse = VirtualHub & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualHub;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type VirtualHubsListByResourceGroupNextResponse = ListVirtualHubsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListVirtualHubsResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type VirtualHubsListNextResponse = ListVirtualHubsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListVirtualHubsResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type HubVirtualNetworkConnectionsGetResponse = HubVirtualNetworkConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HubVirtualNetworkConnection;
    };
};

/**
 * Contains response data for the list operation.
 */
export type HubVirtualNetworkConnectionsListResponse = ListHubVirtualNetworkConnectionsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListHubVirtualNetworkConnectionsResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type HubVirtualNetworkConnectionsListNextResponse = ListHubVirtualNetworkConnectionsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListHubVirtualNetworkConnectionsResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type VpnGatewaysGetResponse = VpnGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VpnGateway;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VpnGatewaysCreateOrUpdateResponse = VpnGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VpnGateway;
    };
};

/**
 * Contains response data for the updateTags operation.
 */
export type VpnGatewaysUpdateTagsResponse = VpnGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VpnGateway;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type VpnGatewaysListByResourceGroupResponse = ListVpnGatewaysResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListVpnGatewaysResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type VpnGatewaysListResponse = ListVpnGatewaysResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListVpnGatewaysResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type VpnGatewaysBeginCreateOrUpdateResponse = VpnGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VpnGateway;
    };
};

/**
 * Contains response data for the beginUpdateTags operation.
 */
export type VpnGatewaysBeginUpdateTagsResponse = VpnGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VpnGateway;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type VpnGatewaysListByResourceGroupNextResponse = ListVpnGatewaysResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListVpnGatewaysResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type VpnGatewaysListNextResponse = ListVpnGatewaysResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListVpnGatewaysResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type VpnConnectionsGetResponse = VpnConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VpnConnection;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VpnConnectionsCreateOrUpdateResponse = VpnConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VpnConnection;
    };
};

/**
 * Contains response data for the listByVpnGateway operation.
 */
export type VpnConnectionsListByVpnGatewayResponse = ListVpnConnectionsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListVpnConnectionsResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type VpnConnectionsBeginCreateOrUpdateResponse = VpnConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VpnConnection;
    };
};

/**
 * Contains response data for the listByVpnGatewayNext operation.
 */
export type VpnConnectionsListByVpnGatewayNextResponse = ListVpnConnectionsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListVpnConnectionsResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type P2sVpnServerConfigurationsGetResponse = P2SVpnServerConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: P2SVpnServerConfiguration;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type P2sVpnServerConfigurationsCreateOrUpdateResponse = P2SVpnServerConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: P2SVpnServerConfiguration;
    };
};

/**
 * Contains response data for the listByVirtualWan operation.
 */
export type P2sVpnServerConfigurationsListByVirtualWanResponse = ListP2SVpnServerConfigurationsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListP2SVpnServerConfigurationsResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type P2sVpnServerConfigurationsBeginCreateOrUpdateResponse = P2SVpnServerConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: P2SVpnServerConfiguration;
    };
};

/**
 * Contains response data for the listByVirtualWanNext operation.
 */
export type P2sVpnServerConfigurationsListByVirtualWanNextResponse = ListP2SVpnServerConfigurationsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListP2SVpnServerConfigurationsResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type P2sVpnGatewaysGetResponse = P2SVpnGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: P2SVpnGateway;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type P2sVpnGatewaysCreateOrUpdateResponse = P2SVpnGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: P2SVpnGateway;
    };
};

/**
 * Contains response data for the updateTags operation.
 */
export type P2sVpnGatewaysUpdateTagsResponse = P2SVpnGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: P2SVpnGateway;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type P2sVpnGatewaysListByResourceGroupResponse = ListP2SVpnGatewaysResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListP2SVpnGatewaysResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type P2sVpnGatewaysListResponse = ListP2SVpnGatewaysResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListP2SVpnGatewaysResult;
    };
};

/**
 * Contains response data for the generateVpnProfile operation.
 */
export type P2sVpnGatewaysGenerateVpnProfileResponse = VpnProfileResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VpnProfileResponse;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type P2sVpnGatewaysBeginCreateOrUpdateResponse = P2SVpnGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: P2SVpnGateway;
    };
};

/**
 * Contains response data for the beginUpdateTags operation.
 */
export type P2sVpnGatewaysBeginUpdateTagsResponse = P2SVpnGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: P2SVpnGateway;
    };
};

/**
 * Contains response data for the beginGenerateVpnProfile operation.
 */
export type P2sVpnGatewaysBeginGenerateVpnProfileResponse = VpnProfileResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VpnProfileResponse;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type P2sVpnGatewaysListByResourceGroupNextResponse = ListP2SVpnGatewaysResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListP2SVpnGatewaysResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type P2sVpnGatewaysListNextResponse = ListP2SVpnGatewaysResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListP2SVpnGatewaysResult;
    };
};
