/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "ms-rest-azure-js";
import * as msRest from "ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const SubResource: msRest.CompositeMapper = {
  serializedName: "SubResource",
  type: {
    name: "Composite",
    className: "SubResource",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkInterfaceTapConfiguration: msRest.CompositeMapper = {
  serializedName: "NetworkInterfaceTapConfiguration",
  type: {
    name: "Composite",
    className: "NetworkInterfaceTapConfiguration",
    modelProperties: {
      ...SubResource.type.modelProperties,
      virtualNetworkTap: {
        serializedName: "properties.virtualNetworkTap",
        type: {
          name: "Composite",
          className: "VirtualNetworkTap"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ApplicationSecurityGroup: msRest.CompositeMapper = {
  serializedName: "ApplicationSecurityGroup",
  type: {
    name: "Composite",
    className: "ApplicationSecurityGroup",
    modelProperties: {
      ...Resource.type.modelProperties,
      resourceGuid: {
        readOnly: true,
        serializedName: "properties.resourceGuid",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecurityRule: msRest.CompositeMapper = {
  serializedName: "SecurityRule",
  type: {
    name: "Composite",
    className: "SecurityRule",
    modelProperties: {
      ...SubResource.type.modelProperties,
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      protocol: {
        required: true,
        serializedName: "properties.protocol",
        type: {
          name: "String"
        }
      },
      sourcePortRange: {
        serializedName: "properties.sourcePortRange",
        type: {
          name: "String"
        }
      },
      destinationPortRange: {
        serializedName: "properties.destinationPortRange",
        type: {
          name: "String"
        }
      },
      sourceAddressPrefix: {
        serializedName: "properties.sourceAddressPrefix",
        type: {
          name: "String"
        }
      },
      sourceAddressPrefixes: {
        serializedName: "properties.sourceAddressPrefixes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      sourceApplicationSecurityGroups: {
        serializedName: "properties.sourceApplicationSecurityGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationSecurityGroup"
            }
          }
        }
      },
      destinationAddressPrefix: {
        serializedName: "properties.destinationAddressPrefix",
        type: {
          name: "String"
        }
      },
      destinationAddressPrefixes: {
        serializedName: "properties.destinationAddressPrefixes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      destinationApplicationSecurityGroups: {
        serializedName: "properties.destinationApplicationSecurityGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationSecurityGroup"
            }
          }
        }
      },
      sourcePortRanges: {
        serializedName: "properties.sourcePortRanges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      destinationPortRanges: {
        serializedName: "properties.destinationPortRanges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      access: {
        required: true,
        serializedName: "properties.access",
        type: {
          name: "String"
        }
      },
      priority: {
        serializedName: "properties.priority",
        type: {
          name: "Number"
        }
      },
      direction: {
        required: true,
        serializedName: "properties.direction",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EndpointService: msRest.CompositeMapper = {
  serializedName: "EndpointService",
  type: {
    name: "Composite",
    className: "EndpointService",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InterfaceEndpoint: msRest.CompositeMapper = {
  serializedName: "InterfaceEndpoint",
  type: {
    name: "Composite",
    className: "InterfaceEndpoint",
    modelProperties: {
      ...Resource.type.modelProperties,
      fqdn: {
        serializedName: "properties.fqdn",
        type: {
          name: "String"
        }
      },
      endpointService: {
        serializedName: "properties.endpointService",
        type: {
          name: "Composite",
          className: "EndpointService"
        }
      },
      subnet: {
        serializedName: "properties.subnet",
        type: {
          name: "Composite",
          className: "Subnet"
        }
      },
      networkInterfaces: {
        readOnly: true,
        serializedName: "properties.networkInterfaces",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkInterface"
            }
          }
        }
      },
      owner: {
        readOnly: true,
        serializedName: "properties.owner",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkInterfaceDnsSettings: msRest.CompositeMapper = {
  serializedName: "NetworkInterfaceDnsSettings",
  type: {
    name: "Composite",
    className: "NetworkInterfaceDnsSettings",
    modelProperties: {
      dnsServers: {
        serializedName: "dnsServers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      appliedDnsServers: {
        serializedName: "appliedDnsServers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      internalDnsNameLabel: {
        serializedName: "internalDnsNameLabel",
        type: {
          name: "String"
        }
      },
      internalFqdn: {
        serializedName: "internalFqdn",
        type: {
          name: "String"
        }
      },
      internalDomainNameSuffix: {
        serializedName: "internalDomainNameSuffix",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkInterface: msRest.CompositeMapper = {
  serializedName: "NetworkInterface",
  type: {
    name: "Composite",
    className: "NetworkInterface",
    modelProperties: {
      ...Resource.type.modelProperties,
      virtualMachine: {
        readOnly: true,
        serializedName: "properties.virtualMachine",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      networkSecurityGroup: {
        serializedName: "properties.networkSecurityGroup",
        type: {
          name: "Composite",
          className: "NetworkSecurityGroup"
        }
      },
      interfaceEndpoint: {
        readOnly: true,
        serializedName: "properties.interfaceEndpoint",
        type: {
          name: "Composite",
          className: "InterfaceEndpoint"
        }
      },
      ipConfigurations: {
        serializedName: "properties.ipConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkInterfaceIPConfiguration"
            }
          }
        }
      },
      tapConfigurations: {
        serializedName: "properties.tapConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkInterfaceTapConfiguration"
            }
          }
        }
      },
      dnsSettings: {
        serializedName: "properties.dnsSettings",
        type: {
          name: "Composite",
          className: "NetworkInterfaceDnsSettings"
        }
      },
      macAddress: {
        serializedName: "properties.macAddress",
        type: {
          name: "String"
        }
      },
      primary: {
        serializedName: "properties.primary",
        type: {
          name: "Boolean"
        }
      },
      enableAcceleratedNetworking: {
        serializedName: "properties.enableAcceleratedNetworking",
        type: {
          name: "Boolean"
        }
      },
      enableIPForwarding: {
        serializedName: "properties.enableIPForwarding",
        type: {
          name: "Boolean"
        }
      },
      hostedWorkloads: {
        readOnly: true,
        serializedName: "properties.hostedWorkloads",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      resourceGuid: {
        serializedName: "properties.resourceGuid",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkSecurityGroup: msRest.CompositeMapper = {
  serializedName: "NetworkSecurityGroup",
  type: {
    name: "Composite",
    className: "NetworkSecurityGroup",
    modelProperties: {
      ...Resource.type.modelProperties,
      securityRules: {
        serializedName: "properties.securityRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SecurityRule"
            }
          }
        }
      },
      defaultSecurityRules: {
        serializedName: "properties.defaultSecurityRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SecurityRule"
            }
          }
        }
      },
      networkInterfaces: {
        readOnly: true,
        serializedName: "properties.networkInterfaces",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkInterface"
            }
          }
        }
      },
      subnets: {
        readOnly: true,
        serializedName: "properties.subnets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Subnet"
            }
          }
        }
      },
      resourceGuid: {
        serializedName: "properties.resourceGuid",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Route: msRest.CompositeMapper = {
  serializedName: "Route",
  type: {
    name: "Composite",
    className: "Route",
    modelProperties: {
      ...SubResource.type.modelProperties,
      addressPrefix: {
        serializedName: "properties.addressPrefix",
        type: {
          name: "String"
        }
      },
      nextHopType: {
        required: true,
        serializedName: "properties.nextHopType",
        type: {
          name: "String"
        }
      },
      nextHopIpAddress: {
        serializedName: "properties.nextHopIpAddress",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RouteTable: msRest.CompositeMapper = {
  serializedName: "RouteTable",
  type: {
    name: "Composite",
    className: "RouteTable",
    modelProperties: {
      ...Resource.type.modelProperties,
      routes: {
        serializedName: "properties.routes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Route"
            }
          }
        }
      },
      subnets: {
        readOnly: true,
        serializedName: "properties.subnets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Subnet"
            }
          }
        }
      },
      disableBgpRoutePropagation: {
        serializedName: "properties.disableBgpRoutePropagation",
        type: {
          name: "Boolean"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceEndpointPropertiesFormat: msRest.CompositeMapper = {
  serializedName: "ServiceEndpointPropertiesFormat",
  type: {
    name: "Composite",
    className: "ServiceEndpointPropertiesFormat",
    modelProperties: {
      service: {
        serializedName: "service",
        type: {
          name: "String"
        }
      },
      locations: {
        serializedName: "locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceEndpointPolicyDefinition: msRest.CompositeMapper = {
  serializedName: "ServiceEndpointPolicyDefinition",
  type: {
    name: "Composite",
    className: "ServiceEndpointPolicyDefinition",
    modelProperties: {
      ...SubResource.type.modelProperties,
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      service: {
        serializedName: "properties.service",
        type: {
          name: "String"
        }
      },
      serviceResources: {
        serializedName: "properties.serviceResources",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceEndpointPolicy: msRest.CompositeMapper = {
  serializedName: "ServiceEndpointPolicy",
  type: {
    name: "Composite",
    className: "ServiceEndpointPolicy",
    modelProperties: {
      ...Resource.type.modelProperties,
      serviceEndpointPolicyDefinitions: {
        serializedName: "properties.serviceEndpointPolicyDefinitions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceEndpointPolicyDefinition"
            }
          }
        }
      },
      subnets: {
        readOnly: true,
        serializedName: "properties.subnets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Subnet"
            }
          }
        }
      },
      resourceGuid: {
        readOnly: true,
        serializedName: "properties.resourceGuid",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PublicIPAddressSku: msRest.CompositeMapper = {
  serializedName: "PublicIPAddressSku",
  type: {
    name: "Composite",
    className: "PublicIPAddressSku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PublicIPAddressDnsSettings: msRest.CompositeMapper = {
  serializedName: "PublicIPAddressDnsSettings",
  type: {
    name: "Composite",
    className: "PublicIPAddressDnsSettings",
    modelProperties: {
      domainNameLabel: {
        serializedName: "domainNameLabel",
        type: {
          name: "String"
        }
      },
      fqdn: {
        serializedName: "fqdn",
        type: {
          name: "String"
        }
      },
      reverseFqdn: {
        serializedName: "reverseFqdn",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpTag: msRest.CompositeMapper = {
  serializedName: "IpTag",
  type: {
    name: "Composite",
    className: "IpTag",
    modelProperties: {
      ipTagType: {
        serializedName: "ipTagType",
        type: {
          name: "String"
        }
      },
      tag: {
        serializedName: "tag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PublicIPAddress: msRest.CompositeMapper = {
  serializedName: "PublicIPAddress",
  type: {
    name: "Composite",
    className: "PublicIPAddress",
    modelProperties: {
      ...Resource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "PublicIPAddressSku"
        }
      },
      publicIPAllocationMethod: {
        serializedName: "properties.publicIPAllocationMethod",
        type: {
          name: "String"
        }
      },
      publicIPAddressVersion: {
        serializedName: "properties.publicIPAddressVersion",
        type: {
          name: "String"
        }
      },
      ipConfiguration: {
        readOnly: true,
        serializedName: "properties.ipConfiguration",
        type: {
          name: "Composite",
          className: "IPConfiguration"
        }
      },
      dnsSettings: {
        serializedName: "properties.dnsSettings",
        type: {
          name: "Composite",
          className: "PublicIPAddressDnsSettings"
        }
      },
      ipTags: {
        serializedName: "properties.ipTags",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpTag"
            }
          }
        }
      },
      ipAddress: {
        serializedName: "properties.ipAddress",
        type: {
          name: "String"
        }
      },
      publicIPPrefix: {
        serializedName: "properties.publicIPPrefix",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      idleTimeoutInMinutes: {
        serializedName: "properties.idleTimeoutInMinutes",
        type: {
          name: "Number"
        }
      },
      resourceGuid: {
        serializedName: "properties.resourceGuid",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const IPConfiguration: msRest.CompositeMapper = {
  serializedName: "IPConfiguration",
  type: {
    name: "Composite",
    className: "IPConfiguration",
    modelProperties: {
      ...SubResource.type.modelProperties,
      privateIPAddress: {
        serializedName: "properties.privateIPAddress",
        type: {
          name: "String"
        }
      },
      privateIPAllocationMethod: {
        serializedName: "properties.privateIPAllocationMethod",
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "properties.subnet",
        type: {
          name: "Composite",
          className: "Subnet"
        }
      },
      publicIPAddress: {
        serializedName: "properties.publicIPAddress",
        type: {
          name: "Composite",
          className: "PublicIPAddress"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IPConfigurationProfile: msRest.CompositeMapper = {
  serializedName: "IPConfigurationProfile",
  type: {
    name: "Composite",
    className: "IPConfigurationProfile",
    modelProperties: {
      ...SubResource.type.modelProperties,
      subnet: {
        serializedName: "properties.subnet",
        type: {
          name: "Composite",
          className: "Subnet"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceNavigationLink: msRest.CompositeMapper = {
  serializedName: "ResourceNavigationLink",
  type: {
    name: "Composite",
    className: "ResourceNavigationLink",
    modelProperties: {
      ...SubResource.type.modelProperties,
      linkedResourceType: {
        serializedName: "properties.linkedResourceType",
        type: {
          name: "String"
        }
      },
      link: {
        serializedName: "properties.link",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceAssociationLink: msRest.CompositeMapper = {
  serializedName: "ServiceAssociationLink",
  type: {
    name: "Composite",
    className: "ServiceAssociationLink",
    modelProperties: {
      ...SubResource.type.modelProperties,
      linkedResourceType: {
        serializedName: "properties.linkedResourceType",
        type: {
          name: "String"
        }
      },
      link: {
        serializedName: "properties.link",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Delegation: msRest.CompositeMapper = {
  serializedName: "Delegation",
  type: {
    name: "Composite",
    className: "Delegation",
    modelProperties: {
      ...SubResource.type.modelProperties,
      serviceName: {
        serializedName: "properties.serviceName",
        type: {
          name: "String"
        }
      },
      actions: {
        serializedName: "properties.actions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Subnet: msRest.CompositeMapper = {
  serializedName: "Subnet",
  type: {
    name: "Composite",
    className: "Subnet",
    modelProperties: {
      ...SubResource.type.modelProperties,
      addressPrefix: {
        serializedName: "properties.addressPrefix",
        type: {
          name: "String"
        }
      },
      addressPrefixes: {
        serializedName: "properties.addressPrefixes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      networkSecurityGroup: {
        serializedName: "properties.networkSecurityGroup",
        type: {
          name: "Composite",
          className: "NetworkSecurityGroup"
        }
      },
      routeTable: {
        serializedName: "properties.routeTable",
        type: {
          name: "Composite",
          className: "RouteTable"
        }
      },
      serviceEndpoints: {
        serializedName: "properties.serviceEndpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceEndpointPropertiesFormat"
            }
          }
        }
      },
      serviceEndpointPolicies: {
        serializedName: "properties.serviceEndpointPolicies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceEndpointPolicy"
            }
          }
        }
      },
      interfaceEndpoints: {
        readOnly: true,
        serializedName: "properties.interfaceEndpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InterfaceEndpoint"
            }
          }
        }
      },
      ipConfigurations: {
        readOnly: true,
        serializedName: "properties.ipConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IPConfiguration"
            }
          }
        }
      },
      ipConfigurationProfiles: {
        readOnly: true,
        serializedName: "properties.ipConfigurationProfiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IPConfigurationProfile"
            }
          }
        }
      },
      resourceNavigationLinks: {
        serializedName: "properties.resourceNavigationLinks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceNavigationLink"
            }
          }
        }
      },
      serviceAssociationLinks: {
        serializedName: "properties.serviceAssociationLinks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceAssociationLink"
            }
          }
        }
      },
      delegations: {
        serializedName: "properties.delegations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Delegation"
            }
          }
        }
      },
      purpose: {
        readOnly: true,
        serializedName: "properties.purpose",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FrontendIPConfiguration: msRest.CompositeMapper = {
  serializedName: "FrontendIPConfiguration",
  type: {
    name: "Composite",
    className: "FrontendIPConfiguration",
    modelProperties: {
      ...SubResource.type.modelProperties,
      inboundNatRules: {
        readOnly: true,
        serializedName: "properties.inboundNatRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubResource"
            }
          }
        }
      },
      inboundNatPools: {
        readOnly: true,
        serializedName: "properties.inboundNatPools",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubResource"
            }
          }
        }
      },
      outboundRules: {
        readOnly: true,
        serializedName: "properties.outboundRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubResource"
            }
          }
        }
      },
      loadBalancingRules: {
        readOnly: true,
        serializedName: "properties.loadBalancingRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubResource"
            }
          }
        }
      },
      privateIPAddress: {
        serializedName: "properties.privateIPAddress",
        type: {
          name: "String"
        }
      },
      privateIPAllocationMethod: {
        serializedName: "properties.privateIPAllocationMethod",
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "properties.subnet",
        type: {
          name: "Composite",
          className: "Subnet"
        }
      },
      publicIPAddress: {
        serializedName: "properties.publicIPAddress",
        type: {
          name: "Composite",
          className: "PublicIPAddress"
        }
      },
      publicIPPrefix: {
        serializedName: "properties.publicIPPrefix",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const VirtualNetworkTap: msRest.CompositeMapper = {
  serializedName: "VirtualNetworkTap",
  type: {
    name: "Composite",
    className: "VirtualNetworkTap",
    modelProperties: {
      ...Resource.type.modelProperties,
      networkInterfaceTapConfigurations: {
        readOnly: true,
        serializedName: "properties.networkInterfaceTapConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkInterfaceTapConfiguration"
            }
          }
        }
      },
      resourceGuid: {
        readOnly: true,
        serializedName: "properties.resourceGuid",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      destinationNetworkInterfaceIPConfiguration: {
        serializedName: "properties.destinationNetworkInterfaceIPConfiguration",
        type: {
          name: "Composite",
          className: "NetworkInterfaceIPConfiguration"
        }
      },
      destinationLoadBalancerFrontEndIPConfiguration: {
        serializedName: "properties.destinationLoadBalancerFrontEndIPConfiguration",
        type: {
          name: "Composite",
          className: "FrontendIPConfiguration"
        }
      },
      destinationPort: {
        serializedName: "properties.destinationPort",
        type: {
          name: "Number"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackendAddressPool: msRest.CompositeMapper = {
  serializedName: "BackendAddressPool",
  type: {
    name: "Composite",
    className: "BackendAddressPool",
    modelProperties: {
      ...SubResource.type.modelProperties,
      backendIPConfigurations: {
        readOnly: true,
        serializedName: "properties.backendIPConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkInterfaceIPConfiguration"
            }
          }
        }
      },
      loadBalancingRules: {
        readOnly: true,
        serializedName: "properties.loadBalancingRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubResource"
            }
          }
        }
      },
      outboundRule: {
        readOnly: true,
        serializedName: "properties.outboundRule",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InboundNatRule: msRest.CompositeMapper = {
  serializedName: "InboundNatRule",
  type: {
    name: "Composite",
    className: "InboundNatRule",
    modelProperties: {
      ...SubResource.type.modelProperties,
      frontendIPConfiguration: {
        serializedName: "properties.frontendIPConfiguration",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      backendIPConfiguration: {
        readOnly: true,
        serializedName: "properties.backendIPConfiguration",
        type: {
          name: "Composite",
          className: "NetworkInterfaceIPConfiguration"
        }
      },
      protocol: {
        serializedName: "properties.protocol",
        type: {
          name: "String"
        }
      },
      frontendPort: {
        serializedName: "properties.frontendPort",
        type: {
          name: "Number"
        }
      },
      backendPort: {
        serializedName: "properties.backendPort",
        type: {
          name: "Number"
        }
      },
      idleTimeoutInMinutes: {
        serializedName: "properties.idleTimeoutInMinutes",
        type: {
          name: "Number"
        }
      },
      enableFloatingIP: {
        serializedName: "properties.enableFloatingIP",
        type: {
          name: "Boolean"
        }
      },
      enableTcpReset: {
        serializedName: "properties.enableTcpReset",
        type: {
          name: "Boolean"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkInterfaceIPConfiguration: msRest.CompositeMapper = {
  serializedName: "NetworkInterfaceIPConfiguration",
  type: {
    name: "Composite",
    className: "NetworkInterfaceIPConfiguration",
    modelProperties: {
      ...SubResource.type.modelProperties,
      virtualNetworkTaps: {
        serializedName: "properties.virtualNetworkTaps",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkTap"
            }
          }
        }
      },
      applicationGatewayBackendAddressPools: {
        serializedName: "properties.applicationGatewayBackendAddressPools",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayBackendAddressPool"
            }
          }
        }
      },
      loadBalancerBackendAddressPools: {
        serializedName: "properties.loadBalancerBackendAddressPools",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BackendAddressPool"
            }
          }
        }
      },
      loadBalancerInboundNatRules: {
        serializedName: "properties.loadBalancerInboundNatRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InboundNatRule"
            }
          }
        }
      },
      privateIPAddress: {
        serializedName: "properties.privateIPAddress",
        type: {
          name: "String"
        }
      },
      privateIPAllocationMethod: {
        serializedName: "properties.privateIPAllocationMethod",
        type: {
          name: "String"
        }
      },
      privateIPAddressVersion: {
        serializedName: "properties.privateIPAddressVersion",
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "properties.subnet",
        type: {
          name: "Composite",
          className: "Subnet"
        }
      },
      primary: {
        serializedName: "properties.primary",
        type: {
          name: "Boolean"
        }
      },
      publicIPAddress: {
        serializedName: "properties.publicIPAddress",
        type: {
          name: "Composite",
          className: "PublicIPAddress"
        }
      },
      applicationSecurityGroups: {
        serializedName: "properties.applicationSecurityGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationSecurityGroup"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayBackendAddress: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewayBackendAddress",
  type: {
    name: "Composite",
    className: "ApplicationGatewayBackendAddress",
    modelProperties: {
      fqdn: {
        serializedName: "fqdn",
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayBackendAddressPool: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewayBackendAddressPool",
  type: {
    name: "Composite",
    className: "ApplicationGatewayBackendAddressPool",
    modelProperties: {
      ...SubResource.type.modelProperties,
      backendIPConfigurations: {
        serializedName: "properties.backendIPConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkInterfaceIPConfiguration"
            }
          }
        }
      },
      backendAddresses: {
        serializedName: "properties.backendAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayBackendAddress"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayConnectionDraining: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewayConnectionDraining",
  type: {
    name: "Composite",
    className: "ApplicationGatewayConnectionDraining",
    modelProperties: {
      enabled: {
        required: true,
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      drainTimeoutInSec: {
        required: true,
        serializedName: "drainTimeoutInSec",
        constraints: {
          InclusiveMaximum: 3600,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ApplicationGatewayBackendHttpSettings: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewayBackendHttpSettings",
  type: {
    name: "Composite",
    className: "ApplicationGatewayBackendHttpSettings",
    modelProperties: {
      ...SubResource.type.modelProperties,
      port: {
        serializedName: "properties.port",
        type: {
          name: "Number"
        }
      },
      protocol: {
        serializedName: "properties.protocol",
        type: {
          name: "String"
        }
      },
      cookieBasedAffinity: {
        serializedName: "properties.cookieBasedAffinity",
        type: {
          name: "String"
        }
      },
      requestTimeout: {
        serializedName: "properties.requestTimeout",
        type: {
          name: "Number"
        }
      },
      probe: {
        serializedName: "properties.probe",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      authenticationCertificates: {
        serializedName: "properties.authenticationCertificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubResource"
            }
          }
        }
      },
      trustedRootCertificates: {
        serializedName: "properties.trustedRootCertificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubResource"
            }
          }
        }
      },
      connectionDraining: {
        serializedName: "properties.connectionDraining",
        type: {
          name: "Composite",
          className: "ApplicationGatewayConnectionDraining"
        }
      },
      hostName: {
        serializedName: "properties.hostName",
        type: {
          name: "String"
        }
      },
      pickHostNameFromBackendAddress: {
        serializedName: "properties.pickHostNameFromBackendAddress",
        type: {
          name: "Boolean"
        }
      },
      affinityCookieName: {
        serializedName: "properties.affinityCookieName",
        type: {
          name: "String"
        }
      },
      probeEnabled: {
        serializedName: "properties.probeEnabled",
        type: {
          name: "Boolean"
        }
      },
      path: {
        serializedName: "properties.path",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayBackendHealthServer: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewayBackendHealthServer",
  type: {
    name: "Composite",
    className: "ApplicationGatewayBackendHealthServer",
    modelProperties: {
      address: {
        serializedName: "address",
        type: {
          name: "String"
        }
      },
      ipConfiguration: {
        serializedName: "ipConfiguration",
        type: {
          name: "Composite",
          className: "NetworkInterfaceIPConfiguration"
        }
      },
      health: {
        serializedName: "health",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayBackendHealthHttpSettings: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewayBackendHealthHttpSettings",
  type: {
    name: "Composite",
    className: "ApplicationGatewayBackendHealthHttpSettings",
    modelProperties: {
      backendHttpSettings: {
        serializedName: "backendHttpSettings",
        type: {
          name: "Composite",
          className: "ApplicationGatewayBackendHttpSettings"
        }
      },
      servers: {
        serializedName: "servers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayBackendHealthServer"
            }
          }
        }
      }
    }
  }
};

export const ApplicationGatewayBackendHealthPool: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewayBackendHealthPool",
  type: {
    name: "Composite",
    className: "ApplicationGatewayBackendHealthPool",
    modelProperties: {
      backendAddressPool: {
        serializedName: "backendAddressPool",
        type: {
          name: "Composite",
          className: "ApplicationGatewayBackendAddressPool"
        }
      },
      backendHttpSettingsCollection: {
        serializedName: "backendHttpSettingsCollection",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayBackendHealthHttpSettings"
            }
          }
        }
      }
    }
  }
};

export const ApplicationGatewayBackendHealth: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewayBackendHealth",
  type: {
    name: "Composite",
    className: "ApplicationGatewayBackendHealth",
    modelProperties: {
      backendAddressPools: {
        serializedName: "backendAddressPools",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayBackendHealthPool"
            }
          }
        }
      }
    }
  }
};

export const ApplicationGatewaySku: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewaySku",
  type: {
    name: "Composite",
    className: "ApplicationGatewaySku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ApplicationGatewaySslPolicy: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewaySslPolicy",
  type: {
    name: "Composite",
    className: "ApplicationGatewaySslPolicy",
    modelProperties: {
      disabledSslProtocols: {
        serializedName: "disabledSslProtocols",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      policyType: {
        serializedName: "policyType",
        type: {
          name: "String"
        }
      },
      policyName: {
        serializedName: "policyName",
        type: {
          name: "String"
        }
      },
      cipherSuites: {
        serializedName: "cipherSuites",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      minProtocolVersion: {
        serializedName: "minProtocolVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayIPConfiguration: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewayIPConfiguration",
  type: {
    name: "Composite",
    className: "ApplicationGatewayIPConfiguration",
    modelProperties: {
      ...SubResource.type.modelProperties,
      subnet: {
        serializedName: "properties.subnet",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayAuthenticationCertificate: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewayAuthenticationCertificate",
  type: {
    name: "Composite",
    className: "ApplicationGatewayAuthenticationCertificate",
    modelProperties: {
      ...SubResource.type.modelProperties,
      data: {
        serializedName: "properties.data",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayTrustedRootCertificate: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewayTrustedRootCertificate",
  type: {
    name: "Composite",
    className: "ApplicationGatewayTrustedRootCertificate",
    modelProperties: {
      ...SubResource.type.modelProperties,
      data: {
        serializedName: "properties.data",
        type: {
          name: "String"
        }
      },
      keyvaultSecretId: {
        serializedName: "properties.keyvaultSecretId",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewaySslCertificate: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewaySslCertificate",
  type: {
    name: "Composite",
    className: "ApplicationGatewaySslCertificate",
    modelProperties: {
      ...SubResource.type.modelProperties,
      data: {
        serializedName: "properties.data",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "properties.password",
        type: {
          name: "String"
        }
      },
      publicCertData: {
        serializedName: "properties.publicCertData",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayFrontendIPConfiguration: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewayFrontendIPConfiguration",
  type: {
    name: "Composite",
    className: "ApplicationGatewayFrontendIPConfiguration",
    modelProperties: {
      ...SubResource.type.modelProperties,
      privateIPAddress: {
        serializedName: "properties.privateIPAddress",
        type: {
          name: "String"
        }
      },
      privateIPAllocationMethod: {
        serializedName: "properties.privateIPAllocationMethod",
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "properties.subnet",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      publicIPAddress: {
        serializedName: "properties.publicIPAddress",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayFrontendPort: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewayFrontendPort",
  type: {
    name: "Composite",
    className: "ApplicationGatewayFrontendPort",
    modelProperties: {
      ...SubResource.type.modelProperties,
      port: {
        serializedName: "properties.port",
        type: {
          name: "Number"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayCustomError: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewayCustomError",
  type: {
    name: "Composite",
    className: "ApplicationGatewayCustomError",
    modelProperties: {
      statusCode: {
        serializedName: "statusCode",
        type: {
          name: "String"
        }
      },
      customErrorPageUrl: {
        serializedName: "customErrorPageUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayHttpListener: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewayHttpListener",
  type: {
    name: "Composite",
    className: "ApplicationGatewayHttpListener",
    modelProperties: {
      ...SubResource.type.modelProperties,
      frontendIPConfiguration: {
        serializedName: "properties.frontendIPConfiguration",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      frontendPort: {
        serializedName: "properties.frontendPort",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      protocol: {
        serializedName: "properties.protocol",
        type: {
          name: "String"
        }
      },
      hostName: {
        serializedName: "properties.hostName",
        type: {
          name: "String"
        }
      },
      sslCertificate: {
        serializedName: "properties.sslCertificate",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      requireServerNameIndication: {
        serializedName: "properties.requireServerNameIndication",
        type: {
          name: "Boolean"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      customErrorConfigurations: {
        serializedName: "properties.customErrorConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayCustomError"
            }
          }
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayPathRule: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewayPathRule",
  type: {
    name: "Composite",
    className: "ApplicationGatewayPathRule",
    modelProperties: {
      ...SubResource.type.modelProperties,
      paths: {
        serializedName: "properties.paths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      backendAddressPool: {
        serializedName: "properties.backendAddressPool",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      backendHttpSettings: {
        serializedName: "properties.backendHttpSettings",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      redirectConfiguration: {
        serializedName: "properties.redirectConfiguration",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayProbeHealthResponseMatch: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewayProbeHealthResponseMatch",
  type: {
    name: "Composite",
    className: "ApplicationGatewayProbeHealthResponseMatch",
    modelProperties: {
      body: {
        serializedName: "body",
        type: {
          name: "String"
        }
      },
      statusCodes: {
        serializedName: "statusCodes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ApplicationGatewayProbe: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewayProbe",
  type: {
    name: "Composite",
    className: "ApplicationGatewayProbe",
    modelProperties: {
      ...SubResource.type.modelProperties,
      protocol: {
        serializedName: "properties.protocol",
        type: {
          name: "String"
        }
      },
      host: {
        serializedName: "properties.host",
        type: {
          name: "String"
        }
      },
      path: {
        serializedName: "properties.path",
        type: {
          name: "String"
        }
      },
      interval: {
        serializedName: "properties.interval",
        type: {
          name: "Number"
        }
      },
      timeout: {
        serializedName: "properties.timeout",
        type: {
          name: "Number"
        }
      },
      unhealthyThreshold: {
        serializedName: "properties.unhealthyThreshold",
        type: {
          name: "Number"
        }
      },
      pickHostNameFromBackendHttpSettings: {
        serializedName: "properties.pickHostNameFromBackendHttpSettings",
        type: {
          name: "Boolean"
        }
      },
      minServers: {
        serializedName: "properties.minServers",
        type: {
          name: "Number"
        }
      },
      match: {
        serializedName: "properties.match",
        type: {
          name: "Composite",
          className: "ApplicationGatewayProbeHealthResponseMatch"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayRequestRoutingRule: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewayRequestRoutingRule",
  type: {
    name: "Composite",
    className: "ApplicationGatewayRequestRoutingRule",
    modelProperties: {
      ...SubResource.type.modelProperties,
      ruleType: {
        serializedName: "properties.ruleType",
        type: {
          name: "String"
        }
      },
      backendAddressPool: {
        serializedName: "properties.backendAddressPool",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      backendHttpSettings: {
        serializedName: "properties.backendHttpSettings",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      httpListener: {
        serializedName: "properties.httpListener",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      urlPathMap: {
        serializedName: "properties.urlPathMap",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      redirectConfiguration: {
        serializedName: "properties.redirectConfiguration",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayRedirectConfiguration: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewayRedirectConfiguration",
  type: {
    name: "Composite",
    className: "ApplicationGatewayRedirectConfiguration",
    modelProperties: {
      ...SubResource.type.modelProperties,
      redirectType: {
        serializedName: "properties.redirectType",
        type: {
          name: "String"
        }
      },
      targetListener: {
        serializedName: "properties.targetListener",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      targetUrl: {
        serializedName: "properties.targetUrl",
        type: {
          name: "String"
        }
      },
      includePath: {
        serializedName: "properties.includePath",
        type: {
          name: "Boolean"
        }
      },
      includeQueryString: {
        serializedName: "properties.includeQueryString",
        type: {
          name: "Boolean"
        }
      },
      requestRoutingRules: {
        serializedName: "properties.requestRoutingRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubResource"
            }
          }
        }
      },
      urlPathMaps: {
        serializedName: "properties.urlPathMaps",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubResource"
            }
          }
        }
      },
      pathRules: {
        serializedName: "properties.pathRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubResource"
            }
          }
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayUrlPathMap: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewayUrlPathMap",
  type: {
    name: "Composite",
    className: "ApplicationGatewayUrlPathMap",
    modelProperties: {
      ...SubResource.type.modelProperties,
      defaultBackendAddressPool: {
        serializedName: "properties.defaultBackendAddressPool",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      defaultBackendHttpSettings: {
        serializedName: "properties.defaultBackendHttpSettings",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      defaultRedirectConfiguration: {
        serializedName: "properties.defaultRedirectConfiguration",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      pathRules: {
        serializedName: "properties.pathRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayPathRule"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayFirewallDisabledRuleGroup: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewayFirewallDisabledRuleGroup",
  type: {
    name: "Composite",
    className: "ApplicationGatewayFirewallDisabledRuleGroup",
    modelProperties: {
      ruleGroupName: {
        required: true,
        serializedName: "ruleGroupName",
        type: {
          name: "String"
        }
      },
      rules: {
        serializedName: "rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    }
  }
};

export const ApplicationGatewayFirewallExclusion: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewayFirewallExclusion",
  type: {
    name: "Composite",
    className: "ApplicationGatewayFirewallExclusion",
    modelProperties: {
      matchVariable: {
        required: true,
        serializedName: "matchVariable",
        type: {
          name: "String"
        }
      },
      selectorMatchOperator: {
        required: true,
        serializedName: "selectorMatchOperator",
        type: {
          name: "String"
        }
      },
      selector: {
        required: true,
        serializedName: "selector",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayWebApplicationFirewallConfiguration: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewayWebApplicationFirewallConfiguration",
  type: {
    name: "Composite",
    className: "ApplicationGatewayWebApplicationFirewallConfiguration",
    modelProperties: {
      enabled: {
        required: true,
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      firewallMode: {
        required: true,
        serializedName: "firewallMode",
        type: {
          name: "String"
        }
      },
      ruleSetType: {
        required: true,
        serializedName: "ruleSetType",
        type: {
          name: "String"
        }
      },
      ruleSetVersion: {
        required: true,
        serializedName: "ruleSetVersion",
        type: {
          name: "String"
        }
      },
      disabledRuleGroups: {
        serializedName: "disabledRuleGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayFirewallDisabledRuleGroup"
            }
          }
        }
      },
      requestBodyCheck: {
        serializedName: "requestBodyCheck",
        type: {
          name: "Boolean"
        }
      },
      maxRequestBodySize: {
        serializedName: "maxRequestBodySize",
        constraints: {
          InclusiveMaximum: 128,
          InclusiveMinimum: 8
        },
        type: {
          name: "Number"
        }
      },
      maxRequestBodySizeInKb: {
        serializedName: "maxRequestBodySizeInKb",
        constraints: {
          InclusiveMaximum: 128,
          InclusiveMinimum: 8
        },
        type: {
          name: "Number"
        }
      },
      fileUploadLimitInMb: {
        serializedName: "fileUploadLimitInMb",
        constraints: {
          InclusiveMaximum: 500,
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      },
      exclusions: {
        serializedName: "exclusions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayFirewallExclusion"
            }
          }
        }
      }
    }
  }
};

export const ApplicationGatewayAutoscaleConfiguration: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewayAutoscaleConfiguration",
  type: {
    name: "Composite",
    className: "ApplicationGatewayAutoscaleConfiguration",
    modelProperties: {
      minCapacity: {
        required: true,
        serializedName: "minCapacity",
        constraints: {
          InclusiveMinimum: 2
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ApplicationGateway: msRest.CompositeMapper = {
  serializedName: "ApplicationGateway",
  type: {
    name: "Composite",
    className: "ApplicationGateway",
    modelProperties: {
      ...Resource.type.modelProperties,
      sku: {
        serializedName: "properties.sku",
        type: {
          name: "Composite",
          className: "ApplicationGatewaySku"
        }
      },
      sslPolicy: {
        serializedName: "properties.sslPolicy",
        type: {
          name: "Composite",
          className: "ApplicationGatewaySslPolicy"
        }
      },
      operationalState: {
        readOnly: true,
        serializedName: "properties.operationalState",
        type: {
          name: "String"
        }
      },
      gatewayIPConfigurations: {
        serializedName: "properties.gatewayIPConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayIPConfiguration"
            }
          }
        }
      },
      authenticationCertificates: {
        serializedName: "properties.authenticationCertificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayAuthenticationCertificate"
            }
          }
        }
      },
      trustedRootCertificates: {
        serializedName: "properties.trustedRootCertificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayTrustedRootCertificate"
            }
          }
        }
      },
      sslCertificates: {
        serializedName: "properties.sslCertificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewaySslCertificate"
            }
          }
        }
      },
      frontendIPConfigurations: {
        serializedName: "properties.frontendIPConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayFrontendIPConfiguration"
            }
          }
        }
      },
      frontendPorts: {
        serializedName: "properties.frontendPorts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayFrontendPort"
            }
          }
        }
      },
      probes: {
        serializedName: "properties.probes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayProbe"
            }
          }
        }
      },
      backendAddressPools: {
        serializedName: "properties.backendAddressPools",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayBackendAddressPool"
            }
          }
        }
      },
      backendHttpSettingsCollection: {
        serializedName: "properties.backendHttpSettingsCollection",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayBackendHttpSettings"
            }
          }
        }
      },
      httpListeners: {
        serializedName: "properties.httpListeners",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayHttpListener"
            }
          }
        }
      },
      urlPathMaps: {
        serializedName: "properties.urlPathMaps",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayUrlPathMap"
            }
          }
        }
      },
      requestRoutingRules: {
        serializedName: "properties.requestRoutingRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayRequestRoutingRule"
            }
          }
        }
      },
      redirectConfigurations: {
        serializedName: "properties.redirectConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayRedirectConfiguration"
            }
          }
        }
      },
      webApplicationFirewallConfiguration: {
        serializedName: "properties.webApplicationFirewallConfiguration",
        type: {
          name: "Composite",
          className: "ApplicationGatewayWebApplicationFirewallConfiguration"
        }
      },
      enableHttp2: {
        serializedName: "properties.enableHttp2",
        type: {
          name: "Boolean"
        }
      },
      enableFips: {
        serializedName: "properties.enableFips",
        type: {
          name: "Boolean"
        }
      },
      autoscaleConfiguration: {
        serializedName: "properties.autoscaleConfiguration",
        type: {
          name: "Composite",
          className: "ApplicationGatewayAutoscaleConfiguration"
        }
      },
      resourceGuid: {
        serializedName: "properties.resourceGuid",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      customErrorConfigurations: {
        serializedName: "properties.customErrorConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayCustomError"
            }
          }
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ApplicationGatewayFirewallRule: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewayFirewallRule",
  type: {
    name: "Composite",
    className: "ApplicationGatewayFirewallRule",
    modelProperties: {
      ruleId: {
        required: true,
        serializedName: "ruleId",
        type: {
          name: "Number"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayFirewallRuleGroup: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewayFirewallRuleGroup",
  type: {
    name: "Composite",
    className: "ApplicationGatewayFirewallRuleGroup",
    modelProperties: {
      ruleGroupName: {
        required: true,
        serializedName: "ruleGroupName",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      rules: {
        required: true,
        serializedName: "rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayFirewallRule"
            }
          }
        }
      }
    }
  }
};

export const ApplicationGatewayFirewallRuleSet: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewayFirewallRuleSet",
  type: {
    name: "Composite",
    className: "ApplicationGatewayFirewallRuleSet",
    modelProperties: {
      ...Resource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      ruleSetType: {
        required: true,
        serializedName: "properties.ruleSetType",
        type: {
          name: "String"
        }
      },
      ruleSetVersion: {
        required: true,
        serializedName: "properties.ruleSetVersion",
        type: {
          name: "String"
        }
      },
      ruleGroups: {
        required: true,
        serializedName: "properties.ruleGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayFirewallRuleGroup"
            }
          }
        }
      }
    }
  }
};

export const ApplicationGatewayAvailableWafRuleSetsResult: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewayAvailableWafRuleSetsResult",
  type: {
    name: "Composite",
    className: "ApplicationGatewayAvailableWafRuleSetsResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewayFirewallRuleSet"
            }
          }
        }
      }
    }
  }
};

export const ApplicationGatewayAvailableSslOptions: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewayAvailableSslOptions",
  type: {
    name: "Composite",
    className: "ApplicationGatewayAvailableSslOptions",
    modelProperties: {
      ...Resource.type.modelProperties,
      predefinedPolicies: {
        serializedName: "properties.predefinedPolicies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubResource"
            }
          }
        }
      },
      defaultPolicy: {
        serializedName: "properties.defaultPolicy",
        type: {
          name: "String"
        }
      },
      availableCipherSuites: {
        serializedName: "properties.availableCipherSuites",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      availableProtocols: {
        serializedName: "properties.availableProtocols",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ApplicationGatewaySslPredefinedPolicy: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewaySslPredefinedPolicy",
  type: {
    name: "Composite",
    className: "ApplicationGatewaySslPredefinedPolicy",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      cipherSuites: {
        serializedName: "properties.cipherSuites",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      minProtocolVersion: {
        serializedName: "properties.minProtocolVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TagsObject: msRest.CompositeMapper = {
  serializedName: "TagsObject",
  type: {
    name: "Composite",
    className: "TagsObject",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const AvailableDelegation: msRest.CompositeMapper = {
  serializedName: "AvailableDelegation",
  type: {
    name: "Composite",
    className: "AvailableDelegation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      serviceName: {
        serializedName: "serviceName",
        type: {
          name: "String"
        }
      },
      actions: {
        serializedName: "actions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const AzureFirewallIPConfiguration: msRest.CompositeMapper = {
  serializedName: "AzureFirewallIPConfiguration",
  type: {
    name: "Composite",
    className: "AzureFirewallIPConfiguration",
    modelProperties: {
      ...SubResource.type.modelProperties,
      privateIPAddress: {
        serializedName: "properties.privateIPAddress",
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "properties.subnet",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      publicIPAddress: {
        serializedName: "properties.publicIPAddress",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFirewallRCAction: msRest.CompositeMapper = {
  serializedName: "AzureFirewallRCAction",
  type: {
    name: "Composite",
    className: "AzureFirewallRCAction",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFirewallApplicationRuleProtocol: msRest.CompositeMapper = {
  serializedName: "AzureFirewallApplicationRuleProtocol",
  type: {
    name: "Composite",
    className: "AzureFirewallApplicationRuleProtocol",
    modelProperties: {
      protocolType: {
        serializedName: "protocolType",
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        constraints: {
          InclusiveMaximum: 64000,
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AzureFirewallApplicationRule: msRest.CompositeMapper = {
  serializedName: "AzureFirewallApplicationRule",
  type: {
    name: "Composite",
    className: "AzureFirewallApplicationRule",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      sourceAddresses: {
        serializedName: "sourceAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      protocols: {
        serializedName: "protocols",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureFirewallApplicationRuleProtocol"
            }
          }
        }
      },
      targetFqdns: {
        serializedName: "targetFqdns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      fqdnTags: {
        serializedName: "fqdnTags",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const AzureFirewallApplicationRuleCollection: msRest.CompositeMapper = {
  serializedName: "AzureFirewallApplicationRuleCollection",
  type: {
    name: "Composite",
    className: "AzureFirewallApplicationRuleCollection",
    modelProperties: {
      ...SubResource.type.modelProperties,
      priority: {
        serializedName: "properties.priority",
        constraints: {
          InclusiveMaximum: 65000,
          InclusiveMinimum: 100
        },
        type: {
          name: "Number"
        }
      },
      action: {
        serializedName: "properties.action",
        type: {
          name: "Composite",
          className: "AzureFirewallRCAction"
        }
      },
      rules: {
        serializedName: "properties.rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureFirewallApplicationRule"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFirewallNatRCAction: msRest.CompositeMapper = {
  serializedName: "AzureFirewallNatRCAction",
  type: {
    name: "Composite",
    className: "AzureFirewallNatRCAction",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFirewallNatRule: msRest.CompositeMapper = {
  serializedName: "AzureFirewallNatRule",
  type: {
    name: "Composite",
    className: "AzureFirewallNatRule",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      sourceAddresses: {
        serializedName: "sourceAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      destinationAddresses: {
        serializedName: "destinationAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      destinationPorts: {
        serializedName: "destinationPorts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      protocols: {
        serializedName: "protocols",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      translatedAddress: {
        serializedName: "translatedAddress",
        type: {
          name: "String"
        }
      },
      translatedPort: {
        serializedName: "translatedPort",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFirewallNatRuleCollection: msRest.CompositeMapper = {
  serializedName: "AzureFirewallNatRuleCollection",
  type: {
    name: "Composite",
    className: "AzureFirewallNatRuleCollection",
    modelProperties: {
      ...SubResource.type.modelProperties,
      priority: {
        serializedName: "properties.priority",
        constraints: {
          InclusiveMaximum: 65000,
          InclusiveMinimum: 100
        },
        type: {
          name: "Number"
        }
      },
      action: {
        serializedName: "properties.action",
        type: {
          name: "Composite",
          className: "AzureFirewallNatRCAction"
        }
      },
      rules: {
        serializedName: "properties.rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureFirewallNatRule"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFirewallNetworkRule: msRest.CompositeMapper = {
  serializedName: "AzureFirewallNetworkRule",
  type: {
    name: "Composite",
    className: "AzureFirewallNetworkRule",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      protocols: {
        serializedName: "protocols",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      sourceAddresses: {
        serializedName: "sourceAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      destinationAddresses: {
        serializedName: "destinationAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      destinationPorts: {
        serializedName: "destinationPorts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const AzureFirewallNetworkRuleCollection: msRest.CompositeMapper = {
  serializedName: "AzureFirewallNetworkRuleCollection",
  type: {
    name: "Composite",
    className: "AzureFirewallNetworkRuleCollection",
    modelProperties: {
      ...SubResource.type.modelProperties,
      priority: {
        serializedName: "properties.priority",
        constraints: {
          InclusiveMaximum: 65000,
          InclusiveMinimum: 100
        },
        type: {
          name: "Number"
        }
      },
      action: {
        serializedName: "properties.action",
        type: {
          name: "Composite",
          className: "AzureFirewallRCAction"
        }
      },
      rules: {
        serializedName: "properties.rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureFirewallNetworkRule"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFirewall: msRest.CompositeMapper = {
  serializedName: "AzureFirewall",
  type: {
    name: "Composite",
    className: "AzureFirewall",
    modelProperties: {
      ...Resource.type.modelProperties,
      applicationRuleCollections: {
        serializedName: "properties.applicationRuleCollections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureFirewallApplicationRuleCollection"
            }
          }
        }
      },
      natRuleCollections: {
        serializedName: "properties.natRuleCollections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureFirewallNatRuleCollection"
            }
          }
        }
      },
      networkRuleCollections: {
        serializedName: "properties.networkRuleCollections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureFirewallNetworkRuleCollection"
            }
          }
        }
      },
      ipConfigurations: {
        serializedName: "properties.ipConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureFirewallIPConfiguration"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFirewallFqdnTag: msRest.CompositeMapper = {
  serializedName: "AzureFirewallFqdnTag",
  type: {
    name: "Composite",
    className: "AzureFirewallFqdnTag",
    modelProperties: {
      ...Resource.type.modelProperties,
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      fqdnTagName: {
        readOnly: true,
        serializedName: "properties.fqdnTagName",
        type: {
          name: "String"
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DnsNameAvailabilityResult: msRest.CompositeMapper = {
  serializedName: "DnsNameAvailabilityResult",
  type: {
    name: "Composite",
    className: "DnsNameAvailabilityResult",
    modelProperties: {
      available: {
        serializedName: "available",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DdosProtectionPlan: msRest.CompositeMapper = {
  serializedName: "DdosProtectionPlan",
  type: {
    name: "Composite",
    className: "DdosProtectionPlan",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      resourceGuid: {
        readOnly: true,
        serializedName: "properties.resourceGuid",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      virtualNetworks: {
        readOnly: true,
        serializedName: "properties.virtualNetworks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubResource"
            }
          }
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EndpointServiceResult: msRest.CompositeMapper = {
  serializedName: "EndpointServiceResult",
  type: {
    name: "Composite",
    className: "EndpointServiceResult",
    modelProperties: {
      ...SubResource.type.modelProperties,
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCircuitAuthorization: msRest.CompositeMapper = {
  serializedName: "ExpressRouteCircuitAuthorization",
  type: {
    name: "Composite",
    className: "ExpressRouteCircuitAuthorization",
    modelProperties: {
      ...SubResource.type.modelProperties,
      authorizationKey: {
        serializedName: "properties.authorizationKey",
        type: {
          name: "String"
        }
      },
      authorizationUseStatus: {
        serializedName: "properties.authorizationUseStatus",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCircuitPeeringConfig: msRest.CompositeMapper = {
  serializedName: "ExpressRouteCircuitPeeringConfig",
  type: {
    name: "Composite",
    className: "ExpressRouteCircuitPeeringConfig",
    modelProperties: {
      advertisedPublicPrefixes: {
        serializedName: "advertisedPublicPrefixes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      advertisedCommunities: {
        serializedName: "advertisedCommunities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      advertisedPublicPrefixesState: {
        serializedName: "advertisedPublicPrefixesState",
        type: {
          name: "String"
        }
      },
      legacyMode: {
        serializedName: "legacyMode",
        type: {
          name: "Number"
        }
      },
      customerASN: {
        serializedName: "customerASN",
        type: {
          name: "Number"
        }
      },
      routingRegistryName: {
        serializedName: "routingRegistryName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RouteFilterRule: msRest.CompositeMapper = {
  serializedName: "RouteFilterRule",
  type: {
    name: "Composite",
    className: "RouteFilterRule",
    modelProperties: {
      ...SubResource.type.modelProperties,
      access: {
        required: true,
        serializedName: "properties.access",
        type: {
          name: "String"
        }
      },
      routeFilterRuleType: {
        required: true,
        isConstant: true,
        serializedName: "properties.routeFilterRuleType",
        defaultValue: 'Community',
        type: {
          name: "String"
        }
      },
      communities: {
        required: true,
        serializedName: "properties.communities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCircuitStats: msRest.CompositeMapper = {
  serializedName: "ExpressRouteCircuitStats",
  type: {
    name: "Composite",
    className: "ExpressRouteCircuitStats",
    modelProperties: {
      primarybytesIn: {
        serializedName: "primarybytesIn",
        type: {
          name: "Number"
        }
      },
      primarybytesOut: {
        serializedName: "primarybytesOut",
        type: {
          name: "Number"
        }
      },
      secondarybytesIn: {
        serializedName: "secondarybytesIn",
        type: {
          name: "Number"
        }
      },
      secondarybytesOut: {
        serializedName: "secondarybytesOut",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ExpressRouteConnectionId: msRest.CompositeMapper = {
  serializedName: "ExpressRouteConnectionId",
  type: {
    name: "Composite",
    className: "ExpressRouteConnectionId",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCircuitConnection: msRest.CompositeMapper = {
  serializedName: "ExpressRouteCircuitConnection",
  type: {
    name: "Composite",
    className: "ExpressRouteCircuitConnection",
    modelProperties: {
      ...SubResource.type.modelProperties,
      expressRouteCircuitPeering: {
        serializedName: "properties.expressRouteCircuitPeering",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      peerExpressRouteCircuitPeering: {
        serializedName: "properties.peerExpressRouteCircuitPeering",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      addressPrefix: {
        serializedName: "properties.addressPrefix",
        type: {
          name: "String"
        }
      },
      authorizationKey: {
        serializedName: "properties.authorizationKey",
        type: {
          name: "String"
        }
      },
      circuitConnectionStatus: {
        readOnly: true,
        serializedName: "properties.circuitConnectionStatus",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCircuitPeering: msRest.CompositeMapper = {
  serializedName: "ExpressRouteCircuitPeering",
  type: {
    name: "Composite",
    className: "ExpressRouteCircuitPeering",
    modelProperties: {
      ...SubResource.type.modelProperties,
      peeringType: {
        serializedName: "properties.peeringType",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      azureASN: {
        serializedName: "properties.azureASN",
        type: {
          name: "Number"
        }
      },
      peerASN: {
        serializedName: "properties.peerASN",
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      primaryPeerAddressPrefix: {
        serializedName: "properties.primaryPeerAddressPrefix",
        type: {
          name: "String"
        }
      },
      secondaryPeerAddressPrefix: {
        serializedName: "properties.secondaryPeerAddressPrefix",
        type: {
          name: "String"
        }
      },
      primaryAzurePort: {
        serializedName: "properties.primaryAzurePort",
        type: {
          name: "String"
        }
      },
      secondaryAzurePort: {
        serializedName: "properties.secondaryAzurePort",
        type: {
          name: "String"
        }
      },
      sharedKey: {
        serializedName: "properties.sharedKey",
        type: {
          name: "String"
        }
      },
      vlanId: {
        serializedName: "properties.vlanId",
        type: {
          name: "Number"
        }
      },
      microsoftPeeringConfig: {
        serializedName: "properties.microsoftPeeringConfig",
        type: {
          name: "Composite",
          className: "ExpressRouteCircuitPeeringConfig"
        }
      },
      stats: {
        serializedName: "properties.stats",
        type: {
          name: "Composite",
          className: "ExpressRouteCircuitStats"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      gatewayManagerEtag: {
        serializedName: "properties.gatewayManagerEtag",
        type: {
          name: "String"
        }
      },
      lastModifiedBy: {
        serializedName: "properties.lastModifiedBy",
        type: {
          name: "String"
        }
      },
      routeFilter: {
        serializedName: "properties.routeFilter",
        type: {
          name: "Composite",
          className: "RouteFilter"
        }
      },
      ipv6PeeringConfig: {
        serializedName: "properties.ipv6PeeringConfig",
        type: {
          name: "Composite",
          className: "Ipv6ExpressRouteCircuitPeeringConfig"
        }
      },
      expressRouteConnection: {
        serializedName: "properties.expressRouteConnection",
        type: {
          name: "Composite",
          className: "ExpressRouteConnectionId"
        }
      },
      connections: {
        serializedName: "properties.connections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteCircuitConnection"
            }
          }
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RouteFilter: msRest.CompositeMapper = {
  serializedName: "RouteFilter",
  type: {
    name: "Composite",
    className: "RouteFilter",
    modelProperties: {
      ...Resource.type.modelProperties,
      rules: {
        serializedName: "properties.rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RouteFilterRule"
            }
          }
        }
      },
      peerings: {
        serializedName: "properties.peerings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteCircuitPeering"
            }
          }
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Ipv6ExpressRouteCircuitPeeringConfig: msRest.CompositeMapper = {
  serializedName: "Ipv6ExpressRouteCircuitPeeringConfig",
  type: {
    name: "Composite",
    className: "Ipv6ExpressRouteCircuitPeeringConfig",
    modelProperties: {
      primaryPeerAddressPrefix: {
        serializedName: "primaryPeerAddressPrefix",
        type: {
          name: "String"
        }
      },
      secondaryPeerAddressPrefix: {
        serializedName: "secondaryPeerAddressPrefix",
        type: {
          name: "String"
        }
      },
      microsoftPeeringConfig: {
        serializedName: "microsoftPeeringConfig",
        type: {
          name: "Composite",
          className: "ExpressRouteCircuitPeeringConfig"
        }
      },
      routeFilter: {
        serializedName: "routeFilter",
        type: {
          name: "Composite",
          className: "RouteFilter"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCircuitSku: msRest.CompositeMapper = {
  serializedName: "ExpressRouteCircuitSku",
  type: {
    name: "Composite",
    className: "ExpressRouteCircuitSku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "family",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCircuitServiceProviderProperties: msRest.CompositeMapper = {
  serializedName: "ExpressRouteCircuitServiceProviderProperties",
  type: {
    name: "Composite",
    className: "ExpressRouteCircuitServiceProviderProperties",
    modelProperties: {
      serviceProviderName: {
        serializedName: "serviceProviderName",
        type: {
          name: "String"
        }
      },
      peeringLocation: {
        serializedName: "peeringLocation",
        type: {
          name: "String"
        }
      },
      bandwidthInMbps: {
        serializedName: "bandwidthInMbps",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ExpressRouteCircuit: msRest.CompositeMapper = {
  serializedName: "ExpressRouteCircuit",
  type: {
    name: "Composite",
    className: "ExpressRouteCircuit",
    modelProperties: {
      ...Resource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "ExpressRouteCircuitSku"
        }
      },
      allowClassicOperations: {
        serializedName: "properties.allowClassicOperations",
        type: {
          name: "Boolean"
        }
      },
      circuitProvisioningState: {
        serializedName: "properties.circuitProvisioningState",
        type: {
          name: "String"
        }
      },
      serviceProviderProvisioningState: {
        serializedName: "properties.serviceProviderProvisioningState",
        type: {
          name: "String"
        }
      },
      authorizations: {
        serializedName: "properties.authorizations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteCircuitAuthorization"
            }
          }
        }
      },
      peerings: {
        serializedName: "properties.peerings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteCircuitPeering"
            }
          }
        }
      },
      serviceKey: {
        serializedName: "properties.serviceKey",
        type: {
          name: "String"
        }
      },
      serviceProviderNotes: {
        serializedName: "properties.serviceProviderNotes",
        type: {
          name: "String"
        }
      },
      serviceProviderProperties: {
        serializedName: "properties.serviceProviderProperties",
        type: {
          name: "Composite",
          className: "ExpressRouteCircuitServiceProviderProperties"
        }
      },
      expressRoutePort: {
        serializedName: "properties.expressRoutePort",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      bandwidthInGbps: {
        serializedName: "properties.bandwidthInGbps",
        type: {
          name: "Number"
        }
      },
      stag: {
        readOnly: true,
        serializedName: "properties.stag",
        type: {
          name: "Number"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      gatewayManagerEtag: {
        serializedName: "properties.gatewayManagerEtag",
        type: {
          name: "String"
        }
      },
      allowGlobalReach: {
        serializedName: "properties.allowGlobalReach",
        type: {
          name: "Boolean"
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCircuitArpTable: msRest.CompositeMapper = {
  serializedName: "ExpressRouteCircuitArpTable",
  type: {
    name: "Composite",
    className: "ExpressRouteCircuitArpTable",
    modelProperties: {
      age: {
        serializedName: "age",
        type: {
          name: "Number"
        }
      },
      interfaceProperty: {
        serializedName: "interface",
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      },
      macAddress: {
        serializedName: "macAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCircuitsArpTableListResult: msRest.CompositeMapper = {
  serializedName: "ExpressRouteCircuitsArpTableListResult",
  type: {
    name: "Composite",
    className: "ExpressRouteCircuitsArpTableListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteCircuitArpTable"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCircuitRoutesTable: msRest.CompositeMapper = {
  serializedName: "ExpressRouteCircuitRoutesTable",
  type: {
    name: "Composite",
    className: "ExpressRouteCircuitRoutesTable",
    modelProperties: {
      network: {
        serializedName: "network",
        type: {
          name: "String"
        }
      },
      nextHop: {
        serializedName: "nextHop",
        type: {
          name: "String"
        }
      },
      locPrf: {
        serializedName: "locPrf",
        type: {
          name: "String"
        }
      },
      weight: {
        serializedName: "weight",
        type: {
          name: "Number"
        }
      },
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCircuitsRoutesTableListResult: msRest.CompositeMapper = {
  serializedName: "ExpressRouteCircuitsRoutesTableListResult",
  type: {
    name: "Composite",
    className: "ExpressRouteCircuitsRoutesTableListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteCircuitRoutesTable"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCircuitRoutesTableSummary: msRest.CompositeMapper = {
  serializedName: "ExpressRouteCircuitRoutesTableSummary",
  type: {
    name: "Composite",
    className: "ExpressRouteCircuitRoutesTableSummary",
    modelProperties: {
      neighbor: {
        serializedName: "neighbor",
        type: {
          name: "String"
        }
      },
      v: {
        serializedName: "v",
        type: {
          name: "Number"
        }
      },
      as: {
        serializedName: "as",
        type: {
          name: "Number"
        }
      },
      upDown: {
        serializedName: "upDown",
        type: {
          name: "String"
        }
      },
      statePfxRcd: {
        serializedName: "statePfxRcd",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCircuitsRoutesTableSummaryListResult: msRest.CompositeMapper = {
  serializedName: "ExpressRouteCircuitsRoutesTableSummaryListResult",
  type: {
    name: "Composite",
    className: "ExpressRouteCircuitsRoutesTableSummaryListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteCircuitRoutesTableSummary"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteServiceProviderBandwidthsOffered: msRest.CompositeMapper = {
  serializedName: "ExpressRouteServiceProviderBandwidthsOffered",
  type: {
    name: "Composite",
    className: "ExpressRouteServiceProviderBandwidthsOffered",
    modelProperties: {
      offerName: {
        serializedName: "offerName",
        type: {
          name: "String"
        }
      },
      valueInMbps: {
        serializedName: "valueInMbps",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ExpressRouteServiceProvider: msRest.CompositeMapper = {
  serializedName: "ExpressRouteServiceProvider",
  type: {
    name: "Composite",
    className: "ExpressRouteServiceProvider",
    modelProperties: {
      ...Resource.type.modelProperties,
      peeringLocations: {
        serializedName: "properties.peeringLocations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      bandwidthsOffered: {
        serializedName: "properties.bandwidthsOffered",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteServiceProviderBandwidthsOffered"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCrossConnectionRoutesTableSummary: msRest.CompositeMapper = {
  serializedName: "ExpressRouteCrossConnectionRoutesTableSummary",
  type: {
    name: "Composite",
    className: "ExpressRouteCrossConnectionRoutesTableSummary",
    modelProperties: {
      neighbor: {
        serializedName: "neighbor",
        type: {
          name: "String"
        }
      },
      asn: {
        serializedName: "asn",
        type: {
          name: "Number"
        }
      },
      upDown: {
        serializedName: "upDown",
        type: {
          name: "String"
        }
      },
      stateOrPrefixesReceived: {
        serializedName: "stateOrPrefixesReceived",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCrossConnectionsRoutesTableSummaryListResult: msRest.CompositeMapper = {
  serializedName: "ExpressRouteCrossConnectionsRoutesTableSummaryListResult",
  type: {
    name: "Composite",
    className: "ExpressRouteCrossConnectionsRoutesTableSummaryListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteCrossConnectionRoutesTableSummary"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCircuitReference: msRest.CompositeMapper = {
  serializedName: "ExpressRouteCircuitReference",
  type: {
    name: "Composite",
    className: "ExpressRouteCircuitReference",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCrossConnectionPeering: msRest.CompositeMapper = {
  serializedName: "ExpressRouteCrossConnectionPeering",
  type: {
    name: "Composite",
    className: "ExpressRouteCrossConnectionPeering",
    modelProperties: {
      ...SubResource.type.modelProperties,
      peeringType: {
        serializedName: "properties.peeringType",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      azureASN: {
        readOnly: true,
        serializedName: "properties.azureASN",
        type: {
          name: "Number"
        }
      },
      peerASN: {
        serializedName: "properties.peerASN",
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      primaryPeerAddressPrefix: {
        serializedName: "properties.primaryPeerAddressPrefix",
        type: {
          name: "String"
        }
      },
      secondaryPeerAddressPrefix: {
        serializedName: "properties.secondaryPeerAddressPrefix",
        type: {
          name: "String"
        }
      },
      primaryAzurePort: {
        readOnly: true,
        serializedName: "properties.primaryAzurePort",
        type: {
          name: "String"
        }
      },
      secondaryAzurePort: {
        readOnly: true,
        serializedName: "properties.secondaryAzurePort",
        type: {
          name: "String"
        }
      },
      sharedKey: {
        serializedName: "properties.sharedKey",
        type: {
          name: "String"
        }
      },
      vlanId: {
        serializedName: "properties.vlanId",
        type: {
          name: "Number"
        }
      },
      microsoftPeeringConfig: {
        serializedName: "properties.microsoftPeeringConfig",
        type: {
          name: "Composite",
          className: "ExpressRouteCircuitPeeringConfig"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      gatewayManagerEtag: {
        serializedName: "properties.gatewayManagerEtag",
        type: {
          name: "String"
        }
      },
      lastModifiedBy: {
        serializedName: "properties.lastModifiedBy",
        type: {
          name: "String"
        }
      },
      ipv6PeeringConfig: {
        serializedName: "properties.ipv6PeeringConfig",
        type: {
          name: "Composite",
          className: "Ipv6ExpressRouteCircuitPeeringConfig"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCrossConnection: msRest.CompositeMapper = {
  serializedName: "ExpressRouteCrossConnection",
  type: {
    name: "Composite",
    className: "ExpressRouteCrossConnection",
    modelProperties: {
      ...Resource.type.modelProperties,
      primaryAzurePort: {
        readOnly: true,
        serializedName: "properties.primaryAzurePort",
        type: {
          name: "String"
        }
      },
      secondaryAzurePort: {
        readOnly: true,
        serializedName: "properties.secondaryAzurePort",
        type: {
          name: "String"
        }
      },
      sTag: {
        readOnly: true,
        serializedName: "properties.sTag",
        type: {
          name: "Number"
        }
      },
      peeringLocation: {
        serializedName: "properties.peeringLocation",
        type: {
          name: "String"
        }
      },
      bandwidthInMbps: {
        serializedName: "properties.bandwidthInMbps",
        type: {
          name: "Number"
        }
      },
      expressRouteCircuit: {
        serializedName: "properties.expressRouteCircuit",
        type: {
          name: "Composite",
          className: "ExpressRouteCircuitReference"
        }
      },
      serviceProviderProvisioningState: {
        serializedName: "properties.serviceProviderProvisioningState",
        type: {
          name: "String"
        }
      },
      serviceProviderNotes: {
        serializedName: "properties.serviceProviderNotes",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      peerings: {
        serializedName: "properties.peerings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteCrossConnectionPeering"
            }
          }
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualHubId: msRest.CompositeMapper = {
  serializedName: "VirtualHubId",
  type: {
    name: "Composite",
    className: "VirtualHubId",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCircuitPeeringId: msRest.CompositeMapper = {
  serializedName: "ExpressRouteCircuitPeeringId",
  type: {
    name: "Composite",
    className: "ExpressRouteCircuitPeeringId",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds: msRest.CompositeMapper = {
  serializedName: "ExpressRouteGatewayProperties_autoScaleConfiguration_bounds",
  type: {
    name: "Composite",
    className: "ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds",
    modelProperties: {
      min: {
        serializedName: "min",
        type: {
          name: "Number"
        }
      },
      max: {
        serializedName: "max",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ExpressRouteGatewayPropertiesAutoScaleConfiguration: msRest.CompositeMapper = {
  serializedName: "ExpressRouteGatewayProperties_autoScaleConfiguration",
  type: {
    name: "Composite",
    className: "ExpressRouteGatewayPropertiesAutoScaleConfiguration",
    modelProperties: {
      bounds: {
        serializedName: "bounds",
        type: {
          name: "Composite",
          className: "ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds"
        }
      }
    }
  }
};

export const ExpressRouteConnection: msRest.CompositeMapper = {
  serializedName: "ExpressRouteConnection",
  type: {
    name: "Composite",
    className: "ExpressRouteConnection",
    modelProperties: {
      ...SubResource.type.modelProperties,
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      expressRouteCircuitPeering: {
        required: true,
        serializedName: "properties.expressRouteCircuitPeering",
        type: {
          name: "Composite",
          className: "ExpressRouteCircuitPeeringId"
        }
      },
      authorizationKey: {
        serializedName: "properties.authorizationKey",
        type: {
          name: "String"
        }
      },
      routingWeight: {
        serializedName: "properties.routingWeight",
        type: {
          name: "Number"
        }
      },
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteGateway: msRest.CompositeMapper = {
  serializedName: "ExpressRouteGateway",
  type: {
    name: "Composite",
    className: "ExpressRouteGateway",
    modelProperties: {
      ...Resource.type.modelProperties,
      autoScaleConfiguration: {
        serializedName: "properties.autoScaleConfiguration",
        type: {
          name: "Composite",
          className: "ExpressRouteGatewayPropertiesAutoScaleConfiguration"
        }
      },
      expressRouteConnections: {
        readOnly: true,
        serializedName: "properties.expressRouteConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteConnection"
            }
          }
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      virtualHub: {
        required: true,
        serializedName: "properties.virtualHub",
        type: {
          name: "Composite",
          className: "VirtualHubId"
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteGatewayList: msRest.CompositeMapper = {
  serializedName: "ExpressRouteGatewayList",
  type: {
    name: "Composite",
    className: "ExpressRouteGatewayList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteGateway"
            }
          }
        }
      }
    }
  }
};

export const ExpressRouteConnectionList: msRest.CompositeMapper = {
  serializedName: "ExpressRouteConnectionList",
  type: {
    name: "Composite",
    className: "ExpressRouteConnectionList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteConnection"
            }
          }
        }
      }
    }
  }
};

export const ExpressRoutePortsLocationBandwidths: msRest.CompositeMapper = {
  serializedName: "ExpressRoutePortsLocationBandwidths",
  type: {
    name: "Composite",
    className: "ExpressRoutePortsLocationBandwidths",
    modelProperties: {
      offerName: {
        readOnly: true,
        serializedName: "offerName",
        type: {
          name: "String"
        }
      },
      valueInGbps: {
        readOnly: true,
        serializedName: "valueInGbps",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ExpressRoutePortsLocation: msRest.CompositeMapper = {
  serializedName: "ExpressRoutePortsLocation",
  type: {
    name: "Composite",
    className: "ExpressRoutePortsLocation",
    modelProperties: {
      ...Resource.type.modelProperties,
      address: {
        readOnly: true,
        serializedName: "properties.address",
        type: {
          name: "String"
        }
      },
      contact: {
        readOnly: true,
        serializedName: "properties.contact",
        type: {
          name: "String"
        }
      },
      availableBandwidths: {
        serializedName: "properties.availableBandwidths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRoutePortsLocationBandwidths"
            }
          }
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteLink: msRest.CompositeMapper = {
  serializedName: "ExpressRouteLink",
  type: {
    name: "Composite",
    className: "ExpressRouteLink",
    modelProperties: {
      ...SubResource.type.modelProperties,
      routerName: {
        readOnly: true,
        serializedName: "properties.routerName",
        type: {
          name: "String"
        }
      },
      interfaceName: {
        readOnly: true,
        serializedName: "properties.interfaceName",
        type: {
          name: "String"
        }
      },
      patchPanelId: {
        readOnly: true,
        serializedName: "properties.patchPanelId",
        type: {
          name: "String"
        }
      },
      rackId: {
        readOnly: true,
        serializedName: "properties.rackId",
        type: {
          name: "String"
        }
      },
      connectorType: {
        readOnly: true,
        serializedName: "properties.connectorType",
        type: {
          name: "String"
        }
      },
      adminState: {
        serializedName: "properties.adminState",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRoutePort: msRest.CompositeMapper = {
  serializedName: "ExpressRoutePort",
  type: {
    name: "Composite",
    className: "ExpressRoutePort",
    modelProperties: {
      ...Resource.type.modelProperties,
      peeringLocation: {
        serializedName: "properties.peeringLocation",
        type: {
          name: "String"
        }
      },
      bandwidthInGbps: {
        serializedName: "properties.bandwidthInGbps",
        type: {
          name: "Number"
        }
      },
      provisionedBandwidthInGbps: {
        readOnly: true,
        serializedName: "properties.provisionedBandwidthInGbps",
        type: {
          name: "Number"
        }
      },
      mtu: {
        readOnly: true,
        serializedName: "properties.mtu",
        type: {
          name: "String"
        }
      },
      encapsulation: {
        serializedName: "properties.encapsulation",
        type: {
          name: "String"
        }
      },
      etherType: {
        readOnly: true,
        serializedName: "properties.etherType",
        type: {
          name: "String"
        }
      },
      allocationDate: {
        readOnly: true,
        serializedName: "properties.allocationDate",
        type: {
          name: "String"
        }
      },
      links: {
        serializedName: "properties.links",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteLink"
            }
          }
        }
      },
      circuits: {
        readOnly: true,
        serializedName: "properties.circuits",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubResource"
            }
          }
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      resourceGuid: {
        serializedName: "properties.resourceGuid",
        type: {
          name: "String"
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LoadBalancerSku: msRest.CompositeMapper = {
  serializedName: "LoadBalancerSku",
  type: {
    name: "Composite",
    className: "LoadBalancerSku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LoadBalancingRule: msRest.CompositeMapper = {
  serializedName: "LoadBalancingRule",
  type: {
    name: "Composite",
    className: "LoadBalancingRule",
    modelProperties: {
      ...SubResource.type.modelProperties,
      frontendIPConfiguration: {
        serializedName: "properties.frontendIPConfiguration",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      backendAddressPool: {
        serializedName: "properties.backendAddressPool",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      probe: {
        serializedName: "properties.probe",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      protocol: {
        required: true,
        serializedName: "properties.protocol",
        type: {
          name: "String"
        }
      },
      loadDistribution: {
        serializedName: "properties.loadDistribution",
        type: {
          name: "String"
        }
      },
      frontendPort: {
        required: true,
        serializedName: "properties.frontendPort",
        type: {
          name: "Number"
        }
      },
      backendPort: {
        serializedName: "properties.backendPort",
        type: {
          name: "Number"
        }
      },
      idleTimeoutInMinutes: {
        serializedName: "properties.idleTimeoutInMinutes",
        type: {
          name: "Number"
        }
      },
      enableFloatingIP: {
        serializedName: "properties.enableFloatingIP",
        type: {
          name: "Boolean"
        }
      },
      enableTcpReset: {
        serializedName: "properties.enableTcpReset",
        type: {
          name: "Boolean"
        }
      },
      disableOutboundSnat: {
        serializedName: "properties.disableOutboundSnat",
        type: {
          name: "Boolean"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Probe: msRest.CompositeMapper = {
  serializedName: "Probe",
  type: {
    name: "Composite",
    className: "Probe",
    modelProperties: {
      ...SubResource.type.modelProperties,
      loadBalancingRules: {
        readOnly: true,
        serializedName: "properties.loadBalancingRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubResource"
            }
          }
        }
      },
      protocol: {
        required: true,
        serializedName: "properties.protocol",
        type: {
          name: "String"
        }
      },
      port: {
        required: true,
        serializedName: "properties.port",
        type: {
          name: "Number"
        }
      },
      intervalInSeconds: {
        serializedName: "properties.intervalInSeconds",
        type: {
          name: "Number"
        }
      },
      numberOfProbes: {
        serializedName: "properties.numberOfProbes",
        type: {
          name: "Number"
        }
      },
      requestPath: {
        serializedName: "properties.requestPath",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InboundNatPool: msRest.CompositeMapper = {
  serializedName: "InboundNatPool",
  type: {
    name: "Composite",
    className: "InboundNatPool",
    modelProperties: {
      ...SubResource.type.modelProperties,
      frontendIPConfiguration: {
        serializedName: "properties.frontendIPConfiguration",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      protocol: {
        required: true,
        serializedName: "properties.protocol",
        type: {
          name: "String"
        }
      },
      frontendPortRangeStart: {
        required: true,
        serializedName: "properties.frontendPortRangeStart",
        type: {
          name: "Number"
        }
      },
      frontendPortRangeEnd: {
        required: true,
        serializedName: "properties.frontendPortRangeEnd",
        type: {
          name: "Number"
        }
      },
      backendPort: {
        required: true,
        serializedName: "properties.backendPort",
        type: {
          name: "Number"
        }
      },
      idleTimeoutInMinutes: {
        serializedName: "properties.idleTimeoutInMinutes",
        type: {
          name: "Number"
        }
      },
      enableFloatingIP: {
        serializedName: "properties.enableFloatingIP",
        type: {
          name: "Boolean"
        }
      },
      enableTcpReset: {
        serializedName: "properties.enableTcpReset",
        type: {
          name: "Boolean"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OutboundRule: msRest.CompositeMapper = {
  serializedName: "OutboundRule",
  type: {
    name: "Composite",
    className: "OutboundRule",
    modelProperties: {
      ...SubResource.type.modelProperties,
      allocatedOutboundPorts: {
        serializedName: "properties.allocatedOutboundPorts",
        type: {
          name: "Number"
        }
      },
      frontendIPConfigurations: {
        required: true,
        serializedName: "properties.frontendIPConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubResource"
            }
          }
        }
      },
      backendAddressPool: {
        required: true,
        serializedName: "properties.backendAddressPool",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      protocol: {
        required: true,
        serializedName: "properties.protocol",
        type: {
          name: "String"
        }
      },
      enableTcpReset: {
        serializedName: "properties.enableTcpReset",
        type: {
          name: "Boolean"
        }
      },
      idleTimeoutInMinutes: {
        serializedName: "properties.idleTimeoutInMinutes",
        type: {
          name: "Number"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LoadBalancer: msRest.CompositeMapper = {
  serializedName: "LoadBalancer",
  type: {
    name: "Composite",
    className: "LoadBalancer",
    modelProperties: {
      ...Resource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "LoadBalancerSku"
        }
      },
      frontendIPConfigurations: {
        serializedName: "properties.frontendIPConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FrontendIPConfiguration"
            }
          }
        }
      },
      backendAddressPools: {
        serializedName: "properties.backendAddressPools",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BackendAddressPool"
            }
          }
        }
      },
      loadBalancingRules: {
        serializedName: "properties.loadBalancingRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LoadBalancingRule"
            }
          }
        }
      },
      probes: {
        serializedName: "properties.probes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Probe"
            }
          }
        }
      },
      inboundNatRules: {
        serializedName: "properties.inboundNatRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InboundNatRule"
            }
          }
        }
      },
      inboundNatPools: {
        serializedName: "properties.inboundNatPools",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InboundNatPool"
            }
          }
        }
      },
      outboundRules: {
        serializedName: "properties.outboundRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OutboundRule"
            }
          }
        }
      },
      resourceGuid: {
        serializedName: "properties.resourceGuid",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorDetails: msRest.CompositeMapper = {
  serializedName: "ErrorDetails",
  type: {
    name: "Composite",
    className: "ErrorDetails",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorModel: msRest.CompositeMapper = {
  serializedName: "Error",
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetails"
            }
          }
        }
      },
      innerError: {
        serializedName: "innerError",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureAsyncOperationResult: msRest.CompositeMapper = {
  serializedName: "AzureAsyncOperationResult",
  type: {
    name: "Composite",
    className: "AzureAsyncOperationResult",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorModel"
        }
      }
    }
  }
};

export const EffectiveNetworkSecurityGroupAssociation: msRest.CompositeMapper = {
  serializedName: "EffectiveNetworkSecurityGroupAssociation",
  type: {
    name: "Composite",
    className: "EffectiveNetworkSecurityGroupAssociation",
    modelProperties: {
      subnet: {
        serializedName: "subnet",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      networkInterface: {
        serializedName: "networkInterface",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      }
    }
  }
};

export const EffectiveNetworkSecurityRule: msRest.CompositeMapper = {
  serializedName: "EffectiveNetworkSecurityRule",
  type: {
    name: "Composite",
    className: "EffectiveNetworkSecurityRule",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      protocol: {
        serializedName: "protocol",
        type: {
          name: "String"
        }
      },
      sourcePortRange: {
        serializedName: "sourcePortRange",
        type: {
          name: "String"
        }
      },
      destinationPortRange: {
        serializedName: "destinationPortRange",
        type: {
          name: "String"
        }
      },
      sourcePortRanges: {
        serializedName: "sourcePortRanges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      destinationPortRanges: {
        serializedName: "destinationPortRanges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      sourceAddressPrefix: {
        serializedName: "sourceAddressPrefix",
        type: {
          name: "String"
        }
      },
      destinationAddressPrefix: {
        serializedName: "destinationAddressPrefix",
        type: {
          name: "String"
        }
      },
      sourceAddressPrefixes: {
        serializedName: "sourceAddressPrefixes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      destinationAddressPrefixes: {
        serializedName: "destinationAddressPrefixes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      expandedSourceAddressPrefix: {
        serializedName: "expandedSourceAddressPrefix",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      expandedDestinationAddressPrefix: {
        serializedName: "expandedDestinationAddressPrefix",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      access: {
        serializedName: "access",
        type: {
          name: "String"
        }
      },
      priority: {
        serializedName: "priority",
        type: {
          name: "Number"
        }
      },
      direction: {
        serializedName: "direction",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EffectiveNetworkSecurityGroup: msRest.CompositeMapper = {
  serializedName: "EffectiveNetworkSecurityGroup",
  type: {
    name: "Composite",
    className: "EffectiveNetworkSecurityGroup",
    modelProperties: {
      networkSecurityGroup: {
        serializedName: "networkSecurityGroup",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      association: {
        serializedName: "association",
        type: {
          name: "Composite",
          className: "EffectiveNetworkSecurityGroupAssociation"
        }
      },
      effectiveSecurityRules: {
        serializedName: "effectiveSecurityRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EffectiveNetworkSecurityRule"
            }
          }
        }
      },
      tagMap: {
        serializedName: "tagMap",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    }
  }
};

export const EffectiveNetworkSecurityGroupListResult: msRest.CompositeMapper = {
  serializedName: "EffectiveNetworkSecurityGroupListResult",
  type: {
    name: "Composite",
    className: "EffectiveNetworkSecurityGroupListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EffectiveNetworkSecurityGroup"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EffectiveRoute: msRest.CompositeMapper = {
  serializedName: "EffectiveRoute",
  type: {
    name: "Composite",
    className: "EffectiveRoute",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      source: {
        serializedName: "source",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      addressPrefix: {
        serializedName: "addressPrefix",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      nextHopIpAddress: {
        serializedName: "nextHopIpAddress",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      nextHopType: {
        serializedName: "nextHopType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EffectiveRouteListResult: msRest.CompositeMapper = {
  serializedName: "EffectiveRouteListResult",
  type: {
    name: "Composite",
    className: "EffectiveRouteListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EffectiveRoute"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerNetworkInterfaceConfiguration: msRest.CompositeMapper = {
  serializedName: "ContainerNetworkInterfaceConfiguration",
  type: {
    name: "Composite",
    className: "ContainerNetworkInterfaceConfiguration",
    modelProperties: {
      ...SubResource.type.modelProperties,
      ipConfigurations: {
        serializedName: "properties.ipConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IPConfigurationProfile"
            }
          }
        }
      },
      containerNetworkInterfaces: {
        serializedName: "properties.containerNetworkInterfaces",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContainerNetworkInterface"
            }
          }
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Container: msRest.CompositeMapper = {
  serializedName: "Container",
  type: {
    name: "Composite",
    className: "Container",
    modelProperties: {
      ...SubResource.type.modelProperties
    }
  }
};

export const ContainerNetworkInterfaceIpConfiguration: msRest.CompositeMapper = {
  serializedName: "ContainerNetworkInterfaceIpConfiguration",
  type: {
    name: "Composite",
    className: "ContainerNetworkInterfaceIpConfiguration",
    modelProperties: {
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerNetworkInterface: msRest.CompositeMapper = {
  serializedName: "ContainerNetworkInterface",
  type: {
    name: "Composite",
    className: "ContainerNetworkInterface",
    modelProperties: {
      ...SubResource.type.modelProperties,
      containerNetworkInterfaceConfiguration: {
        serializedName: "properties.containerNetworkInterfaceConfiguration",
        type: {
          name: "Composite",
          className: "ContainerNetworkInterfaceConfiguration"
        }
      },
      container: {
        serializedName: "properties.container",
        type: {
          name: "Composite",
          className: "Container"
        }
      },
      ipConfigurations: {
        serializedName: "properties.ipConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContainerNetworkInterfaceIpConfiguration"
            }
          }
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkProfile: msRest.CompositeMapper = {
  serializedName: "NetworkProfile",
  type: {
    name: "Composite",
    className: "NetworkProfile",
    modelProperties: {
      ...Resource.type.modelProperties,
      containerNetworkInterfaces: {
        serializedName: "properties.containerNetworkInterfaces",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContainerNetworkInterface"
            }
          }
        }
      },
      containerNetworkInterfaceConfigurations: {
        serializedName: "properties.containerNetworkInterfaceConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContainerNetworkInterfaceConfiguration"
            }
          }
        }
      },
      resourceGuid: {
        readOnly: true,
        serializedName: "properties.resourceGuid",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: msRest.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetails"
        }
      }
    }
  }
};

export const NetworkWatcher: msRest.CompositeMapper = {
  serializedName: "NetworkWatcher",
  type: {
    name: "Composite",
    className: "NetworkWatcher",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TopologyParameters: msRest.CompositeMapper = {
  serializedName: "TopologyParameters",
  type: {
    name: "Composite",
    className: "TopologyParameters",
    modelProperties: {
      targetResourceGroupName: {
        serializedName: "targetResourceGroupName",
        type: {
          name: "String"
        }
      },
      targetVirtualNetwork: {
        serializedName: "targetVirtualNetwork",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      targetSubnet: {
        serializedName: "targetSubnet",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      }
    }
  }
};

export const TopologyAssociation: msRest.CompositeMapper = {
  serializedName: "TopologyAssociation",
  type: {
    name: "Composite",
    className: "TopologyAssociation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      associationType: {
        serializedName: "associationType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TopologyResource: msRest.CompositeMapper = {
  serializedName: "TopologyResource",
  type: {
    name: "Composite",
    className: "TopologyResource",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      associations: {
        serializedName: "associations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TopologyAssociation"
            }
          }
        }
      }
    }
  }
};

export const Topology: msRest.CompositeMapper = {
  serializedName: "Topology",
  type: {
    name: "Composite",
    className: "Topology",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      createdDateTime: {
        readOnly: true,
        serializedName: "createdDateTime",
        type: {
          name: "DateTime"
        }
      },
      lastModified: {
        readOnly: true,
        serializedName: "lastModified",
        type: {
          name: "DateTime"
        }
      },
      resources: {
        serializedName: "resources",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TopologyResource"
            }
          }
        }
      }
    }
  }
};

export const VerificationIPFlowParameters: msRest.CompositeMapper = {
  serializedName: "VerificationIPFlowParameters",
  type: {
    name: "Composite",
    className: "VerificationIPFlowParameters",
    modelProperties: {
      targetResourceId: {
        required: true,
        serializedName: "targetResourceId",
        type: {
          name: "String"
        }
      },
      direction: {
        required: true,
        serializedName: "direction",
        type: {
          name: "String"
        }
      },
      protocol: {
        required: true,
        serializedName: "protocol",
        type: {
          name: "String"
        }
      },
      localPort: {
        required: true,
        serializedName: "localPort",
        type: {
          name: "String"
        }
      },
      remotePort: {
        required: true,
        serializedName: "remotePort",
        type: {
          name: "String"
        }
      },
      localIPAddress: {
        required: true,
        serializedName: "localIPAddress",
        type: {
          name: "String"
        }
      },
      remoteIPAddress: {
        required: true,
        serializedName: "remoteIPAddress",
        type: {
          name: "String"
        }
      },
      targetNicResourceId: {
        serializedName: "targetNicResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VerificationIPFlowResult: msRest.CompositeMapper = {
  serializedName: "VerificationIPFlowResult",
  type: {
    name: "Composite",
    className: "VerificationIPFlowResult",
    modelProperties: {
      access: {
        serializedName: "access",
        type: {
          name: "String"
        }
      },
      ruleName: {
        serializedName: "ruleName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NextHopParameters: msRest.CompositeMapper = {
  serializedName: "NextHopParameters",
  type: {
    name: "Composite",
    className: "NextHopParameters",
    modelProperties: {
      targetResourceId: {
        required: true,
        serializedName: "targetResourceId",
        type: {
          name: "String"
        }
      },
      sourceIPAddress: {
        required: true,
        serializedName: "sourceIPAddress",
        type: {
          name: "String"
        }
      },
      destinationIPAddress: {
        required: true,
        serializedName: "destinationIPAddress",
        type: {
          name: "String"
        }
      },
      targetNicResourceId: {
        serializedName: "targetNicResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NextHopResult: msRest.CompositeMapper = {
  serializedName: "NextHopResult",
  type: {
    name: "Composite",
    className: "NextHopResult",
    modelProperties: {
      nextHopType: {
        serializedName: "nextHopType",
        type: {
          name: "String"
        }
      },
      nextHopIpAddress: {
        serializedName: "nextHopIpAddress",
        type: {
          name: "String"
        }
      },
      routeTableId: {
        serializedName: "routeTableId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecurityGroupViewParameters: msRest.CompositeMapper = {
  serializedName: "SecurityGroupViewParameters",
  type: {
    name: "Composite",
    className: "SecurityGroupViewParameters",
    modelProperties: {
      targetResourceId: {
        required: true,
        serializedName: "targetResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkInterfaceAssociation: msRest.CompositeMapper = {
  serializedName: "NetworkInterfaceAssociation",
  type: {
    name: "Composite",
    className: "NetworkInterfaceAssociation",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      securityRules: {
        serializedName: "securityRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SecurityRule"
            }
          }
        }
      }
    }
  }
};

export const SubnetAssociation: msRest.CompositeMapper = {
  serializedName: "SubnetAssociation",
  type: {
    name: "Composite",
    className: "SubnetAssociation",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      securityRules: {
        serializedName: "securityRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SecurityRule"
            }
          }
        }
      }
    }
  }
};

export const SecurityRuleAssociations: msRest.CompositeMapper = {
  serializedName: "SecurityRuleAssociations",
  type: {
    name: "Composite",
    className: "SecurityRuleAssociations",
    modelProperties: {
      networkInterfaceAssociation: {
        serializedName: "networkInterfaceAssociation",
        type: {
          name: "Composite",
          className: "NetworkInterfaceAssociation"
        }
      },
      subnetAssociation: {
        serializedName: "subnetAssociation",
        type: {
          name: "Composite",
          className: "SubnetAssociation"
        }
      },
      defaultSecurityRules: {
        serializedName: "defaultSecurityRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SecurityRule"
            }
          }
        }
      },
      effectiveSecurityRules: {
        serializedName: "effectiveSecurityRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EffectiveNetworkSecurityRule"
            }
          }
        }
      }
    }
  }
};

export const SecurityGroupNetworkInterface: msRest.CompositeMapper = {
  serializedName: "SecurityGroupNetworkInterface",
  type: {
    name: "Composite",
    className: "SecurityGroupNetworkInterface",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      securityRuleAssociations: {
        serializedName: "securityRuleAssociations",
        type: {
          name: "Composite",
          className: "SecurityRuleAssociations"
        }
      }
    }
  }
};

export const SecurityGroupViewResult: msRest.CompositeMapper = {
  serializedName: "SecurityGroupViewResult",
  type: {
    name: "Composite",
    className: "SecurityGroupViewResult",
    modelProperties: {
      networkInterfaces: {
        serializedName: "networkInterfaces",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SecurityGroupNetworkInterface"
            }
          }
        }
      }
    }
  }
};

export const PacketCaptureStorageLocation: msRest.CompositeMapper = {
  serializedName: "PacketCaptureStorageLocation",
  type: {
    name: "Composite",
    className: "PacketCaptureStorageLocation",
    modelProperties: {
      storageId: {
        serializedName: "storageId",
        type: {
          name: "String"
        }
      },
      storagePath: {
        serializedName: "storagePath",
        type: {
          name: "String"
        }
      },
      filePath: {
        serializedName: "filePath",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PacketCaptureFilter: msRest.CompositeMapper = {
  serializedName: "PacketCaptureFilter",
  type: {
    name: "Composite",
    className: "PacketCaptureFilter",
    modelProperties: {
      protocol: {
        serializedName: "protocol",
        defaultValue: 'Any',
        type: {
          name: "String"
        }
      },
      localIPAddress: {
        serializedName: "localIPAddress",
        type: {
          name: "String"
        }
      },
      remoteIPAddress: {
        serializedName: "remoteIPAddress",
        type: {
          name: "String"
        }
      },
      localPort: {
        serializedName: "localPort",
        type: {
          name: "String"
        }
      },
      remotePort: {
        serializedName: "remotePort",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PacketCaptureParameters: msRest.CompositeMapper = {
  serializedName: "PacketCaptureParameters",
  type: {
    name: "Composite",
    className: "PacketCaptureParameters",
    modelProperties: {
      target: {
        required: true,
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      bytesToCapturePerPacket: {
        serializedName: "bytesToCapturePerPacket",
        defaultValue: 0,
        type: {
          name: "Number"
        }
      },
      totalBytesPerSession: {
        serializedName: "totalBytesPerSession",
        defaultValue: 1073741824,
        type: {
          name: "Number"
        }
      },
      timeLimitInSeconds: {
        serializedName: "timeLimitInSeconds",
        defaultValue: 18000,
        type: {
          name: "Number"
        }
      },
      storageLocation: {
        required: true,
        serializedName: "storageLocation",
        type: {
          name: "Composite",
          className: "PacketCaptureStorageLocation"
        }
      },
      filters: {
        serializedName: "filters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PacketCaptureFilter"
            }
          }
        }
      }
    }
  }
};

export const PacketCapture: msRest.CompositeMapper = {
  serializedName: "PacketCapture",
  type: {
    name: "Composite",
    className: "PacketCapture",
    modelProperties: {
      target: {
        required: true,
        serializedName: "properties.target",
        type: {
          name: "String"
        }
      },
      bytesToCapturePerPacket: {
        serializedName: "properties.bytesToCapturePerPacket",
        defaultValue: 0,
        type: {
          name: "Number"
        }
      },
      totalBytesPerSession: {
        serializedName: "properties.totalBytesPerSession",
        defaultValue: 1073741824,
        type: {
          name: "Number"
        }
      },
      timeLimitInSeconds: {
        serializedName: "properties.timeLimitInSeconds",
        defaultValue: 18000,
        type: {
          name: "Number"
        }
      },
      storageLocation: {
        required: true,
        serializedName: "properties.storageLocation",
        type: {
          name: "Composite",
          className: "PacketCaptureStorageLocation"
        }
      },
      filters: {
        serializedName: "properties.filters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PacketCaptureFilter"
            }
          }
        }
      }
    }
  }
};

export const PacketCaptureResult: msRest.CompositeMapper = {
  serializedName: "PacketCaptureResult",
  type: {
    name: "Composite",
    className: "PacketCaptureResult",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        defaultValue: 'A unique read-only string that changes whenever the resource is updated.',
        type: {
          name: "String"
        }
      },
      target: {
        required: true,
        serializedName: "properties.target",
        type: {
          name: "String"
        }
      },
      bytesToCapturePerPacket: {
        serializedName: "properties.bytesToCapturePerPacket",
        defaultValue: 0,
        type: {
          name: "Number"
        }
      },
      totalBytesPerSession: {
        serializedName: "properties.totalBytesPerSession",
        defaultValue: 1073741824,
        type: {
          name: "Number"
        }
      },
      timeLimitInSeconds: {
        serializedName: "properties.timeLimitInSeconds",
        defaultValue: 18000,
        type: {
          name: "Number"
        }
      },
      storageLocation: {
        required: true,
        serializedName: "properties.storageLocation",
        type: {
          name: "Composite",
          className: "PacketCaptureStorageLocation"
        }
      },
      filters: {
        serializedName: "properties.filters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PacketCaptureFilter"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PacketCaptureQueryStatusResult: msRest.CompositeMapper = {
  serializedName: "PacketCaptureQueryStatusResult",
  type: {
    name: "Composite",
    className: "PacketCaptureQueryStatusResult",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      captureStartTime: {
        serializedName: "captureStartTime",
        type: {
          name: "DateTime"
        }
      },
      packetCaptureStatus: {
        serializedName: "packetCaptureStatus",
        type: {
          name: "String"
        }
      },
      stopReason: {
        serializedName: "stopReason",
        type: {
          name: "String"
        }
      },
      packetCaptureError: {
        serializedName: "packetCaptureError",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const TroubleshootingParameters: msRest.CompositeMapper = {
  serializedName: "TroubleshootingParameters",
  type: {
    name: "Composite",
    className: "TroubleshootingParameters",
    modelProperties: {
      targetResourceId: {
        required: true,
        serializedName: "targetResourceId",
        type: {
          name: "String"
        }
      },
      storageId: {
        required: true,
        serializedName: "properties.storageId",
        type: {
          name: "String"
        }
      },
      storagePath: {
        required: true,
        serializedName: "properties.storagePath",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QueryTroubleshootingParameters: msRest.CompositeMapper = {
  serializedName: "QueryTroubleshootingParameters",
  type: {
    name: "Composite",
    className: "QueryTroubleshootingParameters",
    modelProperties: {
      targetResourceId: {
        required: true,
        serializedName: "targetResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TroubleshootingRecommendedActions: msRest.CompositeMapper = {
  serializedName: "TroubleshootingRecommendedActions",
  type: {
    name: "Composite",
    className: "TroubleshootingRecommendedActions",
    modelProperties: {
      actionId: {
        serializedName: "actionId",
        type: {
          name: "String"
        }
      },
      actionText: {
        serializedName: "actionText",
        type: {
          name: "String"
        }
      },
      actionUri: {
        serializedName: "actionUri",
        type: {
          name: "String"
        }
      },
      actionUriText: {
        serializedName: "actionUriText",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TroubleshootingDetails: msRest.CompositeMapper = {
  serializedName: "TroubleshootingDetails",
  type: {
    name: "Composite",
    className: "TroubleshootingDetails",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      reasonType: {
        serializedName: "reasonType",
        type: {
          name: "String"
        }
      },
      summary: {
        serializedName: "summary",
        type: {
          name: "String"
        }
      },
      detail: {
        serializedName: "detail",
        type: {
          name: "String"
        }
      },
      recommendedActions: {
        serializedName: "recommendedActions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TroubleshootingRecommendedActions"
            }
          }
        }
      }
    }
  }
};

export const TroubleshootingResult: msRest.CompositeMapper = {
  serializedName: "TroubleshootingResult",
  type: {
    name: "Composite",
    className: "TroubleshootingResult",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      results: {
        serializedName: "results",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TroubleshootingDetails"
            }
          }
        }
      }
    }
  }
};

export const RetentionPolicyParameters: msRest.CompositeMapper = {
  serializedName: "RetentionPolicyParameters",
  type: {
    name: "Composite",
    className: "RetentionPolicyParameters",
    modelProperties: {
      days: {
        serializedName: "days",
        defaultValue: 0,
        type: {
          name: "Number"
        }
      },
      enabled: {
        serializedName: "enabled",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const FlowLogStatusParameters: msRest.CompositeMapper = {
  serializedName: "FlowLogStatusParameters",
  type: {
    name: "Composite",
    className: "FlowLogStatusParameters",
    modelProperties: {
      targetResourceId: {
        required: true,
        serializedName: "targetResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrafficAnalyticsConfigurationProperties: msRest.CompositeMapper = {
  serializedName: "TrafficAnalyticsConfigurationProperties",
  type: {
    name: "Composite",
    className: "TrafficAnalyticsConfigurationProperties",
    modelProperties: {
      enabled: {
        required: true,
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      workspaceId: {
        required: true,
        serializedName: "workspaceId",
        type: {
          name: "String"
        }
      },
      workspaceRegion: {
        required: true,
        serializedName: "workspaceRegion",
        type: {
          name: "String"
        }
      },
      workspaceResourceId: {
        required: true,
        serializedName: "workspaceResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrafficAnalyticsProperties: msRest.CompositeMapper = {
  serializedName: "TrafficAnalyticsProperties",
  type: {
    name: "Composite",
    className: "TrafficAnalyticsProperties",
    modelProperties: {
      networkWatcherFlowAnalyticsConfiguration: {
        required: true,
        serializedName: "networkWatcherFlowAnalyticsConfiguration",
        type: {
          name: "Composite",
          className: "TrafficAnalyticsConfigurationProperties"
        }
      }
    }
  }
};

export const FlowLogInformation: msRest.CompositeMapper = {
  serializedName: "FlowLogInformation",
  type: {
    name: "Composite",
    className: "FlowLogInformation",
    modelProperties: {
      targetResourceId: {
        required: true,
        serializedName: "targetResourceId",
        type: {
          name: "String"
        }
      },
      storageId: {
        required: true,
        serializedName: "properties.storageId",
        type: {
          name: "String"
        }
      },
      enabled: {
        required: true,
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      retentionPolicy: {
        serializedName: "properties.retentionPolicy",
        type: {
          name: "Composite",
          className: "RetentionPolicyParameters"
        }
      },
      flowAnalyticsConfiguration: {
        serializedName: "flowAnalyticsConfiguration",
        type: {
          name: "Composite",
          className: "TrafficAnalyticsProperties"
        }
      }
    }
  }
};

export const ConnectivitySource: msRest.CompositeMapper = {
  serializedName: "ConnectivitySource",
  type: {
    name: "Composite",
    className: "ConnectivitySource",
    modelProperties: {
      resourceId: {
        required: true,
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ConnectivityDestination: msRest.CompositeMapper = {
  serializedName: "ConnectivityDestination",
  type: {
    name: "Composite",
    className: "ConnectivityDestination",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      address: {
        serializedName: "address",
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const HTTPHeader: msRest.CompositeMapper = {
  serializedName: "HTTPHeader",
  type: {
    name: "Composite",
    className: "HTTPHeader",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HTTPConfiguration: msRest.CompositeMapper = {
  serializedName: "HTTPConfiguration",
  type: {
    name: "Composite",
    className: "HTTPConfiguration",
    modelProperties: {
      method: {
        serializedName: "method",
        type: {
          name: "String"
        }
      },
      headers: {
        serializedName: "headers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HTTPHeader"
            }
          }
        }
      },
      validStatusCodes: {
        serializedName: "validStatusCodes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    }
  }
};

export const ProtocolConfiguration: msRest.CompositeMapper = {
  serializedName: "ProtocolConfiguration",
  type: {
    name: "Composite",
    className: "ProtocolConfiguration",
    modelProperties: {
      hTTPConfiguration: {
        serializedName: "HTTPConfiguration",
        type: {
          name: "Composite",
          className: "HTTPConfiguration"
        }
      }
    }
  }
};

export const ConnectivityParameters: msRest.CompositeMapper = {
  serializedName: "ConnectivityParameters",
  type: {
    name: "Composite",
    className: "ConnectivityParameters",
    modelProperties: {
      source: {
        required: true,
        serializedName: "source",
        type: {
          name: "Composite",
          className: "ConnectivitySource"
        }
      },
      destination: {
        required: true,
        serializedName: "destination",
        type: {
          name: "Composite",
          className: "ConnectivityDestination"
        }
      },
      protocol: {
        serializedName: "protocol",
        type: {
          name: "String"
        }
      },
      protocolConfiguration: {
        serializedName: "protocolConfiguration",
        type: {
          name: "Composite",
          className: "ProtocolConfiguration"
        }
      }
    }
  }
};

export const ConnectivityIssue: msRest.CompositeMapper = {
  serializedName: "ConnectivityIssue",
  type: {
    name: "Composite",
    className: "ConnectivityIssue",
    modelProperties: {
      origin: {
        readOnly: true,
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      severity: {
        readOnly: true,
        serializedName: "severity",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      context: {
        readOnly: true,
        serializedName: "context",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Dictionary",
              value: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    }
  }
};

export const ConnectivityHop: msRest.CompositeMapper = {
  serializedName: "ConnectivityHop",
  type: {
    name: "Composite",
    className: "ConnectivityHop",
    modelProperties: {
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      address: {
        readOnly: true,
        serializedName: "address",
        type: {
          name: "String"
        }
      },
      resourceId: {
        readOnly: true,
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      nextHopIds: {
        readOnly: true,
        serializedName: "nextHopIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      issues: {
        readOnly: true,
        serializedName: "issues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectivityIssue"
            }
          }
        }
      }
    }
  }
};

export const ConnectivityInformation: msRest.CompositeMapper = {
  serializedName: "ConnectivityInformation",
  type: {
    name: "Composite",
    className: "ConnectivityInformation",
    modelProperties: {
      hops: {
        readOnly: true,
        serializedName: "hops",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectivityHop"
            }
          }
        }
      },
      connectionStatus: {
        readOnly: true,
        serializedName: "connectionStatus",
        type: {
          name: "String"
        }
      },
      avgLatencyInMs: {
        readOnly: true,
        serializedName: "avgLatencyInMs",
        type: {
          name: "Number"
        }
      },
      minLatencyInMs: {
        readOnly: true,
        serializedName: "minLatencyInMs",
        type: {
          name: "Number"
        }
      },
      maxLatencyInMs: {
        readOnly: true,
        serializedName: "maxLatencyInMs",
        type: {
          name: "Number"
        }
      },
      probesSent: {
        readOnly: true,
        serializedName: "probesSent",
        type: {
          name: "Number"
        }
      },
      probesFailed: {
        readOnly: true,
        serializedName: "probesFailed",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AzureReachabilityReportLocation: msRest.CompositeMapper = {
  serializedName: "AzureReachabilityReportLocation",
  type: {
    name: "Composite",
    className: "AzureReachabilityReportLocation",
    modelProperties: {
      country: {
        required: true,
        serializedName: "country",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      city: {
        serializedName: "city",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureReachabilityReportParameters: msRest.CompositeMapper = {
  serializedName: "AzureReachabilityReportParameters",
  type: {
    name: "Composite",
    className: "AzureReachabilityReportParameters",
    modelProperties: {
      providerLocation: {
        required: true,
        serializedName: "providerLocation",
        type: {
          name: "Composite",
          className: "AzureReachabilityReportLocation"
        }
      },
      providers: {
        serializedName: "providers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      azureLocations: {
        serializedName: "azureLocations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      startTime: {
        required: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        required: true,
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const AzureReachabilityReportLatencyInfo: msRest.CompositeMapper = {
  serializedName: "AzureReachabilityReportLatencyInfo",
  type: {
    name: "Composite",
    className: "AzureReachabilityReportLatencyInfo",
    modelProperties: {
      timeStamp: {
        serializedName: "timeStamp",
        type: {
          name: "DateTime"
        }
      },
      score: {
        serializedName: "score",
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AzureReachabilityReportItem: msRest.CompositeMapper = {
  serializedName: "AzureReachabilityReportItem",
  type: {
    name: "Composite",
    className: "AzureReachabilityReportItem",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      azureLocation: {
        serializedName: "azureLocation",
        type: {
          name: "String"
        }
      },
      latencies: {
        serializedName: "latencies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureReachabilityReportLatencyInfo"
            }
          }
        }
      }
    }
  }
};

export const AzureReachabilityReport: msRest.CompositeMapper = {
  serializedName: "AzureReachabilityReport",
  type: {
    name: "Composite",
    className: "AzureReachabilityReport",
    modelProperties: {
      aggregationLevel: {
        required: true,
        serializedName: "aggregationLevel",
        type: {
          name: "String"
        }
      },
      providerLocation: {
        required: true,
        serializedName: "providerLocation",
        type: {
          name: "Composite",
          className: "AzureReachabilityReportLocation"
        }
      },
      reachabilityReport: {
        required: true,
        serializedName: "reachabilityReport",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureReachabilityReportItem"
            }
          }
        }
      }
    }
  }
};

export const AvailableProvidersListParameters: msRest.CompositeMapper = {
  serializedName: "AvailableProvidersListParameters",
  type: {
    name: "Composite",
    className: "AvailableProvidersListParameters",
    modelProperties: {
      azureLocations: {
        serializedName: "azureLocations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      country: {
        serializedName: "country",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      city: {
        serializedName: "city",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailableProvidersListCity: msRest.CompositeMapper = {
  serializedName: "AvailableProvidersListCity",
  type: {
    name: "Composite",
    className: "AvailableProvidersListCity",
    modelProperties: {
      cityName: {
        serializedName: "cityName",
        type: {
          name: "String"
        }
      },
      providers: {
        serializedName: "providers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const AvailableProvidersListState: msRest.CompositeMapper = {
  serializedName: "AvailableProvidersListState",
  type: {
    name: "Composite",
    className: "AvailableProvidersListState",
    modelProperties: {
      stateName: {
        serializedName: "stateName",
        type: {
          name: "String"
        }
      },
      providers: {
        serializedName: "providers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      cities: {
        serializedName: "cities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AvailableProvidersListCity"
            }
          }
        }
      }
    }
  }
};

export const AvailableProvidersListCountry: msRest.CompositeMapper = {
  serializedName: "AvailableProvidersListCountry",
  type: {
    name: "Composite",
    className: "AvailableProvidersListCountry",
    modelProperties: {
      countryName: {
        serializedName: "countryName",
        type: {
          name: "String"
        }
      },
      providers: {
        serializedName: "providers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      states: {
        serializedName: "states",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AvailableProvidersListState"
            }
          }
        }
      }
    }
  }
};

export const AvailableProvidersList: msRest.CompositeMapper = {
  serializedName: "AvailableProvidersList",
  type: {
    name: "Composite",
    className: "AvailableProvidersList",
    modelProperties: {
      countries: {
        required: true,
        serializedName: "countries",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AvailableProvidersListCountry"
            }
          }
        }
      }
    }
  }
};

export const ConnectionMonitorSource: msRest.CompositeMapper = {
  serializedName: "ConnectionMonitorSource",
  type: {
    name: "Composite",
    className: "ConnectionMonitorSource",
    modelProperties: {
      resourceId: {
        required: true,
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ConnectionMonitorDestination: msRest.CompositeMapper = {
  serializedName: "ConnectionMonitorDestination",
  type: {
    name: "Composite",
    className: "ConnectionMonitorDestination",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      address: {
        serializedName: "address",
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ConnectionMonitorParameters: msRest.CompositeMapper = {
  serializedName: "ConnectionMonitorParameters",
  type: {
    name: "Composite",
    className: "ConnectionMonitorParameters",
    modelProperties: {
      source: {
        required: true,
        serializedName: "source",
        type: {
          name: "Composite",
          className: "ConnectionMonitorSource"
        }
      },
      destination: {
        required: true,
        serializedName: "destination",
        type: {
          name: "Composite",
          className: "ConnectionMonitorDestination"
        }
      },
      autoStart: {
        serializedName: "autoStart",
        defaultValue: true,
        type: {
          name: "Boolean"
        }
      },
      monitoringIntervalInSeconds: {
        serializedName: "monitoringIntervalInSeconds",
        defaultValue: 60,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ConnectionMonitor: msRest.CompositeMapper = {
  serializedName: "ConnectionMonitor",
  type: {
    name: "Composite",
    className: "ConnectionMonitor",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      source: {
        required: true,
        serializedName: "properties.source",
        type: {
          name: "Composite",
          className: "ConnectionMonitorSource"
        }
      },
      destination: {
        required: true,
        serializedName: "properties.destination",
        type: {
          name: "Composite",
          className: "ConnectionMonitorDestination"
        }
      },
      autoStart: {
        serializedName: "properties.autoStart",
        defaultValue: true,
        type: {
          name: "Boolean"
        }
      },
      monitoringIntervalInSeconds: {
        serializedName: "properties.monitoringIntervalInSeconds",
        defaultValue: 60,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ConnectionMonitorResult: msRest.CompositeMapper = {
  serializedName: "ConnectionMonitorResult",
  type: {
    name: "Composite",
    className: "ConnectionMonitorResult",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        defaultValue: 'A unique read-only string that changes whenever the resource is updated.',
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      source: {
        required: true,
        serializedName: "properties.source",
        type: {
          name: "Composite",
          className: "ConnectionMonitorSource"
        }
      },
      destination: {
        required: true,
        serializedName: "properties.destination",
        type: {
          name: "Composite",
          className: "ConnectionMonitorDestination"
        }
      },
      autoStart: {
        serializedName: "properties.autoStart",
        defaultValue: true,
        type: {
          name: "Boolean"
        }
      },
      monitoringIntervalInSeconds: {
        serializedName: "properties.monitoringIntervalInSeconds",
        defaultValue: 60,
        type: {
          name: "Number"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "properties.startTime",
        type: {
          name: "DateTime"
        }
      },
      monitoringStatus: {
        serializedName: "properties.monitoringStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectionStateSnapshot: msRest.CompositeMapper = {
  serializedName: "ConnectionStateSnapshot",
  type: {
    name: "Composite",
    className: "ConnectionStateSnapshot",
    modelProperties: {
      connectionState: {
        serializedName: "connectionState",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      evaluationState: {
        serializedName: "evaluationState",
        type: {
          name: "String"
        }
      },
      avgLatencyInMs: {
        serializedName: "avgLatencyInMs",
        type: {
          name: "Number"
        }
      },
      minLatencyInMs: {
        serializedName: "minLatencyInMs",
        type: {
          name: "Number"
        }
      },
      maxLatencyInMs: {
        serializedName: "maxLatencyInMs",
        type: {
          name: "Number"
        }
      },
      probesSent: {
        serializedName: "probesSent",
        type: {
          name: "Number"
        }
      },
      probesFailed: {
        serializedName: "probesFailed",
        type: {
          name: "Number"
        }
      },
      hops: {
        readOnly: true,
        serializedName: "hops",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectivityHop"
            }
          }
        }
      }
    }
  }
};

export const ConnectionMonitorQueryResult: msRest.CompositeMapper = {
  serializedName: "ConnectionMonitorQueryResult",
  type: {
    name: "Composite",
    className: "ConnectionMonitorQueryResult",
    modelProperties: {
      sourceStatus: {
        serializedName: "sourceStatus",
        type: {
          name: "String"
        }
      },
      states: {
        serializedName: "states",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectionStateSnapshot"
            }
          }
        }
      }
    }
  }
};

export const NetworkConfigurationDiagnosticProfile: msRest.CompositeMapper = {
  serializedName: "NetworkConfigurationDiagnosticProfile",
  type: {
    name: "Composite",
    className: "NetworkConfigurationDiagnosticProfile",
    modelProperties: {
      direction: {
        required: true,
        serializedName: "direction",
        type: {
          name: "String"
        }
      },
      protocol: {
        required: true,
        serializedName: "protocol",
        type: {
          name: "String"
        }
      },
      source: {
        required: true,
        serializedName: "source",
        type: {
          name: "String"
        }
      },
      destination: {
        required: true,
        serializedName: "destination",
        type: {
          name: "String"
        }
      },
      destinationPort: {
        required: true,
        serializedName: "destinationPort",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkConfigurationDiagnosticParameters: msRest.CompositeMapper = {
  serializedName: "NetworkConfigurationDiagnosticParameters",
  type: {
    name: "Composite",
    className: "NetworkConfigurationDiagnosticParameters",
    modelProperties: {
      targetResourceId: {
        required: true,
        serializedName: "targetResourceId",
        type: {
          name: "String"
        }
      },
      verbosityLevel: {
        serializedName: "verbosityLevel",
        type: {
          name: "String"
        }
      },
      profiles: {
        required: true,
        serializedName: "profiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkConfigurationDiagnosticProfile"
            }
          }
        }
      }
    }
  }
};

export const MatchedRule: msRest.CompositeMapper = {
  serializedName: "MatchedRule",
  type: {
    name: "Composite",
    className: "MatchedRule",
    modelProperties: {
      ruleName: {
        serializedName: "ruleName",
        type: {
          name: "String"
        }
      },
      action: {
        serializedName: "action",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkSecurityRulesEvaluationResult: msRest.CompositeMapper = {
  serializedName: "NetworkSecurityRulesEvaluationResult",
  type: {
    name: "Composite",
    className: "NetworkSecurityRulesEvaluationResult",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      protocolMatched: {
        serializedName: "protocolMatched",
        type: {
          name: "Boolean"
        }
      },
      sourceMatched: {
        serializedName: "sourceMatched",
        type: {
          name: "Boolean"
        }
      },
      sourcePortMatched: {
        serializedName: "sourcePortMatched",
        type: {
          name: "Boolean"
        }
      },
      destinationMatched: {
        serializedName: "destinationMatched",
        type: {
          name: "Boolean"
        }
      },
      destinationPortMatched: {
        serializedName: "destinationPortMatched",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const EvaluatedNetworkSecurityGroup: msRest.CompositeMapper = {
  serializedName: "EvaluatedNetworkSecurityGroup",
  type: {
    name: "Composite",
    className: "EvaluatedNetworkSecurityGroup",
    modelProperties: {
      networkSecurityGroupId: {
        serializedName: "networkSecurityGroupId",
        type: {
          name: "String"
        }
      },
      appliedTo: {
        serializedName: "appliedTo",
        type: {
          name: "String"
        }
      },
      matchedRule: {
        serializedName: "matchedRule",
        type: {
          name: "Composite",
          className: "MatchedRule"
        }
      },
      rulesEvaluationResult: {
        readOnly: true,
        serializedName: "rulesEvaluationResult",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkSecurityRulesEvaluationResult"
            }
          }
        }
      }
    }
  }
};

export const NetworkSecurityGroupResult: msRest.CompositeMapper = {
  serializedName: "NetworkSecurityGroupResult",
  type: {
    name: "Composite",
    className: "NetworkSecurityGroupResult",
    modelProperties: {
      securityRuleAccessResult: {
        serializedName: "securityRuleAccessResult",
        type: {
          name: "String"
        }
      },
      evaluatedNetworkSecurityGroups: {
        readOnly: true,
        serializedName: "evaluatedNetworkSecurityGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EvaluatedNetworkSecurityGroup"
            }
          }
        }
      }
    }
  }
};

export const NetworkConfigurationDiagnosticResult: msRest.CompositeMapper = {
  serializedName: "NetworkConfigurationDiagnosticResult",
  type: {
    name: "Composite",
    className: "NetworkConfigurationDiagnosticResult",
    modelProperties: {
      profile: {
        serializedName: "profile",
        type: {
          name: "Composite",
          className: "NetworkConfigurationDiagnosticProfile"
        }
      },
      networkSecurityGroupResult: {
        serializedName: "networkSecurityGroupResult",
        type: {
          name: "Composite",
          className: "NetworkSecurityGroupResult"
        }
      }
    }
  }
};

export const NetworkConfigurationDiagnosticResponse: msRest.CompositeMapper = {
  serializedName: "NetworkConfigurationDiagnosticResponse",
  type: {
    name: "Composite",
    className: "NetworkConfigurationDiagnosticResponse",
    modelProperties: {
      results: {
        readOnly: true,
        serializedName: "results",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkConfigurationDiagnosticResult"
            }
          }
        }
      }
    }
  }
};

export const OperationDisplay: msRest.CompositeMapper = {
  serializedName: "Operation_display",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Availability: msRest.CompositeMapper = {
  serializedName: "Availability",
  type: {
    name: "Composite",
    className: "Availability",
    modelProperties: {
      timeGrain: {
        serializedName: "timeGrain",
        type: {
          name: "String"
        }
      },
      retention: {
        serializedName: "retention",
        type: {
          name: "String"
        }
      },
      blobDuration: {
        serializedName: "blobDuration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Dimension: msRest.CompositeMapper = {
  serializedName: "Dimension",
  type: {
    name: "Composite",
    className: "Dimension",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      internalName: {
        serializedName: "internalName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricSpecification: msRest.CompositeMapper = {
  serializedName: "MetricSpecification",
  type: {
    name: "Composite",
    className: "MetricSpecification",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      displayDescription: {
        serializedName: "displayDescription",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      aggregationType: {
        serializedName: "aggregationType",
        type: {
          name: "String"
        }
      },
      availabilities: {
        serializedName: "availabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Availability"
            }
          }
        }
      },
      enableRegionalMdmAccount: {
        serializedName: "enableRegionalMdmAccount",
        type: {
          name: "Boolean"
        }
      },
      fillGapWithZero: {
        serializedName: "fillGapWithZero",
        type: {
          name: "Boolean"
        }
      },
      metricFilterPattern: {
        serializedName: "metricFilterPattern",
        type: {
          name: "String"
        }
      },
      dimensions: {
        serializedName: "dimensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Dimension"
            }
          }
        }
      },
      isInternal: {
        serializedName: "isInternal",
        type: {
          name: "Boolean"
        }
      },
      sourceMdmAccount: {
        serializedName: "sourceMdmAccount",
        type: {
          name: "String"
        }
      },
      sourceMdmNamespace: {
        serializedName: "sourceMdmNamespace",
        type: {
          name: "String"
        }
      },
      resourceIdDimensionNameOverride: {
        serializedName: "resourceIdDimensionNameOverride",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LogSpecification: msRest.CompositeMapper = {
  serializedName: "LogSpecification",
  type: {
    name: "Composite",
    className: "LogSpecification",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      blobDuration: {
        serializedName: "blobDuration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationPropertiesFormatServiceSpecification: msRest.CompositeMapper = {
  serializedName: "OperationPropertiesFormat_serviceSpecification",
  type: {
    name: "Composite",
    className: "OperationPropertiesFormatServiceSpecification",
    modelProperties: {
      metricSpecifications: {
        serializedName: "metricSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricSpecification"
            }
          }
        }
      },
      logSpecifications: {
        serializedName: "logSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LogSpecification"
            }
          }
        }
      }
    }
  }
};

export const Operation: msRest.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      serviceSpecification: {
        serializedName: "properties.serviceSpecification",
        type: {
          name: "Composite",
          className: "OperationPropertiesFormatServiceSpecification"
        }
      }
    }
  }
};

export const PublicIPPrefixSku: msRest.CompositeMapper = {
  serializedName: "PublicIPPrefixSku",
  type: {
    name: "Composite",
    className: "PublicIPPrefixSku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReferencedPublicIpAddress: msRest.CompositeMapper = {
  serializedName: "ReferencedPublicIpAddress",
  type: {
    name: "Composite",
    className: "ReferencedPublicIpAddress",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PublicIPPrefix: msRest.CompositeMapper = {
  serializedName: "PublicIPPrefix",
  type: {
    name: "Composite",
    className: "PublicIPPrefix",
    modelProperties: {
      ...Resource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "PublicIPPrefixSku"
        }
      },
      publicIPAddressVersion: {
        serializedName: "properties.publicIPAddressVersion",
        type: {
          name: "String"
        }
      },
      ipTags: {
        serializedName: "properties.ipTags",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpTag"
            }
          }
        }
      },
      prefixLength: {
        serializedName: "properties.prefixLength",
        type: {
          name: "Number"
        }
      },
      ipPrefix: {
        serializedName: "properties.ipPrefix",
        type: {
          name: "String"
        }
      },
      publicIPAddresses: {
        serializedName: "properties.publicIPAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReferencedPublicIpAddress"
            }
          }
        }
      },
      resourceGuid: {
        serializedName: "properties.resourceGuid",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const PatchRouteFilterRule: msRest.CompositeMapper = {
  serializedName: "PatchRouteFilterRule",
  type: {
    name: "Composite",
    className: "PatchRouteFilterRule",
    modelProperties: {
      ...SubResource.type.modelProperties,
      access: {
        required: true,
        serializedName: "properties.access",
        type: {
          name: "String"
        }
      },
      routeFilterRuleType: {
        required: true,
        isConstant: true,
        serializedName: "properties.routeFilterRuleType",
        defaultValue: 'Community',
        type: {
          name: "String"
        }
      },
      communities: {
        required: true,
        serializedName: "properties.communities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PatchRouteFilter: msRest.CompositeMapper = {
  serializedName: "PatchRouteFilter",
  type: {
    name: "Composite",
    className: "PatchRouteFilter",
    modelProperties: {
      ...SubResource.type.modelProperties,
      rules: {
        serializedName: "properties.rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RouteFilterRule"
            }
          }
        }
      },
      peerings: {
        serializedName: "properties.peerings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteCircuitPeering"
            }
          }
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const BGPCommunity: msRest.CompositeMapper = {
  serializedName: "BGPCommunity",
  type: {
    name: "Composite",
    className: "BGPCommunity",
    modelProperties: {
      serviceSupportedRegion: {
        serializedName: "serviceSupportedRegion",
        type: {
          name: "String"
        }
      },
      communityName: {
        serializedName: "communityName",
        type: {
          name: "String"
        }
      },
      communityValue: {
        serializedName: "communityValue",
        type: {
          name: "String"
        }
      },
      communityPrefixes: {
        serializedName: "communityPrefixes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      isAuthorizedToUse: {
        serializedName: "isAuthorizedToUse",
        type: {
          name: "Boolean"
        }
      },
      serviceGroup: {
        serializedName: "serviceGroup",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BgpServiceCommunity: msRest.CompositeMapper = {
  serializedName: "BgpServiceCommunity",
  type: {
    name: "Composite",
    className: "BgpServiceCommunity",
    modelProperties: {
      ...Resource.type.modelProperties,
      serviceName: {
        serializedName: "properties.serviceName",
        type: {
          name: "String"
        }
      },
      bgpCommunities: {
        serializedName: "properties.bgpCommunities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BGPCommunity"
            }
          }
        }
      }
    }
  }
};

export const UsageName: msRest.CompositeMapper = {
  serializedName: "UsageName",
  type: {
    name: "Composite",
    className: "UsageName",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Usage: msRest.CompositeMapper = {
  serializedName: "Usage",
  type: {
    name: "Composite",
    className: "Usage",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      unit: {
        required: true,
        isConstant: true,
        serializedName: "unit",
        defaultValue: 'Count',
        type: {
          name: "String"
        }
      },
      currentValue: {
        required: true,
        serializedName: "currentValue",
        type: {
          name: "Number"
        }
      },
      limit: {
        required: true,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "Composite",
          className: "UsageName"
        }
      }
    }
  }
};

export const AddressSpace: msRest.CompositeMapper = {
  serializedName: "AddressSpace",
  type: {
    name: "Composite",
    className: "AddressSpace",
    modelProperties: {
      addressPrefixes: {
        serializedName: "addressPrefixes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const VirtualNetworkPeering: msRest.CompositeMapper = {
  serializedName: "VirtualNetworkPeering",
  type: {
    name: "Composite",
    className: "VirtualNetworkPeering",
    modelProperties: {
      ...SubResource.type.modelProperties,
      allowVirtualNetworkAccess: {
        serializedName: "properties.allowVirtualNetworkAccess",
        type: {
          name: "Boolean"
        }
      },
      allowForwardedTraffic: {
        serializedName: "properties.allowForwardedTraffic",
        type: {
          name: "Boolean"
        }
      },
      allowGatewayTransit: {
        serializedName: "properties.allowGatewayTransit",
        type: {
          name: "Boolean"
        }
      },
      useRemoteGateways: {
        serializedName: "properties.useRemoteGateways",
        type: {
          name: "Boolean"
        }
      },
      remoteVirtualNetwork: {
        serializedName: "properties.remoteVirtualNetwork",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      remoteAddressSpace: {
        serializedName: "properties.remoteAddressSpace",
        type: {
          name: "Composite",
          className: "AddressSpace"
        }
      },
      peeringState: {
        serializedName: "properties.peeringState",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DhcpOptions: msRest.CompositeMapper = {
  serializedName: "DhcpOptions",
  type: {
    name: "Composite",
    className: "DhcpOptions",
    modelProperties: {
      dnsServers: {
        serializedName: "dnsServers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const VirtualNetwork: msRest.CompositeMapper = {
  serializedName: "VirtualNetwork",
  type: {
    name: "Composite",
    className: "VirtualNetwork",
    modelProperties: {
      ...Resource.type.modelProperties,
      addressSpace: {
        serializedName: "properties.addressSpace",
        type: {
          name: "Composite",
          className: "AddressSpace"
        }
      },
      dhcpOptions: {
        serializedName: "properties.dhcpOptions",
        type: {
          name: "Composite",
          className: "DhcpOptions"
        }
      },
      subnets: {
        serializedName: "properties.subnets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Subnet"
            }
          }
        }
      },
      virtualNetworkPeerings: {
        serializedName: "properties.virtualNetworkPeerings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkPeering"
            }
          }
        }
      },
      resourceGuid: {
        serializedName: "properties.resourceGuid",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      enableDdosProtection: {
        serializedName: "properties.enableDdosProtection",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      enableVmProtection: {
        serializedName: "properties.enableVmProtection",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ddosProtectionPlan: {
        serializedName: "properties.ddosProtectionPlan",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IPAddressAvailabilityResult: msRest.CompositeMapper = {
  serializedName: "IPAddressAvailabilityResult",
  type: {
    name: "Composite",
    className: "IPAddressAvailabilityResult",
    modelProperties: {
      available: {
        serializedName: "available",
        type: {
          name: "Boolean"
        }
      },
      availableIPAddresses: {
        serializedName: "availableIPAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const VirtualNetworkUsageName: msRest.CompositeMapper = {
  serializedName: "VirtualNetworkUsageName",
  type: {
    name: "Composite",
    className: "VirtualNetworkUsageName",
    modelProperties: {
      localizedValue: {
        readOnly: true,
        serializedName: "localizedValue",
        type: {
          name: "String"
        }
      },
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkUsage: msRest.CompositeMapper = {
  serializedName: "VirtualNetworkUsage",
  type: {
    name: "Composite",
    className: "VirtualNetworkUsage",
    modelProperties: {
      currentValue: {
        readOnly: true,
        serializedName: "currentValue",
        type: {
          name: "Number"
        }
      },
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      limit: {
        readOnly: true,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "Composite",
          className: "VirtualNetworkUsageName"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkGatewayIPConfiguration: msRest.CompositeMapper = {
  serializedName: "VirtualNetworkGatewayIPConfiguration",
  type: {
    name: "Composite",
    className: "VirtualNetworkGatewayIPConfiguration",
    modelProperties: {
      ...SubResource.type.modelProperties,
      privateIPAllocationMethod: {
        serializedName: "properties.privateIPAllocationMethod",
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "properties.subnet",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      publicIPAddress: {
        serializedName: "properties.publicIPAddress",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkGatewaySku: msRest.CompositeMapper = {
  serializedName: "VirtualNetworkGatewaySku",
  type: {
    name: "Composite",
    className: "VirtualNetworkGatewaySku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VpnClientRootCertificate: msRest.CompositeMapper = {
  serializedName: "VpnClientRootCertificate",
  type: {
    name: "Composite",
    className: "VpnClientRootCertificate",
    modelProperties: {
      ...SubResource.type.modelProperties,
      publicCertData: {
        required: true,
        serializedName: "properties.publicCertData",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VpnClientRevokedCertificate: msRest.CompositeMapper = {
  serializedName: "VpnClientRevokedCertificate",
  type: {
    name: "Composite",
    className: "VpnClientRevokedCertificate",
    modelProperties: {
      ...SubResource.type.modelProperties,
      thumbprint: {
        serializedName: "properties.thumbprint",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpsecPolicy: msRest.CompositeMapper = {
  serializedName: "IpsecPolicy",
  type: {
    name: "Composite",
    className: "IpsecPolicy",
    modelProperties: {
      saLifeTimeSeconds: {
        required: true,
        serializedName: "saLifeTimeSeconds",
        type: {
          name: "Number"
        }
      },
      saDataSizeKilobytes: {
        required: true,
        serializedName: "saDataSizeKilobytes",
        type: {
          name: "Number"
        }
      },
      ipsecEncryption: {
        required: true,
        serializedName: "ipsecEncryption",
        type: {
          name: "String"
        }
      },
      ipsecIntegrity: {
        required: true,
        serializedName: "ipsecIntegrity",
        type: {
          name: "String"
        }
      },
      ikeEncryption: {
        required: true,
        serializedName: "ikeEncryption",
        type: {
          name: "String"
        }
      },
      ikeIntegrity: {
        required: true,
        serializedName: "ikeIntegrity",
        type: {
          name: "String"
        }
      },
      dhGroup: {
        required: true,
        serializedName: "dhGroup",
        type: {
          name: "String"
        }
      },
      pfsGroup: {
        required: true,
        serializedName: "pfsGroup",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VpnClientConfiguration: msRest.CompositeMapper = {
  serializedName: "VpnClientConfiguration",
  type: {
    name: "Composite",
    className: "VpnClientConfiguration",
    modelProperties: {
      vpnClientAddressPool: {
        serializedName: "vpnClientAddressPool",
        type: {
          name: "Composite",
          className: "AddressSpace"
        }
      },
      vpnClientRootCertificates: {
        serializedName: "vpnClientRootCertificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VpnClientRootCertificate"
            }
          }
        }
      },
      vpnClientRevokedCertificates: {
        serializedName: "vpnClientRevokedCertificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VpnClientRevokedCertificate"
            }
          }
        }
      },
      vpnClientProtocols: {
        serializedName: "vpnClientProtocols",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      vpnClientIpsecPolicies: {
        serializedName: "vpnClientIpsecPolicies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpsecPolicy"
            }
          }
        }
      },
      radiusServerAddress: {
        serializedName: "radiusServerAddress",
        type: {
          name: "String"
        }
      },
      radiusServerSecret: {
        serializedName: "radiusServerSecret",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BgpSettings: msRest.CompositeMapper = {
  serializedName: "BgpSettings",
  type: {
    name: "Composite",
    className: "BgpSettings",
    modelProperties: {
      asn: {
        serializedName: "asn",
        type: {
          name: "Number"
        }
      },
      bgpPeeringAddress: {
        serializedName: "bgpPeeringAddress",
        type: {
          name: "String"
        }
      },
      peerWeight: {
        serializedName: "peerWeight",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BgpPeerStatus: msRest.CompositeMapper = {
  serializedName: "BgpPeerStatus",
  type: {
    name: "Composite",
    className: "BgpPeerStatus",
    modelProperties: {
      localAddress: {
        readOnly: true,
        serializedName: "localAddress",
        type: {
          name: "String"
        }
      },
      neighbor: {
        readOnly: true,
        serializedName: "neighbor",
        type: {
          name: "String"
        }
      },
      asn: {
        readOnly: true,
        serializedName: "asn",
        type: {
          name: "Number"
        }
      },
      state: {
        readOnly: true,
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      connectedDuration: {
        readOnly: true,
        serializedName: "connectedDuration",
        type: {
          name: "String"
        }
      },
      routesReceived: {
        readOnly: true,
        serializedName: "routesReceived",
        type: {
          name: "Number"
        }
      },
      messagesSent: {
        readOnly: true,
        serializedName: "messagesSent",
        type: {
          name: "Number"
        }
      },
      messagesReceived: {
        readOnly: true,
        serializedName: "messagesReceived",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GatewayRoute: msRest.CompositeMapper = {
  serializedName: "GatewayRoute",
  type: {
    name: "Composite",
    className: "GatewayRoute",
    modelProperties: {
      localAddress: {
        readOnly: true,
        serializedName: "localAddress",
        type: {
          name: "String"
        }
      },
      network: {
        readOnly: true,
        serializedName: "network",
        type: {
          name: "String"
        }
      },
      nextHop: {
        readOnly: true,
        serializedName: "nextHop",
        type: {
          name: "String"
        }
      },
      sourcePeer: {
        readOnly: true,
        serializedName: "sourcePeer",
        type: {
          name: "String"
        }
      },
      origin: {
        readOnly: true,
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      asPath: {
        readOnly: true,
        serializedName: "asPath",
        type: {
          name: "String"
        }
      },
      weight: {
        readOnly: true,
        serializedName: "weight",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VirtualNetworkGateway: msRest.CompositeMapper = {
  serializedName: "VirtualNetworkGateway",
  type: {
    name: "Composite",
    className: "VirtualNetworkGateway",
    modelProperties: {
      ...Resource.type.modelProperties,
      ipConfigurations: {
        serializedName: "properties.ipConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkGatewayIPConfiguration"
            }
          }
        }
      },
      gatewayType: {
        serializedName: "properties.gatewayType",
        type: {
          name: "String"
        }
      },
      vpnType: {
        serializedName: "properties.vpnType",
        type: {
          name: "String"
        }
      },
      enableBgp: {
        serializedName: "properties.enableBgp",
        type: {
          name: "Boolean"
        }
      },
      activeActive: {
        serializedName: "properties.activeActive",
        type: {
          name: "Boolean"
        }
      },
      gatewayDefaultSite: {
        serializedName: "properties.gatewayDefaultSite",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      sku: {
        serializedName: "properties.sku",
        type: {
          name: "Composite",
          className: "VirtualNetworkGatewaySku"
        }
      },
      vpnClientConfiguration: {
        serializedName: "properties.vpnClientConfiguration",
        type: {
          name: "Composite",
          className: "VpnClientConfiguration"
        }
      },
      bgpSettings: {
        serializedName: "properties.bgpSettings",
        type: {
          name: "Composite",
          className: "BgpSettings"
        }
      },
      resourceGuid: {
        serializedName: "properties.resourceGuid",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VpnClientParameters: msRest.CompositeMapper = {
  serializedName: "VpnClientParameters",
  type: {
    name: "Composite",
    className: "VpnClientParameters",
    modelProperties: {
      processorArchitecture: {
        serializedName: "processorArchitecture",
        type: {
          name: "String"
        }
      },
      authenticationMethod: {
        serializedName: "authenticationMethod",
        type: {
          name: "String"
        }
      },
      radiusServerAuthCertificate: {
        serializedName: "radiusServerAuthCertificate",
        type: {
          name: "String"
        }
      },
      clientRootCertificates: {
        serializedName: "clientRootCertificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const BgpPeerStatusListResult: msRest.CompositeMapper = {
  serializedName: "BgpPeerStatusListResult",
  type: {
    name: "Composite",
    className: "BgpPeerStatusListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BgpPeerStatus"
            }
          }
        }
      }
    }
  }
};

export const GatewayRouteListResult: msRest.CompositeMapper = {
  serializedName: "GatewayRouteListResult",
  type: {
    name: "Composite",
    className: "GatewayRouteListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GatewayRoute"
            }
          }
        }
      }
    }
  }
};

export const TunnelConnectionHealth: msRest.CompositeMapper = {
  serializedName: "TunnelConnectionHealth",
  type: {
    name: "Composite",
    className: "TunnelConnectionHealth",
    modelProperties: {
      tunnel: {
        readOnly: true,
        serializedName: "tunnel",
        type: {
          name: "String"
        }
      },
      connectionStatus: {
        readOnly: true,
        serializedName: "connectionStatus",
        type: {
          name: "String"
        }
      },
      ingressBytesTransferred: {
        readOnly: true,
        serializedName: "ingressBytesTransferred",
        type: {
          name: "Number"
        }
      },
      egressBytesTransferred: {
        readOnly: true,
        serializedName: "egressBytesTransferred",
        type: {
          name: "Number"
        }
      },
      lastConnectionEstablishedUtcTime: {
        readOnly: true,
        serializedName: "lastConnectionEstablishedUtcTime",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LocalNetworkGateway: msRest.CompositeMapper = {
  serializedName: "LocalNetworkGateway",
  type: {
    name: "Composite",
    className: "LocalNetworkGateway",
    modelProperties: {
      ...Resource.type.modelProperties,
      localNetworkAddressSpace: {
        serializedName: "properties.localNetworkAddressSpace",
        type: {
          name: "Composite",
          className: "AddressSpace"
        }
      },
      gatewayIpAddress: {
        serializedName: "properties.gatewayIpAddress",
        type: {
          name: "String"
        }
      },
      bgpSettings: {
        serializedName: "properties.bgpSettings",
        type: {
          name: "Composite",
          className: "BgpSettings"
        }
      },
      resourceGuid: {
        serializedName: "properties.resourceGuid",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkGatewayConnection: msRest.CompositeMapper = {
  serializedName: "VirtualNetworkGatewayConnection",
  type: {
    name: "Composite",
    className: "VirtualNetworkGatewayConnection",
    modelProperties: {
      ...Resource.type.modelProperties,
      authorizationKey: {
        serializedName: "properties.authorizationKey",
        type: {
          name: "String"
        }
      },
      virtualNetworkGateway1: {
        required: true,
        serializedName: "properties.virtualNetworkGateway1",
        type: {
          name: "Composite",
          className: "VirtualNetworkGateway"
        }
      },
      virtualNetworkGateway2: {
        serializedName: "properties.virtualNetworkGateway2",
        type: {
          name: "Composite",
          className: "VirtualNetworkGateway"
        }
      },
      localNetworkGateway2: {
        serializedName: "properties.localNetworkGateway2",
        type: {
          name: "Composite",
          className: "LocalNetworkGateway"
        }
      },
      connectionType: {
        required: true,
        serializedName: "properties.connectionType",
        type: {
          name: "String"
        }
      },
      connectionProtocol: {
        serializedName: "properties.connectionProtocol",
        type: {
          name: "String"
        }
      },
      routingWeight: {
        serializedName: "properties.routingWeight",
        type: {
          name: "Number"
        }
      },
      sharedKey: {
        serializedName: "properties.sharedKey",
        type: {
          name: "String"
        }
      },
      connectionStatus: {
        readOnly: true,
        serializedName: "properties.connectionStatus",
        type: {
          name: "String"
        }
      },
      tunnelConnectionStatus: {
        readOnly: true,
        serializedName: "properties.tunnelConnectionStatus",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TunnelConnectionHealth"
            }
          }
        }
      },
      egressBytesTransferred: {
        readOnly: true,
        serializedName: "properties.egressBytesTransferred",
        type: {
          name: "Number"
        }
      },
      ingressBytesTransferred: {
        readOnly: true,
        serializedName: "properties.ingressBytesTransferred",
        type: {
          name: "Number"
        }
      },
      peer: {
        serializedName: "properties.peer",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      enableBgp: {
        serializedName: "properties.enableBgp",
        type: {
          name: "Boolean"
        }
      },
      usePolicyBasedTrafficSelectors: {
        serializedName: "properties.usePolicyBasedTrafficSelectors",
        type: {
          name: "Boolean"
        }
      },
      ipsecPolicies: {
        serializedName: "properties.ipsecPolicies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpsecPolicy"
            }
          }
        }
      },
      resourceGuid: {
        serializedName: "properties.resourceGuid",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      expressRouteGatewayBypass: {
        serializedName: "properties.expressRouteGatewayBypass",
        type: {
          name: "Boolean"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectionResetSharedKey: msRest.CompositeMapper = {
  serializedName: "ConnectionResetSharedKey",
  type: {
    name: "Composite",
    className: "ConnectionResetSharedKey",
    modelProperties: {
      keyLength: {
        required: true,
        serializedName: "keyLength",
        constraints: {
          InclusiveMaximum: 128,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ConnectionSharedKey: msRest.CompositeMapper = {
  serializedName: "ConnectionSharedKey",
  type: {
    name: "Composite",
    className: "ConnectionSharedKey",
    modelProperties: {
      ...SubResource.type.modelProperties,
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VpnClientIPsecParameters: msRest.CompositeMapper = {
  serializedName: "VpnClientIPsecParameters",
  type: {
    name: "Composite",
    className: "VpnClientIPsecParameters",
    modelProperties: {
      saLifeTimeSeconds: {
        required: true,
        serializedName: "saLifeTimeSeconds",
        type: {
          name: "Number"
        }
      },
      saDataSizeKilobytes: {
        required: true,
        serializedName: "saDataSizeKilobytes",
        type: {
          name: "Number"
        }
      },
      ipsecEncryption: {
        required: true,
        serializedName: "ipsecEncryption",
        type: {
          name: "String"
        }
      },
      ipsecIntegrity: {
        required: true,
        serializedName: "ipsecIntegrity",
        type: {
          name: "String"
        }
      },
      ikeEncryption: {
        required: true,
        serializedName: "ikeEncryption",
        type: {
          name: "String"
        }
      },
      ikeIntegrity: {
        required: true,
        serializedName: "ikeIntegrity",
        type: {
          name: "String"
        }
      },
      dhGroup: {
        required: true,
        serializedName: "dhGroup",
        type: {
          name: "String"
        }
      },
      pfsGroup: {
        required: true,
        serializedName: "pfsGroup",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkConnectionGatewayReference: msRest.CompositeMapper = {
  serializedName: "virtualNetworkConnectionGatewayReference",
  type: {
    name: "Composite",
    className: "VirtualNetworkConnectionGatewayReference",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkGatewayConnectionListEntity: msRest.CompositeMapper = {
  serializedName: "VirtualNetworkGatewayConnectionListEntity",
  type: {
    name: "Composite",
    className: "VirtualNetworkGatewayConnectionListEntity",
    modelProperties: {
      ...Resource.type.modelProperties,
      authorizationKey: {
        serializedName: "properties.authorizationKey",
        type: {
          name: "String"
        }
      },
      virtualNetworkGateway1: {
        required: true,
        serializedName: "properties.virtualNetworkGateway1",
        type: {
          name: "Composite",
          className: "VirtualNetworkConnectionGatewayReference"
        }
      },
      virtualNetworkGateway2: {
        serializedName: "properties.virtualNetworkGateway2",
        type: {
          name: "Composite",
          className: "VirtualNetworkConnectionGatewayReference"
        }
      },
      localNetworkGateway2: {
        serializedName: "properties.localNetworkGateway2",
        type: {
          name: "Composite",
          className: "VirtualNetworkConnectionGatewayReference"
        }
      },
      connectionType: {
        required: true,
        serializedName: "properties.connectionType",
        type: {
          name: "String"
        }
      },
      connectionProtocol: {
        serializedName: "properties.connectionProtocol",
        type: {
          name: "String"
        }
      },
      routingWeight: {
        serializedName: "properties.routingWeight",
        type: {
          name: "Number"
        }
      },
      sharedKey: {
        serializedName: "properties.sharedKey",
        type: {
          name: "String"
        }
      },
      connectionStatus: {
        readOnly: true,
        serializedName: "properties.connectionStatus",
        type: {
          name: "String"
        }
      },
      tunnelConnectionStatus: {
        readOnly: true,
        serializedName: "properties.tunnelConnectionStatus",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TunnelConnectionHealth"
            }
          }
        }
      },
      egressBytesTransferred: {
        readOnly: true,
        serializedName: "properties.egressBytesTransferred",
        type: {
          name: "Number"
        }
      },
      ingressBytesTransferred: {
        readOnly: true,
        serializedName: "properties.ingressBytesTransferred",
        type: {
          name: "Number"
        }
      },
      peer: {
        serializedName: "properties.peer",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      enableBgp: {
        serializedName: "properties.enableBgp",
        type: {
          name: "Boolean"
        }
      },
      usePolicyBasedTrafficSelectors: {
        serializedName: "properties.usePolicyBasedTrafficSelectors",
        type: {
          name: "Boolean"
        }
      },
      ipsecPolicies: {
        serializedName: "properties.ipsecPolicies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpsecPolicy"
            }
          }
        }
      },
      resourceGuid: {
        serializedName: "properties.resourceGuid",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      expressRouteGatewayBypass: {
        serializedName: "properties.expressRouteGatewayBypass",
        type: {
          name: "Boolean"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VpnDeviceScriptParameters: msRest.CompositeMapper = {
  serializedName: "VpnDeviceScriptParameters",
  type: {
    name: "Composite",
    className: "VpnDeviceScriptParameters",
    modelProperties: {
      vendor: {
        serializedName: "vendor",
        type: {
          name: "String"
        }
      },
      deviceFamily: {
        serializedName: "deviceFamily",
        type: {
          name: "String"
        }
      },
      firmwareVersion: {
        serializedName: "firmwareVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const P2SVpnServerConfigVpnClientRootCertificate: msRest.CompositeMapper = {
  serializedName: "P2SVpnServerConfigVpnClientRootCertificate",
  type: {
    name: "Composite",
    className: "P2SVpnServerConfigVpnClientRootCertificate",
    modelProperties: {
      ...SubResource.type.modelProperties,
      publicCertData: {
        required: true,
        serializedName: "properties.publicCertData",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const P2SVpnServerConfigVpnClientRevokedCertificate: msRest.CompositeMapper = {
  serializedName: "P2SVpnServerConfigVpnClientRevokedCertificate",
  type: {
    name: "Composite",
    className: "P2SVpnServerConfigVpnClientRevokedCertificate",
    modelProperties: {
      ...SubResource.type.modelProperties,
      thumbprint: {
        serializedName: "properties.thumbprint",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const P2SVpnServerConfigRadiusServerRootCertificate: msRest.CompositeMapper = {
  serializedName: "P2SVpnServerConfigRadiusServerRootCertificate",
  type: {
    name: "Composite",
    className: "P2SVpnServerConfigRadiusServerRootCertificate",
    modelProperties: {
      ...SubResource.type.modelProperties,
      publicCertData: {
        required: true,
        serializedName: "properties.publicCertData",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const P2SVpnServerConfigRadiusClientRootCertificate: msRest.CompositeMapper = {
  serializedName: "P2SVpnServerConfigRadiusClientRootCertificate",
  type: {
    name: "Composite",
    className: "P2SVpnServerConfigRadiusClientRootCertificate",
    modelProperties: {
      ...SubResource.type.modelProperties,
      thumbprint: {
        serializedName: "properties.thumbprint",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const P2SVpnServerConfiguration: msRest.CompositeMapper = {
  serializedName: "P2SVpnServerConfiguration",
  type: {
    name: "Composite",
    className: "P2SVpnServerConfiguration",
    modelProperties: {
      ...SubResource.type.modelProperties,
      p2SVpnServerConfigurationPropertiesName: {
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      vpnProtocols: {
        serializedName: "properties.vpnProtocols",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      p2SVpnServerConfigVpnClientRootCertificates: {
        serializedName: "properties.p2SVpnServerConfigVpnClientRootCertificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "P2SVpnServerConfigVpnClientRootCertificate"
            }
          }
        }
      },
      p2SVpnServerConfigVpnClientRevokedCertificates: {
        serializedName: "properties.p2SVpnServerConfigVpnClientRevokedCertificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "P2SVpnServerConfigVpnClientRevokedCertificate"
            }
          }
        }
      },
      p2SVpnServerConfigRadiusServerRootCertificates: {
        serializedName: "properties.p2SVpnServerConfigRadiusServerRootCertificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "P2SVpnServerConfigRadiusServerRootCertificate"
            }
          }
        }
      },
      p2SVpnServerConfigRadiusClientRootCertificates: {
        serializedName: "properties.p2SVpnServerConfigRadiusClientRootCertificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "P2SVpnServerConfigRadiusClientRootCertificate"
            }
          }
        }
      },
      vpnClientIpsecPolicies: {
        serializedName: "properties.vpnClientIpsecPolicies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpsecPolicy"
            }
          }
        }
      },
      radiusServerAddress: {
        serializedName: "properties.radiusServerAddress",
        type: {
          name: "String"
        }
      },
      radiusServerSecret: {
        serializedName: "properties.radiusServerSecret",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      p2SVpnGateways: {
        readOnly: true,
        serializedName: "properties.p2SVpnGateways",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubResource"
            }
          }
        }
      },
      p2SVpnServerConfigurationPropertiesEtag: {
        serializedName: "properties.etag",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualWAN: msRest.CompositeMapper = {
  serializedName: "VirtualWAN",
  type: {
    name: "Composite",
    className: "VirtualWAN",
    modelProperties: {
      ...Resource.type.modelProperties,
      disableVpnEncryption: {
        serializedName: "properties.disableVpnEncryption",
        type: {
          name: "Boolean"
        }
      },
      virtualHubs: {
        readOnly: true,
        serializedName: "properties.virtualHubs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubResource"
            }
          }
        }
      },
      vpnSites: {
        readOnly: true,
        serializedName: "properties.vpnSites",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubResource"
            }
          }
        }
      },
      securityProviderName: {
        serializedName: "properties.securityProviderName",
        type: {
          name: "String"
        }
      },
      allowBranchToBranchTraffic: {
        serializedName: "properties.allowBranchToBranchTraffic",
        type: {
          name: "Boolean"
        }
      },
      allowVnetToVnetTraffic: {
        serializedName: "properties.allowVnetToVnetTraffic",
        type: {
          name: "Boolean"
        }
      },
      office365LocalBreakoutCategory: {
        serializedName: "properties.office365LocalBreakoutCategory",
        type: {
          name: "String"
        }
      },
      p2SVpnServerConfigurations: {
        serializedName: "properties.p2SVpnServerConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "P2SVpnServerConfiguration"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeviceProperties: msRest.CompositeMapper = {
  serializedName: "DeviceProperties",
  type: {
    name: "Composite",
    className: "DeviceProperties",
    modelProperties: {
      deviceVendor: {
        serializedName: "deviceVendor",
        type: {
          name: "String"
        }
      },
      deviceModel: {
        serializedName: "deviceModel",
        type: {
          name: "String"
        }
      },
      linkSpeedInMbps: {
        serializedName: "linkSpeedInMbps",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VpnSite: msRest.CompositeMapper = {
  serializedName: "VpnSite",
  type: {
    name: "Composite",
    className: "VpnSite",
    modelProperties: {
      ...Resource.type.modelProperties,
      virtualWan: {
        serializedName: "properties.virtualWan",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      deviceProperties: {
        serializedName: "properties.deviceProperties",
        type: {
          name: "Composite",
          className: "DeviceProperties"
        }
      },
      ipAddress: {
        serializedName: "properties.ipAddress",
        type: {
          name: "String"
        }
      },
      siteKey: {
        serializedName: "properties.siteKey",
        type: {
          name: "String"
        }
      },
      addressSpace: {
        serializedName: "properties.addressSpace",
        type: {
          name: "Composite",
          className: "AddressSpace"
        }
      },
      bgpProperties: {
        serializedName: "properties.bgpProperties",
        type: {
          name: "Composite",
          className: "BgpSettings"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      isSecuritySite: {
        serializedName: "properties.isSecuritySite",
        type: {
          name: "Boolean"
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GetVpnSitesConfigurationRequest: msRest.CompositeMapper = {
  serializedName: "GetVpnSitesConfigurationRequest",
  type: {
    name: "Composite",
    className: "GetVpnSitesConfigurationRequest",
    modelProperties: {
      vpnSites: {
        serializedName: "vpnSites",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      outputBlobSasUrl: {
        serializedName: "outputBlobSasUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HubVirtualNetworkConnection: msRest.CompositeMapper = {
  serializedName: "HubVirtualNetworkConnection",
  type: {
    name: "Composite",
    className: "HubVirtualNetworkConnection",
    modelProperties: {
      ...SubResource.type.modelProperties,
      remoteVirtualNetwork: {
        serializedName: "properties.remoteVirtualNetwork",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      allowHubToRemoteVnetTransit: {
        serializedName: "properties.allowHubToRemoteVnetTransit",
        type: {
          name: "Boolean"
        }
      },
      allowRemoteVnetToUseHubVnetGateways: {
        serializedName: "properties.allowRemoteVnetToUseHubVnetGateways",
        type: {
          name: "Boolean"
        }
      },
      enableInternetSecurity: {
        serializedName: "properties.enableInternetSecurity",
        type: {
          name: "Boolean"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualHubRoute: msRest.CompositeMapper = {
  serializedName: "VirtualHubRoute",
  type: {
    name: "Composite",
    className: "VirtualHubRoute",
    modelProperties: {
      addressPrefixes: {
        serializedName: "addressPrefixes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      nextHopIpAddress: {
        serializedName: "nextHopIpAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualHubRouteTable: msRest.CompositeMapper = {
  serializedName: "VirtualHubRouteTable",
  type: {
    name: "Composite",
    className: "VirtualHubRouteTable",
    modelProperties: {
      routes: {
        serializedName: "routes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualHubRoute"
            }
          }
        }
      }
    }
  }
};

export const VirtualHub: msRest.CompositeMapper = {
  serializedName: "VirtualHub",
  type: {
    name: "Composite",
    className: "VirtualHub",
    modelProperties: {
      ...Resource.type.modelProperties,
      virtualWan: {
        serializedName: "properties.virtualWan",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      vpnGateway: {
        serializedName: "properties.vpnGateway",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      p2SVpnGateway: {
        serializedName: "properties.p2SVpnGateway",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      expressRouteGateway: {
        serializedName: "properties.expressRouteGateway",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      virtualNetworkConnections: {
        serializedName: "properties.virtualNetworkConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HubVirtualNetworkConnection"
            }
          }
        }
      },
      addressPrefix: {
        serializedName: "properties.addressPrefix",
        type: {
          name: "String"
        }
      },
      routeTable: {
        serializedName: "properties.routeTable",
        type: {
          name: "Composite",
          className: "VirtualHubRouteTable"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VpnConnection: msRest.CompositeMapper = {
  serializedName: "VpnConnection",
  type: {
    name: "Composite",
    className: "VpnConnection",
    modelProperties: {
      ...SubResource.type.modelProperties,
      remoteVpnSite: {
        serializedName: "properties.remoteVpnSite",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      routingWeight: {
        serializedName: "properties.routingWeight",
        type: {
          name: "Number"
        }
      },
      connectionStatus: {
        serializedName: "properties.connectionStatus",
        type: {
          name: "String"
        }
      },
      vpnConnectionProtocolType: {
        serializedName: "properties.vpnConnectionProtocolType",
        type: {
          name: "String"
        }
      },
      ingressBytesTransferred: {
        readOnly: true,
        serializedName: "properties.ingressBytesTransferred",
        type: {
          name: "Number"
        }
      },
      egressBytesTransferred: {
        readOnly: true,
        serializedName: "properties.egressBytesTransferred",
        type: {
          name: "Number"
        }
      },
      connectionBandwidth: {
        serializedName: "properties.connectionBandwidth",
        type: {
          name: "Number"
        }
      },
      sharedKey: {
        serializedName: "properties.sharedKey",
        type: {
          name: "String"
        }
      },
      enableBgp: {
        serializedName: "properties.enableBgp",
        type: {
          name: "Boolean"
        }
      },
      ipsecPolicies: {
        serializedName: "properties.ipsecPolicies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpsecPolicy"
            }
          }
        }
      },
      enableRateLimiting: {
        serializedName: "properties.enableRateLimiting",
        type: {
          name: "Boolean"
        }
      },
      enableInternetSecurity: {
        serializedName: "properties.enableInternetSecurity",
        type: {
          name: "Boolean"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VpnGateway: msRest.CompositeMapper = {
  serializedName: "VpnGateway",
  type: {
    name: "Composite",
    className: "VpnGateway",
    modelProperties: {
      ...Resource.type.modelProperties,
      virtualHub: {
        serializedName: "properties.virtualHub",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      connections: {
        serializedName: "properties.connections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VpnConnection"
            }
          }
        }
      },
      bgpSettings: {
        serializedName: "properties.bgpSettings",
        type: {
          name: "Composite",
          className: "BgpSettings"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      vpnGatewayScaleUnit: {
        serializedName: "properties.vpnGatewayScaleUnit",
        type: {
          name: "Number"
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VpnSiteId: msRest.CompositeMapper = {
  serializedName: "VpnSiteId",
  type: {
    name: "Composite",
    className: "VpnSiteId",
    modelProperties: {
      vpnSite: {
        readOnly: true,
        serializedName: "vpnSite",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualWanSecurityProvider: msRest.CompositeMapper = {
  serializedName: "VirtualWanSecurityProvider",
  type: {
    name: "Composite",
    className: "VirtualWanSecurityProvider",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "url",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualWanSecurityProviders: msRest.CompositeMapper = {
  serializedName: "VirtualWanSecurityProviders",
  type: {
    name: "Composite",
    className: "VirtualWanSecurityProviders",
    modelProperties: {
      supportedProviders: {
        serializedName: "supportedProviders",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualWanSecurityProvider"
            }
          }
        }
      }
    }
  }
};

export const VpnClientConnectionHealth: msRest.CompositeMapper = {
  serializedName: "VpnClientConnectionHealth",
  type: {
    name: "Composite",
    className: "VpnClientConnectionHealth",
    modelProperties: {
      totalIngressBytesTransferred: {
        readOnly: true,
        serializedName: "totalIngressBytesTransferred",
        type: {
          name: "Number"
        }
      },
      totalEgressBytesTransferred: {
        readOnly: true,
        serializedName: "totalEgressBytesTransferred",
        type: {
          name: "Number"
        }
      },
      vpnClientConnectionsCount: {
        serializedName: "vpnClientConnectionsCount",
        type: {
          name: "Number"
        }
      },
      allocatedIpAddresses: {
        serializedName: "allocatedIpAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const P2SVpnGateway: msRest.CompositeMapper = {
  serializedName: "P2SVpnGateway",
  type: {
    name: "Composite",
    className: "P2SVpnGateway",
    modelProperties: {
      ...Resource.type.modelProperties,
      virtualHub: {
        serializedName: "properties.virtualHub",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      vpnGatewayScaleUnit: {
        serializedName: "properties.vpnGatewayScaleUnit",
        type: {
          name: "Number"
        }
      },
      p2SVpnServerConfiguration: {
        serializedName: "properties.p2SVpnServerConfiguration",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      vpnClientAddressPool: {
        serializedName: "properties.vpnClientAddressPool",
        type: {
          name: "Composite",
          className: "AddressSpace"
        }
      },
      vpnClientConnectionHealth: {
        readOnly: true,
        serializedName: "properties.vpnClientConnectionHealth",
        type: {
          name: "Composite",
          className: "VpnClientConnectionHealth"
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const P2SVpnProfileParameters: msRest.CompositeMapper = {
  serializedName: "P2SVpnProfileParameters",
  type: {
    name: "Composite",
    className: "P2SVpnProfileParameters",
    modelProperties: {
      authenticationMethod: {
        serializedName: "authenticationMethod",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VpnProfileResponse: msRest.CompositeMapper = {
  serializedName: "VpnProfileResponse",
  type: {
    name: "Composite",
    className: "VpnProfileResponse",
    modelProperties: {
      profileUrl: {
        serializedName: "profileUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayListResult: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewayListResult",
  type: {
    name: "Composite",
    className: "ApplicationGatewayListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGateway"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGatewayAvailableSslPredefinedPolicies: msRest.CompositeMapper = {
  serializedName: "ApplicationGatewayAvailableSslPredefinedPolicies",
  type: {
    name: "Composite",
    className: "ApplicationGatewayAvailableSslPredefinedPolicies",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGatewaySslPredefinedPolicy"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationSecurityGroupListResult: msRest.CompositeMapper = {
  serializedName: "ApplicationSecurityGroupListResult",
  type: {
    name: "Composite",
    className: "ApplicationSecurityGroupListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationSecurityGroup"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailableDelegationsResult: msRest.CompositeMapper = {
  serializedName: "AvailableDelegationsResult",
  type: {
    name: "Composite",
    className: "AvailableDelegationsResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AvailableDelegation"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFirewallListResult: msRest.CompositeMapper = {
  serializedName: "AzureFirewallListResult",
  type: {
    name: "Composite",
    className: "AzureFirewallListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureFirewall"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFirewallFqdnTagListResult: msRest.CompositeMapper = {
  serializedName: "AzureFirewallFqdnTagListResult",
  type: {
    name: "Composite",
    className: "AzureFirewallFqdnTagListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureFirewallFqdnTag"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DdosProtectionPlanListResult: msRest.CompositeMapper = {
  serializedName: "DdosProtectionPlanListResult",
  type: {
    name: "Composite",
    className: "DdosProtectionPlanListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DdosProtectionPlan"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EndpointServicesListResult: msRest.CompositeMapper = {
  serializedName: "EndpointServicesListResult",
  type: {
    name: "Composite",
    className: "EndpointServicesListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EndpointServiceResult"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AuthorizationListResult: msRest.CompositeMapper = {
  serializedName: "AuthorizationListResult",
  type: {
    name: "Composite",
    className: "AuthorizationListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteCircuitAuthorization"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCircuitPeeringListResult: msRest.CompositeMapper = {
  serializedName: "ExpressRouteCircuitPeeringListResult",
  type: {
    name: "Composite",
    className: "ExpressRouteCircuitPeeringListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteCircuitPeering"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCircuitListResult: msRest.CompositeMapper = {
  serializedName: "ExpressRouteCircuitListResult",
  type: {
    name: "Composite",
    className: "ExpressRouteCircuitListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteCircuit"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteServiceProviderListResult: msRest.CompositeMapper = {
  serializedName: "ExpressRouteServiceProviderListResult",
  type: {
    name: "Composite",
    className: "ExpressRouteServiceProviderListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteServiceProvider"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCrossConnectionListResult: msRest.CompositeMapper = {
  serializedName: "ExpressRouteCrossConnectionListResult",
  type: {
    name: "Composite",
    className: "ExpressRouteCrossConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteCrossConnection"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteCrossConnectionPeeringList: msRest.CompositeMapper = {
  serializedName: "ExpressRouteCrossConnectionPeeringList",
  type: {
    name: "Composite",
    className: "ExpressRouteCrossConnectionPeeringList",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteCrossConnectionPeering"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRoutePortsLocationListResult: msRest.CompositeMapper = {
  serializedName: "ExpressRoutePortsLocationListResult",
  type: {
    name: "Composite",
    className: "ExpressRoutePortsLocationListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRoutePortsLocation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRoutePortListResult: msRest.CompositeMapper = {
  serializedName: "ExpressRoutePortListResult",
  type: {
    name: "Composite",
    className: "ExpressRoutePortListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRoutePort"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteLinkListResult: msRest.CompositeMapper = {
  serializedName: "ExpressRouteLinkListResult",
  type: {
    name: "Composite",
    className: "ExpressRouteLinkListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteLink"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InterfaceEndpointListResult: msRest.CompositeMapper = {
  serializedName: "InterfaceEndpointListResult",
  type: {
    name: "Composite",
    className: "InterfaceEndpointListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InterfaceEndpoint"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LoadBalancerListResult: msRest.CompositeMapper = {
  serializedName: "LoadBalancerListResult",
  type: {
    name: "Composite",
    className: "LoadBalancerListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LoadBalancer"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LoadBalancerBackendAddressPoolListResult: msRest.CompositeMapper = {
  serializedName: "LoadBalancerBackendAddressPoolListResult",
  type: {
    name: "Composite",
    className: "LoadBalancerBackendAddressPoolListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BackendAddressPool"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LoadBalancerFrontendIPConfigurationListResult: msRest.CompositeMapper = {
  serializedName: "LoadBalancerFrontendIPConfigurationListResult",
  type: {
    name: "Composite",
    className: "LoadBalancerFrontendIPConfigurationListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FrontendIPConfiguration"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InboundNatRuleListResult: msRest.CompositeMapper = {
  serializedName: "InboundNatRuleListResult",
  type: {
    name: "Composite",
    className: "InboundNatRuleListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InboundNatRule"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LoadBalancerLoadBalancingRuleListResult: msRest.CompositeMapper = {
  serializedName: "LoadBalancerLoadBalancingRuleListResult",
  type: {
    name: "Composite",
    className: "LoadBalancerLoadBalancingRuleListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LoadBalancingRule"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LoadBalancerOutboundRuleListResult: msRest.CompositeMapper = {
  serializedName: "LoadBalancerOutboundRuleListResult",
  type: {
    name: "Composite",
    className: "LoadBalancerOutboundRuleListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OutboundRule"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkInterfaceListResult: msRest.CompositeMapper = {
  serializedName: "NetworkInterfaceListResult",
  type: {
    name: "Composite",
    className: "NetworkInterfaceListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkInterface"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LoadBalancerProbeListResult: msRest.CompositeMapper = {
  serializedName: "LoadBalancerProbeListResult",
  type: {
    name: "Composite",
    className: "LoadBalancerProbeListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Probe"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkInterfaceIPConfigurationListResult: msRest.CompositeMapper = {
  serializedName: "NetworkInterfaceIPConfigurationListResult",
  type: {
    name: "Composite",
    className: "NetworkInterfaceIPConfigurationListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkInterfaceIPConfiguration"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkInterfaceLoadBalancerListResult: msRest.CompositeMapper = {
  serializedName: "NetworkInterfaceLoadBalancerListResult",
  type: {
    name: "Composite",
    className: "NetworkInterfaceLoadBalancerListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LoadBalancer"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkInterfaceTapConfigurationListResult: msRest.CompositeMapper = {
  serializedName: "NetworkInterfaceTapConfigurationListResult",
  type: {
    name: "Composite",
    className: "NetworkInterfaceTapConfigurationListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkInterfaceTapConfiguration"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkProfileListResult: msRest.CompositeMapper = {
  serializedName: "NetworkProfileListResult",
  type: {
    name: "Composite",
    className: "NetworkProfileListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkProfile"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkSecurityGroupListResult: msRest.CompositeMapper = {
  serializedName: "NetworkSecurityGroupListResult",
  type: {
    name: "Composite",
    className: "NetworkSecurityGroupListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkSecurityGroup"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecurityRuleListResult: msRest.CompositeMapper = {
  serializedName: "SecurityRuleListResult",
  type: {
    name: "Composite",
    className: "SecurityRuleListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SecurityRule"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkWatcherListResult: msRest.CompositeMapper = {
  serializedName: "NetworkWatcherListResult",
  type: {
    name: "Composite",
    className: "NetworkWatcherListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkWatcher"
            }
          }
        }
      }
    }
  }
};

export const PacketCaptureListResult: msRest.CompositeMapper = {
  serializedName: "PacketCaptureListResult",
  type: {
    name: "Composite",
    className: "PacketCaptureListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PacketCaptureResult"
            }
          }
        }
      }
    }
  }
};

export const ConnectionMonitorListResult: msRest.CompositeMapper = {
  serializedName: "ConnectionMonitorListResult",
  type: {
    name: "Composite",
    className: "ConnectionMonitorListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectionMonitorResult"
            }
          }
        }
      }
    }
  }
};

export const OperationListResult: msRest.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PublicIPAddressListResult: msRest.CompositeMapper = {
  serializedName: "PublicIPAddressListResult",
  type: {
    name: "Composite",
    className: "PublicIPAddressListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PublicIPAddress"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PublicIPPrefixListResult: msRest.CompositeMapper = {
  serializedName: "PublicIPPrefixListResult",
  type: {
    name: "Composite",
    className: "PublicIPPrefixListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PublicIPPrefix"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RouteFilterListResult: msRest.CompositeMapper = {
  serializedName: "RouteFilterListResult",
  type: {
    name: "Composite",
    className: "RouteFilterListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RouteFilter"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RouteFilterRuleListResult: msRest.CompositeMapper = {
  serializedName: "RouteFilterRuleListResult",
  type: {
    name: "Composite",
    className: "RouteFilterRuleListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RouteFilterRule"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RouteTableListResult: msRest.CompositeMapper = {
  serializedName: "RouteTableListResult",
  type: {
    name: "Composite",
    className: "RouteTableListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RouteTable"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RouteListResult: msRest.CompositeMapper = {
  serializedName: "RouteListResult",
  type: {
    name: "Composite",
    className: "RouteListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Route"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BgpServiceCommunityListResult: msRest.CompositeMapper = {
  serializedName: "BgpServiceCommunityListResult",
  type: {
    name: "Composite",
    className: "BgpServiceCommunityListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BgpServiceCommunity"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceEndpointPolicyListResult: msRest.CompositeMapper = {
  serializedName: "ServiceEndpointPolicyListResult",
  type: {
    name: "Composite",
    className: "ServiceEndpointPolicyListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceEndpointPolicy"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceEndpointPolicyDefinitionListResult: msRest.CompositeMapper = {
  serializedName: "ServiceEndpointPolicyDefinitionListResult",
  type: {
    name: "Composite",
    className: "ServiceEndpointPolicyDefinitionListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceEndpointPolicyDefinition"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UsagesListResult: msRest.CompositeMapper = {
  serializedName: "UsagesListResult",
  type: {
    name: "Composite",
    className: "UsagesListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Usage"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkListResult: msRest.CompositeMapper = {
  serializedName: "VirtualNetworkListResult",
  type: {
    name: "Composite",
    className: "VirtualNetworkListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetwork"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkListUsageResult: msRest.CompositeMapper = {
  serializedName: "VirtualNetworkListUsageResult",
  type: {
    name: "Composite",
    className: "VirtualNetworkListUsageResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkUsage"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubnetListResult: msRest.CompositeMapper = {
  serializedName: "SubnetListResult",
  type: {
    name: "Composite",
    className: "SubnetListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Subnet"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkPeeringListResult: msRest.CompositeMapper = {
  serializedName: "VirtualNetworkPeeringListResult",
  type: {
    name: "Composite",
    className: "VirtualNetworkPeeringListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkPeering"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkTapListResult: msRest.CompositeMapper = {
  serializedName: "VirtualNetworkTapListResult",
  type: {
    name: "Composite",
    className: "VirtualNetworkTapListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkTap"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkGatewayListResult: msRest.CompositeMapper = {
  serializedName: "VirtualNetworkGatewayListResult",
  type: {
    name: "Composite",
    className: "VirtualNetworkGatewayListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkGateway"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkGatewayListConnectionsResult: msRest.CompositeMapper = {
  serializedName: "VirtualNetworkGatewayListConnectionsResult",
  type: {
    name: "Composite",
    className: "VirtualNetworkGatewayListConnectionsResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkGatewayConnectionListEntity"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkGatewayConnectionListResult: msRest.CompositeMapper = {
  serializedName: "VirtualNetworkGatewayConnectionListResult",
  type: {
    name: "Composite",
    className: "VirtualNetworkGatewayConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkGatewayConnection"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LocalNetworkGatewayListResult: msRest.CompositeMapper = {
  serializedName: "LocalNetworkGatewayListResult",
  type: {
    name: "Composite",
    className: "LocalNetworkGatewayListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LocalNetworkGateway"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListVirtualWANsResult: msRest.CompositeMapper = {
  serializedName: "ListVirtualWANsResult",
  type: {
    name: "Composite",
    className: "ListVirtualWANsResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualWAN"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListVpnSitesResult: msRest.CompositeMapper = {
  serializedName: "ListVpnSitesResult",
  type: {
    name: "Composite",
    className: "ListVpnSitesResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VpnSite"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListVirtualHubsResult: msRest.CompositeMapper = {
  serializedName: "ListVirtualHubsResult",
  type: {
    name: "Composite",
    className: "ListVirtualHubsResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualHub"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListHubVirtualNetworkConnectionsResult: msRest.CompositeMapper = {
  serializedName: "ListHubVirtualNetworkConnectionsResult",
  type: {
    name: "Composite",
    className: "ListHubVirtualNetworkConnectionsResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HubVirtualNetworkConnection"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListVpnGatewaysResult: msRest.CompositeMapper = {
  serializedName: "ListVpnGatewaysResult",
  type: {
    name: "Composite",
    className: "ListVpnGatewaysResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VpnGateway"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListVpnConnectionsResult: msRest.CompositeMapper = {
  serializedName: "ListVpnConnectionsResult",
  type: {
    name: "Composite",
    className: "ListVpnConnectionsResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VpnConnection"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListP2SVpnServerConfigurationsResult: msRest.CompositeMapper = {
  serializedName: "ListP2SVpnServerConfigurationsResult",
  type: {
    name: "Composite",
    className: "ListP2SVpnServerConfigurationsResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "P2SVpnServerConfiguration"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListP2SVpnGatewaysResult: msRest.CompositeMapper = {
  serializedName: "ListP2SVpnGatewaysResult",
  type: {
    name: "Composite",
    className: "ListP2SVpnGatewaysResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "P2SVpnGateway"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};
