/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/diagnosticLoggerMappers";
import * as Parameters from "../models/parameters";
import { ApiManagementClientContext } from "../apiManagementClientContext";

/** Class representing a DiagnosticLogger. */
export class DiagnosticLogger {
  private readonly client: ApiManagementClientContext;

  /**
   * Create a DiagnosticLogger.
   * @param {ApiManagementClientContext} client Reference to the service client.
   */
  constructor(client: ApiManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists all loggers assosiated with the specified Diagnostic of the API Management service
   * instance.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
   * instance.
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticLoggerListByServiceResponse>
   */
  listByService(resourceGroupName: string, serviceName: string, diagnosticId: string, options?: Models.DiagnosticLoggerListByServiceOptionalParams): Promise<Models.DiagnosticLoggerListByServiceResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
   * instance.
   * @param callback The callback
   */
  listByService(resourceGroupName: string, serviceName: string, diagnosticId: string, callback: msRest.ServiceCallback<Models.LoggerCollection>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
   * instance.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByService(resourceGroupName: string, serviceName: string, diagnosticId: string, options: Models.DiagnosticLoggerListByServiceOptionalParams, callback: msRest.ServiceCallback<Models.LoggerCollection>): void;
  listByService(resourceGroupName: string, serviceName: string, diagnosticId: string, options?: Models.DiagnosticLoggerListByServiceOptionalParams, callback?: msRest.ServiceCallback<Models.LoggerCollection>): Promise<Models.DiagnosticLoggerListByServiceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        diagnosticId,
        options
      },
      listByServiceOperationSpec,
      callback) as Promise<Models.DiagnosticLoggerListByServiceResponse>;
  }

  /**
   * Checks that logger entity specified by identifier is associated with the diagnostics entity.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
   * instance.
   * @param loggerid Logger identifier. Must be unique in the API Management service instance.
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticLoggerCheckEntityExistsResponse>
   */
  checkEntityExists(resourceGroupName: string, serviceName: string, diagnosticId: string, loggerid: string, options?: msRest.RequestOptionsBase): Promise<Models.DiagnosticLoggerCheckEntityExistsResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
   * instance.
   * @param loggerid Logger identifier. Must be unique in the API Management service instance.
   * @param callback The callback
   */
  checkEntityExists(resourceGroupName: string, serviceName: string, diagnosticId: string, loggerid: string, callback: msRest.ServiceCallback<boolean>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
   * instance.
   * @param loggerid Logger identifier. Must be unique in the API Management service instance.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkEntityExists(resourceGroupName: string, serviceName: string, diagnosticId: string, loggerid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean>): void;
  checkEntityExists(resourceGroupName: string, serviceName: string, diagnosticId: string, loggerid: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<boolean>): Promise<Models.DiagnosticLoggerCheckEntityExistsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        diagnosticId,
        loggerid,
        options
      },
      checkEntityExistsOperationSpec,
      callback) as Promise<Models.DiagnosticLoggerCheckEntityExistsResponse>;
  }

  /**
   * Attaches a logger to a dignostic.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
   * instance.
   * @param loggerid Logger identifier. Must be unique in the API Management service instance.
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticLoggerCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, serviceName: string, diagnosticId: string, loggerid: string, options?: msRest.RequestOptionsBase): Promise<Models.DiagnosticLoggerCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
   * instance.
   * @param loggerid Logger identifier. Must be unique in the API Management service instance.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, serviceName: string, diagnosticId: string, loggerid: string, callback: msRest.ServiceCallback<Models.LoggerContract>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
   * instance.
   * @param loggerid Logger identifier. Must be unique in the API Management service instance.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, serviceName: string, diagnosticId: string, loggerid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LoggerContract>): void;
  createOrUpdate(resourceGroupName: string, serviceName: string, diagnosticId: string, loggerid: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.LoggerContract>): Promise<Models.DiagnosticLoggerCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        diagnosticId,
        loggerid,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.DiagnosticLoggerCreateOrUpdateResponse>;
  }

  /**
   * Deletes the specified Logger from Diagnostic.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
   * instance.
   * @param loggerid Logger identifier. Must be unique in the API Management service instance.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, serviceName: string, diagnosticId: string, loggerid: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
   * instance.
   * @param loggerid Logger identifier. Must be unique in the API Management service instance.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, serviceName: string, diagnosticId: string, loggerid: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
   * instance.
   * @param loggerid Logger identifier. Must be unique in the API Management service instance.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, serviceName: string, diagnosticId: string, loggerid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, serviceName: string, diagnosticId: string, loggerid: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        diagnosticId,
        loggerid,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Lists all loggers assosiated with the specified Diagnostic of the API Management service
   * instance.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticLoggerListByServiceNextResponse>
   */
  listByServiceNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DiagnosticLoggerListByServiceNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByServiceNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.LoggerCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByServiceNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LoggerCollection>): void;
  listByServiceNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.LoggerCollection>): Promise<Models.DiagnosticLoggerListByServiceNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByServiceNextOperationSpec,
      callback) as Promise<Models.DiagnosticLoggerListByServiceNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/diagnostics/{diagnosticId}/loggers",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.subscriptionId,
    Parameters.diagnosticId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter0,
    Parameters.top,
    Parameters.skip
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LoggerCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const checkEntityExistsOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/diagnostics/{diagnosticId}/loggers/{loggerid}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.diagnosticId,
    Parameters.loggerid,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/diagnostics/{diagnosticId}/loggers/{loggerid}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.diagnosticId,
    Parameters.loggerid,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LoggerContract
    },
    201: {
      bodyMapper: Mappers.LoggerContract
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/diagnostics/{diagnosticId}/loggers/{loggerid}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.diagnosticId,
    Parameters.loggerid,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByServiceNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LoggerCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
