/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/tenantConfigurationMappers";
import * as Parameters from "../models/parameters";
import { ApiManagementClientContext } from "../apiManagementClientContext";

/** Class representing a TenantConfiguration. */
export class TenantConfiguration {
  private readonly client: ApiManagementClientContext;

  /**
   * Create a TenantConfiguration.
   * @param {ApiManagementClientContext} client Reference to the service client.
   */
  constructor(client: ApiManagementClientContext) {
    this.client = client;
  }

  /**
   * This operation applies changes from the specified Git branch to the configuration database. This
   * is a long running operation and could take several minutes to complete.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param parameters Deploy Configuration parameters.
   * @param [options] The optional parameters
   * @returns Promise<Models.TenantConfigurationDeployResponse>
   */
  deploy(resourceGroupName: string, serviceName: string, parameters: Models.DeployConfigurationParameters, options?: msRest.RequestOptionsBase): Promise<Models.TenantConfigurationDeployResponse> {
    return this.beginDeploy(resourceGroupName,serviceName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.TenantConfigurationDeployResponse>;
  }

  /**
   * This operation creates a commit with the current configuration snapshot to the specified branch
   * in the repository. This is a long running operation and could take several minutes to complete.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param parameters Save Configuration parameters.
   * @param [options] The optional parameters
   * @returns Promise<Models.TenantConfigurationSaveResponse>
   */
  save(resourceGroupName: string, serviceName: string, parameters: Models.SaveConfigurationParameter, options?: msRest.RequestOptionsBase): Promise<Models.TenantConfigurationSaveResponse> {
    return this.beginSave(resourceGroupName,serviceName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.TenantConfigurationSaveResponse>;
  }

  /**
   * This operation validates the changes in the specified Git branch. This is a long running
   * operation and could take several minutes to complete.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param parameters Validate Configuration parameters.
   * @param [options] The optional parameters
   * @returns Promise<Models.TenantConfigurationValidateResponse>
   */
  validate(resourceGroupName: string, serviceName: string, parameters: Models.DeployConfigurationParameters, options?: msRest.RequestOptionsBase): Promise<Models.TenantConfigurationValidateResponse> {
    return this.beginValidate(resourceGroupName,serviceName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.TenantConfigurationValidateResponse>;
  }

  /**
   * Gets the status of the most recent synchronization between the configuration database and the
   * Git repository.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param [options] The optional parameters
   * @returns Promise<Models.TenantConfigurationGetSyncStateResponse>
   */
  getSyncState(resourceGroupName: string, serviceName: string, options?: msRest.RequestOptionsBase): Promise<Models.TenantConfigurationGetSyncStateResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param callback The callback
   */
  getSyncState(resourceGroupName: string, serviceName: string, callback: msRest.ServiceCallback<Models.TenantConfigurationSyncStateContract>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSyncState(resourceGroupName: string, serviceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TenantConfigurationSyncStateContract>): void;
  getSyncState(resourceGroupName: string, serviceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TenantConfigurationSyncStateContract>, callback?: msRest.ServiceCallback<Models.TenantConfigurationSyncStateContract>): Promise<Models.TenantConfigurationGetSyncStateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        options
      },
      getSyncStateOperationSpec,
      callback) as Promise<Models.TenantConfigurationGetSyncStateResponse>;
  }

  /**
   * This operation applies changes from the specified Git branch to the configuration database. This
   * is a long running operation and could take several minutes to complete.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param parameters Deploy Configuration parameters.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeploy(resourceGroupName: string, serviceName: string, parameters: Models.DeployConfigurationParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        serviceName,
        parameters,
        options
      },
      beginDeployOperationSpec,
      options);
  }

  /**
   * This operation creates a commit with the current configuration snapshot to the specified branch
   * in the repository. This is a long running operation and could take several minutes to complete.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param parameters Save Configuration parameters.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginSave(resourceGroupName: string, serviceName: string, parameters: Models.SaveConfigurationParameter, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        serviceName,
        parameters,
        options
      },
      beginSaveOperationSpec,
      options);
  }

  /**
   * This operation validates the changes in the specified Git branch. This is a long running
   * operation and could take several minutes to complete.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param parameters Validate Configuration parameters.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginValidate(resourceGroupName: string, serviceName: string, parameters: Models.DeployConfigurationParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        serviceName,
        parameters,
        options
      },
      beginValidateOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getSyncStateOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{configurationName}/syncState",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.subscriptionId,
    Parameters.configurationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TenantConfigurationSyncStateContract
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeployOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{configurationName}/deploy",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.subscriptionId,
    Parameters.configurationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.DeployConfigurationParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationResultContract
    },
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginSaveOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{configurationName}/save",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.subscriptionId,
    Parameters.configurationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.SaveConfigurationParameter,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationResultContract
    },
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginValidateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{configurationName}/validate",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.subscriptionId,
    Parameters.configurationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.DeployConfigurationParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationResultContract
    },
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
