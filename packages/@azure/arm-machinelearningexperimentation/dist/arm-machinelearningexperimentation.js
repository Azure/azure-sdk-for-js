/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmMachinelearningexperimentation = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for ProvisioningState.
     * Possible values include: 'Creating', 'Succeeded', 'Updating', 'Deleting',
     * 'Failed'
     * @readonly
     * @enum {string}
     */
    var ProvisioningState;
    (function (ProvisioningState) {
        ProvisioningState["Creating"] = "Creating";
        ProvisioningState["Succeeded"] = "Succeeded";
        ProvisioningState["Updating"] = "Updating";
        ProvisioningState["Deleting"] = "Deleting";
        ProvisioningState["Failed"] = "Failed";
    })(ProvisioningState || (ProvisioningState = {}));

    var index = /*#__PURE__*/Object.freeze({
        get ProvisioningState () { return ProvisioningState; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var WorkspaceProperties = {
        serializedName: "WorkspaceProperties",
        type: {
            name: "Composite",
            className: "WorkspaceProperties",
            modelProperties: {
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                accountId: {
                    readOnly: true,
                    serializedName: "accountId",
                    type: {
                        name: "String"
                    }
                },
                workspaceId: {
                    readOnly: true,
                    serializedName: "workspaceId",
                    type: {
                        name: "String"
                    }
                },
                friendlyName: {
                    required: true,
                    serializedName: "friendlyName",
                    type: {
                        name: "String"
                    }
                },
                creationDate: {
                    readOnly: true,
                    serializedName: "creationDate",
                    type: {
                        name: "DateTime"
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Creating",
                            "Succeeded",
                            "Updating",
                            "Deleting",
                            "Failed"
                        ]
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var Workspace = {
        serializedName: "Workspace",
        type: {
            name: "Composite",
            className: "Workspace",
            modelProperties: __assign({}, Resource.type.modelProperties, { description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, accountId: {
                    readOnly: true,
                    serializedName: "properties.accountId",
                    type: {
                        name: "String"
                    }
                }, workspaceId: {
                    readOnly: true,
                    serializedName: "properties.workspaceId",
                    type: {
                        name: "String"
                    }
                }, friendlyName: {
                    required: true,
                    serializedName: "properties.friendlyName",
                    type: {
                        name: "String"
                    }
                }, creationDate: {
                    readOnly: true,
                    serializedName: "properties.creationDate",
                    type: {
                        name: "DateTime"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Creating",
                            "Succeeded",
                            "Updating",
                            "Deleting",
                            "Failed"
                        ]
                    }
                } })
        }
    };
    var WorkspacePropertiesUpdateParameters = {
        serializedName: "WorkspacePropertiesUpdateParameters",
        type: {
            name: "Composite",
            className: "WorkspacePropertiesUpdateParameters",
            modelProperties: {
                friendlyName: {
                    serializedName: "friendlyName",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WorkspaceUpdateParameters = {
        serializedName: "WorkspaceUpdateParameters",
        type: {
            name: "Composite",
            className: "WorkspaceUpdateParameters",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                friendlyName: {
                    serializedName: "properties.friendlyName",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProjectProperties = {
        serializedName: "ProjectProperties",
        type: {
            name: "Composite",
            className: "ProjectProperties",
            modelProperties: {
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                accountId: {
                    readOnly: true,
                    serializedName: "accountId",
                    type: {
                        name: "String"
                    }
                },
                workspaceId: {
                    readOnly: true,
                    serializedName: "workspaceId",
                    type: {
                        name: "String"
                    }
                },
                projectId: {
                    readOnly: true,
                    serializedName: "projectId",
                    type: {
                        name: "String"
                    }
                },
                gitrepo: {
                    serializedName: "gitrepo",
                    type: {
                        name: "String"
                    }
                },
                friendlyName: {
                    required: true,
                    serializedName: "friendlyName",
                    type: {
                        name: "String"
                    }
                },
                creationDate: {
                    readOnly: true,
                    serializedName: "creationDate",
                    type: {
                        name: "DateTime"
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Creating",
                            "Succeeded",
                            "Updating",
                            "Deleting",
                            "Failed"
                        ]
                    }
                }
            }
        }
    };
    var Project = {
        serializedName: "Project",
        type: {
            name: "Composite",
            className: "Project",
            modelProperties: __assign({}, Resource.type.modelProperties, { description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, accountId: {
                    readOnly: true,
                    serializedName: "properties.accountId",
                    type: {
                        name: "String"
                    }
                }, workspaceId: {
                    readOnly: true,
                    serializedName: "properties.workspaceId",
                    type: {
                        name: "String"
                    }
                }, projectId: {
                    readOnly: true,
                    serializedName: "properties.projectId",
                    type: {
                        name: "String"
                    }
                }, gitrepo: {
                    serializedName: "properties.gitrepo",
                    type: {
                        name: "String"
                    }
                }, friendlyName: {
                    required: true,
                    serializedName: "properties.friendlyName",
                    type: {
                        name: "String"
                    }
                }, creationDate: {
                    readOnly: true,
                    serializedName: "properties.creationDate",
                    type: {
                        name: "DateTime"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Creating",
                            "Succeeded",
                            "Updating",
                            "Deleting",
                            "Failed"
                        ]
                    }
                } })
        }
    };
    var ProjectPropertiesUpdateParameters = {
        serializedName: "ProjectPropertiesUpdateParameters",
        type: {
            name: "Composite",
            className: "ProjectPropertiesUpdateParameters",
            modelProperties: {
                friendlyName: {
                    serializedName: "friendlyName",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                gitrepo: {
                    serializedName: "gitrepo",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProjectUpdateParameters = {
        serializedName: "ProjectUpdateParameters",
        type: {
            name: "Composite",
            className: "ProjectUpdateParameters",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                friendlyName: {
                    serializedName: "properties.friendlyName",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                },
                gitrepo: {
                    serializedName: "properties.gitrepo",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                code: {
                    required: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    required: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StorageAccountProperties = {
        serializedName: "StorageAccountProperties",
        type: {
            name: "Composite",
            className: "StorageAccountProperties",
            modelProperties: {
                storageAccountId: {
                    required: true,
                    serializedName: "storageAccountId",
                    type: {
                        name: "String"
                    }
                },
                accessKey: {
                    required: true,
                    serializedName: "accessKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AccountProperties = {
        serializedName: "AccountProperties",
        type: {
            name: "Composite",
            className: "AccountProperties",
            modelProperties: {
                vsoAccountId: {
                    required: true,
                    serializedName: "vsoAccountId",
                    type: {
                        name: "String"
                    }
                },
                accountId: {
                    readOnly: true,
                    serializedName: "accountId",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                friendlyName: {
                    serializedName: "friendlyName",
                    type: {
                        name: "String"
                    }
                },
                keyVaultId: {
                    required: true,
                    serializedName: "keyVaultId",
                    type: {
                        name: "String"
                    }
                },
                seats: {
                    serializedName: "seats",
                    type: {
                        name: "String"
                    }
                },
                discoveryUri: {
                    readOnly: true,
                    serializedName: "discoveryUri",
                    type: {
                        name: "String"
                    }
                },
                creationDate: {
                    readOnly: true,
                    serializedName: "creationDate",
                    type: {
                        name: "DateTime"
                    }
                },
                storageAccount: {
                    required: true,
                    serializedName: "storageAccount",
                    type: {
                        name: "Composite",
                        className: "StorageAccountProperties"
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Creating",
                            "Succeeded",
                            "Updating",
                            "Deleting",
                            "Failed"
                        ]
                    }
                }
            }
        }
    };
    var Account = {
        serializedName: "Account",
        type: {
            name: "Composite",
            className: "Account",
            modelProperties: __assign({}, Resource.type.modelProperties, { vsoAccountId: {
                    required: true,
                    serializedName: "properties.vsoAccountId",
                    type: {
                        name: "String"
                    }
                }, accountId: {
                    readOnly: true,
                    serializedName: "properties.accountId",
                    type: {
                        name: "String"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, friendlyName: {
                    serializedName: "properties.friendlyName",
                    type: {
                        name: "String"
                    }
                }, keyVaultId: {
                    required: true,
                    serializedName: "properties.keyVaultId",
                    type: {
                        name: "String"
                    }
                }, seats: {
                    serializedName: "properties.seats",
                    type: {
                        name: "String"
                    }
                }, discoveryUri: {
                    readOnly: true,
                    serializedName: "properties.discoveryUri",
                    type: {
                        name: "String"
                    }
                }, creationDate: {
                    readOnly: true,
                    serializedName: "properties.creationDate",
                    type: {
                        name: "DateTime"
                    }
                }, storageAccount: {
                    required: true,
                    serializedName: "properties.storageAccount",
                    type: {
                        name: "Composite",
                        className: "StorageAccountProperties"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Creating",
                            "Succeeded",
                            "Updating",
                            "Deleting",
                            "Failed"
                        ]
                    }
                } })
        }
    };
    var AccountPropertiesUpdateParameters = {
        serializedName: "AccountPropertiesUpdateParameters",
        type: {
            name: "Composite",
            className: "AccountPropertiesUpdateParameters",
            modelProperties: {
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                friendlyName: {
                    serializedName: "friendlyName",
                    type: {
                        name: "String"
                    }
                },
                seats: {
                    serializedName: "seats",
                    type: {
                        name: "String"
                    }
                },
                storageAccountKey: {
                    serializedName: "storageAccountKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AccountUpdateParameters = {
        serializedName: "AccountUpdateParameters",
        type: {
            name: "Composite",
            className: "AccountUpdateParameters",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                },
                friendlyName: {
                    serializedName: "properties.friendlyName",
                    type: {
                        name: "String"
                    }
                },
                seats: {
                    serializedName: "properties.seats",
                    type: {
                        name: "String"
                    }
                },
                storageAccountKey: {
                    serializedName: "properties.storageAccountKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                }
            }
        }
    };
    var AccountListResult = {
        serializedName: "AccountListResult",
        type: {
            name: "Composite",
            className: "AccountListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Account"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WorkspaceListResult = {
        serializedName: "WorkspaceListResult",
        type: {
            name: "Composite",
            className: "WorkspaceListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Workspace"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProjectListResult = {
        serializedName: "ProjectListResult",
        type: {
            name: "Composite",
            className: "ProjectListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Project"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        WorkspaceProperties: WorkspaceProperties,
        Resource: Resource,
        Workspace: Workspace,
        WorkspacePropertiesUpdateParameters: WorkspacePropertiesUpdateParameters,
        WorkspaceUpdateParameters: WorkspaceUpdateParameters,
        ProjectProperties: ProjectProperties,
        Project: Project,
        ProjectPropertiesUpdateParameters: ProjectPropertiesUpdateParameters,
        ProjectUpdateParameters: ProjectUpdateParameters,
        ErrorResponse: ErrorResponse,
        StorageAccountProperties: StorageAccountProperties,
        AccountProperties: AccountProperties,
        Account: Account,
        AccountPropertiesUpdateParameters: AccountPropertiesUpdateParameters,
        AccountUpdateParameters: AccountUpdateParameters,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        OperationListResult: OperationListResult,
        AccountListResult: AccountListResult,
        WorkspaceListResult: WorkspaceListResult,
        ProjectListResult: ProjectListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        OperationListResult: OperationListResult,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var accountName = {
        parameterPath: "accountName",
        mapper: {
            required: true,
            serializedName: "accountName",
            constraints: {
                MaxLength: 50,
                MinLength: 5,
                Pattern: /^[a-zA-Z0-9]*$/
            },
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var projectName = {
        parameterPath: "projectName",
        mapper: {
            required: true,
            serializedName: "projectName",
            constraints: {
                MaxLength: 50,
                MinLength: 5,
                Pattern: /^[a-zA-Z0-9]*$/
            },
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var workspaceName = {
        parameterPath: "workspaceName",
        mapper: {
            required: true,
            serializedName: "workspaceName",
            constraints: {
                MaxLength: 50,
                MinLength: 5,
                Pattern: /^[a-zA-Z0-9]*$/
            },
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {MLTeamAccountManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.MachineLearningExperimentation/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        Account: Account,
        Resource: Resource,
        BaseResource: BaseResource,
        StorageAccountProperties: StorageAccountProperties,
        ErrorResponse: ErrorResponse,
        AccountUpdateParameters: AccountUpdateParameters,
        AccountListResult: AccountListResult,
        Workspace: Workspace,
        Project: Project
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Accounts. */
    var Accounts = /** @class */ (function () {
        /**
         * Create a Accounts.
         * @param {MLTeamAccountManagementClientContext} client Reference to the service client.
         */
        function Accounts(client) {
            this.client = client;
        }
        Accounts.prototype.get = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        Accounts.prototype.createOrUpdate = function (resourceGroupName$$1, accountName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        Accounts.prototype.deleteMethod = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        Accounts.prototype.update = function (resourceGroupName$$1, accountName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec, callback);
        };
        Accounts.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Accounts.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        Accounts.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        Accounts.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Accounts;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningExperimentation/accounts/{accountName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Account
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningExperimentation/accounts/{accountName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Account, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Account
            },
            201: {
                bodyMapper: Account
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningExperimentation/accounts/{accountName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningExperimentation/accounts/{accountName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, AccountUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Account
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningExperimentation/accounts",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AccountListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.MachineLearningExperimentation/accounts",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AccountListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AccountListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AccountListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        Workspace: Workspace,
        Resource: Resource,
        BaseResource: BaseResource,
        ErrorResponse: ErrorResponse,
        WorkspaceUpdateParameters: WorkspaceUpdateParameters,
        WorkspaceListResult: WorkspaceListResult,
        Project: Project,
        Account: Account,
        StorageAccountProperties: StorageAccountProperties
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Workspaces. */
    var Workspaces = /** @class */ (function () {
        /**
         * Create a Workspaces.
         * @param {MLTeamAccountManagementClientContext} client Reference to the service client.
         */
        function Workspaces(client) {
            this.client = client;
        }
        Workspaces.prototype.get = function (resourceGroupName$$1, accountName$$1, workspaceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                workspaceName: workspaceName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        Workspaces.prototype.createOrUpdate = function (resourceGroupName$$1, accountName$$1, workspaceName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                workspaceName: workspaceName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$1, callback);
        };
        Workspaces.prototype.deleteMethod = function (resourceGroupName$$1, accountName$$1, workspaceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                workspaceName: workspaceName$$1,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        Workspaces.prototype.update = function (resourceGroupName$$1, accountName$$1, workspaceName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                workspaceName: workspaceName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec$1, callback);
        };
        Workspaces.prototype.listByAccounts = function (accountName$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                accountName: accountName$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByAccountsOperationSpec, callback);
        };
        Workspaces.prototype.listByAccountsNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByAccountsNextOperationSpec, callback);
        };
        return Workspaces;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningExperimentation/accounts/{accountName}/workspaces/{workspaceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            workspaceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Workspace
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var createOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningExperimentation/accounts/{accountName}/workspaces/{workspaceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            workspaceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Workspace, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Workspace
            },
            201: {
                bodyMapper: Workspace
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningExperimentation/accounts/{accountName}/workspaces/{workspaceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            workspaceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var updateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningExperimentation/accounts/{accountName}/workspaces/{workspaceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            workspaceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, WorkspaceUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Workspace
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listByAccountsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningExperimentation/accounts/{accountName}/workspaces",
        urlParameters: [
            subscriptionId,
            accountName,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkspaceListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listByAccountsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkspaceListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        Project: Project,
        Resource: Resource,
        BaseResource: BaseResource,
        ErrorResponse: ErrorResponse,
        ProjectUpdateParameters: ProjectUpdateParameters,
        ProjectListResult: ProjectListResult,
        Workspace: Workspace,
        Account: Account,
        StorageAccountProperties: StorageAccountProperties
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Projects. */
    var Projects = /** @class */ (function () {
        /**
         * Create a Projects.
         * @param {MLTeamAccountManagementClientContext} client Reference to the service client.
         */
        function Projects(client) {
            this.client = client;
        }
        Projects.prototype.get = function (resourceGroupName$$1, accountName$$1, workspaceName$$1, projectName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                workspaceName: workspaceName$$1,
                projectName: projectName$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        Projects.prototype.createOrUpdate = function (resourceGroupName$$1, accountName$$1, workspaceName$$1, projectName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                workspaceName: workspaceName$$1,
                projectName: projectName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$2, callback);
        };
        Projects.prototype.deleteMethod = function (resourceGroupName$$1, accountName$$1, workspaceName$$1, projectName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                workspaceName: workspaceName$$1,
                projectName: projectName$$1,
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        Projects.prototype.update = function (resourceGroupName$$1, accountName$$1, workspaceName$$1, projectName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                workspaceName: workspaceName$$1,
                projectName: projectName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec$2, callback);
        };
        Projects.prototype.listByWorkspace = function (accountName$$1, workspaceName$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                accountName: accountName$$1,
                workspaceName: workspaceName$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByWorkspaceOperationSpec, callback);
        };
        Projects.prototype.listByWorkspaceNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByWorkspaceNextOperationSpec, callback);
        };
        return Projects;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningExperimentation/accounts/{accountName}/workspaces/{workspaceName}/projects/{projectName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            workspaceName,
            projectName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Project
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var createOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningExperimentation/accounts/{accountName}/workspaces/{workspaceName}/projects/{projectName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            workspaceName,
            projectName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Project, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Project
            },
            201: {
                bodyMapper: Project
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningExperimentation/accounts/{accountName}/workspaces/{workspaceName}/projects/{projectName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            workspaceName,
            projectName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var updateOperationSpec$2 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningExperimentation/accounts/{accountName}/workspaces/{workspaceName}/projects/{projectName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            workspaceName,
            projectName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ProjectUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Project
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var listByWorkspaceOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningExperimentation/accounts/{accountName}/workspaces{workspaceName}/projects",
        urlParameters: [
            subscriptionId,
            accountName,
            workspaceName,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProjectListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var listByWorkspaceNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProjectListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-machinelearningexperimentation";
    var packageVersion = "1.0.0-preview";
    var MLTeamAccountManagementClientContext = /** @class */ (function (_super) {
        __extends(MLTeamAccountManagementClientContext, _super);
        /**
         * Initializes a new instance of the MLTeamAccountManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The Microsoft Azure subscription ID.
         * @param [options] The parameter options
         */
        function MLTeamAccountManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2017-05-01-preview';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return MLTeamAccountManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var MLTeamAccountManagementClient = /** @class */ (function (_super) {
        __extends(MLTeamAccountManagementClient, _super);
        /**
         * Initializes a new instance of the MLTeamAccountManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The Microsoft Azure subscription ID.
         * @param [options] The parameter options
         */
        function MLTeamAccountManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.operations = new Operations(_this);
            _this.accounts = new Accounts(_this);
            _this.workspaces = new Workspaces(_this);
            _this.projects = new Projects(_this);
            return _this;
        }
        return MLTeamAccountManagementClient;
    }(MLTeamAccountManagementClientContext));

    exports.MLTeamAccountManagementClient = MLTeamAccountManagementClient;
    exports.MLTeamAccountManagementClientContext = MLTeamAccountManagementClientContext;
    exports.MLTeamAccountManagementModels = index;
    exports.MLTeamAccountManagementMappers = mappers;
    exports.Operations = Operations;
    exports.Accounts = Accounts;
    exports.Workspaces = Workspaces;
    exports.Projects = Projects;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-machinelearningexperimentation.js.map
