/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmServicebus = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for SkuName.
     * Possible values include: 'Basic', 'Standard', 'Premium'
     * @readonly
     * @enum {string}
     */
    var SkuName;
    (function (SkuName) {
        SkuName["Basic"] = "Basic";
        SkuName["Standard"] = "Standard";
        SkuName["Premium"] = "Premium";
    })(SkuName || (SkuName = {}));
    /**
     * Defines values for SkuTier.
     * Possible values include: 'Basic', 'Standard', 'Premium'
     * @readonly
     * @enum {string}
     */
    var SkuTier;
    (function (SkuTier) {
        SkuTier["Basic"] = "Basic";
        SkuTier["Standard"] = "Standard";
        SkuTier["Premium"] = "Premium";
    })(SkuTier || (SkuTier = {}));
    /**
     * Defines values for AccessRights.
     * Possible values include: 'Manage', 'Send', 'Listen'
     * @readonly
     * @enum {string}
     */
    var AccessRights;
    (function (AccessRights) {
        AccessRights["Manage"] = "Manage";
        AccessRights["Send"] = "Send";
        AccessRights["Listen"] = "Listen";
    })(AccessRights || (AccessRights = {}));
    /**
     * Defines values for KeyType.
     * Possible values include: 'PrimaryKey', 'SecondaryKey'
     * @readonly
     * @enum {string}
     */
    var KeyType;
    (function (KeyType) {
        KeyType["PrimaryKey"] = "PrimaryKey";
        KeyType["SecondaryKey"] = "SecondaryKey";
    })(KeyType || (KeyType = {}));
    /**
     * Defines values for EntityStatus.
     * Possible values include: 'Active', 'Disabled', 'Restoring', 'SendDisabled',
     * 'ReceiveDisabled', 'Creating', 'Deleting', 'Renaming', 'Unknown'
     * @readonly
     * @enum {string}
     */
    var EntityStatus;
    (function (EntityStatus) {
        EntityStatus["Active"] = "Active";
        EntityStatus["Disabled"] = "Disabled";
        EntityStatus["Restoring"] = "Restoring";
        EntityStatus["SendDisabled"] = "SendDisabled";
        EntityStatus["ReceiveDisabled"] = "ReceiveDisabled";
        EntityStatus["Creating"] = "Creating";
        EntityStatus["Deleting"] = "Deleting";
        EntityStatus["Renaming"] = "Renaming";
        EntityStatus["Unknown"] = "Unknown";
    })(EntityStatus || (EntityStatus = {}));
    /**
     * Defines values for UnavailableReason.
     * Possible values include: 'None', 'InvalidName', 'SubscriptionIsDisabled',
     * 'NameInUse', 'NameInLockdown', 'TooManyNamespaceInCurrentSubscription'
     * @readonly
     * @enum {string}
     */
    var UnavailableReason;
    (function (UnavailableReason) {
        UnavailableReason["None"] = "None";
        UnavailableReason["InvalidName"] = "InvalidName";
        UnavailableReason["SubscriptionIsDisabled"] = "SubscriptionIsDisabled";
        UnavailableReason["NameInUse"] = "NameInUse";
        UnavailableReason["NameInLockdown"] = "NameInLockdown";
        UnavailableReason["TooManyNamespaceInCurrentSubscription"] = "TooManyNamespaceInCurrentSubscription";
    })(UnavailableReason || (UnavailableReason = {}));
    /**
     * Defines values for FilterType.
     * Possible values include: 'SqlFilter', 'CorrelationFilter'
     * @readonly
     * @enum {string}
     */
    var FilterType;
    (function (FilterType) {
        FilterType["SqlFilter"] = "SqlFilter";
        FilterType["CorrelationFilter"] = "CorrelationFilter";
    })(FilterType || (FilterType = {}));
    /**
     * Defines values for EncodingCaptureDescription.
     * Possible values include: 'Avro', 'AvroDeflate'
     * @readonly
     * @enum {string}
     */
    var EncodingCaptureDescription;
    (function (EncodingCaptureDescription) {
        EncodingCaptureDescription["Avro"] = "Avro";
        EncodingCaptureDescription["AvroDeflate"] = "AvroDeflate";
    })(EncodingCaptureDescription || (EncodingCaptureDescription = {}));
    /**
     * Defines values for ProvisioningStateDR.
     * Possible values include: 'Accepted', 'Succeeded', 'Failed'
     * @readonly
     * @enum {string}
     */
    var ProvisioningStateDR;
    (function (ProvisioningStateDR) {
        ProvisioningStateDR["Accepted"] = "Accepted";
        ProvisioningStateDR["Succeeded"] = "Succeeded";
        ProvisioningStateDR["Failed"] = "Failed";
    })(ProvisioningStateDR || (ProvisioningStateDR = {}));
    /**
     * Defines values for RoleDisasterRecovery.
     * Possible values include: 'Primary', 'PrimaryNotReplicating', 'Secondary'
     * @readonly
     * @enum {string}
     */
    var RoleDisasterRecovery;
    (function (RoleDisasterRecovery) {
        RoleDisasterRecovery["Primary"] = "Primary";
        RoleDisasterRecovery["PrimaryNotReplicating"] = "PrimaryNotReplicating";
        RoleDisasterRecovery["Secondary"] = "Secondary";
    })(RoleDisasterRecovery || (RoleDisasterRecovery = {}));
    /**
     * Defines values for IPAction.
     * Possible values include: 'Accept', 'Reject'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: IPAction = <IPAction>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var IPAction;
    (function (IPAction) {
        IPAction["Accept"] = "Accept";
        IPAction["Reject"] = "Reject";
    })(IPAction || (IPAction = {}));

    var index = /*#__PURE__*/Object.freeze({
        get SkuName () { return SkuName; },
        get SkuTier () { return SkuTier; },
        get AccessRights () { return AccessRights; },
        get KeyType () { return KeyType; },
        get EntityStatus () { return EntityStatus; },
        get UnavailableReason () { return UnavailableReason; },
        get FilterType () { return FilterType; },
        get EncodingCaptureDescription () { return EncodingCaptureDescription; },
        get ProvisioningStateDR () { return ProvisioningStateDR; },
        get RoleDisasterRecovery () { return RoleDisasterRecovery; },
        get IPAction () { return IPAction; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TrackedResource = {
        serializedName: "TrackedResource",
        type: {
            name: "Composite",
            className: "TrackedResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var ResourceNamespacePatch = {
        serializedName: "ResourceNamespacePatch",
        type: {
            name: "Composite",
            className: "ResourceNamespacePatch",
            modelProperties: __assign({}, Resource.type.modelProperties, { location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var SBSku = {
        serializedName: "SBSku",
        type: {
            name: "Composite",
            className: "SBSku",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Basic",
                            "Standard",
                            "Premium"
                        ]
                    }
                },
                tier: {
                    serializedName: "tier",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Basic",
                            "Standard",
                            "Premium"
                        ]
                    }
                },
                capacity: {
                    serializedName: "capacity",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var SBNamespace = {
        serializedName: "SBNamespace",
        type: {
            name: "Composite",
            className: "SBNamespace",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "SBSku"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, createdAt: {
                    readOnly: true,
                    serializedName: "properties.createdAt",
                    type: {
                        name: "DateTime"
                    }
                }, updatedAt: {
                    readOnly: true,
                    serializedName: "properties.updatedAt",
                    type: {
                        name: "DateTime"
                    }
                }, serviceBusEndpoint: {
                    readOnly: true,
                    serializedName: "properties.serviceBusEndpoint",
                    type: {
                        name: "String"
                    }
                }, metricId: {
                    readOnly: true,
                    serializedName: "properties.metricId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var SBNamespaceUpdateParameters = {
        serializedName: "SBNamespaceUpdateParameters",
        type: {
            name: "Composite",
            className: "SBNamespaceUpdateParameters",
            modelProperties: __assign({}, ResourceNamespacePatch.type.modelProperties, { sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "SBSku"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, createdAt: {
                    readOnly: true,
                    serializedName: "properties.createdAt",
                    type: {
                        name: "DateTime"
                    }
                }, updatedAt: {
                    readOnly: true,
                    serializedName: "properties.updatedAt",
                    type: {
                        name: "DateTime"
                    }
                }, serviceBusEndpoint: {
                    readOnly: true,
                    serializedName: "properties.serviceBusEndpoint",
                    type: {
                        name: "String"
                    }
                }, metricId: {
                    readOnly: true,
                    serializedName: "properties.metricId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var SBAuthorizationRule = {
        serializedName: "SBAuthorizationRule",
        type: {
            name: "Composite",
            className: "SBAuthorizationRule",
            modelProperties: __assign({}, Resource.type.modelProperties, { rights: {
                    required: true,
                    serializedName: "properties.rights",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Enum",
                                allowedValues: [
                                    "Manage",
                                    "Send",
                                    "Listen"
                                ]
                            }
                        }
                    }
                } })
        }
    };
    var AuthorizationRuleProperties = {
        serializedName: "AuthorizationRuleProperties",
        type: {
            name: "Composite",
            className: "AuthorizationRuleProperties",
            modelProperties: {
                rights: {
                    required: true,
                    serializedName: "rights",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Enum",
                                allowedValues: [
                                    "Manage",
                                    "Send",
                                    "Listen"
                                ]
                            }
                        }
                    }
                }
            }
        }
    };
    var AccessKeys = {
        serializedName: "AccessKeys",
        type: {
            name: "Composite",
            className: "AccessKeys",
            modelProperties: {
                primaryConnectionString: {
                    readOnly: true,
                    serializedName: "primaryConnectionString",
                    type: {
                        name: "String"
                    }
                },
                secondaryConnectionString: {
                    readOnly: true,
                    serializedName: "secondaryConnectionString",
                    type: {
                        name: "String"
                    }
                },
                aliasPrimaryConnectionString: {
                    readOnly: true,
                    serializedName: "aliasPrimaryConnectionString",
                    type: {
                        name: "String"
                    }
                },
                aliasSecondaryConnectionString: {
                    readOnly: true,
                    serializedName: "aliasSecondaryConnectionString",
                    type: {
                        name: "String"
                    }
                },
                primaryKey: {
                    readOnly: true,
                    serializedName: "primaryKey",
                    type: {
                        name: "String"
                    }
                },
                secondaryKey: {
                    readOnly: true,
                    serializedName: "secondaryKey",
                    type: {
                        name: "String"
                    }
                },
                keyName: {
                    readOnly: true,
                    serializedName: "keyName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RegenerateAccessKeyParameters = {
        serializedName: "RegenerateAccessKeyParameters",
        type: {
            name: "Composite",
            className: "RegenerateAccessKeyParameters",
            modelProperties: {
                keyType: {
                    required: true,
                    serializedName: "keyType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "PrimaryKey",
                            "SecondaryKey"
                        ]
                    }
                },
                key: {
                    serializedName: "key",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MessageCountDetails = {
        serializedName: "MessageCountDetails",
        type: {
            name: "Composite",
            className: "MessageCountDetails",
            modelProperties: {
                activeMessageCount: {
                    readOnly: true,
                    serializedName: "activeMessageCount",
                    type: {
                        name: "Number"
                    }
                },
                deadLetterMessageCount: {
                    readOnly: true,
                    serializedName: "deadLetterMessageCount",
                    type: {
                        name: "Number"
                    }
                },
                scheduledMessageCount: {
                    readOnly: true,
                    serializedName: "scheduledMessageCount",
                    type: {
                        name: "Number"
                    }
                },
                transferMessageCount: {
                    readOnly: true,
                    serializedName: "transferMessageCount",
                    type: {
                        name: "Number"
                    }
                },
                transferDeadLetterMessageCount: {
                    readOnly: true,
                    serializedName: "transferDeadLetterMessageCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var SBQueue = {
        serializedName: "SBQueue",
        type: {
            name: "Composite",
            className: "SBQueue",
            modelProperties: __assign({}, Resource.type.modelProperties, { countDetails: {
                    readOnly: true,
                    serializedName: "properties.countDetails",
                    type: {
                        name: "Composite",
                        className: "MessageCountDetails"
                    }
                }, createdAt: {
                    readOnly: true,
                    serializedName: "properties.createdAt",
                    type: {
                        name: "DateTime"
                    }
                }, updatedAt: {
                    readOnly: true,
                    serializedName: "properties.updatedAt",
                    type: {
                        name: "DateTime"
                    }
                }, accessedAt: {
                    readOnly: true,
                    serializedName: "properties.accessedAt",
                    type: {
                        name: "DateTime"
                    }
                }, sizeInBytes: {
                    readOnly: true,
                    serializedName: "properties.sizeInBytes",
                    type: {
                        name: "Number"
                    }
                }, messageCount: {
                    readOnly: true,
                    serializedName: "properties.messageCount",
                    type: {
                        name: "Number"
                    }
                }, lockDuration: {
                    serializedName: "properties.lockDuration",
                    type: {
                        name: "TimeSpan"
                    }
                }, maxSizeInMegabytes: {
                    serializedName: "properties.maxSizeInMegabytes",
                    type: {
                        name: "Number"
                    }
                }, requiresDuplicateDetection: {
                    serializedName: "properties.requiresDuplicateDetection",
                    type: {
                        name: "Boolean"
                    }
                }, requiresSession: {
                    serializedName: "properties.requiresSession",
                    type: {
                        name: "Boolean"
                    }
                }, defaultMessageTimeToLive: {
                    serializedName: "properties.defaultMessageTimeToLive",
                    type: {
                        name: "TimeSpan"
                    }
                }, deadLetteringOnMessageExpiration: {
                    serializedName: "properties.deadLetteringOnMessageExpiration",
                    type: {
                        name: "Boolean"
                    }
                }, duplicateDetectionHistoryTimeWindow: {
                    serializedName: "properties.duplicateDetectionHistoryTimeWindow",
                    type: {
                        name: "TimeSpan"
                    }
                }, maxDeliveryCount: {
                    serializedName: "properties.maxDeliveryCount",
                    type: {
                        name: "Number"
                    }
                }, status: {
                    serializedName: "properties.status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Active",
                            "Disabled",
                            "Restoring",
                            "SendDisabled",
                            "ReceiveDisabled",
                            "Creating",
                            "Deleting",
                            "Renaming",
                            "Unknown"
                        ]
                    }
                }, enableBatchedOperations: {
                    serializedName: "properties.enableBatchedOperations",
                    type: {
                        name: "Boolean"
                    }
                }, autoDeleteOnIdle: {
                    serializedName: "properties.autoDeleteOnIdle",
                    type: {
                        name: "TimeSpan"
                    }
                }, enablePartitioning: {
                    serializedName: "properties.enablePartitioning",
                    type: {
                        name: "Boolean"
                    }
                }, enableExpress: {
                    serializedName: "properties.enableExpress",
                    type: {
                        name: "Boolean"
                    }
                }, forwardTo: {
                    serializedName: "properties.forwardTo",
                    type: {
                        name: "String"
                    }
                }, forwardDeadLetteredMessagesTo: {
                    serializedName: "properties.forwardDeadLetteredMessagesTo",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var SBTopic = {
        serializedName: "SBTopic",
        type: {
            name: "Composite",
            className: "SBTopic",
            modelProperties: __assign({}, Resource.type.modelProperties, { sizeInBytes: {
                    readOnly: true,
                    serializedName: "properties.sizeInBytes",
                    type: {
                        name: "Number"
                    }
                }, createdAt: {
                    readOnly: true,
                    serializedName: "properties.createdAt",
                    type: {
                        name: "DateTime"
                    }
                }, updatedAt: {
                    readOnly: true,
                    serializedName: "properties.updatedAt",
                    type: {
                        name: "DateTime"
                    }
                }, accessedAt: {
                    readOnly: true,
                    serializedName: "properties.accessedAt",
                    type: {
                        name: "DateTime"
                    }
                }, subscriptionCount: {
                    readOnly: true,
                    serializedName: "properties.subscriptionCount",
                    type: {
                        name: "Number"
                    }
                }, countDetails: {
                    readOnly: true,
                    serializedName: "properties.countDetails",
                    type: {
                        name: "Composite",
                        className: "MessageCountDetails"
                    }
                }, defaultMessageTimeToLive: {
                    serializedName: "properties.defaultMessageTimeToLive",
                    type: {
                        name: "TimeSpan"
                    }
                }, maxSizeInMegabytes: {
                    serializedName: "properties.maxSizeInMegabytes",
                    type: {
                        name: "Number"
                    }
                }, requiresDuplicateDetection: {
                    serializedName: "properties.requiresDuplicateDetection",
                    type: {
                        name: "Boolean"
                    }
                }, duplicateDetectionHistoryTimeWindow: {
                    serializedName: "properties.duplicateDetectionHistoryTimeWindow",
                    type: {
                        name: "TimeSpan"
                    }
                }, enableBatchedOperations: {
                    serializedName: "properties.enableBatchedOperations",
                    type: {
                        name: "Boolean"
                    }
                }, status: {
                    serializedName: "properties.status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Active",
                            "Disabled",
                            "Restoring",
                            "SendDisabled",
                            "ReceiveDisabled",
                            "Creating",
                            "Deleting",
                            "Renaming",
                            "Unknown"
                        ]
                    }
                }, supportOrdering: {
                    serializedName: "properties.supportOrdering",
                    type: {
                        name: "Boolean"
                    }
                }, autoDeleteOnIdle: {
                    serializedName: "properties.autoDeleteOnIdle",
                    type: {
                        name: "TimeSpan"
                    }
                }, enablePartitioning: {
                    serializedName: "properties.enablePartitioning",
                    type: {
                        name: "Boolean"
                    }
                }, enableExpress: {
                    serializedName: "properties.enableExpress",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var SBSubscription = {
        serializedName: "SBSubscription",
        type: {
            name: "Composite",
            className: "SBSubscription",
            modelProperties: __assign({}, Resource.type.modelProperties, { messageCount: {
                    readOnly: true,
                    serializedName: "properties.messageCount",
                    type: {
                        name: "Number"
                    }
                }, createdAt: {
                    readOnly: true,
                    serializedName: "properties.createdAt",
                    type: {
                        name: "DateTime"
                    }
                }, accessedAt: {
                    readOnly: true,
                    serializedName: "properties.accessedAt",
                    type: {
                        name: "DateTime"
                    }
                }, updatedAt: {
                    readOnly: true,
                    serializedName: "properties.updatedAt",
                    type: {
                        name: "DateTime"
                    }
                }, countDetails: {
                    readOnly: true,
                    serializedName: "properties.countDetails",
                    type: {
                        name: "Composite",
                        className: "MessageCountDetails"
                    }
                }, lockDuration: {
                    serializedName: "properties.lockDuration",
                    type: {
                        name: "TimeSpan"
                    }
                }, requiresSession: {
                    serializedName: "properties.requiresSession",
                    type: {
                        name: "Boolean"
                    }
                }, defaultMessageTimeToLive: {
                    serializedName: "properties.defaultMessageTimeToLive",
                    type: {
                        name: "TimeSpan"
                    }
                }, deadLetteringOnFilterEvaluationExceptions: {
                    serializedName: "properties.deadLetteringOnFilterEvaluationExceptions",
                    type: {
                        name: "Boolean"
                    }
                }, deadLetteringOnMessageExpiration: {
                    serializedName: "properties.deadLetteringOnMessageExpiration",
                    type: {
                        name: "Boolean"
                    }
                }, duplicateDetectionHistoryTimeWindow: {
                    serializedName: "properties.duplicateDetectionHistoryTimeWindow",
                    type: {
                        name: "TimeSpan"
                    }
                }, maxDeliveryCount: {
                    serializedName: "properties.maxDeliveryCount",
                    type: {
                        name: "Number"
                    }
                }, status: {
                    serializedName: "properties.status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Active",
                            "Disabled",
                            "Restoring",
                            "SendDisabled",
                            "ReceiveDisabled",
                            "Creating",
                            "Deleting",
                            "Renaming",
                            "Unknown"
                        ]
                    }
                }, enableBatchedOperations: {
                    serializedName: "properties.enableBatchedOperations",
                    type: {
                        name: "Boolean"
                    }
                }, autoDeleteOnIdle: {
                    serializedName: "properties.autoDeleteOnIdle",
                    type: {
                        name: "TimeSpan"
                    }
                }, forwardTo: {
                    serializedName: "properties.forwardTo",
                    type: {
                        name: "String"
                    }
                }, forwardDeadLetteredMessagesTo: {
                    serializedName: "properties.forwardDeadLetteredMessagesTo",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var CheckNameAvailability = {
        serializedName: "CheckNameAvailability",
        type: {
            name: "Composite",
            className: "CheckNameAvailability",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CheckNameAvailabilityResult = {
        serializedName: "CheckNameAvailabilityResult",
        type: {
            name: "Composite",
            className: "CheckNameAvailabilityResult",
            modelProperties: {
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                nameAvailable: {
                    serializedName: "nameAvailable",
                    type: {
                        name: "Boolean"
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "InvalidName",
                            "SubscriptionIsDisabled",
                            "NameInUse",
                            "NameInLockdown",
                            "TooManyNamespaceInCurrentSubscription"
                        ]
                    }
                }
            }
        }
    };
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    readOnly: true,
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    readOnly: true,
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    readOnly: true,
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                }
            }
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Action = {
        serializedName: "Action",
        type: {
            name: "Composite",
            className: "Action",
            modelProperties: {
                sqlExpression: {
                    serializedName: "sqlExpression",
                    type: {
                        name: "String"
                    }
                },
                compatibilityLevel: {
                    serializedName: "compatibilityLevel",
                    type: {
                        name: "Number"
                    }
                },
                requiresPreprocessing: {
                    serializedName: "requiresPreprocessing",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var SqlFilter = {
        serializedName: "SqlFilter",
        type: {
            name: "Composite",
            className: "SqlFilter",
            modelProperties: {
                sqlExpression: {
                    serializedName: "sqlExpression",
                    type: {
                        name: "String"
                    }
                },
                compatibilityLevel: {
                    readOnly: true,
                    serializedName: "compatibilityLevel",
                    defaultValue: 20,
                    type: {
                        name: "Number"
                    }
                },
                requiresPreprocessing: {
                    serializedName: "requiresPreprocessing",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var CorrelationFilter = {
        serializedName: "CorrelationFilter",
        type: {
            name: "Composite",
            className: "CorrelationFilter",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                correlationId: {
                    serializedName: "correlationId",
                    type: {
                        name: "String"
                    }
                },
                messageId: {
                    serializedName: "messageId",
                    type: {
                        name: "String"
                    }
                },
                to: {
                    serializedName: "to",
                    type: {
                        name: "String"
                    }
                },
                replyTo: {
                    serializedName: "replyTo",
                    type: {
                        name: "String"
                    }
                },
                label: {
                    serializedName: "label",
                    type: {
                        name: "String"
                    }
                },
                sessionId: {
                    serializedName: "sessionId",
                    type: {
                        name: "String"
                    }
                },
                replyToSessionId: {
                    serializedName: "replyToSessionId",
                    type: {
                        name: "String"
                    }
                },
                contentType: {
                    serializedName: "contentType",
                    type: {
                        name: "String"
                    }
                },
                requiresPreprocessing: {
                    serializedName: "requiresPreprocessing",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var Rule = {
        serializedName: "Rule",
        type: {
            name: "Composite",
            className: "Rule",
            modelProperties: __assign({}, Resource.type.modelProperties, { action: {
                    serializedName: "properties.action",
                    type: {
                        name: "Composite",
                        className: "Action"
                    }
                }, filterType: {
                    serializedName: "properties.filterType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "SqlFilter",
                            "CorrelationFilter"
                        ]
                    }
                }, sqlFilter: {
                    serializedName: "properties.sqlFilter",
                    type: {
                        name: "Composite",
                        className: "SqlFilter"
                    }
                }, correlationFilter: {
                    serializedName: "properties.correlationFilter",
                    type: {
                        name: "Composite",
                        className: "CorrelationFilter"
                    }
                } })
        }
    };
    var SqlRuleAction = {
        serializedName: "SqlRuleAction",
        type: {
            name: "Composite",
            className: "SqlRuleAction",
            modelProperties: __assign({}, Action.type.modelProperties)
        }
    };
    var PremiumMessagingRegionsProperties = {
        serializedName: "PremiumMessagingRegions_properties",
        type: {
            name: "Composite",
            className: "PremiumMessagingRegionsProperties",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                fullName: {
                    readOnly: true,
                    serializedName: "fullName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PremiumMessagingRegions = {
        serializedName: "PremiumMessagingRegions",
        type: {
            name: "Composite",
            className: "PremiumMessagingRegions",
            modelProperties: __assign({}, ResourceNamespacePatch.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "PremiumMessagingRegionsProperties"
                    }
                } })
        }
    };
    var Destination = {
        serializedName: "Destination",
        type: {
            name: "Composite",
            className: "Destination",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                storageAccountResourceId: {
                    serializedName: "properties.storageAccountResourceId",
                    type: {
                        name: "String"
                    }
                },
                blobContainer: {
                    serializedName: "properties.blobContainer",
                    type: {
                        name: "String"
                    }
                },
                archiveNameFormat: {
                    serializedName: "properties.archiveNameFormat",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CaptureDescription = {
        serializedName: "CaptureDescription",
        type: {
            name: "Composite",
            className: "CaptureDescription",
            modelProperties: {
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                encoding: {
                    serializedName: "encoding",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Avro",
                            "AvroDeflate"
                        ]
                    }
                },
                intervalInSeconds: {
                    serializedName: "intervalInSeconds",
                    constraints: {
                        InclusiveMaximum: 900,
                        InclusiveMinimum: 60
                    },
                    type: {
                        name: "Number"
                    }
                },
                sizeLimitInBytes: {
                    serializedName: "sizeLimitInBytes",
                    constraints: {
                        InclusiveMaximum: 524288000,
                        InclusiveMinimum: 10485760
                    },
                    type: {
                        name: "Number"
                    }
                },
                destination: {
                    serializedName: "destination",
                    type: {
                        name: "Composite",
                        className: "Destination"
                    }
                }
            }
        }
    };
    var Eventhub = {
        serializedName: "Eventhub",
        type: {
            name: "Composite",
            className: "Eventhub",
            modelProperties: __assign({}, Resource.type.modelProperties, { partitionIds: {
                    readOnly: true,
                    serializedName: "properties.partitionIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, createdAt: {
                    readOnly: true,
                    serializedName: "properties.createdAt",
                    type: {
                        name: "DateTime"
                    }
                }, updatedAt: {
                    readOnly: true,
                    serializedName: "properties.updatedAt",
                    type: {
                        name: "DateTime"
                    }
                }, messageRetentionInDays: {
                    serializedName: "properties.messageRetentionInDays",
                    constraints: {
                        InclusiveMaximum: 7,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }, partitionCount: {
                    serializedName: "properties.partitionCount",
                    constraints: {
                        InclusiveMaximum: 32,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }, status: {
                    serializedName: "properties.status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Active",
                            "Disabled",
                            "Restoring",
                            "SendDisabled",
                            "ReceiveDisabled",
                            "Creating",
                            "Deleting",
                            "Renaming",
                            "Unknown"
                        ]
                    }
                }, captureDescription: {
                    serializedName: "properties.captureDescription",
                    type: {
                        name: "Composite",
                        className: "CaptureDescription"
                    }
                } })
        }
    };
    var ArmDisasterRecovery = {
        serializedName: "ArmDisasterRecovery",
        type: {
            name: "Composite",
            className: "ArmDisasterRecovery",
            modelProperties: __assign({}, Resource.type.modelProperties, { provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Accepted",
                            "Succeeded",
                            "Failed"
                        ]
                    }
                }, pendingReplicationOperationsCount: {
                    readOnly: true,
                    serializedName: "properties.pendingReplicationOperationsCount",
                    type: {
                        name: "Number"
                    }
                }, partnerNamespace: {
                    serializedName: "properties.partnerNamespace",
                    type: {
                        name: "String"
                    }
                }, alternateName: {
                    serializedName: "properties.alternateName",
                    type: {
                        name: "String"
                    }
                }, role: {
                    readOnly: true,
                    serializedName: "properties.role",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Primary",
                            "PrimaryNotReplicating",
                            "Secondary"
                        ]
                    }
                } })
        }
    };
    var MigrationConfigProperties = {
        serializedName: "MigrationConfigProperties",
        type: {
            name: "Composite",
            className: "MigrationConfigProperties",
            modelProperties: __assign({}, Resource.type.modelProperties, { provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, pendingReplicationOperationsCount: {
                    readOnly: true,
                    serializedName: "properties.pendingReplicationOperationsCount",
                    type: {
                        name: "Number"
                    }
                }, targetNamespace: {
                    required: true,
                    serializedName: "properties.targetNamespace",
                    type: {
                        name: "String"
                    }
                }, postMigrationName: {
                    required: true,
                    serializedName: "properties.postMigrationName",
                    type: {
                        name: "String"
                    }
                }, migrationState: {
                    readOnly: true,
                    serializedName: "properties.migrationState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var IpFilterRule = {
        serializedName: "IpFilterRule",
        type: {
            name: "Composite",
            className: "IpFilterRule",
            modelProperties: __assign({}, Resource.type.modelProperties, { ipMask: {
                    serializedName: "properties.ipMask",
                    type: {
                        name: "String"
                    }
                }, action: {
                    serializedName: "properties.action",
                    type: {
                        name: "String"
                    }
                }, filterName: {
                    serializedName: "properties.filterName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VirtualNetworkRule = {
        serializedName: "VirtualNetworkRule",
        type: {
            name: "Composite",
            className: "VirtualNetworkRule",
            modelProperties: __assign({}, Resource.type.modelProperties, { virtualNetworkSubnetId: {
                    serializedName: "properties.virtualNetworkSubnetId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SBNamespaceListResult = {
        serializedName: "SBNamespaceListResult",
        type: {
            name: "Composite",
            className: "SBNamespaceListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SBNamespace"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SBAuthorizationRuleListResult = {
        serializedName: "SBAuthorizationRuleListResult",
        type: {
            name: "Composite",
            className: "SBAuthorizationRuleListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SBAuthorizationRule"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IpFilterRuleListResult = {
        serializedName: "IpFilterRuleListResult",
        type: {
            name: "Composite",
            className: "IpFilterRuleListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IpFilterRule"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualNetworkRuleListResult = {
        serializedName: "VirtualNetworkRuleListResult",
        type: {
            name: "Composite",
            className: "VirtualNetworkRuleListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualNetworkRule"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ArmDisasterRecoveryListResult = {
        serializedName: "ArmDisasterRecoveryListResult",
        type: {
            name: "Composite",
            className: "ArmDisasterRecoveryListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ArmDisasterRecovery"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MigrationConfigListResult = {
        serializedName: "MigrationConfigListResult",
        type: {
            name: "Composite",
            className: "MigrationConfigListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MigrationConfigProperties"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SBQueueListResult = {
        serializedName: "SBQueueListResult",
        type: {
            name: "Composite",
            className: "SBQueueListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SBQueue"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SBTopicListResult = {
        serializedName: "SBTopicListResult",
        type: {
            name: "Composite",
            className: "SBTopicListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SBTopic"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SBSubscriptionListResult = {
        serializedName: "SBSubscriptionListResult",
        type: {
            name: "Composite",
            className: "SBSubscriptionListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SBSubscription"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RuleListResult = {
        serializedName: "RuleListResult",
        type: {
            name: "Composite",
            className: "RuleListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Rule"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PremiumMessagingRegionsListResult = {
        serializedName: "PremiumMessagingRegionsListResult",
        type: {
            name: "Composite",
            className: "PremiumMessagingRegionsListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PremiumMessagingRegions"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventHubListResult = {
        serializedName: "EventHubListResult",
        type: {
            name: "Composite",
            className: "EventHubListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Eventhub"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        Resource: Resource,
        TrackedResource: TrackedResource,
        ResourceNamespacePatch: ResourceNamespacePatch,
        SBSku: SBSku,
        SBNamespace: SBNamespace,
        SBNamespaceUpdateParameters: SBNamespaceUpdateParameters,
        SBAuthorizationRule: SBAuthorizationRule,
        AuthorizationRuleProperties: AuthorizationRuleProperties,
        AccessKeys: AccessKeys,
        RegenerateAccessKeyParameters: RegenerateAccessKeyParameters,
        MessageCountDetails: MessageCountDetails,
        SBQueue: SBQueue,
        SBTopic: SBTopic,
        SBSubscription: SBSubscription,
        CheckNameAvailability: CheckNameAvailability,
        CheckNameAvailabilityResult: CheckNameAvailabilityResult,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        ErrorResponse: ErrorResponse,
        Action: Action,
        SqlFilter: SqlFilter,
        CorrelationFilter: CorrelationFilter,
        Rule: Rule,
        SqlRuleAction: SqlRuleAction,
        PremiumMessagingRegionsProperties: PremiumMessagingRegionsProperties,
        PremiumMessagingRegions: PremiumMessagingRegions,
        Destination: Destination,
        CaptureDescription: CaptureDescription,
        Eventhub: Eventhub,
        ArmDisasterRecovery: ArmDisasterRecovery,
        MigrationConfigProperties: MigrationConfigProperties,
        IpFilterRule: IpFilterRule,
        VirtualNetworkRule: VirtualNetworkRule,
        OperationListResult: OperationListResult,
        SBNamespaceListResult: SBNamespaceListResult,
        SBAuthorizationRuleListResult: SBAuthorizationRuleListResult,
        IpFilterRuleListResult: IpFilterRuleListResult,
        VirtualNetworkRuleListResult: VirtualNetworkRuleListResult,
        ArmDisasterRecoveryListResult: ArmDisasterRecoveryListResult,
        MigrationConfigListResult: MigrationConfigListResult,
        SBQueueListResult: SBQueueListResult,
        SBTopicListResult: SBTopicListResult,
        SBSubscriptionListResult: SBSubscriptionListResult,
        RuleListResult: RuleListResult,
        PremiumMessagingRegionsListResult: PremiumMessagingRegionsListResult,
        EventHubListResult: EventHubListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        OperationListResult: OperationListResult,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var alias = {
        parameterPath: "alias",
        mapper: {
            required: true,
            serializedName: "alias",
            constraints: {
                MaxLength: 50,
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var authorizationRuleName = {
        parameterPath: "authorizationRuleName",
        mapper: {
            required: true,
            serializedName: "authorizationRuleName",
            constraints: {
                MaxLength: 50,
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var configName = {
        parameterPath: "configName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "configName",
            defaultValue: '$default',
            type: {
                name: "String"
            }
        }
    };
    var ipFilterRuleName = {
        parameterPath: "ipFilterRuleName",
        mapper: {
            required: true,
            serializedName: "ipFilterRuleName",
            constraints: {
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var namespaceName0 = {
        parameterPath: "namespaceName",
        mapper: {
            required: true,
            serializedName: "namespaceName",
            type: {
                name: "String"
            }
        }
    };
    var namespaceName1 = {
        parameterPath: "namespaceName",
        mapper: {
            required: true,
            serializedName: "namespaceName",
            constraints: {
                MaxLength: 50,
                MinLength: 6
            },
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var queueName = {
        parameterPath: "queueName",
        mapper: {
            required: true,
            serializedName: "queueName",
            constraints: {
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            constraints: {
                MaxLength: 90,
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var ruleName = {
        parameterPath: "ruleName",
        mapper: {
            required: true,
            serializedName: "ruleName",
            constraints: {
                MaxLength: 50,
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var skip = {
        parameterPath: [
            "options",
            "skip"
        ],
        mapper: {
            serializedName: "$skip",
            constraints: {
                InclusiveMaximum: 1000,
                InclusiveMinimum: 0
            },
            type: {
                name: "Number"
            }
        }
    };
    var sku = {
        parameterPath: "sku",
        mapper: {
            required: true,
            serializedName: "sku",
            constraints: {
                MaxLength: 50,
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionName = {
        parameterPath: "subscriptionName",
        mapper: {
            required: true,
            serializedName: "subscriptionName",
            constraints: {
                MaxLength: 50,
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var top = {
        parameterPath: [
            "options",
            "top"
        ],
        mapper: {
            serializedName: "$top",
            constraints: {
                InclusiveMaximum: 1000,
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };
    var topicName = {
        parameterPath: "topicName",
        mapper: {
            required: true,
            serializedName: "topicName",
            constraints: {
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var virtualNetworkRuleName = {
        parameterPath: "virtualNetworkRuleName",
        mapper: {
            required: true,
            serializedName: "virtualNetworkRuleName",
            constraints: {
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {ServiceBusManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.ServiceBus/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        CheckNameAvailability: CheckNameAvailability,
        CheckNameAvailabilityResult: CheckNameAvailabilityResult,
        ErrorResponse: ErrorResponse,
        SBNamespaceListResult: SBNamespaceListResult,
        SBNamespace: SBNamespace,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        SBSku: SBSku,
        SBNamespaceUpdateParameters: SBNamespaceUpdateParameters,
        ResourceNamespacePatch: ResourceNamespacePatch,
        SBAuthorizationRuleListResult: SBAuthorizationRuleListResult,
        SBAuthorizationRule: SBAuthorizationRule,
        AccessKeys: AccessKeys,
        RegenerateAccessKeyParameters: RegenerateAccessKeyParameters,
        IpFilterRuleListResult: IpFilterRuleListResult,
        IpFilterRule: IpFilterRule,
        VirtualNetworkRuleListResult: VirtualNetworkRuleListResult,
        VirtualNetworkRule: VirtualNetworkRule,
        SBQueue: SBQueue,
        MessageCountDetails: MessageCountDetails,
        SBTopic: SBTopic,
        SBSubscription: SBSubscription,
        Rule: Rule,
        Action: Action,
        SqlFilter: SqlFilter,
        CorrelationFilter: CorrelationFilter,
        SqlRuleAction: SqlRuleAction,
        PremiumMessagingRegions: PremiumMessagingRegions,
        PremiumMessagingRegionsProperties: PremiumMessagingRegionsProperties,
        Eventhub: Eventhub,
        CaptureDescription: CaptureDescription,
        Destination: Destination,
        ArmDisasterRecovery: ArmDisasterRecovery,
        MigrationConfigProperties: MigrationConfigProperties
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Namespaces. */
    var Namespaces = /** @class */ (function () {
        /**
         * Create a Namespaces.
         * @param {ServiceBusManagementClientContext} client Reference to the service client.
         */
        function Namespaces(client) {
            this.client = client;
        }
        Namespaces.prototype.checkNameAvailabilityMethod = function (parameters, options, callback) {
            return this.client.sendOperationRequest({
                parameters: parameters,
                options: options
            }, checkNameAvailabilityMethodOperationSpec, callback);
        };
        Namespaces.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        Namespaces.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        /**
         * Creates or updates a service namespace. Once created, this namespace's resource manifest is
         * immutable. This operation is idempotent.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param namespaceName The namespace name.
         * @param parameters Parameters supplied to create a namespace resource.
         * @param [options] The optional parameters
         * @returns Promise<Models.NamespacesCreateOrUpdateResponse>
         */
        Namespaces.prototype.createOrUpdate = function (resourceGroupName$$1, namespaceName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, namespaceName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes an existing namespace. This operation also removes all associated resources under the
         * namespace.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param namespaceName The namespace name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Namespaces.prototype.deleteMethod = function (resourceGroupName$$1, namespaceName, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, namespaceName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Namespaces.prototype.get = function (resourceGroupName$$1, namespaceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                options: options
            }, getOperationSpec, callback);
        };
        Namespaces.prototype.update = function (resourceGroupName$$1, namespaceName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                parameters: parameters,
                options: options
            }, updateOperationSpec, callback);
        };
        Namespaces.prototype.listAuthorizationRules = function (resourceGroupName$$1, namespaceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                options: options
            }, listAuthorizationRulesOperationSpec, callback);
        };
        Namespaces.prototype.createOrUpdateAuthorizationRule = function (resourceGroupName$$1, namespaceName, authorizationRuleName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                authorizationRuleName: authorizationRuleName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateAuthorizationRuleOperationSpec, callback);
        };
        Namespaces.prototype.deleteAuthorizationRule = function (resourceGroupName$$1, namespaceName, authorizationRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                authorizationRuleName: authorizationRuleName$$1,
                options: options
            }, deleteAuthorizationRuleOperationSpec, callback);
        };
        Namespaces.prototype.getAuthorizationRule = function (resourceGroupName$$1, namespaceName, authorizationRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                authorizationRuleName: authorizationRuleName$$1,
                options: options
            }, getAuthorizationRuleOperationSpec, callback);
        };
        Namespaces.prototype.listKeys = function (resourceGroupName$$1, namespaceName, authorizationRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                authorizationRuleName: authorizationRuleName$$1,
                options: options
            }, listKeysOperationSpec, callback);
        };
        Namespaces.prototype.regenerateKeys = function (resourceGroupName$$1, namespaceName, authorizationRuleName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                authorizationRuleName: authorizationRuleName$$1,
                parameters: parameters,
                options: options
            }, regenerateKeysOperationSpec, callback);
        };
        Namespaces.prototype.listIpFilterRules = function (resourceGroupName$$1, namespaceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                options: options
            }, listIpFilterRulesOperationSpec, callback);
        };
        Namespaces.prototype.createOrUpdateIpFilterRule = function (resourceGroupName$$1, namespaceName, ipFilterRuleName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                ipFilterRuleName: ipFilterRuleName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateIpFilterRuleOperationSpec, callback);
        };
        Namespaces.prototype.deleteIpFilterRule = function (resourceGroupName$$1, namespaceName, ipFilterRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                ipFilterRuleName: ipFilterRuleName$$1,
                options: options
            }, deleteIpFilterRuleOperationSpec, callback);
        };
        Namespaces.prototype.getIpFilterRule = function (resourceGroupName$$1, namespaceName, ipFilterRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                ipFilterRuleName: ipFilterRuleName$$1,
                options: options
            }, getIpFilterRuleOperationSpec, callback);
        };
        Namespaces.prototype.listVirtualNetworkRules = function (resourceGroupName$$1, namespaceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                options: options
            }, listVirtualNetworkRulesOperationSpec, callback);
        };
        Namespaces.prototype.createOrUpdateVirtualNetworkRule = function (resourceGroupName$$1, namespaceName, virtualNetworkRuleName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                virtualNetworkRuleName: virtualNetworkRuleName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateVirtualNetworkRuleOperationSpec, callback);
        };
        Namespaces.prototype.deleteVirtualNetworkRule = function (resourceGroupName$$1, namespaceName, virtualNetworkRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                virtualNetworkRuleName: virtualNetworkRuleName$$1,
                options: options
            }, deleteVirtualNetworkRuleOperationSpec, callback);
        };
        Namespaces.prototype.getVirtualNetworkRule = function (resourceGroupName$$1, namespaceName, virtualNetworkRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                virtualNetworkRuleName: virtualNetworkRuleName$$1,
                options: options
            }, getVirtualNetworkRuleOperationSpec, callback);
        };
        /**
         * Creates or updates a service namespace. Once created, this namespace's resource manifest is
         * immutable. This operation is idempotent.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param namespaceName The namespace name.
         * @param parameters Parameters supplied to create a namespace resource.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Namespaces.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, namespaceName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * Deletes an existing namespace. This operation also removes all associated resources under the
         * namespace.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param namespaceName The namespace name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Namespaces.prototype.beginDeleteMethod = function (resourceGroupName$$1, namespaceName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        Namespaces.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        Namespaces.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        Namespaces.prototype.listAuthorizationRulesNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listAuthorizationRulesNextOperationSpec, callback);
        };
        Namespaces.prototype.listIpFilterRulesNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listIpFilterRulesNextOperationSpec, callback);
        };
        Namespaces.prototype.listVirtualNetworkRulesNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listVirtualNetworkRulesNextOperationSpec, callback);
        };
        return Namespaces;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var checkNameAvailabilityMethodOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.ServiceBus/CheckNameAvailability",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, CheckNameAvailability, { required: true })
        },
        responses: {
            200: {
                bodyMapper: CheckNameAvailabilityResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.ServiceBus/namespaces",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SBNamespaceListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SBNamespaceListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SBNamespace
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, SBNamespaceUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: SBNamespace
            },
            201: {
                bodyMapper: SBNamespace
            },
            202: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listAuthorizationRulesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/AuthorizationRules",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SBAuthorizationRuleListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var createOrUpdateAuthorizationRuleOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, SBAuthorizationRule, { required: true })
        },
        responses: {
            200: {
                bodyMapper: SBAuthorizationRule
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var deleteAuthorizationRuleOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var getAuthorizationRuleOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SBAuthorizationRule
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}/listKeys",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AccessKeys
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var regenerateKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}/regenerateKeys",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, RegenerateAccessKeyParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AccessKeys
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listIpFilterRulesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/ipfilterrules",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IpFilterRuleListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var createOrUpdateIpFilterRuleOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/ipfilterrules/{ipFilterRuleName}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            ipFilterRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, IpFilterRule, { required: true })
        },
        responses: {
            200: {
                bodyMapper: IpFilterRule
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var deleteIpFilterRuleOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/ipfilterrules/{ipFilterRuleName}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            ipFilterRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var getIpFilterRuleOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/ipfilterrules/{ipFilterRuleName}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            ipFilterRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IpFilterRule
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listVirtualNetworkRulesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/virtualnetworkrules",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkRuleListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var createOrUpdateVirtualNetworkRuleOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/virtualnetworkrules/{virtualNetworkRuleName}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            virtualNetworkRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, VirtualNetworkRule, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualNetworkRule
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var deleteVirtualNetworkRuleOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/virtualnetworkrules/{virtualNetworkRuleName}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            virtualNetworkRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var getVirtualNetworkRuleOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/virtualnetworkrules/{virtualNetworkRuleName}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            virtualNetworkRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkRule
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}",
        urlParameters: [
            resourceGroupName,
            namespaceName0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, SBNamespace, { required: true })
        },
        responses: {
            200: {
                bodyMapper: SBNamespace
            },
            201: {
                bodyMapper: SBNamespace
            },
            202: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SBNamespaceListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SBNamespaceListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listAuthorizationRulesNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SBAuthorizationRuleListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listIpFilterRulesNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IpFilterRuleListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listVirtualNetworkRulesNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkRuleListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        CheckNameAvailability: CheckNameAvailability,
        CheckNameAvailabilityResult: CheckNameAvailabilityResult,
        ErrorResponse: ErrorResponse,
        ArmDisasterRecoveryListResult: ArmDisasterRecoveryListResult,
        ArmDisasterRecovery: ArmDisasterRecovery,
        Resource: Resource,
        BaseResource: BaseResource,
        SBAuthorizationRuleListResult: SBAuthorizationRuleListResult,
        SBAuthorizationRule: SBAuthorizationRule,
        AccessKeys: AccessKeys,
        TrackedResource: TrackedResource,
        ResourceNamespacePatch: ResourceNamespacePatch,
        SBNamespace: SBNamespace,
        SBSku: SBSku,
        SBNamespaceUpdateParameters: SBNamespaceUpdateParameters,
        SBQueue: SBQueue,
        MessageCountDetails: MessageCountDetails,
        SBTopic: SBTopic,
        SBSubscription: SBSubscription,
        Rule: Rule,
        Action: Action,
        SqlFilter: SqlFilter,
        CorrelationFilter: CorrelationFilter,
        SqlRuleAction: SqlRuleAction,
        PremiumMessagingRegions: PremiumMessagingRegions,
        PremiumMessagingRegionsProperties: PremiumMessagingRegionsProperties,
        Eventhub: Eventhub,
        CaptureDescription: CaptureDescription,
        Destination: Destination,
        MigrationConfigProperties: MigrationConfigProperties,
        IpFilterRule: IpFilterRule,
        VirtualNetworkRule: VirtualNetworkRule
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DisasterRecoveryConfigs. */
    var DisasterRecoveryConfigs = /** @class */ (function () {
        /**
         * Create a DisasterRecoveryConfigs.
         * @param {ServiceBusManagementClientContext} client Reference to the service client.
         */
        function DisasterRecoveryConfigs(client) {
            this.client = client;
        }
        DisasterRecoveryConfigs.prototype.checkNameAvailabilityMethod = function (resourceGroupName$$1, namespaceName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                parameters: parameters,
                options: options
            }, checkNameAvailabilityMethodOperationSpec$1, callback);
        };
        DisasterRecoveryConfigs.prototype.list = function (resourceGroupName$$1, namespaceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                options: options
            }, listOperationSpec$2, callback);
        };
        DisasterRecoveryConfigs.prototype.createOrUpdate = function (resourceGroupName$$1, namespaceName, alias$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                alias: alias$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        DisasterRecoveryConfigs.prototype.deleteMethod = function (resourceGroupName$$1, namespaceName, alias$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                alias: alias$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        DisasterRecoveryConfigs.prototype.get = function (resourceGroupName$$1, namespaceName, alias$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                alias: alias$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        DisasterRecoveryConfigs.prototype.breakPairing = function (resourceGroupName$$1, namespaceName, alias$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                alias: alias$$1,
                options: options
            }, breakPairingOperationSpec, callback);
        };
        DisasterRecoveryConfigs.prototype.failOver = function (resourceGroupName$$1, namespaceName, alias$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                alias: alias$$1,
                options: options
            }, failOverOperationSpec, callback);
        };
        DisasterRecoveryConfigs.prototype.listAuthorizationRules = function (resourceGroupName$$1, namespaceName, alias$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                alias: alias$$1,
                options: options
            }, listAuthorizationRulesOperationSpec$1, callback);
        };
        DisasterRecoveryConfigs.prototype.getAuthorizationRule = function (resourceGroupName$$1, namespaceName, alias$$1, authorizationRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                alias: alias$$1,
                authorizationRuleName: authorizationRuleName$$1,
                options: options
            }, getAuthorizationRuleOperationSpec$1, callback);
        };
        DisasterRecoveryConfigs.prototype.listKeys = function (resourceGroupName$$1, namespaceName, alias$$1, authorizationRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                alias: alias$$1,
                authorizationRuleName: authorizationRuleName$$1,
                options: options
            }, listKeysOperationSpec$1, callback);
        };
        DisasterRecoveryConfigs.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        DisasterRecoveryConfigs.prototype.listAuthorizationRulesNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listAuthorizationRulesNextOperationSpec$1, callback);
        };
        return DisasterRecoveryConfigs;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var checkNameAvailabilityMethodOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/CheckNameAvailability",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, CheckNameAvailability, { required: true })
        },
        responses: {
            200: {
                bodyMapper: CheckNameAvailabilityResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ArmDisasterRecoveryListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            alias,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ArmDisasterRecovery, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ArmDisasterRecovery
            },
            201: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            alias,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            alias,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ArmDisasterRecovery
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var breakPairingOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}/breakPairing",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            alias,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var failOverOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}/failover",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            alias,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listAuthorizationRulesOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}/AuthorizationRules",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            alias,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SBAuthorizationRuleListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getAuthorizationRuleOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}/AuthorizationRules/{authorizationRuleName}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            alias,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SBAuthorizationRule
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listKeysOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}/AuthorizationRules/{authorizationRuleName}/listKeys",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            alias,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AccessKeys
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ArmDisasterRecoveryListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listAuthorizationRulesNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SBAuthorizationRuleListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        MigrationConfigListResult: MigrationConfigListResult,
        MigrationConfigProperties: MigrationConfigProperties,
        Resource: Resource,
        BaseResource: BaseResource,
        ErrorResponse: ErrorResponse,
        TrackedResource: TrackedResource,
        ResourceNamespacePatch: ResourceNamespacePatch,
        SBNamespace: SBNamespace,
        SBSku: SBSku,
        SBNamespaceUpdateParameters: SBNamespaceUpdateParameters,
        SBAuthorizationRule: SBAuthorizationRule,
        SBQueue: SBQueue,
        MessageCountDetails: MessageCountDetails,
        SBTopic: SBTopic,
        SBSubscription: SBSubscription,
        Rule: Rule,
        Action: Action,
        SqlFilter: SqlFilter,
        CorrelationFilter: CorrelationFilter,
        SqlRuleAction: SqlRuleAction,
        PremiumMessagingRegions: PremiumMessagingRegions,
        PremiumMessagingRegionsProperties: PremiumMessagingRegionsProperties,
        Eventhub: Eventhub,
        CaptureDescription: CaptureDescription,
        Destination: Destination,
        ArmDisasterRecovery: ArmDisasterRecovery,
        IpFilterRule: IpFilterRule,
        VirtualNetworkRule: VirtualNetworkRule
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a MigrationConfigs. */
    var MigrationConfigs = /** @class */ (function () {
        /**
         * Create a MigrationConfigs.
         * @param {ServiceBusManagementClientContext} client Reference to the service client.
         */
        function MigrationConfigs(client) {
            this.client = client;
        }
        MigrationConfigs.prototype.list = function (resourceGroupName$$1, namespaceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                options: options
            }, listOperationSpec$3, callback);
        };
        /**
         * Creates Migration configuration and starts migration of enties from Standard to Premium
         * namespace
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param namespaceName The namespace name
         * @param parameters Parameters required to create Migration Configuration
         * @param [options] The optional parameters
         * @returns Promise<Models.MigrationConfigsCreateAndStartMigrationResponse>
         */
        MigrationConfigs.prototype.createAndStartMigration = function (resourceGroupName$$1, namespaceName, parameters, options) {
            return this.beginCreateAndStartMigration(resourceGroupName$$1, namespaceName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        MigrationConfigs.prototype.deleteMethod = function (resourceGroupName$$1, namespaceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        MigrationConfigs.prototype.get = function (resourceGroupName$$1, namespaceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                options: options
            }, getOperationSpec$2, callback);
        };
        MigrationConfigs.prototype.completeMigration = function (resourceGroupName$$1, namespaceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                options: options
            }, completeMigrationOperationSpec, callback);
        };
        MigrationConfigs.prototype.revert = function (resourceGroupName$$1, namespaceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                options: options
            }, revertOperationSpec, callback);
        };
        /**
         * Creates Migration configuration and starts migration of enties from Standard to Premium
         * namespace
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param namespaceName The namespace name
         * @param parameters Parameters required to create Migration Configuration
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        MigrationConfigs.prototype.beginCreateAndStartMigration = function (resourceGroupName$$1, namespaceName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                parameters: parameters,
                options: options
            }, beginCreateAndStartMigrationOperationSpec, options);
        };
        MigrationConfigs.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$3, callback);
        };
        return MigrationConfigs;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/migrationConfigurations",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MigrationConfigListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/migrationConfigurations/{configName}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            configName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/migrationConfigurations/{configName}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            configName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MigrationConfigProperties
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var completeMigrationOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/migrationConfigurations/{configName}/upgrade",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            configName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var revertOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/migrationConfigurations/{configName}/revert",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            configName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var beginCreateAndStartMigrationOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/migrationConfigurations/{configName}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            configName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, MigrationConfigProperties, { required: true })
        },
        responses: {
            200: {
                bodyMapper: MigrationConfigProperties
            },
            201: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var listNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MigrationConfigListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        SBQueueListResult: SBQueueListResult,
        SBQueue: SBQueue,
        Resource: Resource,
        BaseResource: BaseResource,
        MessageCountDetails: MessageCountDetails,
        ErrorResponse: ErrorResponse,
        SBAuthorizationRuleListResult: SBAuthorizationRuleListResult,
        SBAuthorizationRule: SBAuthorizationRule,
        AccessKeys: AccessKeys,
        RegenerateAccessKeyParameters: RegenerateAccessKeyParameters,
        TrackedResource: TrackedResource,
        ResourceNamespacePatch: ResourceNamespacePatch,
        SBNamespace: SBNamespace,
        SBSku: SBSku,
        SBNamespaceUpdateParameters: SBNamespaceUpdateParameters,
        SBTopic: SBTopic,
        SBSubscription: SBSubscription,
        Rule: Rule,
        Action: Action,
        SqlFilter: SqlFilter,
        CorrelationFilter: CorrelationFilter,
        SqlRuleAction: SqlRuleAction,
        PremiumMessagingRegions: PremiumMessagingRegions,
        PremiumMessagingRegionsProperties: PremiumMessagingRegionsProperties,
        Eventhub: Eventhub,
        CaptureDescription: CaptureDescription,
        Destination: Destination,
        ArmDisasterRecovery: ArmDisasterRecovery,
        MigrationConfigProperties: MigrationConfigProperties,
        IpFilterRule: IpFilterRule,
        VirtualNetworkRule: VirtualNetworkRule
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Queues. */
    var Queues = /** @class */ (function () {
        /**
         * Create a Queues.
         * @param {ServiceBusManagementClientContext} client Reference to the service client.
         */
        function Queues(client) {
            this.client = client;
        }
        Queues.prototype.listByNamespace = function (resourceGroupName$$1, namespaceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                options: options
            }, listByNamespaceOperationSpec, callback);
        };
        Queues.prototype.createOrUpdate = function (resourceGroupName$$1, namespaceName, queueName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                queueName: queueName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$1, callback);
        };
        Queues.prototype.deleteMethod = function (resourceGroupName$$1, namespaceName, queueName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                queueName: queueName$$1,
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        Queues.prototype.get = function (resourceGroupName$$1, namespaceName, queueName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                queueName: queueName$$1,
                options: options
            }, getOperationSpec$3, callback);
        };
        Queues.prototype.listAuthorizationRules = function (resourceGroupName$$1, namespaceName, queueName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                queueName: queueName$$1,
                options: options
            }, listAuthorizationRulesOperationSpec$2, callback);
        };
        Queues.prototype.createOrUpdateAuthorizationRule = function (resourceGroupName$$1, namespaceName, queueName$$1, authorizationRuleName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                queueName: queueName$$1,
                authorizationRuleName: authorizationRuleName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateAuthorizationRuleOperationSpec$1, callback);
        };
        Queues.prototype.deleteAuthorizationRule = function (resourceGroupName$$1, namespaceName, queueName$$1, authorizationRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                queueName: queueName$$1,
                authorizationRuleName: authorizationRuleName$$1,
                options: options
            }, deleteAuthorizationRuleOperationSpec$1, callback);
        };
        Queues.prototype.getAuthorizationRule = function (resourceGroupName$$1, namespaceName, queueName$$1, authorizationRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                queueName: queueName$$1,
                authorizationRuleName: authorizationRuleName$$1,
                options: options
            }, getAuthorizationRuleOperationSpec$2, callback);
        };
        Queues.prototype.listKeys = function (resourceGroupName$$1, namespaceName, queueName$$1, authorizationRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                queueName: queueName$$1,
                authorizationRuleName: authorizationRuleName$$1,
                options: options
            }, listKeysOperationSpec$2, callback);
        };
        Queues.prototype.regenerateKeys = function (resourceGroupName$$1, namespaceName, queueName$$1, authorizationRuleName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                queueName: queueName$$1,
                authorizationRuleName: authorizationRuleName$$1,
                parameters: parameters,
                options: options
            }, regenerateKeysOperationSpec$1, callback);
        };
        Queues.prototype.listByNamespaceNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByNamespaceNextOperationSpec, callback);
        };
        Queues.prototype.listAuthorizationRulesNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listAuthorizationRulesNextOperationSpec$2, callback);
        };
        return Queues;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var listByNamespaceOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion,
            skip,
            top
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SBQueueListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var createOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            queueName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, SBQueue, { required: true })
        },
        responses: {
            200: {
                bodyMapper: SBQueue
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            queueName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            queueName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SBQueue
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var listAuthorizationRulesOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}/authorizationRules",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            queueName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SBAuthorizationRuleListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var createOrUpdateAuthorizationRuleOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}/authorizationRules/{authorizationRuleName}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            queueName,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, SBAuthorizationRule, { required: true })
        },
        responses: {
            200: {
                bodyMapper: SBAuthorizationRule
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var deleteAuthorizationRuleOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}/authorizationRules/{authorizationRuleName}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            queueName,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var getAuthorizationRuleOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}/authorizationRules/{authorizationRuleName}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            queueName,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SBAuthorizationRule
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var listKeysOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}/authorizationRules/{authorizationRuleName}/ListKeys",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            queueName,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AccessKeys
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var regenerateKeysOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}/authorizationRules/{authorizationRuleName}/regenerateKeys",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            queueName,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, RegenerateAccessKeyParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AccessKeys
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var listByNamespaceNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SBQueueListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var listAuthorizationRulesNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SBAuthorizationRuleListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        SBTopicListResult: SBTopicListResult,
        SBTopic: SBTopic,
        Resource: Resource,
        BaseResource: BaseResource,
        MessageCountDetails: MessageCountDetails,
        ErrorResponse: ErrorResponse,
        SBAuthorizationRuleListResult: SBAuthorizationRuleListResult,
        SBAuthorizationRule: SBAuthorizationRule,
        AccessKeys: AccessKeys,
        RegenerateAccessKeyParameters: RegenerateAccessKeyParameters,
        TrackedResource: TrackedResource,
        ResourceNamespacePatch: ResourceNamespacePatch,
        SBNamespace: SBNamespace,
        SBSku: SBSku,
        SBNamespaceUpdateParameters: SBNamespaceUpdateParameters,
        SBQueue: SBQueue,
        SBSubscription: SBSubscription,
        Rule: Rule,
        Action: Action,
        SqlFilter: SqlFilter,
        CorrelationFilter: CorrelationFilter,
        SqlRuleAction: SqlRuleAction,
        PremiumMessagingRegions: PremiumMessagingRegions,
        PremiumMessagingRegionsProperties: PremiumMessagingRegionsProperties,
        Eventhub: Eventhub,
        CaptureDescription: CaptureDescription,
        Destination: Destination,
        ArmDisasterRecovery: ArmDisasterRecovery,
        MigrationConfigProperties: MigrationConfigProperties,
        IpFilterRule: IpFilterRule,
        VirtualNetworkRule: VirtualNetworkRule
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Topics. */
    var Topics = /** @class */ (function () {
        /**
         * Create a Topics.
         * @param {ServiceBusManagementClientContext} client Reference to the service client.
         */
        function Topics(client) {
            this.client = client;
        }
        Topics.prototype.listByNamespace = function (resourceGroupName$$1, namespaceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                options: options
            }, listByNamespaceOperationSpec$1, callback);
        };
        Topics.prototype.createOrUpdate = function (resourceGroupName$$1, namespaceName, topicName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                topicName: topicName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$2, callback);
        };
        Topics.prototype.deleteMethod = function (resourceGroupName$$1, namespaceName, topicName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                topicName: topicName$$1,
                options: options
            }, deleteMethodOperationSpec$3, callback);
        };
        Topics.prototype.get = function (resourceGroupName$$1, namespaceName, topicName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                topicName: topicName$$1,
                options: options
            }, getOperationSpec$4, callback);
        };
        Topics.prototype.listAuthorizationRules = function (resourceGroupName$$1, namespaceName, topicName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                topicName: topicName$$1,
                options: options
            }, listAuthorizationRulesOperationSpec$3, callback);
        };
        Topics.prototype.createOrUpdateAuthorizationRule = function (resourceGroupName$$1, namespaceName, topicName$$1, authorizationRuleName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                topicName: topicName$$1,
                authorizationRuleName: authorizationRuleName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateAuthorizationRuleOperationSpec$2, callback);
        };
        Topics.prototype.getAuthorizationRule = function (resourceGroupName$$1, namespaceName, topicName$$1, authorizationRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                topicName: topicName$$1,
                authorizationRuleName: authorizationRuleName$$1,
                options: options
            }, getAuthorizationRuleOperationSpec$3, callback);
        };
        Topics.prototype.deleteAuthorizationRule = function (resourceGroupName$$1, namespaceName, topicName$$1, authorizationRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                topicName: topicName$$1,
                authorizationRuleName: authorizationRuleName$$1,
                options: options
            }, deleteAuthorizationRuleOperationSpec$2, callback);
        };
        Topics.prototype.listKeys = function (resourceGroupName$$1, namespaceName, topicName$$1, authorizationRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                topicName: topicName$$1,
                authorizationRuleName: authorizationRuleName$$1,
                options: options
            }, listKeysOperationSpec$3, callback);
        };
        Topics.prototype.regenerateKeys = function (resourceGroupName$$1, namespaceName, topicName$$1, authorizationRuleName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                topicName: topicName$$1,
                authorizationRuleName: authorizationRuleName$$1,
                parameters: parameters,
                options: options
            }, regenerateKeysOperationSpec$2, callback);
        };
        Topics.prototype.listByNamespaceNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByNamespaceNextOperationSpec$1, callback);
        };
        Topics.prototype.listAuthorizationRulesNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listAuthorizationRulesNextOperationSpec$3, callback);
        };
        return Topics;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var listByNamespaceOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion,
            skip,
            top
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SBTopicListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var createOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            topicName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, SBTopic, { required: true })
        },
        responses: {
            200: {
                bodyMapper: SBTopic
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var deleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            topicName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            topicName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SBTopic
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var listAuthorizationRulesOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/authorizationRules",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            topicName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SBAuthorizationRuleListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var createOrUpdateAuthorizationRuleOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/authorizationRules/{authorizationRuleName}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            topicName,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, SBAuthorizationRule, { required: true })
        },
        responses: {
            200: {
                bodyMapper: SBAuthorizationRule
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var getAuthorizationRuleOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/authorizationRules/{authorizationRuleName}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            topicName,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SBAuthorizationRule
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var deleteAuthorizationRuleOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/authorizationRules/{authorizationRuleName}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            topicName,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var listKeysOperationSpec$3 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/authorizationRules/{authorizationRuleName}/ListKeys",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            topicName,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AccessKeys
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var regenerateKeysOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/authorizationRules/{authorizationRuleName}/regenerateKeys",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            topicName,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, RegenerateAccessKeyParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AccessKeys
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var listByNamespaceNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SBTopicListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var listAuthorizationRulesNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SBAuthorizationRuleListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        SBSubscriptionListResult: SBSubscriptionListResult,
        SBSubscription: SBSubscription,
        Resource: Resource,
        BaseResource: BaseResource,
        MessageCountDetails: MessageCountDetails,
        ErrorResponse: ErrorResponse,
        TrackedResource: TrackedResource,
        ResourceNamespacePatch: ResourceNamespacePatch,
        SBNamespace: SBNamespace,
        SBSku: SBSku,
        SBNamespaceUpdateParameters: SBNamespaceUpdateParameters,
        SBAuthorizationRule: SBAuthorizationRule,
        SBQueue: SBQueue,
        SBTopic: SBTopic,
        Rule: Rule,
        Action: Action,
        SqlFilter: SqlFilter,
        CorrelationFilter: CorrelationFilter,
        SqlRuleAction: SqlRuleAction,
        PremiumMessagingRegions: PremiumMessagingRegions,
        PremiumMessagingRegionsProperties: PremiumMessagingRegionsProperties,
        Eventhub: Eventhub,
        CaptureDescription: CaptureDescription,
        Destination: Destination,
        ArmDisasterRecovery: ArmDisasterRecovery,
        MigrationConfigProperties: MigrationConfigProperties,
        IpFilterRule: IpFilterRule,
        VirtualNetworkRule: VirtualNetworkRule
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Subscriptions. */
    var Subscriptions = /** @class */ (function () {
        /**
         * Create a Subscriptions.
         * @param {ServiceBusManagementClientContext} client Reference to the service client.
         */
        function Subscriptions(client) {
            this.client = client;
        }
        Subscriptions.prototype.listByTopic = function (resourceGroupName$$1, namespaceName, topicName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                topicName: topicName$$1,
                options: options
            }, listByTopicOperationSpec, callback);
        };
        Subscriptions.prototype.createOrUpdate = function (resourceGroupName$$1, namespaceName, topicName$$1, subscriptionName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                topicName: topicName$$1,
                subscriptionName: subscriptionName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$3, callback);
        };
        Subscriptions.prototype.deleteMethod = function (resourceGroupName$$1, namespaceName, topicName$$1, subscriptionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                topicName: topicName$$1,
                subscriptionName: subscriptionName$$1,
                options: options
            }, deleteMethodOperationSpec$4, callback);
        };
        Subscriptions.prototype.get = function (resourceGroupName$$1, namespaceName, topicName$$1, subscriptionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                topicName: topicName$$1,
                subscriptionName: subscriptionName$$1,
                options: options
            }, getOperationSpec$5, callback);
        };
        Subscriptions.prototype.listByTopicNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByTopicNextOperationSpec, callback);
        };
        return Subscriptions;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var listByTopicOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            topicName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion,
            skip,
            top
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SBSubscriptionListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };
    var createOrUpdateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions/{subscriptionName}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            topicName,
            subscriptionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, SBSubscription, { required: true })
        },
        responses: {
            200: {
                bodyMapper: SBSubscription
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };
    var deleteMethodOperationSpec$4 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions/{subscriptionName}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            topicName,
            subscriptionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };
    var getOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions/{subscriptionName}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            topicName,
            subscriptionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SBSubscription
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };
    var listByTopicNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SBSubscriptionListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        RuleListResult: RuleListResult,
        Rule: Rule,
        Resource: Resource,
        BaseResource: BaseResource,
        Action: Action,
        SqlFilter: SqlFilter,
        CorrelationFilter: CorrelationFilter,
        ErrorResponse: ErrorResponse,
        TrackedResource: TrackedResource,
        ResourceNamespacePatch: ResourceNamespacePatch,
        SBNamespace: SBNamespace,
        SBSku: SBSku,
        SBNamespaceUpdateParameters: SBNamespaceUpdateParameters,
        SBAuthorizationRule: SBAuthorizationRule,
        SBQueue: SBQueue,
        MessageCountDetails: MessageCountDetails,
        SBTopic: SBTopic,
        SBSubscription: SBSubscription,
        SqlRuleAction: SqlRuleAction,
        PremiumMessagingRegions: PremiumMessagingRegions,
        PremiumMessagingRegionsProperties: PremiumMessagingRegionsProperties,
        Eventhub: Eventhub,
        CaptureDescription: CaptureDescription,
        Destination: Destination,
        ArmDisasterRecovery: ArmDisasterRecovery,
        MigrationConfigProperties: MigrationConfigProperties,
        IpFilterRule: IpFilterRule,
        VirtualNetworkRule: VirtualNetworkRule
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Rules. */
    var Rules = /** @class */ (function () {
        /**
         * Create a Rules.
         * @param {ServiceBusManagementClientContext} client Reference to the service client.
         */
        function Rules(client) {
            this.client = client;
        }
        Rules.prototype.listBySubscriptions = function (resourceGroupName$$1, namespaceName, topicName$$1, subscriptionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                topicName: topicName$$1,
                subscriptionName: subscriptionName$$1,
                options: options
            }, listBySubscriptionsOperationSpec, callback);
        };
        Rules.prototype.createOrUpdate = function (resourceGroupName$$1, namespaceName, topicName$$1, subscriptionName$$1, ruleName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                topicName: topicName$$1,
                subscriptionName: subscriptionName$$1,
                ruleName: ruleName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$4, callback);
        };
        Rules.prototype.deleteMethod = function (resourceGroupName$$1, namespaceName, topicName$$1, subscriptionName$$1, ruleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                topicName: topicName$$1,
                subscriptionName: subscriptionName$$1,
                ruleName: ruleName$$1,
                options: options
            }, deleteMethodOperationSpec$5, callback);
        };
        Rules.prototype.get = function (resourceGroupName$$1, namespaceName, topicName$$1, subscriptionName$$1, ruleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                topicName: topicName$$1,
                subscriptionName: subscriptionName$$1,
                ruleName: ruleName$$1,
                options: options
            }, getOperationSpec$6, callback);
        };
        Rules.prototype.listBySubscriptionsNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listBySubscriptionsNextOperationSpec, callback);
        };
        return Rules;
    }());
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers$7);
    var listBySubscriptionsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions/{subscriptionName}/rules",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            topicName,
            subscriptionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion,
            skip,
            top
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RuleListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };
    var createOrUpdateOperationSpec$4 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions/{subscriptionName}/rules/{ruleName}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            topicName,
            subscriptionName,
            ruleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Rule, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Rule
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };
    var deleteMethodOperationSpec$5 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions/{subscriptionName}/rules/{ruleName}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            topicName,
            subscriptionName,
            ruleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };
    var getOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions/{subscriptionName}/rules/{ruleName}",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            topicName,
            subscriptionName,
            ruleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Rule
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };
    var listBySubscriptionsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RuleListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$8 = /*#__PURE__*/Object.freeze({
        PremiumMessagingRegionsListResult: PremiumMessagingRegionsListResult,
        PremiumMessagingRegions: PremiumMessagingRegions,
        ResourceNamespacePatch: ResourceNamespacePatch,
        Resource: Resource,
        BaseResource: BaseResource,
        PremiumMessagingRegionsProperties: PremiumMessagingRegionsProperties,
        ErrorResponse: ErrorResponse,
        TrackedResource: TrackedResource,
        SBNamespace: SBNamespace,
        SBSku: SBSku,
        SBNamespaceUpdateParameters: SBNamespaceUpdateParameters,
        SBAuthorizationRule: SBAuthorizationRule,
        SBQueue: SBQueue,
        MessageCountDetails: MessageCountDetails,
        SBTopic: SBTopic,
        SBSubscription: SBSubscription,
        Rule: Rule,
        Action: Action,
        SqlFilter: SqlFilter,
        CorrelationFilter: CorrelationFilter,
        SqlRuleAction: SqlRuleAction,
        Eventhub: Eventhub,
        CaptureDescription: CaptureDescription,
        Destination: Destination,
        ArmDisasterRecovery: ArmDisasterRecovery,
        MigrationConfigProperties: MigrationConfigProperties,
        IpFilterRule: IpFilterRule,
        VirtualNetworkRule: VirtualNetworkRule
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Regions. */
    var Regions = /** @class */ (function () {
        /**
         * Create a Regions.
         * @param {ServiceBusManagementClientContext} client Reference to the service client.
         */
        function Regions(client) {
            this.client = client;
        }
        Regions.prototype.listBySku = function (sku$$1, options, callback) {
            return this.client.sendOperationRequest({
                sku: sku$$1,
                options: options
            }, listBySkuOperationSpec, callback);
        };
        Regions.prototype.listBySkuNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listBySkuNextOperationSpec, callback);
        };
        return Regions;
    }());
    // Operation Specifications
    var serializer$8 = new msRest.Serializer(Mappers$8);
    var listBySkuOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.ServiceBus/sku/{sku}/regions",
        urlParameters: [
            subscriptionId,
            sku
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PremiumMessagingRegionsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$8
    };
    var listBySkuNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PremiumMessagingRegionsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$8
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$9 = /*#__PURE__*/Object.freeze({
        PremiumMessagingRegionsListResult: PremiumMessagingRegionsListResult,
        PremiumMessagingRegions: PremiumMessagingRegions,
        ResourceNamespacePatch: ResourceNamespacePatch,
        Resource: Resource,
        BaseResource: BaseResource,
        PremiumMessagingRegionsProperties: PremiumMessagingRegionsProperties,
        ErrorResponse: ErrorResponse,
        TrackedResource: TrackedResource,
        SBNamespace: SBNamespace,
        SBSku: SBSku,
        SBNamespaceUpdateParameters: SBNamespaceUpdateParameters,
        SBAuthorizationRule: SBAuthorizationRule,
        SBQueue: SBQueue,
        MessageCountDetails: MessageCountDetails,
        SBTopic: SBTopic,
        SBSubscription: SBSubscription,
        Rule: Rule,
        Action: Action,
        SqlFilter: SqlFilter,
        CorrelationFilter: CorrelationFilter,
        SqlRuleAction: SqlRuleAction,
        Eventhub: Eventhub,
        CaptureDescription: CaptureDescription,
        Destination: Destination,
        ArmDisasterRecovery: ArmDisasterRecovery,
        MigrationConfigProperties: MigrationConfigProperties,
        IpFilterRule: IpFilterRule,
        VirtualNetworkRule: VirtualNetworkRule
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a PremiumMessagingRegionsOperations. */
    var PremiumMessagingRegionsOperations = /** @class */ (function () {
        /**
         * Create a PremiumMessagingRegionsOperations.
         * @param {ServiceBusManagementClientContext} client Reference to the service client.
         */
        function PremiumMessagingRegionsOperations(client) {
            this.client = client;
        }
        PremiumMessagingRegionsOperations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$4, callback);
        };
        PremiumMessagingRegionsOperations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$4, callback);
        };
        return PremiumMessagingRegionsOperations;
    }());
    // Operation Specifications
    var serializer$9 = new msRest.Serializer(Mappers$9);
    var listOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.ServiceBus/premiumMessagingRegions",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PremiumMessagingRegionsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$9
    };
    var listNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PremiumMessagingRegionsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$9
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$a = /*#__PURE__*/Object.freeze({
        EventHubListResult: EventHubListResult,
        Eventhub: Eventhub,
        Resource: Resource,
        BaseResource: BaseResource,
        CaptureDescription: CaptureDescription,
        Destination: Destination,
        ErrorResponse: ErrorResponse,
        TrackedResource: TrackedResource,
        ResourceNamespacePatch: ResourceNamespacePatch,
        SBNamespace: SBNamespace,
        SBSku: SBSku,
        SBNamespaceUpdateParameters: SBNamespaceUpdateParameters,
        SBAuthorizationRule: SBAuthorizationRule,
        SBQueue: SBQueue,
        MessageCountDetails: MessageCountDetails,
        SBTopic: SBTopic,
        SBSubscription: SBSubscription,
        Rule: Rule,
        Action: Action,
        SqlFilter: SqlFilter,
        CorrelationFilter: CorrelationFilter,
        SqlRuleAction: SqlRuleAction,
        PremiumMessagingRegions: PremiumMessagingRegions,
        PremiumMessagingRegionsProperties: PremiumMessagingRegionsProperties,
        ArmDisasterRecovery: ArmDisasterRecovery,
        MigrationConfigProperties: MigrationConfigProperties,
        IpFilterRule: IpFilterRule,
        VirtualNetworkRule: VirtualNetworkRule
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a EventHubs. */
    var EventHubs = /** @class */ (function () {
        /**
         * Create a EventHubs.
         * @param {ServiceBusManagementClientContext} client Reference to the service client.
         */
        function EventHubs(client) {
            this.client = client;
        }
        EventHubs.prototype.listByNamespace = function (resourceGroupName$$1, namespaceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName,
                options: options
            }, listByNamespaceOperationSpec$2, callback);
        };
        EventHubs.prototype.listByNamespaceNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByNamespaceNextOperationSpec$2, callback);
        };
        return EventHubs;
    }());
    // Operation Specifications
    var serializer$a = new msRest.Serializer(Mappers$a);
    var listByNamespaceOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/eventhubs",
        urlParameters: [
            resourceGroupName,
            namespaceName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EventHubListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listByNamespaceNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EventHubListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$a
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-servicebus";
    var packageVersion = "1.0.0";
    var ServiceBusManagementClientContext = /** @class */ (function (_super) {
        __extends(ServiceBusManagementClientContext, _super);
        /**
         * Initializes a new instance of the ServiceBusManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function ServiceBusManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2017-04-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return ServiceBusManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var ServiceBusManagementClient = /** @class */ (function (_super) {
        __extends(ServiceBusManagementClient, _super);
        /**
         * Initializes a new instance of the ServiceBusManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function ServiceBusManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.operations = new Operations(_this);
            _this.namespaces = new Namespaces(_this);
            _this.disasterRecoveryConfigs = new DisasterRecoveryConfigs(_this);
            _this.migrationConfigs = new MigrationConfigs(_this);
            _this.queues = new Queues(_this);
            _this.topics = new Topics(_this);
            _this.subscriptions = new Subscriptions(_this);
            _this.rules = new Rules(_this);
            _this.regions = new Regions(_this);
            _this.premiumMessagingRegions = new PremiumMessagingRegionsOperations(_this);
            _this.eventHubs = new EventHubs(_this);
            return _this;
        }
        return ServiceBusManagementClient;
    }(ServiceBusManagementClientContext));

    exports.ServiceBusManagementClient = ServiceBusManagementClient;
    exports.ServiceBusManagementClientContext = ServiceBusManagementClientContext;
    exports.ServiceBusManagementModels = index;
    exports.ServiceBusManagementMappers = mappers;
    exports.Operations = Operations;
    exports.Namespaces = Namespaces;
    exports.DisasterRecoveryConfigs = DisasterRecoveryConfigs;
    exports.MigrationConfigs = MigrationConfigs;
    exports.Queues = Queues;
    exports.Topics = Topics;
    exports.Subscriptions = Subscriptions;
    exports.Rules = Rules;
    exports.Regions = Regions;
    exports.PremiumMessagingRegionsOperations = PremiumMessagingRegionsOperations;
    exports.EventHubs = EventHubs;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-servicebus.js.map
