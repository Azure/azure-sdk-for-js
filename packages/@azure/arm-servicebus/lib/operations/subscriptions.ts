/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/subscriptionsMappers";
import * as Parameters from "../models/parameters";
import { ServiceBusManagementClientContext } from "../serviceBusManagementClientContext";

/** Class representing a Subscriptions. */
export class Subscriptions {
  private readonly client: ServiceBusManagementClientContext;

  /**
   * Create a Subscriptions.
   * @param {ServiceBusManagementClientContext} client Reference to the service client.
   */
  constructor(client: ServiceBusManagementClientContext) {
    this.client = client;
  }

  /**
   * List all the subscriptions under a specified topic.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param topicName The topic name.
   * @param [options] The optional parameters
   * @returns Promise<Models.SubscriptionsListByTopicResponse>
   */
  listByTopic(resourceGroupName: string, namespaceName: string, topicName: string, options?: Models.SubscriptionsListByTopicOptionalParams): Promise<Models.SubscriptionsListByTopicResponse>;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param topicName The topic name.
   * @param callback The callback
   */
  listByTopic(resourceGroupName: string, namespaceName: string, topicName: string, callback: msRest.ServiceCallback<Models.SBSubscriptionListResult>): void;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param topicName The topic name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByTopic(resourceGroupName: string, namespaceName: string, topicName: string, options: Models.SubscriptionsListByTopicOptionalParams, callback: msRest.ServiceCallback<Models.SBSubscriptionListResult>): void;
  listByTopic(resourceGroupName: string, namespaceName: string, topicName: string, options?: Models.SubscriptionsListByTopicOptionalParams | msRest.ServiceCallback<Models.SBSubscriptionListResult>, callback?: msRest.ServiceCallback<Models.SBSubscriptionListResult>): Promise<Models.SubscriptionsListByTopicResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        topicName,
        options
      },
      listByTopicOperationSpec,
      callback) as Promise<Models.SubscriptionsListByTopicResponse>;
  }

  /**
   * Creates a topic subscription.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param topicName The topic name.
   * @param subscriptionName The subscription name.
   * @param parameters Parameters supplied to create a subscription resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.SubscriptionsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, parameters: Models.SBSubscription, options?: msRest.RequestOptionsBase): Promise<Models.SubscriptionsCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param topicName The topic name.
   * @param subscriptionName The subscription name.
   * @param parameters Parameters supplied to create a subscription resource.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, parameters: Models.SBSubscription, callback: msRest.ServiceCallback<Models.SBSubscription>): void;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param topicName The topic name.
   * @param subscriptionName The subscription name.
   * @param parameters Parameters supplied to create a subscription resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, parameters: Models.SBSubscription, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SBSubscription>): void;
  createOrUpdate(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, parameters: Models.SBSubscription, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SBSubscription>, callback?: msRest.ServiceCallback<Models.SBSubscription>): Promise<Models.SubscriptionsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        topicName,
        subscriptionName,
        parameters,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.SubscriptionsCreateOrUpdateResponse>;
  }

  /**
   * Deletes a subscription from the specified topic.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param topicName The topic name.
   * @param subscriptionName The subscription name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param topicName The topic name.
   * @param subscriptionName The subscription name.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param topicName The topic name.
   * @param subscriptionName The subscription name.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        topicName,
        subscriptionName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Returns a subscription description for the specified topic.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param topicName The topic name.
   * @param subscriptionName The subscription name.
   * @param [options] The optional parameters
   * @returns Promise<Models.SubscriptionsGetResponse>
   */
  get(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, options?: msRest.RequestOptionsBase): Promise<Models.SubscriptionsGetResponse>;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param topicName The topic name.
   * @param subscriptionName The subscription name.
   * @param callback The callback
   */
  get(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, callback: msRest.ServiceCallback<Models.SBSubscription>): void;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param namespaceName The namespace name
   * @param topicName The topic name.
   * @param subscriptionName The subscription name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SBSubscription>): void;
  get(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SBSubscription>, callback?: msRest.ServiceCallback<Models.SBSubscription>): Promise<Models.SubscriptionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        topicName,
        subscriptionName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.SubscriptionsGetResponse>;
  }

  /**
   * List all the subscriptions under a specified topic.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SubscriptionsListByTopicNextResponse>
   */
  listByTopicNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SubscriptionsListByTopicNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByTopicNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SBSubscriptionListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByTopicNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SBSubscriptionListResult>): void;
  listByTopicNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SBSubscriptionListResult>, callback?: msRest.ServiceCallback<Models.SBSubscriptionListResult>): Promise<Models.SubscriptionsListByTopicNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByTopicNextOperationSpec,
      callback) as Promise<Models.SubscriptionsListByTopicNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByTopicOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.namespaceName1,
    Parameters.topicName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skip,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SBSubscriptionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions/{subscriptionName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.namespaceName1,
    Parameters.topicName,
    Parameters.subscriptionName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.SBSubscription,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SBSubscription
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions/{subscriptionName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.namespaceName1,
    Parameters.topicName,
    Parameters.subscriptionName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions/{subscriptionName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.namespaceName1,
    Parameters.topicName,
    Parameters.subscriptionName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SBSubscription
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByTopicNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SBSubscriptionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
