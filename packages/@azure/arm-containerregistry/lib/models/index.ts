/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };


/**
 * @interface
 * An interface representing ImportSourceCredentials.
 */
export interface ImportSourceCredentials {
  /**
   * @member {string} [username] The username to authenticate with the source
   * registry.
   */
  username?: string;
  /**
   * @member {string} password The password used to authenticate with the
   * source registry.
   */
  password: string;
}

/**
 * @interface
 * An interface representing ImportSource.
 */
export interface ImportSource {
  /**
   * @member {string} [resourceId] The resource identifier of the source Azure
   * Container Registry.
   */
  resourceId?: string;
  /**
   * @member {string} [registryUri] The address of the source registry (e.g.
   * 'mcr.microsoft.com').
   */
  registryUri?: string;
  /**
   * @member {ImportSourceCredentials} [credentials] Credentials used when
   * importing from a registry uri.
   */
  credentials?: ImportSourceCredentials;
  /**
   * @member {string} sourceImage Repository name of the source image.
   * Specify an image by repository ('hello-world'). This will use the 'latest'
   * tag.
   * Specify an image by tag ('hello-world:latest').
   * Specify an image by sha256-based manifest digest
   * ('hello-world@sha256:abc123').
   */
  sourceImage: string;
}

/**
 * @interface
 * An interface representing ImportImageParameters.
 */
export interface ImportImageParameters {
  /**
   * @member {ImportSource} source The source of the image.
   */
  source: ImportSource;
  /**
   * @member {string[]} [targetTags] List of strings of the form repo[:tag].
   * When tag is omitted the source will be used (or 'latest' if source tag is
   * also omitted).
   */
  targetTags?: string[];
  /**
   * @member {string[]} [untaggedTargetRepositories] List of strings of
   * repository names to do a manifest only copy. No tag will be created.
   */
  untaggedTargetRepositories?: string[];
  /**
   * @member {ImportMode} [mode] When Force, any existing target tags will be
   * overwritten. When NoForce, any existing target tags will fail the
   * operation before any copying begins. Possible values include: 'NoForce',
   * 'Force'. Default value: 'NoForce' .
   */
  mode?: ImportMode;
}

/**
 * @interface
 * An interface representing RegistryNameCheckRequest.
 * A request to check whether a container registry name is available.
 *
 */
export interface RegistryNameCheckRequest {
  /**
   * @member {string} name The name of the container registry.
   */
  name: string;
}

/**
 * @interface
 * An interface representing RegistryNameStatus.
 * The result of a request to check the availability of a container registry
 * name.
 *
 */
export interface RegistryNameStatus {
  /**
   * @member {boolean} [nameAvailable] The value that indicates whether the
   * name is available.
   */
  nameAvailable?: boolean;
  /**
   * @member {string} [reason] If any, the reason that the name is not
   * available.
   */
  reason?: string;
  /**
   * @member {string} [message] If any, the error message that provides more
   * detail for the reason that the name is not available.
   */
  message?: string;
}

/**
 * @interface
 * An interface representing OperationDisplayDefinition.
 * The display information for a container registry operation.
 *
 */
export interface OperationDisplayDefinition {
  /**
   * @member {string} [provider] The resource provider name:
   * Microsoft.ContainerRegistry.
   */
  provider?: string;
  /**
   * @member {string} [resource] The resource on which the operation is
   * performed.
   */
  resource?: string;
  /**
   * @member {string} [operation] The operation that users can perform.
   */
  operation?: string;
  /**
   * @member {string} [description] The description for the operation.
   */
  description?: string;
}

/**
 * @interface
 * An interface representing OperationMetricSpecificationDefinition.
 * The definition of Azure Monitoring metric.
 *
 */
export interface OperationMetricSpecificationDefinition {
  /**
   * @member {string} [name] Metric name.
   */
  name?: string;
  /**
   * @member {string} [displayName] Metric display name.
   */
  displayName?: string;
  /**
   * @member {string} [displayDescription] Metric description.
   */
  displayDescription?: string;
  /**
   * @member {string} [unit] Metric unit.
   */
  unit?: string;
  /**
   * @member {string} [aggregationType] Metric aggregation type.
   */
  aggregationType?: string;
  /**
   * @member {string} [internalMetricName] Internal metric name.
   */
  internalMetricName?: string;
}

/**
 * @interface
 * An interface representing OperationServiceSpecificationDefinition.
 * The definition of Azure Monitoring metrics list.
 *
 */
export interface OperationServiceSpecificationDefinition {
  /**
   * @member {OperationMetricSpecificationDefinition[]} [metricSpecifications]
   * A list of Azure Monitoring metrics definition.
   */
  metricSpecifications?: OperationMetricSpecificationDefinition[];
}

/**
 * @interface
 * An interface representing OperationDefinition.
 * The definition of a container registry operation.
 *
 */
export interface OperationDefinition {
  /**
   * @member {string} [origin] The origin information of the container registry
   * operation.
   */
  origin?: string;
  /**
   * @member {string} [name] Operation name: {provider}/{resource}/{operation}.
   */
  name?: string;
  /**
   * @member {OperationDisplayDefinition} [display] The display information for
   * the container registry operation.
   */
  display?: OperationDisplayDefinition;
  /**
   * @member {OperationServiceSpecificationDefinition} [serviceSpecification]
   * The definition of Azure Monitoring service.
   */
  serviceSpecification?: OperationServiceSpecificationDefinition;
}

/**
 * @interface
 * An interface representing Sku.
 * The SKU of a container registry.
 *
 */
export interface Sku {
  /**
   * @member {SkuName} name The SKU name of the container registry. Required
   * for registry creation. Possible values include: 'Classic', 'Basic',
   * 'Standard', 'Premium'
   */
  name: SkuName;
  /**
   * @member {SkuTier} [tier] The SKU tier based on the SKU name. Possible
   * values include: 'Classic', 'Basic', 'Standard', 'Premium'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tier?: SkuTier;
}

/**
 * @interface
 * An interface representing Status.
 * The status of an Azure resource at the time the operation was called.
 *
 */
export interface Status {
  /**
   * @member {string} [displayStatus] The short label for the status.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly displayStatus?: string;
  /**
   * @member {string} [message] The detailed message for the status, including
   * alerts and error messages.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly message?: string;
  /**
   * @member {Date} [timestamp] The timestamp when the status was changed to
   * the current value.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly timestamp?: Date;
}

/**
 * @interface
 * An interface representing StorageAccountProperties.
 * The properties of a storage account for a container registry. Only
 * applicable to Classic SKU.
 *
 */
export interface StorageAccountProperties {
  /**
   * @member {string} id The resource ID of the storage account.
   */
  id: string;
}

/**
 * @interface
 * An interface representing VirtualNetworkRule.
 * The virtual network rule for a container registry.
 *
 */
export interface VirtualNetworkRule {
  /**
   * @member {string} id Resource ID of a subnet, for example:
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
   */
  id: string;
}

/**
 * @interface
 * An interface representing NetworkRuleSet.
 * The network rule set for a container registry.
 *
 */
export interface NetworkRuleSet {
  /**
   * @member {DefaultAction} defaultAction The default action of allow or deny
   * when no other rules match. Possible values include: 'Allow', 'Deny'.
   * Default value: 'Allow' .
   */
  defaultAction: DefaultAction;
  /**
   * @member {VirtualNetworkRule[]} [virtualNetworkRules] The virtual network
   * rules.
   */
  virtualNetworkRules?: VirtualNetworkRule[];
}

/**
 * @interface
 * An interface representing Resource.
 * An Azure resource.
 *
 * @extends BaseResource
 */
export interface Resource extends BaseResource {
  /**
   * @member {string} [id] The resource ID.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] The name of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [type] The type of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} location The location of the resource. This cannot be
   * changed after the resource is created.
   */
  location: string;
  /**
   * @member {{ [propertyName: string]: string }} [tags] The tags of the
   * resource.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing Registry.
 * An object that represents a container registry.
 *
 * @extends Resource
 */
export interface Registry extends Resource {
  /**
   * @member {Sku} sku The SKU of the container registry.
   */
  sku: Sku;
  /**
   * @member {string} [loginServer] The URL that can be used to log into the
   * container registry.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly loginServer?: string;
  /**
   * @member {Date} [creationDate] The creation date of the container registry
   * in ISO8601 format.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly creationDate?: Date;
  /**
   * @member {ProvisioningState} [provisioningState] The provisioning state of
   * the container registry at the time the operation was called. Possible
   * values include: 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed',
   * 'Canceled'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * @member {Status} [status] The status of the container registry at the time
   * the operation was called.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly status?: Status;
  /**
   * @member {boolean} [adminUserEnabled] The value that indicates whether the
   * admin user is enabled. Default value: false .
   */
  adminUserEnabled?: boolean;
  /**
   * @member {StorageAccountProperties} [storageAccount] The properties of the
   * storage account for the container registry. Only applicable to Classic
   * SKU.
   */
  storageAccount?: StorageAccountProperties;
  /**
   * @member {NetworkRuleSet} [networkRuleSet] The network rule set for a
   * container registry.
   */
  networkRuleSet?: NetworkRuleSet;
}

/**
 * @interface
 * An interface representing RegistryUpdateParameters.
 * The parameters for updating a container registry.
 *
 */
export interface RegistryUpdateParameters {
  /**
   * @member {{ [propertyName: string]: string }} [tags] The tags for the
   * container registry.
   */
  tags?: { [propertyName: string]: string };
  /**
   * @member {Sku} [sku] The SKU of the container registry.
   */
  sku?: Sku;
  /**
   * @member {boolean} [adminUserEnabled] The value that indicates whether the
   * admin user is enabled.
   */
  adminUserEnabled?: boolean;
  /**
   * @member {StorageAccountProperties} [storageAccount] The parameters of a
   * storage account for the container registry. Only applicable to Classic
   * SKU. If specified, the storage account must be in the same physical
   * location as the container registry.
   */
  storageAccount?: StorageAccountProperties;
  /**
   * @member {NetworkRuleSet} [networkRuleSet] The network rule set for a
   * container registry.
   */
  networkRuleSet?: NetworkRuleSet;
}

/**
 * @interface
 * An interface representing RegistryPassword.
 * The login password for the container registry.
 *
 */
export interface RegistryPassword {
  /**
   * @member {PasswordName} [name] The password name. Possible values include:
   * 'password', 'password2'
   */
  name?: PasswordName;
  /**
   * @member {string} [value] The password value.
   */
  value?: string;
}

/**
 * @interface
 * An interface representing RegistryListCredentialsResult.
 * The response from the ListCredentials operation.
 *
 */
export interface RegistryListCredentialsResult {
  /**
   * @member {string} [username] The username for a container registry.
   */
  username?: string;
  /**
   * @member {RegistryPassword[]} [passwords] The list of passwords for a
   * container registry.
   */
  passwords?: RegistryPassword[];
}

/**
 * @interface
 * An interface representing RegenerateCredentialParameters.
 * The parameters used to regenerate the login credential.
 *
 */
export interface RegenerateCredentialParameters {
  /**
   * @member {PasswordName} name Specifies name of the password which should be
   * regenerated -- password or password2. Possible values include: 'password',
   * 'password2'
   */
  name: PasswordName;
}

/**
 * @interface
 * An interface representing RegistryUsage.
 * The quota usage for a container registry.
 *
 */
export interface RegistryUsage {
  /**
   * @member {string} [name] The name of the usage.
   */
  name?: string;
  /**
   * @member {number} [limit] The limit of the usage.
   */
  limit?: number;
  /**
   * @member {number} [currentValue] The current value of the usage.
   */
  currentValue?: number;
  /**
   * @member {RegistryUsageUnit} [unit] The unit of measurement. Possible
   * values include: 'Count', 'Bytes'
   */
  unit?: RegistryUsageUnit;
}

/**
 * @interface
 * An interface representing RegistryUsageListResult.
 * The result of a request to get container registry quota usages.
 *
 */
export interface RegistryUsageListResult {
  /**
   * @member {RegistryUsage[]} [value] The list of container registry quota
   * usages.
   */
  value?: RegistryUsage[];
}

/**
 * @interface
 * An interface representing QuarantinePolicy.
 * An object that represents quarantine policy for a container registry.
 *
 */
export interface QuarantinePolicy {
  /**
   * @member {PolicyStatus} [status] The value that indicates whether the
   * policy is enabled or not. Possible values include: 'enabled', 'disabled'
   */
  status?: PolicyStatus;
}

/**
 * @interface
 * An interface representing TrustPolicy.
 * An object that represents content trust policy for a container registry.
 *
 */
export interface TrustPolicy {
  /**
   * @member {TrustPolicyType} [type] The type of trust policy. Possible values
   * include: 'Notary'
   */
  type?: TrustPolicyType;
  /**
   * @member {PolicyStatus} [status] The value that indicates whether the
   * policy is enabled or not. Possible values include: 'enabled', 'disabled'
   */
  status?: PolicyStatus;
}

/**
 * @interface
 * An interface representing RegistryPolicies.
 * An object that represents policies for a container registry.
 *
 */
export interface RegistryPolicies {
  /**
   * @member {QuarantinePolicy} [quarantinePolicy] An object that represents
   * quarantine policy for a container registry.
   */
  quarantinePolicy?: QuarantinePolicy;
  /**
   * @member {TrustPolicy} [trustPolicy] An object that represents content
   * trust policy for a container registry.
   */
  trustPolicy?: TrustPolicy;
}

/**
 * @interface
 * An interface representing Replication.
 * An object that represents a replication for a container registry.
 *
 * @extends Resource
 */
export interface Replication extends Resource {
  /**
   * @member {ProvisioningState} [provisioningState] The provisioning state of
   * the replication at the time the operation was called. Possible values
   * include: 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed',
   * 'Canceled'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * @member {Status} [status] The status of the replication at the time the
   * operation was called.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly status?: Status;
}

/**
 * @interface
 * An interface representing ReplicationUpdateParameters.
 * The parameters for updating a replication.
 *
 */
export interface ReplicationUpdateParameters {
  /**
   * @member {{ [propertyName: string]: string }} [tags] The tags for the
   * replication.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing Webhook.
 * An object that represents a webhook for a container registry.
 *
 * @extends Resource
 */
export interface Webhook extends Resource {
  /**
   * @member {WebhookStatus} [status] The status of the webhook at the time the
   * operation was called. Possible values include: 'enabled', 'disabled'
   */
  status?: WebhookStatus;
  /**
   * @member {string} [scope] The scope of repositories where the event can be
   * triggered. For example, 'foo:*' means events for all tags under repository
   * 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to
   * 'foo:latest'. Empty means all events.
   */
  scope?: string;
  /**
   * @member {WebhookAction[]} actions The list of actions that trigger the
   * webhook to post notifications.
   */
  actions: WebhookAction[];
  /**
   * @member {ProvisioningState} [provisioningState] The provisioning state of
   * the webhook at the time the operation was called. Possible values include:
   * 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed', 'Canceled'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: ProvisioningState;
}

/**
 * @interface
 * An interface representing WebhookCreateParameters.
 * The parameters for creating a webhook.
 *
 */
export interface WebhookCreateParameters {
  /**
   * @member {{ [propertyName: string]: string }} [tags] The tags for the
   * webhook.
   */
  tags?: { [propertyName: string]: string };
  /**
   * @member {string} location The location of the webhook. This cannot be
   * changed after the resource is created.
   */
  location: string;
  /**
   * @member {string} serviceUri The service URI for the webhook to post
   * notifications.
   */
  serviceUri: string;
  /**
   * @member {{ [propertyName: string]: string }} [customHeaders] Custom
   * headers that will be added to the webhook notifications.
   */
  customHeaders?: { [propertyName: string]: string };
  /**
   * @member {WebhookStatus} [status] The status of the webhook at the time the
   * operation was called. Possible values include: 'enabled', 'disabled'
   */
  status?: WebhookStatus;
  /**
   * @member {string} [scope] The scope of repositories where the event can be
   * triggered. For example, 'foo:*' means events for all tags under repository
   * 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to
   * 'foo:latest'. Empty means all events.
   */
  scope?: string;
  /**
   * @member {WebhookAction[]} actions The list of actions that trigger the
   * webhook to post notifications.
   */
  actions: WebhookAction[];
}

/**
 * @interface
 * An interface representing WebhookUpdateParameters.
 * The parameters for updating a webhook.
 *
 */
export interface WebhookUpdateParameters {
  /**
   * @member {{ [propertyName: string]: string }} [tags] The tags for the
   * webhook.
   */
  tags?: { [propertyName: string]: string };
  /**
   * @member {string} [serviceUri] The service URI for the webhook to post
   * notifications.
   */
  serviceUri?: string;
  /**
   * @member {{ [propertyName: string]: string }} [customHeaders] Custom
   * headers that will be added to the webhook notifications.
   */
  customHeaders?: { [propertyName: string]: string };
  /**
   * @member {WebhookStatus} [status] The status of the webhook at the time the
   * operation was called. Possible values include: 'enabled', 'disabled'
   */
  status?: WebhookStatus;
  /**
   * @member {string} [scope] The scope of repositories where the event can be
   * triggered. For example, 'foo:*' means events for all tags under repository
   * 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to
   * 'foo:latest'. Empty means all events.
   */
  scope?: string;
  /**
   * @member {WebhookAction[]} [actions] The list of actions that trigger the
   * webhook to post notifications.
   */
  actions?: WebhookAction[];
}

/**
 * @interface
 * An interface representing EventInfo.
 * The basic information of an event.
 *
 */
export interface EventInfo {
  /**
   * @member {string} [id] The event ID.
   */
  id?: string;
}

/**
 * @interface
 * An interface representing CallbackConfig.
 * The configuration of service URI and custom headers for the webhook.
 *
 */
export interface CallbackConfig {
  /**
   * @member {string} serviceUri The service URI for the webhook to post
   * notifications.
   */
  serviceUri: string;
  /**
   * @member {{ [propertyName: string]: string }} [customHeaders] Custom
   * headers that will be added to the webhook notifications.
   */
  customHeaders?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing Target.
 * The target of the event.
 *
 */
export interface Target {
  /**
   * @member {string} [mediaType] The MIME type of the referenced object.
   */
  mediaType?: string;
  /**
   * @member {number} [size] The number of bytes of the content. Same as Length
   * field.
   */
  size?: number;
  /**
   * @member {string} [digest] The digest of the content, as defined by the
   * Registry V2 HTTP API Specification.
   */
  digest?: string;
  /**
   * @member {number} [length] The number of bytes of the content. Same as Size
   * field.
   */
  length?: number;
  /**
   * @member {string} [repository] The repository name.
   */
  repository?: string;
  /**
   * @member {string} [url] The direct URL to the content.
   */
  url?: string;
  /**
   * @member {string} [tag] The tag name.
   */
  tag?: string;
}

/**
 * @interface
 * An interface representing Request.
 * The request that generated the event.
 *
 */
export interface Request {
  /**
   * @member {string} [id] The ID of the request that initiated the event.
   */
  id?: string;
  /**
   * @member {string} [addr] The IP or hostname and possibly port of the client
   * connection that initiated the event. This is the RemoteAddr from the
   * standard http request.
   */
  addr?: string;
  /**
   * @member {string} [host] The externally accessible hostname of the registry
   * instance, as specified by the http host header on incoming requests.
   */
  host?: string;
  /**
   * @member {string} [method] The request method that generated the event.
   */
  method?: string;
  /**
   * @member {string} [useragent] The user agent header of the request.
   */
  useragent?: string;
}

/**
 * @interface
 * An interface representing Actor.
 * The agent that initiated the event. For most situations, this could be from
 * the authorization context of the request.
 *
 */
export interface Actor {
  /**
   * @member {string} [name] The subject or username associated with the
   * request context that generated the event.
   */
  name?: string;
}

/**
 * @interface
 * An interface representing Source.
 * The registry node that generated the event. Put differently, while the actor
 * initiates the event, the source generates it.
 *
 */
export interface Source {
  /**
   * @member {string} [addr] The IP or hostname and the port of the registry
   * node that generated the event. Generally, this will be resolved by
   * os.Hostname() along with the running port.
   */
  addr?: string;
  /**
   * @member {string} [instanceID] The running instance of an application.
   * Changes after each restart.
   */
  instanceID?: string;
}

/**
 * @interface
 * An interface representing EventContent.
 * The content of the event request message.
 *
 */
export interface EventContent {
  /**
   * @member {string} [id] The event ID.
   */
  id?: string;
  /**
   * @member {Date} [timestamp] The time at which the event occurred.
   */
  timestamp?: Date;
  /**
   * @member {string} [action] The action that encompasses the provided event.
   */
  action?: string;
  /**
   * @member {Target} [target] The target of the event.
   */
  target?: Target;
  /**
   * @member {Request} [request] The request that generated the event.
   */
  request?: Request;
  /**
   * @member {Actor} [actor] The agent that initiated the event. For most
   * situations, this could be from the authorization context of the request.
   */
  actor?: Actor;
  /**
   * @member {Source} [source] The registry node that generated the event. Put
   * differently, while the actor initiates the event, the source generates it.
   */
  source?: Source;
}

/**
 * @interface
 * An interface representing EventRequestMessage.
 * The event request message sent to the service URI.
 *
 */
export interface EventRequestMessage {
  /**
   * @member {EventContent} [content] The content of the event request message.
   */
  content?: EventContent;
  /**
   * @member {{ [propertyName: string]: string }} [headers] The headers of the
   * event request message.
   */
  headers?: { [propertyName: string]: string };
  /**
   * @member {string} [method] The HTTP method used to send the event request
   * message.
   */
  method?: string;
  /**
   * @member {string} [requestUri] The URI used to send the event request
   * message.
   */
  requestUri?: string;
  /**
   * @member {string} [version] The HTTP message version.
   */
  version?: string;
}

/**
 * @interface
 * An interface representing EventResponseMessage.
 * The event response message received from the service URI.
 *
 */
export interface EventResponseMessage {
  /**
   * @member {string} [content] The content of the event response message.
   */
  content?: string;
  /**
   * @member {{ [propertyName: string]: string }} [headers] The headers of the
   * event response message.
   */
  headers?: { [propertyName: string]: string };
  /**
   * @member {string} [reasonPhrase] The reason phrase of the event response
   * message.
   */
  reasonPhrase?: string;
  /**
   * @member {string} [statusCode] The status code of the event response
   * message.
   */
  statusCode?: string;
  /**
   * @member {string} [version] The HTTP message version.
   */
  version?: string;
}

/**
 * @interface
 * An interface representing Event.
 * The event for a webhook.
 *
 * @extends EventInfo
 */
export interface Event extends EventInfo {
  /**
   * @member {EventRequestMessage} [eventRequestMessage] The event request
   * message sent to the service URI.
   */
  eventRequestMessage?: EventRequestMessage;
  /**
   * @member {EventResponseMessage} [eventResponseMessage] The event response
   * message received from the service URI.
   */
  eventResponseMessage?: EventResponseMessage;
}

/**
 * Contains the possible cases for RunRequest.
 */
export type RunRequestUnion = RunRequest | DockerBuildRequest | FileTaskRunRequest | TaskRunRequest | EncodedTaskRunRequest;

/**
 * @interface
 * An interface representing RunRequest.
 * The request parameters for scheduling a run.
 *
 */
export interface RunRequest {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "RunRequest";
  /**
   * @member {boolean} [isArchiveEnabled] The value that indicates whether
   * archiving is enabled for the run or not. Default value: false .
   */
  isArchiveEnabled?: boolean;
}

/**
 * @interface
 * An interface representing ImageDescriptor.
 * Properties for a registry image.
 *
 */
export interface ImageDescriptor {
  /**
   * @member {string} [registry] The registry login server.
   */
  registry?: string;
  /**
   * @member {string} [repository] The repository name.
   */
  repository?: string;
  /**
   * @member {string} [tag] The tag name.
   */
  tag?: string;
  /**
   * @member {string} [digest] The sha256-based digest of the image manifest.
   */
  digest?: string;
}

/**
 * @interface
 * An interface representing ImageUpdateTrigger.
 * The image update trigger that caused a build.
 *
 */
export interface ImageUpdateTrigger {
  /**
   * @member {string} [id] The unique ID of the trigger.
   */
  id?: string;
  /**
   * @member {Date} [timestamp] The timestamp when the image update happened.
   */
  timestamp?: Date;
  /**
   * @member {ImageDescriptor[]} [images] The list of image updates that caused
   * the build.
   */
  images?: ImageDescriptor[];
}

/**
 * @interface
 * An interface representing SourceTriggerDescriptor.
 * The source trigger that caused a run.
 *
 */
export interface SourceTriggerDescriptor {
  /**
   * @member {string} [id] The unique ID of the trigger.
   */
  id?: string;
  /**
   * @member {string} [eventType] The event type of the trigger.
   */
  eventType?: string;
  /**
   * @member {string} [commitId] The unique ID that identifies a commit.
   */
  commitId?: string;
  /**
   * @member {string} [pullRequestId] The unique ID that identifies pull
   * request.
   */
  pullRequestId?: string;
  /**
   * @member {string} [repositoryUrl] The repository URL.
   */
  repositoryUrl?: string;
  /**
   * @member {string} [branchName] The branch name in the repository.
   */
  branchName?: string;
  /**
   * @member {string} [providerType] The source control provider type.
   */
  providerType?: string;
}

/**
 * @interface
 * An interface representing PlatformProperties.
 * The platform properties against which the run has to happen.
 *
 */
export interface PlatformProperties {
  /**
   * @member {OS} os The operating system type required for the run. Possible
   * values include: 'Windows', 'Linux'
   */
  os: OS;
  /**
   * @member {Architecture} [architecture] The OS architecture. Possible values
   * include: 'amd64', 'x86', 'arm'
   */
  architecture?: Architecture;
  /**
   * @member {Variant} [variant] Variant of the CPU. Possible values include:
   * 'v6', 'v7', 'v8'
   */
  variant?: Variant;
}

/**
 * @interface
 * An interface representing AgentProperties.
 * The properties that determine the run agent configuration.
 *
 */
export interface AgentProperties {
  /**
   * @member {number} [cpu] The CPU configuration in terms of number of cores
   * required for the run.
   */
  cpu?: number;
}

/**
 * @interface
 * An interface representing ProxyResource.
 * The resource model definition for a ARM proxy resource. It will have
 * everything other than required location and tags.
 *
 * @extends BaseResource
 */
export interface ProxyResource extends BaseResource {
  /**
   * @member {string} [id] The resource ID.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] The name of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [type] The type of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
}

/**
 * @interface
 * An interface representing Run.
 * Run resource properties
 *
 * @extends ProxyResource
 */
export interface Run extends ProxyResource {
  /**
   * @member {string} [runId] The unique identifier for the run.
   */
  runId?: string;
  /**
   * @member {RunStatus} [status] The current status of the run. Possible
   * values include: 'Queued', 'Started', 'Running', 'Succeeded', 'Failed',
   * 'Canceled', 'Error', 'Timeout'
   */
  status?: RunStatus;
  /**
   * @member {Date} [lastUpdatedTime] The last updated time for the run.
   */
  lastUpdatedTime?: Date;
  /**
   * @member {RunType} [runType] The type of run. Possible values include:
   * 'QuickBuild', 'QuickRun', 'AutoBuild', 'AutoRun'
   */
  runType?: RunType;
  /**
   * @member {Date} [createTime] The time the run was scheduled.
   */
  createTime?: Date;
  /**
   * @member {Date} [startTime] The time the run started.
   */
  startTime?: Date;
  /**
   * @member {Date} [finishTime] The time the run finished.
   */
  finishTime?: Date;
  /**
   * @member {ImageDescriptor[]} [outputImages] The list of all images that
   * were generated from the run. This is applicable if the run generates base
   * image dependencies.
   */
  outputImages?: ImageDescriptor[];
  /**
   * @member {string} [task] The task against which run was scheduled.
   */
  task?: string;
  /**
   * @member {ImageUpdateTrigger} [imageUpdateTrigger] The image update trigger
   * that caused the run. This is applicable if the task has base image trigger
   * configured.
   */
  imageUpdateTrigger?: ImageUpdateTrigger;
  /**
   * @member {SourceTriggerDescriptor} [sourceTrigger] The source trigger that
   * caused the run.
   */
  sourceTrigger?: SourceTriggerDescriptor;
  /**
   * @member {boolean} [isArchiveEnabled] The value that indicates whether
   * archiving is enabled or not. Default value: false .
   */
  isArchiveEnabled?: boolean;
  /**
   * @member {PlatformProperties} [platform] The platform properties against
   * which the run will happen.
   */
  platform?: PlatformProperties;
  /**
   * @member {AgentProperties} [agentConfiguration] The machine configuration
   * of the run agent.
   */
  agentConfiguration?: AgentProperties;
  /**
   * @member {ProvisioningState} [provisioningState] The provisioning state of
   * a run. Possible values include: 'Creating', 'Updating', 'Deleting',
   * 'Succeeded', 'Failed', 'Canceled'
   */
  provisioningState?: ProvisioningState;
}

/**
 * @interface
 * An interface representing SourceUploadDefinition.
 * The properties of a response to source upload request.
 *
 */
export interface SourceUploadDefinition {
  /**
   * @member {string} [uploadUrl] The URL where the client can upload the
   * source.
   */
  uploadUrl?: string;
  /**
   * @member {string} [relativePath] The relative path to the source. This is
   * used to submit the subsequent queue build request.
   */
  relativePath?: string;
}

/**
 * @interface
 * An interface representing RunFilter.
 * Properties that are enabled for Odata querying on runs.
 *
 */
export interface RunFilter {
  /**
   * @member {string} [runId] The unique identifier for the run.
   */
  runId?: string;
  /**
   * @member {RunType} [runType] The type of run. Possible values include:
   * 'QuickBuild', 'QuickRun', 'AutoBuild', 'AutoRun'
   */
  runType?: RunType;
  /**
   * @member {RunStatus} [status] The current status of the run. Possible
   * values include: 'Queued', 'Started', 'Running', 'Succeeded', 'Failed',
   * 'Canceled', 'Error', 'Timeout'
   */
  status?: RunStatus;
  /**
   * @member {Date} [createTime] The create time for a run.
   */
  createTime?: Date;
  /**
   * @member {Date} [finishTime] The time the run finished.
   */
  finishTime?: Date;
  /**
   * @member {string} [outputImageManifests] The list of comma-separated image
   * manifests that were generated from the run. This is applicable if the run
   * is of
   * build type.
   */
  outputImageManifests?: string;
  /**
   * @member {boolean} [isArchiveEnabled] The value that indicates whether
   * archiving is enabled or not.
   */
  isArchiveEnabled?: boolean;
  /**
   * @member {string} [taskName] The name of the task that the run corresponds
   * to.
   */
  taskName?: string;
}

/**
 * @interface
 * An interface representing RunUpdateParameters.
 * The set of run properties that can be updated.
 *
 */
export interface RunUpdateParameters {
  /**
   * @member {boolean} [isArchiveEnabled] The value that indicates whether
   * archiving is enabled or not.
   */
  isArchiveEnabled?: boolean;
}

/**
 * @interface
 * An interface representing RunGetLogResult.
 * The result of get log link operation.
 *
 */
export interface RunGetLogResult {
  /**
   * @member {string} [logLink] The link to logs for a run on a azure container
   * registry.
   */
  logLink?: string;
}

/**
 * @interface
 * An interface representing BaseImageDependency.
 * Properties that describe a base image dependency.
 *
 */
export interface BaseImageDependency {
  /**
   * @member {BaseImageDependencyType} [type] The type of the base image
   * dependency. Possible values include: 'BuildTime', 'RunTime'
   */
  type?: BaseImageDependencyType;
  /**
   * @member {string} [registry] The registry login server.
   */
  registry?: string;
  /**
   * @member {string} [repository] The repository name.
   */
  repository?: string;
  /**
   * @member {string} [tag] The tag name.
   */
  tag?: string;
  /**
   * @member {string} [digest] The sha256-based digest of the image manifest.
   */
  digest?: string;
}

/**
 * Contains the possible cases for TaskStepProperties.
 */
export type TaskStepPropertiesUnion = TaskStepProperties | DockerBuildStep | FileTaskStep | EncodedTaskStep;

/**
 * @interface
 * An interface representing TaskStepProperties.
 * Base properties for any task step.
 *
 */
export interface TaskStepProperties {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "TaskStepProperties";
  /**
   * @member {BaseImageDependency[]} [baseImageDependencies] List of base image
   * dependencies for a step.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly baseImageDependencies?: BaseImageDependency[];
  /**
   * @member {string} [contextPath] The URL(absolute or relative) of the source
   * context for the task step.
   */
  contextPath?: string;
  /**
   * @member {string} [contextAccessToken] The token (git PAT or SAS token of
   * storage account blob) associated with the context for a step.
   */
  contextAccessToken?: string;
}

/**
 * @interface
 * An interface representing AuthInfo.
 * The authorization properties for accessing the source code repository.
 *
 */
export interface AuthInfo {
  /**
   * @member {TokenType} tokenType The type of Auth token. Possible values
   * include: 'PAT', 'OAuth'
   */
  tokenType: TokenType;
  /**
   * @member {string} token The access token used to access the source control
   * provider.
   */
  token: string;
  /**
   * @member {string} [refreshToken] The refresh token used to refresh the
   * access token.
   */
  refreshToken?: string;
  /**
   * @member {string} [scope] The scope of the access token.
   */
  scope?: string;
  /**
   * @member {number} [expiresIn] Time in seconds that the token remains valid
   */
  expiresIn?: number;
}

/**
 * @interface
 * An interface representing SourceProperties.
 * The properties of the source code repository.
 *
 */
export interface SourceProperties {
  /**
   * @member {SourceControlType} sourceControlType The type of source control
   * service. Possible values include: 'Github', 'VisualStudioTeamService'
   */
  sourceControlType: SourceControlType;
  /**
   * @member {string} repositoryUrl The full URL to the source code repository
   */
  repositoryUrl: string;
  /**
   * @member {string} [branch] The branch name of the source code.
   */
  branch?: string;
  /**
   * @member {AuthInfo} [sourceControlAuthProperties] The authorization
   * properties for accessing the source code repository and to set up
   * webhooks for notifications.
   */
  sourceControlAuthProperties?: AuthInfo;
}

/**
 * @interface
 * An interface representing SourceTrigger.
 * The properties of a source based trigger.
 *
 */
export interface SourceTrigger {
  /**
   * @member {SourceProperties} sourceRepository The properties that describes
   * the source(code) for the task.
   */
  sourceRepository: SourceProperties;
  /**
   * @member {SourceTriggerEvent[]} sourceTriggerEvents The source event
   * corresponding to the trigger.
   */
  sourceTriggerEvents: SourceTriggerEvent[];
  /**
   * @member {TriggerStatus} [status] The current status of trigger. Possible
   * values include: 'Disabled', 'Enabled'
   */
  status?: TriggerStatus;
  /**
   * @member {string} name The name of the trigger.
   */
  name: string;
}

/**
 * @interface
 * An interface representing BaseImageTrigger.
 * The trigger based on base image dependency.
 *
 */
export interface BaseImageTrigger {
  /**
   * @member {BaseImageTriggerType} baseImageTriggerType The type of the auto
   * trigger for base image dependency updates. Possible values include: 'All',
   * 'Runtime'
   */
  baseImageTriggerType: BaseImageTriggerType;
  /**
   * @member {TriggerStatus} [status] The current status of trigger. Possible
   * values include: 'Disabled', 'Enabled'
   */
  status?: TriggerStatus;
  /**
   * @member {string} name The name of the trigger.
   */
  name: string;
}

/**
 * @interface
 * An interface representing TriggerProperties.
 * The properties of a trigger.
 *
 */
export interface TriggerProperties {
  /**
   * @member {SourceTrigger[]} [sourceTriggers] The collection of triggers
   * based on source code repository.
   */
  sourceTriggers?: SourceTrigger[];
  /**
   * @member {BaseImageTrigger} [baseImageTrigger] The trigger based on base
   * image dependencies.
   */
  baseImageTrigger?: BaseImageTrigger;
}

/**
 * @interface
 * An interface representing Task.
 * The task that has the ARM resource and task properties.
 * The task will have all information to schedule a run against it.
 *
 * @extends Resource
 */
export interface Task extends Resource {
  /**
   * @member {ProvisioningState} [provisioningState] The provisioning state of
   * the task. Possible values include: 'Creating', 'Updating', 'Deleting',
   * 'Succeeded', 'Failed', 'Canceled'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * @member {Date} [creationDate] The creation date of task.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly creationDate?: Date;
  /**
   * @member {TaskStatus} [status] The current status of task. Possible values
   * include: 'Disabled', 'Enabled'
   */
  status?: TaskStatus;
  /**
   * @member {PlatformProperties} platform The platform properties against
   * which the run has to happen.
   */
  platform: PlatformProperties;
  /**
   * @member {AgentProperties} [agentConfiguration] The machine configuration
   * of the run agent.
   */
  agentConfiguration?: AgentProperties;
  /**
   * @member {number} [timeout] Run timeout in seconds. Default value: 3600 .
   */
  timeout?: number;
  /**
   * @member {TaskStepPropertiesUnion} step The properties of a task step.
   */
  step: TaskStepPropertiesUnion;
  /**
   * @member {TriggerProperties} [trigger] The properties that describe all
   * triggers for the task.
   */
  trigger?: TriggerProperties;
}

/**
 * @interface
 * An interface representing PlatformUpdateParameters.
 * The properties for updating the platform configuration.
 *
 */
export interface PlatformUpdateParameters {
  /**
   * @member {OS} [os] The operating system type required for the run. Possible
   * values include: 'Windows', 'Linux'
   */
  os?: OS;
  /**
   * @member {Architecture} [architecture] The OS architecture. Possible values
   * include: 'amd64', 'x86', 'arm'
   */
  architecture?: Architecture;
  /**
   * @member {Variant} [variant] Variant of the CPU. Possible values include:
   * 'v6', 'v7', 'v8'
   */
  variant?: Variant;
}

/**
 * Contains the possible cases for TaskStepUpdateParameters.
 */
export type TaskStepUpdateParametersUnion = TaskStepUpdateParameters | DockerBuildStepUpdateParameters | FileTaskStepUpdateParameters | EncodedTaskStepUpdateParameters;

/**
 * @interface
 * An interface representing TaskStepUpdateParameters.
 * Base properties for updating any task step.
 *
 */
export interface TaskStepUpdateParameters {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "TaskStepUpdateParameters";
  /**
   * @member {string} [contextPath] The URL(absolute or relative) of the source
   * context for the task step.
   */
  contextPath?: string;
  /**
   * @member {string} [contextAccessToken] The token (git PAT or SAS token of
   * storage account blob) associated with the context for a step.
   */
  contextAccessToken?: string;
}

/**
 * @interface
 * An interface representing AuthInfoUpdateParameters.
 * The authorization properties for accessing the source code repository.
 *
 */
export interface AuthInfoUpdateParameters {
  /**
   * @member {TokenType} [tokenType] The type of Auth token. Possible values
   * include: 'PAT', 'OAuth'
   */
  tokenType?: TokenType;
  /**
   * @member {string} [token] The access token used to access the source
   * control provider.
   */
  token?: string;
  /**
   * @member {string} [refreshToken] The refresh token used to refresh the
   * access token.
   */
  refreshToken?: string;
  /**
   * @member {string} [scope] The scope of the access token.
   */
  scope?: string;
  /**
   * @member {number} [expiresIn] Time in seconds that the token remains valid
   */
  expiresIn?: number;
}

/**
 * @interface
 * An interface representing SourceUpdateParameters.
 * The properties for updating the source code repository.
 *
 */
export interface SourceUpdateParameters {
  /**
   * @member {SourceControlType} [sourceControlType] The type of source control
   * service. Possible values include: 'Github', 'VisualStudioTeamService'
   */
  sourceControlType?: SourceControlType;
  /**
   * @member {string} [repositoryUrl] The full URL to the source code
   * repository
   */
  repositoryUrl?: string;
  /**
   * @member {string} [branch] The branch name of the source code.
   */
  branch?: string;
  /**
   * @member {AuthInfoUpdateParameters} [sourceControlAuthProperties] The
   * authorization properties for accessing the source code repository and to
   * set up
   * webhooks for notifications.
   */
  sourceControlAuthProperties?: AuthInfoUpdateParameters;
}

/**
 * @interface
 * An interface representing SourceTriggerUpdateParameters.
 * The properties for updating a source based trigger.
 *
 */
export interface SourceTriggerUpdateParameters {
  /**
   * @member {SourceUpdateParameters} [sourceRepository] The properties that
   * describes the source(code) for the task.
   */
  sourceRepository?: SourceUpdateParameters;
  /**
   * @member {SourceTriggerEvent[]} [sourceTriggerEvents] The source event
   * corresponding to the trigger.
   */
  sourceTriggerEvents?: SourceTriggerEvent[];
  /**
   * @member {TriggerStatus} [status] The current status of trigger. Possible
   * values include: 'Disabled', 'Enabled'
   */
  status?: TriggerStatus;
  /**
   * @member {string} name The name of the trigger.
   */
  name: string;
}

/**
 * @interface
 * An interface representing BaseImageTriggerUpdateParameters.
 * The properties for updating base image dependency trigger.
 *
 */
export interface BaseImageTriggerUpdateParameters {
  /**
   * @member {BaseImageTriggerType} [baseImageTriggerType] The type of the auto
   * trigger for base image dependency updates. Possible values include: 'All',
   * 'Runtime'
   */
  baseImageTriggerType?: BaseImageTriggerType;
  /**
   * @member {TriggerStatus} [status] The current status of trigger. Possible
   * values include: 'Disabled', 'Enabled'
   */
  status?: TriggerStatus;
  /**
   * @member {string} name The name of the trigger.
   */
  name: string;
}

/**
 * @interface
 * An interface representing TriggerUpdateParameters.
 * The properties for updating triggers.
 *
 */
export interface TriggerUpdateParameters {
  /**
   * @member {SourceTriggerUpdateParameters[]} [sourceTriggers] The collection
   * of triggers based on source code repository.
   */
  sourceTriggers?: SourceTriggerUpdateParameters[];
  /**
   * @member {BaseImageTriggerUpdateParameters} [baseImageTrigger] The trigger
   * based on base image dependencies.
   */
  baseImageTrigger?: BaseImageTriggerUpdateParameters;
}

/**
 * @interface
 * An interface representing TaskUpdateParameters.
 * The parameters for updating a task.
 *
 */
export interface TaskUpdateParameters {
  /**
   * @member {TaskStatus} [status] The current status of task. Possible values
   * include: 'Disabled', 'Enabled'
   */
  status?: TaskStatus;
  /**
   * @member {PlatformUpdateParameters} [platform] The platform properties
   * against which the run has to happen.
   */
  platform?: PlatformUpdateParameters;
  /**
   * @member {AgentProperties} [agentConfiguration] The machine configuration
   * of the run agent.
   */
  agentConfiguration?: AgentProperties;
  /**
   * @member {number} [timeout] Run timeout in seconds.
   */
  timeout?: number;
  /**
   * @member {TaskStepUpdateParametersUnion} [step] The properties for updating
   * a task step.
   */
  step?: TaskStepUpdateParametersUnion;
  /**
   * @member {TriggerUpdateParameters} [trigger] The properties for updating
   * trigger properties.
   */
  trigger?: TriggerUpdateParameters;
  /**
   * @member {{ [propertyName: string]: string }} [tags] The ARM resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing Argument.
 * The properties of a run argument.
 *
 */
export interface Argument {
  /**
   * @member {string} name The name of the argument.
   */
  name: string;
  /**
   * @member {string} value The value of the argument.
   */
  value: string;
  /**
   * @member {boolean} [isSecret] Flag to indicate whether the argument
   * represents a secret and want to be removed from build logs. Default value:
   * false .
   */
  isSecret?: boolean;
}

/**
 * @interface
 * An interface representing DockerBuildRequest.
 * The parameters for a docker quick build.
 *
 */
export interface DockerBuildRequest {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "DockerBuildRequest";
  /**
   * @member {boolean} [isArchiveEnabled] The value that indicates whether
   * archiving is enabled for the run or not. Default value: false .
   */
  isArchiveEnabled?: boolean;
  /**
   * @member {string[]} [imageNames] The fully qualified image names including
   * the repository and tag.
   */
  imageNames?: string[];
  /**
   * @member {boolean} [isPushEnabled] The value of this property indicates
   * whether the image built should be pushed to the registry or not. Default
   * value: true .
   */
  isPushEnabled?: boolean;
  /**
   * @member {boolean} [noCache] The value of this property indicates whether
   * the image cache is enabled or not. Default value: false .
   */
  noCache?: boolean;
  /**
   * @member {string} dockerFilePath The Docker file path relative to the
   * source location.
   */
  dockerFilePath: string;
  /**
   * @member {Argument[]} [argumentsProperty] The collection of override
   * arguments to be used when executing the run.
   */
  argumentsProperty?: Argument[];
  /**
   * @member {number} [timeout] Run timeout in seconds. Default value: 3600 .
   */
  timeout?: number;
  /**
   * @member {PlatformProperties} platform The platform properties against
   * which the run has to happen.
   */
  platform: PlatformProperties;
  /**
   * @member {AgentProperties} [agentConfiguration] The machine configuration
   * of the run agent.
   */
  agentConfiguration?: AgentProperties;
  /**
   * @member {string} [sourceLocation] The URL(absolute or relative) of the
   * source context. It can be an URL to a tar or git repository.
   * If it is relative URL, the relative path should be obtained from calling
   * listBuildSourceUploadUrl API.
   */
  sourceLocation?: string;
}

/**
 * @interface
 * An interface representing SetValue.
 * The properties of a overridable value that can be passed to a task template.
 *
 */
export interface SetValue {
  /**
   * @member {string} name The name of the overridable value.
   */
  name: string;
  /**
   * @member {string} value The overridable value.
   */
  value: string;
  /**
   * @member {boolean} [isSecret] Flag to indicate whether the value represents
   * a secret or not. Default value: false .
   */
  isSecret?: boolean;
}

/**
 * @interface
 * An interface representing FileTaskRunRequest.
 * The request parameters for a scheduling run against a task file.
 *
 */
export interface FileTaskRunRequest {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "FileTaskRunRequest";
  /**
   * @member {boolean} [isArchiveEnabled] The value that indicates whether
   * archiving is enabled for the run or not. Default value: false .
   */
  isArchiveEnabled?: boolean;
  /**
   * @member {string} taskFilePath The template/definition file path relative
   * to the source.
   */
  taskFilePath: string;
  /**
   * @member {string} [valuesFilePath] The values/parameters file path relative
   * to the source.
   */
  valuesFilePath?: string;
  /**
   * @member {SetValue[]} [values] The collection of overridable values that
   * can be passed when running a task.
   */
  values?: SetValue[];
  /**
   * @member {number} [timeout] Run timeout in seconds. Default value: 3600 .
   */
  timeout?: number;
  /**
   * @member {PlatformProperties} platform The platform properties against
   * which the run has to happen.
   */
  platform: PlatformProperties;
  /**
   * @member {AgentProperties} [agentConfiguration] The machine configuration
   * of the run agent.
   */
  agentConfiguration?: AgentProperties;
  /**
   * @member {string} [sourceLocation] The URL(absolute or relative) of the
   * source context. It can be an URL to a tar or git repository.
   * If it is relative URL, the relative path should be obtained from calling
   * listBuildSourceUploadUrl API.
   */
  sourceLocation?: string;
}

/**
 * @interface
 * An interface representing TaskRunRequest.
 * The parameters for a task run request.
 *
 */
export interface TaskRunRequest {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "TaskRunRequest";
  /**
   * @member {boolean} [isArchiveEnabled] The value that indicates whether
   * archiving is enabled for the run or not. Default value: false .
   */
  isArchiveEnabled?: boolean;
  /**
   * @member {string} taskName The name of task against which run has to be
   * queued.
   */
  taskName: string;
  /**
   * @member {SetValue[]} [values] The collection of overridable values that
   * can be passed when running a task.
   */
  values?: SetValue[];
}

/**
 * @interface
 * An interface representing EncodedTaskRunRequest.
 * The parameters for a quick task run request.
 *
 */
export interface EncodedTaskRunRequest {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "EncodedTaskRunRequest";
  /**
   * @member {boolean} [isArchiveEnabled] The value that indicates whether
   * archiving is enabled for the run or not. Default value: false .
   */
  isArchiveEnabled?: boolean;
  /**
   * @member {string} encodedTaskContent Base64 encoded value of the
   * template/definition file content.
   */
  encodedTaskContent: string;
  /**
   * @member {string} [encodedValuesContent] Base64 encoded value of the
   * parameters/values file content.
   */
  encodedValuesContent?: string;
  /**
   * @member {SetValue[]} [values] The collection of overridable values that
   * can be passed when running a task.
   */
  values?: SetValue[];
  /**
   * @member {number} [timeout] Run timeout in seconds. Default value: 3600 .
   */
  timeout?: number;
  /**
   * @member {PlatformProperties} platform The platform properties against
   * which the run has to happen.
   */
  platform: PlatformProperties;
  /**
   * @member {AgentProperties} [agentConfiguration] The machine configuration
   * of the run agent.
   */
  agentConfiguration?: AgentProperties;
  /**
   * @member {string} [sourceLocation] The URL(absolute or relative) of the
   * source context. It can be an URL to a tar or git repository.
   * If it is relative URL, the relative path should be obtained from calling
   * listBuildSourceUploadUrl API.
   */
  sourceLocation?: string;
}

/**
 * @interface
 * An interface representing DockerBuildStep.
 * The Docker build step.
 *
 */
export interface DockerBuildStep {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Docker";
  /**
   * @member {BaseImageDependency[]} [baseImageDependencies] List of base image
   * dependencies for a step.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly baseImageDependencies?: BaseImageDependency[];
  /**
   * @member {string} [contextPath] The URL(absolute or relative) of the source
   * context for the task step.
   */
  contextPath?: string;
  /**
   * @member {string} [contextAccessToken] The token (git PAT or SAS token of
   * storage account blob) associated with the context for a step.
   */
  contextAccessToken?: string;
  /**
   * @member {string[]} [imageNames] The fully qualified image names including
   * the repository and tag.
   */
  imageNames?: string[];
  /**
   * @member {boolean} [isPushEnabled] The value of this property indicates
   * whether the image built should be pushed to the registry or not. Default
   * value: true .
   */
  isPushEnabled?: boolean;
  /**
   * @member {boolean} [noCache] The value of this property indicates whether
   * the image cache is enabled or not. Default value: false .
   */
  noCache?: boolean;
  /**
   * @member {string} dockerFilePath The Docker file path relative to the
   * source context.
   */
  dockerFilePath: string;
  /**
   * @member {Argument[]} [argumentsProperty] The collection of override
   * arguments to be used when executing this build step.
   */
  argumentsProperty?: Argument[];
}

/**
 * @interface
 * An interface representing FileTaskStep.
 * The properties of a task step.
 *
 */
export interface FileTaskStep {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "FileTask";
  /**
   * @member {BaseImageDependency[]} [baseImageDependencies] List of base image
   * dependencies for a step.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly baseImageDependencies?: BaseImageDependency[];
  /**
   * @member {string} [contextPath] The URL(absolute or relative) of the source
   * context for the task step.
   */
  contextPath?: string;
  /**
   * @member {string} [contextAccessToken] The token (git PAT or SAS token of
   * storage account blob) associated with the context for a step.
   */
  contextAccessToken?: string;
  /**
   * @member {string} taskFilePath The task template/definition file path
   * relative to the source context.
   */
  taskFilePath: string;
  /**
   * @member {string} [valuesFilePath] The task values/parameters file path
   * relative to the source context.
   */
  valuesFilePath?: string;
  /**
   * @member {SetValue[]} [values] The collection of overridable values that
   * can be passed when running a task.
   */
  values?: SetValue[];
}

/**
 * @interface
 * An interface representing EncodedTaskStep.
 * The properties of a encoded task step.
 *
 */
export interface EncodedTaskStep {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "EncodedTask";
  /**
   * @member {BaseImageDependency[]} [baseImageDependencies] List of base image
   * dependencies for a step.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly baseImageDependencies?: BaseImageDependency[];
  /**
   * @member {string} [contextPath] The URL(absolute or relative) of the source
   * context for the task step.
   */
  contextPath?: string;
  /**
   * @member {string} [contextAccessToken] The token (git PAT or SAS token of
   * storage account blob) associated with the context for a step.
   */
  contextAccessToken?: string;
  /**
   * @member {string} encodedTaskContent Base64 encoded value of the
   * template/definition file content.
   */
  encodedTaskContent: string;
  /**
   * @member {string} [encodedValuesContent] Base64 encoded value of the
   * parameters/values file content.
   */
  encodedValuesContent?: string;
  /**
   * @member {SetValue[]} [values] The collection of overridable values that
   * can be passed when running a task.
   */
  values?: SetValue[];
}

/**
 * @interface
 * An interface representing DockerBuildStepUpdateParameters.
 * The properties for updating a docker build step.
 *
 */
export interface DockerBuildStepUpdateParameters {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Docker";
  /**
   * @member {string} [contextPath] The URL(absolute or relative) of the source
   * context for the task step.
   */
  contextPath?: string;
  /**
   * @member {string} [contextAccessToken] The token (git PAT or SAS token of
   * storage account blob) associated with the context for a step.
   */
  contextAccessToken?: string;
  /**
   * @member {string[]} [imageNames] The fully qualified image names including
   * the repository and tag.
   */
  imageNames?: string[];
  /**
   * @member {boolean} [isPushEnabled] The value of this property indicates
   * whether the image built should be pushed to the registry or not.
   */
  isPushEnabled?: boolean;
  /**
   * @member {boolean} [noCache] The value of this property indicates whether
   * the image cache is enabled or not.
   */
  noCache?: boolean;
  /**
   * @member {string} [dockerFilePath] The Docker file path relative to the
   * source context.
   */
  dockerFilePath?: string;
  /**
   * @member {Argument[]} [argumentsProperty] The collection of override
   * arguments to be used when executing this build step.
   */
  argumentsProperty?: Argument[];
}

/**
 * @interface
 * An interface representing FileTaskStepUpdateParameters.
 * The properties of updating a task step.
 *
 */
export interface FileTaskStepUpdateParameters {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "FileTask";
  /**
   * @member {string} [contextPath] The URL(absolute or relative) of the source
   * context for the task step.
   */
  contextPath?: string;
  /**
   * @member {string} [contextAccessToken] The token (git PAT or SAS token of
   * storage account blob) associated with the context for a step.
   */
  contextAccessToken?: string;
  /**
   * @member {string} [taskFilePath] The task template/definition file path
   * relative to the source context.
   */
  taskFilePath?: string;
  /**
   * @member {string} [valuesFilePath] The values/parameters file path relative
   * to the source context.
   */
  valuesFilePath?: string;
  /**
   * @member {SetValue[]} [values] The collection of overridable values that
   * can be passed when running a task.
   */
  values?: SetValue[];
}

/**
 * @interface
 * An interface representing EncodedTaskStepUpdateParameters.
 * The properties for updating encoded task step.
 *
 */
export interface EncodedTaskStepUpdateParameters {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "EncodedTask";
  /**
   * @member {string} [contextPath] The URL(absolute or relative) of the source
   * context for the task step.
   */
  contextPath?: string;
  /**
   * @member {string} [contextAccessToken] The token (git PAT or SAS token of
   * storage account blob) associated with the context for a step.
   */
  contextAccessToken?: string;
  /**
   * @member {string} [encodedTaskContent] Base64 encoded value of the
   * template/definition file content.
   */
  encodedTaskContent?: string;
  /**
   * @member {string} [encodedValuesContent] Base64 encoded value of the
   * parameters/values file content.
   */
  encodedValuesContent?: string;
  /**
   * @member {SetValue[]} [values] The collection of overridable values that
   * can be passed when running a task.
   */
  values?: SetValue[];
}

/**
 * @interface
 * An interface representing RunsListOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface RunsListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [filter] The runs filter to apply on the operation.
   * Arithmetic operators are not supported. The allowed string function is
   * 'contains'. All logical operators except 'Not', 'Has', 'All' are allowed.
   */
  filter?: string;
  /**
   * @member {number} [top] $top is supported for get list of runs, which
   * limits the maximum number of runs to return.
   */
  top?: number;
}

/**
 * @interface
 * An interface representing ContainerRegistryManagementClientOptions.
 * @extends AzureServiceClientOptions
 */
export interface ContainerRegistryManagementClientOptions extends AzureServiceClientOptions {
  /**
   * @member {string} [baseUri]
   */
  baseUri?: string;
}


/**
 * @interface
 * An interface representing the RegistryListResult.
 * The result of a request to list container registries.
 *
 * @extends Array<Registry>
 */
export interface RegistryListResult extends Array<Registry> {
  /**
   * @member {string} [nextLink] The URI that can be used to request the next
   * list of container registries.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the OperationListResult.
 * The result of a request to list container registry operations.
 *
 * @extends Array<OperationDefinition>
 */
export interface OperationListResult extends Array<OperationDefinition> {
  /**
   * @member {string} [nextLink] The URI that can be used to request the next
   * list of container registry operations.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ReplicationListResult.
 * The result of a request to list replications for a container registry.
 *
 * @extends Array<Replication>
 */
export interface ReplicationListResult extends Array<Replication> {
  /**
   * @member {string} [nextLink] The URI that can be used to request the next
   * list of replications.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the WebhookListResult.
 * The result of a request to list webhooks for a container registry.
 *
 * @extends Array<Webhook>
 */
export interface WebhookListResult extends Array<Webhook> {
  /**
   * @member {string} [nextLink] The URI that can be used to request the next
   * list of webhooks.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the EventListResult.
 * The result of a request to list events for a webhook.
 *
 * @extends Array<Event>
 */
export interface EventListResult extends Array<Event> {
  /**
   * @member {string} [nextLink] The URI that can be used to request the next
   * list of events.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the RunListResult.
 * Collection of runs.
 *
 * @extends Array<Run>
 */
export interface RunListResult extends Array<Run> {
  /**
   * @member {string} [nextLink] The URI that can be used to request the next
   * set of paged results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the TaskListResult.
 * The collection of tasks.
 *
 * @extends Array<Task>
 */
export interface TaskListResult extends Array<Task> {
  /**
   * @member {string} [nextLink] The URI that can be used to request the next
   * set of paged results.
   */
  nextLink?: string;
}

/**
 * Defines values for ImportMode.
 * Possible values include: 'NoForce', 'Force'
 * @readonly
 * @enum {string}
 */
export type ImportMode = 'NoForce' | 'Force';

/**
 * Defines values for SkuName.
 * Possible values include: 'Classic', 'Basic', 'Standard', 'Premium'
 * @readonly
 * @enum {string}
 */
export type SkuName = 'Classic' | 'Basic' | 'Standard' | 'Premium';

/**
 * Defines values for SkuTier.
 * Possible values include: 'Classic', 'Basic', 'Standard', 'Premium'
 * @readonly
 * @enum {string}
 */
export type SkuTier = 'Classic' | 'Basic' | 'Standard' | 'Premium';

/**
 * Defines values for ProvisioningState.
 * Possible values include: 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed', 'Canceled'
 * @readonly
 * @enum {string}
 */
export type ProvisioningState = 'Creating' | 'Updating' | 'Deleting' | 'Succeeded' | 'Failed' | 'Canceled';

/**
 * Defines values for DefaultAction.
 * Possible values include: 'Allow', 'Deny'
 * @readonly
 * @enum {string}
 */
export type DefaultAction = 'Allow' | 'Deny';

/**
 * Defines values for PasswordName.
 * Possible values include: 'password', 'password2'
 * @readonly
 * @enum {string}
 */
export type PasswordName = 'password' | 'password2';

/**
 * Defines values for RegistryUsageUnit.
 * Possible values include: 'Count', 'Bytes'
 * @readonly
 * @enum {string}
 */
export type RegistryUsageUnit = 'Count' | 'Bytes';

/**
 * Defines values for PolicyStatus.
 * Possible values include: 'enabled', 'disabled'
 * @readonly
 * @enum {string}
 */
export type PolicyStatus = 'enabled' | 'disabled';

/**
 * Defines values for TrustPolicyType.
 * Possible values include: 'Notary'
 * @readonly
 * @enum {string}
 */
export type TrustPolicyType = 'Notary';

/**
 * Defines values for WebhookStatus.
 * Possible values include: 'enabled', 'disabled'
 * @readonly
 * @enum {string}
 */
export type WebhookStatus = 'enabled' | 'disabled';

/**
 * Defines values for WebhookAction.
 * Possible values include: 'push', 'delete', 'quarantine'
 * @readonly
 * @enum {string}
 */
export type WebhookAction = 'push' | 'delete' | 'quarantine';

/**
 * Defines values for RunStatus.
 * Possible values include: 'Queued', 'Started', 'Running', 'Succeeded', 'Failed', 'Canceled',
 * 'Error', 'Timeout'
 * @readonly
 * @enum {string}
 */
export type RunStatus = 'Queued' | 'Started' | 'Running' | 'Succeeded' | 'Failed' | 'Canceled' | 'Error' | 'Timeout';

/**
 * Defines values for RunType.
 * Possible values include: 'QuickBuild', 'QuickRun', 'AutoBuild', 'AutoRun'
 * @readonly
 * @enum {string}
 */
export type RunType = 'QuickBuild' | 'QuickRun' | 'AutoBuild' | 'AutoRun';

/**
 * Defines values for OS.
 * Possible values include: 'Windows', 'Linux'
 * @readonly
 * @enum {string}
 */
export type OS = 'Windows' | 'Linux';

/**
 * Defines values for Architecture.
 * Possible values include: 'amd64', 'x86', 'arm'
 * @readonly
 * @enum {string}
 */
export type Architecture = 'amd64' | 'x86' | 'arm';

/**
 * Defines values for Variant.
 * Possible values include: 'v6', 'v7', 'v8'
 * @readonly
 * @enum {string}
 */
export type Variant = 'v6' | 'v7' | 'v8';

/**
 * Defines values for TaskStatus.
 * Possible values include: 'Disabled', 'Enabled'
 * @readonly
 * @enum {string}
 */
export type TaskStatus = 'Disabled' | 'Enabled';

/**
 * Defines values for BaseImageDependencyType.
 * Possible values include: 'BuildTime', 'RunTime'
 * @readonly
 * @enum {string}
 */
export type BaseImageDependencyType = 'BuildTime' | 'RunTime';

/**
 * Defines values for SourceControlType.
 * Possible values include: 'Github', 'VisualStudioTeamService'
 * @readonly
 * @enum {string}
 */
export type SourceControlType = 'Github' | 'VisualStudioTeamService';

/**
 * Defines values for TokenType.
 * Possible values include: 'PAT', 'OAuth'
 * @readonly
 * @enum {string}
 */
export type TokenType = 'PAT' | 'OAuth';

/**
 * Defines values for SourceTriggerEvent.
 * Possible values include: 'commit', 'pullrequest'
 * @readonly
 * @enum {string}
 */
export type SourceTriggerEvent = 'commit' | 'pullrequest';

/**
 * Defines values for TriggerStatus.
 * Possible values include: 'Disabled', 'Enabled'
 * @readonly
 * @enum {string}
 */
export type TriggerStatus = 'Disabled' | 'Enabled';

/**
 * Defines values for BaseImageTriggerType.
 * Possible values include: 'All', 'Runtime'
 * @readonly
 * @enum {string}
 */
export type BaseImageTriggerType = 'All' | 'Runtime';

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type RegistriesCheckNameAvailabilityResponse = RegistryNameStatus & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RegistryNameStatus;
    };
};

/**
 * Contains response data for the get operation.
 */
export type RegistriesGetResponse = Registry & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Registry;
    };
};

/**
 * Contains response data for the create operation.
 */
export type RegistriesCreateResponse = Registry & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Registry;
    };
};

/**
 * Contains response data for the update operation.
 */
export type RegistriesUpdateResponse = Registry & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Registry;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type RegistriesListByResourceGroupResponse = RegistryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RegistryListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type RegistriesListResponse = RegistryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RegistryListResult;
    };
};

/**
 * Contains response data for the listCredentials operation.
 */
export type RegistriesListCredentialsResponse = RegistryListCredentialsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RegistryListCredentialsResult;
    };
};

/**
 * Contains response data for the regenerateCredential operation.
 */
export type RegistriesRegenerateCredentialResponse = RegistryListCredentialsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RegistryListCredentialsResult;
    };
};

/**
 * Contains response data for the listUsages operation.
 */
export type RegistriesListUsagesResponse = RegistryUsageListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RegistryUsageListResult;
    };
};

/**
 * Contains response data for the listPolicies operation.
 */
export type RegistriesListPoliciesResponse = RegistryPolicies & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RegistryPolicies;
    };
};

/**
 * Contains response data for the updatePolicies operation.
 */
export type RegistriesUpdatePoliciesResponse = RegistryPolicies & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RegistryPolicies;
    };
};

/**
 * Contains response data for the scheduleRun operation.
 */
export type RegistriesScheduleRunResponse = Run & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Run;
    };
};

/**
 * Contains response data for the getBuildSourceUploadUrl operation.
 */
export type RegistriesGetBuildSourceUploadUrlResponse = SourceUploadDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SourceUploadDefinition;
    };
};

/**
 * Contains response data for the beginCreate operation.
 */
export type RegistriesBeginCreateResponse = Registry & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Registry;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type RegistriesBeginUpdateResponse = Registry & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Registry;
    };
};

/**
 * Contains response data for the beginUpdatePolicies operation.
 */
export type RegistriesBeginUpdatePoliciesResponse = RegistryPolicies & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RegistryPolicies;
    };
};

/**
 * Contains response data for the beginScheduleRun operation.
 */
export type RegistriesBeginScheduleRunResponse = Run & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Run;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type RegistriesListByResourceGroupNextResponse = RegistryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RegistryListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type RegistriesListNextResponse = RegistryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RegistryListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ReplicationsGetResponse = Replication & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Replication;
    };
};

/**
 * Contains response data for the create operation.
 */
export type ReplicationsCreateResponse = Replication & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Replication;
    };
};

/**
 * Contains response data for the update operation.
 */
export type ReplicationsUpdateResponse = Replication & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Replication;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ReplicationsListResponse = ReplicationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ReplicationListResult;
    };
};

/**
 * Contains response data for the beginCreate operation.
 */
export type ReplicationsBeginCreateResponse = Replication & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Replication;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type ReplicationsBeginUpdateResponse = Replication & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Replication;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ReplicationsListNextResponse = ReplicationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ReplicationListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type WebhooksGetResponse = Webhook & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Webhook;
    };
};

/**
 * Contains response data for the create operation.
 */
export type WebhooksCreateResponse = Webhook & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Webhook;
    };
};

/**
 * Contains response data for the update operation.
 */
export type WebhooksUpdateResponse = Webhook & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Webhook;
    };
};

/**
 * Contains response data for the list operation.
 */
export type WebhooksListResponse = WebhookListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WebhookListResult;
    };
};

/**
 * Contains response data for the ping operation.
 */
export type WebhooksPingResponse = EventInfo & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EventInfo;
    };
};

/**
 * Contains response data for the getCallbackConfig operation.
 */
export type WebhooksGetCallbackConfigResponse = CallbackConfig & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CallbackConfig;
    };
};

/**
 * Contains response data for the listEvents operation.
 */
export type WebhooksListEventsResponse = EventListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EventListResult;
    };
};

/**
 * Contains response data for the beginCreate operation.
 */
export type WebhooksBeginCreateResponse = Webhook & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Webhook;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type WebhooksBeginUpdateResponse = Webhook & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Webhook;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type WebhooksListNextResponse = WebhookListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WebhookListResult;
    };
};

/**
 * Contains response data for the listEventsNext operation.
 */
export type WebhooksListEventsNextResponse = EventListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EventListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type RunsListResponse = RunListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RunListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type RunsGetResponse = Run & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Run;
    };
};

/**
 * Contains response data for the update operation.
 */
export type RunsUpdateResponse = Run & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Run;
    };
};

/**
 * Contains response data for the getLogSasUrl operation.
 */
export type RunsGetLogSasUrlResponse = RunGetLogResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RunGetLogResult;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type RunsBeginUpdateResponse = Run & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Run;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type RunsListNextResponse = RunListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RunListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type TasksListResponse = TaskListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TaskListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type TasksGetResponse = Task & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Task;
    };
};

/**
 * Contains response data for the create operation.
 */
export type TasksCreateResponse = Task & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Task;
    };
};

/**
 * Contains response data for the update operation.
 */
export type TasksUpdateResponse = Task & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Task;
    };
};

/**
 * Contains response data for the getDetails operation.
 */
export type TasksGetDetailsResponse = Task & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Task;
    };
};

/**
 * Contains response data for the beginCreate operation.
 */
export type TasksBeginCreateResponse = Task & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Task;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type TasksBeginUpdateResponse = Task & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Task;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type TasksListNextResponse = TaskListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TaskListResult;
    };
};
