/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/webhooksMappers";
import * as Parameters from "../models/parameters";
import { ContainerRegistryManagementClientContext } from "../containerRegistryManagementClientContext";

/** Class representing a Webhooks. */
export class Webhooks {
  private readonly client: ContainerRegistryManagementClientContext;

  /**
   * Create a Webhooks.
   * @param {ContainerRegistryManagementClientContext} client Reference to the service client.
   */
  constructor(client: ContainerRegistryManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets the properties of the specified webhook.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param webhookName The name of the webhook.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebhooksGetResponse>
   */
  get(resourceGroupName: string, registryName: string, webhookName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebhooksGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param webhookName The name of the webhook.
   * @param callback The callback
   */
  get(resourceGroupName: string, registryName: string, webhookName: string, callback: msRest.ServiceCallback<Models.Webhook>): void;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param webhookName The name of the webhook.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, registryName: string, webhookName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Webhook>): void;
  get(resourceGroupName: string, registryName: string, webhookName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Webhook>, callback?: msRest.ServiceCallback<Models.Webhook>): Promise<Models.WebhooksGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        registryName,
        webhookName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.WebhooksGetResponse>;
  }

  /**
   * Creates a webhook for a container registry with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param webhookName The name of the webhook.
   * @param webhookCreateParameters The parameters for creating a webhook.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebhooksCreateResponse>
   */
  create(resourceGroupName: string, registryName: string, webhookName: string, webhookCreateParameters: Models.WebhookCreateParameters, options?: msRest.RequestOptionsBase): Promise<Models.WebhooksCreateResponse> {
    return this.beginCreate(resourceGroupName,registryName,webhookName,webhookCreateParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.WebhooksCreateResponse>;
  }

  /**
   * Deletes a webhook from a container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param webhookName The name of the webhook.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, registryName: string, webhookName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,registryName,webhookName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Updates a webhook with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param webhookName The name of the webhook.
   * @param webhookUpdateParameters The parameters for updating a webhook.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebhooksUpdateResponse>
   */
  update(resourceGroupName: string, registryName: string, webhookName: string, webhookUpdateParameters: Models.WebhookUpdateParameters, options?: msRest.RequestOptionsBase): Promise<Models.WebhooksUpdateResponse> {
    return this.beginUpdate(resourceGroupName,registryName,webhookName,webhookUpdateParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.WebhooksUpdateResponse>;
  }

  /**
   * Lists all the webhooks for the specified container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebhooksListResponse>
   */
  list(resourceGroupName: string, registryName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebhooksListResponse>;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param callback The callback
   */
  list(resourceGroupName: string, registryName: string, callback: msRest.ServiceCallback<Models.WebhookListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, registryName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebhookListResult>): void;
  list(resourceGroupName: string, registryName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WebhookListResult>, callback?: msRest.ServiceCallback<Models.WebhookListResult>): Promise<Models.WebhooksListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        registryName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.WebhooksListResponse>;
  }

  /**
   * Triggers a ping event to be sent to the webhook.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param webhookName The name of the webhook.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebhooksPingResponse>
   */
  ping(resourceGroupName: string, registryName: string, webhookName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebhooksPingResponse>;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param webhookName The name of the webhook.
   * @param callback The callback
   */
  ping(resourceGroupName: string, registryName: string, webhookName: string, callback: msRest.ServiceCallback<Models.EventInfo>): void;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param webhookName The name of the webhook.
   * @param options The optional parameters
   * @param callback The callback
   */
  ping(resourceGroupName: string, registryName: string, webhookName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EventInfo>): void;
  ping(resourceGroupName: string, registryName: string, webhookName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EventInfo>, callback?: msRest.ServiceCallback<Models.EventInfo>): Promise<Models.WebhooksPingResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        registryName,
        webhookName,
        options
      },
      pingOperationSpec,
      callback) as Promise<Models.WebhooksPingResponse>;
  }

  /**
   * Gets the configuration of service URI and custom headers for the webhook.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param webhookName The name of the webhook.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebhooksGetCallbackConfigResponse>
   */
  getCallbackConfig(resourceGroupName: string, registryName: string, webhookName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebhooksGetCallbackConfigResponse>;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param webhookName The name of the webhook.
   * @param callback The callback
   */
  getCallbackConfig(resourceGroupName: string, registryName: string, webhookName: string, callback: msRest.ServiceCallback<Models.CallbackConfig>): void;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param webhookName The name of the webhook.
   * @param options The optional parameters
   * @param callback The callback
   */
  getCallbackConfig(resourceGroupName: string, registryName: string, webhookName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CallbackConfig>): void;
  getCallbackConfig(resourceGroupName: string, registryName: string, webhookName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CallbackConfig>, callback?: msRest.ServiceCallback<Models.CallbackConfig>): Promise<Models.WebhooksGetCallbackConfigResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        registryName,
        webhookName,
        options
      },
      getCallbackConfigOperationSpec,
      callback) as Promise<Models.WebhooksGetCallbackConfigResponse>;
  }

  /**
   * Lists recent events for the specified webhook.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param webhookName The name of the webhook.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebhooksListEventsResponse>
   */
  listEvents(resourceGroupName: string, registryName: string, webhookName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebhooksListEventsResponse>;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param webhookName The name of the webhook.
   * @param callback The callback
   */
  listEvents(resourceGroupName: string, registryName: string, webhookName: string, callback: msRest.ServiceCallback<Models.EventListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param webhookName The name of the webhook.
   * @param options The optional parameters
   * @param callback The callback
   */
  listEvents(resourceGroupName: string, registryName: string, webhookName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EventListResult>): void;
  listEvents(resourceGroupName: string, registryName: string, webhookName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EventListResult>, callback?: msRest.ServiceCallback<Models.EventListResult>): Promise<Models.WebhooksListEventsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        registryName,
        webhookName,
        options
      },
      listEventsOperationSpec,
      callback) as Promise<Models.WebhooksListEventsResponse>;
  }

  /**
   * Creates a webhook for a container registry with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param webhookName The name of the webhook.
   * @param webhookCreateParameters The parameters for creating a webhook.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreate(resourceGroupName: string, registryName: string, webhookName: string, webhookCreateParameters: Models.WebhookCreateParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        registryName,
        webhookName,
        webhookCreateParameters,
        options
      },
      beginCreateOperationSpec,
      options);
  }

  /**
   * Deletes a webhook from a container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param webhookName The name of the webhook.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, registryName: string, webhookName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        registryName,
        webhookName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Updates a webhook with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param webhookName The name of the webhook.
   * @param webhookUpdateParameters The parameters for updating a webhook.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(resourceGroupName: string, registryName: string, webhookName: string, webhookUpdateParameters: Models.WebhookUpdateParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        registryName,
        webhookName,
        webhookUpdateParameters,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Lists all the webhooks for the specified container registry.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebhooksListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebhooksListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.WebhookListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebhookListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WebhookListResult>, callback?: msRest.ServiceCallback<Models.WebhookListResult>): Promise<Models.WebhooksListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.WebhooksListNextResponse>;
  }

  /**
   * Lists recent events for the specified webhook.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WebhooksListEventsNextResponse>
   */
  listEventsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebhooksListEventsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listEventsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.EventListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listEventsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EventListResult>): void;
  listEventsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EventListResult>, callback?: msRest.ServiceCallback<Models.EventListResult>): Promise<Models.WebhooksListEventsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listEventsNextOperationSpec,
      callback) as Promise<Models.WebhooksListEventsNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName,
    Parameters.webhookName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Webhook
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WebhookListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const pingOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}/ping",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName,
    Parameters.webhookName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventInfo
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCallbackConfigOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}/getCallbackConfig",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName,
    Parameters.webhookName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CallbackConfig
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listEventsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}/listEvents",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName,
    Parameters.webhookName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName,
    Parameters.webhookName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "webhookCreateParameters",
    mapper: {
      ...Mappers.WebhookCreateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Webhook
    },
    201: {
      bodyMapper: Mappers.Webhook
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName,
    Parameters.webhookName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName,
    Parameters.webhookName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "webhookUpdateParameters",
    mapper: {
      ...Mappers.WebhookUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Webhook
    },
    201: {
      bodyMapper: Mappers.Webhook
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WebhookListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listEventsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
